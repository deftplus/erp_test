
#Область ПроцедурыОтрисовкиДиаграммыПроцессов

// Процедура выводит диаграмму этапов в поле табличного документа
//
Функция ВывестиДиаграммуЭтапов(Этапы, Уровни, СоответствиеРисунковИЭтапов, ЭкземплярПроцесса = Неопределено, ВыбранныйЭтапВход = Неопределено) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ШиринаЭтапа   = 35;
	ВысотаЭтапа   = 40;	
	ШиринаОтступа = 5;
	ВысотаОтступа = 5;
	ШиринаИзгиба  = 2;

	ТаблицаХ = Новый ТаблицаЗначений;
	ТаблицаХ.Колонки.Добавить("Ключ");
	ТаблицаХ.Колонки.Добавить("Значение");
	Для Каждого ТекУровеньХ Из Уровни.Х Цикл
		НоваяСтрока = ТаблицаХ.Добавить();
		НоваяСтрока.Ключ = ТекУровеньХ.Ключ;
		НоваяСтрока.Значение = ТекУровеньХ.Значение;
	КонецЦикла;	
	ТаблицаХ.Сортировать("Ключ Возр");
	
	ЛевоЭтапа = 0;
	Если ТаблицаХ.Количество() > 0 тогда
		ЛевоЭтапа = ТаблицаХ[0].Значение.ОтступХ * ШиринаОтступа;
		Если ЛевоЭтапа = 0 тогда
			ЛевоЭтапа = ШиринаОтступа;
		Иначе
			ЛевоЭтапа = ЛевоЭтапа + 2;
		КонецЕсли;
		ТаблицаХ[0].Значение.Вставить("ЛевоЭтапа", ЛевоЭтапа);
	КонецЕсли;
		
	Для ИндХ = 1 По ТаблицаХ.Количество() - 1 Цикл
		СтруктураХ = ТаблицаХ[ИндХ];				 
		ЛевоЭтапа = ЛевоЭтапа + Макс(СтруктураХ.Значение.ОтступХ + 1, 2) * ШиринаОтступа + ШиринаЭтапа;		
		СтруктураХ.Значение.Вставить("ЛевоЭтапа", ЛевоЭтапа);
	КонецЦикла;
	
	Для Каждого ТекТаблицаХ Из ТаблицаХ Цикл
		Уровни.Х.Вставить(ТекТаблицаХ.Ключ, ТекТаблицаХ.Значение);
	КонецЦикла;	
	
	ТаблицаУ = Новый ТаблицаЗначений;
	ТаблицаУ.Колонки.Добавить("Уровень");
	ТаблицаУ.Колонки.Добавить("ДанныеУровня");
	Для Каждого ТекУровниУ Из Уровни.У Цикл
		НоваяСтрока = ТаблицаУ.Добавить();
		НоваяСтрока.Уровень			 = ТекУровниУ.Ключ;
		НоваяСтрока.ДанныеУровня	 = ТекУровниУ.Значение;
	КонецЦикла;
	ТаблицаУ.Сортировать("Уровень возр");
	ВерхЭтапа = ВысотаОтступа;


	Для каждого СтруктураУ Из ТаблицаУ Цикл
		ТекУровень = СтруктураУ.Уровень;
		Если ТекУровень Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("УровеньУ",ТекУровень);
			НайденныйЭтап = Этапы.НайтиСтроки(СтруктураПоиска);
			Если НайденныйЭтап.Количество() > 0 Тогда
				ТекущийЭтап = НайденныйЭтап[0];
				НовыйОтступ = Макс(Уровни.У[ТекУровень - 1].ОтступУ + 1, 1) * ВысотаОтступа;
				ВерхЭтапа = ВерхЭтапа + НовыйОтступ + ВысотаЭтапа;
			Иначе
				// Нет такого уровня. Не отрисовываем.
			КонецЕсли;
	
		КонецЕсли;
		
		Уровни.У[ТекУровень].Вставить("ВерхЭтапа", ВерхЭтапа);
		
	КонецЦикла;
	
	//СкорректироватьЭтапПередВыводом
	Для каждого СтруктураУ Из Уровни.У Цикл
		
		СтрокиУровня = Этапы.НайтиСтроки(Новый Структура("УровеньУ", СтруктураУ.Ключ));
		
		Для Каждого СтрокаЭтапа Из СтрокиУровня Цикл
			ТекОрганизация = Неопределено;
			Если ЭкземплярПроцесса = Неопределено Тогда
				Ответственные = Неопределено;
				ТекОрганизация = Неопределено;
			Иначе	
				СтруктураПараметровВыгрузки = Новый Структура;
				СтруктураПараметровВыгрузки.Вставить("Этап", СтрокаЭтапа.Этап);
				Ответственные = ЭкземплярПроцесса.ДополнительныеСогласующие.Выгрузить(СтруктураПараметровВыгрузки);
				ТекОрганизация = ЭкземплярПроцесса.Организация;
			КонецЕсли;
			СкорректироватьЭтапПередВыводом(ТабличныйДокумент, СтрокаЭтапа, Уровни, СоответствиеРисунковИЭтапов, Ответственные, ТекОрганизация, ВыбранныйЭтапВход, ЭкземплярПроцесса);
		КонецЦикла;
				
	КонецЦикла;
	
	//НарисоватьЭтап
	Для каждого СтруктураУ Из Уровни.У Цикл
		
		СтрокиУровня = Этапы.НайтиСтроки(Новый Структура("УровеньУ", СтруктураУ.Ключ));
				
		//НарисоватьЭтап
		Для Каждого СтрокаЭтапа Из СтрокиУровня Цикл
			ТекОрганизация = Неопределено;
			Если ЭкземплярПроцесса = Неопределено Тогда
				Ответственные = Неопределено;
				ТекОрганизация = Неопределено;
			Иначе	
				СтруктураПараметровВыгрузки = Новый Структура;
				СтруктураПараметровВыгрузки.Вставить("Этап", СтрокаЭтапа.Этап);
				Ответственные = ЭкземплярПроцесса.ДополнительныеСогласующие.Выгрузить(СтруктураПараметровВыгрузки);
				ТекОрганизация = ЭкземплярПроцесса.Организация;
			КонецЕсли;
			НарисоватьЭтап(ТабличныйДокумент, СтрокаЭтапа, Уровни, СоответствиеРисунковИЭтапов, Ответственные, ТекОрганизация, ВыбранныйЭтапВход, ЭкземплярПроцесса);
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого СтруктураХ Из Уровни.Х Цикл
		
		СтрокиУровня = Этапы.НайтиСтроки(Новый Структура("УровеньХ", СтруктураХ.Ключ));
		
		Для каждого СтрокаЭтапа Из СтрокиУровня Цикл
			
			НарисоватьСвязи(Этапы, ТабличныйДокумент, СтрокаЭтапа, Уровни, ВыбранныйЭтапВход);
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Возвращает ТекстСообщенияВход, дополненный информации о количестве дополнительных
// согласующих из КоличествоДопСогласующихВход.
Функция ДобавитьТекстОДопСогласовании(ТекстСообщенияВход, КоличествоДопСогласующихВход)
	РезультатФункции = ТекстСообщенияВход;
	Если ЗначениеЗаполнено(КоличествоДопСогласующихВход) Тогда
		НовоеПредставление = НСтр("ru = '
                                   |(%КоличествоДопСогласующихВход% доп согласующих)'");
		НовоеПредставление = СтрЗаменить(НовоеПредставление, "%КоличествоДопСогласующихВход%", Строка(КоличествоДопСогласующихВход));
		РезультатФункции = РезультатФункции + НовоеПредставление;
	Иначе
		// Не добавлем информацию о доп согласующих.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ДобавитьТекстОДопСогласовании()

// Определяет, нужны ли ответственные по для этапа ЭтапВход с выбранным типом.
Функция ЭтапСОтветственными(ЭтапВход) Экспорт
	РезультатФункции = Ложь;
	ТекТипЭтапа = ЭтапВход.ТипЭтапа;
	ЭтоЭтапСогласования		 = (ТекТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования);
	ЭтоЭтапОповещение		 = (ТекТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Оповещение);
	ЭтоЭтапРучнойПереход	 = (ТекТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход);
	ЭтоЭтапОбработка		 = (ТекТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Обработка);
	РучноеУтверждение = ЭтапВход.РучноеУтверждениеЭтапа;
	РезультатФункции = ЭтоЭтапСогласования ИЛИ ЭтоЭтапОповещение ИЛИ ЭтоЭтапРучнойПереход ИЛИ (ЭтоЭтапОбработка И РучноеУтверждение);
	Возврат РезультатФункции;
КонецФункции		// ЭтапСОтветственными()

// Рекурсивно обходит дерево условий ДеревоВход этапа ИсходныйЭтапВход, 
// получает корректность этапов перехода в параметр Результат. Параметр 
// ГлубинаРекурсии защищает от бесконечной рекурсии.
Процедура ПоискНекорректныхПереходовНаЭтапы(ИсходныйЭтапВход, ДеревоВход, РезультатТаблица, ГлубинаРекурсии = 0)
	Если ГлубинаРекурсии > 10000 Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ДеревоВход) = Тип("ДеревоЗначений") ИЛИ ТипЗнч(ДеревоВход) = Тип("СтрокаДереваЗначений") Тогда
		ВладелецИсходногоЭтапа = ИсходныйЭтапВход.Владелец;
		Для Каждого ТекДеревоВход Из ДеревоВход.Строки Цикл
			Если ТекДеревоВход.УсловиеДействие = Перечисления.ДействияЭтапа.ПерейтиКЭтапу Тогда
				// Проверка на пустой этап-последователь.
				Если Не ЗначениеЗаполнено(ТекДеревоВход.Значение) Тогда
					НоваяСтрока = РезультатТаблица.Добавить();
					НоваяСтрока.КодОшибки = "ПереходНаПустойЭтап";
					НоваяСтрока.ТекстовоеОписание = НСтр("ru = 'Найден переход на пустой этап'");
				Иначе
					// Проверка на удаленный этап-последователь.
					Если ТекДеревоВход.Значение.ПометкаУдаления Тогда
						НоваяСтрока = РезультатТаблица.Добавить();
						НоваяСтрока.КодОшибки = "ПереходНаУдаленныйЭтап";
						ТекстовоеОписание = НСтр("ru = 'Найден переход на этап (%Этап%), помеченный на удаление'");
						ТекстовоеОписание = СтрЗаменить(ТекстовоеОписание, "%Этап%", Строка(ТекДеревоВход.Значение.Ссылка));
						НоваяСтрока.ТекстовоеОписание = ТекстовоеОписание;
					Иначе
						// Этап заполнен корректно. Продолжаем проверку.
					КонецЕсли;
					// Проверка на этап-последователь другого маршрута.
					Если ТекДеревоВход.Значение.Владелец <> ВладелецИсходногоЭтапа Тогда
						НоваяСтрока = РезультатТаблица.Добавить();
						НоваяСтрока.КодОшибки = "ПереходНаЭтапДругогоМаршрута";
						ТекстовоеОписание = НСтр("ru = 'Найден переход на этап (%Этап%), принадлежащий другому маршруту (%Маршрут%)'");
						ТекстовоеОписание = СтрЗаменить(ТекстовоеОписание, "%Этап%", Строка(ТекДеревоВход.Значение.Ссылка));
						ТекстовоеОписание = СтрЗаменить(ТекстовоеОписание, "%Маршрут%", Строка(ТекДеревоВход.Значение.Владелец));
						НоваяСтрока.ТекстовоеОписание = ТекстовоеОписание;
					Иначе
						// Этап заполнен корректно. Продолжаем проверку.
					КонецЕсли;
				КонецЕсли;
			Иначе
				// Прочие действия не проверяем.
			КонецЕсли;
			ПоискНекорректныхПереходовНаЭтапы(ИсходныйЭтапВход, ТекДеревоВход, РезультатТаблица, ГлубинаРекурсии + 1);
		КонецЦикла;
	Иначе
		Возврат;					// Нет дерева переходов. Не проверяем данный этап.
	КонецЕсли;
КонецПроцедуры		// ПоискНекорректныхПереходовНаЭтапы()

// Получает текст между <body> и </body> для шаблона оповещения
// ШаблонВход. Когда тегов нет - возвращает входной шаблон целиком.
Функция ПолучитьТекстИзВебШаблона(ШаблонВход) Экспорт
	РезультатФункции = "";
	ИсходныйШаблон = НРег(ШаблонВход);
	ПозицияНачалаОсновногоТекста = СтрНайти(ИсходныйШаблон, "<body>");
	ПозицияОкончанияОсновногоТекста = СтрНайти(ИсходныйШаблон, "</body>");
	НетВебТегов = (ПозицияНачалаОсновногоТекста = 0) ИЛИ (ПозицияОкончанияОсновногоТекста = 0);
	Если НетВебТегов Тогда
		// Возвращаем в исходном виде.
		РезультатФункции = ШаблонВход;
	Иначе
		// Вырежем текст в теле веб-документа.
		ДлинаОсновногоТекста = ПозицияОкончанияОсновногоТекста - ПозицияНачалаОсновногоТекста - 6;
		ОсновнойТекст = Сред(ИсходныйШаблон, ПозицияНачалаОсновногоТекста + 6, ДлинаОсновногоТекста);
		РезультатФункции = СокрЛП(ОсновнойТекст);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьТекстИзВебШаблона()

// Возвращает текст шаблона оповещения для этапа процесса ЭтапВход.
Функция ПолучитьТекстШаблонаЭтапа(ЭтапВход)
	РезультатФункции = "";
	ЭтапРабочий = ЭтапВход;
	Если ТипЗнч(ЭтапВход) = Тип("СправочникСсылка.ЭтапыУниверсальныхПроцессов") Тогда
		ЭтапРабочий = ЭтапВход;
	ИначеЕсли ТипЗнч(ЭтапВход) = Тип("СправочникОбъект.ЭтапыУниверсальныхПроцессов") Тогда
		ЭтапРабочий = ЭтапВход.Ссылка;
	Иначе	
		ЭтапРабочий = ЭтапВход;
	КонецЕсли;	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ШаблоныОповещений.Ссылка КАК Ссылка,
		|	ШаблоныОповещений.ЭтапПроцесса КАК ЭтапПроцесса,
		|	ШаблоныОповещений.Шаблон КАК Шаблон
		|ИЗ
		|	Справочник.ШаблоныОповещений КАК ШаблоныОповещений
		|ГДЕ
		|	ШаблоныОповещений.ЭтапПроцесса = &ЭтапПроцесса";
	Запрос.УстановитьПараметр("ЭтапПроцесса", ЭтапРабочий);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ХранилищеШаблона = ВыборкаДетальныеЗаписи.Шаблон;
		Если ТипЗнч(ХранилищеШаблона) = Тип("ХранилищеЗначения") Тогда
			ВебШаблон = ХранилищеШаблона.Получить();
			ТекстШаблона = ПолучитьТекстИзВебШаблона(ВебШаблон);
			РезультатФункции = СокрЛП(ТекстШаблона);
		Иначе
			// Неизвестный вариант шаблона. Ничего не делаем.
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьТекстШаблонаЭтапа()

// Возвращает массив пользователей с ролью РольВход по всем организациям.
Функция ПолучитьПользователейРолиПоВсемОрганизациям(РольВход)
	РезультатФункции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОтветственныеОрганизаций.Пользователь
		|ИЗ
		|	РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций
		|ГДЕ
		|	ОтветственныеОрганизаций.Роль = &Роль";
	Запрос.УстановитьПараметр("Роль", РольВход);
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	РезультатФункции = Выгрузка.ВыгрузитьКолонку("Пользователь");
	Возврат РезультатФункции;
КонецФункции		// ПолучитьПользователейРолиПоВсемОрганизациям()

// Возвращает массив пользователей, ответственных за роль РольВход
// в организации ОрганизацияВход.
Функция ВернутьМассивПользователейПоРоли(РольВход, ОрганизацияВход = Неопределено) Экспорт
	РезультатФункции = Новый Массив;
	Если ЗначениеЗаполнено(ОрганизацияВход) Тогда
		ТаблицаПоРоли = ПолучитьПользователейПоРоли(РольВход, ОрганизацияВход);
		РезультатФункции = ТаблицаПоРоли.ВыгрузитьКолонку("Пользователь");
		РезультатФункции = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(РезультатФункции);
	Иначе
		РезультатФункции = ПолучитьПользователейРолиПоВсемОрганизациям(РольВход);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ВернутьМассивПользователейПоРоли()

// Возвращает массив пользователей, который могу утверждать этап ЭтапВход.
Функция ПолучитьМассивУтверждающихЭтапа(ЭтапВход)
	РезультатФункции = Новый Массив;
	Для Каждого ТекУтверждающие Из ЭтапВход.Утверждающие Цикл
		ТекПользователь = ТекУтверждающие.Пользователь;
		ТекОрганизация = ТекУтверждающие.Организация;
		Если ЗначениеЗаполнено(ТекПользователь) Тогда
			Если ТипЗнч(ТекПользователь) = Тип("СправочникСсылка.РолиКонтактныхЛиц") Тогда
				// Расшифруем роли до пользователей.
				МассивПоРоли = ВернутьМассивПользователейПоРоли(ТекПользователь, ТекОрганизация);
				Для Каждого ТекМассивПоРоли Из МассивПоРоли Цикл
					РезультатФункции.Добавить(ТекМассивПоРоли);
				КонецЦикла;
			Иначе
				// Вернём неизменное значение.
				РезультатФункции.Добавить(ТекПользователь);
			КонецЕсли;
		Иначе
			// Не добавляем, т.к. утверждающий не заполнен.
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьМассивУтверждающихЭтапа()

// Проверяет, корректно ли заполнены утверждающие в массиве МассивУтверждающихВход
// для этапа процесса ЭтапВход.
Функция УтверждающиеЗаполненыКорректно(МассивУтверждающихВход, ЭтапВход)
	РезультатФункции = Истина;
	КоличествоУтверждающих = МассивУтверждающихВход.Количество();
	ЕстьУтверждающиеПоЭтапу = (КоличествоУтверждающих > 0);
	Если ЕстьУтверждающиеПоЭтапу Тогда
		РезультатФункции = Истина;
	Иначе
		Если ЭтапВход.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Обработка Тогда
			РезультатФункции = Не (ЭтапВход.РучноеУтверждениеЭтапа);
		Иначе
			РезультатФункции = Ложь;
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// УтверждающиеЗаполненыКорректно()

// Рекурсивно проверяет дерево переходов ДеревоВход этапа условного перехода.
// Когда найдено пустое условие - добавляет в таблицу РезультатТаблица. Параметр
// ГлубинаРекурсииВход защищает от бесконечного цикла.
Процедура ПроверитьПустыеВыраженияУсловия(ДеревоВход, РезультатТаблица, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 10000 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ТекДеревоВход Из ДеревоВход.Строки Цикл
		ЭтоСтрокаВыраженияУсловия = (ТекДеревоВход.ЯвляетсяУсловием = 1) И (ТекДеревоВход.ОбработкаУсловия = 0);
		ВыражениеЗаполнено = (СокрЛП(ТекДеревоВход.УсловиеДействие) <> "");
		Если (ЭтоСтрокаВыраженияУсловия) И (НЕ ВыражениеЗаполнено) Тогда
			НоваяСтрока = РезультатТаблица.Добавить();
			НоваяСтрока.КодОшибки = "НетВыраженияУсловия";
			ТекстОписания = НСтр("ru = 'Не задано выражение условия'");
			НоваяСтрока.ТекстовоеОписание = ТекстОписания;
		Иначе
			// Проверка пройдена успешно.
		КонецЕсли;
		ПроверитьПустыеВыраженияУсловия(ТекДеревоВход, РезультатТаблица, ГлубинаРекурсииВход + 1);
	КонецЦикла;
КонецПроцедуры		// ПроверитьПустыеВыраженияУсловия()

// Рекурсивно проверяет дерево переходов ДеревоВход этапа условного перехода.
// Когда найдено действие без этапа перехода - добавляет в таблицу РезультатТаблица. 
//Параметр ГлубинаРекурсииВход защищает от бесконечного цикла.
Процедура ПроверитьДействияБезЭтапов(ДеревоВход, РезультатТаблица, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 10000 Тогда
		Возврат;
	КонецЕсли;
	ДействиеПереходКЭтапу = Перечисления.ДействияЭтапа.ПерейтиКЭтапу;
	Для Каждого ТекДеревоВход Из ДеревоВход.Строки Цикл
		ЭтоДействиеПереходКЭтапу = (ТекДеревоВход.УсловиеДействие = ДействиеПереходКЭтапу);
		ЭтапЗаполнен = ЗначениеЗаполнено(ТекДеревоВход.Значение);
		Если (ЭтоДействиеПереходКЭтапу) И (НЕ ЭтапЗаполнен) Тогда
			НоваяСтрока = РезультатТаблица.Добавить();
			НоваяСтрока.КодОшибки = "ДействиеБезЭтапаПерехода";
			ТекстОписания = НСтр("ru = 'Не указан этап перехода для действия'");
			НоваяСтрока.ТекстовоеОписание = ТекстОписания;
		Иначе
			// Проверка пройдена успешно.
		КонецЕсли;
		ПроверитьДействияБезЭтапов(ТекДеревоВход, РезультатТаблица, ГлубинаРекурсииВход + 1);
	КонецЦикла;
КонецПроцедуры		// ПроверитьДействияБезЭтапов()

// Рекурсивно обходит лерево условного перехода ДеревоВход. Когда
// найдена строка действия, выставляет параметр ЕстьДействиеРезультат
// в значение Истина. Параметр ГлубинаРекурсииВход защищает от 
// бесконечной рекурсии.
Процедура ЕстьДействиеВДеревеУсловногоПерехода(ДеревоВход, ЕстьДействиеРезультат, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 10000 Тогда
		Возврат;
	КонецЕсли;
	ДействиеПереходКЭтапу = Перечисления.ДействияЭтапа.ПерейтиКЭтапу;
	Для Каждого ТекДеревоВход Из ДеревоВход.Строки Цикл
		ЭтоДействиеПереходКЭтапу = (ТекДеревоВход.УсловиеДействие = ДействиеПереходКЭтапу);
		Если ЭтоДействиеПереходКЭтапу Тогда
			ЕстьДействиеРезультат = Истина;
		Иначе
			// Выполняем поиск далее.
		КонецЕсли;
		ЕстьДействиеВДеревеУсловногоПерехода(ТекДеревоВход, ЕстьДействиеРезультат, ГлубинаРекурсииВход + 1);
	КонецЦикла;	
КонецПроцедуры		// ЕстьДействиеВДеревеУсловногоПерехода()

// Проверяет дерево условного перехода ДеревоВход. Добавляет строку в таблицу РезультатТаблица
// если не найден этап перехода.
Процедура ПроверитьНаличиеДействия(ДеревоВход, РезультатТаблица)
	ЕстьДействие = Ложь;
	ЕстьДействиеВДеревеУсловногоПерехода(ДеревоВход, ЕстьДействие);
	Если НЕ ЕстьДействие Тогда
		НоваяСтрока = РезультатТаблица.Добавить();
		НоваяСтрока.КодОшибки = "НетДействийПерехода";
		ТекстОписания = НСтр("ru = 'Не указано ни одного действия для этапа'");
		НоваяСтрока.ТекстовоеОписание = ТекстОписания;
	Иначе
		// Проверка пройдена успешно.
	КонецЕсли;
КонецПроцедуры		// ПроверитьНаличиеДействия()

// Проверяет дерево ДеревоВход на отсутствие условий без выходов. Добавляет в таблицу РезультатТаблица
// ошибку, если найдены условия без выходов.
Процедура ПроверитьВыходыИзУсловий(ДеревоВход, РезультатТаблица, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 10000 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ТекДеревоВход Из ДеревоВход.Строки Цикл
		ЭтоВеткаТогда = ((ТекДеревоВход.ЯвляетсяУсловием = 1) И (ТекДеревоВход.ОбработкаУсловия = 1));
		ЭтоВеткаИначе = ((ТекДеревоВход.ЯвляетсяУсловием = 1) И (ТекДеревоВход.ОбработкаУсловия = 2));
		Если ЭтоВеткаТогда Тогда
			// Проверим наличие действия для ветки Тогда.
			ЕстьДействие = Ложь;
			ЕстьДействиеВДеревеУсловногоПерехода(ТекДеревоВход, ЕстьДействие);
			Если НЕ ЕстьДействие Тогда
				НоваяСтрока = РезультатТаблица.Добавить();
				НоваяСтрока.КодОшибки = "НетВыходаИзТогдаУсловия";
				ТекстОписания = НСтр("ru = 'Для ветки Тогда не указано действие выхода'");
				НоваяСтрока.ТекстовоеОписание = ТекстОписания;
			Иначе
				// Проверка пройдена успешно.
			КонецЕсли;
		ИначеЕсли ЭтоВеткаИначе Тогда
			// Проверим наличие действия для ветки Иначе.
			ЕстьДействие = Ложь;
			ЕстьДействиеВДеревеУсловногоПерехода(ТекДеревоВход, ЕстьДействие);
			Если НЕ ЕстьДействие Тогда
				НоваяСтрока = РезультатТаблица.Добавить();
				НоваяСтрока.КодОшибки = "НетВыходаИзИначеУсловия";
				ТекстОписания = НСтр("ru = 'Для ветки Иначе условия не указано действие выхода'");
				НоваяСтрока.ТекстовоеОписание = ТекстОписания;
			Иначе
				// Проверка пройдена успешно.
			КонецЕсли;
		Иначе
			// Выполняем поиск далее.
		КонецЕсли;
		ПроверитьВыходыИзУсловий(ТекДеревоВход, РезультатТаблица, ГлубинаРекурсииВход + 1);
	КонецЦикла;	
КонецПроцедуры		// ПроверитьВыходыИзУсловий()

// Проверяет наличие действий для всех веток условия выбора из дерева . В случае обнаружения 
//пустой ветки - добавляет запись в таблицу ГлубинаРекурсииВход. Параметр ГлубинаРекурсииВход
// защищает от бесконечной рекурсии.
Процедура ПроверитьВыходыИзВыбора(ДеревоВход, РезультатТаблица, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 10000 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ТекДеревоВход Из ДеревоВход.Строки Цикл
		ЭтоВеткаТогда = ((ТекДеревоВход.ЯвляетсяУсловием = 1) И (ТекДеревоВход.ОбработкаУсловия = 4));
		ЭтоВеткаИначе = ((ТекДеревоВход.ЯвляетсяУсловием = 1) И (ТекДеревоВход.ОбработкаУсловия = 5));
		Если ЭтоВеткаТогда Тогда
			// Проверим наличие действия для ветки Тогда.
			ЕстьДействие = Ложь;
			ЕстьДействиеВДеревеУсловногоПерехода(ТекДеревоВход, ЕстьДействие);
			Если НЕ ЕстьДействие Тогда
				НоваяСтрока = РезультатТаблица.Добавить();
				НоваяСтрока.КодОшибки = "НетВыходаИзУсловияВыбора";
				ТекстОписания = НСтр("ru = 'Для условия выбора не указано действие выхода'");
				НоваяСтрока.ТекстовоеОписание = ТекстОписания;
			Иначе
				// Проверка пройдена успешно.
			КонецЕсли;
		ИначеЕсли ЭтоВеткаИначе Тогда
			// Проверим наличие действия для ветки Иначе.
			ЕстьДействие = Ложь;
			ЕстьДействиеВДеревеУсловногоПерехода(ТекДеревоВход, ЕстьДействие);
			Если НЕ ЕстьДействие Тогда
				НоваяСтрока = РезультатТаблица.Добавить();
				НоваяСтрока.КодОшибки = "НетВыходаИзИначеВыбора";
				ТекстОписания = НСтр("ru = 'Для ветки Иначе из выбора не указано действие выхода'");
				НоваяСтрока.ТекстовоеОписание = ТекстОписания;
			Иначе
				// Проверка пройдена успешно.
			КонецЕсли;
		Иначе
			// Выполняем поиск далее.
		КонецЕсли;
		ПроверитьВыходыИзВыбора(ТекДеревоВход, РезультатТаблица, ГлубинаРекурсииВход + 1)
	КонецЦикла;	
КонецПроцедуры		// ПроверитьВыходыИзВыбора()

// Проверяет корректность заполнения дерева переходов ДеревоВход этапа условного
// перехода. Когда найдено несоотвествие - добавляет запись в таблицу ошибок
// РезультатТаблица
Процедура ПроверитьДеревоУсловий(ДеревоВход, РезультатТаблица) Экспорт
	Если ТипЗнч(ДеревоВход) = Тип("ДеревоЗначений") ИЛИ ТипЗнч(ДеревоВход) = Тип("СтрокаДереваЗначений") Тогда
		ПроверитьПустыеВыраженияУсловия(ДеревоВход, РезультатТаблица);
		ПроверитьВыходыИзУсловий(ДеревоВход, РезультатТаблица);
		ПроверитьВыходыИзВыбора(ДеревоВход, РезультатТаблица);
		ПроверитьДействияБезЭтапов(ДеревоВход, РезультатТаблица);
		ПроверитьНаличиеДействия(ДеревоВход, РезультатТаблица);
	Иначе
		Возврат;					// Нет дерева переходов. Не проверяем данный этап.
	КонецЕсли;
КонецПроцедуры		// ПроверитьДеревоУсловий()

// Проверяет роли ответственных по этапу ЭтапВход. В случае, если найдены роли без ответственных -
// добавляет ошибку в таблицу РезультатТаблица.
Процедура ПроверитьРолиБезОтветственных(ЭтапВход, РезультатТаблица)
	Для Каждого ТекУтверждающие Из ЭтапВход.Утверждающие Цикл
		ТекПользователь = ТекУтверждающие.Пользователь;
		ТекОрганизация = ТекУтверждающие.Организация;
		Если ЗначениеЗаполнено(ТекПользователь) Тогда
			Если ТипЗнч(ТекПользователь) = Тип("СправочникСсылка.РолиКонтактныхЛиц") Тогда
				// Расшифруем роли до пользователей.
				МассивПоРоли = ВернутьМассивПользователейПоРоли(ТекПользователь, ТекОрганизация);
				Если МассивПоРоли.Количество() = 0 Тогда
					НоваяСтрока = РезультатТаблица.Добавить();
					НоваяСтрока.КодОшибки = "НеСопоставленыОтветственныеРолей";
					ТекстОписания = "";
					Если ЗначениеЗаполнено(ТекОрганизация) Тогда
						ТекстОписания = НСтр("ru = 'Для роли ""%Роль%"" и организации ""%Организация%"" не назначены ответственные в регистре сведений ""Ответственные по организациям""'");
						ТекстОписания = СтрЗаменить(ТекстОписания, "%Организация%", Строка(ТекОрганизация));
					Иначе
						ТекстОписания = НСтр("ru = 'Для роли ""%Роль%"" не назначены ответственные в регистре сведений ""Ответственные по организациям""'");
					КонецЕсли;
					ТекстОписания = СтрЗаменить(ТекстОписания, "%Роль%", Строка(ТекПользователь));
					НоваяСтрока.ТекстовоеОписание = ТекстОписания;
				Иначе
					// Проверка пройдена успешено.
				КонецЕсли;
			Иначе
				// Ответственный задан не ролью. Пропускаем.
			КонецЕсли;
		Иначе
			// Не добавляем, т.к. утверждающий не заполнен.
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры		// ПроверитьРолиБезОтветственных()

// Возвращает массив всех этапов с типом этапа ЭтапПодготовкиОтчетности, принадлежащие
// шаблону процесса ШаблонПроцессаВход.
Функция ПолучитьЭтапыПодготовкиОтчетностиПоШаблонуПроцесса(ШаблонПроцессаВход)
	РезультатФункции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭтапыУниверсальныхПроцессов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапыУниверсальныхПроцессов
		|ГДЕ
		|	ЭтапыУниверсальныхПроцессов.Владелец = &ШаблонПроцесса
		|	И НЕ ЭтапыУниверсальныхПроцессов.ПометкаУдаления
		|	И ЭтапыУниверсальныхПроцессов.ТипЭтапа = &ТипЭтапаПодготовкаОтчетности";
	Запрос.УстановитьПараметр("ТипЭтапаПодготовкаОтчетности", Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности);
	Запрос.УстановитьПараметр("ШаблонПроцесса", ШаблонПроцессаВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатФункции.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьЭтапыПодготовкиОтчетностиПоШаблонуПроцесса()

// Проверяет дублирование отчетов этапа ЭтапВход в его шалоне. В случае, найдены 
//отчеты по одной организации, заполняемые в разных  этапах - добавляет ошибку 
// в таблицу РезультатТаблица.
Процедура ПроверитьДублированиеВидаОтчетаВШаблонеПроцесса(ЭтапВход, РезультатТаблица)
	ПустойРегламент		 = Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка();
	ПустаяОрганизация	 = Справочники.Организации.ПустаяСсылка();
	ПустойПериод		 = Справочники.Периоды.ПустаяСсылка();
	ПустойСценарий		 = Справочники.Сценарии.ПустаяСсылка();
	РегламентРабочий = ПустойРегламент;
	Если ЗначениеЗаполнено(ЭтапВход) Тогда
		ТекШаблон = ЭтапВход.Владелец;
		Если ЗначениеЗаполнено(ТекШаблон) Тогда
			// Получим все документы по текущему шаблону.
			МассивЭтапов = ПолучитьЭтапыПодготовкиОтчетностиПоШаблонуПроцесса(ТекШаблон);
			РегламентРабочий = ТекШаблон.СвязанныйРегламент;
			Если ЗначениеЗаполнено(РегламентРабочий) Тогда
				ТаблицаФормируемыхДокументов = ПолучитьТаблицуФормируемыхДокументов(РегламентРабочий, ПустаяОрганизация, ПустойПериод, ПустойСценарий, МассивЭтапов);
				// Найдём дубликаты в таблице.
				ТаблицаСвертка = ТаблицаФормируемыхДокументов.Скопировать();
				ТаблицаСвертка.Колонки.Добавить("КоличествоОтчетов");
				ТаблицаСвертка.ЗаполнитьЗначения(1, "КоличествоОтчетов");
				ТаблицаСвертка.Свернуть("ШаблонДокумента, ДокументБД, Организация", "КоличествоОтчетов");
				ТаблицаОчистка = ТаблицаСвертка.СкопироватьКолонки();
				Для Каждого ТекТаблицаСвертка Из ТаблицаСвертка Цикл
					Если ТекТаблицаСвертка.КоличествоОтчетов <> 1 Тогда
						НоваяСтрока = ТаблицаОчистка.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекТаблицаСвертка);
					Иначе
						// Единственный отчет. Пропускаем.
					КонецЕсли; 
				КонецЦикла;	
				// Отберём среди дубликатов те отчеты, которые относятся к текущем этапу.
				ТаблицаДокументыТекущегоЭтапа = ТаблицаФормируемыхДокументов.СкопироватьКолонки();
				Для Каждого ТекТаблицаФормируемыхДокументов Из ТаблицаФормируемыхДокументов Цикл
					Если ТекТаблицаФормируемыхДокументов.Этап = ЭтапВход Тогда
						НоваяСтрока = ТаблицаДокументыТекущегоЭтапа.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекТаблицаФормируемыхДокументов);
					Иначе
						// Другой этап. Пропускаем.
					КонецЕсли;
				КонецЦикла;	
				Для Каждого ТекТаблицаОчистка Из ТаблицаОчистка Цикл
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("ШаблонДокумента",	 ТекТаблицаОчистка.ШаблонДокумента);
					СтруктураПоиска.Вставить("ДокументБД",		 ТекТаблицаОчистка.ДокументБД);
					СтруктураПоиска.Вставить("Организация",		 ТекТаблицаОчистка.Организация);
					НайденныеСтроки = ТаблицаДокументыТекущегоЭтапа.НайтиСтроки(СтруктураПоиска);
					Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
						// Добавим найденный дубликат в список ошибок.
						НоваяСтрока = РезультатТаблица.Добавить();
						НоваяСтрока.КодОшибки = "ДублируютсяЗаполняемыеОтчеты";
						ТекстОшибки = НСтр("ru = 'На этапе %ТекущийЭтап% дублируется отчет %Отчет% по организации %Организация% с аналогичным отчетом'");
						ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТекущийЭтап%", Строка(ЭтапВход));
						ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Отчет%", Строка(ТекНайденныеСтроки.ШаблонДокумента));
						ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Организация%", Строка(ТекНайденныеСтроки.Организация));
						НоваяСтрока.ТекстовоеОписание = ТекстОшибки;
						Прервать;
					КонецЦикла;	
				КонецЦикла;	
			Иначе
				// Шаблон не привязан к регламенту. Список организаций получить нельзя.
			КонецЕсли;
		Иначе
			// Не удалось получить шаблон. Дубликатов нет.
		КонецЕсли; 
	Иначе
		// Передан пустой этап. Нет данных для проверки.
	КонецЕсли;	
КонецПроцедуры		// ПроверитьДублированиеВидаОтчетаВШаблонеПроцесса()

// Возвращает таблицу значений, содержащую информацию об
// ошибках в этапе ЭтапВход
Функция ПолучитьТаблицуОшибокЭтапа(ЭтапВход) Экспорт
	// Инициализация.
	РезультатФункции = Новый ТаблицаЗначений;
	РезультатФункции.Колонки.Добавить("КодОшибки");
	РезультатФункции.Колонки.Добавить("ТекстовоеОписание");
	// Проверим заполнение ответственных.
	Если ЭтапСОтветственными(ЭтапВход) Тогда
		МассивУтверждающих = ПолучитьМассивУтверждающихЭтапа(ЭтапВход);
		Если НЕ УтверждающиеЗаполненыКорректно(МассивУтверждающих, ЭтапВход) Тогда
			НоваяСтрока = РезультатФункции.Добавить();
			НоваяСтрока.КодОшибки = "НетУтверждающих";
			Если ЭтапВход.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Оповещение Тогда
				НоваяСтрока.ТекстовоеОписание = НСтр("ru = 'Список получателей пуст. Добавьте хотя бы одного получателя оповещения'");
			Иначе	
				НоваяСтрока.ТекстовоеОписание = НСтр("ru = 'Нет утверждающих по этапу'");
			КонецЕсли;
		Иначе
			// Утверждающие заполнены.
		КонецЕсли;
	Иначе
		// Для прочих этапов не выполняем проверку.
	КонецЕсли;
	// Проверим корректность этапов-последователей.
	ХранилищеДереваУсловий = ЭтапВход.УсловияСогласования;
	ДеревоУсловий = ХранилищеДереваУсловий.Получить();
	ПоискНекорректныхПереходовНаЭтапы(ЭтапВход, ДеревоУсловий, РезультатФункции);
	// Проверим наличие ролей без ответственных.
	Если ЭтапСОтветственными(ЭтапВход) Тогда
		ПроверитьРолиБезОтветственных(ЭтапВход, РезультатФункции);
	Иначе
		// Для прочих этапов не выполняем проверку.
	КонецЕсли;
	// Проверим отсутсвие дублирования видов отчетов по данным организациям в этапе подготовки отчетности.
	Если ЭтапВход.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности Тогда
		ПроверитьДублированиеВидаОтчетаВШаблонеПроцесса(ЭтапВход.Ссылка, РезультатФункции);
	Иначе
		// Не этап подготовки отчетности. Проверка пройдена.
	КонецЕсли;
	// Проверим наличие минимум двух этапов-последователей для этапа Ручной переход.
	Если ЭтапВход.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход Тогда
		СписокПоследователей = МодульСогласованияДокументовУХ.ПолучитьЭтапыВыбораРучногоПерехода(ЭтапВход);
		Если СписокПоследователей.Количество() < 2 Тогда
			НоваяСтрока = РезультатФункции.Добавить();
			НоваяСтрока.КодОшибки = "НедостаточноЭтаповВыбора";
			НоваяСтрока.ТекстовоеОписание = НСтр("ru = 'Недостачно этапов для выбора в этапе Переход по выбору. Добавьте хотя бы два этапа-последователя.'");
		Иначе
			// Последователей достаточно. Ошибки нет.
		КонецЕсли;
	Иначе
		// Не Ручной переход. Не выполняем эту проверку.
	КонецЕсли;
	// Проверим заполнение шаблона оповещения для этапа Оповещение.
	Если ЭтапВход.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Оповещение Тогда
		ТекстШаблонаЭтапа = ПолучитьТекстШаблонаЭтапа(ЭтапВход);
		Если СтрДлина(СокрЛП(ТекстШаблонаЭтапа)) = 0 Тогда
			НоваяСтрока = РезультатФункции.Добавить();
			НоваяСтрока.КодОшибки = "ПустойШаблонОповещения";
			НоваяСтрока.ТекстовоеОписание = НСтр("ru = 'Шаблон оповещения пуст'");
		Иначе
			// В шаблоне есть текст. Ошибки нет.
		КонецЕсли;
	Иначе
		// Не Оповещение. Не выполняем эту проверку.
	КонецЕсли;
	// Проверим заполнение условного перехода.
	Если ЭтапВход.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.УсловныйПереход Тогда
		ХранилищеДереваУсловий = ЭтапВход.УсловияСогласования;
		ДеревоУсловий = ХранилищеДереваУсловий.Получить();
		ПроверитьДеревоУсловий(ДеревоУсловий, РезультатФункции);
	Иначе
		// Не проверяем условия для этапов не условного перехода.
	КонецЕсли; 
	// Проверким заполнение статуса согласования для этапов Автоутверждение и Автоотклонение.
	ЭтоАвтоутверждение = (ЭтапВход.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Автоутверждение);
	ЭтоАвтоотклонение = (ЭтапВход.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Автоотклонение);
	Если (ЭтоАвтоотклонение ИЛИ ЭтоАвтоутверждение) Тогда
		Если НЕ ЗначениеЗаполнено(ЭтапВход.СтатусСогласованияОбъекта) Тогда
			НоваяСтрока = РезультатФункции.Добавить();
			НоваяСтрока.КодОшибки = НСтр("ru = 'Не заполнен статус согласования'");
			НоваяСтрока.ТекстовоеОписание = НСтр("ru = 'Не заполнен реквизит Статус объекта'");
		Иначе
			// Проверка пройдена успешно.
		КонецЕсли;
	Иначе
		// Не проверяем для прочих типов этапа.
	КонецЕсли;
	// Проверим указание вложенного процесса для этапа Вложенный процесс.
	Если ЭтапВход.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ДочернийМаршрут Тогда
		Если Не ЗначениеЗаполнено(ЭтапВход.ДочернийМаршрут) Тогда
			НоваяСтрока = РезультатФункции.Добавить();
			НоваяСтрока.КодОшибки = "ПустойВложенныйПроцесс";
			НоваяСтрока.ТекстовоеОписание = НСтр("ru = 'Вложенный процесс не указан'");
		Иначе
			// Вложенный маршрут указан. Ошибки нет.
		КонецЕсли;
	Иначе
		// Не Вложенный процесс. Не выполняем эту проверку.
	КонецЕсли;
	// Вывод результата.
	РезультатФункции.Свернуть("КодОшибки, ТекстовоеОписание");
	Возврат РезультатФункции;
КонецФункции		// ПолучитьТаблицуОшибокЭтапа()

// Возвращает корректность заполнения этапа ЭтапВход. Возвращает
// Истина в случае обнаружения ошибок, Ложь - в противном случае.
Функция ПроверитьОшибкиЭтапа(ЭтапВход) Экспорт
	РезультатФункции = Ложь;
	ТаблицаОшибокЭтапа = ПолучитьТаблицуОшибокЭтапа(ЭтапВход);
	РезультатФункции = (ТаблицаОшибокЭтапа.Количество() > 0);
	Возврат РезультатФункции;
КонецФункции		// ПроверитьОшибкиЭтапа()

// Возвращает представление пользователей/ролей по таблице ответственных
// и организации ОрганизацияВход.
Функция ПолучитьПредставлениеОтветственныхЭтапа(ОтветственныеВход, ОрганизацияВход = Неопределено, ЭкземплярПроцессаВход = Неопределено) 
	// Инициализация.
	РезультатФункции = "";
	МассивПользователей = Новый Массив;
	// Получим массив всех пользователей.
	Для Каждого Элемент из ОтветственныеВход Цикл
		ТекПользователь = Элемент.Пользователь;
		Если ТипЗнч(ТекПользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			// Отвественный напрямую задан Пользователем.
			МассивПользователей.Добавить(ТекПользователь);			
		ИначеЕсли ТипЗнч(ТекПользователь) = Тип("СправочникСсылка.РолиКонтактныхЛиц") Тогда			
			// Отвественный задан Ролью.
			Если ЗначениеЗаполнено(ОрганизацияВход) Тогда
				НовыйМассивПользователей = ВернутьМассивПользователейПоРоли(ТекПользователь, ОрганизацияВход);
				Для Каждого ТекНовыйМассивПользователей Из НовыйМассивПользователей Цикл
					МассивПользователей.Добавить(ТекНовыйМассивПользователей);
				КонецЦикла;
			Иначе
				МассивПользователей.Добавить(ТекПользователь);			// Т.к. организация не задана, расшифровать роль не удастся. Выводим саму роль.
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекПользователь) = Тип("СправочникСсылка.РасширеннаяАдресацияСогласования") Тогда
			// Отвественный задан Расширенной адресацией.
			СпособАдресацииРасширенная = Перечисления.СпособыАдресацииСогласования.РасширеннаяАдресация;
			СтруктураОтветственных = Новый Структура;
			СтруктураОтветственных.Вставить("Пользователь", ТекПользователь);
			СтруктураОтветственных.Вставить("Организация", ОрганизацияВход);
			СтруктураОтветственных.Вставить("СпособАдресации", СпособАдресацииРасширенная);
			ТабОтветственныхИзм = Новый ТаблицаЗначений;
			ТабОтветственныхИзм.Колонки.Добавить("Пользователь");
			ТабОтветственныхИзм.Колонки.Добавить("Организация");
			ТабОтветственныхИзм.Колонки.Добавить("СпособАдресации");
			СтрокаПредставленияИзм = "";
			РасшифроватьРасширеннуюАдресацию(ЭкземплярПроцессаВход, СтруктураОтветственных, ТабОтветственныхИзм, СтрокаПредставленияИзм);
			Для Каждого ТекТабОтветственныхИзм Из ТабОтветственныхИзм Цикл
				МассивПользователей.Добавить(ТекТабОтветственныхИзм.Пользователь);
			КонецЦикла;
			
			Если МассивПользователей.Количество() = 0 тогда
				МассивПользователей.Добавить(ТекПользователь);
			КонецЕсли;
			
		Иначе
			// Неизвестный вариант. Добавим исходного ответственного.
			МассивПользователей.Добавить(ТекПользователь);			
		КонецЕсли;
	КонецЦикла;
	МассивПользователей = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПользователей);
	
	Для Каждого ТекМассивПользователей Из МассивПользователей Цикл
		РезультатФункции = РезультатФункции + "  
		|" + Строка(ТекМассивПользователей) + ";";
	КонецЦикла;
	РезультатФункции = Лев(РезультатФункции, СтрДлина(РезультатФункции)-1);		// Уберём последнюю ";"
	
	Возврат РезультатФункции;
КонецФункции		// ПолучитьПредставлениеОтветственныхЭтапа()

// Возвращает текст, который будет выведен в теле отображаемого этапа согласно
// данным из СтрокаЭтапа.
Функция ПолучитьТекстРисункаЭтапа(СтрокаЭтапа, ОрганизацияВход, Ответственные, ЭкземплярПроцессаВход = Неопределено)
	РезультатФункции = "";
	// Получим дополнительную подпись.
	ЕстьДополнительнаяПодпись = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаЭтапа, "ДополнительнаяПодпись") Тогда
		ЕстьДополнительнаяПодпись = (СтрокаЭтапа.ДополнительнаяПодпись <> "");
	Иначе
		ЕстьДополнительнаяПодпись = Ложь;
	КонецЕсли;
	// Определим текст этапа.
	Если НЕ ЕстьДополнительнаяПодпись Тогда
		Если СтрокаЭтапа.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования Тогда
			// Этап согласования.
			Если СтрокаЭтапа.СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.ВОбработке И НЕ Ответственные=Неопределено Тогда
				
				СтрокаШаблона = Нстр("ru = '%1
				|Находится на согласовании у:'");
				
				РезультатФункции = "";
				Если Не ПустаяСтрока(СтрокаШаблона) тогда								
					РезультатФункции = СтрШаблон(СтрокаШаблона, Строка(СтрокаЭтапа.Этап));
				КонецЕсли;
								
				РезультатФункции = РезультатФункции + ПолучитьПредставлениеОтветственныхЭтапа(Ответственные, ОрганизацияВход);
				РезультатФункции = ДобавитьТекстОДопСогласовании(РезультатФункции, СтрокаЭтапа.КоличествоДопСогласующих);
			ИначеЕсли СтрокаЭтапа.СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.Завершен И НЕ Ответственные=Неопределено Тогда	
				
				СтрокаШаблона = Нстр("ru = '%1
				|Согласовал:'");
				
				РезультатФункции = "";
				Если Не ПустаяСтрока(СтрокаШаблона) тогда								
					РезультатФункции = СтрШаблон(СтрокаШаблона, Строка(СтрокаЭтапа.Этап));
				КонецЕсли;
				 
				РезультатФункции = РезультатФункции + "  
				|" + СтрокаЭтапа.Автор;
				РезультатФункции = ДобавитьТекстОДопСогласовании(РезультатФункции, СтрокаЭтапа.КоличествоДопСогласующих);
			ИначеЕсли СтрокаЭтапа.СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.ЗавершенСОшибкой И НЕ Ответственные=Неопределено Тогда	
				
				СтрокаШаблона = Нстр("ru = '%1
				|Отклонил:'");
				
				РезультатФункции = "";
				Если Не ПустаяСтрока(СтрокаШаблона) тогда								
					РезультатФункции = СтрШаблон(СтрокаШаблона, Строка(СтрокаЭтапа.Этап));
				КонецЕсли;
				 
				РезультатФункции = РезультатФункции + "  
				|" + СтрокаЭтапа.Автор;
			Иначе	
				
				Если НЕ Ответственные = Неопределено Тогда
					
					СтрокаШаблона = Нстр("ru = '%1
					|Согласующие:'");
					
					РезультатФункции = "";
					Если Не ПустаяСтрока(СтрокаШаблона) тогда								
						РезультатФункции = СтрШаблон(СтрокаШаблона, Строка(СтрокаЭтапа.Этап));
					КонецЕсли;
					 
					РезультатФункции = РезультатФункции + ПолучитьПредставлениеОтветственныхЭтапа(Ответственные, ОрганизацияВход, ЭкземплярПроцессаВход);
				Иначе
					
					СтрокаШаблона = Нстр("ru = '%1
					|Согласующие:'");
					
					РезультатФункции = "";
					Если Не ПустаяСтрока(СтрокаШаблона) тогда								
						РезультатФункции = СтрШаблон(СтрокаШаблона, Строка(СтрокаЭтапа.Этап));
					КонецЕсли;
					
					РезультатФункции = РезультатФункции + ПолучитьПредставлениеОтветственныхЭтапа(СтрокаЭтапа.Этап.Утверждающие, ОрганизацияВход);
				КонецЕсли;	
				
			КонецЕсли;
			
		ИначеЕсли  СтрокаЭтапа.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности Тогда   
			// Этап подготовки отчетности.
			НакопленноеОтклонение =  ?(ЗначениеЗаполнено(СтрокаЭтапа.НакопленноеОтклонение), Окр(СтрокаЭтапа.НакопленноеОтклонение,2),0);
			НоваяДатаНачала = ?(ЗначениеЗаполнено(СтрокаЭтапа.ДатаНачала), Формат(СтрокаЭтапа.ДатаНачала, "ДФ=dd.MM.yy"), "");
			НоваяДатаОкончания = ?(ЗначениеЗаполнено(СтрокаЭтапа.ДатаНачала), Формат(СтрокаЭтапа.ДатаОкончания, "ДФ=dd.MM.yy") , "");
			НоваяДлительность = ?(ЗначениеЗаполнено(СтрокаЭтапа.ДлительностьПлановая), СтрокаЭтапа.ДлительностьПлановая, НСтр("ru = 'Нет данных'"));
			РезультатФункции = НСтр("ru = '%Этап%
                                    |%ДатаНачала% - %ДатаОкончания%
                                    |Длит: %ДлительностьПлановая%
                                    |Накопл. отклонение: %НакопленноеОтклонение%'");
			РезультатФункции = СтрЗаменить(РезультатФункции, "%Этап%", Строка(СтрокаЭтапа.Этап));
			РезультатФункции = СтрЗаменить(РезультатФункции, "%ДатаНачала%", НоваяДатаНачала);
			РезультатФункции = СтрЗаменить(РезультатФункции, "%ДатаОкончания%", НоваяДатаОкончания);
			РезультатФункции = СтрЗаменить(РезультатФункции, "%ДлительностьПлановая%", НоваяДлительность);
			РезультатФункции = СтрЗаменить(РезультатФункции, "%НакопленноеОтклонение%", ?(ЗначениеЗаполнено(СтрокаЭтапа.НакопленноеОтклонение), Окр(СтрокаЭтапа.НакопленноеОтклонение,2), ""));
			
			Если СтрокаЭтапа.СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.НеАктивен ИЛИ НЕ ЗначениеЗаполнено(СтрокаЭтапа.СостояниеЭтапа) Тогда
				РезультатФункции = НСтр("ru = '%Этап%
                                         |Длит: %ДлительностьПлановая%'");
				НоваяДлительность = ?(ЗначениеЗаполнено(СтрокаЭтапа.ДлительностьПлановая), СтрокаЭтапа.ДлительностьПлановая, НСтр("ru = 'Нет данных'"));
				РезультатФункции = СтрЗаменить(РезультатФункции, "%Этап%", Строка(СтрокаЭтапа.Этап));
				РезультатФункции = СтрЗаменить(РезультатФункции, "%ДлительностьПлановая%", Строка(НоваяДлительность));
			КонецЕсли;
			
		ИначеЕсли СтрокаЭтапа.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход Тогда
			// Этап ручной переход.
			Если СтрокаЭтапа.СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.ВОбработке И НЕ Ответственные=Неопределено Тогда
				
				СтрокаШаблона = Нстр("ru = '%1
				|Выбор этапа у:'");
				
				РезультатФункции = "";
				Если Не ПустаяСтрока(СтрокаШаблона) тогда								
					РезультатФункции = СтрШаблон(СтрокаШаблона, Строка(СтрокаЭтапа.Этап));
				КонецЕсли;
				 
				РезультатФункции = РезультатФункции + ПолучитьПредставлениеОтветственныхЭтапа(Ответственные, ОрганизацияВход);
				РезультатФункции = ДобавитьТекстОДопСогласовании(РезультатФункции, СтрокаЭтапа.КоличествоДопСогласующих);
			ИначеЕсли СтрокаЭтапа.СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.Завершен И НЕ Ответственные=Неопределено Тогда	
				
				СтрокаШаблона = Нстр("ru = '%1
				|Выбрал этап:'");
				
				РезультатФункции = "";
				Если Не ПустаяСтрока(СтрокаШаблона) тогда								
					РезультатФункции = СтрШаблон(СтрокаШаблона, Строка(СтрокаЭтапа.Этап));
				КонецЕсли;
				 
				РезультатФункции = РезультатФункции + "  
				|" + СтрокаЭтапа.Автор;
				РезультатФункции = ДобавитьТекстОДопСогласовании(РезультатФункции, СтрокаЭтапа.КоличествоДопСогласующих);
			ИначеЕсли СтрокаЭтапа.СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.ЗавершенСОшибкой И НЕ Ответственные=Неопределено Тогда	
				
				СтрокаШаблона = Нстр("ru = '%1
				|Отклонил:'");
				
				РезультатФункции = "";
				Если Не ПустаяСтрока(СтрокаШаблона) тогда								
					РезультатФункции = СтрШаблон(СтрокаШаблона, Строка(СтрокаЭтапа.Этап));
				КонецЕсли;
				 
				РезультатФункции = РезультатФункции + "  
				|" + СтрокаЭтапа.Автор;
				
			Иначе	
				
				Если НЕ Ответственные = Неопределено Тогда
					
					СтрокаШаблона = Нстр("ru = '%1
					|Выбирают этап:'");
					
					РезультатФункции = "";
					Если Не ПустаяСтрока(СтрокаШаблона) тогда								
						РезультатФункции = СтрШаблон(СтрокаШаблона, Строка(СтрокаЭтапа.Этап));
					КонецЕсли;
					
					РезультатФункции = РезультатФункции + ПолучитьПредставлениеОтветственныхЭтапа(Ответственные, ОрганизацияВход);
				Иначе
					
					СтрокаШаблона = Нстр("ru = '%1
					|Выбирают этап:'");
					
					РезультатФункции = "";
					Если Не ПустаяСтрока(СтрокаШаблона) тогда								
						РезультатФункции = СтрШаблон(СтрокаШаблона, Строка(СтрокаЭтапа.Этап));
					КонецЕсли;
					 
					РезультатФункции = РезультатФункции + ПолучитьПредставлениеОтветственныхЭтапа(СтрокаЭтапа.Этап.Утверждающие, ОрганизацияВход);
				КонецЕсли;	
			КонецЕсли;
		Иначе
			РезультатФункции = Строка(СтрокаЭтапа.Этап);
		КонецЕсли;
	Иначе
		РезультатФункции = Строка(СтрокаЭтапа.Этап) + Символы.ПС + Строка(СтрокаЭтапа.ДополнительнаяПодпись);
	КонецЕсли;
	Возврат СокрЛП(РезультатФункции);
КонецФункции		// ПолучитьТекстРисункаЭтапа()

//Процедура расчитывает количество переносов для заданной строки
//
Процедура РасчитатьКоличествоПереносовДляСтроки(СтрокаАнализа, ЧислоСтрокСообщения, ЧислоКороткихСтрок)
	
	ДлинаСтроки = 33;
	ДлинаКороткойСтроки = 20;
		
	МассивСлов = СтрРазделить(СтрокаАнализа, " " + Символы.таб, Ложь);
	
	ДлинаСтрокиПоСловам = 0;
	ПервоеСлово = Истина;
	
	Для каждого Слово Из МассивСлов Цикл
		
		ДлинаСлова = СтрДлина(Слово);
		
		Если ДлинаСлова > ДлинаКороткойСтроки тогда
			
			КратностьСтроки = ДлинаСлова / ДлинаКороткойСтроки;
			КратностьСтрокиЦел = Цел(КратностьСтроки);
			
			ЧислоКороткихСтрок = ЧислоКороткихСтрок + КратностьСтрокиЦел + ?(ПервоеСлово, 0, 1);				
			ДлинаСтрокиПоСловам = ДлинаСлова - КратностьСтрокиЦел * ДлинаКороткойСтроки + 1;
						
			ПервоеСлово = Ложь;
			Продолжить;
			
		КонецЕсли;
		
		Если ДлинаСтрокиПоСловам + ДлинаСлова > ДлинаКороткойСтроки тогда
			
			ЧислоКороткихСтрок = ЧислоКороткихСтрок + 1;
			ДлинаСтрокиПоСловам = ДлинаСлова + 1;
			
		Иначе
			ДлинаСтрокиПоСловам = ДлинаСтрокиПоСловам + ДлинаСлова + 1;
		КонецЕсли;
		
		ПервоеСлово = Ложь;
		
	КонецЦикла;
		
	Если ДлинаСтрокиПоСловам = 1 тогда
		ЧислоКороткихСтрок = ЧислоКороткихСтрок - 1;
	КонецЕсли;
	
	ДлинаСтрокиПоСловам = 0;
	ПервоеСлово = Истина;
	
	Для каждого Слово Из МассивСлов Цикл
		
		ДлинаСлова = СтрДлина(Слово);
		
		Если ДлинаСлова > ДлинаСтроки тогда
			
			КратностьСтроки = ДлинаСлова / ДлинаСтроки;
			КратностьСтрокиЦел = Цел(КратностьСтроки);
			
			ЧислоСтрокСообщения = ЧислоСтрокСообщения + КратностьСтрокиЦел + ?(ПервоеСлово, 0, 1);				
			ДлинаСтрокиПоСловам = ДлинаСлова - КратностьСтрокиЦел * ДлинаСтроки + 1;
						
			ПервоеСлово = Ложь;
			Продолжить;
						
		КонецЕсли;
		
		Если ДлинаСтрокиПоСловам + ДлинаСлова > ДлинаСтроки тогда
			
			ЧислоСтрокСообщения = ЧислоСтрокСообщения + 1;
			ДлинаСтрокиПоСловам = ДлинаСлова + 1;
			
		Иначе
			ДлинаСтрокиПоСловам = ДлинаСтрокиПоСловам + ДлинаСлова + 1;
		КонецЕсли;
		
		ПервоеСлово = Ложь;
		
	КонецЦикла;
	
	Если ДлинаСтрокиПоСловам = 1 тогда
		ЧислоСтрокСообщения = ЧислоСтрокСообщения - 1;
	КонецЕсли;
		
КонецПроцедуры

// Процедура корректирует этап на поле табличного документа
//
Процедура СкорректироватьЭтапПередВыводом(ТабличныйДокумент, СтрокаЭтапа, Уровни, СоответствиеРисунковИЭтапов, Ответственные, ОрганизацияВход = Неопределено,  ВыбранныйЭтапВход = Неопределено, ЭкземплярПроцессаВход = Неопределено)
	
	ТекстОсновногоСообщения = ПолучитьТекстРисункаЭтапа(СтрокаЭтапа, ОрганизацияВход, Ответственные, ЭкземплярПроцессаВход);	                                              
	Уровни.ТекстыЭтапов.Вставить(СтрокаЭтапа.Этап, ТекстОсновногоСообщения);
	
	ЧислоСтрокСообщения = 1;
	ЧислоКороткихСтрок = 1;
	ГоризонтальнаяКоррекцияТекущая = 0;
	
	ТекстОсновногоСообщенияКопия = ТекстОсновногоСообщения;
	КонецПодСтроки = СтрНайти(ТекстОсновногоСообщенияКопия, Символы.ПС) - 1;
	
	Пока КонецПодСтроки > 0 Цикл
		
		ЧислоСтрокСообщения = ЧислоСтрокСообщения + 1;
		ЧислоКороткихСтрок = ЧислоКороткихСтрок + 1;
		
		РасчитатьКоличествоПереносовДляСтроки(Лев(ТекстОсновногоСообщенияКопия, КонецПодСтроки), ЧислоСтрокСообщения, ЧислоКороткихСтрок);
						
		ТекстОсновногоСообщенияКопия = СокрЛП(Сред(ТекстОсновногоСообщенияКопия, КонецПодСтроки + 2));
		КонецПодСтроки = СтрНайти(ТекстОсновногоСообщенияКопия, Символы.ПС) - 1;
		
	КонецЦикла;
		
	РасчитатьКоличествоПереносовДляСтроки(ТекстОсновногоСообщенияКопия, ЧислоСтрокСообщения, ЧислоКороткихСтрок);
			
	Если СтрокаЭтапа.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности тогда
		РазмерПоляДиаграммы = 4;
	Иначе
		РазмерПоляДиаграммы = 7;
	КонецЕсли;
	
	Если ЧислоКороткихСтрок > РазмерПоляДиаграммы тогда
		ГоризонтальнаяКоррекцияТекущая = 20;
	КонецЕсли;
	
	ЧислоДополнительныхСтрок = ЧислоСтрокСообщения - РазмерПоляДиаграммы;
	
	ГоризонтальнаяКоррекцияТекущая = Макс(ГоризонтальнаяКоррекцияТекущая, Уровни.Х[СтрокаЭтапа.УровеньХ].ШиринаЭтапа - 35);
	ВертикальнаяКоррекцияТекущая = ?(ЧислоДополнительныхСтрок < 0, 0, ЧислоДополнительныхСтрок * 4);
		
	ВертикальнаяКоррекция = ВертикальнаяКоррекцияТекущая;
	
	Если ВертикальнаяКоррекцияТекущая > 0 тогда
		
		Для Каждого Уровень_У Из Уровни.У Цикл
			
			Если Уровень_У.Ключ > СтрокаЭтапа.УровеньУ тогда
				
				Если (Уровень_У.Ключ = СтрокаЭтапа.УровеньУ + 1) тогда
					ВертикальнаяКоррекция = Уровни.У[СтрокаЭтапа.УровеньУ].ВертикальнаяКоррекция + ВертикальнаяКоррекцияТекущая - Уровень_У.Значение.ВертикальнаяКоррекция;
				КонецЕсли;
				
				Если ВертикальнаяКоррекция <= 0 тогда
					Продолжить;
				КонецЕсли;
				
				Уровень_У.Значение.ВертикальнаяКоррекция = Уровень_У.Значение.ВертикальнаяКоррекция + ВертикальнаяКоррекция;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ГоризонтальнаяКоррекцияТекущая > 0 тогда
		
		Для Каждого Уровень_Х Из Уровни.Х Цикл
			
			Если Уровень_Х.Ключ > СтрокаЭтапа.УровеньХ тогда
				
				Если (Уровень_Х.Ключ = СтрокаЭтапа.УровеньХ + 1) 
					И (Уровень_Х.Значение.ГоризонтальнаяКоррекция - Уровни.Х[СтрокаЭтапа.УровеньХ].ГоризонтальнаяКоррекция >= ГоризонтальнаяКоррекцияТекущая) тогда
					
					Прервать;
				КонецЕсли;
				
				Уровень_Х.Значение.ГоризонтальнаяКоррекция = Уровень_Х.Значение.ГоризонтальнаяКоррекция + ГоризонтальнаяКоррекцияТекущая;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
		
	ШиринаЭтапа   = 35 + ГоризонтальнаяКоррекцияТекущая;
	ВысотаЭтапа   = 40 + ВертикальнаяКоррекцияТекущая;
	
	Уровни.ВысотаЭтапов.Вставить(СтрокаЭтапа.Этап, ВысотаЭтапа);
	
	Уровни.Х[СтрокаЭтапа.УровеньХ].ШиринаЭтапа = ШиринаЭтапа;
		
КонецПроцедуры

// Процедура рисует этап на поле табличного документа
//
Процедура НарисоватьЭтап(ТабличныйДокумент, СтрокаЭтапа, Уровни, СоответствиеРисунковИЭтапов, Ответственные, ОрганизацияВход = Неопределено,  ВыбранныйЭтапВход = Неопределено, ЭкземплярПроцессаВход = Неопределено)
		
	Расшифровка = СтрокаЭтапа.Этап;
	
	ТекстОсновногоСообщения = Уровни.ТекстыЭтапов[Расшифровка];
			
	ШиринаЭтапа   = Уровни.Х[СтрокаЭтапа.УровеньХ].ШиринаЭтапа;	
	ВысотаЭтапа = Уровни.ВысотаЭтапов[Расшифровка];
	ВертикальнаяКоррекцияТекущая = ВысотаЭтапа - 40;
	
	ВысотаСтрокиТекста = 10;
		
	ВерхЭтапа = Уровни.У[СтрокаЭтапа.УровеньУ].ВерхЭтапа + Уровни.У[СтрокаЭтапа.УровеньУ].ВертикальнаяКоррекция;
	ЛевоЭтапа = Уровни.Х[СтрокаЭтапа.УровеньХ].ЛевоЭтапа + Уровни.Х[СтрокаЭтапа.УровеньХ].ГоризонтальнаяКоррекция;
	
	УникальныйИдентификатор = Новый УникальныйИдентификатор;
	Строка_УИ               = Строка(УникальныйИдентификатор);
	
	РисунокТень = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямоугольник); //тень
	РисунокТень.Лево = ЛевоЭтапа ;
	РисунокТень.Верх = ВерхЭтапа ;//ВысотаЭтапа;
	РисунокТень.Ширина = ШиринаЭтапа + 0.5;
	РисунокТень.Высота = ВысотаЭтапа + 0.5;
	Если (ВыбранныйЭтапВход = Неопределено) ИЛИ (Расшифровка <> ВыбранныйЭтапВход) Тогда
		РисунокТень.ЦветФона = Новый Цвет(153,153, 153);
	Иначе
		РисунокТень.ЦветФона = Новый Цвет(255, 215, 0);			// Подсветка выбранного этапа.
	КонецЕсли;
	
	РисунокТень.ГраницаСверху = Ложь;
	РисунокТень.ГраницаСнизу  = Ложь;
	РисунокТень.ГраницаСправа = Ложь;
	РисунокТень.ГраницаСлева  = Ложь;
	РисунокТень.Узор = ТипУзораТабличногоДокумента.Сплошной;
	
	Рисунок = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямоугольник);//Основа;
	Рисунок.Лево = ЛевоЭтапа;
	Рисунок.Верх = ВерхЭтапа;
	Рисунок.Ширина = ШиринаЭтапа;
	Рисунок.Высота = ВысотаЭтапа;
	// Определим цвет фона этапа.
	ЕстьЦветФона = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаЭтапа, "ЦветФона") Тогда
		ЕстьЦветФона = (СтрокаЭтапа.ЦветФона <> Неопределено);
	Иначе
		ЕстьЦветФона = Ложь;
	КонецЕсли;
	Если ЕстьЦветФона Тогда
		Рисунок.ЦветФона = СтрокаЭтапа.ЦветФона;
	Иначе	
		// Изменим фон этапа в зависимости от его состояния.
		Если  СтрокаЭтапа.СостояниеЭтапа = NULL 
			ИЛИ СтрокаЭтапа.СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.НеАктивен   Тогда
			Рисунок.ЦветФона = Новый Цвет(250,250,250);
		ИначеЕсли СтрокаЭтапа.СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.Завершен Тогда
			Рисунок.ЦветФона = Новый Цвет(210, 250, 200);	
		ИначеЕсли СтрокаЭтапа.СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.ВОбработке Тогда	
			Рисунок.ЦветФона = Новый Цвет(200, 230, 255);	
		ИначеЕсли СтрокаЭтапа.СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.ЗавершенСОшибкой Тогда	
			Рисунок.ЦветФона = Новый Цвет(250, 200, 200);	
		КонецЕсли;
	КонецЕсли;

	Рисунок.ГраницаСверху = Ложь;
	Рисунок.ГраницаСнизу  = Ложь;
	Рисунок.ГраницаСправа = Ложь;
	Рисунок.ГраницаСлева  = Ложь;
	Рисунок.Узор = ТипУзораТабличногоДокумента.Сплошной;
	Рисунок.Имя  = "4_" + Строка_УИ;
	
	// Изменим цвет этапа, если по нему есть ошибки.
	ЕстьОшибкиПоЭтапу = ПроверитьОшибкиЭтапа(Расшифровка);
	Если ЕстьОшибкиПоЭтапу Тогда
		Рисунок.ГраницаСверху	 = Истина;
		Рисунок.ГраницаСнизу	 = Истина;
		Рисунок.ГраницаСправа	 = Истина;
		Рисунок.ГраницаСлева	 = Истина;
		Рисунок.ЦветЛинии = WebЦвета.Лосось;
	Иначе	
		// Не меняем цвет этапа.
	КонецЕсли;
	
	// Обновим значение кеша ошибок в этапе при необходимости.
	Если ЕстьОшибкиПоЭтапу <> Расшифровка.НайденыОшибки Тогда
		Попытка
			ЭтапОбъект = Расшифровка.ПолучитьОбъект();
			ЭтапОбъект.НайденыОшибки = ЕстьОшибкиПоЭтапу;
			ЭтапОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удаось обновить кеш ошибок для этапа %ЭтапВход%: %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭтапВход%", Строка(Расшифровка));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецПопытки;
	Иначе
		// Значение кеша актуально. Не изменяем этап.
	КонецЕсли;
	
	//Рисуем заголовок с названием этапа	
	Если СтрокаЭтапа.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования Тогда
		Рисунок = НарисоватьТекст(ТабличныйДокумент, ТекстОсновногоСообщения, Расшифровка, ЛевоЭтапа, ВерхЭтапа + ВысотаСтрокиТекста, ШиринаЭтапа, ВысотаСтрокиТекста * 3 + ВертикальнаяКоррекцияТекущая);	
	ИначеЕсли  СтрокаЭтапа.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности Тогда   
		НакопленноеОтклонение =  ?(ЗначениеЗаполнено(СтрокаЭтапа.НакопленноеОтклонение), Окр(СтрокаЭтапа.НакопленноеОтклонение,2),0);
		
		Если  НакопленноеОтклонение>0 Тогда
		    РисунокТень.ЦветФона = Новый Цвет(255,0,0);
		КонецЕсли;
			
		Рисунок = НарисоватьТекст(ТабличныйДокумент, ТекстОсновногоСообщения, Расшифровка, ЛевоЭтапа, ВерхЭтапа + 6, ШиринаЭтапа, ВысотаСтрокиТекста * 3 + ВертикальнаяКоррекцияТекущая);
		
		ВерхРисунка = Рисунок.Верх + Рисунок.Высота;
		
		ЛевоРисунка = ЛевоЭтапа;
		
		ЦветЛинии = Новый Цвет (0,0,0);
		
		Если СтрокаЭтапа.СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.ВОбработке Тогда
			ОтобразитьСостояние("Выполняется", СтрокаЭтапа, ТабличныйДокумент, ЛевоРисунка, ВерхРисунка-3, ВысотаСтрокиТекста, ЦветЛинии,Расшифровка);
		КонецЕсли;
		Если СтрокаЭтапа.СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.Завершен Тогда
			ОтобразитьСостояние("Утвержден", СтрокаЭтапа, ТабличныйДокумент, ЛевоРисунка, ВерхРисунка-3, ВысотаСтрокиТекста, ЦветЛинии,Расшифровка);
		КонецЕсли;	
	ИначеЕсли СтрокаЭтапа.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход Тогда
		Рисунок = НарисоватьТекст(ТабличныйДокумент, ТекстОсновногоСообщения, Расшифровка, ЛевоЭтапа, ВерхЭтапа + ВысотаСтрокиТекста, ШиринаЭтапа, ВысотаСтрокиТекста * 3 + ВертикальнаяКоррекцияТекущая);		
	Иначе
		Рисунок = НарисоватьТекст(ТабличныйДокумент, ТекстОсновногоСообщения, Расшифровка, ЛевоЭтапа, ВерхЭтапа + ВысотаСтрокиТекста, ШиринаЭтапа, ВысотаСтрокиТекста * 3 + ВертикальнаяКоррекцияТекущая);
	КонецЕсли;
	
	Рисунок.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
	Рисунок.Имя = "1_" + Строка_УИ;
	Рисунок.ГраницаСверху = Ложь;
	Рисунок.ГраницаСнизу  = Ложь;
	Рисунок.ГраницаСправа = Ложь;
	Рисунок.ГраницаСлева  = Ложь;
	Рисунок.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	Рисунок.ВертикальноеПоложение   = ВертикальноеПоложение.Верх;
	Рисунок.Узор = ТипУзораТабличногоДокумента.БезУзора;
	
	НоваяСтрока = СоответствиеРисунковИЭтапов.Добавить();
	НоваяСтрока.Этап = СтрокаЭтапа.Этап;
	НоваяСтрока.ИмяРисунка  = УникальныйИдентификатор;
	
	//Рисуем картинку типа этапа
	Рисунок = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
	Рисунок.Лево   = ЛевоЭтапа;
	Рисунок.Верх   = ВерхЭтапа;
	Рисунок.Ширина = ШиринаЭтапа;
	
	Рисунок.ГраницаСверху = Ложь;
	Рисунок.ГраницаСнизу  = Ложь;
	Рисунок.ГраницаСправа = Ложь;
	Рисунок.ГраницаСлева  = Ложь;
	Рисунок.Узор = ТипУзораТабличногоДокумента.БезУзора;
	
	Рисунок.Высота = ВысотаСтрокиТекста-2;
	Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
	Рисунок.Имя    = "2_" + Строка_УИ;
	
	Если СтрокаЭтапа.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ДочернийМаршрут Тогда
		Рисунок.Картинка = БиблиотекаКартинок.БизнесПроцесс;
	ИначеЕсли СтрокаЭтапа.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.УсловныйПереход Тогда
		Рисунок.Картинка = БиблиотекаКартинок.Вопрос32;
	ИначеЕсли СтрокаЭтапа.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования Тогда
		Рисунок.Картинка = БиблиотекаКартинок.ЗапланированнаяИдея;			
	ИначеЕсли СтрокаЭтапа.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Оповещение Тогда
		Рисунок.Картинка = БиблиотекаКартинок.Оповещение;	
	ИначеЕсли СтрокаЭтапа.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Автоутверждение Тогда
		Рисунок.Картинка = БиблиотекаКартинок.ЗеленаяГалка;
	ИначеЕсли СтрокаЭтапа.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Автоотклонение Тогда
		Рисунок.Картинка = БиблиотекаКартинок.КрасныйКрест;
	ИначеЕсли СтрокаЭтапа.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности Тогда
		Рисунок.Высота = ВысотаСтрокиТекста-5;
		Рисунок.Картинка = БиблиотекаКартинок.ВидыОтчетов_32;
	ИначеЕсли СтрокаЭтапа.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Обработка Тогда
		Рисунок.Картинка = БиблиотекаКартинок.Шестеренки;
	ИначеЕсли СтрокаЭтапа.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЦиклПока Тогда
		Рисунок.Картинка = БиблиотекаКартинок.ЦиклПока;
	ИначеЕсли СтрокаЭтапа.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапУниверсальногоЭкспорта Тогда
		Рисунок.Картинка = БиблиотекаКартинок.Процессы_ЭтапУниверсальногоЭкспорта;
    ИначеЕсли СтрокаЭтапа.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапУниверсальногоИмпорта Тогда
		Рисунок.Картинка = БиблиотекаКартинок.Процессы_ЭтапУниверсальногоИмпорта;
    ИначеЕсли СтрокаЭтапа.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Пауза Тогда
		Рисунок.Картинка = БиблиотекаКартинок.Пауза;
    ИначеЕсли СтрокаЭтапа.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход Тогда
		Рисунок.Картинка = БиблиотекаКартинок.РучнойПереход;
	КонецЕсли;
	
	Если СтрокаЭтапа.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования ИЛИ СтрокаЭтапа.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности Тогда
		
		Рисунок = НарисоватьТекст(ТабличныйДокумент, "", Расшифровка, ЛевоЭтапа, ВерхЭтапа + ВысотаСтрокиТекста * 2 + ВертикальнаяКоррекцияТекущая, ШиринаЭтапа, ВысотаСтрокиТекста * 2);
		
		Рисунок.РазмещениеТекста = ТипРазмещенияТекстаТабличногоДокумента.Переносить;
		Рисунок.ГраницаСверху = Ложь;
		Рисунок.ГраницаСнизу  = Ложь;
		Рисунок.ГраницаСправа = Ложь;
		Рисунок.ГраницаСлева  = Ложь;
		Рисунок.Узор = ТипУзораТабличногоДокумента.БезУзора;
		Рисунок.Имя = "3_" + УникальныйИдентификатор;
			
	КонецЕсли;
	
КонецПроцедуры		// НарисоватьЭтап()

// Процедура рисует связи этапа на поле табличного документа
//
Процедура НарисоватьСвязи(Этапы, ТабличныйДокумент, СтрокаЭтапа, Уровни, ВыбранныйЭтапВход = Неопределено)
	   	
	Расшифровка = Неопределено;
	
	ВертикальнаяКоррекцияТекущая = Уровни.У[СтрокаЭтапа.УровеньУ].ВертикальнаяКоррекция;
	ГоризонтальнаяКоррекцияТекущая = Уровни.Х[СтрокаЭтапа.УровеньХ].ГоризонтальнаяКоррекция;
	
	ВерхЭтапа = Уровни.У[СтрокаЭтапа.УровеньУ].ВерхЭтапа + ВертикальнаяКоррекцияТекущая;	
	ЛевоЭтапа = Уровни.Х[СтрокаЭтапа.УровеньХ].ЛевоЭтапа + ГоризонтальнаяКоррекцияТекущая;
	
	ШиринаОтступа = 5;
	ВысотаОтступа = 5;
	ШиринаИзгиба  = 2;
	
	СтруктураПоискаЭтапа = Новый Структура("УровеньХ, УровеньУ");
	
	Для каждого СтрокаПредшественника Из СтрокаЭтапа.ЭтапыПредшественники Цикл
		
		СтрокаЭтапаПредшественника = СтрокаПредшественника.СтрокаЭтапаПредшественника;
		
		Если Не ЗначениеЗаполнено(СтрокаЭтапаПредшественника) Тогда
			Продолжить;
		КонецЕсли;
		
		// Ширина линии.
		ЕстьКолонкаТолщина = (СтрокаЭтапа.ЭтапыПредшественники.Колонки.Найти("ТолщинаЛинии") <> Неопределено);
		НоваяТолщина = Неопределено;
		Если ЕстьКолонкаТолщина Тогда
			НоваяТолщина = СтрокаПредшественника.ТолщинаЛинии;
		Иначе
			НоваяТолщина = Неопределено;
		КонецЕсли;
		// Подпись линии.
		ЕстьКолонкаПодпись = (СтрокаЭтапа.ЭтапыПредшественники.Колонки.Найти("ПодписьЛинии") <> Неопределено);
		НоваяПодпись = "";
		Если ЕстьКолонкаПодпись Тогда
			НоваяПодпись = СтрокаПредшественника.ПодписьЛинии;
		Иначе
			НоваяПодпись = "";
		КонецЕсли;
		
		ВертикальнаяКоррекцияПредшественника = Уровни.У[СтрокаЭтапаПредшественника.УровеньУ].ВертикальнаяКоррекция;
		ГоризонтальнаяКоррекцияПредшественника = Уровни.Х[СтрокаЭтапаПредшественника.УровеньХ].ГоризонтальнаяКоррекция;
		
		ВерхПредшественника = Уровни.У[СтрокаЭтапаПредшественника.УровеньУ].ВерхЭтапа + ВертикальнаяКоррекцияПредшественника;
		ЛевоПредшественника = Уровни.Х[СтрокаЭтапаПредшественника.УровеньХ].ЛевоЭтапа + ГоризонтальнаяКоррекцияПредшественника;
		
		ВысотаЭтапа   = Уровни.ВысотаЭтапов[СтрокаЭтапа.Этап];
		ВысотаЭтапаПредшественника   = Уровни.ВысотаЭтапов[СтрокаЭтапаПредшественника.Этап];
		ШиринаЭтапаПредшественника   = Уровни.Х[СтрокаЭтапаПредшественника.УровеньХ].ШиринаЭтапа;
		
		Флаг = ?(СтрокаЭтапаПредшественника.УровеньУ > СтрокаЭтапа.УровеньУ, -1, 1);
		
		СтрокаПоследователя = СтрокаЭтапаПредшественника.ТаблицаПоследователей.Найти(СтрокаЭтапа.Этап, "Этап");
		
		СтильЛинии = ТипЛинииРисункаТабличногоДокумента.Сплошная;
		Если СтрокаПоследователя <> Неопределено Тогда
			Если СтрокаПоследователя.Уровень = 0 Тогда
				ЦветЛинии = Новый Цвет;
			Иначе
				ЦветЛинии = Новый Цвет(125, 125, 250);
			КонецЕсли;
		Иначе
			ЦветЛинии = Новый Цвет(250, 125, 125);
		КонецЕсли;
		// Подстветка выбранного этапа.
		Если (СтрокаПредшественника.ЭтапПроцесса = ВыбранныйЭтапВход) ИЛИ (СтрокаЭтапа.Этап = ВыбранныйЭтапВход) Тогда
			ЦветЛинии = Новый Цвет(255, 215, 0);
		Иначе
			// Не нужно подсвечивать этап.
		КонецЕсли;
		
		Если СтрокаЭтапаПредшественника.УровеньХ + 1 = СтрокаЭтапа.УровеньХ Тогда
			
			ЛевоЛинии   = ЛевоПредшественника + ШиринаЭтапаПредшественника;
			ВерхЛинии = ВерхПредшественника + ВысотаЭтапаПредшественника / 4;			
			ДельтаОриентиров = ВысотаЭтапаПредшественника / 4 - ВысотаЭтапа / 4;
										
			НарисоватьЛинию(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ЛевоЭтапа - ЛевоЛинии - СтрокаПредшественника.ОтступХ * ШиринаОтступа - ШиринаИзгиба, 0, ЦветЛинии, НоваяТолщина, СтильЛинии, 0.5);

			Если СтрокаЭтапаПредшественника.УровеньУ = СтрокаЭтапа.УровеньУ Тогда
				НарисоватьИзгиб(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ШиринаИзгиба, ШиринаИзгиба, ЦветЛинии, НоваяТолщина, СтильЛинии);
				НарисоватьЛинию(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, 0, ВысотаЭтапа / 2 - ШиринаИзгиба * 2 - ДельтаОриентиров, ЦветЛинии, НоваяТолщина, СтильЛинии);
				НарисоватьИзгиб(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ШиринаИзгиба, ШиринаИзгиба, ЦветЛинии, НоваяТолщина, СтильЛинии);
			Иначе
				НарисоватьИзгиб(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ШиринаИзгиба, Флаг * ШиринаИзгиба, ЦветЛинии, НоваяТолщина, СтильЛинии);
				НарисоватьЛинию(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, 0, ВерхЭтапа + ВысотаЭтапа / 4 * 3 - ВерхЛинии - Флаг * ШиринаИзгиба, ЦветЛинии, НоваяТолщина, СтильЛинии);
				НарисоватьИзгиб(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ШиринаИзгиба, Флаг * ШиринаИзгиба, ЦветЛинии, НоваяТолщина, СтильЛинии);
			КонецЕсли;
			
			НарисоватьЛинию(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ЛевоЭтапа - ЛевоЛинии, 0, ЦветЛинии, НоваяТолщина, СтильЛинии);
			// Выведем подпись линии.
			Если ЗначениеЗаполнено(НоваяПодпись) Тогда
				НарисоватьТекст(ТабличныйДокумент, НоваяПодпись, Расшифровка, Цел(ЛевоЛинии - ШиринаОтступа*2), Цел(ВерхЛинии - ВысотаОтступа*1.5), Цел(ШиринаОтступа*2), Цел(ВысотаОтступа*1.5), Ложь);
			Иначе
				// Не выводим подпись линии.
			КонецЕсли;
			НарисоватьСтрелку(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ЦветЛинии, НоваяТолщина);
						
		Иначе
			
			ЛевоЛинии   = ЛевоПредшественника + ШиринаЭтапаПредшественника / 4 * 3;
			ВерхЛинии   = ВерхПредшественника + ВысотаЭтапаПредшественника;
						
			СтруктураПоискаЭтапа.Вставить("УровеньУ", СтрокаЭтапаПредшественника.УровеньУ);
			ВертикальнаяКоррекция = 0;
						
			Для ИндексУровняХ = 0 По Уровни.Х.Количество() Цикл
				
				СтруктураПоискаЭтапа.Вставить("УровеньХ", ИндексУровняХ);
				СтрокиЭтапов = Этапы.НайтиСтроки(СтруктураПоискаЭтапа);
				
				Если СтрокиЭтапов.Количество() > 0 тогда
					ВертикальнаяКоррекция = Макс(ВертикальнаяКоррекция, Уровни.ВысотаЭтапов[СтрокиЭтапов[0].Этап] - 40);
				КонецЕсли;
									
			КонецЦикла;
			
			ВертикальнаяКоррекция = ВертикальнаяКоррекция - Уровни.ВысотаЭтапов[СтрокаЭтапаПредшественника.Этап] + 40;
			ВертикальнаяКоррекция = ?(ВертикальнаяКоррекция < 0, 0, ВертикальнаяКоррекция);
			
			НарисоватьЛинию(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, 0, ВысотаОтступа * Макс(СтрокаПредшественника.ОтступУ, 1) - ШиринаИзгиба + ВертикальнаяКоррекция, ЦветЛинии, НоваяТолщина, СтильЛинии, 0.5);
			Если СтрокаЭтапа.УровеньХ <= СтрокаЭтапаПредшественника.УровеньХ тогда
				НарисоватьИзгиб(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, - ШиринаИзгиба, ШиринаИзгиба, ЦветЛинии, НоваяТолщина, СтильЛинии);
			Иначе
				НарисоватьИзгиб(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ШиринаИзгиба, ШиринаИзгиба, ЦветЛинии, НоваяТолщина, СтильЛинии);
			КонецЕсли;
			
			Если СтрокаЭтапа.УровеньХ <= СтрокаЭтапаПредшественника.УровеньХ тогда
				НарисоватьЛинию(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ЛевоЭтапа - ЛевоЛинии - СтрокаПредшественника.ОтступХ*ШиринаОтступа + ШиринаИзгиба, 0, ЦветЛинии, НоваяТолщина, СтильЛинии);
			Иначе
				НарисоватьЛинию(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ЛевоЭтапа - ЛевоЛинии - СтрокаПредшественника.ОтступХ*ШиринаОтступа - ШиринаИзгиба, 0, ЦветЛинии, НоваяТолщина, СтильЛинии);
			КонецЕсли;
			
			Если СтрокаЭтапаПредшественника.УровеньУ = СтрокаЭтапа.УровеньУ Тогда
				Если СтрокаЭтапа.УровеньХ <= СтрокаЭтапаПредшественника.УровеньХ тогда
					НарисоватьИзгиб(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, - ШиринаИзгиба, - ШиринаИзгиба, ЦветЛинии, НоваяТолщина, СтильЛинии);
				Иначе
					НарисоватьИзгиб(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ШиринаИзгиба, - ШиринаИзгиба, ЦветЛинии, НоваяТолщина, СтильЛинии);
				КонецЕсли;
				
				НарисоватьЛинию(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, 0, ВерхЭтапа + ВысотаЭтапа / 4 * 3 - ВерхЛинии + ШиринаИзгиба, ЦветЛинии, НоваяТолщина, СтильЛинии);
				НарисоватьИзгиб(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ШиринаИзгиба, - ШиринаИзгиба, ЦветЛинии, НоваяТолщина, СтильЛинии);
			Иначе
				Если СтрокаЭтапа.УровеньХ <= СтрокаЭтапаПредшественника.УровеньХ тогда
					НарисоватьИзгиб(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, - ШиринаИзгиба, Флаг * ШиринаИзгиба, ЦветЛинии, НоваяТолщина, СтильЛинии);
				Иначе
					НарисоватьИзгиб(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ШиринаИзгиба, Флаг * ШиринаИзгиба, ЦветЛинии, НоваяТолщина, СтильЛинии);
				КонецЕсли;
				
				НарисоватьЛинию(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, 0, ВерхЭтапа + ВысотаЭтапа / 4 * 3 - ВерхЛинии - Флаг * ШиринаИзгиба, ЦветЛинии, НоваяТолщина, СтильЛинии);
				НарисоватьИзгиб(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ШиринаИзгиба, Флаг * ШиринаИзгиба, ЦветЛинии, НоваяТолщина, СтильЛинии);
			КонецЕсли;
			
			НарисоватьЛинию(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ЛевоЭтапа - ЛевоЛинии, 0, ЦветЛинии, НоваяТолщина, СтильЛинии);
			НарисоватьСтрелку(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ЦветЛинии, НоваяТолщина);
	
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция выводит рисунок типа "текст" в табличный документ 
//
Функция НарисоватьТекст(ТабличныйДокумент, Текст, Расшифровка, Лево, Верх, Ширина, Высота, ОтображатьГраницыВход = Ложь)

	Рисунок = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Текст);
	Рисунок.Лево   = Лево;
	Рисунок.Верх   = Верх;
	Рисунок.Ширина = Ширина;
	Рисунок.Высота = Высота;	
	Рисунок.Расшифровка = Расшифровка;
	Рисунок.Текст = Текст;
	Рисунок.ГраницаСверху = ОтображатьГраницыВход;
	Рисунок.ГраницаСлева = ОтображатьГраницыВход;
	Рисунок.ГраницаСнизу = ОтображатьГраницыВход;
	Рисунок.ГраницаСправа = ОтображатьГраницыВход;
	
	Возврат Рисунок;
	
КонецФункции // ()

// Функция выводит рисунок типа "линия" в табличный документ
//
Процедура НарисоватьЛинию(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ШиринаЛинии, ВысотаЛинии, ЦветЛинии = Неопределено, ТолщинаЛинииВход = Неопределено, СтильЛинииВход = Неопределено, КоррекцияНаТень = 0);
	
	Если ЦветЛинии = Неопределено Тогда
		ЦветЛинии = Новый Цвет;
	КонецЕсли;
	// Заполним стиль линии.
	НовыйСтильЛинии = ТипЛинииРисункаТабличногоДокумента.Сплошная;
	Если СтильЛинииВход <> Неопределено Тогда
		НовыйСтильЛинии = СтильЛинииВход;
	Иначе
		НовыйСтильЛинии = ТипЛинииРисункаТабличногоДокумента.Сплошная;
	КонецЕсли;
	
	//Выполним коррекцию на тень
	Если КоррекцияНаТень <> 0 И ВысотаЛинии <> 0 тогда   //Линия вертикальная
		ВерхЛинии = ВерхЛинии + КоррекцияНаТень;
		ВысотаЛинии = ВысотаЛинии - КоррекцияНаТень;
	ИначеЕсли КоррекцияНаТень <> 0 И ШиринаЛинии <> 0 тогда    //Линия горизонтальная
		ЛевоЛинии = ЛевоЛинии + КоррекцияНаТень;
		ШиринаЛинии = ШиринаЛинии - КоррекцияНаТень;	
	КонецЕсли;
	
	Линия = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямая);
	Линия.Лево   = ЛевоЛинии;
	Линия.Верх   = ВерхЛинии;
	Линия.Ширина = ШиринаЛинии;
	Линия.Высота = ВысотаЛинии;
	Линия.ЦветЛинии = ЦветЛинии;
	Линия.Расшифровка = Расшифровка;
	// Выставим толщину в зависимости от параметра ТолщинаЛинииВход.
	Если ЗначениеЗаполнено(ТолщинаЛинииВход) Тогда 
		Линия.Линия = Новый Линия(НовыйСтильЛинии, ТолщинаЛинииВход);
	Иначе
		Линия.Линия = Новый Линия(НовыйСтильЛинии, 2);
	КонецЕсли;
	
	ЛевоЛинии = ЛевоЛинии + ШиринаЛинии;
	ВерхЛинии = ВерхЛинии + ВысотаЛинии;
	
КонецПроцедуры

// Функция выводит рисунок из линий, в виде изгиба, в табличный документ
//
Процедура НарисоватьИзгиб(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ШиринаЛинии, ВысотаЛинии, ЦветЛинии = Неопределено, ТолщинаЛинииВход = Неопределено, СтильЛинииВход = Неопределено);
	
	Если ЦветЛинии = Неопределено Тогда
		ЦветЛинии = Новый Цвет;
	КонецЕсли;
	// Заполним стиль линии.
	НовыйСтильЛинии = ТипЛинииРисункаТабличногоДокумента.Сплошная;
	Если СтильЛинииВход <> Неопределено Тогда
		НовыйСтильЛинии = СтильЛинииВход;
	Иначе
		НовыйСтильЛинии = ТипЛинииРисункаТабличногоДокумента.Сплошная;
	КонецЕсли;
	
	Отступ = 0.1;
	СдвигЛево = ?(ШиринаЛинии > 0, Отступ, -Отступ);
	СдвигВерх = ?(ВысотаЛинии > 0, Отступ, -Отступ);
	
	Линия = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямая);
	Линия.Лево   = ЛевоЛинии + СдвигЛево;
	Линия.Верх   = ВерхЛинии + СдвигВерх;
	Линия.Ширина = ШиринаЛинии - СдвигЛево * 2;
	Линия.Высота = ВысотаЛинии - СдвигВерх * 2;
	Линия.ЦветЛинии = ЦветЛинии;
	Линия.Расшифровка = Расшифровка;
	// Выставим толщину в зависимости от параметра ТолщинаЛинииВход.
	Если ЗначениеЗаполнено(ТолщинаЛинииВход) Тогда 
		Линия.Линия = Новый Линия(НовыйСтильЛинии, ТолщинаЛинииВход);
	Иначе
		Линия.Линия = Новый Линия(НовыйСтильЛинии, 2);
	КонецЕсли;
	ЛевоЛинии = ЛевоЛинии + ШиринаЛинии;
	ВерхЛинии = ВерхЛинии + ВысотаЛинии;
	
КонецПроцедуры

// Функция выводит рисунок из линий, в виде стрелки, в табличный документ
//
Процедура НарисоватьСтрелку(ТабличныйДокумент, Расшифровка, ЛевоЛинии, ВерхЛинии, ЦветЛинии = Неопределено, ТолщинаЛинииВход = Неопределено)
	
	Если ЦветЛинии = Неопределено Тогда
		ЦветЛинии = Новый Цвет;
	КонецЕсли;
	
	Линия = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямая);
	Линия.Лево   = ЛевоЛинии - 2;
	Линия.Верх   = ВерхЛинии - 1.5;
	Линия.Ширина = 1.5;
	Линия.Высота = 1.5;
	Линия.ЦветЛинии = ЦветЛинии;
	Линия.Расшифровка = Расшифровка;
	// Выставим толщину в зависимости от параметра ТолщинаЛинииВход.
	Если ЗначениеЗаполнено(ТолщинаЛинииВход) Тогда 
		Линия.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная, ТолщинаЛинииВход);
	Иначе
		Линия.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная, 2);
	КонецЕсли;
	Линия = ТабличныйДокумент.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Прямая);
	Линия.Лево   = ЛевоЛинии - 2;
	Линия.Верх   = ВерхЛинии + 1.5;
	Линия.Ширина = 1.5;
	Линия.Высота = -1.5;
	Линия.ЦветЛинии = ЦветЛинии;
	Линия.Расшифровка = Расшифровка;
	// Выставим толщину в зависимости от параметра ТолщинаЛинииВход.
	Если ЗначениеЗаполнено(ТолщинаЛинииВход) Тогда 
		Линия.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная, ТолщинаЛинииВход);
	Иначе
		Линия.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.Сплошная, 2);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтобразитьСостояние(ИмяСостоянияЭтапа, СтрокаЭтапа, ТабличныйДокумент, ЛевоРисунка, ВерхРисунка, ВысотаСтрокиТекста, ЦветЛинии, Расшифровка)
	
	ШиринаЭтапа   = 35;
	

	КоличествоСостояния = СтрокаЭтапа["Этап" + "Утвержден"];
	//Если НЕ ЗначениеЗаполнено(КоличествоСостояния) Тогда
	//	ШиринаРисунка = ШиринаЭтапа;
	//Иначе	
	//	ШиринаРисунка = КоличествоСостояния / СтрокаЭтапа.КоличествоОрганизаций * ШиринаЭтапа;

	//КонецЕсли;
	ШиринаРисунка = ШиринаЭтапа;
	Если ЗначениеЗаполнено(КоличествоСостояния) И ЗначениеЗаполнено(СтрокаЭтапа.КоличествоОрганизаций) Тогда
		Текст = "Утверждено: " + Строка(Окр(КоличествоСостояния / СтрокаЭтапа.КоличествоОрганизаций * 100)) + "%";
	Иначе
		Текст = "Утверждено: 0%";
	КонецЕсли;
    Рисунок = НарисоватьТекст(ТабличныйДокумент, Текст, Расшифровка, ЛевоРисунка, ВерхРисунка, ШиринаРисунка, ВысотаСтрокиТекста-5);
	
	Если ИмяСостоянияЭтапа="Утвержден" Тогда
		Рисунок.ЦветФона = Новый Цвет(200, 240, 190);
	Иначе
		Рисунок.ЦветФона = Новый Цвет(190, 220, 245);
	КонецЕсли;	
	
	ЛевоРисунка = ЛевоРисунка + ШиринаРисунка;
	Рисунок.ГраницаСверху = Ложь;
	Рисунок.ГраницаСнизу  = Ложь;
	Рисунок.ГраницаСправа = Ложь;
	Рисунок.ГраницаСлева  = Ложь;

КонецПроцедуры

#КонецОбласти


#Область ПроцедурыУправленияХодомПроцесса
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ УПРАВЛЕНИЯ ХОДОМ ПРОЦЕССА.
//
// 
//

// Выполняет инициацию этапов для документа НовыйДокументВход.
Процедура ИнициироватьСогласованиеЭтапов(НовыйДокументВход, НужнаИнициализацияВход, Отказ = Ложь, ДополнительныеПараметры = Неопределено)
	Попытка 
		// Инициализация.
		КлючевойОбъектПроцесса = НовыйДокументВход.КлючевойОбъектПроцесса;
		АвтоДействиеОткрытие = Перечисления.АвтоматическиеДействияЭтапаПроцесса.ОткрыватьАвтоматически;
		АвтоДействиеЗакрытиеОткрытие = Перечисления.АвтоматическиеДействияЭтапаПроцесса.ЗакрыватьОткрыватьАвтоматически;
		ТипЭтапаПодготовкаОтчетности = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности;
		ДополнительныеПараметры = ИнициализироватьДополнительныеПараметрыСогласования(ДополнительныеПараметры);
		// Получим список этапов для инициализации.
		ТаблицаПараметров = НовыйДокументВход.ПараметрыПроцесса.Выгрузить();
		ДокументСсылка = НовыйДокументВход.Ссылка;
		ПостроитьМаршрутПроцесса(ДокументСсылка, КлючевойОбъектПроцесса, , НужнаИнициализацияВход, Истина, ТаблицаПараметров);
		Если ТипЗнч(КлючевойОбъектПроцесса) = Тип("ДокументСсылка.УправлениеПериодомСценария") Тогда
			// Считаем реквизиты документа Управление периодом сценария.
			ПериодДокумента		 = КлючевойОбъектПроцесса.ПериодСценария;
			СценарийДокумента	 = КлючевойОбъектПроцесса.Сценарий;
			РегламентДокумента	 = КлючевойОбъектПроцесса.ВерсияОрганизационнойСтруктуры;
			// Получим таблицу состояний, последователей и предшественников.
			СостоянияВыполненияПроцесса = Новый ТаблицаЗначений;
			мПоследователиСтрок = Неопределено;
			мПредшественникиСтрок = Неопределено;
			УправлениеПроцессамиСогласованияУХ.ИнициализироватьПроцесс(ПериодДокумента, СценарийДокумента, ТекущаяДатаСеанса(), СостоянияВыполненияПроцесса, мПоследователиСтрок, мПредшественникиСтрок);
			// Получим таблицу активации по этапам и организациям.
			ТаблицаОрганизацийЭтапа = ПолучитьТаблицуАктивацииПоОрганизациям(НовыйДокументВход.ШаблонПроцесса);
			МассивЭтапов = ТаблицаОрганизацийЭтапа.ВыгрузитьКолонку("ЭтапПроцесса");
			МассивЭтапов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивЭтапов);
			Для Каждого ТекМассивЭтапов Из МассивЭтапов Цикл
				Если ТекМассивЭтапов.ТипЭтапа = ТипЭтапаПодготовкаОтчетности Тогда
					// Отберём организации по данному этапу.
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("ЭтапПроцесса", ТекМассивЭтапов);
					НайденныеСтроки = ТаблицаОрганизацийЭтапа.НайтиСтроки(СтруктураПоиска);
					Если НайденныеСтроки <> Неопределено Тогда
						МассивОрганизаций = Новый Массив;
						Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
							МассивОрганизаций.Добавить(ТекНайденныеСтроки.ОрганизационнаяЕдиница);
						КонецЦикла;
						// Проверим автоматические действия для этапа.
						ТекАвтоДействия = ТекМассивЭтапов.АвтоматическиеДействия;
						НужноОткрыватьЭтап = (ТекАвтоДействия = АвтоДействиеОткрытие ИЛИ ТекАвтоДействия = АвтоДействиеЗакрытиеОткрытие);
						// Когда этап нужно открыть - переведём его в статус Выполняется; иначе - Запланирован.
						НовоеСостояние = "Запланирован";
						Если НужноОткрыватьЭтап Тогда
							НовоеСостояние = "Выполняется";
						Иначе
							НовоеСостояние = "Запланирован";
						КонецЕсли;
						УстановитьСостояниеЭтапаПроцессаОтчетности(
						СостоянияВыполненияПроцесса
						, мПредшественникиСтрок
						, мПоследователиСтрок
						, РегламентДокумента
						, ПериодДокумента
						, СценарийДокумента
						, ТекМассивЭтапов
						, МассивОрганизаций		
						, НовоеСостояние
						, Ложь						// Отладка
						, Истина					// Останавливаться при ошибке
						, НужноОткрыватьЭтап		// Обрабатывать документы
						, ДокументСсылка);
					Иначе	
						// Пропускаем этап.
					КонецЕсли;
				Иначе
					МассивОрганизаций = Новый Массив;
					МассивОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
					НовоеСостояние = ПолучитьСостояниеОткрытияНовогоЭтапа(ТекМассивЭтапов);
					УстановитьСостояниеЭтапаПроцессаОтчетности(
					СостоянияВыполненияПроцесса
					, мПредшественникиСтрок
					, мПоследователиСтрок
					, РегламентДокумента
					, ПериодДокумента
					, СценарийДокумента
					, ТекМассивЭтапов
					, МассивОрганизаций		
					, НовоеСостояние
					, Ложь					// Отладка
					, Истина				// Останавливаться при ошибке
					, Истина				// Обрабатывать документы
					, ДокументСсылка);
				КонецЕсли;
			КонецЦикла;
		Иначе
			// Инициализируем этап согласования.
			ЭтапыСогласования = ПолучитьПервыеЭтапыМаршрута(НовыйДокументВход.ШаблонПроцесса);
			Для Каждого Этап Из ЭтапыСогласования Цикл
				ИнициироватьСогласованиеЭтапа(НовыйДокументВход.Ссылка, НовыйДокументВход.Организация, Этап.Ссылка, , Отказ, ДополнительныеПараметры);
			КонецЦикла;	
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось запустить процесс по маршруту для объекта %ОбъектСогласования%: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбъектСогласования%", Строка(НовыйДокументВход.Ссылка));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, Отказ);
		Отказ = Истина;
	КонецПопытки;
КонецПроцедуры

// Определяет, есть ли ошибка в процессе ШаблонПроцессаВход с запуском регламентного
// задания ОбработкаЭтапа.
Функция ОпределитьОшибкуРегламентногоЗаданияОбработкаЭтапа(ШаблонПроцессаВход)
	РезультатФункции = Ложь;
	Если ТипЗнч(ШаблонПроцессаВход) = Тип("СправочникСсылка.ШаблоныУниверсальныхПроцессов") Тогда
		СтруктураРегламентногоЗадания = МодульРегламентныхЗаданийУХ.ПолучитьСтруктуруДанныхРегламентногоЗадания("ОбработкаЭтаповПроцессов");
		Если Не СтруктураРегламентногоЗадания.Использование Тогда
			МассивТиповЭтапа = Новый Массив;
			МассивТиповЭтапа.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования);
			МассивТиповЭтапа.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЦиклПока);
			МассивТиповЭтапа.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.Пауза);
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ЭтапыУниверсальныхПроцессов.Ссылка,
			|	ЭтапыУниверсальныхПроцессов.ТипЭтапа,
			|	ЭтапыУниверсальныхПроцессов.Владелец
			|ИЗ
			|	Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапыУниверсальныхПроцессов
			|ГДЕ
			|	ЭтапыУниверсальныхПроцессов.Владелец = &Владелец
			|	И ЭтапыУниверсальныхПроцессов.ТипЭтапа В(&ТипЭтапа)
			|	И ЭтапыУниверсальныхПроцессов.АвтоматическоеУтверждение
			|	И НЕ ЭтапыУниверсальныхПроцессов.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЭтапыУниверсальныхПроцессов.Ссылка,
			|	ЭтапыУниверсальныхПроцессов.ТипЭтапа,
			|	ЭтапыУниверсальныхПроцессов.Владелец
			|ИЗ
			|	Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапыУниверсальныхПроцессов
			|ГДЕ
			|	ЭтапыУниверсальныхПроцессов.Владелец = &Владелец
			|	И ЭтапыУниверсальныхПроцессов.ТипЭтапа = ЗНАЧЕНИЕ(Перечисление.ТипыЭтаповУниверсальныхПроцессов.Пауза)
			|	И ЭтапыУниверсальныхПроцессов.ДлительностьСогласования <> 0
			|	И НЕ ЭтапыУниверсальныхПроцессов.ПометкаУдаления";
			Запрос.УстановитьПараметр("Владелец", ШаблонПроцессаВход);
			Запрос.УстановитьПараметр("ТипЭтапа", МассивТиповЭтапа);
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				РезультатФункции = Истина;
				Прервать;
			КонецЦикла;
		Иначе
			РезультатФункции = Ложь;		// Регламентное задание включено.
		КонецЕсли;
	Иначе
		РезультатФункции = Ложь;			// Это не шаблон процесса. Не проверяем.
	КонецЕсли;
	Возврат РезультатФункции;	
КонецФункции

// При запуске процесса для объекта КлючевойОбъектВход проверяет наличие 
// в шаблоне ШаблонПроцессаВход этапов, требующих регламентное
// задание Отложенная обработка этапов процессов. В случае наличия 
// таких этапов и отключения регламентного задания - будет отправлено 
// оповещение об ошибке запуска универсального процесса.
Процедура ПроверитьЗапускРегламентногоЗаданияОбработкаЭтапа(ШаблонПроцессаВход, КлючевойОбъектВход)
	ЕстьОшибкаПриЗапускеПроцесса = ОпределитьОшибкуРегламентногоЗаданияОбработкаЭтапа(ШаблонПроцессаВход);
	Если ЕстьОшибкаПриЗапускеПроцесса Тогда
		АдминистраторПроцесса = ШаблонПроцессаВход.АдминистраторПроцесса;
		Если ЗначениеЗаполнено(АдминистраторПроцесса) Тогда
			ВидСобытияОшибкаПриЗапускеПроцесса = Справочники.ВидыСобытийОповещений.ОшибкаПриЗапускеПроцесса;
			МассивОповещаемыхОшибка = Новый Массив;
			МассивОповещаемыхОшибка.Добавить(АдминистраторПроцесса);
			СтруктураДопПараметры = Новый Структура;
			ТекстОшибки = НСтр("ru = 'Не запущено регламентное задание Обработка этапа'");
			СтруктураДопПараметры.Вставить("ОписаниеОшибки", ТекстОшибки);
			МодульУправленияОповещениямиУХ.ОповеститьПользователей(ВидСобытияОшибкаПриЗапускеПроцесса, , КлючевойОбъектВход, МассивОповещаемыхОшибка, СтруктураДопПараметры);
		Иначе
			ТекстСообщения = НСтр("ru = 'Не запущено регламентное задание Отложенная обработка этапов процессов. Работа маршрута согласования может быть некорректной. Обратитесь к администратору.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Ошибки нет, не отправляем уведомление.
	КонецЕсли;
КонецПроцедуры

// Проверяет наличие в шаблоне ШаблонВход этапов с типом автоутверждение и автоотклонение.
Функция ЕстьАвтоДействияВШаблонеПроцесса(ШаблонВход)
	РезультатФункции = Истина;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЭтапыУниверсальныхПроцессов.Ссылка,
	|	ЭтапыУниверсальныхПроцессов.Владелец,
	|	ЭтапыУниверсальныхПроцессов.ТипЭтапа
	|ИЗ
	|	Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапыУниверсальныхПроцессов
	|ГДЕ
	|	НЕ ЭтапыУниверсальныхПроцессов.ПометкаУдаления
	|	И ЭтапыУниверсальныхПроцессов.ТипЭтапа В(&ТипЭтапа)
	|	И ЭтапыУниверсальныхПроцессов.Владелец = &Владелец";
	МассивТиповЭтапа = Новый Массив;
	МассивТиповЭтапа.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.Автоотклонение);
	МассивТиповЭтапа.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.Автоутверждение);
	Запрос.УстановитьПараметр("Владелец", ШаблонВход);
	Запрос.УстановитьПараметр("ТипЭтапа", МассивТиповЭтапа);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = НЕ РезультатЗапроса.Пустой();
	Возврат РезультатФункции;
КонецФункции

// Проверяет этапы шаблон ШаблонВход универсального процесса на корректность
// ввода подчинённых этапов. Возвращает успешность проверки.
Функция ПроверитьШаблонПроцессаПередЗапуском(ШаблонВход, ТабИсполнителейВход = Неопределено) Экспорт
	РезультатФункции = Истина;
	ТабИсполнителейРабочая = ТабИсполнителейВход;
	Если ТабИсполнителейВход = Неопределено Тогда
		ТабИсполнителейРабочая = ПолучитьИсполнителейПоЭтапамМаршрута(ШаблонВход);
	Иначе
		ТабИсполнителейРабочая = ТабИсполнителейВход;
	КонецЕсли;
	ЕстьИсполнители = (ТабИсполнителейРабочая.Количество() <> 0);
	ЕстьАвтоДействия = ЕстьАвтоДействияВШаблонеПроцесса(ШаблонВход);
	РезультатФункции = (ЕстьИсполнители ИЛИ ЕстьАвтоДействия);
	Возврат РезультатФункции;
КонецФункции

Функция ИнициализироватьПроцесс(ПараметрыПроцесса, ШаблонПроцесса, Организация = Неопределено, КлючевойОбъект = Неопределено, 
	ДокументПроцессаРодитель = Неопределено, ЭтапРодитель = Неопределено, ТекущийДокументПроцесса = Неопределено, Отказ = Ложь) Экспорт
	// Ицициализация.
	НужнаИнициализация = Истина;
	ИдентификаторСообщения = Строка(Новый УникальныйИдентификатор);
	ДополнительныеПараметры = СформироватьДополнительныеПараметрыСогласования();
	ДополнительныеПараметры.Вставить("ИдентификаторСообщения", ИдентификаторСообщения);
	// Проверка экземпляра отчета.
	Если ТипЗнч(КлючевойОбъект) = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
		ДокументОбъект = КлючевойОбъект.ПолучитьОбъект();
		ПротоколируемыеСобытияУХ.Начать(ДокументОбъект);
		РезультатПроверки = ДокументОбъект.Проверить(Истина);
		СтатусПроверки = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатПроверки, "СтатусПроверки", Ложь);
		// Проверка заполнения обязательных аналитик.
		РезультатОбязательныеАналитики = ДокументОбъект.ПроверитьЗаполнениеОбязательныхАналитик();
		// Если проверка провалилась, сообщим пользователю и установим состояние Записан с ошибкой для экземпляра.
		Если (НЕ СтатусПроверки) ИЛИ (НЕ РезультатОбязательныеАналитики) Тогда
			ТекстСообщения = НСтр("ru = 'Не пройдена проверка отчета %КлючевойОбъект%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КлючевойОбъект%", Строка(КлючевойОбъект));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			СостояниеЗаписанСОшибкой = Перечисления.СостоянияОтчетов.ЗаписанСОшибкой;
			ДокументОбъект.ЗавершитьЗаписьПротокола(СостояниеЗаписанСОшибкой);
			Отказ = Истина;
			Возврат Ложь;				// Проверка не выполнена. Не инициализирум процесс.
		Иначе
			// Проверка отчета прошла успешно. Выполняем далее.
		КонецЕсли;
	Иначе
		// Выполняем далее.
	КонецЕсли;
	// Создание документа процесса.
	НовыйДокумент = Документы.ЭкземплярПроцесса.СоздатьДокумент();
	// Обработка случая согласования без маршрута.
	Если ТипЗнч(ШаблонПроцесса) <> Тип("СправочникСсылка.ШаблоныУниверсальныхПроцессов") Тогда
		
		НовыйДокумент.ШаблонПроцесса      = Справочники.ШаблоныУниверсальныхПроцессов.Автоутверждение;
					
		НовыйСогласующий = НовыйДокумент.ДополнительныеСогласующие.Добавить();	
		
		АвтоЭтап = СоздатьЭтапАвтоМаршрута();
			
		ТабИсполнителей = ПолучитьИсполнителейПоЭтапамМаршрута(НовыйДокумент.ШаблонПроцесса);
		
		Если ТипЗнч(ШаблонПроцесса) = Тип("СправочникСсылка.Пользователи") Тогда
			нСтрока = НовыйДокумент.ДополнительныеСогласующие.Добавить();
			нСтрока.Пользователь = ШаблонПроцесса;
			нСтрока.Этап = АвтоЭтап;
				
		Иначе	
			Если ТипЗнч(ШаблонПроцесса) = Тип("Массив") Тогда
				Для Каждого нПользователь Из ШаблонПроцесса Цикл
					нСтр = НовыйДокумент.ДополнительныеСогласующие.Добавить();
					нСтр.Пользователь = нПользователь.Ссылка;
					нСтр.Этап =  АвтоЭтап;	
				КонецЦикла;
			ИначеЕсли ТипЗнч(ШаблонПроцесса) = Тип("СправочникСсылка.РолиКонтактныхЛиц") Тогда				
				ПолучателиПоРоли = МодульУправленияПроцессамиУХ.ПолучитьПользователейПоРоли(ШаблонПроцесса,Организация);
				Для Каждого нПользователь Из ПолучателиПоРоли Цикл
					нСтр = НовыйДокумент.ДополнительныеСогласующие.Добавить();
					нСтр.Пользователь = нПользователь.Пользователь;
					нСтр.Этап =  АвтоЭтап;	
				КонецЦикла;
			ИначеЕсли ШаблонПроцесса = Неопределено Тогда	
				// Шаблон пустой. Ничего не делаем.
			Иначе
				ТекстСообщения = НСтр("ru = 'Неизвестный шаблон процесса %ШаблонПроцесса%. Операция отменена.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ШаблонПроцесса%", Строка(ШаблонПроцесса));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
		КонецЕсли;
			
		ШаблонПроцесса = НовыйДокумент.ШаблонПроцесса;
		УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВСостояниеНаУтверждении(КлючевойОбъект,НовыйДокумент.Ссылка);      // Для автосогласования принудительно выставим статус из соответствия.
	КонецЕсли;
	// Запись процесса.
	Если ШаблонПроцесса.НазначениеПроцесса = Перечисления.НазначенияУниверсальныхПроцессов.ПроцессПодготовкиОтчетности Тогда
		
		Если ПроверитьПроцессИнициализирован(КлючевойОбъект,,,ШаблонПроцесса) Тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Процесс уже запущен! Необходимо вначале остановить существующий процесс'"));
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли  ШаблонПроцесса.НазначениеПроцесса = Перечисления.НазначенияУниверсальныхПроцессов.МаршрутСогласования Тогда
		
		ТекущийЭкземплярПроцесса = Неопределено; 
		Если ПроверитьПроцессИнициализирован(КлючевойОбъект,ТекущийЭкземплярПроцесса,,ШаблонПроцесса) Тогда
			Если НЕ ТекущийЭкземплярПроцесса = Неопределено Тогда 
				
				Если ТекущийЭкземплярПроцесса.СостояниеВыполнения = Перечисления.СостоянияПроцесса.Вработе Тогда
					ТекущийЭкземплярПроцессаОбъект =  ТекущийЭкземплярПроцесса.ПолучитьОбъект();
					ТекущийЭкземплярПроцессаОбъект.ПометкаУдаления =Истина;
					ТекущийЭкземплярПроцессаОбъект.Записать();
				ИначеЕсли ТекущийЭкземплярПроцесса.СостояниеВыполнения = Перечисления.СостоянияПроцесса.Завершен Тогда
					ТекущийЭкземплярПроцессаОбъект = ТекущийЭкземплярПроцесса.ПолучитьОбъект();
					ТекущийЭкземплярПроцессаОбъект.УстановитьПометкуУдаления(Истина);	
					ТекущийЭкземплярПроцессаОбъект.Записать();
				КонецЕсли;
				
				ИнициироватьСогласованиеЭтапов(ТекущийЭкземплярПроцесса, НужнаИнициализация, Отказ, ДополнительныеПараметры);
			КонецЕсли;	
		КонецЕсли;
		
		Если ШаблонПроцесса = Справочники.ШаблоныУниверсальныхПроцессов.Автоутверждение Тогда
		Иначе
			ТабИсполнителей = ПолучитьИсполнителейПоЭтапамМаршрута(ШаблонПроцесса);
			Если НЕ ПроверитьШаблонПроцессаПередЗапуском(ШаблонПроцесса, ТабИсполнителей) Тогда
				ТекстСообщения = НСтр("ru = 'В шаблоне процесса %ШаблонПроцесса% не обнаружен минимальный набор этапов. Инициализация процесса отменена.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ШаблонПроцесса%", Строка(ШаблонПроцесса));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
			
			НовыйДокумент.ДополнительныеСогласующие.Очистить();
			Для Каждого Исп из ТабИсполнителей Цикл
				НовыйСогласующий = НовыйДокумент.ДополнительныеСогласующие.Добавить();
				НовыйСогласующий.Этап =  Исп.Этап;
				НовыйСогласующий.Организация = Исп.Организация;
				НовыйСогласующий.Пользователь = Исп.Пользователь;		
			КонецЦикла; 
		КонецЕсли;
		
	ИначеЕсли  ШаблонПроцесса.НазначениеПроцесса = Перечисления.НазначенияУниверсальныхПроцессов.ПроизвольныйПроцесс Тогда
		// Не требуется ициализация этапов.
	КонецЕсли;		
	// Заполнение дополнительных реквизитов процесса.		
	НовыйДокумент.Организация              = Организация;
	
	Если ТипЗнч(КлючевойОбъект) = Тип("ДокументСсылка.РакурсДанных") Тогда
		НовыйДокумент.Проект              	= КлючевойОбъект.Проект;
	КонецЕсли;
	
	НовыйДокумент.КлючевойОбъектПроцесса	 = КлючевойОбъект;
	НовыйДокумент.ПроцессРодитель			 = ДокументПроцессаРодитель;
	НовыйДокумент.ЭтапРодитель				 = ЭтапРодитель;
	НовыйДокумент.Дата						 = ТекущаяДатаСеанса();
	НовыйДокумент.НазначениеПроцесса		 = ШаблонПроцесса.НазначениеПроцесса;		
	НовыйДокумент.ШаблонПроцесса			 = ШаблонПроцесса;
    НовыйДокумент.СостояниеВыполнения		 = Перечисления.СостоянияПроцесса.Вработе;	
	НовыйДокумент.ТипКлючевогоОбъекта		 = ШаблонПроцесса.ТипОбъектаСогласования;
	Если ТипЗнч(КлючевойОбъект) = Тип("ДокументСсылка.РакурсДанных") Тогда
		  НовыйДокумент.Сценарий = КлючевойОбъект.Сценарий;	
		  НовыйДокумент.Период   = КлючевойОбъект.ПериодОтчета;
		  НовыйДокумент.Проект   = КлючевойОбъект.Проект;
	КонецЕсли;	
	// Добавление параметра СогласуемыйОбъект для процесса автоутверждения.
	Если ШаблонПроцесса = Справочники.ШаблоныУниверсальныхПроцессов.Автоутверждение Тогда
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(КлючевойОбъект)) Тогда
			НовыйДокумент.ТипКлючевогоОбъекта = Справочники.СправочникиБД.НайтиПоНаименованию(КлючевойОбъект.Метаданные().Имя,,,Справочники.ТипыБазДанных.ТекущаяИБ);
		Иначе
			НовыйДокумент.ТипКлючевогоОбъекта = Справочники.ДокументыБД.НайтиПоНаименованию(КлючевойОбъект.Метаданные().Имя,,,Справочники.ТипыБазДанных.ТекущаяИБ);
		КонецЕсли;	
		нПараметр = НовыйДокумент.ПараметрыПроцесса.Добавить();
		нПараметр.ИмяПараметра = "СогласуемыйОбъект";
		нПараметр.КодПараметра = "СогласуемыйОбъект";
		нПараметр.Ключевой = Истина;
		нПараметр.ТипЗначенияПараметраСсылка = НовыйДокумент.ТипКлючевогоОбъекта;
	КонецЕсли;	
	// Установка таблицы параметров процесса.
	Если ПараметрыПроцесса = Неопределено  Тогда
		
		Если НЕ ШаблонПроцесса = Справочники.ШаблоныУниверсальныхПроцессов.Автоутверждение Тогда
			НовыйДокумент.ПараметрыПроцесса.Загрузить(ШаблонПроцесса.ПараметрыПроцесса.Выгрузить());
		КонецЕсли;
		// Параметр СогласуемыйОбъект.
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ЭкземплярПроцесса",НовыйДокумент.Ссылка);
		СтруктураПараметров.Вставить("ЭкземплярПроцессаОбъект",НовыйДокумент);
		СтруктураПараметров.Вставить("КодПараметра","СогласуемыйОбъект");
		СтруктураПараметров.Вставить("ЗначениеПараметра",КлючевойОбъект);
		МодульОбработкиЭтаповПроцессовСерверУХ.УстановитьЗначениеПараметра(СтруктураПараметров);
		// Параметр ИнициаторПроцесса.
		СтруктураПараметров.Вставить("КодПараметра", "ИнициаторПроцесса");
		СтруктураПараметров.Вставить("ЗначениеПараметра", Пользователи.ТекущийПользователь());
		
		МодульОбработкиЭтаповПроцессовСерверУХ.УстановитьЗначениеПараметра(СтруктураПараметров);
		
		ИнициироватьСогласованиеЭтапов(НовыйДокумент.Ссылка, НужнаИнициализация, Отказ, ДополнительныеПараметры);
		
	Иначе	
		НовыйДокумент.ПараметрыПроцесса.Загрузить(ПараметрыПроцесса.Выгрузить());
	КонецЕсли;
	// Окончательная запись документа и возврат результата функции.
	Попытка
		Если НЕ ЗначениеЗаполнено(НовыйДокумент.Ссылка) Тогда
			НовыйДокумент.Записать();
		Иначе
			// Документ записан ранее.
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НовыйДокумент.Ссылка) Тогда
			ТекущийЭкземплярПроцесса = НовыйДокумент.Ссылка;
			ИнициироватьСогласованиеЭтапов(ТекущийЭкземплярПроцесса, НужнаИнициализация, Отказ, ДополнительныеПараметры);
		КонецЕсли;

		// Логгирование.
		ТекущийДокументПроцесса = НовыйДокумент.Ссылка;
		ЭтоМаршрутСогласования = (ШаблонПроцесса.НазначениеПроцесса = Перечисления.НазначенияУниверсальныхПроцессов.МаршрутСогласования);
		ЭтоАвтоутверждение = (ШаблонПроцесса = Справочники.ШаблоныУниверсальныхПроцессов.Автоутверждение);
		Если (ЭтоМаршрутСогласования) ИЛИ (ЭтоАвтоутверждение) Тогда
			ТекстЛог = НСтр("ru = 'Запущен процесс согласования'");
			ВидОповещенияПроцессЗапущен = Перечисления.ВидыОповещенийПользователейУХ.ПроцессЗапущен;
			ДобавитьЗаписьВлогПроцесса(НовыйДокумент.Ссылка, , , ТекстЛог, ВидОповещенияПроцессЗапущен, , ИдентификаторСообщения);
		КонецЕсли;
		// Зададим получателя как администратора шаблона.
		МассивРассылки = Новый Массив;
		Если ЗначениеЗаполнено(ШаблонПроцесса) Тогда
			Если ЗначениеЗаполнено(ШаблонПроцесса.АдминистраторПроцесса) Тогда
				МассивРассылки.Добавить(ШаблонПроцесса.АдминистраторПроцесса);
			Иначе
				// Администратор не задан. Не добавляем.
			КонецЕсли;
		Иначе
			// Нет шаблона.
		КонецЕсли;
		МодульУправленияОповещениямиУх.ОповеститьПользователей(Справочники.ВидыСобытийОповещений.ПроцессЗапущен, , НовыйДокумент.Ссылка, МассивРассылки);
		МодульУправленияОповещениямиУХ.СоздатьНапоминание(Справочники.ВидыСобытийОповещений.ПроцессЗапущен, КлючевойОбъект, МассивРассылки);
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
	КонецПопытки;
	ПроверитьЗапускРегламентногоЗаданияОбработкаЭтапа(ШаблонПроцесса, КлючевойОбъект);
	Возврат Не Отказ;
КонецФункции

Функция ПроверитьПроцессИнициализирован(КлючевойОбъект, ЭкземплярПроцесса = Неопределено, ЭтоПроизвольныйПроцесс = Ложь, ШаблонПроцесса = Неопределено) Экспорт;
	
	Если ЭтоПроизвольныйПроцесс Тогда
		
		Запрос = Новый Запрос;
		СписокПараметров = Новый СписокЗначений;
		КоличествоПараметров = КлючевойОбъект.Количество();
		Для Каждого Параметр ИЗ КлючевойОбъект Цикл
			СписокПараметров.Добавить(Параметр.ЗначениеПараметра);
		КонецЦикла;
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭкземплярПроцессаПараметрыПроцесса.Ссылка КАК Ссылка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭкземплярПроцессаПараметрыПроцесса.КодПараметра) КАК Параметры
		|ПОМЕСТИТЬ ТабПроцессы
		|ИЗ
		|	Документ.ЭкземплярПроцесса.ПараметрыПроцесса КАК ЭкземплярПроцессаПараметрыПроцесса
		|ГДЕ
		|	ЭкземплярПроцессаПараметрыПроцесса.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ЭкземплярПроцессаПараметрыПроцесса.Ссылка.ШаблонПроцесса В(&ШаблонПроцесса)
		|	И ЭкземплярПроцессаПараметрыПроцесса.ЭтоПростойТип = ЛОЖЬ
		|	И ЭкземплярПроцессаПараметрыПроцесса.ЗначениеПоУмолчанию В(&СписокПараметров)
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭкземплярПроцессаПараметрыПроцесса.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабПроцессы.Ссылка
		|ИЗ
		|	ТабПроцессы КАК ТабПроцессы
		|ГДЕ
		|	ТабПроцессы.Параметры = &КоличествоПараметров";
		Запрос.УстановитьПараметр("ШаблонПроцесса", ШаблонПроцесса);
		Запрос.УстановитьПараметр("СписокПараметров", СписокПараметров);
		Запрос.УстановитьПараметр("КоличествоПараметров", КоличествоПараметров);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			ЭкземплярПроцесса = Выборка.Ссылка;
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
		
	Иначе	 
		Запрос = Новый Запрос;
		Если ТипЗнч(ШаблонПроцесса) = Тип("СправочникСсылка.ШаблоныУниверсальныхПроцессов") Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ЭкземплярПроцесса.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ЭкземплярПроцесса КАК ЭкземплярПроцесса
			|ГДЕ
			|	ЭкземплярПроцесса.ПометкаУдаления = ЛОЖЬ
			|	И ЭкземплярПроцесса.КлючевойОбъектПроцесса = &КлючевойОбъектПроцесса
			|	И ЭкземплярПроцесса.ШаблонПроцесса В(&ШаблонПроцесса)";
		ИначеЕсли ТипЗнч(ШаблонПроцесса) = Тип("СправочникСсылка.Пользователи") ИЛИ ТипЗнч(ШаблонПроцесса) = Тип("Массив") Тогда
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ЭкземплярПроцессаДополнительныеСогласующие.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ЭкземплярПроцесса.ДополнительныеСогласующие КАК ЭкземплярПроцессаДополнительныеСогласующие
			|ГДЕ
			|	НЕ ЭкземплярПроцессаДополнительныеСогласующие.Ссылка.ПометкаУдаления
			|	И ЭкземплярПроцессаДополнительныеСогласующие.Ссылка.КлючевойОбъектПроцесса = &КлючевойОбъектПроцесса
			|	И ЭкземплярПроцессаДополнительныеСогласующие.Пользователь В(&ШаблонПроцесса)
			|	И ЭкземплярПроцессаДополнительныеСогласующие.Ссылка.ШаблонПроцесса = ЗНАЧЕНИЕ(Справочник.ШаблоныУниверсальныхПроцессов.Автоутверждение)";
		Иначе
			ТекстСообщения = НСтр("ru = 'Неизвестный вариант шаблона процесса: %Шаблон%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Шаблон%", Строка(ШаблонПроцесса));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		Запрос.УстановитьПараметр("КлючевойОбъектПроцесса", КлючевойОбъект);
		Запрос.УстановитьПараметр("ШаблонПроцесса", ШаблонПроцесса);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			ЭкземплярПроцесса = Выборка.Ссылка;
			Возврат Истина;
		КонецЕсли;
		
		Возврат Ложь;
	КонецЕсли;

КонецФункции	

Процедура ПостроитьМаршрутПроцесса(ДокументПроцесса, ЭкземплярОтчета, ТекущийЭтап = Неопределено,Инициализация=Неопределено,ИнициализироватьСледующий,
	ТаблицаЗначенийТекущихПараметров=Неопределено,ТаблицаЗначенийПараметровЭтапа=Неопределено, РазворачиватьУсловия = Ложь, Отказ = Ложь) Экспорт
	
	ОбработкаОдногоЭтапа = ЗначениеЗаполнено(ТекущийЭтап);
	Если НЕ ОбработкаОдногоЭтапа Тогда
		ТаблицаПервыхЭтапов = ПолучитьПервыеЭтапыМаршрута(ДокументПроцесса.ШаблонПроцесса);
		НаборЭтапов = ТаблицаПервыхЭтапов.ВЫгрузитьКолонку("Ссылка");
	Иначе
		НаборЭтапов = Новый Массив;
		НаборЭтапов.Добавить(ТекущийЭтап);
	КонецЕсли;
	
	ТаблицаЭтапов = Новый ТаблицаЗначений;
	ТаблицаЭтапов.Колонки.Добавить("Этап");
	ТаблицаЭтапов.Колонки.Добавить("ПорядокВыполнения");
		
	НаборЗаписей = РегистрыСведений.ТекущийМаршрутПроцесса.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументПроцесса.Значение = ДокументПроцесса;
	НаборЗаписей.Отбор.ДокументПроцесса.Использование = Истина;
	
	Если ОбработкаОдногоЭтапа Тогда
		НаборЗаписей.Прочитать();
		ТаблицаПереходов = НаборЗаписей.Выгрузить();
		ЭтапыМаршрута    = Новый Массив;
		ЭтапыМаршрута.Добавить(ТекущийЭтап);
		ПровестиАнализПереходов(ТаблицаПереходов, ЭтапыМаршрута, ТекущийЭтап);
		МассивУдаляемыхЭтапов = Новый Массив;
		МассивУдаляемыхЭтапов.Добавить(ТекущийЭтап);
		
		Для Каждого Этап Из ЭтапыМаршрута Цикл
			УдалятьЭтап = Истина;
			НайденныеСтроки = ТаблицаПереходов.НайтиСтроки(Новый Структура("ЭтапПриемник", Этап));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Если ЭтапыМаршрута.Найти(НайденнаяСтрока.ЭтапИсточник) = Неопределено Тогда
					УдалятьЭтап = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если УдалятьЭтап Тогда
				МассивУдаляемыхЭтапов.Добавить(Этап);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Этап Из МассивУдаляемыхЭтапов Цикл	
			Если Этап <> ТекущийЭтап Тогда
				НайденныеСтроки = ТаблицаПереходов.НайтиСтроки(Новый Структура("ЭтапПриемник", Этап));
				Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
					ТаблицаПереходов.Удалить(НайденнаяСтрока);
				КонецЦикла;
			КонецЕсли;		
			НайденныеСтроки = ТаблицаПереходов.НайтиСтроки(Новый Структура("ЭтапИсточник", Этап));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ТаблицаПереходов.Удалить(НайденнаяСтрока);
			КонецЦикла;		
		КонецЦикла;
		
		ПровестиПереходыПоЭтапам(ДокументПроцесса, ТаблицаПереходов, НаборЭтапов, ТаблицаЭтапов, ЭкземплярОтчета, -1,
			Инициализация, ИнициализироватьСледующий, ТаблицаЗначенийТекущихПараметров, ТаблицаЗначенийПараметровЭтапа, , Отказ);
		ТаблицаПереходов.Свернуть("ДокументПроцесса, ЭтапИсточник, ЭтапПриемник");	
		НаборЗаписей.Загрузить(ТаблицаПереходов);	
	Иначе
		ПровестиПереходыПоЭтапам(ДокументПроцесса, НаборЗаписей, НаборЭтапов, ТаблицаЭтапов, ЭкземплярОтчета, -1,
			Инициализация,ИнициализироватьСледующий,ТаблицаЗначенийТекущихПараметров,ТаблицаЗначенийПараметровЭтапа, 
			РазворачиватьУсловия, Отказ);
	КонецЕсли;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Функция ПолучитьПервыеЭтапыМаршрута(ШаблонПроцесса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыУниверсальныхПроцессов.Ссылка КАК Ссылка,
	|	ЭтапыУниверсальныхПроцессов.АвтоматическиеДействия КАК АвтоматическиеДействия
	|ИЗ
	|	Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапыУниверсальныхПроцессов
	|ГДЕ
	|	ЭтапыУниверсальныхПроцессов.Владелец = &ШаблонПроцесса
	|	И 0 В
	|			(ВЫБРАТЬ
	|				КОЛИЧЕСТВО(*)
	|			ИЗ
	|				Справочник.ЭтапыУниверсальныхПроцессов.ЭтапыПредшественники КАК ЭтапыПредшественники
	|			ГДЕ
	|				ЭтапыПредшественники.Ссылка = ЭтапыУниверсальныхПроцессов.Ссылка)
	|	И ЭтапыУниверсальныхПроцессов.ПометкаУдаления = ЛОЖЬ
	|	И ЭтапыУниверсальныхПроцессов.ЭтоГруппа = ЛОЖЬ
	|	И ЭтапыУниверсальныхПроцессов.ДинамическийЭтап = ЛОЖЬ
	|	И НЕ ЭтапыУниверсальныхПроцессов.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ШаблонПроцесса", ШаблонПроцесса);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// По соответствию ТаблицаОрганизацийЭтапаВход проверяет наличие организации ИскомаяОрганизацияВход
// среди организаций этапов из МассивПредшественниковВход.
Функция НайтиОрганизациюСредиПредшественников(МассивПредшественниковВход, ИскомаяОрганизацияВход, СоответствиеОрганизацийЭтаповВход)
	РезультатФункции = Ложь;
	Для Каждого ТекМассивПредшественников Из МассивПредшественниковВход Цикл
		МассивОрганизацийПредшественников = СоответствиеОрганизацийЭтаповВход[ТекМассивПредшественников];
		Если МассивОрганизацийПредшественников <> Неопределено Тогда
			НайденныеОрганизации = МассивОрганизацийПредшественников.Найти(ИскомаяОрганизацияВход);
			Если НайденныеОрганизации <> Неопределено Тогда
				РезультатФункции = Истина;
				Прервать;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли;
		Иначе
			// Пустой этап. Пропускаем.
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		// НайтиОрганизациюСредиПредшественников()

// Возвращает соответствие организаций этапам подготовки отчетности из массива
// МассивЭтаповВход по исходной таблице ТаблицаОрганизацийЭтапаВход.
Функция СформироватьСоответствиеОрганизацийЭтапов(МассивЭтаповВход, ТаблицаОрганизацийЭтапаВход)
	РезультатФункции = Новый Соответствие;
	Для Каждого ТекМассивЭтапов Из МассивЭтаповВход Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ЭтапПроцесса", ТекМассивЭтапов);
		НайденныеСтроки = ТаблицаОрганизацийЭтапаВход.НайтиСтроки(СтруктураПоиска);
		МассивВставки = Новый Массив;
		Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
			МассивВставки.Добавить(ТекНайденныеСтроки.ОрганизационнаяЕдиница);
		КонецЦикла;
		МассивВставки = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивВставки);
		МассивВставки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивВставки);
		РезультатФункции.Вставить(ТекМассивЭтапов, МассивВставки);
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		// СформироватьСоответствиеорганизацийЭтапов()

// Выделяет из массива этапов МассивЭтаповВход массив
// этапов для конослидирующих элиминирующих организаций.
Функция СформироватьМассивЭлиминирующихКонсолидирующихЭтапов(МассивЭтаповВход)
	РезультатФункции = Новый Массив;
	МассивЭлиминимирующихКонсолидирующихЭтапов = Новый Массив;
	Для Каждого ТекМассивЭтаповВход Из МассивЭтаповВход Цикл
		ТекТипОрганизаций = ТекМассивЭтаповВход.ТипОрганизацийЭтапа;
		ЭтоЭтапЭлиминирующих = (ТекТипОрганизаций = Перечисления.ТипыОрганизационныхЕдиниц.Элиминирующая);
		ЭтоЭтапКонсолидирующих = (ТекТипОрганизаций = Перечисления.ТипыОрганизационныхЕдиниц.Консолидирующая);
		Если ЭтоЭтапЭлиминирующих ИЛИ ЭтоЭтапКонсолидирующих Тогда
			РезультатФункции.Добавить(ТекМассивЭтаповВход);
		Иначе
			// Обычные организации. Продолжаем поиск.
		КонецЕсли;
	КонецЦикла;
	РезультатФункции = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(РезультатФункции);
	РезультатФункции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатФункции);
	Возврат РезультатФункции;
КонецФункции		// СформироватьМассивЭлиминирующихКонсолидирующихОрганизаций()

// Возвращает массив ссылок на все первые этапы шаблона процесса ШаблонПроцессаВход,
// которые не являются этапами подготовки отчетности.
Функция ПолучитьМассивПервыхЭтаповНеПодготовкиОтчетности(ШаблонПроцессаВход)
	РезультатФункции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭтапыУниверсальныхПроцессов.Ссылка КАК Ссылка,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЭтапыУниверсальныхПроцессовЭтапыПредшественники.Этап) КАК Этап
		|ПОМЕСТИТЬ ВТ_ВсеЭтапы
		|ИЗ
		|	Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапыУниверсальныхПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭтапыУниверсальныхПроцессов.ЭтапыПредшественники КАК ЭтапыУниверсальныхПроцессовЭтапыПредшественники
		|		ПО (ЭтапыУниверсальныхПроцессовЭтапыПредшественники.Ссылка = ЭтапыУниверсальныхПроцессов.Ссылка)
		|ГДЕ
		|	НЕ ЭтапыУниверсальныхПроцессов.ПометкаУдаления
		|	И ЭтапыУниверсальныхПроцессов.Владелец = &ШаблонПроцесса
		|	И ЭтапыУниверсальныхПроцессов.ТипЭтапа <> &ТипЭтапаПодготовкаОтчетности
		|
		|СГРУППИРОВАТЬ ПО
		|	ЭтапыУниверсальныхПроцессов.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВТ_ВсеЭтапы.Ссылка КАК Ссылка
		|ИЗ
		|	ВТ_ВсеЭтапы КАК ВТ_ВсеЭтапы
		|ГДЕ
		|	ЕСТЬNULL(ВТ_ВсеЭтапы.Этап, 0) = 0";
	Запрос.УстановитьПараметр("ТипЭтапаПодготовкаОтчетности", Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности);
	Запрос.УстановитьПараметр("ШаблонПроцесса", ШаблонПроцессаВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатФункции.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьМассивПервыхЭтаповНеПодготовкиОтчетности()

// Определяет, есть ли в этапах из массива МассивЭтаповПредшественниковВход организации,
// консолидируемые организацией КонсолидирующаяОрганизацияВход в рамках регламента
// ВерсияРегламентаВход, используя данные из СоответствиеОрганизацийЭтапамВход.
Функция ЕстьКонсолидируемыеОрганизацииВЭтапахПредшественниках(ВерсияРегламентаВход, КонсолидирующаяОрганизацияВход, СоответствиеОрганизацийЭтапамВход, МассивЭтаповПредшественниковВход)
	// Инициализация.
	РезультатФункции = Ложь;
	ПустойСценарий = Справочники.Сценарии.ПустаяСсылка();
	// Получение консолидиремых организаций.
	МассивОрганизацийКонсолидации = МассивОрганизацийКонсолидации(ВерсияРегламентаВход, ПустойСценарий, КонсолидирующаяОрганизацияВход);
	// Получение организаций для всех этапов, указанных в массиве предшественников.
	Для Каждого ТекМассивЭтаповПредшественниковВход Из МассивЭтаповПредшественниковВход Цикл
		МассивОрганизацийТекущегоЭтапа = СоответствиеОрганизацийЭтапамВход.Получить(ТекМассивЭтаповПредшественниковВход);
		Если МассивОрганизацийТекущегоЭтапа <> Неопределено Тогда
			// Поиск среди организаций текущего этапа консолидируемых организации.
			Для Каждого ТекМассивОрганизацийТекущегоЭтапа Из МассивОрганизацийТекущегоЭтапа Цикл
				ОрганизацияНайдена = (МассивОрганизацийКонсолидации.Найти(ТекМассивОрганизацийТекущегоЭтапа) <> Неопределено);
				Если ОрганизацияНайдена Тогда
					РезультатФункции = Истина;
				Иначе
					// В текущем этапе не найдены консолидируемые организации. Выполняем поиск далее.
				КонецЕсли;
			КонецЦикла;	
		Иначе
			// В текущем этапе нет организаций. Выполняем поиск в других этапах.
		КонецЕсли;
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		// ЕстьКонсолидируемыеОрганизацииВЭтапахПредшественниках()

// Возвращает таблицу первых появлений организаций в этапах шаблона процесса
// ШаблонПроцессаВход.
Функция ПолучитьТаблицуАктивацииПоОрганизациям(ШаблонПроцессаВход, ЭтапыПроцессаВход = Неопределено) Экспорт
	// Инициализация.
	РезультатФункции = Новый ТаблицаЗначений;
	РезультатФункции.Колонки.Добавить("ЭтапПроцесса");
	РезультатФункции.Колонки.Добавить("ОрганизационнаяЕдиница");
	ВерсияРегламента = ШаблонПроцессаВход.СвязанныйРегламент;
	ТипЭтапаПодготовкаОтчетности = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности;
	// Получениме данных по организациям этапов.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОрганизационныеЕдиницыЭтаповПроцессов.ВерсияРегламентаПодготовкиОтчетности КАК ВерсияРегламентаПодготовкиОтчетности,
		|	ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница,
		|	ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса КАК ЭтапПроцесса
		|ИЗ
		|	РегистрСведений.ОрганизационныеЕдиницыЭтаповПроцессов КАК ОрганизационныеЕдиницыЭтаповПроцессов
		|ГДЕ
		|	ОрганизационныеЕдиницыЭтаповПроцессов.ВерсияРегламентаПодготовкиОтчетности = &ВерсияРегламентаПодготовкиОтчетности
		|	И НЕ ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса.ПометкаУдаления
		|	И НЕ ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница.ПометкаУдаления
		|	И ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса.Владелец = &ШаблонПроцесса
		|	И ВЫБОР
		|			КОГДА НЕ &ЕстьОборПоЭтапу
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса В (&ЭтапПроцесса)
		|		КОНЕЦ";
	ТребуетсяОтборПоЭтапам = (ЭтапыПроцессаВход <> Неопределено);	
	Запрос.УстановитьПараметр("ВерсияРегламентаПодготовкиОтчетности", ВерсияРегламента);
	Запрос.УстановитьПараметр("ЕстьОборПоЭтапу", ТребуетсяОтборПоЭтапам);
	Запрос.УстановитьПараметр("ШаблонПроцесса", ШаблонПроцессаВход);
	Запрос.УстановитьПараметр("ЭтапПроцесса", ЭтапыПроцессаВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыгрузкаОрганизацииЭтапа = РезультатЗапроса.Выгрузить();
	// Сформируем массив всех этапов.
	МассивЭтапов = ВыгрузкаОрганизацииЭтапа.ВыгрузитьКолонку("ЭтапПроцесса");
	МассивЭтапов = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивЭтапов);
	МассивЭтапов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивЭтапов);
	// Выделим массив консолидирующих элиминирующих этапов.
	МассивЭлиминимирующихКонсолидирующихЭтапов = СформироватьМассивЭлиминирующихКонсолидирующихЭтапов(МассивЭтапов);
	// Сформируем соответсвие организаций этапов.
	СоответствиеОрганизацийЭтапов = СформироватьСоответствиеОрганизацийЭтапов(МассивЭтапов, ВыгрузкаОрганизацииЭтапа);
	Для Каждого ТекМассивЭтапов Из МассивЭтапов Цикл
		МожноДобавлять = Истина;
		МассивПредшественников = УправлениеПроцессамиСогласованияУХПовтИсп.ПолучитьЭтапыПредшественники(ТекМассивЭтапов);
		// Проверим текущий этап на консолидирующие элиминирующие организации.
		ТекТипОрганизаций = ТекМассивЭтапов.ТипОрганизацийЭтапа;
		ЭтоЭтапЭлиминирующих = (ТекТипОрганизаций = Перечисления.ТипыОрганизационныхЕдиниц.Элиминирующая);
		ЭтоЭтапКонсолидирующих = (ТекТипОрганизаций = Перечисления.ТипыОрганизационныхЕдиниц.Консолидирующая);
		ЕстьКонсолидируемыеОрганизации = Ложь;
		Если ЭтоЭтапКонсолидирующих Тогда
			ОрганизацииЭтапа = СоответствиеОрганизацийЭтапов.Получить(ТекМассивЭтапов);
			Для Каждого ТекОрганизацииЭтапа Из ОрганизацииЭтапа Цикл
				ЕстьКонсолидируемыеОрганизации = ЕстьКонсолидируемыеОрганизацииВЭтапахПредшественниках(ВерсияРегламента, ТекОрганизацииЭтапа, СоответствиеОрганизацийЭтапов, МассивПредшественников);
			КонецЦикла;	
		Иначе
			ЕстьКонсолидируемыеОрганизации = Ложь;
		КонецЕсли;
		Если (ЭтоЭтапЭлиминирующих) ИЛИ (ЭтоЭтапКонсолидирующих И ЕстьКонсолидируемыеОрганизации) Тогда
			МожноДобавлять = Ложь;
			Продолжить;
		Иначе
			// Продолжаем поиск.
		КонецЕсли;
		// Проверим консолидирующие этапы и этапы не подготовки отчетности. Если таковые есть сред предшественников - не открываем текущий этап.
		Для Каждого ТекМассивПредшественников Из МассивПредшественников Цикл
			НайденныеСтрокиКонсолидирующихПредшественников = МассивЭлиминимирующихКонсолидирующихЭтапов.Найти(ТекМассивПредшественников);
			Если НайденныеСтрокиКонсолидирующихПредшественников <> Неопределено Тогда
				МожноДобавлять = Ложь;
				Прервать;
			Иначе
				Если ТекМассивПредшественников.ТипЭтапа <> ТипЭтапаПодготовкаОтчетности Тогда
					МожноДобавлять = Ложь;
					Прервать;
				Иначе
					// Выполняем поиск далее.
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		// Добавляем организации текущего этапа, которые не встречаются в предшественниках.
		Если МожноДобавлять Тогда
			МассивОрганизацийТекущегоЭтапа = СоответствиеОрганизацийЭтапов[ТекМассивЭтапов];
			Если МассивОрганизацийТекущегоЭтапа <> Неопределено Тогда
				Для Каждого ТекМассивОрганизацийТекущегоЭтапа Из МассивОрганизацийТекущегоЭтапа Цикл
					МожноДобавлять = Истина;
					ОрганизацииНайдены = НайтиОрганизациюСредиПредшественников(МассивПредшественников, ТекМассивОрганизацийТекущегоЭтапа, СоответствиеОрганизацийЭтапов);
					Если ОрганизацииНайдены Тогда
						МожноДобавлять = Ложь;
					Иначе
						// Проверка пройдена.
					КонецЕсли;
					Если МожноДобавлять Тогда
						НоваяСтрока = РезультатФункции.Добавить();
						НоваяСтрока.ОрганизационнаяЕдиница	 = ТекМассивОрганизацийТекущегоЭтапа;
						НоваяСтрока.ЭтапПроцесса			 = ТекМассивЭтапов;
					Иначе
						// Текущую организацию на текущем этапе добавлять нельзя.
					КонецЕсли;
				КонецЦикла;
			Иначе
				МожноДобавлять = Ложь;		// Текущий этап пустой.
			КонецЕсли;
		Иначе
			Продолжить;		// Пропускаем текущий этап.
		КонецЕсли;
	КонецЦикла;
	// Добавим этапы не подготовки отчетности.
	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	МассивЭтаповНеПодготовкиОтчетов = ПолучитьМассивПервыхЭтаповНеПодготовкиОтчетности(ШаблонПроцессаВход);
	Для Каждого ТекМассивЭтаповНеПодготовкиОтчетов Из МассивЭтаповНеПодготовкиОтчетов Цикл
		НоваяСтрока = РезультатФункции.Добавить();
		НоваяСтрока.ОрганизационнаяЕдиница	 = ПустаяОрганизация;
		НоваяСтрока.ЭтапПроцесса			 = ТекМассивЭтаповНеПодготовкиОтчетов;
	КонецЦикла;
	// Вывод результата.
	РезультатФункции.Свернуть("ОрганизационнаяЕдиница,ЭтапПроцесса");
	Возврат РезультатФункции;
КонецФункции		// ПолучитьТаблицуАктивацииПоОрганизациям()

Функция ПолучитьИсполнителейПоЭтапамМаршрута(МаршрутСогласования)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыУниверсальныхПроцессовУтверждающие.Пользователь,
	|	ЭтапыУниверсальныхПроцессовУтверждающие.Организация,
	|	ЭтапыУниверсальныхПроцессовУтверждающие.Ссылка КАК Этап
	|ИЗ
	|	Справочник.ЭтапыУниверсальныхПроцессов.Утверждающие КАК ЭтапыУниверсальныхПроцессовУтверждающие
	|ГДЕ
	|	ЭтапыУниверсальныхПроцессовУтверждающие.Ссылка.Владелец = &МаршрутСогласования
	|	И ЭтапыУниверсальныхПроцессовУтверждающие.Ссылка.ДинамическийЭтап = Ложь";
	Запрос.УстановитьПараметр("МаршрутСогласования", МаршрутСогласования);
	
	Возврат Запрос.Выполнить().Выгрузить();
			
КонецФункции

// Помечает на удаление все задачи, связанные с объектом ОбъектСсылка.
Процедура ПометитьНаУдалениеЗадачиПоОбъекту(ОбъектСсылка) Экспорт
	// Инициализация.
	ЕстьОшибки = Ложь;
	ОткрытаТранзация = Ложь;
	Если НЕ ТранзакцияАктивна() Тогда
		НачатьТранзакцию();
		ОткрытаТранзация = Истина;
	Иначе
		ОткрытаТранзация = Ложь;
	КонецЕсли;
	// Получение и обход задач.
	Попытка
		МассивЗадач = Справочники.Задачи.ПолучитьВсеЗадачиПоОбъекту(ОбъектСсылка);
		Для Каждого ТекМассивЗадач Из МассивЗадач Цикл
			ЗадачаОбъект = ТекМассивЗадач.ПолучитьОбъект();
			ЗадачаОбъект.ПометкаУдаления = Истина;
			ЗадачаОбъект.Записать();
		КонецЦикла;
	Исключение
		ТекстСообщения = НСтр("ru = 'При пометке на удалении задач по объекту %Объект% возникли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Строка(ОбъектСсылка));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		ЕстьОшибки = Истина;
	КонецПопытки;
	// Фиксирование транзакции.
	Если ОткрытаТранзация Тогда
		Если ЕстьОшибки Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	Иначе
		// Не требуется фиксировать транзакцию.
	КонецЕсли;
КонецПроцедуры

// Добавляет записи в регистр СостоянияВыполненияПроцессов об отмене
// процесса ДокументПроцессаВход. Возвращает успешность выполнения операции.
Функция СброситьСостоянияВыполненияПроцессов(ДокументПроцессаВход)
	РезультатФункции = Истина;
	КлючевойОбъект = ДокументПроцессаВход.КлючевойОбъектПроцесса;
	Если ТипЗнч(КлючевойОбъект) = Тип("ДокументСсылка.УправлениеПериодомСценария") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭкземплярПроцесса.Ссылка КАК Ссылка,
		|	ЭкземплярПроцесса.КлючевойОбъектПроцесса КАК КлючевойОбъектПроцесса,
		|	ЭкземплярПроцесса.ШаблонПроцесса КАК ШаблонПроцесса
		|ПОМЕСТИТЬ ВТ_УправлениеПериодом
		|ИЗ
		|	Документ.ЭкземплярПроцесса КАК ЭкземплярПроцесса
		|ГДЕ
		|	ЭкземплярПроцесса.Ссылка = &ЭкземплярПроцесса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Периоды.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_Периоды
		|ИЗ
		|	ВТ_УправлениеПериодом КАК ВТ_УправлениеПериодом
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Периоды КАК Периоды
		|		ПО ВТ_УправлениеПериодом.КлючевойОбъектПроцесса.ПериодСценария.ДатаНачала <= Периоды.ДатаНачала
		|			И ВТ_УправлениеПериодом.КлючевойОбъектПроцесса.ПериодСценарияОкончание.ДатаОкончания >= Периоды.ДатаОкончания
		|			И ВТ_УправлениеПериодом.КлючевойОбъектПроцесса.ПериодСценария.Периодичность = Периоды.Периодичность
		|ГДЕ
		|	НЕ Периоды.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СостоянияВыполненияПроцессовСрезПоследних.Период КАК Период,
		|	СостоянияВыполненияПроцессовСрезПоследних.Сценарий КАК Сценарий,
		|	СостоянияВыполненияПроцессовСрезПоследних.ПериодСценария КАК ПериодСценария,
		|	СостоянияВыполненияПроцессовСрезПоследних.Организация КАК Организация,
		|	СостоянияВыполненияПроцессовСрезПоследних.ЭтапПроцесса КАК ЭтапПроцесса,
		|	СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа КАК СостояниеЭтапа,
		|	СостоянияВыполненияПроцессовСрезПоследних.ДатаНачала КАК ДатаНачала,
		|	СостоянияВыполненияПроцессовСрезПоследних.ДатаОкончания КАК ДатаОкончания,
		|	СостоянияВыполненияПроцессовСрезПоследних.ОтветственныйЗаЭтап КАК ОтветственныйЗаЭтап,
		|	СостоянияВыполненияПроцессовСрезПоследних.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.СостоянияВыполненияПроцессов.СрезПоследних(, НЕ ЭтапПроцесса.ПометкаУдаления) КАК СостоянияВыполненияПроцессовСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Периоды КАК ВТ_Периоды
		|		ПО СостоянияВыполненияПроцессовСрезПоследних.ПериодСценария = ВТ_Периоды.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УправлениеПериодом КАК ВТ_УправлениеПериодом
		|		ПО СостоянияВыполненияПроцессовСрезПоследних.Сценарий = ВТ_УправлениеПериодом.КлючевойОбъектПроцесса.Сценарий
		|			И СостоянияВыполненияПроцессовСрезПоследних.ЭтапПроцесса.Владелец = ВТ_УправлениеПериодом.ШаблонПроцесса";
		Запрос.УстановитьПараметр("ЭкземплярПроцесса", ДокументПроцессаВход);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		СостояниеЗапланирован = Перечисления.СостоянияЭтаповПроцессов.Запланирован;
		ТекПользователь = Пользователи.ТекущийПользователь();
		ТекДата = ТекущаяДатаСеанса();
		Попытка
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				НоваяЗапись = РегистрыСведений.СостоянияВыполненияПроцессов.СоздатьМенеджерЗаписи();
				НоваяЗапись.Период				 = ТекДата;
				НоваяЗапись.Сценарий			 = ВыборкаДетальныеЗаписи.Сценарий;
				НоваяЗапись.ПериодСценария		 = ВыборкаДетальныеЗаписи.ПериодСценария;
				НоваяЗапись.Организация			 = ВыборкаДетальныеЗаписи.Организация;
				НоваяЗапись.ЭтапПроцесса		 = ВыборкаДетальныеЗаписи.ЭтапПроцесса;
				НоваяЗапись.СостояниеЭтапа		 = СостояниеЗапланирован;
				НоваяЗапись.ДатаНачала			 = ВыборкаДетальныеЗаписи.ДатаНачала;
				НоваяЗапись.ДатаОкончания		 = ВыборкаДетальныеЗаписи.ДатаОкончания;
				НоваяЗапись.ОтветственныйЗаЭтап	 = ТекПользователь;
				НоваяЗапись.Комментарий			 = ВыборкаДетальныеЗаписи.Комментарий;
				НоваяЗапись.Записать();
			КонецЦикла;
		Исключение
			ТекстСообщения = НСтр("ru = 'При отмене выполнения процесса по документу %Документ% возникли ошибки: %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Строка(ДокументПроцессаВход.КлючевойОбъектПроцесса));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = Ложь;
		КонецПопытки;
	Иначе
		РезультатФункции = Истина;		// Не процесс подготовки. Выполнение сбрасывания не требуется.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// СброситьСостоянияВыполненияПроцессов()

// Останавливает выполнение универсального процесса по экземпляру процесса ТекущийДокументПроцесса.
Функция ОстановитьПроцесс(ТекущийДокументПроцесса, ОстанавливатьОбъект = Истина) Экспорт
	// Инициализация.
	РезультатФункции = Истина;
	// Открытие транзакции.
	ЕстьВнешняяТранзакция = ТранзакцияАктивна();
	Если НЕ ЕстьВнешняяТранзакция Тогда
		НачатьТранзакцию();
	Иначе
		// Транзакция уже открыта.
	КонецЕсли;
	ЕстьОшибки = Ложь;
	Попытка
		// Пометим на удаление и отменим проведение документа процесса.
		ТекущийДокументПроцессаОбъект = ТекущийДокументПроцесса.ПолучитьОбъект();
		ТекущийДокументПроцессаОбъект.СостояниеВыполнения	 = Перечисления.СостоянияПроцесса.Остановлен;
		ТекущийДокументПроцессаОбъект.ПометкаУдаления		 = Истина;
		ТекущийДокументПроцессаОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);	
		// Сбросим задачи по процессу.
		МодульРегламентныхЗаданийУХ.СброситьЗаданияПоПроцессу(ТекущийДокументПроцесса);
		ПометитьНаУдалениеЗадачиПоОбъекту(ТекущийДокументПроцесса.КлючевойОбъектПроцесса);
		// Сбросим выполнение процесса по отдельным организациям.
		РезультатСбрасыванияВыполнения = СброситьСостоянияВыполненияПроцессов(ТекущийДокументПроцесса);
		Если Не РезультатСбрасыванияВыполнения Тогда
			РезультатФункции = Ложь;
		Иначе
			// Операция успешна. Не изменяем флаг выполнения.
		КонецЕсли;
		// Для процесса подготовки отчетности сбросим флаг в документе Управление периодом сценария.
		КлючевойОбъект = ТекущийДокументПроцесса.КлючевойОбъектПроцесса;
		КлючевойДокументУоп = (ТипЗнч(КлючевойОбъект) = Тип("ДокументСсылка.УправлениеПериодомСценария"));
		ЭтоПроцессПодготовкиОтчетности = (ТекущийДокументПроцесса.НазначениеПроцесса = Перечисления.НазначенияУниверсальныхПроцессов.ПроцессПодготовкиОтчетности);
		Если (ОстанавливатьОбъект) И (КлючевойДокументУоп) И (ЭтоПроцессПодготовкиОтчетности) Тогда
			ДокументОбъект = КлючевойОбъект.ПолучитьОбъект();
			ДокументОбъект.ЭкземплярПроцесса = Документы.ЭкземплярПроцесса.ПустаяСсылка();
			ДокументОбъект.ЗапускатьПроцесс = Ложь;
			ДокументОбъект.Записать();
		Иначе
			// Не процесс подготовки отчетности. Не изменяем флаг в документе.
		КонецЕсли;
		// Оповестим пользователей об остановке процесса.
		СобытиеПроцессОстновлен = Справочники.ВидыСобытийОповещений.ПроцессОстановлен;
		МодульУправленияОповещениямиУХ.ОповеститьПользователей(СобытиеПроцессОстновлен, ,ТекущийДокументПроцесса);
		
		МассивРассылки = Новый Массив;
		МассивРассылки.Добавить(ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
		МодульУправленияОповещениямиУХ.СоздатьНапоминание(СобытиеПроцессОстновлен, КлючевойОбъект, МассивРассылки);
	Исключение
		ТекстСообщения = НСтр("ru = 'При остановке процесса для объекта %КлючевойОбъект% произошли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КлючевойОбъект%", Строка(ТекущийДокументПроцесса.КлючевойОбъектПроцесса));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Ложь;
		ЕстьОшибки = Истина;
	КонецПопытки;
	// Фиксирование транзакции.
	Если НЕ ЕстьВнешняяТранзакция Тогда
		Если НЕ ЕстьОшибки Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
	Иначе
		// Не закрываем текущую транзакцию, т.к. активна внешняя.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ОстановитьПроцесс()	

// Возвращает таблицу подготавливаемых отчетов с разбивкой по этапам для 
// экземпляра процесса ДокументПроцессаВход.
Функция ПолучитьТаблицуОтчетовПоЭкземпляруПроцесса(ДокументПроцессаВход) Экспорт
	РезультатФункции = Новый ТаблицаЗначений;
	КлючевойОбъект = ДокументПроцессаВход.КлючевойОбъектПроцесса;
	Если (ЗначениеЗаполнено(КлючевойОбъект)) И (ТипЗнч(КлючевойОбъект) = Тип("ДокументСсылка.УправлениеПериодомСценария")) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница КАК Организация,
		|	ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса КАК ЭтапПроцесса,
		|	СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа КАК СостояниеЭтапа,
		|	СостоянияВыполненияПроцессовСрезПоследних.ДатаНачала КАК ДатаНачала,
		|	СостоянияВыполненияПроцессовСрезПоследних.ДатаОкончания КАК ДатаОкончания,
		|	СостоянияВыполненияПроцессовСрезПоследних.ОтветственныйЗаЭтап КАК ОтветственныйЗаЭтап
		|ПОМЕСТИТЬ ТаблицаОрганизаций
		|ИЗ
		|	РегистрСведений.ОрганизационныеЕдиницыЭтаповПроцессов КАК ОрганизационныеЕдиницыЭтаповПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияВыполненияПроцессов.СрезПоследних(
		|				,
		|				ПериодСценария = &ПериодСценария
		|					И Сценарий = &Сценарий) КАК СостоянияВыполненияПроцессовСрезПоследних
		|		ПО ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница = СостоянияВыполненияПроцессовСрезПоследних.Организация
		|			И ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса = СостоянияВыполненияПроцессовСрезПоследних.ЭтапПроцесса
		|ГДЕ
		|	ОрганизационныеЕдиницыЭтаповПроцессов.ВерсияРегламентаПодготовкиОтчетности = &ВерсияОрганизационнойСтруктуры
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭтапыПроцессовФормируемыеОтчеты.Ссылка КАК ЭтапПроцесса,
		|	ЭтапыПроцессовФормируемыеОтчеты.ШаблонДокумента КАК ВидОтчета,
		|	ЭтапыПроцессовФормируемыеОтчеты.ВидДокумента КАК ВидДокумента,
		|	ЭтапыПроцессовФормируемыеОтчеты.ДокументБД КАК ДокументБД
		|ПОМЕСТИТЬ ТаблицаВидовОтчетов
		|ИЗ
		|	Справочник.ШаблоныУниверсальныхПроцессов КАК ВерсииОрганизационнойСтруктуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыПроцессовФормируемыеОтчеты
		|		ПО ВерсииОрганизационнойСтруктуры.Ссылка = ЭтапыПроцессовФормируемыеОтчеты.Ссылка.Владелец
		|ГДЕ
		|	ВерсииОрганизационнойСтруктуры.СвязанныйРегламент = &ВерсияОрганизационнойСтруктуры
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументБД,
		|	ВидОтчета,
		|	ВидДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НастраиваемыйОтчет.ВидОтчета КАК ПолеШаблона,
		|	НастраиваемыйОтчет.Организация КАК Организация,
		|	НастраиваемыйОтчет.Ссылка КАК Ссылка,
		|	NULL КАК Аналитика1,
		|	NULL КАК Аналитика2,
		|	NULL КАК Аналитика3,
		|	РегистрСостоянийОбъектов.СостояниеОбъекта КАК Состояние,
		|	НастраиваемыйОтчет.Сценарий КАК Сценарий
		|ПОМЕСТИТЬ НастраиваемыйОтчетВрем
		|ИЗ
		|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(
		|				,
		|				Объект.Сценарий = &Сценарий
		|					И Объект.ПериодОтчета = &ПериодСценария
		|					И Объект ССЫЛКА Документ.НастраиваемыйОтчет) КАК РегистрСостоянийОбъектов
		|		ПО НастраиваемыйОтчет.Ссылка = РегистрСостоянийОбъектов.Объект
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВидовОтчетов КАК ТаблицаВидовОтчетов
		|		ПО НастраиваемыйОтчет.ВидОтчета = ТаблицаВидовОтчетов.ВидОтчета
		|ГДЕ
		|	НастраиваемыйОтчет.Сценарий = &Сценарий
		|	И НастраиваемыйОтчет.ПериодОтчета = &ПериодСценария
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПолеШаблона,
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТрансформационнаяКорректировка.ШаблонКорректировки КАК ПолеШаблона,
		|	ТрансформационнаяКорректировка.Организация КАК Организация,
		|	ТрансформационнаяКорректировка.Ссылка КАК Ссылка,
		|	NULL КАК Аналитика1,
		|	NULL КАК Аналитика2,
		|	NULL КАК Аналитика3,
		|	ВЫБОР
		|		КОГДА ТрансформационнаяКорректировка.Проведен
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Выполняется)
		|	КОНЕЦ КАК Состояние,
		|	ТрансформационнаяКорректировка.Сценарий КАК Сценарий
		|ПОМЕСТИТЬ КорректировкаВрем
		|ИЗ
		|	Документ.ТрансформационнаяКорректировка КАК ТрансформационнаяКорректировка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВидовОтчетов КАК ТаблицаВидовОтчетов
		|		ПО ТрансформационнаяКорректировка.ШаблонКорректировки = ТаблицаВидовОтчетов.ВидОтчета
		|ГДЕ
		|	ТрансформационнаяКорректировка.Сценарий = &Сценарий
		|	И ТрансформационнаяКорректировка.ПериодОтчета = &ПериодСценария
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПолеШаблона,
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Трансляция.ШаблонКорректировки КАК ПолеШаблона,
		|	Трансляция.Организация КАК Организация,
		|	Трансляция.Ссылка КАК Ссылка,
		|	NULL КАК Аналитика1,
		|	NULL КАК Аналитика2,
		|	NULL КАК Аналитика3,
		|	ВЫБОР
		|		КОГДА Трансляция.Проведен
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Выполняется)
		|	КОНЕЦ КАК Состояние,
		|	Трансляция.Сценарий КАК Сценарий
		|ПОМЕСТИТЬ ТрансляцияВрем
		|ИЗ
		|	ТаблицаВидовОтчетов КАК ТаблицаВидовОтчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Трансляция КАК Трансляция
		|		ПО (Трансляция.ШаблонКорректировки = ТаблицаВидовОтчетов.ВидОтчета)
		|ГДЕ
		|	Трансляция.Сценарий = &Сценарий
		|	И Трансляция.ПериодОтчета = &ПериодСценария
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПолеШаблона,
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НЕОПРЕДЕЛЕНО КАК ПолеШаблона,
		|	Элиминация.ОрганизацияДляЭлиминации КАК Организация,
		|	Элиминация.Ссылка КАК Ссылка,
		|	NULL КАК Аналитика1,
		|	NULL КАК Аналитика2,
		|	NULL КАК Аналитика3,
		|	ВЫБОР
		|		КОГДА Элиминация.Проведен
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Выполняется)
		|	КОНЕЦ КАК Состояние,
		|	Элиминация.Сценарий КАК Сценарий
		|ПОМЕСТИТЬ ЭлиминацияВрем
		|ИЗ
		|	ТаблицаВидовОтчетов КАК ТаблицаВидовОтчетов,
		|	Документ.Элиминация КАК Элиминация,
		|	Документ.Трансляция КАК Трансляция
		|ГДЕ
		|	Элиминация.Сценарий = &Сценарий
		|	И Элиминация.ПериодОтчета = &ПериодСценария
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПолеШаблона,
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаВидовОтчетов.ЭтапПроцесса КАК ЭтапПроцесса,
		|	ТаблицаВидовОтчетов.ВидОтчета КАК ВидОтчета,
		|	ТаблицаВидовОтчетов.ДокументБД КАК ДокументБД,
		|	ТаблицаОрганизаций.Организация КАК Организация,
		|	ТаблицаОрганизаций.СостояниеЭтапа КАК СостояниеЭтапа,
		|	НастраиваемыйОтчетВрем.Ссылка КАК Ссылка,
		|	НастраиваемыйОтчетВрем.Состояние КАК Состояние,
		|	ТаблицаВидовОтчетов.ЭтапПроцесса.ПорядковыйНомер КАК ПорядковыйНомерЭтапаПроцесса,
		|	ТаблицаОрганизаций.ДатаНачала КАК ДатаНачала,
		|	ТаблицаОрганизаций.ДатаОкончания КАК ДатаОкончания,
		|	НастраиваемыйОтчетВрем.Ссылка.ПоследнийРедактировавший КАК ПоследнийРедактировавший,
		|	НастраиваемыйОтчетВрем.Ссылка.ДатаИзменения КАК ДатаИзменения
		|ПОМЕСТИТЬ ВТ_Объединение
		|ИЗ
		|	ТаблицаВидовОтчетов КАК ТаблицаВидовОтчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОрганизаций КАК ТаблицаОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Периметр
		|			ПО (Периметр.Ссылка = ТаблицаОрганизаций.Организация.Родитель)
		|		ПО (ТаблицаОрганизаций.ЭтапПроцесса = ТаблицаВидовОтчетов.ЭтапПроцесса)
		|		ЛЕВОЕ СОЕДИНЕНИЕ НастраиваемыйОтчетВрем КАК НастраиваемыйОтчетВрем
		|		ПО (НастраиваемыйОтчетВрем.ПолеШаблона = ТаблицаВидовОтчетов.ВидОтчета)
		|			И (НастраиваемыйОтчетВрем.Организация = ТаблицаОрганизаций.Организация)
		|ГДЕ
		|	ТаблицаВидовОтчетов.ДокументБД = &ПарНастраиваемыйОтчет
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаВидовОтчетов.ЭтапПроцесса,
		|	ТаблицаВидовОтчетов.ВидОтчета,
		|	ТаблицаВидовОтчетов.ДокументБД,
		|	ТаблицаОрганизаций.Организация,
		|	ТаблицаОрганизаций.СостояниеЭтапа,
		|	ЕСТЬNULL(КорректировкаВрем.Ссылка, ЗНАЧЕНИЕ(Документ.ТрансформационнаяКорректировка.ПустаяСсылка)),
		|	ЕСТЬNULL(КорректировкаВрем.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Запланирован)),
		|	ТаблицаВидовОтчетов.ЭтапПроцесса.ПорядковыйНомер,
		|	ТаблицаОрганизаций.ДатаНачала,
		|	ТаблицаОрганизаций.ДатаОкончания,
		|	ЕСТЬNULL(КорректировкаВрем.Ссылка.ПоследнийРедактировавший, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)),
		|	ЕСТЬNULL(КорректировкаВрем.Ссылка.ДатаИзменения, &ПустаяДата)
		|ИЗ
		|	ТаблицаВидовОтчетов КАК ТаблицаВидовОтчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОрганизаций КАК ТаблицаОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Периметр
		|			ПО (Периметр.Ссылка = ТаблицаОрганизаций.Организация.Родитель)
		|		ПО (ТаблицаОрганизаций.ЭтапПроцесса = ТаблицаВидовОтчетов.ЭтапПроцесса)
		|		ЛЕВОЕ СОЕДИНЕНИЕ КорректировкаВрем КАК КорректировкаВрем
		|		ПО ТаблицаВидовОтчетов.ВидОтчета = КорректировкаВрем.ПолеШаблона
		|			И (ТаблицаОрганизаций.Организация = КорректировкаВрем.Организация)
		|ГДЕ
		|	ТаблицаВидовОтчетов.ДокументБД = &ПарТрансформационнаяКорректировка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаВидовОтчетов.ЭтапПроцесса,
		|	ТаблицаВидовОтчетов.ВидОтчета,
		|	ТаблицаВидовОтчетов.ДокументБД,
		|	ТаблицаОрганизаций.Организация,
		|	ТаблицаОрганизаций.СостояниеЭтапа,
		|	ЕСТЬNULL(ТрансляцияВрем.Ссылка, ЗНАЧЕНИЕ(Документ.Трансляция.ПустаяСсылка)),
		|	ЕСТЬNULL(ТрансляцияВрем.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Запланирован)),
		|	ТаблицаВидовОтчетов.ЭтапПроцесса.ПорядковыйНомер,
		|	ТаблицаОрганизаций.ДатаНачала,
		|	ТаблицаОрганизаций.ДатаОкончания,
		|	ЕСТЬNULL(ТрансляцияВрем.Ссылка.ПоследнийРедактировавший, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)),
		|	ЕСТЬNULL(ТрансляцияВрем.Ссылка.ДатаИзменения, &ПустаяДата)
		|ИЗ
		|	ТаблицаВидовОтчетов КАК ТаблицаВидовОтчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОрганизаций КАК ТаблицаОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Периметр
		|			ПО (Периметр.Ссылка = ТаблицаОрганизаций.Организация.Родитель)
		|		ПО (ТаблицаОрганизаций.ЭтапПроцесса = ТаблицаВидовОтчетов.ЭтапПроцесса)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТрансляцияВрем КАК ТрансляцияВрем
		|		ПО ТаблицаВидовОтчетов.ВидОтчета = ТрансляцияВрем.ПолеШаблона
		|			И (ТаблицаОрганизаций.Организация = ТрансляцияВрем.Организация)
		|ГДЕ
		|	ТаблицаВидовОтчетов.ДокументБД = &ПарТрансляция
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаВидовОтчетов.ЭтапПроцесса,
		|	ТаблицаВидовОтчетов.ВидОтчета,
		|	ТаблицаВидовОтчетов.ДокументБД,
		|	ТаблицаОрганизаций.Организация,
		|	ТаблицаОрганизаций.СостояниеЭтапа,
		|	ЕСТЬNULL(ЭлиминацияВрем.Ссылка, ЗНАЧЕНИЕ(Документ.Трансляция.ПустаяСсылка)),
		|	ЕСТЬNULL(ЭлиминацияВрем.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Запланирован)),
		|	ТаблицаВидовОтчетов.ЭтапПроцесса.ПорядковыйНомер,
		|	ТаблицаОрганизаций.ДатаНачала,
		|	ТаблицаОрганизаций.ДатаОкончания,
		|	NULL,
		|	NULL
		|ИЗ
		|	ТаблицаВидовОтчетов КАК ТаблицаВидовОтчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОрганизаций КАК ТаблицаОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Периметр
		|			ПО (Периметр.Ссылка = ТаблицаОрганизаций.Организация.Родитель)
		|		ПО (ТаблицаОрганизаций.ЭтапПроцесса = ТаблицаВидовОтчетов.ЭтапПроцесса)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЭлиминацияВрем КАК ЭлиминацияВрем
		|		ПО (ТаблицаОрганизаций.Организация = ЭлиминацияВрем.Организация)
		|ГДЕ
		|	ТаблицаВидовОтчетов.ДокументБД = &ПарЭлиминация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_Объединение.ЭтапПроцесса КАК ЭтапПроцесса,
		|	ВТ_Объединение.ВидОтчета КАК ВидОтчета,
		|	ВТ_Объединение.Организация КАК Организация,
		|	ВТ_Объединение.Ссылка КАК Ссылка,
		|	ВТ_Объединение.Состояние КАК Состояние
		|ИЗ
		|	ВТ_Объединение КАК ВТ_Объединение";
		СценарийПроцесса	 = КлючевойОбъект.Сценарий;
		ПериодПроцесса		 = КлючевойОбъект.ПериодСценария;
		РегламентПроцесса	 = КлючевойОбъект.ВерсияОрганизационнойСтруктуры;
		ДокНастраиваемыйОтчет				 = ОбщегоНазначенияСерверУХ.ВернутьСсылкуБДПоТипу(Тип("ДокументСсылка.НастраиваемыйОтчет"));
		ДокТрансляция						 = ОбщегоНазначенияСерверУХ.ВернутьСсылкуБДПоТипу(Тип("ДокументСсылка.Трансляция"));
		ДокТрансформационнаяКорректировка	 = ОбщегоНазначенияСерверУХ.ВернутьСсылкуБДПоТипу(Тип("ДокументСсылка.ТрансформационнаяКорректировка"));
		ДокЭлиминация						 = ОбщегоНазначенияСерверУХ.ВернутьСсылкуБДПоТипу(Тип("ДокументСсылка.Элиминация"));
		Запрос.УстановитьПараметр("ВерсияОрганизационнойСтруктуры", РегламентПроцесса);
		Запрос.УстановитьПараметр("ПарНастраиваемыйОтчет", ДокНастраиваемыйОтчет);
		Запрос.УстановитьПараметр("ПарТрансляция", ДокТрансляция);
		Запрос.УстановитьПараметр("ПарТрансформационнаяКорректировка", ДокТрансформационнаяКорректировка);
		Запрос.УстановитьПараметр("ПарЭлиминация", ДокЭлиминация);
		Запрос.УстановитьПараметр("ПериодСценария", ПериодПроцесса);
		Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
		Запрос.УстановитьПараметр("Сценарий", СценарийПроцесса);
		РезультатЗапроса = Запрос.Выполнить();
		РезультатФункции = РезультатЗапроса.Выгрузить();
	Иначе
		РезультатФункции = Новый ТаблицаЗначений; 
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Возвращает массив подготавливаемых отчетов экземпляра процесса 
// ДокументПроцессаВход.
Функция ПолучитьМассивОтчетовПоЭкземпляруПроцесса(ДокументПроцессаВход)
	РезультатФункции = Новый Массив; 
	ТаблицаДанных = ПолучитьТаблицуОтчетовПоЭкземпляруПроцесса(ДокументПроцессаВход);
	Если ТаблицаДанных.Количество() > 0 Тогда
		МассивОтчетов = ТаблицаДанных.ВыгрузитьКолонку("Ссылка");
		МассивОтчетов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивОтчетов);
		РезультатФункции = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивОтчетов);
	Иначе
		РезультатФункции = Новый Массив; 		// Получена пустая таблица.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Из массива экземпляров отчетов МассивОтчетовВход выделяет массив тех низ них,
// которые согласуются.
Функция ВыделитьСогласуемыеОтчеты(МассивОтчетовВход)
	РезультатФункции = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭкземплярПроцесса.КлючевойОбъектПроцесса КАК КлючевойОбъектПроцесса,
		|	ЭкземплярПроцесса.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ЭкземплярПроцесса КАК ЭкземплярПроцесса
		|ГДЕ
		|	НЕ ЭкземплярПроцесса.ПометкаУдаления
		|	И ЭкземплярПроцесса.КлючевойОбъектПроцесса В(&МассивОтчетов)";
	Запрос.УстановитьПараметр("МассивОтчетов", МассивОтчетовВход);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
КонецФункции		// ВыделитьСогласуемыеОтчеты()

// Сбрасывает процесс подготовки отчетности по документу процесса ДокументПроцессаВход,
// а также переводит все отчеты по данному процессу в состояние Черновик.
Функция УправлениеПериодомОстановитьПроцесс(ДокументПроцессаВход, ОстанавливатьОбъект = Истина) Экспорт
	// Инициализация.
	РезультатФункции = Истина;
	НачатьТранзакцию();
	// Остановка процесса.
	РезультатФункции = ОстановитьПроцесс(ДокументПроцессаВход);
	// Остановка согласования.
	МассивОтчетов = ПолучитьМассивОтчетовПоЭкземпляруПроцесса(ДокументПроцессаВход);
	ТаблицаСогласуемых = ВыделитьСогласуемыеОтчеты(МассивОтчетов);
	Для Каждого ТекТаблицаСогласуемых Из ТаблицаСогласуемых Цикл
		РезультатОстановки = ОстановитьПроцесс(ТекТаблицаСогласуемых.Ссылка, ОстанавливатьОбъект);
		Если Не РезультатОстановки Тогда
			РезультатФункции = Ложь;
		Иначе
			// Операция выполнена успешно. Продолжаем.
		КонецЕсли;
	КонецЦикла;
	// Сброс статуса экземпляров по процессу в Черновик.
	Для Каждого ТекМассивОтчетов Из МассивОтчетов Цикл
		Попытка
			Если ТипЗнч(ТекМассивОтчетов) = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
				ДополнительныеНастройки = Новый Структура;
				ДополнительныеНастройки.Вставить("ПроверятьСостояниеЭтапа", Ложь);
				УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВСостояниеЧерновик(ТекМассивОтчетов, ДокументПроцессаВход, ДополнительныеНастройки);
			ИначеЕсли ТипЗнч(ТекМассивОтчетов) = Тип("ДокументСсылка.Трансляция") Тогда
				ОбработатьПроводящийсяДокумент(ТекМассивОтчетов, Ложь);
			ИначеЕсли ТипЗнч(ТекМассивОтчетов) = Тип("ДокументСсылка.ТрансформационнаяКорректировка") Тогда
				ОбработатьПроводящийсяДокумент(ТекМассивОтчетов, Ложь);
			ИначеЕсли ТипЗнч(ТекМассивОтчетов) = Тип("ДокументСсылка.Элиминация") Тогда
				ОбработатьПроводящийсяДокумент(ТекМассивОтчетов, Ложь);				
			Иначе
				ТекстСообщения = НСтр("ru = 'Неизвестный вариант документ %Документ% при остановке процесса %Процесс%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Строка(ТекМассивОтчетов));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Процесс%", Строка(ДокументПроцессаВход));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось перевести в Черновик объект %Объект% : %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Строка(ТекМассивОтчетов));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = Ложь;
		КонецПопытки;
	КонецЦикла;
	// Обработка транзакции.
	Если РезультатФункции Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

Функция ЗавершитьПроцесс(ТекущийДокументПроцесса) Экспорт
	
	ТекущийДокументПроцессаОбъект = ТекущийДокументПроцесса.ПолучитьОбъект();
	Попытка
		//Сбросим статусы выполнения процесса
		ТекущийДокументПроцессаОбъект.СостояниеВыполнения = Перечисления.СостоянияПроцесса.Остановлен;
		ТекущийДокументПроцессаОбъект.Записать();		
		//Переведем статус в завершен
		ТекущийДокументПроцессаОбъект.СостояниеВыполнения = Перечисления.СостоянияПроцесса.Завершен;
		ТекущийДокументПроцессаОбъект.Записать();	
		// Очистим задачи.
		МодульРегламентныхЗаданийУХ.СброситьЗаданияПоПроцессу(ТекущийДокументПроцесса);
		ПометитьНаУдалениеЗадачиПоОбъекту(ТекущийДокументПроцесса.КлючевойОбъектПроцесса);
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Выполняет процедуры, которые должны исполняться при статусах Утвержен, Отклонен, Черновик для
// объекта согласования ОбъектСсылка по статусу СтатусСогласованияЭтапа. Для остальных статусов
// переводит в произвольное состояние. Возвращает успешность выполнения.
Функция ВыполнитьПроцедурыПоСтатусам(ОбъектСсылка, СтатусСогласованияЭтапа, ДокументПроцесса = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	РезультатФункции = Истина;
	ДополнительныеПараметры = ИнициализироватьДополнительныеПараметрыСогласования(ДополнительныеПараметры);
	Если ЗначениеЗаполнено(СтатусСогласованияЭтапа) Тогда
		СоответствиеСостоянийОбъекта = ПолучитьСоответствиеСостоянийОбъекта(ОбъектСсылка);
		Если СтатусСогласованияЭтапа = СоответствиеСостоянийОбъекта["Утвержден"] Тогда
			РезультатФункции = УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВСостояниеУтверждена(ОбъектСсылка, , ДокументПроцесса, , ДополнительныеПараметры);
		ИначеЕсли СтатусСогласованияЭтапа = СоответствиеСостоянийОбъекта["Отклонен"] Тогда	
			РезультатФункции = УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВСостояниеОтклонена(ОбъектСсылка, , , ДокументПроцесса, , ДополнительныеПараметры);
		ИначеЕсли СтатусСогласованияЭтапа = СоответствиеСостоянийОбъекта["Черновик"] Тогда	
			РезультатФункции = УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВСостояниеЧерновик(ОбъектСсылка, ДокументПроцесса, ДополнительныеПараметры);
		Иначе	
			ИдентификаторСообщения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ИдентификаторСообщения", "");
			РезультатФункции = УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(ОбъектСсылка, СтатусСогласованияЭтапа,,,,ДокументПроцесса, , , , ИдентификаторСообщения);
		КонецЕсли;
	Иначе
		// Не задан новый статус. Не меняем.
		РезультатФункции = Истина;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ВыполнитьПроцедурыПоСтатусам()

// Добавляет пользователей из массива структур МассивПолучателейЗадачиВход в табличную часть 
// Дополнительные согласующие документа ДокументПроцессаВход в этап ЭтапВход.
Процедура ДобавитьПользователейВДополнительныеСогласующиеДокументаПроцесса(ДокументПроцессаВход, ЭтапВход, МассивПолучателейЗадачиВход, ДопСогласующийВход = Ложь)
	Попытка
		ДокументОбъект = ДокументПроцессаВход.ПолучитьОбъект();
		Для Каждого ТекМассивПолучателейЗадачиВход Из МассивПолучателейЗадачиВход Цикл
			НоваяСтрока = ДокументОбъект.ДополнительныеСогласующие.Добавить();
			НоваяСтрока.Пользователь	 = ТекМассивПолучателейЗадачиВход.Пользователь;
			НоваяСтрока.Этап			 = ЭтапВход;
			НоваяСтрока.Организация		 = ТекМассивПолучателейЗадачиВход.Организация;
			НоваяСтрока.ДопСогласующий	 = ДопСогласующийВход;
		КонецЦикла;
		ДокументОбъект.Записать();
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось добавить согласующих в документ %Документ% по причине: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Строка(ДокументПроцессаВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры

// Отработка ситуации, когда возникла ошибка маршрутизации: отправка оповещения об ошибке
// и перенос задачи согласования администратору процесса.
Процедура ОбработатьОшибкуМаршрутизации(ЭтапВход, ДокументПроцессаВход, ОрганизацияВход)
	АдминистраторПроцесса = ДокументПроцессаВход.ШаблонПроцесса.АдминистраторПроцесса;
	Если ЗначениеЗаполнено(АдминистраторПроцесса) Тогда
		// Оповещение об ошибке маршрутизации.
		ВидСобытияОшибкаРолевойАдресации = Справочники.ВидыСобытийОповещений.ОшибкаРолевойАдресации;
		МассивОповещаемыхОшибка = Новый Массив;
		МассивОповещаемыхОшибка.Добавить(АдминистраторПроцесса);
		СтруктураДопПараметры = Новый Структура;
		СтруктураДопПараметры.Вставить("ЭтапПроцесса", ЭтапВход);
		МодульУправленияОповещениямиУХ.ОповеститьПользователей(ВидСобытияОшибкаРолевойАдресации, , ДокументПроцессаВход.КлючевойОбъектПроцесса, МассивОповещаемыхОшибка, СтруктураДопПараметры);
		// Задание ответственному за маршрут.
		МассивПолучателейЗадачи = Новый Массив;
		СтруктураПолучателейЗадачи = Новый Структура;
		СтруктураПолучателейЗадачи.Вставить("Пользователь", АдминистраторПроцесса);
		СтруктураПолучателейЗадачи.Вставить("Организация", ОрганизацияВход);
		МассивПолучателейЗадачи.Добавить(СтруктураПолучателейЗадачи);
		МодульРегламентныхЗаданийУХ.ДобавитьЗаданиеНаТаймаутЭтапа(ДокументПроцессаВход, ЭтапВход);
		МодульРегламентныхЗаданийУХ.ДобавитьЗаданиеНаЭтап(ДокументПроцессаВход, ЭтапВход, МассивПолучателейЗадачи, СтруктураДопПараметры);
		ДобавитьПользователейВДополнительныеСогласующиеДокументаПроцесса(ДокументПроцессаВход, ЭтапВход, МассивПолучателейЗадачи);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не найден ответственный по этапу %ЭтапПроцесса%. Обратитесь к администратору.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭтапПроцесса%", Строка(ЭтапВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры

// Проверяет выполнение этапа ЭтапПроцесса в ходе процесса ДокументПроцесса для
// организации Организация.
Функция ПроверитьВыполнениеЭтапа(ДокументПроцесса, Организация, ЭтапПроцесса)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВыполнениеПроцессовСрезПоследних.ДокументПроцесса,
		|	ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса,
		|	ВыполнениеПроцессовСрезПоследних.СостояниеЭтапа
		|ИЗ
		|	РегистрСведений.ВыполнениеПроцессов.СрезПоследних КАК ВыполнениеПроцессовСрезПоследних
		|ГДЕ
		|	ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса = &ЭтапПроцесса
		|	И ВыполнениеПроцессовСрезПоследних.ДокументПроцесса = &ДокументПроцесса
		|	И ВыполнениеПроцессовСрезПоследних.АрхивнаяЗапись = ЛОЖЬ
		|	И ВыполнениеПроцессовСрезПоследних.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.ВОбработке)
		|	И ВыполнениеПроцессовСрезПоследних.Организация = &Организация";
	Запрос.УстановитьПараметр("ДокументПроцесса", ДокументПроцесса);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ЭтапПроцесса", ЭтапПроцесса);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = НЕ РезультатЗапроса.Пустой();	
	Возврат РезультатФункции;
КонецФункции		// ПроверитьВыполнениеЭтапа()

// Проверяет выполнение этапа ЭтапПроцесса в ходе процесса ДокументПроцесса для
// организации Организация.
Функция МожноСброситьЭтап(ДокументПроцесса, Организация, ЭтапПроцесса) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВыполнениеПроцессовСрезПоследних.ДокументПроцесса КАК ДокументПроцесса,
		|	ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса КАК ЭтапПроцесса,
		|	ВыполнениеПроцессовСрезПоследних.СостояниеЭтапа КАК СостояниеЭтапа
		|ИЗ
		|	РегистрСведений.ВыполнениеПроцессов.СрезПоследних КАК ВыполнениеПроцессовСрезПоследних
		|ГДЕ
		|	ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса = &ЭтапПроцесса
		|	И ВыполнениеПроцессовСрезПоследних.ДокументПроцесса = &ДокументПроцесса
		|	И ВыполнениеПроцессовСрезПоследних.СостояниеЭтапа В (&Состояния)
		|	И ВыполнениеПроцессовСрезПоследних.Организация = &Организация";
	МассивСостояний = Новый Массив;
	МассивСостояний.Добавить(Перечисления.СостоянияЭтаповУниверсальныхПроцессов.ВОбработке);
	МассивСостояний.Добавить(Перечисления.СостоянияЭтаповУниверсальныхПроцессов.Завершен);
	Запрос.УстановитьПараметр("ДокументПроцесса", ДокументПроцесса);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Состояния", МассивСостояний);
	Запрос.УстановитьПараметр("ЭтапПроцесса", ЭтапПроцесса);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = НЕ РезультатЗапроса.Пустой();	
	Возврат РезультатФункции;
КонецФункции		// МожноСброситьЭтап()

// Очищает данные дополнительного согласования по этапу ЭтапПроцессаВход
// в процессе ДокументПроцессаВход.
Процедура ОчиститьДополнительноеСогласованиеПоЭтапу(ЭтапПроцессаВход, ДокументПроцессаВход)
	НаборЗаписей = РегистрыСведений.ВизаДополнительныхСогласующих.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЭкземплярПроцесса.Установить(ДокументПроцессаВход);
	НаборЗаписей.Отбор.ЭтапПроцесса.Установить(ЭтапПроцессаВход);
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
КонецПроцедуры

// Получает число неутверждённых этапов-предшественников этапа ЭтапПроцессаВход
// в ходе процесса ДокументПроцессаВход.
Функция ПолучитьКоличествоНеУтвержденныхЭтаповПредшественников(ЭтапПроцессаВход, ДокументПроцессаВход)
	РезультатФункции = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(*) КАК ЧислоНеУтвержденныхЭтапов
	|ПОМЕСТИТЬ ВТ_Объединение
	|ИЗ
	|	РегистрСведений.ТекущийМаршрутПроцесса КАК ТекущийМаршрутПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВыполнениеПроцессов.СрезПоследних(, ДокументПроцесса = &ДокументСогласования) КАК ВыполнениеПроцессовСрезПоследних
	|		ПО ТекущийМаршрутПроцесса.ЭтапИсточник = ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса
	|ГДЕ
	|	ВыполнениеПроцессовСрезПоследних.СостояниеЭтапа <> &СостояниеСогласования
	|	И ТекущийМаршрутПроцесса.ДокументПроцесса = &ДокументСогласования
	|	И ТекущийМаршрутПроцесса.ЭтапПриемник = &Этап
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВизаДополнительныхСогласующих.Согласующий)
	|ИЗ
	|	РегистрСведений.ВизаДополнительныхСогласующих КАК ВизаДополнительныхСогласующих
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущийМаршрутПроцесса КАК ТекущийМаршрутПроцесса
	|		ПО ВизаДополнительныхСогласующих.ЭтапПроцесса = ТекущийМаршрутПроцесса.ЭтапИсточник
	|			И ВизаДополнительныхСогласующих.ЭкземплярПроцесса = ТекущийМаршрутПроцесса.ДокументПроцесса
	|ГДЕ
	|	ВизаДополнительныхСогласующих.ЭкземплярПроцесса = &ДокументСогласования
	|	И НЕ ВизаДополнительныхСогласующих.АрхивнаяЗапись
	|	И ТекущийМаршрутПроцесса.ЭтапПриемник = &Этап
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ВТ_Объединение.ЧислоНеУтвержденныхЭтапов) КАК ЧислоНеУтвержденныхЭтапов
	|ИЗ
	|	ВТ_Объединение КАК ВТ_Объединение";
	Запрос.УстановитьПараметр("Этап", ЭтапПроцессаВход);
	Запрос.УстановитьПараметр("ДокументСогласования", ДокументПроцессаВход);
	Запрос.УстановитьПараметр("СостояниеСогласования", Перечисления.СостоянияЭтаповУниверсальныхПроцессов.Завершен);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РезультатФункции = Выборка.ЧислоНеУтвержденныхЭтапов;
	Иначе
		РезультатФункции = 0;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьКоличествоНеУтвержденныхЭтаповПредшественников()

// Определяет организацию для объекта КлючевойОбъектВход. Когда определить не удалось - 
// возвращает ОрганизацияПоУмолчаниюВход.
Функция ОпределитьОрганизациюРоли(КлючевойОбъектВход, ОрганизацияПоУмолчаниюВход)
	РезультатФункции = ОрганизацияПоУмолчаниюВход;
	ОрганизацияМетаданного = МодульОбработкиЭтаповПроцессовСерверУХ.ПолучитьОрганизациюОбъекта(КлючевойОбъектВход);
	Если ЗначениеЗаполнено(ОрганизацияМетаданного) Тогда
		РезультатФункции = ОрганизацияМетаданного;
	Иначе
		РезультатФункции = ОрганизацияПоУмолчаниюВход;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ОпределитьОрганизациюРоли()


// Отменяет все дочерние процессы процесса ДокументПроцессаВход по этапу ЭтапПроцессаВход.
Процедура ОтменитьДочерниеПроцессы(ДокументПроцессаВход, ЭтапПроцессаВход)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭкземплярПроцесса.Ссылка КАК Ссылка,
		|	ЭкземплярПроцесса.ПроцессРодитель КАК ПроцессРодитель,
		|	ЭкземплярПроцесса.ЭтапРодитель КАК ЭтапРодитель
		|ИЗ
		|	Документ.ЭкземплярПроцесса КАК ЭкземплярПроцесса
		|ГДЕ
		|	НЕ ЭкземплярПроцесса.ПометкаУдаления
		|	И ЭкземплярПроцесса.ПроцессРодитель = &ПроцессРодитель
		|	И ЭкземплярПроцесса.ЭтапРодитель = &ЭтапРодитель";
	Запрос.УстановитьПараметр("ПроцессРодитель", ДокументПроцессаВход);
	Запрос.УстановитьПараметр("ЭтапРодитель", ЭтапПроцессаВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МодульУправленияПроцессамиУХ.ОстановитьПроцесс(ВыборкаДетальныеЗаписи.Ссылка, Ложь);
	КонецЦикла;
КонецПроцедуры		// ОтменитьДочерниеПроцессы()

// Формирует пустую структуру дополнительных параметров для согласования.
Функция СформироватьДополнительныеПараметрыСогласования() Экспорт
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ИдентификаторСообщения", "");
	РезультатФункции.Вставить("ГлубинаРекурсииЭтапов", Новый Соответствие);
	РезультатФункции.Вставить("ИдентификаторФормыДляВыводаПротокола", "");
	Возврат РезультатФункции;
КонецФункции		// СформироватьДополнительныеПараметрыСогласования()

// Проверяет заполнение структуры дополнительных параметров СтруктураПараметровВход.
// В случае пустых значений, производит инициализацию. Возвращает заполненную копию.
Функция ИнициализироватьДополнительныеПараметрыСогласования(СтруктураПараметровВход) Экспорт
	РезультатФункции = СформироватьДополнительныеПараметрыСогласования();
	Если ТипЗнч(СтруктураПараметровВход) = Тип("Структура") Тогда
		Если СтруктураПараметровВход.Количество() > 0 Тогда
			// Передана непустая структура. Проинициализируем её параметры в случае. если они пустые.
			РезультатФункции = СтруктураПараметровВход;
			ТекИдентификатор = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(РезультатФункции, "ИдентификаторСообщения", "");
			Если СокрЛП(ТекИдентификатор) = "" Тогда
				// Идентификатор пустой. Сформируем заново.
				РезультатФункции.Вставить("ИдентификаторСообщения", Строка(Новый УникальныйИдентификатор));
			Иначе
				// Идентификатор сформирован. Не изменяем.
			КонецЕсли;
		Иначе
			// Пустая структура.
			РезультатФункции = СформироватьДополнительныеПараметрыСогласования();
			РезультатФункции.Вставить("ИдентификаторСообщения", Строка(Новый УникальныйИдентификатор));
		КонецЕсли;
	Иначе
		// Не структура.
		РезультатФункции = СформироватьДополнительныеПараметрыСогласования();
		РезультатФункции.Вставить("ИдентификаторСообщения", Строка(Новый УникальныйИдентификатор));
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ИнициализироватьДополнительныеПараметрыСогласования()

// Выполняет обработку этапа ЭтапПроцессаВход автоотклонения.
Процедура ОбработкаЭтапаАвтоУтверждение(ДокументПроцессаВход, ОрганизацияВход, ЭтапПроцессаВход, ДополнительныеПараметры)
	// Инициализация.
	ШаблонПроцесса = ДокументПроцессаВход.ШаблонПроцесса;
	ОбъектСсылка = ДокументПроцессаВход.КлючевойОбъектПроцесса;
	ТекстКомментария = НСтр("ru = 'Документ автоматически согласован'");
	// Завершение выполнение текущего этапа.
	УтвердитьЭтапПроцесса(ДокументПроцессаВход, ОрганизацияВход, ЭтапПроцессаВход, "", Истина, , , , , , , ДополнительныеПараметры);
	СтатусСогласованияЭтапа = ЭтапПроцессаВход.СтатусСогласованияОбъекта;
	РезультатПроцедур = Истина;
	Если ШаблонПроцесса.ПриОтклоненииЭтапаВыполнятьПроцессДоКонца Тогда
		// Выполнение до конца. Выполним действие в зависимости от наличия отклонённых этапов.
		Если НЕ МодульУправленияПроцессамиУХ.ЕстьОтклоненныеЭтапыПоПроцессуСогласования(ДокументПроцессаВход) Тогда 
			// Нет отклонённых этапов. Утвердим документ.
			Если ЗначениеЗаполнено(ДокументПроцессаВход.ПроцессРодитель) Тогда
				НужнаДальнейшаяОбработка = Истина;
				УтвердитьВложенныйПроцесс(ДокументПроцессаВход);
			Иначе	
				УтвердитьДокумент(ОбъектСсылка, ТекстКомментария, ЭтапПроцессаВход);
				НужнаДальнейшаяОбработка = Ложь;
			КонецЕсли;
			РезультатПроцедур = ВыполнитьПроцедурыПоСтатусам(ОбъектСсылка, СтатусСогласованияЭтапа, ДокументПроцессаВход, ДополнительныеПараметры);
		Иначе
			// Есть отклонённые этапы. Отклоним документ.
			Если ЗначениеЗаполнено(ДокументПроцессаВход.ПроцессРодитель) Тогда
				НужнаДальнейшаяОбработка = Истина;
				ОтклонитьВложенныйПроцесс(ДокументПроцессаВход);
			Иначе	
				СтруктураПараметровЭтапа = Новый Структура;
				СтруктураПараметровЭтапа.Вставить("ДокументСогласования", ДокументПроцессаВход); 
				СтруктураПараметровЭтапа.Вставить("Комментарий", "");
				СтруктураПараметровЭтапа.Вставить("Организация", ОрганизацияВход);
				СтруктураПараметровЭтапа.Вставить("Этап", ЭтапПроцессаВход);
				ВернутьНаДоработку(ДокументПроцессаВход.КлючевойОбъектПроцесса, ТекстКомментария, , СтруктураПараметровЭтапа);
				ОстановитьПроцесс(ДокументПроцессаВход);
				УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВСостояниеОтклонена(ОбъектСсылка, , Истина, ДокументПроцессаВход);
				НужнаДальнейшаяОбработка = Ложь;
			КонецЕсли;
			РезультатПроцедур = Истина;
		КонецЕсли;
	Иначе
		// Нет выполнения до конца. Выполним утверждение процесса.
		Если ЗначениеЗаполнено(ДокументПроцессаВход.ПроцессРодитель) Тогда
			НужнаДальнейшаяОбработка = Истина;
			УтвердитьВложенныйПроцесс(ДокументПроцессаВход);
		Иначе	
			УтвердитьДокумент(ОбъектСсылка, ТекстКомментария, ЭтапПроцессаВход);
			НужнаДальнейшаяОбработка = Ложь;
		КонецЕсли;
		РезультатПроцедур = ВыполнитьПроцедурыПоСтатусам(ОбъектСсылка, СтатусСогласованияЭтапа, ДокументПроцессаВход, ДополнительныеПараметры);
	КонецЕсли;
	// Запись статуса этапа.
	Если НЕ РезультатПроцедур Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось провести действия для статуса %Статус% этапа %Этап%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", Строка(СтатусСогласованияЭтапа));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(ЭтапПроцессаВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Отказ = Истина;
	Иначе
		// Процедуры выполнены успешно.
	КонецЕсли;
КонецПроцедуры		// ОбработкаЭтапаАвтоУтверждение()

// Выполняет обработку этапа ЭтапПроцессаВход автоутверждения.
Процедура ОбработкаЭтапаАвтоОтклонение(ДокументПроцессаВход, ОрганизацияВход, ЭтапПроцессаВход, ДополнительныеПараметры)
	// Инициализация.
	ШаблонПроцесса = ДокументПроцессаВход.ШаблонПроцесса;
	ОбъектСсылка = ДокументПроцессаВход.КлючевойОбъектПроцесса;
	ТекстКомментария = НСтр("ru = 'Документ автоматически отклонен'");
	// Завершение выполнение текущего этапа.
	Если ЗначениеЗаполнено(ДокументПроцессаВход.ПроцессРодитель) Тогда
		НужнаДальнейшаяОбработка = Истина;
		ОтклонитьВложенныйПроцесс(ДокументПроцессаВход);
	Иначе	
		СтруктураПараметровЭтапа = Новый Структура;
		СтруктураПараметровЭтапа.Вставить("ДокументСогласования", ДокументПроцессаВход); 
		СтруктураПараметровЭтапа.Вставить("Комментарий", "");
		СтруктураПараметровЭтапа.Вставить("Организация", ОрганизацияВход);
		СтруктураПараметровЭтапа.Вставить("Этап", ЭтапПроцессаВход);
		ВернутьДокументНаДоработку(, СтруктураПараметровЭтапа, ДокументПроцессаВход.КлючевойОбъектПроцесса); 
		ОстановитьПроцесс(ДокументПроцессаВход);
		НужнаДальнейшаяОбработка = Ложь;
	КонецЕсли;
	// Запись статуса этапа.
	СтатусСогласованияЭтапа = ЭтапПроцессаВход.СтатусСогласованияОбъекта;
	РезультатПроцедур = ВыполнитьПроцедурыПоСтатусам(ОбъектСсылка, СтатусСогласованияЭтапа, ДокументПроцессаВход, ДополнительныеПараметры);
	Если НЕ РезультатПроцедур Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось провести действия для статуса %Статус% этапа %Этап%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", Строка(СтатусСогласованияЭтапа));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(ЭтапПроцессаВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Отказ = Истина;
	Иначе
		// Процедуры выполнены успешно.
	КонецЕсли;
КонецПроцедуры		// ОбработкаЭтапаАвтоОтклонение()

// Выполняет обработку ошибки этапа ЭтапПроцессаВход процесса ДокументПроцессаВход типом Обработка. 
// Отправляет оповещение администратору процесса о том, что произошла ошибка с текстом ТекстОшибкиВход, 
// а также добавляет задачу на ручное завершение этапа.
Процедура ОбработатьОшибкуЭтапаОбработка(ДокументПроцессаВход, ЭтапПроцессаВход, ТекстОшибкиВход, ОрганизацияВход)
	// Инициализация.
	ВидСобытияОшибкаЭтапаОбработка = Справочники.ВидыСобытийОповещений.ОшибкаЭтапаОбработка;
	КлючевойОбъект = ДокументПроцессаВход.КлючевойОбъектПроцесса;
	ШаблонПроцесса = ДокументПроцессаВход.ШаблонПроцесса;
	АдминистраторПроцесса = ШаблонПроцесса.АдминистраторПроцесса;
	Если ЗначениеЗаполнено(АдминистраторПроцесса) Тогда
		// Отправка оповещенеия администратору.
		МассивОповещаемыхОшибка = Новый Массив;
		МассивОповещаемыхОшибка.Добавить(АдминистраторПроцесса);
		СтруктураДопПараметры = Новый Структура;
		СтруктураДопПараметры.Вставить("ЭтапПроцесса", ЭтапПроцессаВход);
		СтруктураДопПараметры.Вставить("ОписаниеОшибки", ТекстОшибкиВход);
		МодульУправленияОповещениямиУХ.ОповеститьПользователей(ВидСобытияОшибкаЭтапаОбработка, , КлючевойОбъект, МассивОповещаемыхОшибка, СтруктураДопПараметры, , ЭтапПроцессаВход);
		// Добавление задачи на ручное завершение этапа Обработка.
		МассивПолучателейЗадачи = Новый Массив;
		СтруктураПолучателейЗадачи = Новый Структура;
		СтруктураПолучателейЗадачи.Вставить("Пользователь", АдминистраторПроцесса);
		СтруктураПолучателейЗадачи.Вставить("Организация", ОрганизацияВход);
		МассивПолучателейЗадачи.Добавить(СтруктураПолучателейЗадачи);
		МодульРегламентныхЗаданийУХ.ДобавитьЗаданиеНаТаймаутЭтапа(ДокументПроцессаВход, ЭтапПроцессаВход);
		МодульРегламентныхЗаданийУХ.ДобавитьЗаданиеНаЭтап(ДокументПроцессаВход, ЭтапПроцессаВход, МассивПолучателейЗадачи, СтруктураДопПараметры);
	Иначе
		ТекстСообщения = НСтр("ru = 'Не указан администратор для шаблона процесса %Шаблон%. Отправка извещения об ошибке этапа Обработка отменена.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Шаблон%", Строка(ШаблонПроцесса));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
КонецПроцедуры		// ОбработатьОшибкуЭтапаОбработка()

// Выполняет обработку этапа ЭтапПроцесса обработка.
Процедура ОбработатьЭтапОбработка(ДокументПроцесса, Организация, ЭтапПроцесса, НужнаДальнейшаяОбработка, ФлагОшибки, ДополнительныеПараметры )
	Если ЭтапПроцесса.РучноеУтверждениеЭтапа Тогда
		// Ручное завершение этапа. Добавим задачу ответственному за этап.
		ОтборЭтап = Новый Структура("Этап",ЭтапПроцесса);
		ОтветственныеТекущегоЭтапа = ДокументПроцесса.ДополнительныеСогласующие.Выгрузить(ОтборЭтап);
		СтрокаПредставленияОповещение = "";
		РасшифровкаОтветственных = РасшифроватьРолиОтветственных(ОтветственныеТекущегоЭтапа, Организация, СтрокаПредставленияОповещение);
		Если РасшифровкаОтветственных.Количество() > 0 Тогда
			МодульРегламентныхЗаданийУХ.ДобавитьЗаданиеНаЭтап(ДокументПроцесса, ЭтапПроцесса, ОтветственныеТекущегоЭтапа, ДополнительныеПараметры);
		Иначе
			ОбработатьОшибкуМаршрутизации(ЭтапПроцесса, ДокументПроцесса, Организация);
		КонецЕсли;
	Иначе	
		// Автоматическое завершение этапа. Выполним указанный код.
		ТекстОшибкиОбработки = "";
		КлючевойОбъект = ДокументПроцесса.КлючевойОбъектПроцесса;
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ЭкземплярПроцесса",	 ДокументПроцесса);
		СтруктураПараметров.Вставить("ТекущийЭтап",			 ЭтапПроцесса);
		СтруктураПараметров.Вставить("СогласуемыйОбъект",	 КлючевойОбъект);
		РезультатВыполнения = МодульОбработкиЭтаповПроцессовСерверУХ.ОбработатьПроизвольныйКодЭтапа(СтруктураПараметров, ЭтапПроцесса.ПроцедураПроцесса, ТекстОшибкиОбработки);
		Если РезультатВыполнения Тогда
			// Выполнено успешно. Переходим к следующему этапу.
			НужнаДальнейшаяОбработка = УтвердитьЭтапПроцесса(ДокументПроцесса, Организация, ЭтапПроцесса, "", Истина, , , , , , ФлагОшибки, ДополнительныеПараметры);
		Иначе
			// Оповестим администратора и добавим ему задачу на ручное завершение этапа.
			НужнаДальнейшаяОбработка = Ложь;
			ФлагОшибки = Истина;
			ОбработатьОшибкуЭтапаОбработка(ДокументПроцесса, ЭтапПроцесса, ТекстОшибкиОбработки, Организация);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры		// ОбработатьЭтапОбработка()

// Процедура инициирует согласование этапа.
Процедура ИнициироватьСогласованиеЭтапа(ДокументПроцесса, Организация, ЭтапПроцесса, 
	НужнаДальнейшаяОбработка = Неопределено, Отказ = Ложь, ДополнительныеПараметры = Неопределено) Экспорт
	// Инициализация.
	ДополнительныеПараметры = ИнициализироватьДополнительныеПараметрыСогласования(ДополнительныеПараметры);
	ИдентификаторСообщенияРабочий = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ИдентификаторСообщения", "");
	// Убедимся, что этап ещё не запущен.
	ЭтапВыполняется = ПроверитьВыполнениеЭтапа(ДокументПроцесса, Организация, ЭтапПроцесса);
	Если ЭтапВыполняется Тогда
		Возврат;	// Этап уже запущен. Не запускаем повторно.
	Иначе
		// Проверка на запуск пройдена. Можно выполнять далее.
	КонецЕсли;
	Попытка
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВыполнениеПроцессовСрезПоследних.Период,
		|	ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса,
		|	ВыполнениеПроцессовСрезПоследних.ДокументПроцесса
		|ИЗ
		|	РегистрСведений.ВыполнениеПроцессов.СрезПоследних КАК ВыполнениеПроцессовСрезПоследних
		|ГДЕ
		|	ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса = &ЭтапПроцесса
		|	И ВыполнениеПроцессовСрезПоследних.ДокументПроцесса = &ДокументПроцесса";
		
		Запрос.УстановитьПараметр("ЭтапПроцесса", ЭтапПроцесса);
		Запрос.УстановитьПараметр("ДокументПроцесса", ДокументПроцесса);
		Выборка = Запрос.Выполнить().Выбрать();
		
		МенеджерЗаписи                      = РегистрыСведений.ВыполнениеПроцессов.СоздатьМенеджерЗаписи();
		
		Если Выборка.Следующий() Тогда
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка, "ЭтапПроцесса, ДокументПроцесса, Период");
			МенеджерЗаписи.Прочитать();
		КонецЕсли;
		
		Если МенеджерЗаписи.Выбран() Тогда
			// Реквизиты заполнены.
		Иначе
			МенеджерЗаписи.ЭтапПроцесса    	 = ЭтапПроцесса;
			МенеджерЗаписи.ДокументПроцесса	 = ДокументПроцесса;
			
		КонецЕсли;
		
		МенеджерЗаписи.АрхивнаяЗапись		 = Ложь;
		МенеджерЗаписи.Период				 = ОбщегоНазначенияСерверУХ.ПолучитьОтметкуПоОбъекту(ДокументПроцесса);
		МенеджерЗаписи.Организация			 = Организация;
		
		// Получение количества неутверждённых этапов.
		ЧислоНеУтвержденныхЭтапов = ПолучитьКоличествоНеУтвержденныхЭтаповПредшественников(ЭтапПроцесса, ДокументПроцесса);
		ВсеПредшественникиУтверждены = (ЧислоНеУтвержденныхЭтапов = 0);
		ЭтоЭтапДочернегоМаршрута = (ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ДочернийМаршрут);
		НуженЗапускДочернегоПроцесса = (ВсеПредшественникиУтверждены И ЭтоЭтапДочернегоМаршрута);
		
		// Установка состояния этапа.
		МенеджерЗаписи.СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.ВОбработке;
		
		ОбъектСсылка = ДокументПроцесса.КлючевойОбъектПроцесса;
		Если ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования  Тогда
			ОтборЭтап = Новый Структура("Этап",ЭтапПроцесса);
			ТаблицаДопСогласующихВыгрузка = ДокументПроцесса.ДополнительныеСогласующие.Выгрузить(ОтборЭтап);
			ОрганизацияРоли = ОпределитьОрганизациюРоли(ОбъектСсылка, Организация);
			СтрокаПредставления = "";
			ОтветственныеТекущегоЭтапа = РасшифроватьРолиОтветственных(ДокументПроцесса, ТаблицаДопСогласующихВыгрузка, ОрганизацияРоли, СтрокаПредставления);
			Если ОтветственныеТекущегоЭтапа.Количество() > 0 Тогда
				МодульРегламентныхЗаданийУХ.ДобавитьЗаданиеНаТаймаутЭтапа(ДокументПроцесса, ЭтапПроцесса);
				МодульРегламентныхЗаданийУХ.ДобавитьЗаданиеНаЭтап(ДокументПроцесса, ЭтапПроцесса, ОтветственныеТекущегоЭтапа, ДополнительныеПараметры);
			Иначе
				ОбработатьОшибкуМаршрутизации(ЭтапПроцесса, ДокументПроцесса, Организация);
			КонецЕсли;
			// Добавим ответстсвенных.
			Если ОтветственныеТекущегоЭтапа.Количество() = 1 Тогда
				ПерваяСтрока =  ОтветственныеТекущегоЭтапа[0];
				МенеджерЗаписи.Автор = ПерваяСтрока.Пользователь;
			Иначе
				// Нельзя определить ответственных однозначно.
			КонецЕсли;
			МенеджерЗаписи.АвторПредставление	 = СтрокаПредставления;
			МенеджерЗаписи.АрхивнаяЗапись		 = Ложь;
		ИначеЕсли  ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход  Тогда
			ОтборЭтап = Новый Структура("Этап",ЭтапПроцесса);
			ТаблицаДопСогласующихВыгрузка = ДокументПроцесса.ДополнительныеСогласующие.Выгрузить(ОтборЭтап);
			ОрганизацияРоли = ОпределитьОрганизациюРоли(ОбъектСсылка, Организация);
			СтрокаПредставления = "";
			ОтветственныеТекущегоЭтапа = РасшифроватьРолиОтветственных(ДокументПроцесса, ТаблицаДопСогласующихВыгрузка, ОрганизацияРоли, СтрокаПредставления);
			Если ОтветственныеТекущегоЭтапа.Количество() > 0 Тогда
				МодульРегламентныхЗаданийУХ.ДобавитьЗаданиеНаТаймаутЭтапа(ДокументПроцесса, ЭтапПроцесса);
				МодульРегламентныхЗаданийУХ.ДобавитьЗаданиеНаЭтап(ДокументПроцесса, ЭтапПроцесса, ОтветственныеТекущегоЭтапа, ДополнительныеПараметры);
			Иначе
				ОбработатьОшибкуМаршрутизации(ЭтапПроцесса, ДокументПроцесса, Организация);
			КонецЕсли;
			// Добавим ответстсвенных.
			Если ОтветственныеТекущегоЭтапа.Количество() = 1 Тогда
				ПерваяСтрока =  ОтветственныеТекущегоЭтапа[0];
				МенеджерЗаписи.Автор = ПерваяСтрока.Пользователь;
			Иначе
				// Нельзя определить ответственных однозначно.
			КонецЕсли;
			МенеджерЗаписи.АвторПредставление	 = СтрокаПредставления;
			МенеджерЗаписи.АрхивнаяЗапись		 = Ложь;
		КонецЕсли;
		
		Если ТипЗнч(ОбъектСсылка) = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
			МенеджерЗаписи.ОписаниеВерсии = УправлениеОтчетамиУХ.ВернутьТекущееОписаниеВерсииДляЭкземпляраОтчета(ОбъектСсылка);
		КонецЕсли;
		МенеджерЗаписи.ДатаНачала = ТекущаяДатаСеанса();
		МенеджерЗаписи.Записать(Истина);
		
		ОчиститьДополнительноеСогласованиеПоЭтапу(ЭтапПроцесса, ДокументПроцесса);
		
		Если НуженЗапускДочернегоПроцесса Тогда
			КлючевойРеквизитВложенногоПроцесса = ДокументПроцесса.ПараметрыПроцесса[0].ЗначениеПоУмолчанию; 
			ОтменитьДочерниеПроцессы(ДокументПроцесса, ЭтапПроцесса);
			ИнициализироватьПроцесс(Неопределено,ЭтапПроцесса.ДочернийМаршрут, Организация,КлючевойРеквизитВложенногоПроцесса, ДокументПроцесса, ЭтапПроцесса);
			НужнаДальнейшаяОбработка = Истина;
		ИначеЕсли ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.УсловныйПереход Тогда
			НужнаДальнейшаяОбработка = УтвердитьЭтапПроцесса(ДокументПроцесса, Организация, ЭтапПроцесса, "", Истина, , , , , , Отказ, ДополнительныеПараметры);
		ИначеЕсли ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Автоотклонение Тогда
			ОбработкаЭтапаАвтоОтклонение(ДокументПроцесса, Организация, ЭтапПроцесса, ДополнительныеПараметры);
		ИначеЕсли ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Автоутверждение   Тогда
			ОбработкаЭтапаАвтоУтверждение(ДокументПроцесса, Организация, ЭтапПроцесса, ДополнительныеПараметры);
		ИначеЕсли ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Обработка Тогда
			ОбработатьЭтапОбработка(ДокументПроцесса, Организация, ЭтапПроцесса, НужнаДальнейшаяОбработка, Отказ, ДополнительныеПараметры);
		ИначеЕсли ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапУниверсальногоЭкспорта Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ЭкземплярПроцесса", ДокументПроцесса);
			СтруктураПараметров.Вставить("ТекущийЭтап", ЭтапПроцесса);
			ФлагОшибки = МодульОбработкиЭтаповПроцессовСерверУХ.ОбработатьЭтапУниверсальногоЭкспорта(СтруктураПараметров);
			НужнаДальнейшаяОбработка = УтвердитьЭтапПроцесса(ДокументПроцесса, Организация, ЭтапПроцесса, "", Истина, , , , , , , ДополнительныеПараметры);	
		ИначеЕсли ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Оповещение Тогда    
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ЭкземплярПроцесса", ДокументПроцесса);
			СтруктураПараметров.Вставить("ТекущийЭтап", ЭтапПроцесса);
			МодульОбработкиЭтаповПроцессовСерверУХ.ОбработатьЭтапОповещения(СтруктураПараметров);
			НужнаДальнейшаяОбработка = УтвердитьЭтапПроцесса(ДокументПроцесса, Организация, ЭтапПроцесса, "", Истина, , , , , , , ДополнительныеПараметры);	
		ИначеЕсли ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЦиклПока Тогда    
			МодульРегламентныхЗаданийУХ.ДобавитьЗаданиеНаЭтап(ДокументПроцесса, ЭтапПроцесса,, ДополнительныеПараметры);
			МодульРегламентныхЗаданийУХ.ОбработкаЭтаповПроцессов(ЭтапПроцесса);
			НужнаДальнейшаяОбработка = Истина;
		ИначеЕсли ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Пауза Тогда    
			МодульРегламентныхЗаданийУХ.ДобавитьЗаданиеНаТаймаутЭтапа(ДокументПроцесса, ЭтапПроцесса);
			НужнаДальнейшаяОбработка = Истина;		
		ИначеЕсли ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования Тогда    		
			// Выполним установку статуса объекта.
			СтатусСогласованияОбъекта = ЭтапПроцесса.СтатусСогласованияОбъекта;
			Если ЗначениеЗаполнено(СтатусСогласованияОбъекта) Тогда
				Результат = УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(ОбъектСсылка, СтатусСогласованияОбъекта, , , , ДокументПроцесса, , , , ИдентификаторСообщенияРабочий);	
				Если Не Результат Тогда
					Отказ = Истина;
				Иначе
					// Выполнено успешно.
					МассивПоследователей = МодульРегламентныхЗаданийУХ.ПолучитьМассивПоследователейЭтапаРекурсивно(ЭтапПроцесса, ДокументПроцесса);
					
					ОтменятьПоследующиеЭтапы = Ложь;
					
					Если МассивПоследователей.Количество() > 0 тогда
						ТаблицаСостоянийСледующегоЭтапа = ПолучитьСостояниеЭтапаПоЭкземпляруПроцесса(ДокументПроцесса, МассивПоследователей[0]);
						
						Если ТаблицаСостоянийСледующегоЭтапа <> Неопределено И ТаблицаСостоянийСледующегоЭтапа.Количество() > 0 Тогда
							ОтменятьПоследующиеЭтапы = (ТаблицаСостоянийСледующегоЭтапа[0].СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.Завершен);
						КонецЕсли;
						
						Если МассивПоследователей.Найти(ЭтапПроцесса) <> Неопределено И ОтменятьПоследующиеЭтапы тогда
							ТекПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
							РезультатОтклонения = ОтклонитьЭтапСогласования(ДокументПроцесса, Организация, МассивПоследователей[0], "", ТекПользователь, Перечисления.СостоянияЭтаповУниверсальныхПроцессов.НеАктивен);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				// Пустой статус на этом этапе. Не изменяем.
			КонецЕсли;
		ИначеЕсли ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход Тогда    		
			// Выполним установку статуса объекта.
			СтатусСогласованияОбъекта = ЭтапПроцесса.СтатусСогласованияОбъекта;
			Если ЗначениеЗаполнено(СтатусСогласованияОбъекта) Тогда
				Результат = УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(ОбъектСсылка, СтатусСогласованияОбъекта, , , , ДокументПроцесса, , , , ИдентификаторСообщенияРабочий);
				Если Не Результат Тогда
					Отказ = Истина;
				Иначе
					// Выполнено успешно.
				КонецЕсли;
			Иначе
				// Пустой статус на этом этапе. Не изменяем.
			КонецЕсли;
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'При инициации этапа %Этап% произошли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(ЭтапПроцесса));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Отказ = Истина;
	КонецПопытки;
КонецПроцедуры		// ИнициироватьСогласованиеЭтапа()

Процедура  УстановитьСостояниеТекущегоЭтапаЗавершен(ЭтапПроцесса,ДокументУправленияПроцессом) Экспорт

    НаборЗаписей = РегистрыСведений.ВыполнениеПроцессов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументПроцесса.Установить(ДокументУправленияПроцессом);
	НаборЗаписей.Отбор.ЭтапПроцесса.Установить(ЭтапПроцесса);
    НаборЗаписей.Прочитать();

	Если НаборЗаписей.Количество() = 0 Тогда
		НЗ = НаборЗаписей.Добавить();
		НЗ.Период = ТекущаяДата();
		НЗ.ДокументПроцесса = ДокументУправленияПроцессом;
		НЗ.ЭтапПроцесса = ЭтапПроцесса;
		НЗ.ДатаОкончания = ТекущаяДата();
		НЗ.СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.Завершен;
	Иначе
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.ДатаОкончания = ТекущаяДата();
			Запись.СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.Завершен;	
		КонецЦикла; 	
		
	КонецЕсли;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

Процедура  УстановитьСостояниеТекущегоЭтапаВОбработке(ЭтапПроцесса,ДокументУправленияПроцессом) Экспорт

    НаборЗаписей = РегистрыСведений.ВыполнениеПроцессов.СоздатьНаборЗаписей();

	НаборЗаписей.Отбор.ДокументПроцесса.Установить(ДокументУправленияПроцессом);
	НаборЗаписей.Отбор.ЭтапПроцесса.Установить(ЭтапПроцесса);
    НаборЗаписей.Прочитать();

	Если НаборЗаписей.Количество() = 0 Тогда
		НЗ = НаборЗаписей.Добавить();
		НЗ.Период = ТекущаяДата();
		НЗ.ДокументПроцесса = ДокументУправленияПроцессом;
		НЗ.ЭтапПроцесса = ЭтапПроцесса;
		НЗ.ДатаНачала = ТекущаяДата();
		НЗ.СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.ВОбработке;

	Иначе
		Для Каждого Запись Из НаборЗаписей Цикл
			
			//Запись.ДатаОкончания = ТекущаяДата();
			Запись.СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.ВОбработке;
			//Если НЕ Отладка Тогда
			//	ОповещениеОрганизаций.Вставить(Запись.Организация, Истина);
			//КонецЕсли;	
		КонецЦикла; 	
		
	КонецЕсли;
	НаборЗаписей.Записать(Истина);

	
КонецПроцедуры

Процедура  УстановитьСостояниеТекущегоЭтапаНеАктивен(ЭтапПроцесса,ДокументУправленияПроцессом) Экспорт

    НаборЗаписей = РегистрыСведений.ВыполнениеПроцессов.СоздатьНаборЗаписей();

	НаборЗаписей.Отбор.ДокументПроцесса.Установить(ДокументУправленияПроцессом);
	НаборЗаписей.Отбор.ЭтапПроцесса.Установить(ЭтапПроцесса);
    НаборЗаписей.Прочитать();

	Если НаборЗаписей.Количество() = 0 Тогда
		НЗ = НаборЗаписей.Добавить();
		НЗ.Период = ТекущаяДата();
		НЗ.ДокументПроцесса = ДокументУправленияПроцессом;
		НЗ.ЭтапПроцесса = ЭтапПроцесса;
		НЗ.ДатаОкончания = ТекущаяДата();
		НЗ.СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.НеАктивен;

	Иначе
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.ДатаОкончания =Дата(1,1,1);
			Запись.СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.НеАктивен;	
		КонецЦикла; 	
		
	КонецЕсли;
	НаборЗаписей.Записать(Истина);

	
КонецПроцедуры

Процедура  УстановитьСостояниеТекущегоЭтапаЗавершенСОшибкой(ЭтапПроцесса,ДокументУправленияПроцессом) Экспорт

    НаборЗаписей = РегистрыСведений.ВыполнениеПроцессов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ДокументПроцесса.Установить(ДокументУправленияПроцессом);
	НаборЗаписей.Отбор.ЭтапПроцесса.Установить(ЭтапПроцесса);
    НаборЗаписей.Прочитать();

	Если НаборЗаписей.Количество() = 0 Тогда
		НЗ = НаборЗаписей.Добавить();
		НЗ.Период = ТекущаяДата();
		НЗ.ДокументПроцесса = ДокументУправленияПроцессом;
		НЗ.ЭтапПроцесса = ЭтапПроцесса;
		НЗ.ДатаОкончания = ТекущаяДата();
		НЗ.СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.ЗавершенСОшибкой;
	Иначе
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.ДатаОкончания = Дата(1,1,1);
			Запись.СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.ЗавершенСОшибкой;	
		КонецЦикла; 	
		
	КонецЕсли;
	НаборЗаписей.Записать(Истина);

	
КонецПроцедуры

Процедура УтвердитьДокумент(КлючевойОбъектПроцесса, ТекстСообщения, ЭтапПроцессаВход = Неопределено, ЗавершитьПроцессВход = Истина) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭкземплярПроцесса.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЭкземплярПроцесса КАК ЭкземплярПроцесса
	|ГДЕ
	|	ЭкземплярПроцесса.КлючевойОбъектПроцесса = &КлючевойОбъектПроцесса
	|	И ЭкземплярПроцесса.ПометкаУдаления = ЛОЖЬ
	|	И ЭкземплярПроцесса.СостояниеВыполнения <> ЗНАЧЕНИЕ(Перечисление.СостоянияПроцесса.Завершен)";
	
	Запрос.УстановитьПараметр("КлючевойОбъектПроцесса", КлючевойОбъектПроцесса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ТекОбъект.УтвердитьОтчет(ТекстСообщения, ЗавершитьПроцессВход);
		
		СоответствиеСостоянийОбъекта = ПолучитьСоответствиеСостоянийОбъекта(КлючевойОбъектПроцесса);
        СостояниеЗаявки = УправлениеПроцессамиСогласованияУХ.ВернутьТекущееСостояние(КлючевойОбъектПроцесса);
		Если НЕ СостояниеЗаявки = СоответствиеСостоянийОбъекта["Утвержден"] Тогда	
			ПриУтвержденииВсехЭтаповМаршрутаСогласования(КлючевойОбъектПроцесса);
			СобытиеУтверждение = Перечисления.ВидыОповещенийПользователейУХ.УтверждениеОтчета;
			КомментарийИстории = НСтр("ru = 'Автоматическое утверждение'");
			Если ЗначениеЗаполнено(ЭтапПроцессаВход) Тогда
				ДобавитьЗаписьВлогПроцесса(ТекОбъект.Ссылка, ЭтапПроцессаВход, , КомментарийИстории, СобытиеУтверждение);
			Иначе
				ДобавитьЗаписьВлогПроцесса(ТекОбъект.Ссылка, , , КомментарийИстории, СобытиеУтверждение);
			КонецЕсли;
			СтатусТранзакции = "ОбъектСогласован";			

		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область МодульПоддержкиСогласованияОбъектов

Функция ЭтапыСогласованияДляТекущегоПользователя(ОбъектСогласования, СписокЗадачВход = Неопределено) Экспорт
	
	ТекПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	РезультатФункции = ЭтапыСогласованияДляПользователя(ОбъектСогласования, ТекПользователь, , СписокЗадачВход);
	Возврат РезультатФункции;
	
КонецФункции

// Возвращает массив, содеращий активные этапы согласования по объекту 
// ОбъектСогласованиядля текущего пользователя. Когда задан параметр 
// СписокЗадачВход, будет дополнительно произведен отбор по списку задач.
Функция МассивЭтаповСогласованияДляТекущегоПользователя(ОбъектСогласованияВход, СписокЗадачВход = Неопределено) Экспорт
	ТаблицаЭтаповСогласования = ЭтапыСогласованияДляТекущегоПользователя(ОбъектСогласованияВход, СписокЗадачВход);
	РезультатФункции = ТаблицаЭтаповСогласования.ВыгрузитьКолонку("ЭтапПроцесса");
	РезультатФункции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатФункции);
	Возврат РезультатФункции;
КонецФункции

// Возвращает массив, содеращий типы активных этапов согласования по объекту 
// ОбъектСогласованиядля текущего пользователя. Когда задан параметр 
// СписокЗадачВход, будет дополнительно произведен отбор по списку задач.
Функция МассивТиповЭтаповСогласованияДляТекущегоПользователя(ОбъектСогласованияВход, СписокЗадачВход = Неопределено) Экспорт
	МассивЭтапов = МассивЭтаповСогласованияДляТекущегоПользователя(ОбъектСогласованияВход, СписокЗадачВход);
	РезультатФункции = Новый Массив;
	Для Каждого ТекМассивЭтапов Из МассивЭтапов Цикл
		РезультатФункции.Добавить(ТекМассивЭтапов.ТипЭтапа);
	КонецЦикла;
	РезультатФункции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатФункции);
	Возврат РезультатФункции;
КонецФункции

// Возврщает копию таблицы ТаблицаЭтаповВход, в которой оставлены только задачи
// из списка СписокЗадачВход.
Функция ОтобратьЭтапыПоЗадачам(ТаблицаЭтаповВход, СписокЗадачВход)  
	Если ЗначениеЗаполнено(СписокЗадачВход) Тогда
		РезультатФункции = ТаблицаЭтаповВход.СкопироватьКолонки();
		Для Каждого ТекТаблицаЭтаповВход Из ТаблицаЭтаповВход Цикл
			Если СписокЗадачВход.НайтиПоЗначению(ТекТаблицаЭтаповВход.Задача) <> Неопределено Тогда
				НоваяСтрока = РезультатФункции.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекТаблицаЭтаповВход);
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	Иначе
		РезультатФункции = ТаблицаЭтаповВход;		// Список для отбора пустой. Не выполняем отбор.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Возвращает таблицу этапов с ответственными по объекту согласования ОбъектСогласованияВход.
Функция ОтветственныеПоОбъектуСогласования(ОбъектСогласованияВход) Экспорт
	РезультатФункции = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЭкземплярПроцесса.Ссылка КАК ЭкземплярПроцесса,
	|	ЭкземплярПроцесса.КлючевойОбъектПроцесса КАК КлючевойОбъектПроцесса
	|ПОМЕСТИТЬ ВТ_ЭкземплярПроцесса
	|ИЗ
	|	Документ.ЭкземплярПроцесса КАК ЭкземплярПроцесса
	|ГДЕ
	|	ЭкземплярПроцесса.КлючевойОбъектПроцесса В(&КлючевойОбъектПроцесса)
	|	И НЕ ЭкземплярПроцесса.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВыполнениеПроцессов.ДокументПроцесса КАК ДокументПроцесса,
	|	ВыполнениеПроцессов.ЭтапПроцесса КАК ЭтапПроцесса,
	|	ЭкземплярПроцессаДополнительныеСогласующие.Пользователь КАК Пользователь,
	|	ЛОЖЬ КАК ДопСогласование,
	|	ВыполнениеПроцессов.ЭтапПроцесса.УтверждающиеИмеютПравоРедактирования КАК ПравоРедактирования,
	|	ВыполнениеПроцессов.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_Пользователи
	|ИЗ
	|	Документ.ЭкземплярПроцесса.ДополнительныеСогласующие КАК ЭкземплярПроцессаДополнительныеСогласующие
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВыполнениеПроцессов КАК ВыполнениеПроцессов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЭкземплярПроцесса КАК ВТ_ЭкземплярПроцесса
	|			ПО ВыполнениеПроцессов.ДокументПроцесса = ВТ_ЭкземплярПроцесса.ЭкземплярПроцесса
	|		ПО ЭкземплярПроцессаДополнительныеСогласующие.Ссылка = ВыполнениеПроцессов.ДокументПроцесса
	|			И ЭкземплярПроцессаДополнительныеСогласующие.Этап = ВыполнениеПроцессов.ЭтапПроцесса
	|ГДЕ
	|	ВыполнениеПроцессов.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.ВОбработке)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВизаДополнительныхСогласующих.ЭкземплярПроцесса,
	|	ВизаДополнительныхСогласующих.ЭтапПроцесса,
	|	ВизаДополнительныхСогласующих.Согласующий,
	|	ИСТИНА,
	|	ВизаДополнительныхСогласующих.ЭтапПроцесса.УтверждающиеИмеютПравоРедактирования,
	|	ВыполнениеПроцессов.Организация
	|ИЗ
	|	ВТ_ЭкземплярПроцесса КАК ВТ_ЭкземплярПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВизаДополнительныхСогласующих КАК ВизаДополнительныхСогласующих
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВыполнениеПроцессов КАК ВыполнениеПроцессов
	|			ПО (ВыполнениеПроцессов.ДокументПроцесса = ВизаДополнительныхСогласующих.ЭкземплярПроцесса)
	|				И (ВыполнениеПроцессов.ЭтапПроцесса = ВизаДополнительныхСогласующих.ЭтапПроцесса)
	|				И ВизаДополнительныхСогласующих.АрхивнаяЗапись = Ложь
	|				И ВизаДополнительныхСогласующих.Виза = Ложь
	|		ПО ВТ_ЭкземплярПроцесса.ЭкземплярПроцесса = ВизаДополнительныхСогласующих.ЭкземплярПроцесса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_Пользователи.ДокументПроцесса КАК ДокументПроцесса,
	|	ВТ_Пользователи.ЭтапПроцесса КАК ЭтапПроцесса,
	|	ВТ_Пользователи.Пользователь КАК Пользователь,
	|	ВТ_Пользователи.ДопСогласование КАК ДопСогласование,
	|	ВТ_Пользователи.ПравоРедактирования КАК ПравоРедактирования,
	|	ВТ_Пользователи.Организация КАК Организация,
	|	ЕСТЬNULL(ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Задача, ЗНАЧЕНИЕ(Справочник.Задачи.ПустаяСсылка)) КАК Задача
	|ИЗ
	|	ВТ_Пользователи КАК ВТ_Пользователи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтложеннаяОбработкаЭтаповПроцессов.СрезПоследних КАК ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних
	|		ПО ВТ_Пользователи.ДокументПроцесса = ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ДокументПроцесса
	|			И ВТ_Пользователи.ЭтапПроцесса = ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ЭтапПроцесса
	|			И (ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ВидДействия В (ЗНАЧЕНИЕ(Перечисление.СобытияОтложеннойОбработкиПроцессов.ОбработкаЭтапаСогласования), ЗНАЧЕНИЕ(Перечисление.СобытияОтложеннойОбработкиПроцессов.ДополнительноеСогласованиеЭтапа)))
	|			И (ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Выполнено = ЛОЖЬ)";
	Запрос.УстановитьПараметр("КлючевойОбъектПроцесса", ОбъектСогласованияВход);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
КонецФункции		// ОтветственныеПоОбъектуСогласования()	
	
Функция ЭтапыСогласованияДляПользователя(ОбъектСогласования, Пользователь, ДобавлятьЗаместителейВход = Истина, СписокЗадачВход = Неопределено) Экспорт
	// Инициализация.
	ПустаяТаблица = Новый ТаблицаЗначений;
	ПустаяТаблица.Колонки.Добавить("ДокументПроцесса");
	ПустаяТаблица.Колонки.Добавить("ЭтапПроцесса");
	ПустаяТаблица.Колонки.Добавить("Пользователь");
	ПустаяТаблица.Колонки.Добавить("ДопСогласование");
	ПустаяТаблица.Колонки.Добавить("ПравоРедактирования");
	ПустаяТаблица.Колонки.Добавить("Организация");
	ПустаяТаблица.Колонки.Добавить("Задача");
	РезультатФункции = ПустаяТаблица;
	// Получение таблицы отвественных.
	ТаблицаОтветственных = ОтветственныеПоОбъектуСогласования(ОбъектСогласования);
	Если ТаблицаОтветственных.Количество() > 0 Тогда
		// Получение организации и экземпляра процесса.
		ПерваяСтрокаОтветственные = ТаблицаОтветственных[0];
		ЭкземплярПроцесса = ПерваяСтрокаОтветственные.ДокументПроцесса;
		ОрганизацияЭкземпляра = ЭкземплярПроцесса.Организация;
		ОрганизацияРоли = ОпределитьОрганизациюРоли(ОбъектСогласования, ОрганизацияЭкземпляра);
		// Расшифровка ролей и расширенного согласования.
		СтрокаПредставление = "";
		ТаблицаРасшифровка = РасшифроватьРолиОтветственных(ЭкземплярПроцесса, ТаблицаОтветственных, ОрганизацияРоли, СтрокаПредставление);
		// Добавление заместителей.
		СписокУтверждающих = Новый СписокЗначений();
		СписокУтверждающих.Добавить(Пользователь);
		Если ДобавлятьЗаместителейВход Тогда
			ПолучитьЗамещаемых(Пользователь, СписокУтверждающих);
		Иначе
			// Оставляем список.
		КонецЕсли;
		// Отбор полученной таблицы по списку утверждающих.
		РезультатФункции = ТаблицаРасшифровка.СкопироватьКолонки();
		Для Каждого ТекТаблицаРасшифровка Из ТаблицаРасшифровка Цикл
			НайденныйЭлемент = СписокУтверждающих.НайтиПоЗначению(ТекТаблицаРасшифровка.Пользователь);
			Если НайденныйЭлемент <> Неопределено Тогда
				НоваяСтрока = РезультатФункции.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекТаблицаРасшифровка);
			Иначе
				// Пропускаем строку.
			КонецЕсли;
		КонецЦикла;	
		// Отбор по задачам.
		РезультатФункции = ОтобратьЭтапыПоЗадачам(РезультатФункции, СписокЗадачВход);
	Иначе
		РезультатФункции = ПустаяТаблица;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

Функция ПолучитьИсполнителяСУчетомЗамещения(Пользователь) Экспорт
	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Заместители.ЗамещаемыйПользователь
		|ИЗ
		|	РегистрСведений.Заместители КАК Заместители
		|ГДЕ
		|	Заместители.Заместитель = &Заместитель";
		
		Запрос.УстановитьПараметр("Заместитель",Пользователь );
		
		Заместители = Запрос.Выполнить().Выгрузить();
				
		Если Заместители.Количество()=0 Тогда 
			Возврат Пользователь;	
		Иначе
			Возврат ПолучитьИсполнителяСУчетомЗамещения(Заместители[0].ЗамещаемыйПользователь);	
		КонецЕсли;
		
КонецФункции

// Рекурсивно получает заместителей пользователя Пользователь и добавлеят
// их в список значений СписокЗаместителей. Параметр ГлубинаРекурсии защищает
// от бесконечной рекурсии.
Процедура ПолучитьЗамещаемых(Пользователь, СписокЗаместителей, ГлубинаРекурсии = 0) Экспорт
	Если ГлубинаРекурсии > 1000 Тогда
		Возврат;		// Защита от бесконечной рекурсии.
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Заместители.ЗамещаемыйПользователь
	|ИЗ
	|	РегистрСведений.Заместители КАК Заместители
	|ГДЕ
	|	Заместители.Заместитель = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь",Пользователь );
	Заместители = Запрос.Выполнить().Выбрать();
	Пока Заместители.Следующий() Цикл 	
		Если СписокЗаместителей.НайтиПоЗначению(Заместители.ЗамещаемыйПользователь) = Неопределено Тогда
			СписокЗаместителей.Добавить(Заместители.ЗамещаемыйПользователь);
			ПолучитьЗамещаемых(Заместители.ЗамещаемыйПользователь, СписокЗаместителей, ГлубинаРекурсии + 1);	
		Иначе
			// Уже есть данный пользователь. Не добавляем.
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

// Рекурсивно добавляет в список СписокЗаместителей заместителей пользователя ПользовательВход.
// Параметр ГлубинаРекурсии защищает от бесконечной рекурсии.
Процедура ПолучитьЗаместителей(ПользовательВход, СписокЗаместителей, ГлубинаРекурсии = 0) Экспорт
	Если ГлубинаРекурсии > 1000 Тогда
		Возврат;		// Защита от бесконечной рекурсии.
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Заместители.Заместитель
	|ИЗ
	|	РегистрСведений.Заместители КАК Заместители
	|ГДЕ
	|	Заместители.ЗамещаемыйПользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", ПользовательВход);
	Заместители = Запрос.Выполнить().Выбрать();
	Пока Заместители.Следующий() Цикл 	
		Если СписокЗаместителей.НайтиПоЗначению(Заместители.Заместитель) = Неопределено Тогда
			СписокЗаместителей.Добавить(Заместители.Заместитель);
			ПолучитьЗаместителей(Заместители.Заместитель, СписокЗаместителей, ГлубинаРекурсии + 1);	
		Иначе
			// Уже есть данный пользователь. Не добавляем.
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

// Рекурсивно добавляет в массив МассивЗаместителей структуру, содержащую заместителей пользователя 
// ПользовательВход, а также самого пользователя. Параметр ГлубинаРекурсии защищает от бесконечной рекурсии.
Процедура ПолучитьЗаместителейСЗамещаемыми(ПользовательВход, МассивЗаместителей, ГлубинаРекурсии = 0) Экспорт
	Если ГлубинаРекурсии > 1000 Тогда
		Возврат;		// Защита от бесконечной рекурсии.
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Заместители.Заместитель
	|ИЗ
	|	РегистрСведений.Заместители КАК Заместители
	|ГДЕ
	|	Заместители.ЗамещаемыйПользователь = &Пользователь";
	Запрос.УстановитьПараметр("Пользователь", ПользовательВход);
	Заместители = Запрос.Выполнить().Выбрать();
	Пока Заместители.Следующий() Цикл 	
		Если МассивЗаместителей.Найти(Заместители.Заместитель) = Неопределено Тогда
			СтруктураЗаместителей = Новый Структура;
			СтруктураЗаместителей.Вставить("Заместитель", Заместители.Заместитель);
			СтруктураЗаместителей.Вставить("Замещаемый", ПользовательВход);
			МассивЗаместителей.Добавить(СтруктураЗаместителей);
			ПолучитьЗаместителейСЗамещаемыми(Заместители.Заместитель, МассивЗаместителей, ГлубинаРекурсии + 1);	
		Иначе
			// Уже есть данный пользователь. Не добавляем.
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Функция ПолучитьИсториюСогласованияЭтапа(ЭтапПроцесса, ОбъектСогласования) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыполнениеПроцессов.Период КАК Период,
	|	ВыполнениеПроцессов.СостояниеЭтапа КАК СостояниеСогласования,
	|	ВыполнениеПроцессов.Комментарий,
	|	ВыполнениеПроцессов.Автор
	|ИЗ
	|	РегистрСведений.ВыполнениеПроцессов.СрезПоследних(, ДокументПроцесса.КлючевойОбъектПроцесса = &ОбъектСогласования) КАК ВыполнениеПроцессов
	|ГДЕ
	|	ВыполнениеПроцессов.АрхивнаяЗапись = ИСТИНА
	|	И ВыполнениеПроцессов.ЭтапПроцесса.ТипЭтапа = ЗНАЧЕНИЕ(Перечисление.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	
	Запрос.УстановитьПараметр("ЭтапПроцесса", ЭтапПроцесса);
	Запрос.УстановитьПараметр("ОбъектСогласования",  ОбъектСогласования);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ВернутьПоследнегоПользователяСогласовавшегоОтчет(ЭкземплярОтчета) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыполнениеПроцессовСрезПоследних.Автор
	|ИЗ
	|	РегистрСведений.ВыполнениеПроцессов.СрезПоследних(
	|			,
	|			ДокументСогласования.ЭкземплярОтчета = &ЭкземплярОтчета
	|				И СостояниеСогласования = &СостояниеСогласования) КАК ВыполнениеПроцессовСрезПоследних";
	
	Запрос.УстановитьПараметр("СостояниеСогласования", Перечисления.СостоянияЭтаповУниверсальныхПроцессов.Завершен);
	Запрос.УстановитьПараметр("ЭкземплярОтчета"      , ЭкземплярОтчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Автор;
	Иначе
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТипСогласуемогоОбъекта(Ссылка) Экспорт
	
	Если ТипЗнч(Ссылка)=Тип("СправочникСсылка.РеестрыСогласуемыхОбъектов") Тогда
		
		Возврат Ссылка.ТипОбъектаСогласования;
		
	Иначе
		
		ИмяОбъекта=Ссылка.Метаданные().ПолноеИмя();	
		
		Если СтрНайти(ИмяОбъекта,"Справочник")>0 Тогда
			
			Возврат Справочники.СправочникиБД.НайтиПоНаименованию(СтрЗаменить(ИмяОбъекта,"Справочник.",""),Истина,,Справочники.ТипыБазДанных.ТекущаяИБ);
			
		ИначеЕсли СтрНайти(ИмяОбъекта,"Документ")>0 Тогда
			
			Возврат Справочники.ДокументыБД.НайтиПоНаименованию(СтрЗаменить(ИмяОбъекта,"Документ.",""),Истина,,Справочники.ТипыБазДанных.ТекущаяИБ);
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПолучитьТипСогласуемогоОбъекта() 

Функция УтвердитьЭтап(Форма, ТекущийЭтап, Ссылка=Неопределено, ПользовательВход = Неопределено, ЗамещениеВход = Ложь, 
	ИдентификаторФормыДляВыводаПротокола = Неопределено) Экспорт
	
	// Инициализация.
	ОбъектСсылка=?(Форма=Неопределено,Ссылка,Форма.Объект.Ссылка);
	НачатьТранзакцию();
	ЕстьОшибки = Ложь;
	СтатусТранзакции = "";
	ТипЭтапаРучнойПереход = Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход;
	ТипЭтапаУсловныйПереход = Перечисления.ТипыЭтаповУниверсальныхПроцессов.УсловныйПереход;
	Если ПользовательВход = Неопределено Тогда
		ПользовательРабочий = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	Иначе
		ПользовательРабочий = ПользовательВход;
	КонецЕсли;
	Если ТекущийЭтап.Свойство("КомментарийСистемы") Тогда
		КомментарийСистемы = ТекущийЭтап.КомментарийСистемы;
	Иначе
		КомментарийСистемы = "";
	КонецЕсли;
	ИдентификаторСообщения = Строка(Новый УникальныйИдентификатор);
	ДополнительныеПараметры = СформироватьДополнительныеПараметрыСогласования();
	ДополнительныеПараметры.Вставить("ИдентификаторСообщения", ИдентификаторСообщения);
	ДополнительныеПараметры.Вставить("ИдентификаторФормыДляВыводаПротокола", ИдентификаторФормыДляВыводаПротокола);
	Попытка
		// Запись статуса этапа.
		ВыполнитьПроцедурыПоСтатусам(ОбъектСсылка, ТекущийЭтап.Этап.СтатусСогласованияОбъекта, ТекущийЭтап.ДокументСогласования, ДополнительныеПараметры);
		// Переход по маршруту.
		Если ЗначениеЗаполнено(ТекущийЭтап.Организация) Тогда
			ТекОрганизация = ТекущийЭтап.Организация;
		Иначе
			ТекОрганизация = МодульОбработкиЭтаповПроцессовСерверУХ.ПолучитьОрганизациюОбъекта(ОбъектСсылка);
		КонецЕсли;    
		ВыбранныйЭтап = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ТекущийЭтап, "ВыбранныйЭтап", Неопределено);
		ЭтоЭтапПерехода = (ТекущийЭтап.Этап.ТипЭтапа = ТипЭтапаРучнойПереход) ИЛИ (ТекущийЭтап.Этап.ТипЭтапа = ТипЭтапаУсловныйПереход);
		
		Отказ = Ложь;
		Если (ЭтоЭтапПерехода) И (ЗначениеЗаполнено(ВыбранныйЭтап)) Тогда
			УтвердитьЭтапПроцесса(ТекущийЭтап.ДокументСогласования, ТекОрганизация, ТекущийЭтап.Этап, ТекущийЭтап.Комментарий, , ПользовательРабочий, ВыбранныйЭтап, ЗамещениеВход, КомментарийСистемы, , , ДополнительныеПараметры);
		Иначе
			УтвердитьЭтапПроцесса(ТекущийЭтап.ДокументСогласования, ТекОрганизация, ТекущийЭтап.Этап, ТекущийЭтап.Комментарий, , ПользовательРабочий, , ЗамещениеВход, КомментарийСистемы, , Отказ, ДополнительныеПараметры);
		КонецЕсли;
		
		Если Отказ Тогда
			ОтменитьТранзакцию();
			ОпределитьСостояние(Форма);
			Возврат "ОшибкаУтверждения";
		КонецЕсли;
		
		СтатусТранзакции = "ЭтапСогласован";
		Если ДокументПолностьюСогласован(ОбъектСсылка) Тогда
			СоответствиеСтатусов = МодульУправленияПроцессамиУХ.ПолучитьСоответствиеСостоянийОбъекта(ОбъектСсылка);
			ТекущийСтатусОбъекта = УправлениеПроцессамиСогласованияУХ.ВернутьСтатусОбъекта(ОбъектСсылка);
			РезультатУтверждения = ПриУтвержденииВсехЭтаповМаршрутаСогласования(ОбъектСсылка);				
			Если Не РезультатУтверждения Тогда
				ЕстьОшибки = Истина;
			Иначе
				// Утверждение осуществлено успешно.
			КонецЕсли;
			СтатусТранзакции = "ОбъектСогласован";			
			Если ТекущийСтатусОбъекта <> СоответствиеСтатусов["Утвержден"] Тогда
				РезультатПеревода = УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВСостояниеУтверждена(ОбъектСсылка, Истина, ТекущийЭтап.ДокументСогласования, ИдентификаторФормыДляВыводаПротокола, ДополнительныеПараметры);
				Если Не РезультатПеревода Тогда
					ЕстьОшибки = Истина;
				Иначе
					// Перевод осуществлён успешно.
				КонецЕсли;
			Иначе
				// Объект уже находится в этом статусе.
			КонецЕсли;
		КонецЕсли;
		// Уведомление пользователя.
		Если ТекущийЭтап.Этап.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Обработка Тогда
			ВидСобытияЭтапСогласован = Справочники.ВидыСобытийОповещений.ОбработкаВыполнена;
		ИначеЕсли ТекущийЭтап.Этап.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования Тогда	
			ВидСобытияЭтапСогласован = Справочники.ВидыСобытийОповещений.ЭтапСогласован;
		Иначе	
			ВидСобытияЭтапСогласован = Справочники.ВидыСобытийОповещений.ЭтапСогласован;
		КонецЕсли;	
		ОбъектСогласования = ТекущийЭтап.ДокументСогласования.КлючевойОбъектПроцесса;
		МассивРассылки = Новый Массив;
		МассивРассылки.Добавить(ПользовательРабочий);
		МодульУправленияОповещениямиУХ.ОповеститьПользователей(ВидСобытияЭтапСогласован, , ОбъектСогласования, МассивРассылки, ДополнительныеПараметры, );
		МодульУправленияОповещениямиУХ.СоздатьНапоминание(ВидСобытияЭтапСогласован, ОбъектСогласования, МассивРассылки);		
	Исключение
		ЕстьОшибки = Истина;		
		ТекстСообщения = НСтр("ru = 'Не удалось утвердить этап по %СсылкаНаОбъект%: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СсылкаНаОбъект%", Строка(ОбъектСсылка));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
	// Обработка транзакции.
	Если ЕстьОшибки Тогда
		ОтменитьТранзакцию();
		ОпределитьСостояние(Форма);
		Возврат "ОшибкаУтверждения";
	Иначе
		ЗафиксироватьТранзакцию();	
		ОпределитьСостояние(Форма);
		Возврат СтатусТранзакции;
	КонецЕсли;
КонецФункции

Функция УтвержденыВсеЭтапыВМассиве(МассивЭтаповВход, ДокументПроцессаВход)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(ВыполнениеПроцессовСрезПоследних.ДокументПроцесса, &ДокументПроцесса) КАК ДокументПроцесса,
		|	ЕСТЬNULL(ВыполнениеПроцессовСрезПоследних.СостояниеЭтапа, ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.НеАктивен)) КАК Состояние,
		|	ЭтапыУниверсальныхПроцессов.Ссылка КАК ЭтапПроцесса
		|ПОМЕСТИТЬ ВТ_СостоянияЭтапов
		|ИЗ
		|	Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапыУниверсальныхПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыполнениеПроцессов.СрезПоследних(, ДокументПроцесса = &ДокументПроцесса) КАК ВыполнениеПроцессовСрезПоследних
		|		ПО (ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса = ЭтапыУниверсальныхПроцессов.Ссылка)
		|ГДЕ
		|	ЭтапыУниверсальныхПроцессов.Ссылка В(&ЭтапПроцесса)
		|	И ЭтапыУниверсальныхПроцессов.ТипЭтапа В(&СогласуемыеЭтапы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ВизаДополнительныхСогласующих.ЭкземплярПроцесса, ЗНАЧЕНИЕ(Документ.ЭкземплярПроцесса.ПустаяСсылка)),
		|	ВЫБОР
		|		КОГДА ВизаДополнительныхСогласующих.АрхивнаяЗапись
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.Завершен)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.ВОбработке)
		|	КОНЕЦ,
		|	ЭтапыУниверсальныхПроцессов.Ссылка
		|ИЗ
		|	Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапыУниверсальныхПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВизаДополнительныхСогласующих КАК ВизаДополнительныхСогласующих
		|		ПО (ВизаДополнительныхСогласующих.ЭтапПроцесса = ЭтапыУниверсальныхПроцессов.Ссылка)
		|ГДЕ
		|	ЭтапыУниверсальныхПроцессов.Ссылка В(&ЭтапПроцесса)
		|	И ЭтапыУниверсальныхПроцессов.ТипЭтапа В(&СогласуемыеЭтапы)
		|	И ВизаДополнительныхСогласующих.ЭкземплярПроцесса = &ДокументПроцесса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_СостоянияЭтапов.ДокументПроцесса КАК ДокументПроцесса,
		|	ВТ_СостоянияЭтапов.Состояние КАК Состояние,
		|	ВТ_СостоянияЭтапов.ЭтапПроцесса КАК ЭтапПроцесса
		|ПОМЕСТИТЬ ВТ_ЭтапыМаршрута
		|ИЗ
		|	ВТ_СостоянияЭтапов КАК ВТ_СостоянияЭтапов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущийМаршрутПроцесса КАК ТекущийМаршрутПроцесса
		|		ПО ВТ_СостоянияЭтапов.ЭтапПроцесса = ТекущийМаршрутПроцесса.ЭтапПриемник
		|ГДЕ
		|	ТекущийМаршрутПроцесса.ДокументПроцесса = &ДокументПроцесса
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВТ_СостоянияЭтапов.ДокументПроцесса,
		|	ВТ_СостоянияЭтапов.Состояние,
		|	ВТ_СостоянияЭтапов.ЭтапПроцесса
		|ИЗ
		|	ВТ_СостоянияЭтапов КАК ВТ_СостоянияЭтапов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущийМаршрутПроцесса КАК ТекущийМаршрутПроцесса
		|		ПО ВТ_СостоянияЭтапов.ЭтапПроцесса = ТекущийМаршрутПроцесса.ЭтапИсточник
		|ГДЕ
		|	ТекущийМаршрутПроцесса.ДокументПроцесса = &ДокументПроцесса
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВТ_ЭтапыМаршрута.ДокументПроцесса КАК ДокументПроцесса,
		|	ВТ_ЭтапыМаршрута.Состояние КАК Состояние,
		|	ВТ_ЭтапыМаршрута.ЭтапПроцесса КАК ЭтапПроцесса
		|ИЗ
		|	ВТ_ЭтапыМаршрута КАК ВТ_ЭтапыМаршрута
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВТ_ЭтапыМаршрута.ДокументПроцесса.ШаблонПроцесса.ПриОтклоненииЭтапаВыполнятьПроцессДоКонца
		|				ТОГДА НЕ ВТ_ЭтапыМаршрута.Состояние В (ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.Завершен), ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.ЗавершенСОшибкой))
		|			ИНАЧЕ ВТ_ЭтапыМаршрута.Состояние <> ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.Завершен)
		|		КОНЕЦ";
	МассивСогласуемыхЭтапов = Новый Массив;
	МассивСогласуемыхЭтапов.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования);
	МассивСогласуемыхЭтапов.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.Обработка);
	МассивСогласуемыхЭтапов.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход);
	МассивСогласуемыхЭтапов.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.ДочернийМаршрут);
	МассивСогласуемыхЭтапов.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.Пауза);
	МассивСогласуемыхЭтапов.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЦиклПока);
	Запрос.УстановитьПараметр("ДокументПроцесса",	 ДокументПроцессаВход);
	Запрос.УстановитьПараметр("ЭтапПроцесса",		 МассивЭтаповВход);
	Запрос.УстановитьПараметр("СогласуемыеЭтапы",	 МассивСогласуемыхЭтапов);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Пустой();
	Возврат РезультатФункции;
КонецФункции

// Удаляет из массива МассивВход, куда перейдёт согласование, те этапы,
// которые не выполнены полностью
Функция ОчиститьМассивЭтаповПерехода(МассивВход, ДокументПроцессаВход)
	РезультатФункции = Новый Массив;
	Для Каждого ТекМассивВход Из МассивВход Цикл
		МассивПредшественников = УправлениеПроцессамиСогласованияУХПовтИсп.ПолучитьЭтапыПредшественники(ТекМассивВход, ДокументПроцессаВход, Ложь);
		
		ИндексВход = МассивПредшественников.Найти(ТекМассивВход);
		Если ИндексВход <> Неопределено тогда
			МассивПредшественников.Удалить(ИндексВход);
		КонецЕсли;
		
		Если УтвержденыВсеЭтапыВМассиве(МассивПредшественников, ДокументПроцессаВход) Тогда
			РезультатФункции.Добавить(ТекМассивВход);
		Иначе
			// Не все этапы-предшественники утверждены. Не добавляем.
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Возвращает типы этапов, не трубеющих участия пользователя.
Функция ТипыЭтаповБезУчастияПользователя() Экспорт
	РезультатФункции = Новый Массив;
	РезультатФункции.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.УсловныйПереход);
	РезультатФункции.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.Оповещение);
	РезультатФункции.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.Обработка);
	РезультатФункции.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЦиклПока);
	РезультатФункции.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.Пауза);
	Возврат РезультатФункции;
КонецФункции		// ЭтапыБезУчастияПользователя()

// Определяет, есть ли по процессу ДокументПроцессаВход этапы со статусом Отклонён.
Функция ЕстьОтклоненныеЭтапыПоПроцессуСогласования(ДокументПроцессаВход) Экспорт
	РезультатФункции = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВыполнениеПроцессов.ДокументПроцесса КАК ДокументПроцесса,
	|	ВыполнениеПроцессов.ЭтапПроцесса КАК ЭтапПроцесса,
	|	ВыполнениеПроцессов.СостояниеЭтапа КАК СостояниеЭтапа
	|ИЗ
	|	РегистрСведений.ВыполнениеПроцессов КАК ВыполнениеПроцессов
	|ГДЕ
	|	ВыполнениеПроцессов.ДокументПроцесса = &ДокументПроцесса
	|	И ВыполнениеПроцессов.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.ЗавершенСОшибкой)";
	Запрос.УстановитьПараметр("ДокументПроцесса", ДокументПроцессаВход);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = (НЕ РезультатЗапроса.Пустой());
	Возврат РезультатФункции;
КонецФункции		// ЕстьОтклоненныеЭтапыПоПроцессуСогласования()

Функция ПерейтиНаСледующиеЭтапы(ДокументПроцесса, Организация = Неопределено, ЭтапПроцесса, 
	ТаблицаЗначенийТекущихПараметров = Неопределено, ТаблицаЗначенийПараметровЭтапа = Неопределено, 
	Отказ = Ложь, ДополнительныеПараметры = Неопределено) Экспорт
	// Инициализация.
	
	Если ДополнительныеПараметры <> Неопределено тогда
		ГлубинаРекурсииЭтапов = Неопределено;
		
		Если ДополнительныеПараметры.Свойство("ГлубинаРекурсииЭтапов", ГлубинаРекурсииЭтапов) тогда
			ГлубинаРекурсии = ГлубинаРекурсииЭтапов.Получить(ЭтапПроцесса);
			
			Если ГлубинаРекурсии = Неопределено тогда
				ГлубинаРекурсии = 0;
			КонецЕсли;
			
			ГлубинаРекурсии = ГлубинаРекурсии + 1;
			ГлубинаРекурсииЭтапов.Вставить(ЭтапПроцесса, ГлубинаРекурсии);
			ДополнительныеПараметры.Вставить("ГлубинаРекурсииЭтапов", ГлубинаРекурсииЭтапов);
			
			Если ГлубинаРекурсии > 1 тогда
				
				ИдентификаторФормыДляВыводаПротокола = Неопределено;
				Если ДополнительныеПараметры.Свойство("ИдентификаторФормыДляВыводаПротокола", ИдентификаторФормыДляВыводаПротокола) тогда	
					ТекстСообщения = НСтр("ru = 'При переходе на этап ""%Этап%"" обнаружен бесконечный цикл'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(ЭтапПроцесса));
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, Отказ,,, ИдентификаторФормыДляВыводаПротокола);
				Иначе			
					Отказ = Истина;
				КонецЕсли;
				
				Возврат Ложь;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ДополнительныеПараметры = ИнициализироватьДополнительныеПараметрыСогласования(ДополнительныеПараметры);
	ТипЭтапаПроцесса = ЭтапПроцесса.ТипЭтапа;
	КлючевойОбъект = ДокументПроцесса.КлючевойОбъектПроцесса;
	// Получим таблицы параметров.
	Если ТаблицаЗначенийТекущихПараметров = Неопределено ИЛИ ТаблицаЗначенийПараметровЭтапа = Неопределено Тогда
		ТаблицаЗначенийТекущихПараметров = ДокументПроцесса.ПараметрыПроцесса.Выгрузить();
		ТаблицаЗначенийПараметровЭтапа =   ЭтапПроцесса.ЗначенияПараметров.Выгрузить();
	Иначе
		// Таблицы получены. Не требуется новое получение.
	КонецЕсли;
	ТребуетсяУчастияПользователя = (ТипыЭтаповБезУчастияПользователя().Найти(ТипЭтапаПроцесса) = Неопределено);
	Если НЕ ТребуетсяУчастияПользователя Тогда
		Попытка
			ПостроитьМаршрутПроцесса(ДокументПроцесса, КлючевойОбъект, ЭтапПроцесса, , Истина, ТаблицаЗначенийТекущихПараметров, 
				ТаблицаЗначенийПараметровЭтапа, , Отказ);
		Исключение
			ТекстСообщения = НСтр("ru = 'Произошли ошибки при построении маршрута для этапа %Этап% : %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(ЭтапПроцесса));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецПопытки;
	КонецЕсли;
	
	МассивЭтапов = ПолучитьЭтапыПоследователи(ДокументПроцесса, ЭтапПроцесса);
	
	НужнаДальнейшаяОбработка = Истина;
	
	// Обработка ошибки маршрутизации для условного перехода.
	ЭтоУсловныйПереход = (ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.УсловныйПереход);
	НетПоследователей = (МассивЭтапов.Количество() = 0);
	Если ЭтоУсловныйПереход И НетПоследователей Тогда
		АдминистраторПроцесса = ДокументПроцесса.ШаблонПроцесса.АдминистраторПроцесса;
		Если ЗначениеЗаполнено(АдминистраторПроцесса) Тогда
			// Отправка оповещения администратору процесса.
			ВидСобытияОшибкаУсловногоПерехода = Справочники.ВидыСобытийОповещений.ОшибкаУсловногоПерехода;
			МассивОповещаемыхОшибка = Новый Массив;
			МассивОповещаемыхОшибка.Добавить(АдминистраторПроцесса);
			СтруктураДопПараметры = Новый Структура;
			СтруктураДопПараметры.Вставить("ЭтапПроцесса", ЭтапПроцесса);
			МодульУправленияОповещениямиУХ.ОповеститьПользователей(ВидСобытияОшибкаУсловногоПерехода, , КлючевойОбъект, МассивОповещаемыхОшибка, СтруктураДопПараметры);
			// Задание ответственному за маршрут.
			МассивПолучателейЗадачи = Новый Массив;
			СтруктураПолучателейЗадачи = Новый Структура;
			СтруктураПолучателейЗадачи.Вставить("Пользователь", АдминистраторПроцесса);
			СтруктураПолучателейЗадачи.Вставить("Организация", Организация);
			МассивПолучателейЗадачи.Добавить(СтруктураПолучателейЗадачи);
			МодульРегламентныхЗаданийУХ.ДобавитьЗаданиеНаТаймаутЭтапа(ДокументПроцесса, ЭтапПроцесса);
			МодульРегламентныхЗаданийУХ.ДобавитьЗаданиеНаЭтап(ДокументПроцесса, ЭтапПроцесса, МассивПолучателейЗадачи, ДополнительныеПараметры);
			ТаблицаЗначенийТекущихПараметров = ДокументПроцесса.ПараметрыПроцесса.Выгрузить();
			ПостроитьМаршрутПроцесса(ДокументПроцесса, КлючевойОбъект, , Истина, Истина, ТаблицаЗначенийТекущихПараметров, , Истина, Отказ);
			НужнаДальнейшаяОбработка = Ложь;
		Иначе
			ТекстСообщения = НСтр("ru = 'Не найден ответственный по этапу %ЭтапПроцесса%. Обратитесь к администратору.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭтапПроцесса%", Строка(ЭтапПроцесса));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Выполняем далее.
	КонецЕсли;
	
	МассивЭтапов = ОчиститьМассивЭтаповПерехода(МассивЭтапов, ДокументПроцесса);
	Для Каждого Этап Из МассивЭтапов Цикл
		
		ВспомогательныеТипыЭтапов = Новый Массив();
		
		ВспомогательныеТипыЭтапов.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.УсловныйПереход);
		ВспомогательныеТипыЭтапов.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.Автоутверждение);
		ВспомогательныеТипыЭтапов.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.Автоотклонение);
		ВспомогательныеТипыЭтапов.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.Оповещение);
		ВспомогательныеТипыЭтапов.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЦиклПока);
		ВспомогательныеТипыЭтапов.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.Пауза);
		ВспомогательныеТипыЭтапов.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход);
		
		ТекущийЭтап = неопределено;
		
		Если ВспомогательныеТипыЭтапов.Найти(ЭтапПроцесса.ТипЭтапа) <> Неопределено тогда
			
			МассивПредшественниковЭтапаПроцесса = УправлениеПроцессамиСогласованияУХПовтИсп.ПолучитьЭтапыПредшественники(ЭтапПроцесса, ДокументПроцесса);
			
			Для каждого ПредшествующийЭтап Из МассивПредшественниковЭтапаПроцесса Цикл
				Если ВспомогательныеТипыЭтапов.Найти(ПредшествующийЭтап.ТипЭтапа) = Неопределено тогда
					ТекущийЭтап = ПредшествующийЭтап;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		Иначе	
			ТекущийЭтап = ЭтапПроцесса;
		КонецЕсли;
		
		Если ТекущийЭтап <> неопределено тогда
			Если ДополнительныеПараметры = неопределено тогда
				ДополнительныеПараметры = Новый Структура("ТекущийЭтап", ТекущийЭтап);
			Иначе
				ДополнительныеПараметры.Вставить("ТекущийЭтап", ТекущийЭтап);
			КонецЕсли;
		КонецЕсли;
		
		// Если после выполнения процедуры в параметр НужнаДальнейшаяОбработка возвращается Истина, 
		//то было произведено автоматическое утверждение/отклонение отчета. Маршрут согласования завершен.
		ИнициироватьСогласованиеЭтапа(ДокументПроцесса, Организация, Этап, НужнаДальнейшаяОбработка, Отказ, ДополнительныеПараметры);
		
		Если НЕ НужнаДальнейшаяОбработка Тогда
			Прервать;
		КонецЕсли;
			
	КонецЦикла;
	
	Если НетЭтаповВОбработкеПоПроцессуСогласования(ДокументПроцесса) Тогда
		// Установка состояния процесса. 
		Если НЕ НужнаДальнейшаяОбработка Тогда
			ВыполнятьПроцессДоКонца = ДокументПроцесса.ШаблонПроцесса.ПриОтклоненииЭтапаВыполнятьПроцессДоКонца;
			Если ВыполнятьПроцессДоКонца Тогда
				// Выбор нового состояния.
				ЕстьОтклоненныеЭтапы = ЕстьОтклоненныеЭтапыПоПроцессуСогласования(ДокументПроцесса);
				Если ЕстьОтклоненныеЭтапы Тогда 
					ОстановитьПроцесс(ДокументПроцесса);
					УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВСостояниеОтклонена(КлючевойОбъект, , Истина, ДокументПроцесса);
				Иначе
					УтвердитьДокумент(ДокументПроцесса, , ЭтапПроцесса);
				КонецЕсли;

				// Отмена проведения исходного объекта согласования.

				Если ВозможноПроведениеОбъекта(КлючевойОбъект) Тогда
					ОбъектСогласования = КлючевойОбъект.ПолучитьОбъект();
					Если ЕстьОтклоненныеЭтапы Тогда
						ОбъектСогласования.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					Иначе
						// Не требуется отмена проведения.
					КонецЕсли;
				Иначе
					// Документ не проводится. Распроведение не требуется.
				КонецЕсли;
			Иначе
				// Не требуется специфическая обработка.
			КонецЕсли;
		Иначе
			Если НЕ ДокументПроцесса.ШаблонПроцесса.ПриОтклоненииЭтапаВыполнятьПроцессДоКонца Тогда  
				ДокументПроцессаОбъект = ДокументПроцесса.ПолучитьОбъект();
				ДокументПроцессаОбъект.СостояниеВыполнения = Перечисления.СостоянияПроцесса.Завершен;
				ДокументПроцессаОбъект.Записать();
			Иначе
				// Случай рассмотрен выше.
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если ДокументПроцесса.СостояниеВыполнения = Перечисления.СостоянияПроцесса.Завершен тогда
			ДокументПроцессаОбъект = ДокументПроцесса.ПолучитьОбъект();
			ДокументПроцессаОбъект.СостояниеВыполнения = Перечисления.СостоянияПроцесса.Вработе;
			ДокументПроцессаОбъект.Записать();
		КонецЕсли;
	КонецЕсли;
	Возврат НужнаДальнейшаяОбработка;
КонецФункции

// Возвращает текст комментарий системы для замещения пользователя ПользовательВход.
Функция ПолучитьКомментарийСистемыЗамещаемого(ПользовательВход) Экспорт
	ТекстЗамещаемого = НСтр("ru = 'Согласование за %Замещаемый%'");
	ТекстЗамещаемого = СтрЗаменить(ТекстЗамещаемого, "%Замещаемый%", Строка(ПользовательВход));
	Возврат ТекстЗамещаемого;	
КонецФункции

// Возвращает текст комментария, дополненный при необходимости текстом о замещении пользователем ПользовательВход
// по ДокументПроцессаВход и ЭтапПроцессаВход.
Функция ДополнитьКомментарийЗамещающего(ДокументПроцессаВход, ЭтапПроцессаВход, ПользовательВход, КомментарийВход) Экспорт
	РезультатФункции = КомментарийВход;
	ТекПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	Если (ТекПользователь <> ПользовательВход) И (ЗначениеЗаполнено(ПользовательВход)) Тогда
		Если НЕ ПользовательВход.Служебный Тогда
			ТекстЗамещаемого = ПолучитьКомментарийСистемыЗамещаемого(ПользовательВход);
			Если СокрЛП(КомментарийВход) <> "" Тогда
				РезультатФункции = ТекстЗамещаемого + ": " + КомментарийВход;
			Иначе
				РезультатФункции = ТекстЗамещаемого;
			КонецЕсли;
		Иначе
			РезультатФункции = КомментарийВход;
		КонецЕсли;
	Иначе
		РезультатФункции = КомментарийВход;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Возвращает копию массива этапов МассивВход, содержащую только те этапы, которые
// были пройдены в ходе согласования по документу ДокументПроцессаВход.
Функция ОчиститьНепройденныеЭтапы(ДокументПроцессаВход, МассивВход) Экспорт
	РезультатФункции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТекущийМаршрутПроцесса.ДокументПроцесса,
		|	ТекущийМаршрутПроцесса.ЭтапИсточник КАК Этап
		|ИЗ
		|	РегистрСведений.ТекущийМаршрутПроцесса КАК ТекущийМаршрутПроцесса
		|ГДЕ
		|	ТекущийМаршрутПроцесса.ДокументПроцесса = &ДокументПроцесса
		|	И ТекущийМаршрутПроцесса.ЭтапИсточник В(&ЭтапыВход)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТекущийМаршрутПроцесса.ДокументПроцесса,
		|	ТекущийМаршрутПроцесса.ЭтапПриемник
		|ИЗ
		|	РегистрСведений.ТекущийМаршрутПроцесса КАК ТекущийМаршрутПроцесса
		|ГДЕ
		|	ТекущийМаршрутПроцесса.ДокументПроцесса = &ДокументПроцесса
		|	И ТекущийМаршрутПроцесса.ЭтапПриемник В(&ЭтапыВход)";
	Запрос.УстановитьПараметр("ДокументПроцесса", ДокументПроцессаВход);
	Запрос.УстановитьПараметр("ЭтапыВход", МассивВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатФункции.Добавить(ВыборкаДетальныеЗаписи.Этап);
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

Функция УтвердитьЭтапПроцесса(ДокументПроцесса, Организация = Неопределено, ЭтапПроцесса, Комментарий, 
	ИнициацияПроцесса = Ложь, ПользовательВход = Неопределено, ВыбранныйЭтапВход = Неопределено, ЗамещениеВход = Ложь, 
	КомментарийСистемыВход = "", ИдентификаторФормыДляВыводаПротокола = Неопределено, Отказ = Ложь, ДополнительныеПараметры = Неопределено) Экспорт
	// Инициализация.
	ДополнительныеПараметры = ИнициализироватьДополнительныеПараметрыСогласования(ДополнительныеПараметры);
	ИдентификаторСообщенияРабочий = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ИдентификаторСообщения", "");	
	// Получение параметров.	
	ТаблицаЗначенийТекущихПараметров = ДокументПроцесса.ПараметрыПроцесса.Выгрузить();
	ТаблицаЗначенийПараметровЭтапа =   ЭтапПроцесса.ЗначенияПараметров.Выгрузить();
	Если ПользовательВход = Неопределено Тогда
		ПользовательРабочий = Пользователи.ТекущийПользователь();
	Иначе
		ПользовательРабочий = ПользовательВход;
	КонецЕсли;
	
	ИнициализироватьСледующий = Ложь;
	Если ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЦиклПока Тогда
		ПостроитьМаршрутПроцесса(ДокументПроцесса, ДокументПроцесса.КлючевойОбъектПроцесса, ЭтапПроцесса, , ИнициализироватьСледующий, ТаблицаЗначенийТекущихПараметров, ТаблицаЗначенийПараметровЭтапа);
		Если НЕ ИнициализироватьСледующий Тогда
			Возврат Ложь;
		КонецЕсли;	
	КонецЕсли;
	// Удаление предыдущих данных по этапу.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВыполнениеПроцессовСрезПоследних.Период КАК Период,
	|	ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса КАК ЭтапПроцесса,
	|	ВыполнениеПроцессовСрезПоследних.ДокументПроцесса КАК ДокументПроцесса,
	|	ВыполнениеПроцессовСрезПоследних.ДатаНачала КАК ДатаНачала
	|ИЗ
	|	РегистрСведений.ВыполнениеПроцессов.СрезПоследних(
	|			,
	|			ДокументПроцесса = &ДокументПроцесса
	|				И ЭтапПроцесса = &ЭтапПроцесса) КАК ВыполнениеПроцессовСрезПоследних";
	Запрос.УстановитьПараметр("ДокументПроцесса", ДокументПроцесса);
	Запрос.УстановитьПараметр("ЭтапПроцесса"    , ЭтапПроцесса);
	Выборка = Запрос.Выполнить().Выбрать();
	ПредДатаНачала = Дата(1, 1, 1);
	Если Выборка.Следующий() Тогда
		ПредДатаНачала = Выборка.ДатаНачала;
		МенеджерЗаписи = РегистрыСведений.ВыполнениеПроцессов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
		МенеджерЗаписи.Прочитать();
		Если МенеджерЗаписи.Выбран() Тогда
			МенеджерЗаписи.Удалить();
		КонецЕсли;
	КонецЕсли;
	// Создание новых записей и установка статуса Архивная.
	НоваяЗапись = РегистрыСведений.ВыполнениеПроцессов.СоздатьМенеджерЗаписи();
	Если Организация <> Неопределено Тогда
		НоваяЗапись.Организация		 = Организация;
	КонецЕсли;
	КомментарийДополненный	= ДополнитьКомментарийЗамещающего(ДокументПроцесса, ЭтапПроцесса, ПользовательРабочий, Комментарий);
	КомментарийСистемы = КомментарийСистемыВход + ДополнитьКомментарийЗамещающего(ДокументПроцесса, ЭтапПроцесса, ПользовательРабочий, "");
	НоваяЗапись.ЭтапПроцесса		 = ЭтапПроцесса;
	НоваяЗапись.ДокументПроцесса	 = ДокументПроцесса;
	НоваяЗапись.Автор				 = ПользовательРабочий;
	НоваяЗапись.АрхивнаяЗапись		 = Истина;
	НоваяЗапись.СостояниеЭтапа		 = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.Завершен;
	НоваяЗапись.Период				 = ОбщегоНазначенияСерверУХ.ПолучитьОтметкуПоОбъекту(ДокументПроцесса);
	НоваяЗапись.ДатаНачала			 = ПредДатаНачала;
	НоваяЗапись.ДатаОкончания		 = ТекущаяДатаСеанса();
	НоваяЗапись.Комментарий			 = КомментарийДополненный;
	Если ТипЗнч(ДокументПроцесса.КлючевойОбъектПроцесса) = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
		НоваяЗапись.ОписаниеВерсии         = УправлениеОтчетамиУХ.ВернутьТекущееОписаниеВерсииДляЭкземпляраОтчета(ДокументПроцесса.КлючевойОбъектПроцесса);
	КонецЕсли;
	НоваяЗапись.Записать(Истина);
	// Обновление истории согласования и остановка заданий.
	Если ЗамещениеВход Тогда
		ПользовательИстория = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	Иначе
		ПользовательИстория = ПользовательВход;
	КонецЕсли;
	Если ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования  Тогда
		ДобавитьЗаписьВлогПроцесса(ДокументПроцесса, ЭтапПроцесса, ПользовательИстория, Комментарий, Перечисления.ВидыОповещенийПользователейУХ.ЭтапСогласован, КомментарийСистемы, ИдентификаторСообщенияРабочий);
		МодульРегламентныхЗаданийУХ.СброситьЗаданияПоЭтапуПроцесса(ДокументПроцесса, ЭтапПроцесса);
	ИначеЕсли ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Обработка Тогда
		ДобавитьЗаписьВлогПроцесса(ДокументПроцесса, ЭтапПроцесса, ПользовательИстория, Комментарий, Перечисления.ВидыОповещенийПользователейУХ.ЭтапСогласован, КомментарийСистемы, ИдентификаторСообщенияРабочий);
	ИначеЕсли ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход Тогда
		ТекстВыбораЭтапа = НСтр("ru = 'Выбран этап согласования %ЭтапВход%'");
		ТекстВыбораЭтапа = СтрЗаменить(ТекстВыбораЭтапа, "%ЭтапВход%", Строка(ВыбранныйЭтапВход));
		ДобавитьЗаписьВлогПроцесса(ДокументПроцесса, ЭтапПроцесса, ПользовательИстория, Комментарий, Перечисления.ВидыОповещенийПользователейУХ.ВыбранСледующийЭтап, ТекстВыбораЭтапа, ИдентификаторСообщенияРабочий);
	ИначеЕсли ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Пауза Тогда	
		МодульРегламентныхЗаданийУХ.СброситьЗаданияПоЭтапуПроцесса(ДокументПроцесса, ЭтапПроцесса);
	ИначеЕсли ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЦиклПока Тогда	
		МодульРегламентныхЗаданийУХ.СброситьЗаданияПоЭтапуПроцесса(ДокументПроцесса, ЭтапПроцесса);	
	КонецЕсли;
	// Проверим возможность перехода на следующие этапы.
	ТекЗавершеноОсновноеСогласование = ЗавершеноОсновноеСогласование(ДокументПроцесса, ЭтапПроцесса);
	ТекЗавершеноДополнительноеСогласование = НЕ МодульСогласованияДокументовУХ.ЕстьАктивноеДопСогласованиеПоЭтапу(ДокументПроцесса, ЭтапПроцесса);
	НужнаДальнейшаяОбработка = Ложь;
	Если ТекЗавершеноОсновноеСогласование И ТекЗавершеноДополнительноеСогласование Тогда
		ЭтоЭтапПерехода = (ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход) ИЛИ (ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.УсловныйПереход);
		ЭтоЭтапАвтоЗавершения = (ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Автоутверждение) ИЛИ (ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Автоотклонение);
		Если (ЭтоЭтапПерехода) И (ЗначениеЗаполнено(ВыбранныйЭтапВход)) Тогда
			ИнициироватьСогласованиеЭтапа(ДокументПроцесса, Организация, ВыбранныйЭтапВход, НужнаДальнейшаяОбработка);
		ИначеЕсли ЭтоЭтапАвтоЗавершения Тогда
			НужнаДальнейшаяОбработка = Ложь;
		Иначе 	
			НужнаДальнейшаяОбработка = ПерейтиНаСледующиеЭтапы(ДокументПроцесса, Организация, ЭтапПроцесса, ТаблицаЗначенийТекущихПараметров, ТаблицаЗначенийПараметровЭтапа, Отказ, ДополнительныеПараметры);
		КонецЕсли;
	Иначе
		НужнаДальнейшаяОбработка = Истина;
	КонецЕсли;
	Возврат НужнаДальнейшаяОбработка;
	
КонецФункции

Функция ОтклонитьЭтап(Форма,ТекущийЭтап,Ссылка=Неопределено, ПользовательВход = Неопределено, ЗамещениеВход = Ложь) Экспорт
	ОбъектСсылка=?(Форма=Неопределено,Ссылка,Форма.Объект.Ссылка);
	
	НачатьТранзакцию();
	
	Попытка
		КомментарийДополненный	= ДополнитьКомментарийЗамещающего(ТекущийЭтап.ДокументСогласования, ТекущийЭтап.Этап, ПользовательВход, ТекущийЭтап.Комментарий);
		КомментарийСистемы	= ПолучитьКомментарийСистемыЗамещаемого(ПользовательВход);
		Если ЗначениеЗаполнено(ТекущийЭтап.Организация) Тогда
			ТекОрганизация = ТекущийЭтап.Организация;
		Иначе
			ТекОрганизация = МодульОбработкиЭтаповПроцессовСерверУХ.ПолучитьОрганизациюОбъекта(ОбъектСсылка);
		КонецЕсли;
		РезультатОтклонения =  ОтклонитьЭтапСогласования(ТекущийЭтап.ДокументСогласования, ТекОрганизация, ТекущийЭтап.Этап, КомментарийДополненный, ПользовательВход,, Истина);
		Если РезультатОтклонения Тогда
			Если ЗамещениеВход Тогда
				ТекПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
				ДобавитьЗаписьВлогПроцесса(ТекущийЭтап.ДокументСогласования, ТекущийЭтап.Этап, ТекПользователь, ТекущийЭтап.Комментарий, Перечисления.ВидыОповещенийПользователейУХ.ЭтапОтклонен, КомментарийСистемы);
			Иначе
				ДобавитьЗаписьВлогПроцесса(ТекущийЭтап.ДокументСогласования, ТекущийЭтап.Этап, ПользовательВход, ТекущийЭтап.Комментарий, Перечисления.ВидыОповещенийПользователейУХ.ЭтапОтклонен, КомментарийСистемы);
			КонецЕсли;
			
			МодульРегламентныхЗаданийУХ.СброситьЗаданияПоЭтапуПроцесса(ТекущийЭтап.ДокументСогласования,  ТекущийЭтап.Этап);
			
			Если НЕ ЗапущенПроцессСогласования(ОбъектСсылка) Тогда
				
				УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВСостояниеОтклонена(ОбъектСсылка, , , ТекущийЭтап.ДокументСогласования);
				ДобавитьЗаписьВлогПроцесса(ТекущийЭтап.ДокументСогласования, ТекущийЭтап.Этап,,НСтр("ru = 'Объект переведен в статус Отклонен'"),Перечисления.ВидыОповещенийПользователейУХ.ОтклонениеОтчета);
				Если ВозможноПроведениеОбъекта(ОбъектСсылка) Тогда
					
					Если НЕ Форма=Неопределено Тогда
						
						Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
						
					Иначе
						
						ДокументОбъект=ОбъектСсылка.ПолучитьОбъект();
						ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
						
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		Иначе
			// Не удалось отклонить этап.
			ОтменитьТранзакцию();
			ОпределитьСостояние(Форма);
			Возврат Ложь;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		ОпределитьСостояние(Форма);
		
		Возврат Истина;
		
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось отклонить этап %ЭтапВход% по причине: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭтапВход%", Строка(ТекущийЭтап.Этап));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", Строка(ОписаниеОшибки()));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		ОтменитьТранзакцию();
		ОпределитьСостояние(Форма);
		
		Возврат Ложь;
		
	КонецПопытки;
	
КонецФункции

Функция ЗапущенПроцессСогласования(ОбъектСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	РегистрСведений.ВыполнениеПроцессов КАК ВыполнениеПроцессов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭкземплярПроцесса КАК ЭкземплярПроцесса
	|		ПО (ЭкземплярПроцесса.Ссылка = ВыполнениеПроцессов.ДокументПроцесса)
	|			И (ВыполнениеПроцессов.АрхивнаяЗапись = ЛОЖЬ)
	|ГДЕ
	|	ДокументПроцесса.КлючевойОбъектПроцесса = &КлючевойОбъектПроцесса";
	
	Запрос.УстановитьПараметр("КлючевойОбъектПроцесса", ОбъектСсылка);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

//Получает текущий этап согласования по ссылке
Функция ПолучитьТекущийЭтапСогласования(ОбъектСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыполнениеПроцессов.ЭтапПроцесса КАК ЭтапПроцесса
	|ИЗ
	|	РегистрСведений.ВыполнениеПроцессов КАК ВыполнениеПроцессов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭкземплярПроцесса КАК ЭкземплярПроцесса
	|		ПО (ЭкземплярПроцесса.Ссылка = ВыполнениеПроцессов.ДокументПроцесса)
	|			И (ЭкземплярПроцесса.КлючевойОбъектПроцесса = &КлючевойОбъектПроцесса)
	|			И (ЭкземплярПроцесса.СостояниеВыполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияПроцесса.Вработе))
	|			И (ВыполнениеПроцессов.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.ВОбработке))
	|			И (ВыполнениеПроцессов.АрхивнаяЗапись = ЛОЖЬ)";
	
	Запрос.УстановитьПараметр("КлючевойОбъектПроцесса", ОбъектСсылка);
	
	ВыборкаЭтапов = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаЭтапов.Следующий() тогда
		Возврат ВыборкаЭтапов.ЭтапПроцесса;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции

Функция ПолучитьПользователейПоРоли(Роль,Организация,Проект=Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтветственныеОрганизаций.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций
	|ГДЕ
	|	ОтветственныеОрганизаций.Организация = &Организация
	|	И ОтветственныеОрганизаций.Роль = &Роль
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ОтветственныеОрганизаций.Пользователь
	|ИЗ
	|	РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций
	|ГДЕ
	|	ОтветственныеОрганизаций.Организация = &ПустаяОрганизация
	|	И ОтветственныеОрганизаций.Роль = &Роль";
	Запрос.УстановитьПараметр("Роль", Роль);
	Запрос.УстановитьПараметр("ПустаяОрганизация", ОбщегоНазначенияУХ.ПустоеЗначениеТипа(ТипЗнч(Организация)));	
	Запрос.УстановитьПараметр("Организация",Организация);
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
КонецФункции


Функция ДокументПолностьюСогласован(ЭкземплярОтчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЭкземплярПроцесса.СостояниеВыполнения КАК СостояниеВыполнения
	|ИЗ
	|	Документ.ЭкземплярПроцесса КАК ЭкземплярПроцесса
	|ГДЕ
	|	ЭкземплярПроцесса.КлючевойОбъектПроцесса = &ЭкземплярОтчета
	|	И ЭкземплярПроцесса.ПроцессРодитель = ЗНАЧЕНИЕ(Документ.ЭкземплярПроцесса.ПустаяСсылка)
	|	И ЭкземплярПроцесса.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭкземплярПроцесса.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ЭкземплярОтчета", ЭкземплярОтчета);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СостояниеВыполнения = Перечисления.СостоянияПроцесса.Завершен;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ВозможноПроведениеОбъекта(Ссылка) Экспорт
	
	Если  Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Ссылка)) Тогда 
		Возврат Ложь;
	Иначе	
		Возврат ?(Строка(Ссылка.Метаданные().Проведение)="Запретить",Ложь,Истина); 
	КонецЕсли;
	
КонецФункции // ВозможноПроведениеОбъекта() 

// Возвращает количество реквизитов, необходимых для согласования,
// которые есть на форме Форма.
Функция ПолучитьКоличествоРеквизитовСогласования(Форма)
	Реквизиты = Форма.ПолучитьРеквизиты();	
	РезультатФункции = 0;
	Для Каждого Рек из Реквизиты Цикл 
		Если Рек.Имя = "Согласующий" Тогда
			РезультатФункции = РезультатФункции+1;
		КонецЕсли;
		Если Рек.Имя = "СостояниеЗаявки" Тогда
			РезультатФункции = РезультатФункции+1;
		КонецЕсли;	
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Возвращает текстовое представление маркера Согласующий не определён.
Функция СогласующийНеОпределенПредставление()
	РезультатФункции = НСтр("ru = 'Согласующий не определен'");
	Возврат РезультатФункции;
КонецФункции		// СогласующийНеОпределенПредставление()

// Проверяет, является ли текущий пользователь инициатором по объекту ОбъектСогласованияВход.
Функция ЭтоИнициаторСогласования(ОбъектСогласованияВход) Экспорт
	РезультатФункции = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭкземплярПроцессаПараметрыПроцесса.Ссылка КАК Ссылка,
		|	ЭкземплярПроцессаПараметрыПроцесса.Ссылка.КлючевойОбъектПроцесса КАК КлючевойОбъектПроцесса,
		|	ЭкземплярПроцессаПараметрыПроцесса.ЗначениеПоУмолчанию КАК ЗначениеПоУмолчанию,
		|	ЭкземплярПроцессаПараметрыПроцесса.КодПараметра КАК КодПараметра
		|ИЗ
		|	Документ.ЭкземплярПроцесса.ПараметрыПроцесса КАК ЭкземплярПроцессаПараметрыПроцесса
		|ГДЕ
		|	НЕ ЭкземплярПроцессаПараметрыПроцесса.Ссылка.ПометкаУдаления
		|	И ЭкземплярПроцессаПараметрыПроцесса.КодПараметра = &ИмяПараметра
		|	И ЭкземплярПроцессаПараметрыПроцесса.Ссылка.КлючевойОбъектПроцесса = &КлючевойОбъектПроцесса";
	Запрос.УстановитьПараметр("ИмяПараметра", "ИнициаторПроцесса");
	Запрос.УстановитьПараметр("КлючевойОбъектПроцесса", ОбъектСогласованияВход.Ссылка);
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	МассивИнициаторов = Выгрузка.ВыгрузитьКолонку("ЗначениеПоУмолчанию");
	МассивИнициаторов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивИнициаторов);
	МассивИнициаторов = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивИнициаторов);
	Если МассивИнициаторов.Количество() = 1 Тогда
		ТекПользователь = Пользователи.ТекущийПользователь();
		РезультатФункции = (МассивИнициаторов[0] = ТекПользователь);
	Иначе
		РезультатФункции = Ложь;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ЭтоИнициаторСогласования()

Процедура ОпределитьСостояние(Форма, ОбновитьОтветственныхВход = Ложь) Экспорт
	
	Если Форма=Неопределено Тогда
		Возврат;			// Форма не передана.
	КонецЕсли;
	// Определим Инициатора согласования, если он есть.
	ЕстьИнициатор = ОбщегоназначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Исполнитель");
	Если ЕстьИнициатор Тогда
		Форма.Инициатор =  ПолучитьОтветственногоЗаТипОбъекта(Форма.Объект.Ссылка, , , , "Исполнитель", Истина);
	Иначе
		// Нет инициатора. Пропускаем.
	КонецЕсли;
	// Проверим наличие необходимых реквизитов.
	КоличествоРеквизитовСогласования = ПолучитьКоличествоРеквизитовСогласования(Форма);
	Если КоличествоРеквизитовСогласования <> 2 Тогда
		Возврат;			// Нет нужного набора реквизитов на форме.
	КонецЕсли;
	
	Форма.СостояниеЗаявки = УправлениеПроцессамиСогласованияУХ.ВернутьТекущееСостояние(Форма.Объект.Ссылка);
	
	// Выведем статус объекта.
	СсылкаНаОбъект = Форма.Объект.Ссылка;
		
	Форма.СтатусОбъекта = УправлениеПроцессамиСогласованияУХ.ВернутьСтатусОбъекта(СсылкаНаОбъект, Перечисления.СостоянияСогласования.Черновик);
			                                    	
	Если НЕ Форма.Элементы.СтатусОбъекта.Вид = ВидПоляФормы.ПолеНадписи Тогда
		Форма.Элементы.СтатусОбъекта.СписокВыбора.Очистить();
	КонецЕсли;
	
	Если (Не ЗначениеЗаполнено(Форма.Согласующий)) ИЛИ (ОбновитьОтветственныхВход) Тогда
		УстановитьТекущегоОтветственного(Форма);	
	КонецЕсли;
	
	ЕстьПроцесс = Истина;
	Если НЕ ЗначениеЗаполнено(Форма.СостояниеЗаявки) Тогда
		Форма.СостояниеЗаявки = Перечисления.СостоянияПроцесса.Черновик;
		ЕстьПроцесс = Ложь;
	Иначе
		//Форма.Элементы.СостояниеЗаявки.Видимость = Истина;
	КонецЕсли;
	Если НЕ Форма.Элементы.Найти("КартинкаСтатуса") = Неопределено Тогда	
		// Графический статус состояния.
		Форма.Элементы.КартинкаСтатуса.Картинка = УправлениеПроцессамиСогласованияУХ.ПолучитьКартинкуОтображенияПроцесса(Форма.СостояниеЗаявки);
		// Подсказка у графического статуса.
		Форма.Элементы.КартинкаСтатуса.Подсказка = Строка(Форма.СостояниеЗаявки);
	Иначе
		// Нет картинки на форме, не отображаем графический статус.
	КонецЕсли;
	
	Если Форма.Согласующий = СогласующийНеОпределенПредставление() Тогда
		
		Если ТипЗнч(Форма.СтатусОбъекта) = Тип("ПеречислениеСсылка.СостоянияСогласования") тогда
			Если Форма.СтатусОбъекта = Перечисления.СостоянияСогласования.НаУтверждении Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагСиний;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "На утверждении";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияСогласования.Утверждена  Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагЗеленый;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Утвержден";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияСогласования.Отклонена Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКрасный;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Отклонен";		
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияСогласования.Черновик Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКонтур;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Черновик";	
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияСогласования.Возвращена Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагЖелтый;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Отправлен на уточнение";			
			Иначе		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКонтур;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Состояние не определено";
			КонецЕсли;
		ИначеЕсли ТипЗнч(Форма.СтатусОбъекта) = Тип("ПеречислениеСсылка.СостоянияОтчетов") тогда
			Если Форма.СтатусОбъекта = Перечисления.СостоянияОтчетов.Запланирован Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКонтур;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Не заполнен";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияОтчетов.Выполняется Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКонтур;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Черновик";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияОтчетов.Подготовлен Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагСиний;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Проверен, на утверждении";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияОтчетов.Возвращен Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагЖелтый;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Отправлен на уточнение";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияОтчетов.Утвержден Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагЗеленый;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Утвержден";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияОтчетов.ЗаписанСОшибкой Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКрасный;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Заполнен с ошибками";
			Иначе
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКонтур;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Состояние не определено";
			КонецЕсли;
		ИначеЕсли ТипЗнч(Форма.СтатусОбъекта) = Тип("ПеречислениеСсылка.СостоянияИнцидентов") тогда
			Если Форма.СтатусОбъекта = Перечисления.СостоянияИнцидентов.Черновик Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКонтур;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Черновик";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияИнцидентов.НаУтверждении Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагСиний;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "На утверждении";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияИнцидентов.Открыт Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКрасный;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Открыт";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияИнцидентов.Закрыт Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагЗеленый;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Закрыт";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияИнцидентов.Отклонен Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагЖелтый;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Отклонен";
			Иначе
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКонтур;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Состояние не определено";
			КонецЕсли;
		ИначеЕсли ТипЗнч(Форма.СтатусОбъекта) = Тип("ПеречислениеСсылка.СостоянияПроектов") тогда
			Если Форма.СтатусОбъекта = Перечисления.СостоянияПроектов.НаУтверждении Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагСиний;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "На утверждении";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияПроектов.Утвержден Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагЗеленый;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Утвержден";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияПроектов.Отклонен Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКрасный;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Отклонен";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияПроектов.Возвращен Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагЖелтый;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Отправлен на уточнение";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияПроектов.ВключенВПрограмму Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКонтур;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Включен в программу";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияПроектов.Начат Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКонтур;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Начат";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияПроектов.Приостановлен Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКонтур;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Приостановлен";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияПроектов.Завершен Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКонтур;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Завершен";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияПроектов.Черновик Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКонтур;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Черновик";
			Иначе
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКонтур;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Состояние не определено";
			КонецЕсли;
		ИначеЕсли ТипЗнч(Форма.СтатусОбъекта) = Тип("ПеречислениеСсылка.СостоянияДоговоров") тогда
			Если Форма.СтатусОбъекта = Перечисления.СостоянияДоговоров.Черновик Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКонтур;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Черновик";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияДоговоров.НаУтверждении Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагСиний;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "На утверждении";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияДоговоров.Утвержден Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагЗеленый;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Утвержден";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияДоговоров.Отклонен Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКрасный;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Отклонен";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияДоговоров.ПереданНаПодписьКонтрагенту Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКонтур;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Передан на подпись контрагенту";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияДоговоров.ПереданНаПодписьОрганизации Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКонтур;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Передан на подпись организации";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияДоговоров.Подписан Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКонтур;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Подписан";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияДоговоров.Исполняется Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКонтур;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Исполняется";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияДоговоров.Исполнен Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКонтур;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Исполнен";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияДоговоров.Расторгнут Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКонтур;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Расторгнут";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияДоговоров.Приостановлен Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКонтур;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Приостановлен";
			ИначеЕсли Форма.СтатусОбъекта = Перечисления.СостоянияДоговоров.Возвращен Тогда		
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагЖелтый;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Отправлен на уточнение";
			Иначе
				Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКонтур;
				Форма.Элементы.КартинкаСтатуса.Подсказка = "Состояние не определено";
			КонецЕсли;
		КонецЕсли;
		
		Форма.Элементы.Группа_ОбработкаМаршрутаСогласования.Видимость = Ложь;
		
		Форма.Элементы.СостояниеЗаявки.Доступность = Истина;
		
		Если ОбщегоназначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Инициатор") Тогда
			ТекИнициатор = Форма.Инициатор;
		Иначе	
			ТекИнициатор = Неопределено;
		КонецЕсли;
		ТекПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
		РазрешеноИзменениеСтатуса = Ложь;
		ИнициаторЗаполнен = ЗначениеЗаполнено(ТекИнициатор);
		Если НЕ ИнициаторЗаполнен Тогда
			РазрешеноИзменениеСтатуса = Истина;
		ИначеЕсли ТипЗнч(ТекИнициатор) = Тип("СправочникСсылка.Пользователи") Тогда
			РазрешеноИзменениеСтатуса = (ТекИнициатор = ТекПользователь) ИЛИ (НЕ ИнициаторЗаполнен);
		ИначеЕсли ТипЗнч(ТекИнициатор) = Тип("СправочникСсылка.РолиКонтактныхЛиц") Тогда	
			ОрганизацияНаФорме = МодульОбработкиЭтаповПроцессовСерверУХ.ПолучитьОрганизациюОбъекта(Форма.Объект.Ссылка);
			ВыгрузкаПользователей = МодульУправленияПроцессамиУХ.ПолучитьПользователейПоРоли(ТекИнициатор , ОрганизацияНаФорме);
			МассивПользователей = ВыгрузкаПользователей.ВыгрузитьКолонку("Пользователь");
			ИндексПользователя = МассивПользователей.Найти(ТекПользователь);
			РазрешеноИзменениеСтатуса = (ИндексПользователя <> Неопределено) ИЛИ (НЕ ИнициаторЗаполнен);
		Иначе
			РазрешеноИзменениеСтатуса = Ложь;
		КонецЕсли;
		Если РазрешеноИзменениеСтатуса Тогда
			Форма.Элементы.СтатусОбъекта.Вид =  ВидПоляФормы.ПолеВвода;
			
			Если Форма.СтатусОбъекта = Неопределено тогда 
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма.Объект, "ТипОбъектаСогласования") Тогда
					Если ЗначениеЗаполнено(Форма.Объект.ТипОбъектаСогласования) тогда
						Если ЗначениеЗаполнено(Форма.Объект.ТипОбъектаСогласования.РеквизитСостоянияСтрока) тогда
							
							ИмяПеречисления = СокрЛП(Строка(Форма.Объект.ТипОбъектаСогласования.РеквизитСостояния));
							ИмяПеречисления = СтрЗаменить(ИмяПеречисления, "Перечисление.", "");
							ИмяПеречисления = СтрЗаменить(ИмяПеречисления, "Перечисления.", "");
							ИмяПеречисления = СтрЗаменить(ИмяПеречисления, "ПеречислениеСсылка.", "");
							ИмяПеречисления = СтрЗаменить(ИмяПеречисления, " ", "");
							
							Попытка
								Форма.Элементы.СтатусОбъекта.ОграничениеТипа = Новый ОписаниеТипов("ПеречислениеСсылка." + ИмяПеречисления);
							Исключение
							КонецПопытки;
							
						КонецЕсли;
					КонецЕсли;
				Иначе
					// Не устанавливаем ограничения.
				КонецЕсли;
			КонецЕсли;
						
		Иначе
			Форма.Элементы.СтатусОбъекта.Вид =  ВидПоляФормы.ПолеНадписи;
		КонецЕсли;

	Иначе
		
		Форма.Элементы.СтатусОбъекта.Вид =  ВидПоляФормы.ПолеНадписи;
		Форма.Элементы.Группа_ОбработкаМаршрутаСогласования.Видимость = Истина;
		// Получим значение реквизита НеБлокироватьУтвержденные.
		ТипСсылки = ТипЗнч(СсылкаНаОбъект);
		СсылкаБД = ОбщегоНазначенияСерверУХ.ВернутьСсылкуБДПоТипу(ТипСсылки);
		НеБлокироватьРеквизитыПриУтверждении = Ложь;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СсылкаБД, "НеБлокироватьРеквизитыПриУтверждении") Тогда
			НеБлокироватьРеквизитыПриУтверждении = СсылкаБД.НеБлокироватьРеквизитыПриУтверждении;
		Иначе
			НеБлокироватьРеквизитыПриУтверждении = Ложь;
		КонецЕсли;
		
		ПроцессЧерновик = (Не ЗначениеЗаполнено(Форма.СостояниеЗаявки)) ИЛИ (Форма.СостояниеЗаявки = Перечисления.СостоянияПроцесса.Черновик);
		ПроцессВРаботе = (Форма.СостояниеЗаявки = Перечисления.СостоянияПроцесса.Вработе);
		ПроцессЗавершен = (Форма.СостояниеЗаявки = Перечисления.СостоянияПроцесса.Завершен);
		ПроцессОстановлен = (Форма.СостояниеЗаявки = Перечисления.СостоянияПроцесса.Остановлен);
		Если ПроцессЧерновик Тогда	
			// Черновик.
			Форма.Элементы.СогласоватьДокумент.Доступность = Истина;
			Форма.Элементы.Группа_ОбработкаМаршрутаСогласования.ТекущаяСтраница =  Форма.Элементы.МаршрутСогласованияНеЗапущен;	
		ИначеЕсли ПроцессОстановлен Тогда
			// Остановлен.
			Форма.Элементы.Группа_ОбработкаМаршрутаСогласования.ТекущаяСтраница =  Форма.Элементы.МаршрутСогласованияНеЗапущен;	
		ИначеЕсли ПроцессВРаботе Тогда
			// Запущен.
			Форма.Элементы.СогласоватьДокумент.Доступность = Истина;
			Форма.Элементы.Группа_ОбработкаМаршрутаСогласования.ТекущаяСтраница =  Форма.Элементы.МаршрутСогласованияЗапущен;
			ОрганизацияОбъекта = МодульОбработкиЭтаповПроцессовСерверУХ.ПолучитьОрганизациюОбъекта(Форма.Объект.Ссылка);
			ЕстьСуперПользователь = МодульСогласованияДокументовУХ.ЕстьСуперПользователь(ОрганизацияОбъекта);
			ЭтоИнициатор = ЭтоИнициаторСогласования(Форма.Объект);
			Форма.Элементы.ОтменитьСогласование.Доступность = ЕстьСуперПользователь ИЛИ ЭтоИнициатор;
			// Проверим схему доступности элементов формы текущего этапа.
			ЭтапыСогласованияТекущегоПользователя = ЭтапыСогласованияДляТекущегоПользователя(Форма.Объект.Ссылка);
			Если ЭтапыСогласованияТекущегоПользователя.Количество() > 0 Тогда  //Если является ответсвенным по текущему этапу то проверим доступные реквизиты
				СхемаДоступностиРеквизитов = ЭтапыСогласованияТекущегоПользователя[0].ЭтапПроцесса.СхемаДоступностиРеквизитов;
				Если НЕ ЕстьСуперПользователь Тогда
					УстановитьДоступностьЭлементов(Форма,Ложь,СхемаДоступностиРеквизитов);
				КонецЕсли;
				Форма.Элементы.СогласоватьДокумент.Доступность = Истина;
			Иначе	                                                           //Если  не является ответственным  и не суперпользователь то закрываем редактирование
				Форма.Элементы.СогласоватьДокумент.Доступность = Ложь;
				Если НЕ ЕстьСуперПользователь Тогда
					УстановитьДоступностьЭлементов(Форма,Ложь,СхемаДоступностиРеквизитов);
				Иначе
					// Для суперпользователя запретим только команду согласования. Не накладываем схему доступности.
				КонецЕсли;	
			КонецЕсли;
		ИначеЕсли ПроцессЗавершен Тогда			
			// Завершен.
			Форма.Элементы.Группа_ОбработкаМаршрутаСогласования.ТекущаяСтраница =  Форма.Элементы.МаршрутСогласованияЗапущен;
			ОрганизацияОбъекта = МодульОбработкиЭтаповПроцессовСерверУХ.ПолучитьОрганизациюОбъекта(Форма.Объект.Ссылка);
			ЕстьСуперПользователь = МодульСогласованияДокументовУХ.ЕстьСуперПользователь(ОрганизацияОбъекта);
			ЭтоИнициатор = ЭтоИнициаторСогласования(Форма.Объект);
			Если (НЕ ЕстьСуперПользователь) И (НЕ НеБлокироватьРеквизитыПриУтверждении) Тогда
				УстановитьДоступностьЭлементов(Форма,Ложь);
			КонецЕсли;
			
			Форма.Элементы.ОтменитьСогласование.Доступность = ЕстьСуперПользователь ИЛИ ЭтоИнициатор;
			Форма.Элементы.СогласоватьДокумент.Доступность = Ложь;			

		Иначе		
			// Прочие варианты.
			Форма.Элементы.Группа_ОбработкаМаршрутаСогласования.ТекущаяСтраница =  Форма.Элементы.МаршрутСогласованияЗапущен;
			Форма.Элементы.СогласоватьДокумент.Доступность = Ложь;	

		КонецЕсли;
		// Скроем команды с панели запущенных процессов, когда процесс не в состоянии Завершен или В работе.


		Форма.Элементы.СогласоватьДокумент.Видимость	 = ПроцессВРаботе ИЛИ ПроцессЗавершен;
		Форма.Элементы.ОтменитьСогласование.Видимость	 = ПроцессВРаботе ИЛИ ПроцессЗавершен;
		Форма.Элементы.МаршрутСогласования.Видимость	 = ПроцессВРаботе ИЛИ ПроцессЗавершен;
		//Если стаус отличен от черновика, и нет запущеного маршрута согласования, то значит было изменение стаусов вне процесса
		Если Не ЕстьПроцесс Тогда
			ЭтоНеЧерновик = ПолучитьСоответствиеСостоянийОбъекта(Форма.Объект.Ссылка)["Черновик"] <> Форма.СтатусОбъекта;
			ЭтоНеОтклонен = ПолучитьСоответствиеСостоянийОбъекта(Форма.Объект.Ссылка)["Отклонен"] <> Форма.СтатусОбъекта;
			ЗаполненСтатусОбъекта = ЗначениеЗаполнено(Форма.СтатусОбъекта);
			Если (ЭтоНеЧерновик) И (ЭтоНеОтклонен) И (ЗаполненСтатусОбъекта) Тогда
				Форма.Элементы.Группа_ОбработкаМаршрутаСогласования.ТекущаяСтраница =  Форма.Элементы.МаршрутСогласованияЗапущен;
				ОрганизацияОбъекта = МодульОбработкиЭтаповПроцессовСерверУХ.ПолучитьОрганизациюОбъекта(Форма.Объект.Ссылка);
				ЕстьСуперПользователь = МодульСогласованияДокументовУХ.ЕстьСуперПользователь(ОрганизацияОбъекта);
				ЭтоИнициатор = ЭтоИнициаторСогласования(Форма.Объект);
				Если НЕ Форма.Элементы.Найти("КартинкаСтатуса") = Неопределено Тогда
					Форма.Элементы.КартинкаСтатуса.Картинка = БиблиотекаКартинок.ПометкаНовостиФлагКонтур;
				КонецЕсли;
				Если НЕ ЕстьСуперПользователь Тогда
					УстановитьДоступностьЭлементов(Форма,Ложь);
				КонецЕсли;
				
				Форма.Элементы.ОтменитьСогласование.Доступность = ЕстьСуперПользователь ИЛИ ЭтоИнициатор;
				Форма.Элементы.СогласоватьДокумент.Доступность = Ложь;	
				
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция НетЭтаповВОбработкеПоПроцессуСогласования(ДокументПроцесса) Экспорт
	
	РезультатФункции = Истина;
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	РегистрСведений.ВыполнениеПроцессов КАК ВыполнениеПроцессов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущийМаршрутПроцесса КАК Маршрут
	|		ПО (Маршрут.ДокументПроцесса = ВыполнениеПроцессов.ДокументПроцесса)
	|			И ВыполнениеПроцессов.ЭтапПроцесса = Маршрут.ЭтапИсточник
	|ГДЕ
	|	ВыполнениеПроцессов.ДокументПроцесса = &ДокументПроцесса
	|	И ВыполнениеПроцессов.АрхивнаяЗапись = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.ВыполнениеПроцессов КАК ВыполнениеПроцессов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущийМаршрутПроцесса КАК Маршрут
	|		ПО (Маршрут.ДокументПроцесса = ВыполнениеПроцессов.ДокументПроцесса)
	|			И ВыполнениеПроцессов.ЭтапПроцесса = Маршрут.ЭтапПриемник
	|ГДЕ
	|	ВыполнениеПроцессов.ДокументПроцесса = &ДокументПроцесса
	|	И ВыполнениеПроцессов.АрхивнаяЗапись = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.ВизаДополнительныхСогласующих КАК ВизаДополнительныхСогласующих
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущийМаршрутПроцесса КАК Маршрут
	|		ПО ВизаДополнительныхСогласующих.ЭтапПроцесса = Маршрут.ЭтапИсточник
	|			И ВизаДополнительныхСогласующих.ЭкземплярПроцесса = Маршрут.ДокументПроцесса
	|ГДЕ
	|	ВизаДополнительныхСогласующих.АрхивнаяЗапись = ЛОЖЬ
	|	И ВизаДополнительныхСогласующих.ЭкземплярПроцесса = &ДокументПроцесса
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.ВизаДополнительныхСогласующих КАК ВизаДополнительныхСогласующих
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ТекущийМаршрутПроцесса КАК Маршрут
	|		ПО ВизаДополнительныхСогласующих.ЭтапПроцесса = Маршрут.ЭтапПриемник
	|			И ВизаДополнительныхСогласующих.ЭкземплярПроцесса = Маршрут.ДокументПроцесса
	|ГДЕ
	|	ВизаДополнительныхСогласующих.АрхивнаяЗапись = ЛОЖЬ
	|	И ВизаДополнительныхСогласующих.ЭкземплярПроцесса = &ДокументПроцесса";
	
	Запрос.УстановитьПараметр("ДокументПроцесса", ДокументПроцесса);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Пустой();
	Возврат РезультатФункции;
	
КонецФункции

Процедура УстановитьСостояниеЭтапа(ЭтапПроцесса, ДокументПроцесса, ЧислоСогласованныхЭтаповПредшественников) Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВыполнениеПроцессовСрезПоследних.Период КАК Период,
	|	ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса,
	|	ВыполнениеПроцессовСрезПоследних.ДокументПроцесса,
	|	ВыполнениеПроцессовСрезПоследних.АрхивнаяЗапись,
	|	ВыполнениеПроцессовСрезПоследних.Организация,
	|	ВыполнениеПроцессовСрезПоследних.ЧислоСогласованныхЭтаповПредшественников
	|ИЗ
	|	РегистрСведений.ВыполнениеПроцессов.СрезПоследних КАК ВыполнениеПроцессовСрезПоследних
	|ГДЕ
	|	ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса = &ЭтапПроцесса
	|	И ВыполнениеПроцессовСрезПоследних.ДокументПроцесса = &ДокументПроцесса
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
	
	Запрос.УстановитьПараметр("ЭтапПроцесса", ЭтапПроцесса);
	Запрос.УстановитьПараметр("ДокументПроцесса", ДокументПроцесса);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	МенеджерЗаписи = РегистрыСведений.ВыполнениеПроцессов.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка, "ЭтапПроцесса, ДокументПроцесса, Период, АрхивнаяЗапись, Организация");
	МенеджерЗаписи.Прочитать();
	
	Если МенеджерЗаписи.АрхивнаяЗапись Тогда
		МенеджерЗаписи.Период = ОбщегоНазначенияСерверУХ.ПолучитьОтметкуПоОбъекту(ДокументПроцесса);
	КонецЕсли;
	
	МенеджерЗаписи.Автор  = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	
	Если ЧислоСогласованныхЭтаповПредшественников > 0 Тогда
		МенеджерЗаписи.СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.ВОбработке;
		МенеджерЗаписи.ЧислоСогласованныхЭтаповПредшественников = ЧислоСогласованныхЭтаповПредшественников;
		МенеджерЗаписи.АрхивнаяЗапись = Ложь;
	Иначе
		МенеджерЗаписи.СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.ЗавершенСОшибкой;
		МенеджерЗаписи.АрхивнаяЗапись        = Истина;
	КонецЕсли;
	
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Отменяет согласование этапа ЭтапПроцесса по процессу ДокументПроцесса в этапе для организации
// Организация в регистре ВыполнениеПроцессов.
Функция ОтменитьСогласованиеЭтапа(ДокументПроцесса, ЭтапПроцесса, Организация, ПользовательВход = Неопределено, Комментарий = "", СостояниеЭтапа = Неопределено)
	РезультатФункции = Истина;
	Попытка
		ТекЭтап = ЭтапПроцесса;
		ТекПроцесс = ДокументПроцесса;
		ЕстьРодители = Истина;
		Счетчик = 0;			// Защита от бесконечного выполнения.
		Пока (ЕстьРодители) И (Счетчик < 1000) Цикл
			// Удаление устаревших записей.
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ВыполнениеПроцессовСрезПоследних.Период КАК Период,
			|	ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса КАК ЭтапПроцесса,
			|	ВыполнениеПроцессовСрезПоследних.ДокументПроцесса КАК ДокументПроцесса
			|ИЗ
			|	РегистрСведений.ВыполнениеПроцессов.СрезПоследних(
			|			,
			|			ДокументПроцесса = &ДокументПроцесса
			|				И ЭтапПроцесса = &ЭтапПроцесса) КАК ВыполнениеПроцессовСрезПоследних";
			Запрос.УстановитьПараметр("ДокументПроцесса", ТекПроцесс);
			Запрос.УстановитьПараметр("ЭтапПроцесса"    , ТекЭтап);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				МенеджерЗаписи = РегистрыСведений.ВыполнениеПроцессов.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
				МенеджерЗаписи.Прочитать();
				Если МенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.Удалить();
				КонецЕсли;
			КонецЕсли;
			// Запись новых записей с признаком Архивная.
			НоваяЗапись = РегистрыСведений.ВыполнениеПроцессов.СоздатьМенеджерЗаписи();
			НоваяЗапись.Организация				 = Организация;
			НоваяЗапись.ЭтапПроцесса			 = ТекЭтап;
			НоваяЗапись.ДокументПроцесса		 = ТекПроцесс;
			Если ПользовательВход = Неопределено Тогда
				НоваяЗапись.Автор				 = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
			Иначе
				НоваяЗапись.Автор				 = ПользовательВход;
			КонецЕсли;
			НоваяЗапись.АвторПредставление		 = Строка(НоваяЗапись.Автор);
			НоваяЗапись.АрхивнаяЗапись			 = Истина;
			НоваяЗапись.СостояниеЭтапа			 = ?(СостояниеЭтапа = Неопределено, Перечисления.СостоянияЭтаповУниверсальныхПроцессов.ЗавершенСОшибкой, СостояниеЭтапа);
			НоваяЗапись.Период					 = ОбщегоНазначенияСерверУХ.ПолучитьОтметкуПоОбъекту(ТекПроцесс);
			НоваяЗапись.Комментарий				 = Комментарий;
			НоваяЗапись.Записать(Истина);
			МассивЭтапов = МодульРегламентныхЗаданийУХ.ПолучитьМассивПредшественниковЭтапаРекурсивно(ТекЭтап, ТекПроцесс, Ложь);
			Если МассивЭтапов.Количество() = 0 Тогда
				ТекЭтап = ТекПроцесс.ЭтапРодитель;
				ТекПроцесс = ТекПроцесс.ПроцессРодитель;
				ЕстьРодители = ((ЗначениеЗаполнено(ТекЭтап)) И (ЗначениеЗаполнено(ТекПроцесс)));
			Иначе
				ЕстьРодители = Ложь;
			КонецЕсли;
			Счетчик = Счетчик + 1;
		КонецЦикла;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось отменить согласование этапа %Этап% для объекта %Объект%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(ЭтапПроцесса));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Строка(ДокументПроцесса.КлючевойОбъектПроцесса));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Ложь;
	КонецПопытки;
	Возврат РезультатФункции;	
КонецФункции		// ОтменитьСогласованиеЭтапа()

Функция ОтклонитьЭтапСогласования(ДокументПроцесса, Организация = Неопределено, ЭтапПроцесса, Комментарий, ПользовательВход = Неопределено, СостояниеЭтапа = Неопределено, ТолькоПройденные = Ложь) Экспорт
	РезультатФункции = Истина;
	// Отменяем согласование текущего этапа.
	РезультатОтмены = ОтменитьСогласованиеЭтапа(ДокументПроцесса, ЭтапПроцесса, Организация, ПользовательВход, Комментарий, СостояниеЭтапа);
	ЕстьРодители = Истина;
	ТекЭтап = ЭтапПроцесса;
	ТекПроцесс = ДокументПроцесса;
	Счетчик = 0;
	Пока ЕстьРодители Цикл
		МассивПредшественников = МодульРегламентныхЗаданийУХ.ПолучитьМассивПредшественниковЭтапаРекурсивно(ТекЭтап, ТекПроцесс, Ложь);
		МассивПредшественников = ОчиститьНепройденныеЭтапы(ТекПроцесс, МассивПредшественников);
		// Очистим пройденные этапы.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВыполнениеПроцессовСрезПоследних.Период КАК Период,
		|	ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса,
		|	ВыполнениеПроцессовСрезПоследних.ДокументПроцесса,
		|	ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса.ТипЭтапа КАК ТипЭтапа
		|ИЗ
		|	РегистрСведений.ВыполнениеПроцессов.СрезПоследних(
		|			,
		|			ДокументПроцесса = &ДокументПроцесса
		|				И ЭтапПроцесса В (&МассивЭтапов)
		|				И СостояниеЭтапа = &Выполнен) КАК ВыполнениеПроцессовСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Запрос.УстановитьПараметр("ДокументПроцесса", ТекПроцесс);
		Запрос.УстановитьПараметр("МассивЭтапов", МассивПредшественников);
		Запрос.УстановитьПараметр("Выполнен", Перечисления.СостоянияЭтаповУниверсальныхПроцессов.Завершен);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		
		Если ТолькоПройденные тогда
			МассивПредшественников.Очистить();
		КонецЕсли;
		
		Пока Выборка.Следующий() Цикл
			
			Если ТолькоПройденные тогда
				МассивПредшественников.Добавить(Выборка.ЭтапПроцесса);
			КонецЕсли;
			
			МенеджерЗаписи = РегистрыСведений.ВыполнениеПроцессов.СоздатьМенеджерЗаписи();
			ЗаполнитьЗначенияСвойств(МенеджерЗаписи, Выборка);
			МенеджерЗаписи.Прочитать();
			Если МенеджерЗаписи.Выбран() Тогда
				МенеджерЗаписи.Удалить();
			КонецЕсли;
		КонецЦикла;
		// Инициализируем этапы согласования снова.
		Для Каждого ТекМассивПредшественников Из МассивПредшественников Цикл
			ЭтоЭтапДочернийМаршрут	 = (ТекМассивПредшественников.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ДочернийМаршрут);
			ЭтоРучнойПереход		 = (ТекМассивПредшественников.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход);
			ЭтоЭтапСогласования		 = (ТекМассивПредшественников.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования);
			МассивПоследователей = МодульРегламентныхЗаданийУХ.ПолучитьМассивПоследователейЭтапаРекурсивно(ТекМассивПредшественников, ДокументПроцесса);
			Для Каждого ТекМассивПоследователей Из МассивПоследователей Цикл
				Если МожноСброситьЭтап(ДокументПроцесса, Организация, ТекМассивПоследователей) Тогда
					РезультатОтмены = ОтменитьСогласованиеЭтапа(ДокументПроцесса, ТекМассивПоследователей, Организация, ПользовательВход, "", СостояниеЭтапа);
				Иначе
					// Этап-последователь не выполняется. Пропускаем.
				КонецЕсли;
				
				Если МассивПоследователей.Найти(ЭтапПроцесса) <> неопределено
					И ТекМассивПоследователей.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.УсловныйПереход тогда
					
					Прервать;
				КонецЕсли;
			КонецЦикла;	
			Если ЭтоЭтапСогласования ИЛИ ЭтоРучнойПереход ИЛИ ЭтоЭтапДочернийМаршрут Тогда
				ИнициироватьСогласованиеЭтапа(ТекПроцесс, Организация, ТекМассивПредшественников);
			Иначе	
				Продолжить;
			КонецЕсли;	
		КонецЦикла;
		// Переход на родительские процессы.
		МассивПредшественников = МодульРегламентныхЗаданийУХ.ПолучитьМассивПредшественниковЭтапаРекурсивно(ТекЭтап, ТекПроцесс, Ложь);
		Если МассивПредшественников.Количество() = 0 Тогда
			// Остановим дочерний процесс.
			ТекОбъект = ТекПроцесс.ПолучитьОбъект();
			ТекОбъект.ВозвратОтчетаНаДоработку("", ПользовательВход);
			МодульРегламентныхЗаданийУХ.СброситьЗаданияПоПроцессу(ТекПроцесс);
			ОстановитьПроцесс(ТекПроцесс);
			// Перейдём на родительский процесс.
			ТекЭтап = ТекПроцесс.ЭтапРодитель;
			ТекПроцесс = ТекПроцесс.ПроцессРодитель;
			ЕстьРодители = ((ЗначениеЗаполнено(ТекЭтап)) И (ЗначениеЗаполнено(ТекПроцесс)));
		Иначе
			ЕстьРодители = Ложь;
		КонецЕсли;
		Счетчик = Счетчик + 1;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

Функция ПроверитьВозможностьЗапускаПроцесса(ОбъектСсылкаВход, ИсполнительВход, СогласующийВход, Отказ)
	РезультатФункции = "";
	// Проверим проведение объекта.
	Если Не Отказ Тогда
		ПроверкаПройдена = Истина;
		ВозможноПроведение = ДействияСогласованиеУХСервер.ВозможноПроведениеОбъекта(ОбъектСсылкаВход);
		Если ВозможноПроведение Тогда
			ПроверкаПройдена = ОбъектСсылкаВход.Проведен;
		Иначе
			ПроверкаПройдена = Истина;
		КонецЕсли;
		Если НЕ ПроверкаПройдена Тогда
			ТекстСообщения = НСтр("ru = 'Документ %Документ% не проведён и не может быть принят к согласованию. Операция отменена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Строка(ОбъектСсылкаВход));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = "ОшибкаИнициализацииМаршрута";
			Отказ = Истина;
		Иначе
			// Проверка пройдена успешно. Продолжаем выполнение.
		КонецЕсли;
	Иначе
		// Не требуется проверка, т.к. не все условия выполнены.
	КонецЕсли;
	// Исполнитель для экземпляра отчёта или ракурса.
	Если Не Отказ Тогда
		Если ТипЗнч(ОбъектСсылкаВход) = Тип("ДокументСсылка.НастраиваемыйОтчет") ИЛИ ТипЗнч(ОбъектСсылкаВход) = Тип("ДокументСсылка.РакурсДанных") Тогда
			ТекПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
			Если ИсполнительВход <> ТекПользователь Тогда		
				Если ТипЗнч(ИсполнительВход) = Тип("Массив") Тогда
					// Исполнитель задан массив. Будем искать среди них текущего пользователя, либо пустое значение.
					ЯвляетсяИсполнителем = Ложь;
					Для Каждого Эл Из ИсполнительВход Цикл
						Если Эл.Ссылка = ТекПользователь ИЛИ ИсполнительВход = Справочники.Пользователи.ПустаяСсылка() Тогда
							ЯвляетсяИсполнителем = Истина;
						КонецЕсли;	
					КонецЦикла;
					Если НЕ ЯвляетсяИсполнителем Тогда
						ТекстСообщения = НСтр("ru = 'Пользователь не является исполнителем по объекту %ОбъектСсылка%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбъектСсылка%", Строка(ОбъектСсылкаВход));
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
						РезультатФункции = "ОшибкаИнициализацииМаршрута";
						Отказ = Истина;
					КонецЕсли;
				Иначе
					// В противном случае, сравним исполнителя с пустым значением.
					Если ИсполнительВход = Неопределено Или ИсполнительВход = Справочники.Пользователи.ПустаяСсылка() Тогда
						// Исполнитель не задан. Инициализировать процесс может любой пользователь.
					Иначе	
						ТекстСообщения = НСтр("ru = 'Пользователь не является исполнителем по объекту %ОбъектСсылкаВход%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбъектСсылкаВход%", Строка(ОбъектСсылкаВход));
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
						РезультатФункции = "ОшибкаИнициализацииМаршрута";
						Отказ = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Не требуется проверка, т.к. не все условия выполнены.
	КонецЕсли;
	// Проверка заполнения меропряития в закупочной процедуре.
	Если Не Отказ Тогда
		Если ТипЗнч(ОбъектСсылкаВход) = Тип("СправочникСсылка.ЗакупочныеПроцедуры") Тогда
			ВидМероприятияЗакупочнаяПроцедура = Перечисления.ВидыМероприятий.ЗакупочнаяПроцедура;
			МероприятиеСсылка = Документы.Мероприятие.ПолучитьПоследнееМероприятиеПоКонтексту(ОбъектСсылкаВход, ВидМероприятияЗакупочнаяПроцедура);	
			ЕстьМероприятие = ЗначениеЗаполнено(МероприятиеСсылка);
			Если НЕ ЕстьМероприятие Тогда
				ТекстСообщения = НСтр("ru = 'До отправки на согласование требуется настроить Стадии закупочной процедуры'");
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				Отказ = Истина;
			Иначе
				// Проверка пройдена успешно.
			КонецЕсли;
		Иначе
			// Не закупочная процедура. Выполняем далее.
		КонецЕсли;
	Иначе
		// В отправке уже отказано. Не проверяем.
	КонецЕсли;
	// Проверка заполнения согласующего.
	Если Не Отказ Тогда
		Если НЕ ЗначениеЗаполнено(СогласующийВход) Тогда
			ТекстСообщения = НСтр("ru = 'Для объекта %ОбъектСсылка% ответственный за согласование в матрице полномочий не задан. Поле Статус доступно для редактирования. Установите нужный статус согласования вручную '");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбъектСсылка%", Строка(ОбъектСсылкаВход));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Отказ = Истина;
			РезультатФункции = "ОшибкаИнициализацииМаршрута";
		КонецЕсли;
	Иначе
		// Не требуется проверка, т.к. не все условия выполнены.
	КонецЕсли;
	// Проверка уже запущенного процесса.
	Если Не Отказ Тогда
		СостояниеЗаявки = ПолучитьОбщийСтатусДляСогласования(ОбъектСсылкаВход);
		Если  СостояниеЗаявки = "Утвержден" ИЛИ СостояниеЗаявки = "НаУтверждении" Тогда
			ТекстСообщения = НСтр("ru = 'Для объекта ""%ОбъектСсылка%"" уже запущен  универсальный процесс. Необходимо остановить существующий процесс '");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбъектСсылка%", Строка(ОбъектСсылкаВход));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = "МаршрутИнициализирован";
			Отказ = Истина;
		КонецЕсли;
	Иначе
		// Не требуется проверка, т.к. не все условия выполнены.
	КонецЕсли;
	Возврат РезультатФункции;	
КонецФункции		// ПроверитьВозможностьЗапускаПроцесса()

// Возвращает структуру необходимых параметров для запуска процесса из формы Форма
// или по ссылке Ссылка.
Функция ПолучитьПараметрыЗапускаПроцесса(Форма = Неопределено, Ссылка = Неопределено)
	ПустойПользователь = Справочники.Пользователи.ПустаяСсылка();
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("Исполнитель", ПустойПользователь);
	РезультатФункции.Вставить("ОбъектСсылка", Неопределено);
	РезультатФункции.Вставить("Согласующий", ПустойПользователь);
	Если Форма <> Неопределено Тогда
		// Согласование из формы. Получим ссылку и согласующих из объекта формы.
		Если Не ЗначениеЗаполнено(Форма.Согласующий) Тогда
			УстановитьТекущегоОтветственного(Форма);
		КонецЕсли;
		РезультатФункции.Вставить("ОбъектСсылка", Форма.Объект.Ссылка);
		РезультатФункции.Вставить("Согласующий", Форма.Согласующий);
		РезультатФункции.Вставить("Исполнитель", ПустойПользователь);
	Иначе
		// Согласование по ссылке. Получим согласующих из ссылки.
		ОбъектСсылка = Ссылка;
		Организация = МодульОбработкиЭтаповПроцессовСерверУХ.ПолучитьОрганизациюОбъекта(ОбъектСсылка);
		Исполнитель = ПолучитьОтветственногоЗаТипОбъекта(ОбъектСсылка, Организация, , , "Исполнитель");
		Согласующий = ПолучитьОтветственногоЗаТипОбъекта(ОбъектСсылка, Организация, , , "Согласующий");
		РезультатФункции.Вставить("ОбъектСсылка", Ссылка);
		РезультатФункции.Вставить("Согласующий", Согласующий);
		РезультатФункции.Вставить("Исполнитель", Исполнитель);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьПараметрыЗапускаПроцесса()

Функция ПринятьКОбработке(Форма = Неопределено, Ссылка = Неопределено, Отказ = Ложь) Экспорт
	// Инициализация.		
	ИмяСобытия = "";	
	ПустойПользователь = Справочники.Пользователи.ПустаяСсылка();
	ЕстьВнешняяТранзакция = ТранзакцияАктивна();
	// Получение параметров запуска процесса.
	СтруктураПараметровЗапуска = ПолучитьПараметрыЗапускаПроцесса(Форма, Ссылка);
	Исполнитель		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровЗапуска, "Исполнитель", ПустойПользователь);
	ОбъектСсылка	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровЗапуска, "ОбъектСсылка", Неопределено);
	Согласующий		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровЗапуска, "Согласующий", ПустойПользователь);
	Попытка
		// Проверка возможности запуска процесса.
		ИмяСобытия = ПроверитьВозможностьЗапускаПроцесса(ОбъектСсылка, Исполнитель, Согласующий, Отказ);
		Если (СокрЛП(ИмяСобытия) = "") И (НЕ Отказ) Тогда
			
			// Получение организации для объекта.
			ЦФООбъекта = МодульОбработкиЭтаповПроцессовСерверУХ.ПолучитьОрганизациюОбъекта(ОбъектСсылка);
			Если НЕ ЗначениеЗаполнено(ЦФООбъекта) Тогда
				ЦФООбъекта = ДействияСогласованиеУХСервер.ВернутьЦФОПоОбъекту(ОбъектСсылка);
			Иначе
				// Воспользуемся Организацией из настроек.
			КонецЕсли;
			// Запуск транзакции.
			Если Не ЕстьВнешняяТранзакция Тогда
				НачатьТранзакцию();
			Иначе
				// Активна внешняя транзакция. Не создаём новую.
			КонецЕсли;
			// Непосредственная отправка на согласование.
			Если НЕ ИнициализироватьПроцесс(Неопределено, Согласующий, ЦФООбъекта, ОбъектСсылка, , , , Отказ) Тогда
				ИмяСобытия = "ОшибкаИнициализацииМаршрута";
			Иначе
				
				ПриИнициализацииМаршрутаСогласования(ОбъектСсылка);
				ИмяСобытия = "МаршрутИнициализирован";
				
				// Проверка, что маршрут уже пройден.
				Если ДокументПолностьюСогласован(ОбъектСсылка) Тогда // При автоутверждении заявка должна перейти в состояние "Утверждена".
					
					ПриУтвержденииВсехЭтаповМаршрутаСогласования(ОбъектСсылка);
					ИмяСобытия = "МаршрутПройден";
					
				КонецЕсли;
			КонецЕсли;
		Иначе
			// Не все условия выполнены.
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось запустить согласование по маршруту для объекта %ОбъектСогласования%: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбъектСогласования%", Строка(ОбъектСсылка));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, Отказ);
		Отказ = Истина;
		УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВСостояниеЧерновик(ОбъектСсылка);
		ИмяСобытия = "ОшибкаИнициализацииМаршрута";
	КонецПопытки;
	// Завершение транзакции.
	Если (НЕ ЕстьВнешняяТранзакция) И (ТранзакцияАктивна()) Тогда
		Если (НЕ Отказ) И (ИмяСобытия <> "ОшибкаИнициализацииМаршрута") Тогда
			ЗафиксироватьТранзакцию();
		Иначе
			ОтменитьТранзакцию();
		КонецЕсли;
	Иначе
		// Активна внешняя транзакция. Не фиксируем здесь.
	КонецЕсли;
	Возврат	ИмяСобытия;
КонецФункции

Процедура УстановитьТекущегоОтветственного(Форма) Экспорт
	
	ОбъектФормы = Форма.Объект;
	Если ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
		СтруктураДополнительныхПараметров = Новый Структура;
		СтруктураДополнительныхПараметров.Вставить("ПериодОтчета", ОбъектФормы.ПериодОтчета);
		СтруктураДополнительныхПараметров.Вставить("Сценарий", ОбъектФормы.Сценарий);
		Форма.Согласующий = ПолучитьОтветственногоЗаТипОбъекта(ОбъектФормы.Ссылка, ОбъектФормы.Организация, ОбъектФормы.Проект, ОбъектФормы.ВидОтчета, , Истина, СтруктураДополнительныхПараметров);
	Иначе	
		ОрганизацияОбъекта = МодульОбработкиЭтаповПроцессовСерверУХ.ПолучитьОрганизациюОбъекта(ОбъектФормы);
		Форма.Согласующий = ПолучитьОтветственногоЗаТипОбъекта(ОбъектФормы, ОрганизацияОбъекта,,,,Истина);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Форма.Согласующий) Тогда
		Форма.Согласующий = СогласующийНеОпределенПредставление();
		Форма.Элементы.ГруппаСогласования.Видимость = Ложь;
	Иначе
		Форма.Элементы.ГруппаСогласования.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

Функция ВернутьДокументНаДоработку(Форма, ТекущийЭтап, Ссылка=Неопределено, ПользовательВход = Неопределено, ЗамещениеВход = Ложь) Экспорт
	// Инициализация и открытие транзакции.
	РезультатФункции = Истина;
	ОбъектСсылка = Неопределено;
	Если Форма = Неопределено Тогда
		ОбъектСсылка = Ссылка;
	Иначе
		ОбъектСсылка = Форма.Объект.Ссылка;
	КонецЕсли;
	ТекДокументСогласования = ТекущийЭтап.ДокументСогласования;
	ТекЭтап = ТекущийЭтап.Этап;
	НачатьТранзакцию();
	Попытка
		// Отмена проведения документа.
		Если НЕ ТекДокументСогласования.ШаблонПроцесса.ПриОтклоненииЭтапаВыполнятьПроцессДоКонца Тогда
			Если ВозможноПроведениеОбъекта(ОбъектСсылка) Тогда
				Если НЕ Форма = Неопределено Тогда
					Форма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.ОтменаПроведения));
				Иначе
					ДокументОбъект = ОбъектСсылка.ПолучитьОбъект();
					ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				КонецЕсли;
			КонецЕсли;
		Иначе
			// Отмена проведения документа будет выполнена, когда процесс дойдёт до конца.
		КонецЕсли;
		// Возврат на доработку.
		КомментарийДополненный	= ДополнитьКомментарийЗамещающего(ТекДокументСогласования, ТекЭтап, ПользовательВход, ТекущийЭтап.Комментарий);
		КомментарийСистемы = ПолучитьКомментарийСистемыЗамещаемого(ПользовательВход);
		ВернутьНаДоработку(Ссылка, КомментарийДополненный, ПользовательВход, ТекущийЭтап);
		// Запись истории процесса.
		ВидОповещенияОтклонениеОтчета = Перечисления.ВидыОповещенийПользователейУХ.ОтклонениеОтчета;
		Если ЗамещениеВход Тогда
			ТекПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
			ДобавитьЗаписьВлогПроцесса(ТекДокументСогласования, ТекЭтап, ТекПользователь, ТекущийЭтап.Комментарий, ВидОповещенияОтклонениеОтчета, КомментарийСистемы);
		Иначе
			ДобавитьЗаписьВлогПроцесса(ТекДокументСогласования, ТекЭтап, ПользовательВход, ТекущийЭтап.Комментарий, ВидОповещенияОтклонениеОтчета, КомментарийСистемы);
		КонецЕсли;
		// Уведомление пользователя.
		ВидСобытияЭтапОтклонен = Справочники.ВидыСобытийОповещений.ЭтапОтклонен;
		ОбъектСогласования = ТекДокументСогласования.КлючевойОбъектПроцесса;
		МассивРассылки = Новый Массив;
		Если ПользовательВход = Неопределено Тогда
			МассивРассылки.Добавить(ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
		Иначе
			МассивРассылки.Добавить(ПользовательВход);
		КонецЕсли;
		МодульУправленияОповещениямиУХ.ОповеститьПользователей(ВидСобытияЭтапОтклонен, , ОбъектСогласования, МассивРассылки);
		// Фиксирование транзакции и обновление интерфейса.
		ЗафиксироватьТранзакцию();
		Если ВозможноПроведениеОбъекта(ОбъектСсылка) Тогда
			Если НЕ Форма = Неопределено Тогда
				Форма.Прочитать();
			Иначе
				// Проверка пройдена успешно.
			КонецЕсли;	
		КонецЕсли;
		РезультатФункции = Истина;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось отменить согласование %КлючевойОбъект%: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КлючевойОбъект%", Строка(ОбъектСсылка));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		ОтменитьТранзакцию();
		РезультатФункции = Ложь;
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции		// ВернутьДокументНаДоработку()

Процедура ВернутьНаДоработку(Ссылка, ТекстВозврата, ПользовательВход = Неопределено, СтруктураЭтапаВход) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭкземплярПроцесса.Ссылка КАК Ссылка,
	|	ЭкземплярПроцесса.ШаблонПроцесса.ПриОтклоненииЭтапаВыполнятьПроцессДоКонца КАК ПриОтклоненииЭтапаВыполнятьПроцессДоКонца,
	|	ЭтапыУниверсальныхПроцессов.Ссылка КАК Этап
	|ИЗ
	|	Документ.ЭкземплярПроцесса КАК ЭкземплярПроцесса
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапыУниверсальныхПроцессов
	|		ПО ЭкземплярПроцесса.ШаблонПроцесса = ЭтапыУниверсальныхПроцессов.Владелец
	|ГДЕ
	|	ЭкземплярПроцесса.КлючевойОбъектПроцесса = &Ссылка
	|	И ЭкземплярПроцесса.ПометкаУдаления = ЛОЖЬ
	|	И ЭкземплярПроцесса.СостояниеВыполнения <> &СостояниеВыполнения
	|	И ЭтапыУниверсальныхПроцессов.Ссылка = &Этап";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("СостояниеВыполнения", Перечисления.СостоянияПроцесса.Остановлен);
	Запрос.УстановитьПараметр("Этап", СтруктураЭтапаВход.Этап);

	Выборка = Запрос.Выполнить().Выбрать();
	
	Отказ = Ложь;
	Пока Выборка.Следующий() Цикл
		ТекЭкземплярПроцесса = Выборка.Ссылка;
		УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВСостояниеОтклонена(Ссылка, ПользовательВход, Истина, ТекЭкземплярПроцесса);
		Если НЕ Выборка.ПриОтклоненииЭтапаВыполнятьПроцессДоКонца Тогда
			ТекОбъект = ТекЭкземплярПроцесса.ПолучитьОбъект();
			ТекОбъект.ВозвратОтчетаНаДоработку(ТекстВозврата, ПользовательВход);
			МодульРегламентныхЗаданийУХ.СброситьЗаданияПоПроцессу(ТекЭкземплярПроцесса);
			ОстановитьПроцесс(ТекЭкземплярПроцесса);
		Иначе
			ЭтапПроцесса = СтруктураЭтапаВход.Этап;
			Организация = СтруктураЭтапаВход.Организация;

			Документы.ЭкземплярПроцесса.ЗаписатьВРегистрДанныеПоВозвратуОбъекта(ТекЭкземплярПроцесса, , , ЭтапПроцесса); 
			
			ТаблицаЗначенийТекущихПараметров = ТекЭкземплярПроцесса.ПараметрыПроцесса.Выгрузить();
			ТаблицаЗначенийПараметровЭтапа = ЭтапПроцесса.ЗначенияПараметров.Выгрузить();

			// Проверим возможность перехода на следующие этапы.
			ТекЗавершеноОсновноеСогласование = ЗавершеноОсновноеСогласование(ТекЭкземплярПроцесса, ЭтапПроцесса);
			ТекЗавершеноДополнительноеСогласование = НЕ МодульСогласованияДокументовУХ.ЕстьАктивноеДопСогласованиеПоЭтапу(ТекЭкземплярПроцесса, ЭтапПроцесса);
			НужнаДальнейшаяОбработка = Ложь;
			Если ТекЗавершеноОсновноеСогласование И ТекЗавершеноДополнительноеСогласование Тогда
				ЭтоЭтапПерехода = (ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход) ИЛИ (ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.УсловныйПереход);
				ЭтоЭтапАвтоЗавершения = (ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Автоутверждение) ИЛИ (ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Автоотклонение);
				НужнаДальнейшаяОбработка = ПерейтиНаСледующиеЭтапы(ТекЭкземплярПроцесса, Организация, ЭтапПроцесса, ТаблицаЗначенийТекущихПараметров, ТаблицаЗначенийПараметровЭтапа, Отказ);
			Иначе
				НужнаДальнейшаяОбработка = Истина;
			КонецЕсли;

		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВернутьСостояниеСогласованияОбъекта(Объект) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СостоянияСогласованияОбъектов.СтатусПроцессаОбъекта как Состояние
	|ИЗ
	|	РегистрСведений.СостоянияСогласованияОбъектов.СрезПоследних(, Объект = &Объект) КАК СостоянияСогласованияОбъектов";
	
	Запрос.УстановитьПараметр("Объект", Объект);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Состояние;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПриУтвержденииВсехЭтаповМаршрутаСогласования(ОбъектСсылка)
	РезультатФункции = Истина;
	Если ТипЗнч(ОбъектСсылка)=Тип("ДокументСсылка.ЗаявкаНаИзменениеНСИ") Тогда
		
		Если ОбъектСсылка.ВидОперации = Перечисления.ВидыОперацийИзмененияНСИ.РегистрацияНовогоОбъекта Тогда		 
			Попытка
				СправочникОбъект = ОбъектСсылка.ИзменяемыйОбъект.ПолучитьОбъект(); 
				СправочникОбъект.НСИ_НеАктивный = Ложь;
				СправочникОбъект.НСИ_Состояние = Перечисления.СостоянияСогласования.Утверждена;  
                СправочникОбъект.ОбменДанными.Загрузка = Истина;
				СправочникОбъект.Записать();
			Исключение
				ТекстСообщения = НСтр("ru = 'При записи объекта %Объект% возникли ошибки: %ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Строка(ОбъектСсылка));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				РезультатФункции = Ложь;
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

Процедура УстановитьДоступностьЭлементов(Форма,Доступность,СхемаДоступностиРеквизитов=Неопределено) Экспорт
	
	Если СхемаДоступностиРеквизитов=Неопределено ИЛИ СхемаДоступностиРеквизитов=Справочники.СхемаДоступностиРеквизитов.ПустаяСсылка() Тогда
		Для Каждого Элемент ИЗ Форма.Элементы Цикл
			
			Если ТипЗнч(Элемент)=Тип("ПолеФормы") ИЛИ ТипЗнч(Элемент)=Тип("ГруппаФормы") Тогда
				Элемент.ТолькоПросмотр = НЕ Доступность;
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		
		СхемаДляТекущейФормы =  СхемаДоступностиРеквизитов.ЭлементыФормы.Выгрузить();
		Для Каждого ЭлементСхемы ИЗ СхемаДляТекущейФормы Цикл
			Попытка
				Форма.Элементы[ЭлементСхемы.Путь].Доступность = ЭлементСхемы.Доступность;
			Исключение
			КонецПопытки;	
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры 

Функция ВернутьЦФОПоОбъекту(Ссылка) Экспорт
	
	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("ЦФО",Ссылка.Метаданные()) Тогда		
		ОрганизацияОтбор=Ссылка.ЦФО;	
	ИначеЕсли ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация",Ссылка.Метаданные()) Тогда
		ОрганизацияОтбор=Ссылка.Организация;	
	Иначе	
		ОрганизацияОтбор=Справочники.Организации.ПустаяСсылка();	
	КонецЕсли;
	
	Возврат ОрганизацияОтбор;
		
КонецФункции

Функция СоздатьЭтапАвтоМаршрута()
	
	Маршрут = Справочники.ШаблоныУниверсальныхПроцессов.Автоутверждение;
	
	Если ЗначениеЗаполнено(Справочники.ЭтапыУниверсальныхПроцессов.НайтиПоНаименованию("Автоутверждение",,,Маршрут)) Тогда
		ЭтапУтверждение = Справочники.ЭтапыУниверсальныхПроцессов.НайтиПоНаименованию("Автоутверждение",,,Маршрут);
		
		ЭтапУтверждениеОбъект = Неопределено;				
		СтрокиРольСотрудник = ЭтапУтверждение.Утверждающие.НайтиСтроки(Новый Структура("Пользователь, СпособАдресации", Справочники.РолиКонтактныхЛиц.Сотрудник, Перечисления.СпособыАдресацииСогласования.Роль));
		
		Если НЕ (СтрокиРольСотрудник.Количество() = 1 И ЭтапУтверждение.Утверждающие.Количество() = 1) тогда
			ЭтапУтверждениеОбъект = ЭтапУтверждение.ПолучитьОбъект();
			ЭтапУтверждениеОбъект.Утверждающие.Очистить();
			
			Согласующий = ЭтапУтверждениеОбъект.Утверждающие.Добавить();
			Согласующий.Пользователь = Справочники.РолиКонтактныхЛиц.Сотрудник;
			Согласующий.СпособАдресации = Перечисления.СпособыАдресацииСогласования.Роль;
		КонецЕсли;
		
		Если ЭтапУтверждениеОбъект <> Неопределено тогда
			Попытка
				ЭтапУтверждениеОбъект.Записать();
			Исключение
			конецпопытки;
		КонецЕсли;
		
		ЭтапУтвержден = Справочники.ЭтапыУниверсальныхПроцессов.НайтиПоНаименованию("Утверждение",,,Маршрут);
		
		Если ЭтапУтвержден.Пустая() тогда
			ЭтапУтвержденОбъект = Справочники.ЭтапыУниверсальныхПроцессов.СоздатьЭлемент();
			ЭтапУтвержденОбъект.Владелец = Маршрут;
			ЭтапУтвержденОбъект.Наименование = "Утверждение";
			ЭтапУтвержденОбъект.Автоутверждение = Истина;
			ЭтапУтвержденОбъект.ТипЭтапа=Перечисления.ТипыЭтаповУниверсальныхПроцессов.Автоутверждение;
			ЭтапУтвержденОбъект.ПорядковыйНомер =2;
			ЭтапУтвержденОбъект.СтатусСогласованияОбъекта = Перечисления.СостоянияСогласования.Утверждена;
			Попытка
				ЭтапУтвержденОбъект.Записать();
			Исключение
			конецпопытки;
		ИначеЕсли НЕ ЗначениеЗаполнено(ЭтапУтвержден.СтатусСогласованияОбъекта) тогда
			ЭтапУтвержденОбъект = ЭтапУтвержден.ПолучитьОбъект();
			ЭтапУтвержденОбъект.СтатусСогласованияОбъекта = Перечисления.СостоянияСогласования.Утверждена;
			Попытка
				ЭтапУтвержденОбъект.Записать();
			Исключение
			конецпопытки;
		КонецЕсли;
		
		Возврат ЭтапУтверждение;
	КонецЕсли;	
	
	НовыйЭтап1 = Справочники.ЭтапыУниверсальныхПроцессов.СоздатьЭлемент();
	НовыйЭтап1.Владелец = Маршрут;
	НовыйЭтап1.Наименование = "Автоутверждение";
	НовыйЭтап1.Автоутверждение = Истина;
	НовыйЭтап1.ТипЭтапа=Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования;
	НовыйЭтап1.ПорядковыйНомер =1;	
	
	Согласующий = НовыйЭтап1.Утверждающие.Добавить();
	Согласующий.Пользователь = Справочники.РолиКонтактныхЛиц.Сотрудник;
	Согласующий.СпособАдресации = Перечисления.СпособыАдресацииСогласования.Роль;
	
	НовыйЭтап2 = Справочники.ЭтапыУниверсальныхПроцессов.СоздатьЭлемент();
	НовыйЭтап2.Владелец = Маршрут;
	НовыйЭтап2.Наименование = "Утверждение";
	НовыйЭтап2.Автоутверждение = Истина;
	НовыйЭтап2.ТипЭтапа=Перечисления.ТипыЭтаповУниверсальныхПроцессов.Автоутверждение;
	НовыйЭтап2.ПорядковыйНомер =2;
	НовыйЭтап2.СтатусСогласованияОбъекта = Перечисления.СостоянияСогласования.Утверждена;
	НовыйЭтап2.Записать();	
	
	ТабличноеПолеПерехода = Новый ДеревоЗначений;
	ТабличноеПолеПерехода.Колонки.Добавить("ОтображениеДействия",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10,0));
	ТабличноеПолеПерехода.Колонки.Добавить("УсловиеДействие");
	ТабличноеПолеПерехода.Колонки.Добавить("Значение");
    ТабличноеПолеПерехода.Колонки.Добавить("ЗначениеОтбора");
	ТабличноеПолеПерехода.Колонки.Добавить("ОбработкаУсловия",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10,0));
    ТабличноеПолеПерехода.Колонки.Добавить("ЯвляетсяУсловием",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10,0));
	
	НСтр = ТабличноеПолеПерехода.Строки.Добавить();
	НСтр.Значение = НовыйЭтап2.Ссылка;
	НСтр.ЗначениеОтбора = Неопределено;
	НСтр.ОбработкаУсловия = 0;
    НСтр.ОтображениеДействия = 1;
	НСтр.УсловиеДействие = Перечисления.ДействияЭтапа.ПерейтиКЭтапу;
	НСтр.ЯвляетсяУсловием = 0; 
	 
	НовыйЭтап1.УсловияСогласования= Новый ХранилищеЗначения(ТабличноеПолеПерехода);
	НовыйЭтап1.Записать();
	
	НЭ = НовыйЭтап2.ЭтапыПредшественники.Добавить();	
	НЭ.Этап =  НовыйЭтап1.Ссылка;
	НовыйЭтап2.Записать();	
	
	Возврат НовыйЭтап1.Ссылка;
	
КонецФункции

// Возвращает массив пользоваталей, которым будет отправлено оповещение
// об отмене согласования объекта СсылкаНаОбъектВход инициатором.
Функция ПолучитьПолучателейОповещенияОтменыСогласованияИнициатором(СсылкаНаОбъектВход)
	РезультатФункции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭкземплярПроцесса.Ссылка КАК Ссылка,
		|	ЭкземплярПроцесса.КлючевойОбъектПроцесса КАК КлючевойОбъектПроцесса,
		|	ВыполнениеПроцессов.ОтветственныйЗаЭтап КАК ОтветственныйЗаЭтап,
		|	ВыполнениеПроцессов.Автор КАК Автор,
		|	ВыполнениеПроцессов.ЭтапПроцесса КАК ЭтапПроцесса,
		|	ВыполнениеПроцессов.СостояниеЭтапа КАК СостояниеЭтапа
		|ИЗ
		|	РегистрСведений.ВыполнениеПроцессов КАК ВыполнениеПроцессов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭкземплярПроцесса КАК ЭкземплярПроцесса
		|		ПО ВыполнениеПроцессов.ДокументПроцесса = ЭкземплярПроцесса.Ссылка
		|ГДЕ
		|	ЭкземплярПроцесса.КлючевойОбъектПроцесса = &КлючевойОбъектПроцесса
		|	И НЕ ЭкземплярПроцесса.ПометкаУдаления
		|	И ВыполнениеПроцессов.СостояниеЭтапа = &СостояниеЭтапаЗавершен";
	Запрос.УстановитьПараметр("КлючевойОбъектПроцесса", СсылкаНаОбъектВход);
	Запрос.УстановитьПараметр("СостояниеЭтапаЗавершен", Перечисления.СостоянияЭтаповУниверсальныхПроцессов.Завершен);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатФункции.Добавить(ВыборкаДетальныеЗаписи.Автор);
	КонецЦикла;
	РезультатФункции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатФункции);
	РезультатФункции = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(РезультатФункции);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьПолучателейОповещенияОтменыСогласованияИнициатором()

// Определяет, разрешено ли в данный момент инициатору отменить процесс по объекту СсылкаНаОбъектВход.
Функция РазрешеноОтменитьПроцессИнициатором(СсылкаНаОбъектВход)
	РезультатФункции = Истина;
	// Определение шаблона процесса.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭкземплярПроцесса.Ссылка КАК Ссылка,
		|	ЭкземплярПроцесса.КлючевойОбъектПроцесса КАК КлючевойОбъектПроцесса,
		|	ЭкземплярПроцесса.ШаблонПроцесса КАК ШаблонПроцесса
		|ИЗ
		|	Документ.ЭкземплярПроцесса КАК ЭкземплярПроцесса
		|ГДЕ
		|	ЭкземплярПроцесса.КлючевойОбъектПроцесса = &КлючевойОбъектПроцесса
		|	И НЕ ЭкземплярПроцесса.ПометкаУдаления";
	Запрос.УстановитьПараметр("КлючевойОбъектПроцесса", СсылкаНаОбъектВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Шаблон = Справочники.ШаблоныУниверсальныхПроцессов.ПустаяСсылка();
	ЭкземплярПроцесса = Документы.ЭкземплярПроцесса.ПустаяСсылка();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Шаблон = ВыборкаДетальныеЗаписи.ШаблонПроцесса;
		ЭкземплярПроцесса = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	// Проверка флага ЗапретитьОтзывСогласованияПриОтветеСогласующего
	Если (ЗначениеЗаполнено(Шаблон)) И (ЗначениеЗаполнено(ЭкземплярПроцесса)) Тогда
		ЗапретитьОтзывСогласованияПриОтветеСогласующего = Шаблон.ЗапретитьОтзывСогласованияПриОтветеСогласующего;
	Иначе
		ЗапретитьОтзывСогласованияПриОтветеСогласующего = Ложь;
	КонецЕсли;
	Если ЗапретитьОтзывСогласованияПриОтветеСогласующего Тогда
		// Есть запрет. Убедимся, что ещё не получена виза согласующего.
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВыполнениеПроцессов.ЭтапПроцесса КАК ЭтапПроцесса,
		|	ВыполнениеПроцессов.СостояниеЭтапа КАК СостояниеЭтапа,
		|	ВыполнениеПроцессов.ДокументПроцесса КАК ДокументПроцесса
		|ИЗ
		|	РегистрСведений.ВыполнениеПроцессов КАК ВыполнениеПроцессов
		|ГДЕ
		|	ВыполнениеПроцессов.ДокументПроцесса = &ДокументПроцесса
		|	И ВыполнениеПроцессов.СостояниеЭтапа В(&СостояниеЭтапа)
		|	И ВыполнениеПроцессов.ЭтапПроцесса.ТипЭтапа В(&ТипЭтапа)";
		Запрос.УстановитьПараметр("ДокументПроцесса", ЭкземплярПроцесса);
		МассивСостояний = Новый Массив;
		МассивСостояний.Добавить(Перечисления.СостоянияЭтаповУниверсальныхПроцессов.Завершен);
		Запрос.УстановитьПараметр("СостояниеЭтапа", МассивСостояний);
		МассивТипЭтапа = Новый Массив;
		МассивТипЭтапа.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.ДочернийМаршрут);
		МассивТипЭтапа.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход);
		МассивТипЭтапа.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования);
		Запрос.УстановитьПараметр("ТипЭтапа", МассивТипЭтапа);		
		РезультатЗапроса = Запрос.Выполнить();
		РезультатФункции = РезультатЗапроса.Пустой();
	Иначе
		// Запрет не установлен. Отмена согласования разрешена.
		РезультатФункции = Истина;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// РазрешеноОтменитьПроцессИнициатором()

Процедура ОтменитьСогласование(Форма = Неопределено, Ссылка = Неопределено, ОтменятьПроведениеВход = Истина, ТекстОповещенияСогласующимВход = "", Отказ = Ложь) Экспорт 
	// Инициализация.
	ОбъектСсылка = ?(Форма = Неопределено, Ссылка, Форма.Объект.Ссылка);
	ОрганизацияОбъекта = МодульОбработкиЭтаповПроцессовСерверУХ.ПолучитьОрганизациюОбъекта(ОбъектСсылка);
	// Проверим полномочия пользователя для отмены согласования.
	ЕстьСуперПользователь = МодульСогласованияДокументовУХ.ЕстьСуперПользователь(ОрганизацияОбъекта);
	Попытка
		Если ЕстьСуперПользователь Тогда
			ОтменитьСогласованиеОбъекта(ОбъектСсылка, ОтменятьПроведениеВход);
		Иначе
			// Проверим возможность отменить процесс инициатором.
			ЭтоИнициатор = ЭтоИнициаторСогласования(Ссылка);
			Если ЭтоИнициатор Тогда
				РазрешеноОтменитьПроцессИнициатором = РазрешеноОтменитьПроцессИнициатором(ОбъектСсылка);
				Если РазрешеноОтменитьПроцессИнициатором  Тогда
					// Прав достаточно. Сбросим процесс и, при необходимости, оповестим согласующих.
					МассивПолучателейОповещения = ПолучитьПолучателейОповещенияОтменыСогласованияИнициатором(ОбъектСсылка);
					// Сбросим процесс.
					ОтменитьСогласованиеОбъекта(ОбъектСсылка, ОтменятьПроведениеВход);
					// Оповестим согласующих об отмене процесса инициатором.
					ВидСобытия = Справочники.ВидыСобытийОповещений.СогласованиеОтмененоИнициатором;
					СтруктураДополнительныхПараметров = Новый Структура;
					СтруктураДополнительныхПараметров.Вставить("Инициатор", Пользователи.ТекущийПользователь());
					СтруктураДополнительныхПараметров.Вставить("КомментарийИнициатора", ТекстОповещенияСогласующимВход);
					РезультатФункции = МодульУправленияОповещениямиУХ.ОповеститьПользователей(ВидСобытия, , ОбъектСсылка, МассивПолучателейОповещения, СтруктураДополнительныхПараметров);
				Иначе
					ТекстСообщения = НСтр("ru = 'По объекту %Объект% согласующие уже установили визу. Операция отменена.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Строка(ОбъектСсылка));
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				КонецЕсли;
			Иначе
				// Недостаточно полномочий.
				ТекстСообщения = НСтр("ru = 'У пользователя недостаточно прав для отмены согласования. Отменить согласование может только пользователь с ролью Суперпользователь, либо инициатор согласования. Роли могут быть назначены в функционале ""Ответственные по организациям"".'");
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось отменить согласование объекта %ОбъектСогласования%: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбъектСогласования%", Строка(ОбъектСсылка));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры

Процедура ОтменитьСогласованиеОбъекта(ОбъектСсылка, ОтменятьПроведениеВход = Истина) Экспорт
	// Инициализация.
	ЕстьОшибки = Ложь;
	НачатьТранзакцию();
	ИдентификаторСообщения = Строка(Новый УникальныйИдентификатор);
	ДополнительныеПараметры = СформироватьДополнительныеПараметрыСогласования();
	ДополнительныеПараметры.Вставить("ИдентификаторСообщения", ИдентификаторСообщения);
	ДополнительныеПараметры.Вставить("ВыполнятьОбработкуИзмененияСостояния", Истина);
	ДополнительныеПараметры.Вставить("ОтменятьПроведение", ОтменятьПроведениеВход);
	ВидОповещенияПроцессОстановлен = Перечисления.ВидыОповещенийПользователейУХ.ПроцессОстановлен;
	// Получение экземпляров процесса по объекту.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СогласованиеДокументов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЭкземплярПроцесса КАК СогласованиеДокументов
	|ГДЕ
	|	СогласованиеДокументов.КлючевойОбъектПроцесса = &ОбъектСсылка
	|	И СогласованиеДокументов.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("ОбъектСсылка", ОбъектСсылка.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	ДокументПроцесса = Неопределено;
	Пока Выборка.Следующий() Цикл
		// Остановка процесса.
		РезультатОстановки = ОстановитьПроцесс(Выборка.Ссылка);
		Если НЕ РезультатОстановки Тогда
			ЕстьОшибки = Истина;
		Иначе
			// Процесс успешно остановлен.
		КонецЕсли;
		// Логгирование.
		ДокументПроцесса = Выборка.Ссылка;
		ТекстЛог = НСтр("ru = 'Отмена процесса согласования'");
		ДобавитьЗаписьВлогПроцесса(Выборка.Ссылка, , , ТекстЛог, ВидОповещенияПроцессОстановлен, , ИдентификаторСообщения);
	КонецЦикла;
			
	РезультатПеревода = УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВСостояниеОтклонена(ОбъектСсылка,,, ДокументПроцесса,, ДополнительныеПараметры);
		
	Если НЕ РезультатПеревода Тогда
		ЕстьОшибки = Истина;
	Иначе
		// Заявка успешно переведена в новый статус.
	КонецЕсли;
	// Отмена проведения документа.
	Если (ОтменятьПроведениеВход) И (ОбщегоНазначения.ВидОбъектаПоСсылке(ОбъектСсылка) = "Документ") Тогда
		Если ОбъектСсылка.Проведен Тогда
			ДокументОбъект = ОбъектСсылка.ПолучитьОбъект();
			ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		Иначе
			// Документ не был проведён. Пропускаем отмену.
		КонецЕсли;
	Иначе
		// Для прочих объектов не требуется отмена проведения.
	КонецЕсли; 
	// Фиксирование транзакции.
	Если ЕстьОшибки Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
КонецПроцедуры

Процедура  УдалитьЗаписиВРегистреСостояний(Ссылка) Экспорт
	
	НаборЗаписей = РегистрыСведений.РегистрСостоянийОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Значение      = Ссылка;
	НаборЗаписей.Отбор.Объект.Использование = Истина;
	НаборЗаписей.Записать(Истина);

	
КонецПроцедуры	

// Возвращает значения ответственных в таблице ТаблицаОтветственныхВход по колонке
// ТипОтветственногоВход. Когда указан один ответственный - будет возвращён он, иначе -
// массив ответственных.
Функция ПолучитьЗначениеОтветственныхИзТаблицы(ТаблицаОтветственныхВход, ТипОтветственногоВход)
	РезультатФункции = Справочники.Пользователи.ПустаяСсылка();
	// Выгрузим и свернём нужную колонку.
	ВыгрузкаКолонки = Новый Массив;
	Если ТипОтветственногоВход = "Исполнитель" Тогда
		ВыгрузкаКолонки = ТаблицаОтветственныхВход.ВыгрузитьКолонку("Исполняющий");
	Иначе
		ВыгрузкаКолонки = ТаблицаОтветственныхВход.ВыгрузитьКолонку("Согласование");
	КонецЕсли;
	ВыгрузкаКолонки = ОбщегоНазначенияКлиентСервер.СвернутьМассив(ВыгрузкаКолонки);
	// Вернём результат в зависимости от разности выборки.
	Если ВыгрузкаКолонки.Количество() = 0 Тогда
		РезультатФункции = Справочники.Пользователи.ПустаяСсылка();
	ИначеЕсли ВыгрузкаКолонки.Количество() = 1 Тогда
		РезультатФункции = ВыгрузкаКолонки[0];
	Иначе
		РезультатФункции = ВыгрузкаКолонки;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Возвращает копию таблицы ТаблицаВход, отобранную по максимальному значению поля
// Приоритет.
Функция ВернутьСтрокиОтветственныхСМаксимальнымПриоритетом(ТаблицаВход)
	РезультатФункции = ТаблицаВход.СкопироватьКолонки();
	// Поиск максимального приоритета.
	МаксимальныйПриоритет = -1;
	Для Каждого ТекТаблицаВход Из ТаблицаВход Цикл
		Если ТекТаблицаВход.Приоритет > МаксимальныйПриоритет Тогда
			МаксимальныйПриоритет = ТекТаблицаВход.Приоритет;
		Иначе
			// Выполняем поиск далее.
		КонецЕсли;
	КонецЦикла;	
	// Занесение в итоговую таблицу строк с максимальным приоритетом.
	Если МаксимальныйПриоритет <> -1 Тогда
		Для Каждого ТекТаблицаВход Из ТаблицаВход Цикл
			Если ТекТаблицаВход.Приоритет = МаксимальныйПриоритет Тогда
				НоваяСтрока = РезультатФункции.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекТаблицаВход);
			Иначе
				// Строка с более низким приоритетом. Не включаем её.
			КонецЕсли;
		КонецЦикла;	
	Иначе
		РезультатФункции = ТаблицаВход.Скопировать();
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ВернутьСтрокиОтветственныхСМаксимальнымПриоритетом()

// Возвращает таблицу значений, содержащих ответственных из матрицы полномочий по 
// настройкам входных параметров.
Функция ПолучитьТаблицуОтветственныхПоМатрицеПолномочий(РазделятьПоОрганизациямВход, РазделятьПоПроектамВход, ОрганизацияВход, ПроектВход, МетаданныеВход, ШаблонДокументаБдВход, ВерсияРегламентаВход) Экспорт
	РезультатФункции = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТОрганизации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Проекты.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВТПроекты
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	НЕ Проекты.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА &РазделятьПоОрганизациям
	|			ТОГДА Организации.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА &РазделятьПоПроектам
	|			ТОГДА Проекты.Ссылка
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	|	КОНЕЦ КАК Проект
	|ПОМЕСТИТЬ ВТ_ОрганизацииПроекты
	|ИЗ
	|	ВТОрганизации КАК Организации,
	|	ВТПроекты КАК Проекты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РегистрМатрицыПолномочий.ШаблонДокументаБД КАК ШаблонДокументаБД,
	|	РегистрМатрицыПолномочий.ДокументБД КАК ДокументБД,
	|	РегистрМатрицыПолномочий.ВерсияРегламентаПодготовкиОтчетности КАК ВерсияРегламентаПодготовкиОтчетности,
	|	РегистрМатрицыПолномочий.Организация КАК Организация,
	|	РегистрМатрицыПолномочий.Проект КАК Проект,
	|	РегистрМатрицыПолномочий.Исполняющий КАК Исполняющий,
	|	РегистрМатрицыПолномочий.Исполняющий_Организация КАК Исполняющий_Организация,
	|	РегистрМатрицыПолномочий.Согласование КАК Согласование,
	|	РегистрМатрицыПолномочий.Согласование_Организация КАК Согласование_Организация
	|ПОМЕСТИТЬ ВТ_ДанныеРегистра
	|ИЗ
	|	РегистрСведений.РегистрМатрицыПолномочий КАК РегистрМатрицыПолномочий
	|ГДЕ
	|	РегистрМатрицыПолномочий.ДокументБД = &ДокументБД
	|	И РегистрМатрицыПолномочий.ШаблонДокументаБД = &ШаблонДокументаБД
	|	И РегистрМатрицыПолномочий.ВерсияРегламентаПодготовкиОтчетности = &ВерсияРегламентаПодготовкиОтчетности
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_ОрганизацииПроекты.Организация КАК Организация,
	|	ЕСТЬNULL(ВТ_ДанныеРегистра.Исполняющий, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Исполняющий,
	|	ЕСТЬNULL(ВТ_ДанныеРегистра.Согласование, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Согласование,
	|	ВТ_ОрганизацииПроекты.Проект КАК Проект
	|ПОМЕСТИТЬ ВТ_МатрицаРасширенная
	|ИЗ
	|	ВТ_ОрганизацииПроекты КАК ВТ_ОрганизацииПроекты
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ДанныеРегистра КАК ВТ_ДанныеРегистра
	|		ПО (ВТ_ДанныеРегистра.Организация = ВТ_ОрганизацииПроекты.Организация)
	|			И (ВТ_ДанныеРегистра.Проект = ВТ_ОрганизацииПроекты.Проект)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВТ_МатрицаРасширенная.Исполняющий КАК Исполняющий,
	|	ВТ_МатрицаРасширенная.Согласование КАК Согласование,
	|	ВЫБОР
	|		КОГДА ВТ_МатрицаРасширенная.Организация В (ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
	|			ТОГДА ВЫБОР
	|					КОГДА ВТ_МатрицаРасширенная.Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	|							ИЛИ ВТ_МатрицаРасширенная.Проект = НЕОПРЕДЕЛЕНО
	|						ТОГДА 1
	|					ИНАЧЕ 3
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВТ_МатрицаРасширенная.Проект = ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка)
	|						ИЛИ ВТ_МатрицаРасширенная.Проект = НЕОПРЕДЕЛЕНО
	|					ТОГДА 2
	|				ИНАЧЕ 4
	|			КОНЕЦ
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ ВТ_МатрицаСПриоритетами
	|ИЗ
	|	ВТ_МатрицаРасширенная КАК ВТ_МатрицаРасширенная
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &РазделятьПоПроектам
	|				ТОГДА ВТ_МатрицаРасширенная.Проект В (&Проект, ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
	|			ИНАЧЕ ВТ_МатрицаРасширенная.Проект В (ЗНАЧЕНИЕ(Справочник.Проекты.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
	|		КОНЕЦ
	|	И ВЫБОР
	|			КОГДА &РазделятьПоОрганизациям
	|				ТОГДА ВТ_МатрицаРасширенная.Организация В (&Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
	|			ИНАЧЕ ВТ_МатрицаРасширенная.Организация В (ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
	|		КОНЕЦ
	|	И НЕ(ВТ_МатрицаРасширенная.Организация = НЕОПРЕДЕЛЕНО
	|				И ВТ_МатрицаРасширенная.Проект = НЕОПРЕДЕЛЕНО
	|				И ВТ_МатрицаРасширенная.Исполняющий = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|				И ВТ_МатрицаРасширенная.Согласование = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОтветственныеОрганизаций.Организация КАК Организация,
	|	ОтветственныеОрганизаций.Роль КАК Роль,
	|	ОтветственныеОрганизаций.Пользователь КАК Пользователь
	|ПОМЕСТИТЬ ВТ_Роли
	|ИЗ
	|	РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций
	|ГДЕ
	|	ОтветственныеОрганизаций.Организация В (&Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка), &ШаблонДокументаБД, ЗНАЧЕНИЕ(Справочник.ОбластиДанныхВидовОтчетов.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА ВТ_МатрицаСПриоритетами.Исполняющий ССЫЛКА Справочник.РолиКонтактныхЛиц
	|			ТОГДА ВТ_МатрицаСПриоритетами.Исполняющий
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РолиКонтактныхЛиц.ПустаяСсылка)
	|	КОНЕЦ КАК ИсполняющийРоль,
	|	ВЫБОР
	|		КОГДА ВТ_МатрицаСПриоритетами.Согласование ССЫЛКА Справочник.РолиКонтактныхЛиц
	|			ТОГДА ВТ_МатрицаСПриоритетами.Согласование
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.РолиКонтактныхЛиц.ПустаяСсылка)
	|	КОНЕЦ КАК СогласованиеРоль,
	|	ВЫБОР
	|		КОГДА ВТ_МатрицаСПриоритетами.Согласование ССЫЛКА Справочник.РолиКонтактныхЛиц
	|			ТОГДА ЕСТЬNULL(ВТ_РолиСогласование.Пользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|		ИНАЧЕ ВТ_МатрицаСПриоритетами.Согласование
	|	КОНЕЦ КАК Согласование,
	|	ВТ_МатрицаСПриоритетами.Приоритет КАК Приоритет,
	|	ВТ_МатрицаСПриоритетами.Исполняющий КАК Исполняющий
	|ПОМЕСТИТЬ ВТ_Согласование
	|ИЗ
	|	ВТ_МатрицаСПриоритетами КАК ВТ_МатрицаСПриоритетами
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Роли КАК ВТ_РолиСогласование
	|		ПО ВТ_МатрицаСПриоритетами.Согласование = ВТ_РолиСогласование.Роль
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Согласование.ИсполняющийРоль КАК ИсполняющийРоль,
	|	ВТ_Согласование.СогласованиеРоль КАК СогласованиеРоль,
	|	ВТ_Согласование.Согласование КАК Согласование,
	|	ВЫБОР
	|		КОГДА ВТ_Согласование.Исполняющий ССЫЛКА Справочник.РолиКонтактныхЛиц
	|			ТОГДА ЕСТЬNULL(ВТ_Роли.Пользователь, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|		ИНАЧЕ ВТ_Согласование.Исполняющий
	|	КОНЕЦ КАК Исполняющий,
	|	ВТ_Согласование.Приоритет КАК Приоритет
	|ИЗ
	|	ВТ_Согласование КАК ВТ_Согласование
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Роли КАК ВТ_Роли
	|		ПО ВТ_Согласование.ИсполняющийРоль = ВТ_Роли.Роль";
	
	Запрос.УстановитьПараметр("ВерсияРегламентаПодготовкиОтчетности",	 ВерсияРегламентаВход);
	Запрос.УстановитьПараметр("ДокументБД",								 МетаданныеВход);
	Запрос.УстановитьПараметр("Организация",							 ОрганизацияВход);
	Запрос.УстановитьПараметр("Проект",									 ПроектВход);
	Запрос.УстановитьПараметр("РазделятьПоОрганизациям",				 РазделятьПоОрганизациямВход);
	Запрос.УстановитьПараметр("РазделятьПоПроектам",					 РазделятьПоПроектамВход);
	Запрос.УстановитьПараметр("ШаблонДокументаБД",						 ШаблонДокументаБдВход);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	РезультатФункции = ВернутьСтрокиОтветственныхСМаксимальнымПриоритетом(РезультатФункции);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьТаблицуОтветственныхПоМатрицеПолномочий()

// Возвращает ответственного, выбирая его между пользователем ПользовательВход
// и ролью РольВход.
Функция РазрешитьОтветственноеЛицо(ПользовательВход, РольВход)
	РезультатФункции = ПользовательВход;
	Если ЗначениеЗаполнено(ПользовательВход) Тогда
		Если ТипЗнч(ПользовательВход) = Тип("СправочникСсылка.РолиКонтактныхЛиц") Тогда
			РезультатФункции = РольВход;
		Иначе	
			РезультатФункции = ПользовательВход;
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(РольВход) Тогда
		РезультатФункции = РольВход;
	Иначе
		РезультатФункции = ПользовательВход;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

Функция ПолучитьОтветственногоЗаТипОбъекта(ОбъектВход, Знач Организация=Неопределено, Проект = Неопределено, ШаблонДокументаБД=Неопределено, ТипОтветственного=Неопределено, ВыгружатьСвернуто=Ложь, ДополнительныеПараметрыВход = Неопределено) Экспорт
	// В качестве входного значения может выступать как ссылка, так и объект формы. Выделим ссылку для получения по ней метаданных.
	Если ТипЗнч(ОбъектВход) = Тип("ДанныеФормыСтруктура") Тогда
		РабочаяСсылка = ОбъектВход.Ссылка;
	Иначе
		РабочаяСсылка = ОбъектВход;
	КонецЕсли;
	// Получение параметров для передачи в запрос.
	ИспользуетсяВНастройкахРеглмента = Ложь;
	ИспользуемаяВерсияРегламента = Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка();
		
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(РабочаяСсылка)) Тогда
		ТекМетаданные = Справочники.СправочникиБД.НайтиПоНаименованию(РабочаяСсылка.Метаданные().имя,,,Справочники.ТипыБазДанных.ТекущаяИБ);		
		ШаблонДокументаБД = ТекМетаданные;
	Иначе	
		ТекМетаданные = Справочники.ДокументыБД.НайтиПоНаименованию(РабочаяСсылка.Метаданные().имя,,,Справочники.ТипыБазДанных.ТекущаяИБ);
		Если СокрЛП(ТекМетаданные.РеквизитШаблонаДокумета)<>"" Тогда
			Если ШаблонДокументаБД = Неопределено Тогда
				ШаблонДокументаБД = ОбъектВход[ТекМетаданные.РеквизитШаблонаДокумета];
			Иначе
				// Шаблон установлен. Не изменём его.
			КонецЕсли;
		Иначе	
			ШаблонДокументаБД = ТекМетаданные;
		КонецЕсли;
		
		ИспользуетсяВНастройкахРеглмента = ТекМетаданные.ИспользуетсяВНастройкахРеглмента;
		Если ИспользуетсяВНастройкахРеглмента Тогда 
			Если ТипЗнч(РабочаяСсылка) = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
				Если ТипЗнч(ДополнительныеПараметрыВход) = Тип("Структура") Тогда
					ПериодРабочий = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметрыВход, "ПериодОтчета", ОбъектВход.ПериодОтчета);
					СценарийРабочий = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметрыВход, "Сценарий", ОбъектВход.Сценарий);
					ИспользуемаяВерсияРегламента = ПолныеПраваУХ.ВернутьВерсиюОрганизационнойСтруктурыПоПериодСценарию(ПериодРабочий, СценарийРабочий);
				Иначе
					ИспользуемаяВерсияРегламента = ПолныеПраваУХ.ВернутьВерсиюОрганизационнойСтруктурыПоПериодСценарию(ОбъектВход.ПериодОтчета, ОбъектВход.Сценарий);
				КонецЕсли;
			ИначеЕсли ТипЗнч(РабочаяСсылка) = Тип("ДокументСсылка.РакурсДанных") Тогда
				ИспользуемаяВерсияРегламента = ПолныеПраваУХ.ВернутьВерсиюОрганизационнойСтруктурыПоПериодСценарию(ОбъектВход.ПериодОтчета, ОбъектВход.Сценарий);
			ИначеЕсли ТипЗнч(РабочаяСсылка) = Тип("ДокументСсылка.УправлениеПериодомСценария") Тогда 	
				ИспользуемаяВерсияРегламента = ПолныеПраваУХ.ВернутьВерсиюОрганизационнойСтруктурыПоПериодСценарию(ОбъектВход.ПериодСценария, ОбъектВход.Сценарий);
			Иначе
				ИспользуемаяВерсияРегламента = Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;	

	
	Если РабочаяСсылка.Метаданные().имя = "РакурсДанных" Тогда
		
		РазделятьПоОрганизациям = ШаблонДокументаБД.РазделятьПоОрганизациям;
		РазделятьПоПроектам 	= ШаблонДокументаБД.РазделятьПоПроектам;
		
	Иначе	
		
		РазделятьПоОрганизациям = ТекМетаданные.РазделятьПоОрганизациям;
		РазделятьПоПроектам = ТекМетаданные.РазделятьПоПроектам;
		
	КонецЕсли;
	
	Если РазделятьПоОрганизациям Тогда
		Если Организация = Неопределено Тогда
			Если ЗначениеЗаполнено(ТекМетаданные.РеквизитРазделенияПоОрганизациям) Тогда
				Организация = ОбъектВход[ТекМетаданные.РеквизитРазделенияПоОрганизациям];
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось получить реквизит Организация для объекта %Ссылка%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Строка(РабочаяСсылка));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				Организация = Справочники.Организации.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если РазделятьПоПроектам Тогда
		Если Проект=Неопределено Тогда
			Если ЗначениеЗаполнено(ТекМетаданные.РеквизитРазделенияПоПроектам) Тогда
				Проект = ОбъектВход[ТекМетаданные.РеквизитРазделенияПоПроектам];	
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось получить реквизит Проект для объекта %Ссылка%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Строка(РабочаяСсылка));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				Проект = Справочники.Проекты.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	// Получение данных по параметрам.
	Если ЗначениеЗаполнено(ИспользуемаяВерсияРегламента) Тогда
		Если ТипЗнч(РабочаяСсылка) = Тип("ДокументСсылка.УправлениеПериодомСценария") Тогда
			Ответственные = Новый ТаблицаЗначений;	
			Ответственные.Колонки.Добавить("Исполняющий");
			Ответственные.Колонки.Добавить("ИсполняющийРоль");
			Ответственные.Колонки.Добавить("Согласование");
			Ответственные.Колонки.Добавить("СогласованиеРоль");
			Шаблон = Справочники.ШаблоныУниверсальныхПроцессов.ПустаяСсылка();		
			ОпределитьСвязанныйШаблон(ИспользуемаяВерсияРегламента, Шаблон);
			НоваяСтрока = Ответственные.Добавить();
			НоваяСтрока.Исполняющий			 = Справочники.Пользователи.ПустаяСсылка();
			НоваяСтрока.ИсполняющийРоль		 = Справочники.РолиКонтактныхЛиц.ПустаяСсылка();
			НоваяСтрока.Согласование		 = Шаблон;
			НоваяСтрока.СогласованиеРоль	 = Справочники.РолиКонтактныхЛиц.ПустаяСсылка();
		Иначе
			Ответственные = ПолучитьТаблицуОтветственныхПоМатрицеПолномочий(РазделятьПоОрганизациям, РазделятьПоПроектам, Организация, Проект, ТекМетаданные, ШаблонДокументаБД, ИспользуемаяВерсияРегламента);
		КонецЕсли;
	Иначе	
		Ответственные = ПолучитьТаблицуОтветственныхПоМатрицеПолномочий(РазделятьПоОрганизациям, РазделятьПоПроектам, Организация, Проект, ТекМетаданные, ШаблонДокументаБД, ИспользуемаяВерсияРегламента);
	КонецЕсли;
	// Обход полученной таблицы.
	Если ВыгружатьСвернуто Тогда
		Если Ответственные.Количество() = 0 Тогда
			РезультатФункции = Справочники.ШаблоныУниверсальныхПроцессов.ПустаяСсылка();
		ИначеЕсли  Ответственные.Количество() = 1 Тогда	
			ПерваяСтрокаОтветственные = Ответственные[0];
			ОтветственныйПользователь	 = Справочники.Пользователи.ПустаяСсылка();
			ОтветственнаяРоль			 = Справочники.РолиКонтактныхЛиц.ПустаяСсылка();
			Если ТипОтветственного = "Исполнитель" Тогда
				ОтветственныйПользователь	 = ПерваяСтрокаОтветственные.Исполняющий;
				ОтветственнаяРоль			 = ПерваяСтрокаОтветственные.ИсполняющийРоль;
			Иначе
				ОтветственныйПользователь	 = ПерваяСтрокаОтветственные.Согласование;
				ОтветственнаяРоль			 = ПерваяСтрокаОтветственные.СогласованиеРоль;
			КонецЕсли;	
			РезультатФункции = РазрешитьОтветственноеЛицо(ОтветственныйПользователь, ОтветственнаяРоль);
		Иначе
			Если ТипОтветственного = "Исполнитель" Тогда
				РезультатФункции = Ответственные.ВыгрузитьКолонку("ИсполняющийРоль")[0];	
			Иначе
				РезультатФункции = Ответственные.ВыгрузитьКолонку("СогласованиеРоль")[0];	
			КонецЕсли;	
		КонецЕсли;	
	Иначе
		РезультатФункции = ПолучитьЗначениеОтветственныхИзТаблицы(Ответственные, ТипОтветственного);
	КонецЕсли;

	Возврат РезультатФункции;
КонецФункции


Функция ПроцессЗаверщен(КлючевойОбъектПроцесса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭкземплярПроцесса.Ссылка,
	|	ЭкземплярПроцесса.СостояниеВыполнения
	|ИЗ
	|	Документ.ЭкземплярПроцесса КАК ЭкземплярПроцесса
	|ГДЕ
	|	ЭкземплярПроцесса.КлючевойОбъектПроцесса = &Ссылка
	|	И ЭкземплярПроцесса.ПометкаУдаления = ЛОЖЬ";

	
	Запрос.УстановитьПараметр("Ссылка", КлючевойОбъектПроцесса);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СостояниеВыполнения = Перечисления.СостоянияПроцесса.Завершен;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Добавляет в таблицу ответственных ТабОтветственныхИзм пользователя ПользовательВход
// по строке СтрокаОтветственныхВход, попутно изменяя представление СтрокаПредставленияИзм.
Процедура ДобавитьПользователяВТаблицуОтветсвенных(ПользовательВход, СтрокаОтветственныхВход, ТабОтветственныхИзм, СтрокаПредставленияИзм)
	Если ЗначениеЗаполнено(ПользовательВход) Тогда
		НоваяСтрока = ТабОтветственныхИзм.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаОтветственныхВход);
		НоваяСтрока.Пользователь = ПользовательВход; 
		СтрокаПредставленияИзм = СтрокаПредставленияИзм + Строка(ПользовательВход) + ",";
	Иначе
		// Пустой пользователь. Пропускаем.
	КонецЕсли;
КонецПроцедуры		// ДобавитьПользователяВТаблицуОтветсвенных()

// По настройкам расширенной адресации АдресацияВход получет рукводителя пользоавтеля ПользовательВход
// по структуре реквизита РеквизитСогласованияВход.
Функция РуководительПользователя(ПользовательВход, АдресацияВход, РеквизитСогласованияВход)
	// Инициализация.
	РезультатФункции = ПользовательВход;
	РольРуководитель = Справочники.РолиКонтактныхЛиц.Руководитель;
	// Получение реквизита согласования нужного уровня иерархии.
	ТекРеквизитСогласования = РеквизитСогласованияВход;
	Если ЗначениеЗаполнено(АдресацияВход) Тогда
		Если АдресацияВход.АдресацияРуководителю Тогда
			Для Счетчик = 1 По АдресацияВход.УровеньРуководителя Цикл
				ТекРеквизитСогласования = ТекРеквизитСогласования.Родитель;
			КонецЦикла;
			// Добавление руководителей за полученный реквизит согласования.
			МассивОтветственных = ПолучитьОтветственныхПоРоли(ТекРеквизитСогласования, РольРуководитель);
			Если МассивОтветственных.Количество() > 0 Тогда
				РезультатФункции = МассивОтветственных[0];
			Иначе
				ТекстСообщения = НСтр("ru = 'Для реквизита согласования ""%РеквизитСогласования%"" не указан пользователь с ролью ""Руководитель""'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РеквизитСогласования%", Строка(РеквизитСогласованияВход));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		Иначе
			РезультатФункции = ПользовательВход;		 // Не требуется адресация руководителю. Вернём исходного пользователя.
		КонецЕсли;
	Иначе
		РезультатФункции = ПользовательВход;			 // Адресация не указана. Возвращаем исходного пользователя.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// РуководительПользователя()

// Осуществляет расшифровку расширенной адресации для вида адресации ПользовательИзРеквизита.
Процедура ПользовательИзРеквизитаРасширеннаяАдресация(ДокументПроцессаВход, АдресацияВход, СтрокаОтветственныхВход, ТабОтветственныхИзм, СтрокаПредставленияИзм)
	Если ЗначениеЗаполнено(ДокументПроцессаВход) Тогда
		ОбъектСогласования = ДокументПроцессаВход.КлючевойОбъектПроцесса;
		Если ЗначениеЗаполнено(ОбъектСогласования) Тогда
			// Получим пользователя в реквизите.
			ИскомыйРеквизит = АдресацияВход.РеквизитПользователя;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектСогласования, ИскомыйРеквизит) Тогда
				НовыйОтветственный = ОбъектСогласования[ИскомыйРеквизит];
				// Получим руководителя пользователя.
				ОрганизацияОбъекта = МодульОбработкиЭтаповПроцессовСерверУХ.ПолучитьОрганизациюОбъекта(ОбъектСогласования);
				НовыйОтветственный = РуководительПользователя(НовыйОтветственный, АдресацияВход, ОрганизацияОбъекта);
				// Добавление готового варианта в таблицу.
				ДобавитьПользователяВТаблицуОтветсвенных(НовыйОтветственный, СтрокаОтветственныхВход, ТабОтветственныхИзм, СтрокаПредставленияИзм);
			Иначе
				ТекстСообщения = НСтр("ru = 'В объекте ""%Объект%"" не найден реквизит расширенной адресации ""%Реквизит%"". Операция пропущена.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Строка(ОбъектСогласования));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Реквизит%", Строка(ИскомыйРеквизит));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Объект согласования для расширенной адресации по процессу ""%Процесс%"" не задан. Операция пропущена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Процесс%", Строка(ДокументПроцессаВход));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Пустой документ согласования. Пропускаем.
	КонецЕсли;
КонецПроцедуры		// ПользовательИзРеквизитаРасширеннаяАдресация()

// Осуществляет расшифровку расширенной адресации для вида адресации ИнициаторПроцесса.
Процедура ИнициаторПроцессаРасширеннаяАдресация(ДокументПроцессаВход, АдресацияВход, СтрокаОтветственныхВход, ТабОтветственныхИзм, СтрокаПредставленияИзм)
	Если ЗначениеЗаполнено(ДокументПроцессаВход) Тогда
		// Получим инициатора процесса.
		НовыйОтветственный = Документы.ЭкземплярПроцесса.ВернутьИнициатораПроцесса(ДокументПроцессаВход);
		// Получим руководителя пользователя.
		ОбъектСогласования = ДокументПроцессаВход.КлючевойОбъектПроцесса;
		ОрганизацияОбъекта = МодульОбработкиЭтаповПроцессовСерверУХ.ПолучитьОрганизациюОбъекта(ОбъектСогласования);
		НовыйОтветственный = РуководительПользователя(НовыйОтветственный, АдресацияВход, ОрганизацияОбъекта);
		// Добавление готового варианта в таблицу.
		ДобавитьПользователяВТаблицуОтветсвенных(НовыйОтветственный, СтрокаОтветственныхВход, ТабОтветственныхИзм, СтрокаПредставленияИзм);
	Иначе
		// Пустой документ согласования. Пропускаем.
	КонецЕсли;
КонецПроцедуры		// ПользовательИзРеквизитаРасширеннаяАдресация()

// Осуществляет расшифровку расширенной адресации для вида адресации ПроизвольныйКод.
Процедура ПроизвольныйКодРасширеннаяАдресация(ДокументПроцессаВход, АдресацияВход, СтрокаОтветственныхВход, ТабОтветственныхИзм, СтрокаПредставленияИзм)
	
	Если ЗначениеЗаполнено(ДокументПроцессаВход) Тогда
		
		КодПроцедуры = АдресацияВход.ТекстПроцедуры;
		ЗначениеПараметра = Справочники.Пользователи.ПустаяСсылка();
		Выполнить(КодПроцедуры);
		Если ТипЗнч(ЗначениеПараметра) = Тип("СправочникСсылка.Пользователи") Тогда
			ДобавитьПользователяВТаблицуОтветсвенных(ЗначениеПараметра, СтрокаОтветственныхВход, ТабОтветственныхИзм, СтрокаПредставленияИзм);
		ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
			Для Каждого ТекЗначениеПараметра Из ЗначениеПараметра Цикл
				ДобавитьПользователяВТаблицуОтветсвенных(ТекЗначениеПараметра, СтрокаОтветственныхВход, ТабОтветственныхИзм, СтрокаПредставленияИзм);
			КонецЦикла;	
		Иначе
			ТекстСообщения = НСтр("ru = 'Неизвестный вариант заполнения параметра - %ЗначениеПараметра%. Значение пропущено.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЗначениеПараметра%", Строка(ЗначениеПараметра));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Пустой документ согласования. Пропускаем.
	КонецЕсли;
	
КонецПроцедуры		// ПроизвольныйКодРасширеннаяАдресация()

// Вовзращает массив ответственных за роль РольВход для объекта ролевой адресации 
// ОбъектРолевойАдресацииВход.
Функция ПолучитьОтветственныхПоРоли(ОбъектРолевойАдресацииВход, РольВход) 
	РезультатФункции = Новый Массив;
	Запрос = Новый Запрос;	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОтветственныеОрганизаций.Организация КАК Организация,
	|	ОтветственныеОрганизаций.Роль КАК Роль,
	|	ОтветственныеОрганизаций.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций
	|ГДЕ
	|	ОтветственныеОрганизаций.Организация = &ОбъектАдресации
	|	И ОтветственныеОрганизаций.Роль = &Роль
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтветственныеОрганизаций.Организация,
	|	ОтветственныеОрганизаций.Роль,
	|	ОтветственныеОрганизаций.Пользователь
	|ИЗ
	|	РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций
	|ГДЕ
	|	ОтветственныеОрганизаций.Организация = &ОбъектАдресацииПустаяСсылка
	|	И ОтветственныеОрганизаций.Роль = &Роль";
	
	Запрос.УстановитьПараметр("ОбъектАдресацииПустаяСсылка", ОбщегоНазначенияУХ.ПустоеЗначениеТипа(ТипЗнч(ОбъектРолевойАдресацииВход)));	
	Запрос.УстановитьПараметр("ОбъектАдресации", ОбъектРолевойАдресацииВход);
	Запрос.УстановитьПараметр("Роль", РольВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НовыйОтветственный = ВыборкаДетальныеЗаписи.Пользователь;
		РезультатФункции.Добавить(НовыйОтветственный);
	КонецЦикла;
	РезультатФункции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатФункции);
	РезультатФункции = ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(РезультатФункции);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьОтветственныхПоРоли()

// Осуществляет расшифровку расширенной адресации для вида адресации РольПоРеквизиту.
Процедура РольПоРеквизитуРасширеннаяАдресация(АдресацияВход, ДокументПроцессаВход, СтрокаОтветственныхВход, ТабОтветственныхИзм, СтрокаПредставленияИзм)
	Если ЗначениеЗаполнено(ДокументПроцессаВход) Тогда
		ОбъектСогласования = ДокументПроцессаВход.КлючевойОбъектПроцесса;
		Если ЗначениеЗаполнено(ОбъектСогласования) Тогда
			ИскомыйРеквизит = АдресацияВход.РеквизитОбъектаРолевойАдресации;
			Если СокрЛП(ИскомыйРеквизит) <> "" Тогда
				Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектСогласования, ИскомыйРеквизит) Тогда
					ОбъектРолевойАдресации = ОбъектСогласования[ИскомыйРеквизит];
					МассивОтветственных = ПолучитьОтветственныхПоРоли(ОбъектРолевойАдресации, АдресацияВход.РольАдресации);
					Для Каждого ТекМассивОтветственных Из МассивОтветственных Цикл
						ДобавитьПользователяВТаблицуОтветсвенных(ТекМассивОтветственных, СтрокаОтветственныхВход, ТабОтветственныхИзм, СтрокаПредставленияИзм);
					КонецЦикла;	
				Иначе
					ТекстСообщения = НСтр("ru = 'В объекте ""%Объект%"" не найден реквизит расширенной адресации ""%Реквизит%"". Операция пропущена.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Строка(ОбъектСогласования));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Реквизит%", Строка(ИскомыйРеквизит));
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				КонецЕсли;
			Иначе
				ТекстСообщения = НСтр("ru = 'Не указан реквизит ролевой адресации для согласования объекта ""%Объект%"". Операция пропущена.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Строка(ОбъектСогласования));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Объект согласования для расширенной адресации по процессу ""%Процесс%"" не задан. Операция пропущена.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Процесс%", Строка(ДокументПроцессаВход));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Пустой документ согласования. Пропускаем.
	КонецЕсли;
КонецПроцедуры		// РольПоРеквизитуРасширеннаяАдресация()

// Осуществляет расшифровку расширенной адресации для вида адресации РольПоФиксированномуОбъекту.
Процедура РольПоФиксированномуОбъектуРасширеннаяАдресация(АдресацияВход, СтрокаОтветственныхВход, ТабОтветственныхИзм, СтрокаПредставленияИзм)
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОтветственныеОрганизаций.Организация КАК Организация,
	|	ОтветственныеОрганизаций.Роль КАК Роль,
	|	ОтветственныеОрганизаций.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций
	|ГДЕ
	|	ОтветственныеОрганизаций.Организация = &ОбъектАдресации
	|	И ОтветственныеОрганизаций.Роль = &Роль
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтветственныеОрганизаций.Организация,
	|	ОтветственныеОрганизаций.Роль,
	|	ОтветственныеОрганизаций.Пользователь
	|ИЗ
	|	РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций
	|ГДЕ
	|	ОтветственныеОрганизаций.Организация = &ПустойОбъект
	|	И ОтветственныеОрганизаций.Роль = &Роль";
	ФиксированныйОбъект = АдресацияВход.ФиксированныйОбъектАдресации;
	Запрос.УстановитьПараметр("ОбъектАдресации", ФиксированныйОбъект);
	Запрос.УстановитьПараметр("Роль", АдресацияВход.РольАдресации);
	ТипОбъекта = ТипЗнч(ФиксированныйОбъект);
	ПустаяСсылкаОбъекта = ОбщегоНазначенияУХ.ПустоеЗначениеТипа(ТипОбъекта);
	Запрос.УстановитьПараметр("ПустойОбъект", ПустаяСсылкаОбъекта);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НовыйОтветственный = ВыборкаДетальныеЗаписи.Пользователь;
		ДобавитьПользователяВТаблицуОтветсвенных(НовыйОтветственный, СтрокаОтветственныхВход, ТабОтветственныхИзм, СтрокаПредставленияИзм);
	КонецЦикла;
КонецПроцедуры		// РольПоФиксированномуОбъектуРасширеннаяАдресация()

// Заменяет в таблице ответственных ТабОтветственныхИзм расширенную адресацию пользоавтелями
// для строки таблицы СтрокаОтветственныхВход по документу ДокументПроцессаВход, попутно 
// изменяя представление в СтрокаПредставленияИзм.
Процедура РасшифроватьРасширеннуюАдресацию(ДокументПроцессаВход, СтрокаОтветственныхВход, ТабОтветственныхИзм, СтрокаПредставленияИзм) Экспорт
	Перем ЗначениеПараметра;
	Попытка
		Адресация = СтрокаОтветственныхВход.Пользователь;
		Если ЗначениеЗаполнено(Адресация) Тогда
			ВидАдресации = Адресация.ВидРасширеннойАдресацииСогласования;
			Если ВидАдресации = Перечисления.ВидыРасширеннойАдресацииСогласования.ПользовательИзРеквизита Тогда
				// Пользователь из реквизита.
				ПользовательИзРеквизитаРасширеннаяАдресация(ДокументПроцессаВход, Адресация, СтрокаОтветственныхВход, ТабОтветственныхИзм, СтрокаПредставленияИзм);
			ИначеЕсли ВидАдресации = Перечисления.ВидыРасширеннойАдресацииСогласования.РольПоРеквизиту Тогда
				// Роль по реквизиту. 
				РольПоРеквизитуРасширеннаяАдресация(Адресация, ДокументПроцессаВход, СтрокаОтветственныхВход, ТабОтветственныхИзм, СтрокаПредставленияИзм);
			ИначеЕсли ВидАдресации = Перечисления.ВидыРасширеннойАдресацииСогласования.РольПоФиксированномуОбъекту Тогда
				// Роль по фиксированному объекту.
				 РольПоФиксированномуОбъектуРасширеннаяАдресация(Адресация, СтрокаОтветственныхВход, ТабОтветственныхИзм, СтрокаПредставленияИзм);
			ИначеЕсли ВидАдресации = Перечисления.ВидыРасширеннойАдресацииСогласования.ИнициаторПроцесса Тогда
				// Инициатор процесса.
				ИнициаторПроцессаРасширеннаяАдресация(ДокументПроцессаВход, Адресация, СтрокаОтветственныхВход, ТабОтветственныхИзм, СтрокаПредставленияИзм);
			ИначеЕсли ВидАдресации = Перечисления.ВидыРасширеннойАдресацииСогласования.ПроизвольныйКод Тогда	
				// Произвольный код.
				ПроизвольныйКодРасширеннаяАдресация(ДокументПроцессаВход, Адресация, СтрокаОтветственныхВход, ТабОтветственныхИзм, СтрокаПредставленияИзм);
			ИначеЕсли ВидАдресации = Перечисления.ВидыРасширеннойАдресацииСогласования.ПустаяСсылка() Тогда		
				// Вид адресации не указана. Пропускаем.
			Иначе
				ТекстСообщения = НСтр("ru = 'Неизвестный вариант адресации ""%Адресация%"". Согласующий пропущен.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Адресация%", Строка(Адресация));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		Иначе
			// Адресация не указана. Пропускаем.
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'При вычислении ответственных для процесса ""%Процесс%"" по расширенной адресации ""%Адресация%"" произошли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Процесс%", Строка(ДокументПроцессаВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Адресация%", Строка(Адресация));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры		// РасшифроватьРасширеннуюАдресацию()

Функция РасшифроватьРолиОтветственных(ДокументПроцессаВход, ТабОтветственных,ТекОрганизация,СтрокаПредставления="") Экспорт
	
	Если ТипЗнч(ТабОтветственных) = Тип("ТаблицаЗначений") Тогда
		ТабОтветственных_ = ТабОтветственных.СкопироватьКолонки();
	Иначе
		ТабОтветственных_ = ТабОтветственных.Выгрузить().СкопироватьКолонки();
	КонецЕсли;
	
	Для Каждого Ответственный Из ТабОтветственных Цикл
	    ТекОтветственныйПользователь = Ответственный.Пользователь;
		Если ТипЗнч(ТекОтветственныйПользователь) = Тип("СправочникСсылка.РолиКонтактныхЛиц") Тогда
			ОрганизацияПоиска = ?(ЗначениеЗаполнено(Ответственный.Организация),Ответственный.Организация,ТекОрганизация);
			ПолучателиПоРоли = ПолучитьПользователейПоРоли(ТекОтветственныйПользователь, ОрганизацияПоиска);
			Для Каждого нПользователь Из ПолучателиПоРоли Цикл
				нСтр = ТабОтветственных_.Добавить();
				ЗаполнитьЗначенияСвойств(нСтр,Ответственный);
				нСтр.Пользователь = нПользователь.Пользователь; 
				СтрокаПредставления = СтрокаПредставления+Строка(нПользователь.Пользователь)+",";

			КонецЦикла;
		ИначеЕсли ТипЗнч(ТекОтветственныйПользователь) = Тип("СправочникСсылка.Пользователи") Тогда	
			нСтр = ТабОтветственных_.Добавить();
			ЗаполнитьЗначенияСвойств(нСтр,Ответственный); 
			СтрокаПредставления = СтрокаПредставления+Строка(ТекОтветственныйПользователь)+",";
		ИначеЕсли ТипЗнч(ТекОтветственныйПользователь) = Тип("СправочникСсылка.РасширеннаяАдресацияСогласования") Тогда	
			РасшифроватьРасширеннуюАдресацию(ДокументПроцессаВход, Ответственный, ТабОтветственных_, СтрокаПредставления);
		Иначе
			нСтр = ТабОтветственных_.Добавить();
			ЗаполнитьЗначенияСвойств(нСтр,Ответственный); 
			СтрокаПредставления = СтрокаПредставления + Строка(ТекОтветственныйПользователь) + ",";
		КонецЕсли;
		
	КонецЦикла;
	
	СтрокаПредставления = Лев(СтрокаПредставления,СтрДлина(СтрокаПредставления)-1);
	Возврат  ТабОтветственных_;
	
КонецФункции	

Функция ВернутьТаблицуСогласования(ШаблонПроцесса, ТекущийДокумент) Экспорт
	
	Перем ТекТаблицаСогласования;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВнутреннийЗапрос.Этап КАК Этап,
	|	ВнутреннийЗапрос.Код КАК Код,
	|	ВнутреннийЗапрос.Наименование КАК Наименование,
	|	ВнутреннийЗапрос.УтверждаетсяТекущимПользователем КАК УтверждаетсяТекущимПользователем,
	|	ВнутреннийЗапрос.Завизировано КАК Завизировано,
	|	ВнутреннийЗапрос.Пользователь КАК Пользователь,
	|	ВнутреннийЗапрос.Родитель КАК Родитель,
	|	ЭтапСогласованияВнешний.ЭтапыПредшественники.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		Этап КАК Этап
	|	) КАК ЭтапыПредшественники
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ЭтапыСогласования.Ссылка КАК Этап,
	|		ЭтапыСогласования.Код КАК Код,
	|		ЭтапыСогласования.Наименование КАК Наименование,
	|		ВЫБОР
	|			КОГДА ЭтапыСогласованияУтверждающие.Пользователь ЕСТЬ NULL
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ КАК УтверждаетсяТекущимПользователем,
	|		NULL КАК Завизировано,
	|		NULL КАК Пользователь,
	|		ЭтапыСогласования.Родитель КАК Родитель
	|	ИЗ
	|		Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапыСогласования
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ШаблоныУниверсальныхПроцессов КАК МаршрутыСогласования
	|			ПО ЭтапыСогласования.Владелец = МаршрутыСогласования.Ссылка
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЭтапыУниверсальныхПроцессов.Утверждающие КАК ЭтапыСогласованияУтверждающие
	|			ПО (ЭтапыСогласованияУтверждающие.Ссылка = ЭтапыСогласования.Ссылка)
	|				И (ЭтапыСогласованияУтверждающие.Пользователь = &ТекущийПользователь)
	|	ГДЕ
	|		МаршрутыСогласования.Ссылка = &МаршрутСогласования) КАК ВнутреннийЗапрос
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапСогласованияВнешний
	|		ПО ВнутреннийЗапрос.Этап = ЭтапСогласованияВнешний.Ссылка";
	
	Запрос.УстановитьПараметр("МаршрутСогласования", ШаблонПроцесса);
	Запрос.УстановитьПараметр("ТекущийПользователь", ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь"));
	Запрос.УстановитьПараметр("ТекущийДокумент"    , ТекущийДокумент);
	
	ТекТаблицаСогласования = Запрос.Выполнить().Выгрузить();
	ТекТаблицаСогласования.Колонки.Добавить("КонечныйЭтап", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТекТаблицаСогласования.ЗаполнитьЗначения(Истина, "КонечныйЭтап");
	ТекТаблицаСогласования.Колонки.Добавить("Модифицированность", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТекТаблицаСогласования.ЗаполнитьЗначения(Ложь, "Модифицированность");
	ТекТаблицаСогласования.Колонки.Добавить("ВозможностьИзменения", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТекТаблицаСогласования.ЗаполнитьЗначения(Истина, "ВозможностьИзменения");
	ТекТаблицаСогласования.Колонки.Добавить("Комментарий", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(200));
	
	
	Если ТипЗнч(ТекущийДокумент) = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
		
		СостояниеЭкземпляра = УправлениеПроцессамиСогласованияУХ.ВернутьТекущееСостояние(ТекущийДокумент);
		
		Для каждого стр из ТекТаблицаСогласования Цикл
			Если стр.ЭтапыПредшественники.Количество() = 0 и СостояниеЭкземпляра <> Перечисления.СостоянияОтчетов.Подготовлен Тогда
				стр.ВозможностьИзменения = ложь;
			КонецЕсли;	
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТекТаблицаСогласования;
	
КонецФункции

Функция ПолучитьОбщийСтатусДляСогласования(ОбъектСсылка)  Экспорт
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ОбъектСсылка)) Тогда
		ТипОбъектаСогласования = Справочники.СправочникиБД.НайтиПоНаименованию(ОбъектСсылка.Метаданные().Имя,,,Справочники.ТипыБазДанных.ТекущаяИБ);
	Иначе
		ТипОбъектаСогласования = Справочники.ДокументыБД.НайтиПоНаименованию(ОбъектСсылка.Метаданные().Имя,,,Справочники.ТипыБазДанных.ТекущаяИБ);
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(ТипОбъектаСогласования) Тогда
		Возврат Неопределено;
	КонецЕсли;	
			
	СостояниеЗаявки = УправлениеПроцессамиСогласованияУХ.ВернутьТекущееСостояние(ОбъектСсылка);
	
	Если СостояниеЗаявки = Перечисления.СостоянияПроцесса.Вработе Тогда
		Возврат "НаУтверждении";
	ИначеЕсли СостояниеЗаявки = Перечисления.СостоянияПроцесса.Завершен Тогда
		Возврат "Утвержден";
	ИначеЕсли СостояниеЗаявки = Перечисления.СостоянияПроцесса.Остановлен Тогда
		Возврат "Отклонен";
	КонецЕсли;	
    Возврат Неопределено;

КонецФункции

Функция ПолучитьСоответствиеСостоянийОбъекта(Знач ОбъектСсылка)  Экспорт
	
	СоответствиеСтатусов = Новый Соответствие;
	СоответствиеСтатусов.Вставить("НаУтверждении", Неопределено);
	СоответствиеСтатусов.Вставить("Черновик", Неопределено);
    СоответствиеСтатусов.Вставить("Утвержден", Неопределено);
	СоответствиеСтатусов.Вставить("Отклонен", Неопределено);

	Если ОбъектСсылка <> Неопределено Тогда	
		Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.СправочникиБД") ИЛИ ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.ДокументыБД") Тогда
			ТипОбъектаСогласования = ОбъектСсылка;
		ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ОбъектСсылка)) Тогда
			ТипОбъектаСогласования = Справочники.СправочникиБД.НайтиПоНаименованию(ОбъектСсылка.Метаданные().Имя,,,Справочники.ТипыБазДанных.ТекущаяИБ);
		Иначе
			ТипОбъектаСогласования = Справочники.ДокументыБД.НайтиПоНаименованию(ОбъектСсылка.Метаданные().Имя,,,Справочники.ТипыБазДанных.ТекущаяИБ);
		КонецЕсли;	
	Иначе
		Возврат СоответствиеСтатусов;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ТипОбъектаСогласования) Тогда
		Возврат СоответствиеСтатусов;
	КонецЕсли;	
	
	СоответствиеСтатусов.Вставить("НаУтверждении",ТипОбъектаСогласования.ЗначениеРеквизитаСостоянияНаУтверждении);
	СоответствиеСтатусов.Вставить("Черновик",ТипОбъектаСогласования.ЗначениеРеквизитаСостоянияЧерновик);
    СоответствиеСтатусов.Вставить("Утвержден",ТипОбъектаСогласования.ЗначениеРеквизитаСостоянияУтвержден);
	СоответствиеСтатусов.Вставить("Отклонен",ТипОбъектаСогласования.ЗначениеРеквизитаСостоянияОтклонен);

	Возврат СоответствиеСтатусов;

КонецФункции

Функция ПолучитьРеквизитСостоянияОбъекта(ОбъектСогласования) Экспорт

	  Запрос = Новый Запрос;
	  Запрос.Текст = "ВЫБРАТЬ
	  |	СтатусыСогласованияОбъектов.ТипСтатусов
	  |ИЗ
	  |	РегистрСведений.СтатусыСогласованияОбъектов КАК СтатусыСогласованияОбъектов
	  |ГДЕ
	  |	СтатусыСогласованияОбъектов.ОбъектСогласования = &ОбъектСогласования";
	  
	  Запрос.УстановитьПараметр("ОбъектСогласования",ОбъектСогласования );
	  
	  Результат = Запрос.Выполнить();
	  Выборка = Результат.Выбрать();
	  
	  Пока Выборка.Следующий() Цикл
	  
	  	    Возврат Выборка.ТипСтатусов;
	  
	  КонецЦикла;
	  Возврат Неопределено;
	  
 КонецФункции

 Процедура ДобавитьЗаписьВЛогПроцесса(ДокументПроцесса, ЭтапПроцесса = Неопределено, Пользователь = Неопределено, Комментарий, 
	 Событие = Неопределено, КомментарийСистемы = "", ИдентификаторСообщенияВход = "") Экспорт 
	
	РегИстории = РегистрыСведений.ИсторияВыполненияПроцессов.СоздатьМенеджерЗаписи();
	РегИстории.ДокументПроцесса = ДокументПроцесса;
	РегИстории.Период = ТекущаяДата();
	РегИстории.ЭтапПроцесса = ЭтапПроцесса;
	Если ЗначениеЗаполнено(Пользователь) Тогда
		РегИстории.Пользователь = Пользователь;
	Иначе	
		РегИстории.Пользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
	РегИстории.Комментарий = Комментарий;
	РегИстории.Событие = Событие;
	Если СокрЛП(ИдентификаторСообщенияВход) =  "" Тогда
		РегИстории.ИдентификаторСообщения = Строка(Новый УникальныйИдентификатор);	
	Иначе
		РегИстории.ИдентификаторСообщения = ИдентификаторСообщенияВход;
	КонецЕсли;
	РегИстории.КомментарийСистемы = КомментарийСистемы;
	РегИстории.Записать();
	 
 КонецПроцедуры 

Процедура ОтклонитьВложенныйПроцесс(ДокументПроцесса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭкземплярПроцесса.Ссылка
	|ИЗ
	|	Документ.ЭкземплярПроцесса КАК ЭкземплярПроцесса
	|ГДЕ
	|   ЭкземплярПроцесса.ПометкаУдаления = ЛОЖЬ
	|	И ЭкземплярПроцесса.Ссылка = &ДокументПроцесса";
	
	Запрос.УстановитьПараметр("ДокументПроцесса", ДокументПроцесса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ТекОбъект.ВозвратОтчетаНаДоработку(НСтр("ru = 'Вложенный процесс автоотклонен'"));
	КонецЦикла;
	
КонецПроцедуры

Процедура УтвердитьВложенныйПроцесс(ДокументПроцесса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭкземплярПроцесса.Ссылка
	|ИЗ
	|	Документ.ЭкземплярПроцесса КАК ЭкземплярПроцесса
	|ГДЕ
	|   ЭкземплярПроцесса.ПометкаУдаления = ЛОЖЬ
	|	И ЭкземплярПроцесса.Ссылка = &ДокументПроцесса";

	
	Запрос.УстановитьПараметр("ДокументПроцесса", ДокументПроцесса);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ТекОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ТекОбъект.УтвердитьОтчет(НСтр("ru = 'Вложенный процесс автоутвержден'"));
	КонецЦикла;
	
КонецПроцедуры

// Процедура при проведении документа пытается стартовать процесс, 
// или же устанавливает статус "Утверждено", если установлен флаг "Вне маршрута"
//
// Параметры:
//  ДокументОбъект	 - ДокументОбъект.ЗаявкаНаОперацию, ДокументОбъект.РеестрПлатежей, ДокументОбъект.Резервирование бюджета - 
//  проводимый документ
//
Процедура ОтправитьНаСогласованиеПриПроведенииДокумента(ДокументОбъект, Отказ = Ложь) Экспорт
	
	// Инициалиазация.
	ДокументСсылка = ДокументОбъект.Ссылка;
	ПустойПользователь = Справочники.Пользователи.ПустаяСсылка();
	СостояниеУтверждена = Перечисления.СостоянияСогласования.Утверждена;
	ТекДата = ТекущаяДатаСеанса();
	ТекОтветственный = ПустойПользователь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "Ответственный") Тогда
		ТекОтветственный = ДокументОбъект.Ответственный;
	ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "Автор") Тогда
		ТекОтветственный = ДокументОбъект.Автор;
	Иначе
		ТекОтветственный = ПустойПользователь;
	КонецЕсли;
	// Отправка на согласование объекта.
	ДокументВнеМаршрута = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДокументОбъект, "ВнеМаршрута") Тогда
		ДокументВнеМаршрута = ДокументОбъект.ВнеМаршрута;
	Иначе
		ДокументВнеМаршрута = Ложь;
	КонецЕсли;
	// Отправка на согласование объекта.
	Если ДокументВнеМаршрута Тогда
		// Признак "Вне маршрута" приводит к принудительному утверждению документа.
		УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(ДокументСсылка, СостояниеУтверждена, ТекДата, ТекОтветственный);
	ИначеЕсли НЕ ДокументОбъект.ДополнительныеСвойства.Свойство("НеОтправлятьНаСогласованиеПриПроведении") Тогда
		// Проверим заполнение согласующего для данного документа.
		СтруктураПараметровЗапуска = ПолучитьПараметрыЗапускаПроцесса(, ДокументСсылка);
		Согласующий = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровЗапуска, "Согласующий", ПустойПользователь);
		Если ЗначениеЗаполнено(Согласующий) Тогда
			// Постановка документа на маршрут согласования.
			СостояниеЗаявки = МодульУправленияПроцессамиУХ.ПолучитьОбщийСтатусДляСогласования(ДокументСсылка);
			Если  НЕ (СостояниеЗаявки="Утвержден" ИЛИ СостояниеЗаявки="НаУтверждении") Тогда
				МодульУправленияПроцессамиУХ.ПринятьКОбработке(, ДокументСсылка, Отказ);
			КонецЕсли;
		Иначе
			// Перевод документа в статус Утверждена вручную.
			ТекущееСостояние = УправлениеПроцессамиСогласованияУХ.ВернутьСтатусОбъекта(ДокументСсылка);
			Если ТекущееСостояние <> СостояниеУтверждена Тогда
				
				Если ТипЗнч(ДокументОбъект.ДополнительныеСвойства) = Тип("Структура") Тогда
					НовоеСостояниеДокумента = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДокументОбъект.ДополнительныеСвойства, "ТекущееСостояниеСогласования", СостояниеУтверждена);
				Иначе
					НовоеСостояниеДокумента = СостояниеУтверждена;
				КонецЕсли;
				
				Если НовоеСостояниеДокумента <> ТекущееСостояние тогда
					РезультатПеревода = УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(ДокументСсылка, НовоеСостояниеДокумента, ТекДата, ТекОтветственный, , , Ложь);
				Иначе	
					РезультатПеревода = Истина;	
				КонецЕсли;
				
				Если НЕ РезультатПеревода Тогда
					Отказ = Истина;
				Иначе
					// Перевод выполнен успешно.
				КонецЕсли;
			Иначе
				// Уже установлено состояние.
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ тогда
		Отказ = ДокументОбъект.Проведен И НЕ ДокументОбъект.Ссылка.Проведен;
	КонецЕсли;
	
КонецПроцедуры
 
 #КонецОбласти


#Область ПроцедурыОбработкиПереходовПроцессов

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ПЕРЕХОДА.
//

Процедура ПровестиАнализПереходов(ТаблицаПереходов, ЭтапыМаршрута, ИсходныйЭтап)
	
	ТекущиеЭтапы = ТаблицаПереходов.НайтиСтроки(Новый Структура("ЭтапИсточник", ИсходныйЭтап));
	Для Каждого Элемент Из ТекущиеЭтапы Цикл
		ЭтапПриемник = Элемент.ЭтапПриемник;
		
		Если ЭтапыМаршрута.Найти(ЭтапПриемник) <> неопределено ИЛИ ЭтапПриемник.ПометкаУдаления тогда
			Продолжить;
		КонецЕсли;
		
		ЭтапыМаршрута.Добавить(ЭтапПриемник);
		ПровестиАнализПереходов(ТаблицаПереходов, ЭтапыМаршрута, ЭтапПриемник);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает копию массив этапов МассивЭтаповВход, в которых оставлены только те этапы, которые были выбраны
// пользователями этапа ручной переход.
Функция ОтобратьВыбранныеЭтапыРучногоПерехода(ДокументПроцессаВход, МассивЭтаповВход)
	РезультатФункции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса
		|ИЗ
		|	РегистрСведений.ВыполнениеПроцессов.СрезПоследних(
		|			,
		|			ДокументПроцесса = &ДокументПроцесса
		|				И ЭтапПроцесса В (&ЭтапыПроцесса)) КАК ВыполнениеПроцессовСрезПоследних
		|ГДЕ
		|	ВыполнениеПроцессовСрезПоследних.СостояниеЭтапа <> ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.ЗавершенСОшибкой)";
	Запрос.УстановитьПараметр("ДокументПроцесса", ДокументПроцессаВход);
	Запрос.УстановитьПараметр("ЭтапыПроцесса", МассивЭтаповВход);
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		// Некоторые этапы были активированы. Вернём их.
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			РезультатФункции.Добавить(ВыборкаДетальныеЗаписи.ЭтапПроцесса);
		КонецЦикла;
	Иначе
		// Нет активированных этапов. Вернем изначальный список.
		РезультатФункции = МассивЭтаповВход;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

Процедура ПровестиПереходыПоЭтапам(ДокументПроцесса, НаборЗаписей, МассивТекущихЭтапов, ОбщийМассивЭтапов, ЭкземплярОтчета, Знач ИндексПерехода,
	Инициализация=Неопределено,ИнициализироватьСледующий,ТаблицаЗначенийТекущихПараметров=Неопределено,ТаблицаЗначенийПараметровЭтапа=Неопределено, 
	РазворачиватьУсловия = Ложь, Отказ = Ложь) Экспорт
	
	ТипЭтапаУсловныйПереход	 = Перечисления.ТипыЭтаповУниверсальныхПроцессов.УсловныйПереход;
	ТипЭтапаЦикл			 = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЦиклПока;
	ТипЭтапаОповещение		 = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Оповещение;
	Для Каждого Этап Из МассивТекущихЭтапов Цикл

		ЗаписьВОбщемМассиве = ОбщийМассивЭтапов.Найти(Этап, "Этап");
		
		Если ЗаписьВОбщемМассиве = Неопределено Тогда
			
			НоваяСтрока = ОбщийМассивЭтапов.Добавить();
			НоваяСтрока.Этап = Этап;
			НоваяСтрока.ПорядокВыполнения = ИндексПерехода;
			ДеревоПереходов = Этап.УсловияСогласования.Получить();
			
			Если ЗначениеЗаполнено(ДеревоПереходов) Тогда
				ТипТекущегоЭтапа = Этап.ТипЭтапа;
				МассивОпределенныхЭтапов = Новый Массив;
				ТаблицаЗначенийПараметровЭтапа = Этап.ЗначенияПараметров.Выгрузить(); 
				НужноПолучитьВсеЭтапы = (РазворачиватьУсловия) И (ТипТекущегоЭтапа = ТипЭтапаУсловныйПереход ИЛИ ТипТекущегоЭтапа = ТипЭтапаЦикл);
				Если НЕ НужноПолучитьВсеЭтапы Тогда
					ОбработатьСпособПерехода(ДеревоПереходов.Строки, ЭкземплярОтчета, МассивОпределенныхЭтапов, Истина,Инициализация,
					ИнициализироватьСледующий,ТаблицаЗначенийТекущихПараметров,ТаблицаЗначенийПараметровЭтапа,ДокументПроцесса);
				Иначе
					СписокЭтаповРезультат = МодульСогласованияДокументовУХ.ПолучитьЭтапыВыбораРучногоПерехода(Этап);
					МассивОпределенныхЭтапов = СписокЭтаповРезультат.ВыгрузитьЗначения();
					МассивОпределенныхЭтапов = ОтобратьВыбранныеЭтапыРучногоПерехода(ДокументПроцесса, МассивОпределенныхЭтапов);
				КонецЕсли;
				// Для ручного перехода оставим только выбранные этапы.
				Если ТипТекущегоЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход Тогда
					МассивОпределенныхЭтапов = ОтобратьВыбранныеЭтапыРучногоПерехода(ДокументПроцесса, МассивОпределенныхЭтапов);
				Иначе
					// Другой тип этапа. Оставляем массив.
				КонецЕсли;
				
				МассивОпределенныхЭтапов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивОпределенныхЭтапов);
				Для Каждого Элемент Из МассивОпределенныхЭтапов Цикл
					НоваяСтрока = НаборЗаписей.Добавить();
					НоваяСтрока.ДокументПроцесса = ДокументПроцесса;
					НоваяСтрока.ЭтапИсточник = Этап;
					НоваяСтрока.ЭтапПриемник = Элемент;
				КонецЦикла;
				
				НовыйИндексПерехода = ИндексПерехода;
				Если ТипТекущегоЭтапа = ТипЭтапаУсловныйПереход Тогда
					НовыйИндексПерехода = ИндексПерехода + 1
				Иначе
					НовыйИндексПерехода = ИндексПерехода;
				КонецЕсли;
				ПровестиПереходыПоЭтапам(ДокументПроцесса, НаборЗаписей, МассивОпределенныхЭтапов, ОбщийМассивЭтапов, ЭкземплярОтчета, 
					НовыйИндексПерехода, Инициализация, ИнициализироватьСледующий, ТаблицаЗначенийТекущихПараметров, 
					ТаблицаЗначенийПараметровЭтапа, РазворачиватьУсловия, Отказ);
				
			КонецЕсли;
			
		ИначеЕсли ЗаписьВОбщемМассиве.ПорядокВыполнения < ИндексПерехода Тогда
			ЗаписьВОбщемМассиве.ПорядокВыполнения = ИндексПерехода;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОтменитьСогласованиеПоследующихЭтапов(ДокументПроцесса, ЭтапПроцесса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭтапыУниверсальныхПроцессов.Ссылка,
	|	ВыполнениеПроцессов.СостояниеЭтапа
	|ИЗ
	|	РегистрСведений.ВыполнениеПроцессов.СрезПоследних КАК ВыполнениеПроцессов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыУниверсальныхПроцессов.ЭтапыПредшественники КАК ЭтапыУниверсальныхПроцессовЭтапыПредшественники
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапыУниверсальныхПроцессов
	|			ПО ЭтапыУниверсальныхПроцессовЭтапыПредшественники.Ссылка = ЭтапыУниверсальныхПроцессов.Ссылка
	|		ПО ВыполнениеПроцессов.ЭтапПроцесса = ЭтапыУниверсальныхПроцессовЭтапыПредшественники.Ссылка
	|ГДЕ
	|	ЭтапыУниверсальныхПроцессовЭтапыПредшественники.Этап = &Этап
	|	И ВыполнениеПроцессов.ДокументПроцесса = &ДокументПроцесса
	|	И ВыполнениеПроцессов.СостояниеЭтапа <> &СостояниеЭтапа";
	
	Запрос.УстановитьПараметр("Этап", ЭтапПроцесса);
	Запрос.УстановитьПараметр("ДокументПроцесса", ДокументПроцесса);
	Запрос.УстановитьПараметр("СостояниеЭтапа", Перечисления.СостоянияЭтаповУниверсальныхПроцессов.ЗавершенСОшибкой);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПроверитьСогласованиеПредшественниковДляЭтапаСогласования(ДокументПроцесса, Выборка.Ссылка, Выборка.СостояниеЭтапа);
		ОтменитьСогласованиеПоследующихЭтапов(ДокументПроцесса, Выборка.Ссылка);
	КонецЦикла;
	
КонецФункции

Процедура ПроверитьСогласованиеПредшественниковДляЭтапаСогласования(ДокументПроцесса, ЭтапПроцесса, СостояниеЭтапа) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК ЧислоУтвержденныхЭтапов
	|ИЗ
	|	РегистрСведений.ВыполнениеПроцессов.СрезПоследних(
	|			,
	|			АрхивнаяЗапись = ЛОЖЬ
	|				И ДокументПроцесса = &ДокументПроцесса
	|				И СостояниеЭтапа = &СостояниеЭтапа) КАК ВыполнениеПроцессовСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыУниверсальныхПроцессов.ЭтапыПредшественники КАК ЭтапыУниверсальныхПроцессовЭтапыПредшественники
	|		ПО ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса = ЭтапыУниверсальныхПроцессовЭтапыПредшественники.Этап
	|ГДЕ
	|	ЭтапыУниверсальныхПроцессовЭтапыПредшественники.Ссылка = &Этап";
	
	Запрос.УстановитьПараметр("Этап", ЭтапПроцесса);
	Запрос.УстановитьПараметр("ДокументПроцесса", ДокументПроцесса);
	Запрос.УстановитьПараметр("СостояниеЭтапа", Перечисления.СостоянияЭтаповУниверсальныхПроцессов.Завершен);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЧислоУтвержденныхЭтапов = Выборка.ЧислоУтвержденныхЭтапов;
	Иначе
		ЧислоУтвержденныхЭтапов = 0;
	КонецЕсли;
	
	// Если следующий этап является дочерним маршрутом и находится в состоянии "Подготовлен" нужно остановить согласование по этому маршруту.
	Если ЭтапПроцесса.ЭтапыПредшественники.Количество() < ЧислоУтвержденныхЭтапов И СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.ВОбработке И ЭтапПроцесса.ДочернийМаршрут Тогда
		
		Попытка
			ДокументСогласования = МодульСогласованияДокументовУХ.ОпределитьДокументСогласованияДляЭтапаСогласования(ЭтапПроцесса.МаршрутСогласования, ЭтапПроцесса);
			Если ДокументСогласования <> Неопределено Тогда
				ДокументСогласования.СостояниеВыполнения = Перечисления.СостоянияОтчетов.Возвращен;
				ДокументСогласования.Записать();
			КонецЕсли;
		Исключение
			Возврат;
		КонецПопытки
		
	КонецЕсли;
	
	УстановитьСостояниеЭтапа(ЭтапПроцесса, ДокументПроцесса, ЧислоУтвержденныхЭтапов);
	
КонецПроцедуры

Функция ПолучитьМассивИерархии(ОрганизационнаяЕдиница, Сценарий, Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизационнаяЕдиница", ОрганизационнаяЕдиница);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("ПериодСценария", Период);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.ОрганизационнаяЕдиница
	|ИЗ
	|	Справочник.ВерсииРегламентовПодготовкиОтчетности.СтруктураГруппы КАК ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	|		ПО ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.Ссылка = УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры
	|ГДЕ
	|	УправлениеПериодомСценария.Сценарий = &Сценарий
	|	И УправлениеПериодомСценария.ПериодСценария = &ПериодСценария
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&ОрганизационнаяЕдиница";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОрганизационнаяЕдиница");
	
КонецФункции

Функция ПолучитьМассивИерархии_ПоВерсииОрганизационнойСтруктуры(ОрганизационнаяЕдиница, ВерсияРегламентовПодготовкиОтчетности) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизационнаяЕдиница", ОрганизационнаяЕдиница);
	Запрос.УстановитьПараметр("Ссылка", ВерсияРегламентовПодготовкиОтчетности);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.ОрганизационнаяЕдиница
	|ИЗ
	|	Справочник.ВерсииРегламентовПодготовкиОтчетности.СтруктураГруппы КАК ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы
	|ГДЕ
	|	ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&ОрганизационнаяЕдиница";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОрганизационнаяЕдиница");
	
КонецФункции

Процедура ПодготовитьСтруктуруЛимитов(СтруктураЛимитов, Документ)
		
	Если СтруктураЛимитов = Неопределено Тогда
		
		ОстатокДСКонтроль              = Неопределено;
		ОстатокДСИсполнение            = 0;
		
		ОстатокПланДДСКонтроль         = Неопределено;
		ОстатокПланДДСИсполнение       = 0;
		
		ОстатокВзаиморасчетыКонтроль   = Неопределено;
		ОстатокВзаиморасчетыИсполнение = 0;
		
		Лимиты = УправлениеДенежнымиСредствамиУХ.ПолучитьИсполнениеЛимитовПоЗаявке(Документ);
		
		Если Лимиты.Свойство("ЛимитыОстатковДС") И Лимиты.ЛимитыОстатковДС.Количество() > 0 Тогда
			
			ТС = Лимиты.ЛимитыОстатковДС[0];
			ОстатокДСКонтроль   = ТС.ЛимитОстаткаМин;
			ОстатокДСИсполнение = ТС.СуммаРазмещения + ТС.СуммаДокумента;
			
		КонецЕсли;
		
		Если Лимиты.Свойство("ЛимитыВзаиморасчеты") И Лимиты.ЛимитыВзаиморасчеты.Количество() > 0 Тогда
			
			ТС = Лимиты.ЛимитыВзаиморасчеты[0];
			ОстатокВзаиморасчетыКонтроль   = ТС.СуммаВзаиморасчетовКонтроль;
			ОстатокВзаиморасчетыИсполнение = ТС.СуммаВзаиморасчетовИсполнение + ТС.СуммаПлатежа;
			
		КонецЕсли;
		
		Если Лимиты.Свойство("ЛимитыПланДДС") И Лимиты.ЛимитыПланДДС.Количество() > 0 Тогда
			
			ТС = Лимиты.ЛимитыПланДДС[0];
			ОстатокПланДДСКонтроль   = ТС.СуммаКонтрольОборот;
			ОстатокПланДДСИсполнение = ТС.СуммаИСполнениеОборот + ТС.СуммаИсполненияТекущая;
			
		КонецЕсли;
		
		СтруктураЛимитов = Новый Структура("ЛимитыОстатковДС, ЛимитыВзаиморасчеты, ЛимитыПланДДС"
										   , Новый Структура("Исполнение, Контроль", ОстатокДСИсполнение, ОстатокДСКонтроль)
										   , Новый Структура("Исполнение, Контроль", ОстатокВзаиморасчетыИсполнение, ОстатокВзаиморасчетыКонтроль)
										   , Новый Структура("Исполнение, Контроль", ОстатокПланДДСИсполнение, ОстатокПланДДСКонтроль));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВернутьПостроительЗапроса(Объект, МассивРеквизитов, ИндексРеквизита)
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
		
	ИмяРеквизита = МассивРеквизитов[ИндексРеквизита];
			
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
				
		ПостроительЗапроса.Текст = УправлениеПроцессамиСогласованияУхПереопределяемый.ПолучитьТекстЗапросаУсловныйПереходВЗаявке(МассивРеквизитов, ИндексРеквизита);		
		ПостроительЗапроса.Параметры.Вставить("Заявка", Объект);
			
	ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект)) Тогда //Любой другой  справочник	
				
		МетаданныеОбъекта = Объект.Метаданные();
		ИмяОбъекта = МетаданныеОбъекта.Имя;
		
		ДополнительныеРеквизитыИСведения1 = "";
		ДополнительныеРеквизитыИСведенияПоляГруппировки = "";
		ДополнительныеРеквизитыИСведения2 = "";
		ДополнительныеРеквизитыИСведенияУсловие = "";
		УсловияСоединенияДопРеквизиты = "";
		УсловияСоединенияДопСведения = "";
		ДобавленныеРеквизиты = Новый Массив;
		ОпределениеПустогоЗначения = "";
				
		//Для самого объекта		
		ТипМетаданныхРеквизита = "Справочник";
		ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
				
		Если МетаданныеОбъекта.ТабличныеЧасти.Найти("ДополнительныеРеквизиты") <> Неопределено тогда
			
			ЗапросДопРеквизитыИСведения = Новый Запрос("ВЫБРАТЬ
			|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.ИдентификаторДляФормул КАК СвойствоПредставление,
			|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.ТипЗначения КАК СвойствоТипЗначения
			|ИЗ
			|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
			|ГДЕ
			|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка.Наименование = &Наименование
			|	И НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.ИдентификаторДляФормул = &Реквизит");
			
			ЗапросДопРеквизитыИСведения.УстановитьПараметр("Реквизит", ИмяРеквизита);
			ЗапросДопРеквизитыИСведения.УстановитьПараметр("Наименование", МетаданныеОбъекта.Синоним);
			
			ВыборкаДопРеквизитыИСведения = ЗапросДопРеквизитыИСведения.Выполнить().Выбрать();
			
			Если ВыборкаДопРеквизитыИСведения.Количество() > 0 тогда					
				УсловияСоединенияДопРеквизиты = УсловияСоединенияДопРеквизиты + "
				|		ЛЕВОЕ СОЕДИНЕНИЕ " + ТипМетаданныхРеквизита + "." + МетаданныеОбъекта.Имя + ".ДополнительныеРеквизиты КАК ДопРеквизитыСсылка" + МетаданныеОбъекта.Имя + "
				|		ПО (СправочникОбъект.Ссылка = ДопРеквизитыСсылка" + МетаданныеОбъекта.Имя + ".Ссылка)";
			КонецЕсли;
			
			Пока ВыборкаДопРеквизитыИСведения.Следующий() Цикл
				
				Если ВыборкаДопРеквизитыИСведения.СвойствоТипЗначения.Типы().Количество() = 1 тогда
					ТипСвойства = ВыборкаДопРеквизитыИСведения.СвойствоТипЗначения.Типы()[0];
					
					Если ТипСвойства = Тип("Число") тогда
						ОпределениеПустогоЗначения = "0";
					ИначеЕсли ТипСвойства = Тип("Строка") тогда
						ОпределениеПустогоЗначения = """""";
					ИначеЕсли ТипСвойства = Тип("Булево") тогда
						ОпределениеПустогоЗначения = "ЛОЖЬ";
					ИначеЕсли ТипСвойства = Тип("Дата") тогда
						ОпределениеПустогоЗначения = "ДАТАВРЕМЯ(1,1,1)";
					Иначе
						ОбъектСвойства = Новый (ТипСвойства);
						МетаданныеСвойства = ОбъектСвойства.Метаданные();
						ОпределениеПустогоЗначения = "ЗНАЧЕНИЕ(" + МетаданныеСвойства.ПолноеИмя() + ".ПустаяСсылка)";
					КонецЕсли;
				Иначе
					ОпределениеПустогоЗначения = "НЕОПРЕДЕЛЕНО";
				КонецЕсли;
				
				СвойствоПредставление = ВыборкаДопРеквизитыИСведения.СвойствоПредставление;
				
				ДополнительныеРеквизитыИСведения1 = ДополнительныеРеквизитыИСведения1 + ",
				|	МАКСИМУМ(ВЫБОР 
				|		КОГДА ДопРеквизитыСсылка" + МетаданныеОбъекта.Имя + ".Свойство.ИдентификаторДляФормул = """ + СвойствоПредставление + """
				|			ТОГДА ДопРеквизитыСсылка" + МетаданныеОбъекта.Имя + ".Значение
				|		ИНАЧЕ " + ОпределениеПустогоЗначения + "
				|	КОНЕЦ) КАК Ссылка" + МетаданныеОбъекта.Имя + СвойствоПредставление;
				
				ДополнительныеРеквизитыИСведения2 = ДополнительныеРеквизитыИСведения2 + ",
				|	ДопРеквизитыИСведения.Ссылка" + МетаданныеОбъекта.Имя + СвойствоПредставление + " КАК Ссылка" + МетаданныеОбъекта.Имя + СвойствоПредставление;
				
				ДополнительныеРеквизитыИСведенияУсловие = ДополнительныеРеквизитыИСведенияУсловие + ",
				|	ДопРеквизитыИСведения.Ссылка" + МетаданныеОбъекта.Имя + СвойствоПредставление + ".*";
			КонецЦикла;
			
		КонецЕсли;
		
		ЗапросДопРеквизитыИСведения = Новый Запрос("ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство.ИдентификаторДляФормул КАК СвойствоПредставление,
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство.ТипЗначения КАК СвойствоТипЗначения
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка.Наименование = &Наименование
		|	И НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство.ИдентификаторДляФормул = &Реквизит");
		
		ЗапросДопРеквизитыИСведения.УстановитьПараметр("Реквизит", ИмяРеквизита);
		ЗапросДопРеквизитыИСведения.УстановитьПараметр("Наименование", МетаданныеОбъекта.Синоним);
		
		ВыборкаДопРеквизитыИСведения = ЗапросДопРеквизитыИСведения.Выполнить().Выбрать();
		
		Если ВыборкаДопРеквизитыИСведения.Количество() > 0 тогда	
			УсловияСоединенияДопСведения = УсловияСоединенияДопСведения + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДопСведенияСсылка" + МетаданныеОбъекта.Имя + "
			|		ПО (СправочникОбъект.Ссылка = ДопСведенияСсылка" + МетаданныеОбъекта.Имя + ".Объект)";
		КонецЕсли;
		
		Пока ВыборкаДопРеквизитыИСведения.Следующий() Цикл
			
			Если ВыборкаДопРеквизитыИСведения.СвойствоТипЗначения.Типы().Количество() = 1 тогда
				ТипСвойства = ВыборкаДопРеквизитыИСведения.СвойствоТипЗначения.Типы()[0];
				
				Если ТипСвойства = Тип("Число") тогда
					ОпределениеПустогоЗначения = "0";
				ИначеЕсли ТипСвойства = Тип("Строка") тогда
					ОпределениеПустогоЗначения = """""";
				ИначеЕсли ТипСвойства = Тип("Булево") тогда
					ОпределениеПустогоЗначения = "ЛОЖЬ";
				ИначеЕсли ТипСвойства = Тип("Дата") тогда
					ОпределениеПустогоЗначения = "ДАТАВРЕМЯ(1,1,1)";
				Иначе
					ОбъектСвойства = Новый (ТипСвойства);
					МетаданныеСвойства = ОбъектСвойства.Метаданные();
					ОпределениеПустогоЗначения = "ЗНАЧЕНИЕ(" + МетаданныеСвойства.ПолноеИмя() + ".ПустаяСсылка)";
				КонецЕсли;
			Иначе
				ОпределениеПустогоЗначения = "НЕОПРЕДЕЛЕНО";
			КонецЕсли;
			
			СвойствоПредставление = ВыборкаДопРеквизитыИСведения.СвойствоПредставление;
			
			ДополнительныеРеквизитыИСведения1 = ДополнительныеРеквизитыИСведения1 + ",
			|	МАКСИМУМ(ВЫБОР 
			|		КОГДА ДопСведенияСсылка" + МетаданныеОбъекта.Имя + ".Свойство.ИдентификаторДляФормул = """ + СвойствоПредставление + """
			|			ТОГДА ДопСведенияСсылка" + МетаданныеОбъекта.Имя + ".Значение
			|		ИНАЧЕ " + ОпределениеПустогоЗначения + "
			|	КОНЕЦ) КАК Ссылка" + МетаданныеОбъекта.Имя + СвойствоПредставление;
			
			ДополнительныеРеквизитыИСведения2 = ДополнительныеРеквизитыИСведения2 + ",
			|	ДопРеквизитыИСведения.Ссылка" + МетаданныеОбъекта.Имя + СвойствоПредставление + " КАК Ссылка" + МетаданныеОбъекта.Имя + СвойствоПредставление;
			
			ДополнительныеРеквизитыИСведенияУсловие = ДополнительныеРеквизитыИСведенияУсловие + ",
			|	ДопРеквизитыИСведения.Ссылка" + МетаданныеОбъекта.Имя + СвойствоПредставление + ".*";
		КонецЦикла;
				
		//Для реквизитов
		ДополнитьЗапросДополнительнымиРеквизитамиИСведениями(МетаданныеОбъекта, 
			МассивРеквизитов, ИндексРеквизита,, ДобавленныеРеквизиты, "СправочникОбъект",
			ДополнительныеРеквизитыИСведения1, ДополнительныеРеквизитыИСведенияПоляГруппировки, 
			ДополнительныеРеквизитыИСведения2, ДополнительныеРеквизитыИСведенияУсловие, 
			УсловияСоединенияДопРеквизиты, УсловияСоединенияДопСведения);
		
		ПостроительЗапроса.Текст =  
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	СправочникОбъект.Ссылка КАК Ссылка" + ДополнительныеРеквизитыИСведения1 + "
		|ПОМЕСТИТЬ ВТСсылкаИДопРеквизитыИСведения
		|ИЗ
		|	Справочник." + ИмяОбъекта + " КАК СправочникОбъект" + УсловияСоединенияДопРеквизиты + УсловияСоединенияДопСведения + "
		|ГДЕ
		|	СправочникОбъект.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	СправочникОбъект.Ссылка" + ДополнительныеРеквизитыИСведенияПоляГруппировки + "
		|;
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДопРеквизитыИСведения.Ссылка" + ДополнительныеРеквизитыИСведения2 + "
		|ИЗ
		|	ВТСсылкаИДопРеквизитыИСведения КАК ДопРеквизитыИСведения
		|{ГДЕ
		|	ДопРеквизитыИСведения.Ссылка.*" + ДополнительныеРеквизитыИСведенияУсловие + "}";

		ПостроительЗапроса.Параметры.Вставить("Ссылка", Объект);
				
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект)) Тогда
			
		МетаданныеОбъекта = Объект.Метаданные();
		ИмяОбъекта = МетаданныеОбъекта.Имя;
		
		ДополнительныеРеквизитыИСведения1 = "";
		ДополнительныеРеквизитыИСведения2 = "";
		ДополнительныеРеквизитыИСведенияУсловие = "";
		УсловияСоединенияДопРеквизиты = "";
		УсловияСоединенияДопСведения = "";
		ДобавленныеРеквизиты = Новый Массив;
				
		//Для самого объекта		
		ТипМетаданныхРеквизита = "Документ";
		ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
				
		Если МетаданныеОбъекта.ТабличныеЧасти.Найти("ДополнительныеРеквизиты") <> Неопределено тогда
			
			ЗапросДопРеквизитыИСведения = Новый Запрос("ВЫБРАТЬ
			|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.ИдентификаторДляФормул КАК СвойствоПредставление,
			|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.ТипЗначения КАК СвойствоТипЗначения
			|ИЗ
			|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
			|ГДЕ
			|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка.Наименование = &Наименование
			|	И НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.ИдентификаторДляФормул = &Реквизит");
			
			ЗапросДопРеквизитыИСведения.УстановитьПараметр("Реквизит", ИмяРеквизита);
			ЗапросДопРеквизитыИСведения.УстановитьПараметр("Наименование", МетаданныеОбъекта.Синоним);
			
			ВыборкаДопРеквизитыИСведения = ЗапросДопРеквизитыИСведения.Выполнить().Выбрать();
			
			Если ВыборкаДопРеквизитыИСведения.Количество() > 0 тогда					
				УсловияСоединенияДопРеквизиты = УсловияСоединенияДопРеквизиты + "
				|		ЛЕВОЕ СОЕДИНЕНИЕ " + ТипМетаданныхРеквизита + "." + МетаданныеОбъекта.Имя + ".ДополнительныеРеквизиты КАК ДопРеквизитыСсылка" + МетаданныеОбъекта.Имя + "
				|		ПО (ДокументОбъект.Ссылка = ДопРеквизитыСсылка" + МетаданныеОбъекта.Имя + ".Ссылка)";
			КонецЕсли;
			
			Пока ВыборкаДопРеквизитыИСведения.Следующий() Цикл
				
				Если ВыборкаДопРеквизитыИСведения.СвойствоТипЗначения.Типы().Количество() = 1 тогда
					ТипСвойства = ВыборкаДопРеквизитыИСведения.СвойствоТипЗначения.Типы()[0];
					
					Если ТипСвойства = Тип("Число") тогда
						ОпределениеПустогоЗначения = "0";
					ИначеЕсли ТипСвойства = Тип("Строка") тогда
						ОпределениеПустогоЗначения = """""";
					ИначеЕсли ТипСвойства = Тип("Булево") тогда
						ОпределениеПустогоЗначения = "ЛОЖЬ";
					ИначеЕсли ТипСвойства = Тип("Дата") тогда
						ОпределениеПустогоЗначения = "ДАТАВРЕМЯ(1,1,1)";
					Иначе
						ОбъектСвойства = Новый (ТипСвойства);
						МетаданныеСвойства = ОбъектСвойства.Метаданные();
						ОпределениеПустогоЗначения = "ЗНАЧЕНИЕ(" + МетаданныеСвойства.ПолноеИмя() + ".ПустаяСсылка)";
					КонецЕсли;
				Иначе
					ОпределениеПустогоЗначения = "НЕОПРЕДЕЛЕНО";
				КонецЕсли;
				
				СвойствоПредставление = ВыборкаДопРеквизитыИСведения.СвойствоПредставление;
				
				ДополнительныеРеквизитыИСведения1 = ДополнительныеРеквизитыИСведения1 + ",
				|	МАКСИМУМ(ВЫБОР 
				|		КОГДА ДопРеквизитыСсылка" + МетаданныеОбъекта.Имя + ".Свойство.ИдентификаторДляФормул = """ + СвойствоПредставление + """
				|			ТОГДА ДопРеквизитыСсылка" + МетаданныеОбъекта.Имя + ".Значение
				|		ИНАЧЕ " + ОпределениеПустогоЗначения + "
				|	КОНЕЦ) КАК Ссылка" + МетаданныеОбъекта.Имя + СвойствоПредставление;
				
				ДополнительныеРеквизитыИСведения2 = ДополнительныеРеквизитыИСведения2 + ",
				|	ДопРеквизитыИСведения.Ссылка" + МетаданныеОбъекта.Имя + СвойствоПредставление + " КАК Ссылка" + МетаданныеОбъекта.Имя + СвойствоПредставление;
				
				ДополнительныеРеквизитыИСведенияУсловие = ДополнительныеРеквизитыИСведенияУсловие + ",
				|	ДопРеквизитыИСведения.Ссылка" + МетаданныеОбъекта.Имя + СвойствоПредставление + ".*";
			КонецЦикла;
			
		КонецЕсли;
		
		ЗапросДопРеквизитыИСведения = Новый Запрос("ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство.ИдентификаторДляФормул КАК СвойствоПредставление,
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство.ТипЗначения КАК СвойствоТипЗначения
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка.Наименование = &Наименование
		|	И НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство.ИдентификаторДляФормул = &Реквизит");
		
		ЗапросДопРеквизитыИСведения.УстановитьПараметр("Реквизит", ИмяРеквизита);
		ЗапросДопРеквизитыИСведения.УстановитьПараметр("Наименование", МетаданныеОбъекта.Синоним);
		
		ВыборкаДопРеквизитыИСведения = ЗапросДопРеквизитыИСведения.Выполнить().Выбрать();
		
		Если ВыборкаДопРеквизитыИСведения.Количество() > 0 тогда	
			УсловияСоединенияДопСведения = УсловияСоединенияДопСведения + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДопСведенияСсылка" + МетаданныеОбъекта.Имя + "
			|		ПО (ДокументОбъект.Ссылка = ДопСведенияСсылка" + МетаданныеОбъекта.Имя + ".Объект)";
		КонецЕсли;
		
		Пока ВыборкаДопРеквизитыИСведения.Следующий() Цикл
			
			Если ВыборкаДопРеквизитыИСведения.СвойствоТипЗначения.Типы().Количество() = 1 тогда
				ТипСвойства = ВыборкаДопРеквизитыИСведения.СвойствоТипЗначения.Типы()[0];
				
				Если ТипСвойства = Тип("Число") тогда
					ОпределениеПустогоЗначения = "0";
				ИначеЕсли ТипСвойства = Тип("Строка") тогда
					ОпределениеПустогоЗначения = """""";
				ИначеЕсли ТипСвойства = Тип("Булево") тогда
					ОпределениеПустогоЗначения = "ЛОЖЬ";
				ИначеЕсли ТипСвойства = Тип("Дата") тогда
					ОпределениеПустогоЗначения = "ДАТАВРЕМЯ(1,1,1)";
				Иначе
					ОбъектСвойства = Новый (ТипСвойства);
					МетаданныеСвойства = ОбъектСвойства.Метаданные();
					ОпределениеПустогоЗначения = "ЗНАЧЕНИЕ(" + МетаданныеСвойства.ПолноеИмя() + ".ПустаяСсылка)";
				КонецЕсли;
			Иначе
				ОпределениеПустогоЗначения = "НЕОПРЕДЕЛЕНО";
			КонецЕсли;
			
			СвойствоПредставление = ВыборкаДопРеквизитыИСведения.СвойствоПредставление;
			
			ДополнительныеРеквизитыИСведения1 = ДополнительныеРеквизитыИСведения1 + ",
			|	МАКСИМУМ(ВЫБОР 
			|		КОГДА ДопСведенияСсылка" + МетаданныеОбъекта.Имя + ".Свойство.ИдентификаторДляФормул = """ + СвойствоПредставление + """
			|			ТОГДА ДопСведенияСсылка" + МетаданныеОбъекта.Имя + ".Значение
			|		ИНАЧЕ " + ОпределениеПустогоЗначения + "
			|	КОНЕЦ) КАК Ссылка" + МетаданныеОбъекта.Имя + СвойствоПредставление;
			
			ДополнительныеРеквизитыИСведения2 = ДополнительныеРеквизитыИСведения2 + ",
			|	ДопРеквизитыИСведения.Ссылка" + МетаданныеОбъекта.Имя + СвойствоПредставление + " КАК Ссылка" + МетаданныеОбъекта.Имя + СвойствоПредставление;
			
			ДополнительныеРеквизитыИСведенияУсловие = ДополнительныеРеквизитыИСведенияУсловие + ",
			|	ДопРеквизитыИСведения.Ссылка" + МетаданныеОбъекта.Имя + СвойствоПредставление + ".*";
		КонецЦикла;
				
		//Для реквизитов
		ДополнитьЗапросДополнительнымиРеквизитамиИСведениями(МетаданныеОбъекта, 
			МассивРеквизитов, ИндексРеквизита,, ДобавленныеРеквизиты, "ДокументОбъект",
			ДополнительныеРеквизитыИСведения1, ДополнительныеРеквизитыИСведенияПоляГруппировки, 
			ДополнительныеРеквизитыИСведения2, ДополнительныеРеквизитыИСведенияУсловие, 
			УсловияСоединенияДопРеквизиты, УсловияСоединенияДопСведения);
					
		ПостроительЗапроса.Текст =  
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументОбъект.Ссылка КАК Ссылка" + ДополнительныеРеквизитыИСведения1 + "
		|ПОМЕСТИТЬ ВТСсылкаИДопРеквизитыИСведения
		|ИЗ
		|	Документ." + ИмяОбъекта + " КАК ДокументОбъект" + УсловияСоединенияДопРеквизиты + УсловияСоединенияДопСведения + "
		|ГДЕ
		|	ДокументОбъект.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументОбъект.Ссылка" + ДополнительныеРеквизитыИСведенияПоляГруппировки + "
		|;
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДопРеквизитыИСведения.Ссылка" + ДополнительныеРеквизитыИСведения2 + "
		|ИЗ
		|	ВТСсылкаИДопРеквизитыИСведения КАК ДопРеквизитыИСведения
		|{ГДЕ
		|	ДопРеквизитыИСведения.Ссылка.*" + ДополнительныеРеквизитыИСведенияУсловие + "}";

		ПостроительЗапроса.Параметры.Вставить("Ссылка", Объект);
				
	КонецЕсли;
	
	Возврат ПостроительЗапроса;
	
КонецФункции

Процедура ДополнитьЗапросДополнительнымиРеквизитамиИСведениями(МетаданныеОбъекта, 
	МассивРеквизитов, ИндексРеквизита, ПутьКРеквизиту = "", ДобавленныеРеквизиты, СправочникДокументОбъект,
	ДополнительныеРеквизитыИСведения1, ДополнительныеРеквизитыИСведенияПоляГруппировки, 
	ДополнительныеРеквизитыИСведения2, ДополнительныеРеквизитыИСведенияУсловие, 
	УсловияСоединенияДопРеквизиты, УсловияСоединенияДопСведения)
	
	Если ИндексРеквизита >= МассивРеквизитов.Количество() - 1 тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизита = МассивРеквизитов[ИндексРеквизита];
	ИмяВложенногоРеквизита = МассивРеквизитов[ИндексРеквизита + 1];
	
	ОпределениеПустогоЗначения = "";
	
	Для Каждого РеквизитМетаданных Из МетаданныеОбъекта.Реквизиты Цикл
		
		Если РеквизитМетаданных.Имя <> ИмяРеквизита тогда
			Продолжить;
		КонецЕсли;
		
		ПолноеИмяРеквизита = ПутьКРеквизиту + РеквизитМетаданных.Имя;
		ПсевдонимРеквизита = СтрЗаменить(ПолноеИмяРеквизита, ".", "");
		
		Для Каждого ТипРеквизита Из РеквизитМетаданных.Тип.Типы() Цикл
			
			Если ТипРеквизита = Тип("Число") ИЛИ ТипРеквизита = Тип("Строка") ИЛИ ТипРеквизита = Тип("Булево") 
				ИЛИ ТипРеквизита = Тип("Дата") ИЛИ ТипРеквизита = Тип("УникальныйИдентификатор") тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектТипа = Новый (ТипРеквизита);
			МетаданныеРеквизита = ОбъектТипа.Метаданные();
			
			ТипМетаданныхРеквизита = "";
			ПолноеИмяОбъектаМетаданных = МетаданныеРеквизита.ПолноеИмя();
			СправочникБД = (СтрНайти(ПолноеИмяОбъектаМетаданных, "Справочник.") <> 0);
			ДокументБД = (СтрНайти(ПолноеИмяОбъектаМетаданных, "Документ.") <> 0);
			
			Если СправочникБД тогда
				ТипМетаданныхРеквизита = "Справочник";
			ИначеЕсли ДокументБД тогда
				ТипМетаданныхРеквизита = "Документ";
			Иначе
				Продолжить;
			КонецЕсли;
						
			Если МетаданныеРеквизита.ТабличныеЧасти.Найти("ДополнительныеРеквизиты") <> Неопределено тогда
				
				ЗапросДопРеквизитыИСведения = Новый Запрос("ВЫБРАТЬ
				|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.ИдентификаторДляФормул КАК СвойствоПредставление,
				|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.ТипЗначения КАК СвойствоТипЗначения
				|ИЗ
				|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты
				|ГДЕ
				|	НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Ссылка.Наименование = &Наименование
				|	И НаборыДополнительныхРеквизитовИСведенийДополнительныеРеквизиты.Свойство.ИдентификаторДляФормул = &ВложенныйРеквизит");
				
				ЗапросДопРеквизитыИСведения.УстановитьПараметр("ВложенныйРеквизит", ИмяВложенногоРеквизита);
				ЗапросДопРеквизитыИСведения.УстановитьПараметр("Наименование", МетаданныеРеквизита.Синоним);
				
				ВыборкаДопРеквизитыИСведения = ЗапросДопРеквизитыИСведения.Выполнить().Выбрать();
				
				Если ВыборкаДопРеквизитыИСведения.Количество() > 0 
					И ДобавленныеРеквизиты.Найти(ПолноеИмяРеквизита) = неопределено тогда
					
					ДобавленныеРеквизиты.Добавить(ПолноеИмяРеквизита);
					
					ДополнительныеРеквизитыИСведения1 = ДополнительныеРеквизитыИСведения1 + ",
					|	ВЫРАЗИТЬ(" + СправочникДокументОбъект + "." + ПолноеИмяРеквизита + " КАК " + ПолноеИмяОбъектаМетаданных + ") КАК " + ПсевдонимРеквизита;
					
					ДополнительныеРеквизитыИСведенияПоляГруппировки = ДополнительныеРеквизитыИСведенияПоляГруппировки + ",
					|	ВЫРАЗИТЬ(" + СправочникДокументОбъект + "." + ПолноеИмяРеквизита + " КАК " + ПолноеИмяОбъектаМетаданных + ")";
					
					ДополнительныеРеквизитыИСведения2 = ДополнительныеРеквизитыИСведения2 + ",
					|	ДопРеквизитыИСведения." + ПсевдонимРеквизита + " КАК " + ПсевдонимРеквизита;
					
					ДополнительныеРеквизитыИСведенияУсловие = ДополнительныеРеквизитыИСведенияУсловие + ",
					|	ДопРеквизитыИСведения." + ПсевдонимРеквизита + ".*";
					
					УсловияСоединенияДопРеквизиты = УсловияСоединенияДопРеквизиты + "
					|		ЛЕВОЕ СОЕДИНЕНИЕ " + ТипМетаданныхРеквизита + "." + МетаданныеРеквизита.Имя + ".ДополнительныеРеквизиты КАК ДопРеквизиты" + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + "
					|		ПО (" + СправочникДокументОбъект + "." + ПолноеИмяРеквизита + " = ДопРеквизиты" + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + ".Ссылка)";
					
					Пока ВыборкаДопРеквизитыИСведения.Следующий() Цикл
						
						Если ВыборкаДопРеквизитыИСведения.СвойствоТипЗначения.Типы().Количество() = 1 тогда
							ТипСвойства = ВыборкаДопРеквизитыИСведения.СвойствоТипЗначения.Типы()[0];
							
							Если ТипСвойства = Тип("Число") тогда
								ОпределениеПустогоЗначения = "0";
							ИначеЕсли ТипСвойства = Тип("Строка") тогда
								ОпределениеПустогоЗначения = """""";
							ИначеЕсли ТипСвойства = Тип("Булево") тогда
								ОпределениеПустогоЗначения = "ЛОЖЬ";
							ИначеЕсли ТипСвойства = Тип("Дата") тогда
								ОпределениеПустогоЗначения = "ДАТАВРЕМЯ(1,1,1)";
							Иначе
								ОбъектСвойства = Новый (ТипСвойства);
								МетаданныеСвойства = ОбъектСвойства.Метаданные();
								ОпределениеПустогоЗначения = "ЗНАЧЕНИЕ(" + МетаданныеСвойства.ПолноеИмя() + ".ПустаяСсылка)";
							КонецЕсли;
						Иначе
							ОпределениеПустогоЗначения = "НЕОПРЕДЕЛЕНО";
						КонецЕсли;
						
						СвойствоПредставление = ВыборкаДопРеквизитыИСведения.СвойствоПредставление;
						
						ДополнительныеРеквизитыИСведения1 = ДополнительныеРеквизитыИСведения1 + ",
						|	МАКСИМУМ(ВЫБОР 
						|		КОГДА ДопРеквизиты" + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + ".Свойство.ИдентификаторДляФормул = """ + СвойствоПредставление + """
						|			ТОГДА ДопРеквизиты" + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + ".Значение
						|		ИНАЧЕ " + ОпределениеПустогоЗначения + "
						|	КОНЕЦ) КАК " + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + СвойствоПредставление;
						
						ДополнительныеРеквизитыИСведения2 = ДополнительныеРеквизитыИСведения2 + ",
						|	ДопРеквизитыИСведения." + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + СвойствоПредставление + " КАК " + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + СвойствоПредставление;
						
						ДополнительныеРеквизитыИСведенияУсловие = ДополнительныеРеквизитыИСведенияУсловие + ",
						|	ДопРеквизитыИСведения." + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + СвойствоПредставление + ".*";
					КонецЦикла;
					
				КонецЕсли;
			КонецЕсли;
			
			ЗапросДопРеквизитыИСведения = Новый Запрос("ВЫБРАТЬ
			|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство.ИдентификаторДляФормул КАК СвойствоПредставление,
			|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство.ТипЗначения КАК СвойствоТипЗначения
			|ИЗ
			|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения КАК НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения
			|ГДЕ
			|	НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Ссылка.Наименование = &Наименование
			|	И НаборыДополнительныхРеквизитовИСведенийДополнительныеСведения.Свойство.ИдентификаторДляФормул = &ВложенныйРеквизит");
			
			ЗапросДопРеквизитыИСведения.УстановитьПараметр("ВложенныйРеквизит", ИмяВложенногоРеквизита);
			ЗапросДопРеквизитыИСведения.УстановитьПараметр("Наименование", МетаданныеРеквизита.Синоним);
			
			ВыборкаДопРеквизитыИСведения = ЗапросДопРеквизитыИСведения.Выполнить().Выбрать();
			
			Если ВыборкаДопРеквизитыИСведения.Количество() > 0 
				И ДобавленныеРеквизиты.Найти(ПолноеИмяРеквизита) = неопределено тогда
				
				ДобавленныеРеквизиты.Добавить(ПолноеИмяРеквизита);
				
				ДополнительныеРеквизитыИСведения1 = ДополнительныеРеквизитыИСведения1 + ",
				|	ВЫРАЗИТЬ(" + СправочникДокументОбъект + "." + ПолноеИмяРеквизита + " КАК " + ПолноеИмяОбъектаМетаданных + ") КАК " + ПсевдонимРеквизита;
				
				ДополнительныеРеквизитыИСведенияПоляГруппировки = ДополнительныеРеквизитыИСведенияПоляГруппировки + ",
				|	ВЫРАЗИТЬ(" + СправочникДокументОбъект + "." + ПолноеИмяРеквизита + " КАК " + ПолноеИмяОбъектаМетаданных + ")";
				
				ДополнительныеРеквизитыИСведения2 = ДополнительныеРеквизитыИСведения2 + ",
				|	ДопРеквизитыИСведения." + ПсевдонимРеквизита + " КАК " + ПсевдонимРеквизита;
				
				ДополнительныеРеквизитыИСведенияУсловие = ДополнительныеРеквизитыИСведенияУсловие + ",
				|	ДопРеквизитыИСведения." + ПсевдонимРеквизита + ".*";
				
				УсловияСоединенияДопСведения = УсловияСоединенияДопСведения + "
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДополнительныеСведения КАК ДопСведения" + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + "
				|		ПО (" + СправочникДокументОбъект + "." + ПолноеИмяРеквизита + " = ДопСведения" + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + ".Объект)";
				
				Пока ВыборкаДопРеквизитыИСведения.Следующий() Цикл
					
					Если ВыборкаДопРеквизитыИСведения.СвойствоТипЗначения.Типы().Количество() = 1 тогда
						ТипСвойства = ВыборкаДопРеквизитыИСведения.СвойствоТипЗначения.Типы()[0];
						
						Если ТипСвойства = Тип("Число") тогда
							ОпределениеПустогоЗначения = "0";
						ИначеЕсли ТипСвойства = Тип("Строка") тогда
							ОпределениеПустогоЗначения = """""";
						ИначеЕсли ТипСвойства = Тип("Булево") тогда
							ОпределениеПустогоЗначения = "ЛОЖЬ";
						ИначеЕсли ТипСвойства = Тип("Дата") тогда
							ОпределениеПустогоЗначения = "ДАТАВРЕМЯ(1,1,1)";
						Иначе
							ОбъектСвойства = Новый (ТипСвойства);
							МетаданныеСвойства = ОбъектСвойства.Метаданные();
							ОпределениеПустогоЗначения = "ЗНАЧЕНИЕ(" + МетаданныеСвойства.ПолноеИмя() + ".ПустаяСсылка)";
						КонецЕсли;
					Иначе
						ОпределениеПустогоЗначения = "НЕОПРЕДЕЛЕНО";
					КонецЕсли;
					
					СвойствоПредставление = ВыборкаДопРеквизитыИСведения.СвойствоПредставление;
					
					ДополнительныеРеквизитыИСведения1 = ДополнительныеРеквизитыИСведения1 + ",
					|	МАКСИМУМ(ВЫБОР 
					|		КОГДА ДопСведения" + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + ".Свойство.ИдентификаторДляФормул = """ + СвойствоПредставление + """
					|			ТОГДА ДопСведения" + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + ".Значение
					|		ИНАЧЕ " + ОпределениеПустогоЗначения + "
					|	КОНЕЦ) КАК " + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + СвойствоПредставление;
					
					ДополнительныеРеквизитыИСведения2 = ДополнительныеРеквизитыИСведения2 + ",
					|	ДопРеквизитыИСведения." + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + СвойствоПредставление + " КАК " + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + СвойствоПредставление;
					
					ДополнительныеРеквизитыИСведенияУсловие = ДополнительныеРеквизитыИСведенияУсловие + ",
					|	ДопРеквизитыИСведения." + ПсевдонимРеквизита + МетаданныеРеквизита.Имя + СвойствоПредставление + ".*";
				КонецЦикла;
			КонецЕсли;
						
			ИндексРеквизита = ИндексРеквизита + 1;
			ПутьКРеквизитуДоРекурсии = ПутьКРеквизиту;
			ПутьКРеквизиту = ПолноеИмяРеквизита + ".";
			
			ДополнитьЗапросДополнительнымиРеквизитамиИСведениями(МетаданныеРеквизита, МассивРеквизитов, ИндексРеквизита, ПутьКРеквизиту, ДобавленныеРеквизиты, СправочникДокументОбъект,
				ДополнительныеРеквизитыИСведения1, ДополнительныеРеквизитыИСведенияПоляГруппировки, ДополнительныеРеквизитыИСведения2, 
				ДополнительныеРеквизитыИСведенияУсловие, УсловияСоединенияДопРеквизиты, УсловияСоединенияДопСведения);
				
			ИндексРеквизита = ИндексРеквизита - 1;
			ПутьКРеквизиту = ПутьКРеквизитуДоРекурсии;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры



Функция СравнитьЧислаПоВидуСравнения(ТекВидСравнения, ПервоеЧисло, ВтороеЧисло) Экспорт
	
	Если ТекВидСравнения = ВидСравнения.Равно Тогда
		Возврат ПервоеЧисло = ВтороеЧисло;
	ИначеЕсли ТекВидСравнения = ВидСравнения.НеРавно Тогда
		Возврат ПервоеЧисло <> ВтороеЧисло;
	ИначеЕсли ТекВидСравнения = ВидСравнения.Больше Тогда
		Возврат ПервоеЧисло > ВтороеЧисло;
	ИначеЕсли ТекВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
		Возврат ПервоеЧисло >= ВтороеЧисло;
	ИначеЕсли ТекВидСравнения = ВидСравнения.Меньше Тогда
		Возврат ПервоеЧисло < ВтороеЧисло;
	ИначеЕсли ТекВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
		Возврат ПервоеЧисло <= ВтороеЧисло;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ОбработатьСпособПерехода(Строки, ЭкземплярОтчета, МассивЭтапов, ДляПроверки = Ложь,Инициализация=Неопределено,
	ИнициализироватьСледующий,ТаблицаЗначенийТекущихПараметров = Неопределено,ТаблицаЗначенийПараметровЭтапа=Неопределено,ДокументПроцесса=Неопределено) Экспорт
	
	Перем ПостроительЗапроса;
	Перем СтруктураЛимитов;
	Перем МассивВидовАналитик;
	СледующийЭтап = Неопределено;
	
	Для Каждого Строка Из Строки Цикл
		Если Строка.ЯвляетсяУсловием Тогда
			Если Строка.ОбработкаУсловия = 0  Тогда
				РезультатПроверки = ПроверкаУсловияПерехода(ПостроительЗапроса, МассивВидовАналитик, Строка, ЭкземплярОтчета, СтруктураЛимитов,
					Ложь,ТаблицаЗначенийТекущихПараметров,ТаблицаЗначенийПараметровЭтапа,ДокументПроцесса);
				Если РезультатПроверки = Истина Тогда
					ТекСтрока = Строка.Строки.Найти(1, "ОбработкаУсловия");
				ИначеЕсли РезультатПроверки = Ложь Тогда
					ТекСтрока = Строка.Строки.Найти(2, "ОбработкаУсловия");
				ИначеЕсли РезультатПроверки = Неопределено Тогда	
					ТекстСообщения = НСтр("ru = 'Не удалось определить этап перехода для этапа'");
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
					Возврат Ложь;
				КонецЕсли;
			ИначеЕсли Строка.ОбработкаУсловия = 6 Тогда 
				// Цикл.
				РезультатПроверки = ПроверкаУсловияПерехода(ПостроительЗапроса, МассивВидовАналитик, Строка, ЭкземплярОтчета, СтруктураЛимитов,
					Инициализация, ТаблицаЗначенийТекущихПараметров, ТаблицаЗначенийПараметровЭтапа, ДокументПроцесса);
				Если РезультатПроверки Тогда
					
					Если НЕ Инициализация = Неопределено И Инициализация Тогда
						ТекСтрока = Строка.Строки.Найти(2, "ОбработкаУсловия");
						ИнициализироватьСледующий = Истина;	
					Иначе	
						ТекСтрока = Строка.Строки.Найти(7, "ОбработкаУсловия");
						// Не меняем флаг инициализации, т.к. возможна остановка процесса при последовательных этапах Ожидания события.
					КонецЕсли;
					
				Иначе
					ТекСтрока = Строка.Строки.Найти(2, "ОбработкаУсловия");
					ИнициализироватьСледующий = Истина;
				КонецЕсли;
	
			Иначе
				Для Каждого ВнутрСтрока Из Строка.Строки Цикл
					Если ВнутрСтрока.ОбработкаУсловия = 4 И ПроверкаУсловияПерехода(ПостроительЗапроса, МассивВидовАналитик, ВнутрСтрока, ЭкземплярОтчета, СтруктураЛимитов,
						Инициализация,ТаблицаЗначенийТекущихПараметров,ТаблицаЗначенийПараметровЭтапа, ДокументПроцесса) Тогда
						ТекСтрока = ВнутрСтрока;
						Прервать;
					ИначеЕсли ВнутрСтрока.ОбработкаУсловия = 5 Тогда
						ТекСтрока = ВнутрСтрока;	
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ОбработатьСпособПерехода(ТекСтрока.Строки, ЭкземплярОтчета, МассивЭтапов, ДляПроверки,Инициализация,ИнициализироватьСледующий,ТаблицаЗначенийТекущихПараметров,ТаблицаЗначенийПараметровЭтапа,ДокументПроцесса);
			
		ИначеЕсли Строка.УсловиеДействие = Перечисления.ДействияЭтапа.ПерейтиКЭтапу Тогда
					
			Если Строка.Значение <> Неопределено тогда
				МассивЭтапов.Добавить(Строка.Значение);
			КонецЕсли;
			
		ИначеЕсли Строка.УсловиеДействие = Перечисления.ДействияЭтапа.ВернутьИсполнителю Тогда
			
			Если НЕ ДляПроверки Тогда
				ВернутьДокументНаДоработку(ЭкземплярОтчета, НСтр("ru = 'Возвращен исполнителю'"));
			КонецЕсли;
			
			Возврат Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Проверяет условие перехода СтрокаВход, представленное параметром в документе процесса ДокументВход по 
// таблице значений параметров ТаблицаЗначенийТекущихПараметровВход. Возвращает результат проверки условия.
Функция ПроверкаУсловияПереходаСПараметром(СтрокаВход, ДокументВход, ИнициализацияВход, ТаблицаЗначенийТекущихПараметровВход)
	// Инициализация.
	РезультатФункции = Ложь;
	ИмяПараметра = СтрЗаменить(СтрокаВход.УсловиеДействие, "Параметры.",""); 
	Если (ИнициализацияВход = Неопределено) ИЛИ (ИнициализацияВход = Ложь) Тогда 
		// Выделим имя параметра.
		ПозицияТочки = Найти(ИмяПараметра,".");
		Если ПозицияТочки > 0 Тогда
			ИмяПараметра = Лев(ИмяПараметра, ПозицияТочки-1);
		КонецЕсли;      
		// Найдём параметр в таблице.
		Если ТаблицаЗначенийТекущихПараметровВход <> Неопределено Тогда
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("КодПараметра",ИмяПараметра);
			НайденныеСтроки = ТаблицаЗначенийТекущихПараметровВход.НайтиСтроки(СтруктураОтбора);
			Если НайденныеСтроки.Количество() > 0 Тогда
				// Параметр в таблице найден. Получим значение параметра из таблицы.
				ЗначениеПараметра = НайденныеСтроки[0].ЗначениеПоУмолчанию;    
				Если ЗначениеПараметра <> Неопределено Тогда
					// Определим, являетя ли параметр примитивного типа.
					ТипПараметра = ТипЗнч(ЗначениеПараметра);
					ЭтоПримитивныйТипПараметра = (ТипПараметра = Тип("Число") ИЛИ ТипПараметра = Тип("Строка") ИЛИ ТипПараметра = Тип("Дата") ИЛИ ТипПараметра = Тип("Булево"));
					Если ЭтоПримитивныйТипПараметра Тогда 
						// Параметр примитивного типа. Используем сравнение.
						РезультатПроверки = ПроверитьОтборПоЗначениюПараметра(ЗначениеПараметра, СтрокаВход);
						РезультатФункции = РезультатПроверки;
					Иначе
						// Ссылочный параметр. Используем построитель запроса.
						ПостроительЗапроса = Неопределено; 
						ИмяПоля = "Ссылка." + СтрокаВход.УсловиеДействие;
						РезультатПроверки = ПроверитьОтборПоПостроителюЗапроса(ПостроительЗапроса, ЗначениеПараметра, ИмяПоля, СтрокаВход);
						РезультатФункции = РезультатПроверки;
					КонецЕсли;
				Иначе	
					РезультатФункции = Ложь;
				КонецЕсли;	
			Иначе
				// Параметр в таблице не найден. Сообщим об этом пользователю.
				ТекстСообщения = НСтр("ru = 'Не удалось найти параметр %ИмяПараметра% в этапе условного перехода'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяПараметра%", Строка(ИмяПараметра));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				РезультатФункции = Ложь;
			КонецЕсли;      
		Иначе
			// Таблица не передана. Сообщим пользователю об ошибке.
			ТекстСообщения = НСтр("ru = 'Не удалось найти параметр %ИмяПараметра% в этапе условного перехода'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяПараметра%", Строка(ИмяПараметра));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = Ложь;
		КонецЕсли;
	Иначе
		РезультатФункции = Истина;
	КонецЕсли; 
	Возврат РезультатФункции;	
КонецФункции		// ПроверкаУсловияПереходаСПараметром()

Функция ПроверкаУсловияПерехода(ПостроительЗапроса, МассивВидовАналитик,  Строка, Документ, СтруктураЛимитов,
	Инициализация=Неопределено,ТаблицаЗначенийТекущихПараметров = Неопределено,ТаблицаЗначенийПараметровЭтапа = Неопределено,ДокументПроцесса=Неопределено)
	
	Если Строка.УсловиеДействие = Перечисления.УсловияЭтапа.Организация Тогда
		
		Возврат ПроверитьОтборПоПостроителюЗапроса(ПостроительЗапроса, Документ, "Организация", Строка);	
		
	ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.СтатьяДДС Тогда
		
		Возврат ПроверитьОтборПоПостроителюЗапроса(ПостроительЗапроса, Документ, "СтатьяДвиженияДенежныхСредств", Строка);
		
	ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.СуммаПлатежа Тогда
		
		Возврат СравнитьЧислаПоВидуСравнения(Строка.Значение, Документ.СуммаДокумента, Строка.ЗначениеОтбора);
		
	ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.Исполнитель Тогда
		
		ТекПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
		Если Строка.Значение = ВидСравнения.Равно Тогда
			Возврат Строка.Значение = ТекПользователь;
		ИначеЕсли Строка.Значение = ВидСравнения.НеРавно Тогда
			Возврат Строка.Значение <> ТекПользователь;
		ИначеЕсли Строка.Значение = ВидСравнения.ВСписке Тогда
			Возврат Строка.Значение.НайтиПоЗначению(ТекПользователь) <> Неопределено;
		ИначеЕсли Строка.Значение = ВидСравнения.НеРавно Тогда
			Возврат Строка.Значение.НайтиПоЗначению(ТекПользователь) = Неопределено;
		Иначе
			ВОзврат Истина;
		КонецЕсли;
		
	ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.Взаиморасчеты Тогда
		
		ПодготовитьСтруктуруЛимитов(СтруктураЛимитов, Документ);
		Если НЕ СтруктураЛимитов.Свойство("ЛимитыВзаиморасчеты") Тогда
			Возврат Истина;
		Иначе
			ТС = СтруктураЛимитов.ЛимитыВзаиморасчеты;
		КонецЕсли;
		
		Если ТС.Контроль = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если Строка.Значение  = Перечисления.ВидСравненияЛимитовЗаявок.АбсолютноеПревышениеЛимитаНа Тогда
			Возврат ТС.Исполнение - ТС.Контроль >= Строка.ЗначениеОтбора;
		ИначеЕсли Строка.Значение  = Перечисления.ВидСравненияЛимитовЗаявок.ОтносительноеПревышениеЛимитаНа Тогда
			Возврат ТС.Исполнение - ТС.Контроль >= Строка.ЗначениеОтбора * ТС.Контроль / 100;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.ОстаткиДС Тогда
		
		ПодготовитьСтруктуруЛимитов(СтруктураЛимитов, Документ);
		
		Если НЕ СтруктураЛимитов.Свойство("ЛимитыОстатковДС") Тогда
			Возврат Истина;
		Иначе
			ТС = СтруктураЛимитов.ЛимитыОстатковДС;
		КонецЕсли;
		
		Если ТС.Контроль = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если Строка.Значение  = Перечисления.ВидСравненияЛимитовЗаявок.АбсолютноеПревышениеЛимитаНа Тогда
			Возврат ТС.Исполнение - ТС.Контроль >= Строка.ЗначениеОтбора;
		ИначеЕсли Строка.Значение  = Перечисления.ВидСравненияЛимитовЗаявок.ОтносительноеПревышениеЛимитаНа Тогда
			Возврат ТС.Исполнение - ТС.Контроль >= Строка.ЗначениеОтбора * ТС.Контроль / 100;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
		
	ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.ПланыДДС Тогда
		
		ПодготовитьСтруктуруЛимитов(СтруктураЛимитов, Документ);
		
		Если НЕ СтруктураЛимитов.Свойство("ЛимитыПланДДС") Тогда
			Возврат Истина;
		Иначе
			ТС = СтруктураЛимитов.ЛимитыПланДДС;
		КонецЕсли;
		
		Если ТС.Контроль = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если Строка.Значение  = Перечисления.ВидСравненияЛимитовЗаявок.АбсолютноеПревышениеЛимитаНа Тогда
			Возврат ТС.Исполнение - ТС.Контроль >= Строка.ЗначениеОтбора;
		ИначеЕсли Строка.Значение  = Перечисления.ВидСравненияЛимитовЗаявок.ОтносительноеПревышениеЛимитаНа Тогда
			Возврат ТС.Исполнение - ТС.Контроль >= Строка.ЗначениеОтбора * ТС.Контроль / 100;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	ИначеЕсли  Найти(Строка.УсловиеДействие,"f().")>0 Тогда	   
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ТекОбъект",Документ);
		ИмяФункции_ = СтрЗаменить( Строка.УсловиеДействие,"f().",""); 
		ПозицияИмениФункции = Найти(ИмяФункции_,"()");
		ИмяФункции = Лев(ИмяФункции_,ПозицияИмениФункции-1)+"()";
		
		Если НЕ ТаблицаЗначенийПараметровЭтапа = Неопределено Тогда
			СтруктураПоискаПараметра = Новый Структура;
			СтруктураПоискаПараметра.Вставить("Потребитель", ИмяФункции);
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Строка, "ИдентификаторПерехода") Тогда
				Если ЗначениеЗаполнено(Строка.ИдентификаторПерехода) Тогда
					СтруктураПоискаПараметра.Вставить("ИдентификаторПерехода", Строка.ИдентификаторПерехода);
				Иначе
					// Не добавляем отбор, т.к. искомое значение пустое.
				КонецЕсли;
			Иначе
				// В строке нет идентификатора. Не добавляем отбор.
			КонецЕсли;
			ТекСтроки = ТаблицаЗначенийПараметровЭтапа.НайтиСтроки(СтруктураПоискаПараметра);
			Для Каждого мПар из ТекСтроки Цикл 
				Если мПар.ТипОтбораПараметра = "Значение" Тогда
					СтруктураПараметров.Вставить(мПар.ИмяПараметра,мПар.ЗначениеПараметра); 	
				Иначе
					// Фиксированное значение.
					СтруктураПараметров.Вставить(мПар.ИмяПараметра, мПар.ЗначениеПараметра);
				КонецЕсли;	
			КонецЦикла;	 
		КонецЕсли;
		
		Если Инициализация=Неопределено ИЛИ Инициализация = Ложь Тогда
			Возврат ПроверитьОтборПоПарамтерическойФункции(СтруктураПараметров,  Строка.УсловиеДействие, Строка);
		Иначе
			Возврат Истина;
		КонецЕсли;  
		
	ИначеЕсли  Найти(Строка.УсловиеДействие,"Источники.")>0 Тогда	   
		
		СтруктураПараметров = Новый Структура;
		ИмяФункции_ = СтрЗаменить(Строка.УсловиеДействие, "Источники.", ""); 
		ПозицияИмениФункции = Найти(ИмяФункции_, ".");
		ИмяФункции = Лев(ИмяФункции_, ПозицияИмениФункции - 1);
		
		Если НЕ ТаблицаЗначенийПараметровЭтапа = Неопределено Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Потребитель", ИмяФункции);
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Строка, "ИсточникСсылка") Тогда
				СтруктураПоиска.Вставить("ИсточникСсылка", Строка.ИсточникСсылка);
			Иначе
				// Не добавляем отбор.
			КонецЕсли;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Строка, "ИдентификаторПерехода") Тогда
				Если ЗначениеЗаполнено(Строка.ИдентификаторПерехода) Тогда
					СтруктураПоиска.Вставить("ИдентификаторПерехода", Строка.ИдентификаторПерехода);
				Иначе
					// Не добавляем отбор, т.к. искомое значение пустое.
				КонецЕсли;
			Иначе
				// В строке нет идентификатора. Не добавляем отбор.
			КонецЕсли;
			ТекСтроки = ТаблицаЗначенийПараметровЭтапа.НайтиСтроки(СтруктураПоиска);
			Для Каждого мПар из ТекСтроки Цикл 
				Если НЕ мПар.ПараметрОбъекта Тогда
					СтруктураПараметров.Вставить(мПар.КодПараметра, мПар.ЗначениеПараметра); 	
				Иначе  
					ЗначениеПараметра = Вычислить("Документ" + "." + мПар.ЗначениеПараметра);
					СтруктураПараметров.Вставить(мПар.КодПараметра, ЗначениеПараметра);
				КонецЕсли;	
			КонецЦикла;	 
		КонецЕсли;
		
		Если Инициализация= Неопределено ИЛИ Инициализация = Ложь Тогда
			Возврат ПроверитьОтборПоИсточникуДанных(СтруктураПараметров,  Строка.УсловиеДействие, Строка, ДокументПроцесса);
		Иначе
			Возврат Истина;
		КонецЕсли; 
		
	ИначеЕсли  Найти(Строка.УсловиеДействие,"Параметры.")>0 Тогда	   
		
		РезультатПроверки = ПроверкаУсловияПереходаСПараметром(Строка, Документ, Инициализация, ТаблицаЗначенийТекущихПараметров);
		Возврат РезультатПроверки;
		
	КонецЕсли;
	Возврат Истина;
КонецФункции

Функция ПроверитьОтборПоПостроителюЗапроса(ПостроительЗапроса, Документ, ИмяПоля, Строка)
	
	ИмяПоля = СтрЗаменить(ИмяПоля,"Параметры.СогласуемыйОбъект", "Ссылка");		
	Пока СтрНайти(ИмяПоля, "Ссылка.Ссылка") > 0 Цикл
		ИмяПоля = СтрЗаменить(ИмяПоля, "Ссылка.Ссылка", "Ссылка");
	КонецЦикла;
			
	МассивРеквизитов = ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ИмяПоля, ".");
	Если МассивРеквизитов.Количество() < 2 тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИндексРеквизита = 1;
		
	Если ПостроительЗапроса = Неопределено Тогда
		ПостроительЗапроса = ВернутьПостроительЗапроса(Документ, МассивРеквизитов, ИндексРеквизита);
	КонецЕсли;
	ПостроительЗапроса.Отбор.Сбросить();
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") И ИмяПоля = "Ссылка.Комментарий" Тогда
		ИмяПоля = "Комментарий";
	КонецЕсли;
	
	Отбор = ПостроительЗапроса.Отбор.Найти(ИмяПоля);
	
	Если Отбор = Неопределено Тогда		
		Попытка 
			
			Отбор = ПостроительЗапроса.Отбор.Добавить(ИмяПоля);
			
			Если Отбор.ТипЗначения.Типы().Количество() = 1 тогда
				Если Отбор.ТипЗначения.Типы()[0] = Тип("Строка") 
					И Отбор.ТипЗначения.КвалификаторыСтроки.Длина = 0
					И Отбор.ТипЗначения.КвалификаторыСтроки.ДопустимаяДлина = ДопустимаяДлина.Переменная тогда
										
					ТекстОшибки = СтрШаблон(Нстр("ru = 'Поле ""%1"" не доступно для отбора: строка неограниченной длины'"), ИмяПоля);
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки,,, СтатусСообщения.Важное);
					Возврат Ложь;
				
				КонецЕсли;
			КонецЕсли;
			
		Исключение
						
			Попытка								
				ИндексРеквизита = МассивРеквизитов.Количество() - 1;
				ИмяРеквизита = МассивРеквизитов[ИндексРеквизита];
				
				ИмяРеквизитаРодителя = "";
				ИндексРеквизита = ИндексРеквизита - 1;
				
				Пока ИндексРеквизита > 0 Цикл
					ИмяРеквизитаРодителя = МассивРеквизитов[ИндексРеквизита] + ИмяРеквизитаРодителя;
					ИндексРеквизита = ИндексРеквизита - 1;
				КонецЦикла;
				
				Если ИмяРеквизитаРодителя = "" тогда
					ИмяРеквизитаРодителя = "Ссылка";
				КонецЕсли;
								
				ПолеРодителя = ПостроительЗапроса.ДоступныеПоля.Найти(ИмяРеквизитаРодителя);
				Если ПолеРодителя <> Неопределено тогда
					ТипЗначенияРодителя = ПостроительЗапроса.ДоступныеПоля.Найти(ИмяРеквизитаРодителя).ТипЗначения.Типы()[0];
					РодительОбъект = Новый (ТипЗначенияРодителя);
					МетаданныеРодителя = РодительОбъект.Метаданные();
					
					ИмяРеквизита = ИмяРеквизитаРодителя + МетаданныеРодителя.Имя + ИмяРеквизита;
					
					Отбор = ПостроительЗапроса.Отбор.Добавить(ИмяРеквизита);
				Иначе
					ТекстОшибки = СтрШаблон(Нстр("ru = 'Поле ""%1"" не доступно для отбора'"), ИмяПоля);
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки,,, СтатусСообщения.Важное);
					Возврат Ложь;
				КонецЕсли;				
			Исключение
				ТекстОшибки = СтрШаблон(Нстр("ru = 'Поле ""%1"" не доступно для отбора'"), ИмяПоля);
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки,,, СтатусСообщения.Важное);
				Возврат Ложь;
			КонецПопытки;
					
		КонецПопытки;
	КонецЕсли;
	
	Отбор.ВидСравнения = Строка.Значение;
	Отбор.Значение = Строка.ЗначениеОтбора;
	Отбор.Использование = Истина;
	
	Возврат НЕ ПостроительЗапроса.Результат.Пустой();
	
КонецФункции

Функция ПроверитьОтборПоПарамтерическойФункции(СтруктураПараметров,ФункцияСтрока,СтрокаОтбора)
	
	РезультатФункции = Ложь;
	ИмяФункции_ = СтрЗаменить(ФункцияСтрока,"f().",""); 
	ПозицияИмениФункции = СтрНайти(ИмяФункции_,"()");
	ИмяФункции = Лев(ИмяФункции_,ПозицияИмениФункции-1);
	ВозвращемыйПараметр =  Прав(ИмяФункции_,СтрДлина(ИмяФункции_)-ПозицияИмениФункции-2);
	
	Выполнить ("МодульОбработкиЭтаповПроцессовСерверУХ."+ИмяФункции+"(СтруктураПараметров)");
	
	Если СтруктураПараметров.Свойство(ВозвращемыйПараметр) Тогда
		РезультатПараметр = СтруктураПараметров[ВозвращемыйПараметр];
		ЗначениеОтбораСтроки = СтрокаОтбора.ЗначениеОтбора;
		ВидСравненияСтроки = СтрокаОтбора.Значение;
		Если ВидСравненияСтроки = ВидСравнения.Меньше Тогда
			РезультатФункции = (РезультатПараметр < ЗначениеОтбораСтроки);
		ИначеЕсли ВидСравненияСтроки = ВидСравнения.Больше Тогда
			РезультатФункции = (РезультатПараметр > ЗначениеОтбораСтроки);
		ИначеЕсли ВидСравненияСтроки = ВидСравнения.Равно Тогда
			РезультатФункции = (РезультатПараметр = ЗначениеОтбораСтроки);
		ИначеЕсли ВидСравненияСтроки = ВидСравнения.БольшеИлиРавно Тогда
			РезультатФункции = (РезультатПараметр >= ЗначениеОтбораСтроки);
		ИначеЕсли ВидСравненияСтроки = ВидСравнения.МеньшеИлиРавно Тогда
			РезультатФункции = (РезультатПараметр <= ЗначениеОтбораСтроки);
		КонецЕсли;
	Иначе    
		ТекстСообщения = НСтр("ru = 'Не найден возвращаемый параметр %Параметр% функции условного перехода.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Параметр%", Строка(ВозвращемыйПараметр));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Ложь;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции	

Функция  ПроверитьОтборПоИсточникуДанных(СтруктураПараметров, ИсточникСтрока, СтрокаОтбора, ДокументПроцесса = Неопределено)
	
	ИмяФункции_ = СтрЗаменить(ИсточникСтрока,"Источники.",""); 
	ПозицияИмениФункции = СтрНайти(ИмяФункции_,".");
	ИмяФункции = Лев(ИмяФункции_,ПозицияИмениФункции-1);
	ВозвращемыйПараметр =  Прав(ИмяФункции_,СтрДлина(ИмяФункции_)-ПозицияИмениФункции);
	
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаОтбора, "ИсточникСсылка") Тогда
		Если ЗначениеЗаполнено(СтрокаОтбора.ИсточникСсылка) Тогда
			Источник = СтрокаОтбора.ИсточникСсылка;
		Иначе
			Источник = Неопределено;
		КонецЕсли;
	Иначе
		Источник = Неопределено;
	КонецЕсли;
	
	Если Источник = Неопределено Тогда
		Если ДокументПроцесса <> Неопределено Тогда
			Источник = ПолучитьИсточникПоШаблону(ДокументПроцесса.ШаблонПроцесса,ИмяФункции);
		Иначе
			Источник = Неопределено;
		КонецЕсли;
	Иначе
		// Значение установлено ранее.
	КонецЕсли;
	
	
	Если Источник = Неопределено Тогда 
		ТекстИсключения = НСтр("ru = 'Не найден источник %ИмяФункции%'");
		ТекстИсключения = СтрЗаменить(ТекстИсключения, "%ИмяФункции%", Строка(ИмяФункции));
		ВызватьИсключение ТекстИсключения;
		Возврат Ложь;
	КонецЕсли;	
	
	оИсточник = Источник.ПолучитьОбъект();
	Для Каждого СтрОтбор ИЗ оИсточник.УточненияСпособовОпределения Цикл
		Если  СтруктураПараметров.Свойство(СтрОтбор.ПолеБД) Тогда
			СтрОтбор.Значение = СтруктураПараметров[СтрОтбор.ПолеБД];
		КонецЕсли;	 
	КонецЦикла;
	оИсточник.Записать();
	
	РезультатЗапроса = УправлениеОтчетамиУХ.ПолучитьТаблицуДанныхПоИсточнику(Неопределено,оИсточник.Ссылка,Истина);
	Если РезультатЗапроса.Количество() = 1 Тогда
		Если НЕ РезультатЗапроса.Колонки.Найти("Значение")=Неопределено Тогда
			ВозвращемыйПараметр = "Значение";
		ИначеЕсли  РезультатЗапроса.Колонки.Найти(ВозвращемыйПараметр)=Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;	 
		
		
		Если СтрокаОтбора.Значение = ВидСравнения.Меньше Тогда
			Возврат РезультатЗапроса[0][ВозвращемыйПараметр] < СтрокаОтбора.ЗначениеОтбора
		ИначеЕсли СтрокаОтбора.Значение = ВидСравнения.Больше Тогда
			Возврат РезультатЗапроса[0][ВозвращемыйПараметр] > СтрокаОтбора.ЗначениеОтбора
		ИначеЕсли СтрокаОтбора.Значение = ВидСравнения.Равно Тогда
			Возврат РезультатЗапроса[0][ВозвращемыйПараметр] = СтрокаОтбора.ЗначениеОтбора
		ИначеЕсли СтрокаОтбора.Значение = ВидСравнения.БольшеИлиРавно Тогда
			Возврат РезультатЗапроса[0][ВозвращемыйПараметр] >= СтрокаОтбора.ЗначениеОтбора
		ИначеЕсли СтрокаОтбора.Значение = ВидСравнения.МеньшеИлиРавно Тогда
			Возврат РезультатЗапроса[0][ВозвращемыйПараметр] <= СтрокаОтбора.ЗначениеОтбора	
		ИначеЕсли СтрокаОтбора.Значение = ВидСравнения.НеРавно Тогда
			Возврат РезультатЗапроса[0][ВозвращемыйПараметр] <> СтрокаОтбора.ЗначениеОтбора
		ИначеЕсли СтрокаОтбора.Значение = ВидСравнения.ВСписке Тогда
			Возврат СтрокаОтбора.ЗначениеОтбора.НайтиПоЗначению(РезультатЗапроса[0][ВозвращемыйПараметр]) <> Неопределено
		ИначеЕсли СтрокаОтбора.Значение = ВидСравнения.НеВСписке Тогда
			Возврат СтрокаОтбора.ЗначениеОтбора.НайтиПоЗначению(РезультатЗапроса[0][ВозвращемыйПараметр]) = Неопределено
		ИначеЕсли Строка(СтрокаОтбора.Значение) = "В группе" Тогда
			Возврат РезультатЗапроса[0][ВозвращемыйПараметр].ПринадлежитЭлементу(СтрокаОтбора.ЗначениеОтбора)
		ИначеЕсли Строка(СтрокаОтбора.Значение) = "Не в группе" Тогда
			Возврат Не РезультатЗапроса[0][ВозвращемыйПараметр].ПринадлежитЭлементу(СтрокаОтбора.ЗначениеОтбора)
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;	 
	
КонецФункции	

Функция ПроверитьОтборПоЗначениюПараметра(ЗначениеПараметра, СтрокаОтбора)
	РезультатФункции = Ложь;
	ТекВидСравнения = СтрокаОтбора.Значение;
	ТекЗначениеОтбора = СтрокаОтбора.ЗначениеОтбора;
	Если ТекВидСравнения = ВидСравнения.Меньше Тогда
		РезультатФункции = ЗначениеПараметра < ТекЗначениеОтбора;
	ИначеЕсли ТекВидСравнения = ВидСравнения.Больше Тогда
		РезультатФункции = ЗначениеПараметра > ТекЗначениеОтбора;
	ИначеЕсли ТекВидСравнения = ВидСравнения.Равно Тогда
		РезультатФункции = ЗначениеПараметра = ТекЗначениеОтбора;
	ИначеЕсли ТекВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
		РезультатФункции = ЗначениеПараметра >= ТекЗначениеОтбора;
	ИначеЕсли ТекВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
		РезультатФункции = ЗначениеПараметра <= ТекЗначениеОтбора;
	ИначеЕсли ТекВидСравнения = ВидСравнения.НеРавно Тогда
		РезультатФункции = ЗначениеПараметра <> ТекЗначениеОтбора;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции	
	 
Функция ПолучитьИсточникПоШаблону(ШаблонПроцесса,Наименование)
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.Код,
	|	ИсточникиДанныхДляРасчетов.Ссылка,
	|	ИсточникиДанныхДляРасчетов.Наименование
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.ПотребительРасчета = &ПотребительРасчета
	|	И ИсточникиДанныхДляРасчетов.ПометкаУдаления = ЛОЖЬ
	|	И ИсточникиДанныхДляРасчетов.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("ПотребительРасчета",ШаблонПроцесса);
	Запрос.УстановитьПараметр("Наименование",Наименование);
	
	
	тИсточники =  Запрос.Выполнить().Выгрузить();
	
	Если тИсточники.Количество() =1 Тогда
		Возврат тИсточники[0].Ссылка;
	Иначе	
		Возврат Неопределено;
	КонецЕсли	
		
КонецФункции	

#КонецОбласти



#Область ПроцедурыУправленияПроцессомПодготовкиОтчетности

// Осуществляет проведение/распроведение документа СсылкаВход.
Процедура ОбработатьПроводящийсяДокумент(СсылкаВход, УтвердитьВход)
	Попытка
		Если ЗначениеЗаполнено(СсылкаВход) Тогда
			ПредПроведение = СсылкаВход.Проведен; 
			ДокументОбъект = СсылкаВход.ПолучитьОбъект();
			Если УтвердитьВход = ПредПроведение Тогда
				// Состояния совпадают. Не изменяем.
			Иначе	
				Если УтвердитьВход Тогда
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекстСообщения = НСтр("ru = 'Передано пустое значение для обработки документа. Операция отменена.'");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Исключение
		Если УтвердитьВход Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось провести документ %Документ%: %ОписаниеОшибки%'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось отменить проведение документа %Документ%: %ОписаниеОшибки%'");
		КонецЕсли;
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Строка(СсылкаВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры		// ОбработатьПроводящийсяДокумент()

// Возвращает таблицу документов, формируемых в этапе ЭтапВход по параметрам функции.
Функция ПолучитьТаблицуФормируемыхДокументов(ВерсияРегламентаВход, ОрганизацияВход, ПериодВход, СценарийВход, ЭтапВход, ВидДокументаВход = Неопределено) Экспорт
	ТаблицаОтчетов = УправлениеПроцессамиСогласованияУХ.ПолучитьТаблицуФормируемыхОтчетовПоРегламенту(ВерсияРегламентаВход, ПериодВход, СценарийВход, ВидДокументаВход);
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Организация", ОрганизацияВход);
	СтруктураПоиска.Вставить("Этап", ЭтапВход);
	НайденныеСтроки = ТаблицаОтчетов.НайтиСтроки(СтруктураПоиска);
	РезультатФункции = ТаблицаОтчетов.СкопироватьКолонки();
	Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
		НоваяСтрока = РезультатФункции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекНайденныеСтроки);		
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		// ПолучитьТаблицуФормируемыхДокументов()

Функция ОбработатьДокументыЭтапаПоОрганизации(ВерсияРегламента, Период, Сценарий, Этап, Организация, Утвердить, НастройкиОбработкиДокументов, ОстанавливатьсяПриОшибке, ВидДокумента = Неопределено) Экспорт
	
	ТаблицаФормируемыеДокументы = ПолучитьТаблицуФормируемыхДокументов(ВерсияРегламента, Организация, Период, Сценарий, Этап, ВидДокумента);
	УспешноОбработаныДокументы = Истина;	
	
	Для Каждого ТекТаблицаФормируемыеДокументы Из ТаблицаФормируемыеДокументы Цикл
		ТекДокумент = ТекТаблицаФормируемыеДокументы.Ссылка;

		МассивСтруктурНастроек = Новый Массив();
		
		СтрукутраНастройки = Новый Структура;
		СтрукутраНастройки.Вставить("ДокументБД",			 ТекТаблицаФормируемыеДокументы.ДокументБД);
		СтрукутраНастройки.Вставить("ДокументОбъект",		 Неопределено);
		СтрукутраНастройки.Вставить("ДокументСсылка",		 Неопределено);
		СтрукутраНастройки.Вставить("Организация",			 ТекТаблицаФормируемыеДокументы.Организация);
		СтрукутраНастройки.Вставить("ОсновнаяВалюта",		 Неопределено);
		СтрукутраНастройки.Вставить("ПериодОтчета",			 Период);
		СтрукутраНастройки.Вставить("Сценарий",				 Сценарий);
		СтрукутраНастройки.Вставить("ШаблонДокументаБД",	 ТекТаблицаФормируемыеДокументы.ШаблонДокумента);
		Если ТипЗнч(НастройкиОбработкиДокументов) = Тип("Структура") Тогда
			НовЗаполнятьДокументы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиОбработкиДокументов, "ЗаполнятьДокументы", Ложь);
			НовУстанавливатьСтатусОтчетов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиОбработкиДокументов, "УстанавливатьСтатусОтчетов", Ложь);
			СтрукутраНастройки.Вставить("ЗаполнятьДокументы", НовЗаполнятьДокументы);
			СтрукутраНастройки.Вставить("УстанавливатьСтатусОтчетов", НовУстанавливатьСтатусОтчетов);
		ИначеЕсли ТипЗнч(НастройкиОбработкиДокументов) = Тип("Булево") Тогда
			СтрукутраНастройки.Вставить("ЗаполнятьДокументы", НастройкиОбработкиДокументов);
			СтрукутраНастройки.Вставить("УстанавливатьСтатусОтчетов", НастройкиОбработкиДокументов);
		Иначе
			СтрукутраНастройки.Вставить("ЗаполнятьДокументы", Ложь);
			СтрукутраНастройки.Вставить("УстанавливатьСтатусОтчетов", Ложь);
		КонецЕсли;
		МассивСтруктурНастроек.Добавить(СтрукутраНастройки);	
		Если ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда

			Попытка
				Если НЕ ((Утвердить) И (ТекТаблицаФормируемыеДокументы.Состояние = Перечисления.СостоянияОтчетов.Утвержден)) Тогда
					УправлениеРабочимиПроцессамиУХ.ОбработатьДокументыПоРегламенту(МассивСтруктурНастроек, ВерсияРегламента, Утвердить);	
				Иначе
					// Отчет уже утверждён. Пропускаем.
				КонецЕсли;
			Исключение
				УспешноОбработаныДокументы = Ложь;	
			КонецПопытки;	
		ИначеЕсли ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.ТрансформационнаяКорректировка") Тогда
			Если ЗначениеЗаполнено(ТекДокумент) Тогда
				Если СтрукутраНастройки.УстанавливатьСтатусОтчетов Тогда
					ОбработатьПроводящийсяДокумент(ТекДокумент, Утвердить);
				Иначе
					// Не перепроводим документ, т.к. это приведёт к изменению его статуса.
				КонецЕсли;
			Иначе
				УправлениеРабочимиПроцессамиУХ.ОбработатьДокументыПоРегламенту(МассивСтруктурНастроек, ВерсияРегламента, Утвердить);	
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.Трансляция") Тогда
			Если ЗначениеЗаполнено(ТекДокумент) Тогда
				Если СтрукутраНастройки.УстанавливатьСтатусОтчетов Тогда
					ОбработатьПроводящийсяДокумент(ТекДокумент, Утвердить);
				Иначе
					// Не перепроводим документ, т.к. это приведёт к изменению его статуса.
				КонецЕсли;
			Иначе
				УправлениеРабочимиПроцессамиУХ.ОбработатьДокументыПоРегламенту(МассивСтруктурНастроек, ВерсияРегламента, Утвердить);	
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.Элиминация") Тогда
			Если ЗначениеЗаполнено(ТекДокумент) Тогда
				Если СтрукутраНастройки.УстанавливатьСтатусОтчетов Тогда
					ОбработатьПроводящийсяДокумент(ТекДокумент, Утвердить);
				Иначе
					// Не перепроводим документ, т.к. это приведёт к изменению его статуса.
				КонецЕсли;
			Иначе
				УправлениеРабочимиПроцессамиУХ.ОбработатьДокументыПоРегламенту(МассивСтруктурНастроек, ВерсияРегламента, Утвердить);	
			КонецЕсли;	
		Иначе
			// Неизвестный вариант документа. Пропускаем.
		КонецЕсли;
	КонецЦикла;
	
	Возврат УспешноОбработаныДокументы;
	
КонецФункции		// ОбработатьДокументыЭтапаПоОрганизации()

// Возвращает состояние, в которое будет переведен этап-последователь ЭтапВход.
Функция ПолучитьСостояниеОткрытияНовогоЭтапа(ЭтапВход)
	ТекТипЭтапа = ЭтапВход.ТипЭтапа;
	РезультатФункции = Перечисления.СостоянияЭтаповПроцессов.Выполняется;
	Если ТекТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности Тогда
		РезультатФункции = Перечисления.СостоянияЭтаповПроцессов.Выполняется;
	ИначеЕсли ТекТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Оповещение Тогда
		РезультатФункции = Перечисления.СостоянияЭтаповПроцессов.Утвержден;
	ИначеЕсли ТекТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Обработка Тогда
		Если ЭтапВход.РучноеУтверждениеЭтапа Тогда
			РезультатФункции = Перечисления.СостоянияЭтаповПроцессов.Выполняется;
		Иначе
			РезультатФункции = Перечисления.СостоянияЭтаповПроцессов.Утвержден;
		КонецЕсли;
	Иначе
		РезультатФункции = Перечисления.СостоянияЭтаповПроцессов.Выполняется;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьСостояниеОткрытияНовогоЭтапа()

// Возвращает соответствие Организаций для активации этапа по организации
// ОрганизацияВход, опираясь на таблицу СостоянияВыполненияПроцесса.
Функция ПолучитьОрганизацииАктивацииЭтапа(ЭтапВход, ОрганизацияВход, СостоянияВыполненияПроцесса) Экспорт
	РезультатФункции = Новый Соответствие;
	Если ЭтапВход.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности Тогда
		ТипОрганизацийЭтапа = ЭтапВход.ТипОрганизацийЭтапа;
		Если ТипОрганизацийЭтапа = Перечисления.ТипыОрганизационныхЕдиниц.Обычная Тогда
			РезультатФункции.Вставить(ОрганизацияВход, Истина);
		ИначеЕсли ТипОрганизацийЭтапа = Перечисления.ТипыОрганизационныхЕдиниц.Консолидирующая Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Этап", ЭтапВход);
			НайденныеСтроки = СостоянияВыполненияПроцесса.НайтиСтроки(СтруктураПоиска);
			Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
				ТекОрганизация = ТекНайденныеСтроки.Организация;
				РезультатФункции.Вставить(ТекОрганизация, Истина);
			КонецЦикла;
		ИначеЕсли ТипОрганизацийЭтапа = Перечисления.ТипыОрганизационныхЕдиниц.Элиминирующая Тогда
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Этап", ЭтапВход);
			НайденныеСтроки = СостоянияВыполненияПроцесса.НайтиСтроки(СтруктураПоиска);
			Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
				ТекОрганизация = ТекНайденныеСтроки.Организация;
				РезультатФункции.Вставить(ТекОрганизация, Истина);
			КонецЦикла;
		ИначеЕсли ТипОрганизацийЭтапа = Перечисления.ТипыОрганизационныхЕдиниц.ПустаяСсылка() Тогда	
			РезультатФункции.Вставить(ОрганизацияВход, Истина);
		Иначе
			ТекстСообщения = НСтр("ru = 'Неизвестный тип организационных единиц %ТипОргЕдиниц% в этапе %Этап%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТипОргЕдиниц%", Строка(ТипОрганизацийЭтапа));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(ЭтапВход));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		РезультатФункции.Вставить(ПустаяОрганизация, Истина);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьОрганизацииАктивацииЭтапа()

Процедура ОткрытьЭтапПоследователь(ЭтапВход, ОрганизацияВход, ПериодВход, СценарийВход, ВерсияРегламентаВход, ЭкземплярПроцессаВход, СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок)
	ТаблицаПредшественников = ПолучитьТаблицуУтвержденияПредыдущихЭтапов(ЭтапВход, ОрганизацияВход, ВерсияРегламентаВход, ПериодВход, СценарийВход, ЭкземплярПроцессаВход);
	СостояниеЭтапаУтвержден = Перечисления.СостоянияЭтаповПроцессов.Утвержден;
	МожноАктивировать = Истина;
	Для Каждого ТекТаблицаПредшественников Из ТаблицаПредшественников Цикл
		Если ТекТаблицаПредшественников.Состояние <> СостояниеЭтапаУтвержден Тогда
			МожноАктивировать = Ложь;
			Прервать;						// Найдена блокирующая строка.
		Иначе
			// Проверка пройдена. Продолжаем.
		КонецЕсли;
	КонецЦикла;
	Если МожноАктивировать Тогда
		// Получим соответствие организаций для передачи в активацию этапа.
		Организации = ПолучитьОрганизацииАктивацииЭтапа(ЭтапВход, ОрганизацияВход, СостоянияВыполненияПроцесса);
		// Получим состояние, в которое будет переведён этап.
		НовоеСостояние = ПолучитьСостояниеОткрытияНовогоЭтапа(ЭтапВход);
		// Непосредственная установка состояния и обработка этапа.
		УстановитьСостояниеЭтапаПроцессаОтчетности(
		СостоянияВыполненияПроцесса
		, мПредшественникиСтрок	
		, мПоследователиСтрок	
		, ВерсияРегламентаВход
		, ПериодВход
		, СценарийВход
		, ЭтапВход
		, Организации
		, НовоеСостояние
		, Ложь				// Отладка
		, Истина			// Остановка при ошибке
		, Истина			// Обрабатывать документы
		, ЭкземплярПроцессаВход);
	Иначе
		// Утверждены не все предшественники. Не открываем последователь.
	КонецЕсли;
КонецПроцедуры

// Добавляет в массив МассивОрганизаций организации, которые консолидирует организация
// КонсолидирующаяОрганизацияВход, согласно дереву регламента ДеревоВход. Параметр
// ГлубинаРекурсииВход защищает от бесконечной рекурсии.
Процедура ДополнитьМассивКонсолидируемыхОрганизаций(ДеревоВход, КонсолидирующаяОрганизацияВход, МассивОрганизаций, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 10000 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ТекСтроки Из ДеревоВход.Строки Цикл
		Если ТекСтроки.ОрганизационнаяЕдиница = КонсолидирующаяОрганизацияВход Тогда
			Для Каждого ТекЗависимыеСтроки Из ТекСтроки.Строки Цикл
				МассивОрганизаций.Добавить(ТекЗависимыеСтроки.ОрганизационнаяЕдиница);
			КонецЦикла;
		Иначе
			ДополнитьМассивКонсолидируемыхОрганизаций(ТекСтроки, КонсолидирующаяОрганизацияВход, МассивОрганизаций, ГлубинаРекурсииВход + 1);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры		// ДополнитьМассивКонсолидируемыхОрганизаций()

// Возвращает массив организаций для консолидации по консолидирующей организации
// КонсолидирующаяОрганизацияВход по сценарию СценарийВход и регламенту 
// ВерсияРегламентаВход на текущую дату.
Функция МассивОрганизацийКонсолидации(ВерсияРегламентаВход, СценарийВход, КонсолидирующаяОрганизацияВход)
	РезультатФункции = Новый Массив;
	ДеревоГруппы = РегламентыВызовСервера.ПолучитьСтруктуруГруппыВерсии(ВерсияРегламентаВход, СценарийВход, ТекущаяДатаСеанса());
	ДополнитьМассивКонсолидируемыхОрганизаций(ДеревоГруппы, КонсолидирующаяОрганизацияВход, РезультатФункции);
	Возврат РезультатФункции;
КонецФункции

// Возвращает все организации, по которым необходимо заполнение этапов-
// предшественников по этапу ЭтапВход и организации ОрганизацияВход.
Функция ПолучитьМассивНеобходимыхОрганизацийПредшественниковЭтапа(ЭтапВход, ОрганизацияВход, СценарийВход, ВерсияРегламентаВход, ПериодВход)
	РезультатФункции = Новый Массив;
	ИспользуемыйТипОрганизаций = ЭтапВход.ТипОрганизацийЭтапа;
	Если ИспользуемыйТипОрганизаций = Перечисления.ТипыОрганизационныхЕдиниц.Обычная Тогда
		// Для обычной организации добавим только её саму.
		РезультатФункции.Добавить(ОрганизацияВход);
	ИначеЕсли ИспользуемыйТипОрганизаций = Перечисления.ТипыОрганизационныхЕдиниц.Консолидирующая Тогда	
		// Для этапа с консолидирующими организациями, добавим все организации этапа и входящие в их периметр.
		ТаблицаОрганизацийРегламента = ПолучитьТаблицуОрганизацийЭтапаПоРегламенту(ЭтапВход, ВерсияРегламентаВход);
		Для Каждого ТекТаблицаОрганизацийРегламента Из ТаблицаОрганизацийРегламента Цикл
			ТекОрганизацияРегламента = ТекТаблицаОрганизацийРегламента.Организация;
			МассивЗависимых = МассивОрганизацийКонсолидации(ВерсияРегламентаВход, СценарийВход, ТекОрганизацияРегламента); 
			Для Каждого ТекМассивЗависимых Из МассивЗависимых Цикл
				РезультатФункции.Добавить(ТекМассивЗависимых);
			КонецЦикла;
		КонецЦикла;
	ИначеЕсли ИспользуемыйТипОрганизаций = Перечисления.ТипыОрганизационныхЕдиниц.Элиминирующая Тогда	
		// Для элиминирующей организации возьмём организации того же уровня.
		ТаблицаОрганизацийРегламента = ПолучитьТаблицуОрганизацийЭтапаПоРегламенту(ЭтапВход, ВерсияРегламентаВход);
		Для Каждого ТекТаблицаОрганизацийРегламента Из ТаблицаОрганизацийРегламента Цикл
			СоответствиеПериметров = УправлениеРабочимиПроцессамиУХ.ПолучитьПериметры(СценарийВход, ПериодВход);
			СоответветствиеТекОрганизации = СоответствиеПериметров.Получить(ТекТаблицаОрганизацийРегламента);
			Если СоответветствиеТекОрганизации <> Неопределено Тогда
				РезультатФункции = Новый Массив;
				Для Каждого ТекСоответветствиеТекОрганизации Из СоответветствиеТекОрганизации Цикл
					РезультатФункции.Добавить(ТекСоответветствиеТекОрганизации.Ключ);
				КонецЦикла;	
			Иначе
				// Пропускаем организацию.
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ИспользуемыйТипОрганизаций = Перечисления.ТипыОрганизационныхЕдиниц.ПустаяСсылка() Тогда	
		// Пустое значение. Возьмём исходную организацию.
		РезультатФункции.Добавить(ОрганизацияВход);
	Иначе
		// Неизвестный вариант.
		ТекстСообщения = НСтр("ru = 'Неизвестный тип организационных единиц %ТипОрганизационныхЕдиниц% в этапе %Этап%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТипОрганизационныхЕдиниц%", Строка(ИспользуемыйТипОрганизаций));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИспользуемыйТипОрганизаций%", Строка(ЭтапВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
	РезультатФункции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатФункции);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьМассивНеобходимыхОрганизацийПредшественниковЭтапа()

// Возвращает массив, содержащий значения полей ИмяКолонкиВход родителей строки
// дерева значений ИмяКолонкиВход.
Функция ПолучитьМассивЗначенийРодителейСтрокиДерева(Знач СтрокаДереваВход, ИмяКолонкиВход) Экспорт
	РезультатФункции = Новый Массив;
	// Проверка существования колонки ИмяКолонкиВход.
	Если ТипЗнч(СтрокаДереваВход) = Тип("ДеревоЗначений") Тогда
		РезультатФункции = Новый Массив;		// Корень дерева, родителей нет. Вернём пустой массив.
	ИначеЕсли ТипЗнч(СтрокаДереваВход) = Тип("СтрокаДереваЗначений") Тогда	
		Попытка
			ДеревоВладельца = СтрокаДереваВход.Владелец();
			НайденнаяКолонка = ДеревоВладельца.Колонки.Найти(ИмяКолонкиВход);
			ЕстьКолонкаВСтроке = (НайденнаяКолонка <> Неопределено);
			Если ЕстьКолонкаВСтроке Тогда
				// Добавление значений родителей строки.
				Счетчик = 0;
				Пока (СтрокаДереваВход.Родитель <> Неопределено) И (Счетчик < 10000) Цикл
					СтрокаДереваВход = СтрокаДереваВход.Родитель;
					НовоеЗначение = СтрокаДереваВход[ИмяКолонкиВход];
					РезультатФункции.Добавить(НовоеЗначение);
					Счетчик = Счетчик + 1;
				КонецЦикла;	
			Иначе
				ТекстСообщения = НСтр("ru = 'Не найдена колонка %ИмяКолонки% в строке дерева'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяКолонки%", Строка(ИмяКолонкиВход));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				РезультатФункции = Новый Массив;		// Колонки нет. Вернём пустой массив.
			КонецЕсли;
		Исключение
			ТекстСообщения = НСтр("ru = 'При добавлении значений колонки %ИмяКолонки% из дерева возникли ошибки: %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяКолонки%", Строка(ИмяКолонкиВход));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецПопытки;
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестный вариант строки дерева %СтрокаДерева%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СтрокаДерева%", Строка(СтрокаДереваВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Новый Массив;	// Неизвестный вариант. Вернём пустой массив.	
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьМассивЗначенийРодителейСтрокиДерева()

// Добавляет рекурсивно в массив МассивОрганизаций консолидирующие и элиминирующие
// организации для организации ОрганизацияВход из дерева ДеревоВход. Параметр ГлубинаРекурсииВход
// защищает от бесконечной рекурсии.
Процедура ДополнитьМассивКонсолидирующихЭлиминирующихОрганизаций(ДеревоВход, ОрганизацияВход, МассивОрганизаций, ГлубинаРекурсииВход = 0)
	Если ГлубинаРекурсииВход > 10000 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ТекСтроки Из ДеревоВход.Строки Цикл
		ТекОрганизация = ТекСтроки.ОрганизационнаяЕдиница;
		// Проверка элиминирующих организаций.
		Если ТекОрганизация.ЭлиминирующаяОрганизация Тогда
			МассивОрганизаций.Добавить(ТекОрганизация);		// Это элиминирующая организация. Добавим безусловно.
		Иначе
			// Продолжаем поиск.
		КонецЕсли;
		// Проверка консолидирующих организаций.
		Если ТекОрганизация = ОрганизацияВход Тогда
			МассивДобавления = ПолучитьМассивЗначенийРодителейСтрокиДерева(ТекСтроки, "ОрганизационнаяЕдиница");
			Для Каждого ТекМассивДобавления Из МассивДобавления Цикл
				МассивОрганизаций.Добавить(ТекМассивДобавления);		// Добавим родителя текущей организации как консолидирующую, если он заполнен.
			КонецЦикла;
		Иначе
			// Продолжаем поиск.
		КонецЕсли;
		// Для пустой организации добавим все организации, имеющие потомков, как консолидирующие.
		Если (Не ЗначениеЗаполнено(ОрганизацияВход)) И (ТекСтроки.Строки.Количество() > 0) Тогда
			МассивОрганизаций.Добавить(ТекОрганизация);
		Иначе
			// Продолжаем поиск.
		КонецЕсли;
		ДополнитьМассивКонсолидирующихЭлиминирующихОрганизаций(ТекСтроки, ОрганизацияВход, МассивОрганизаций, ГлубинаРекурсииВход + 1);
	КонецЦикла;
КонецПроцедуры		// ДополнитьМассивКонсолидирующихЭлиминирующихОрганизаций()

// Возвращает массив консолидирующих и элиминирующих организаций для,
// организации ОрганизацияВход, которые стоят на этапах-последователях
// этапа ЭтапВход по сценарию СценарийВход, регламенту ВерсияРегламентаВход.
Функция ПолучитьМассивНеобходимыхПоследователейОрганизацийЭтапа(ЭтапВход, ОрганизацияВход, СценарийВход, ВерсияРегламентаВход)
	РезультатФункции = Новый Массив;
	РезультатФункции.Добавить(ОрганизацияВход);
	ДеревоГруппы = РегламентыВызовСервера.ПолучитьСтруктуруГруппыВерсии(ВерсияРегламентаВход, СценарийВход, ТекущаяДатаСеанса());
	ДополнитьМассивКонсолидирующихЭлиминирующихОрганизаций(ДеревоГруппы, ОрганизацияВход, РезультатФункции);
	РезультатФункции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатФункции);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьМассивНеобходимыхПоследователейОрганизацийЭтапа()

// Возвращает таблицу утверждения необходимых организаций предыдущих этапов 
// для этапа ЭтапВход по организации ОрганизацияВход, сценарию СценарийВход, 
// в периоде ПериодВход, согласно регламенту ВерсияРегламентаВход.
Функция ПолучитьТаблицуУтвержденияПредыдущихЭтапов(ЭтапВход, ОрганизацияВход, ВерсияРегламентаВход, ПериодВход, СценарийВход, ЭкземплярПроцессаВход = Неопределено) Экспорт
	// Инициализация.
	РезультатФункции = Новый ТаблицаЗначений;
	РезультатФункции.Колонки.Добавить("ОрганизационнаяЕдиница");
	РезультатФункции.Колонки.Добавить("ЭтапПроцесса");
	РезультатФункции.Колонки.Добавить("Состояние");
	// Получение массива организаций.
	МассивПредшественников = УправлениеПроцессамиСогласованияУХПовтИсп.ПолучитьЭтапыПредшественники(ЭтапВход);
	МассивОрганизаций = ПолучитьМассивНеобходимыхОрганизацийПредшественниковЭтапа(ЭтапВход, ОрганизацияВход, СценарийВход, ВерсияРегламентаВход, ПериодВход);
	// Непосредственное получение таблицы состояний.
	ЭтоЭлиминирующаяОрганизация = (ЭтапВход.ТипОрганизацийЭтапа = Перечисления.ТипыОрганизационныхЕдиниц.Элиминирующая);
	ЭтоЭтапПодготовкиОтчетности = (ЭтапВход.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности);
	ЕстьОтборПоОрганизациям = (ЭтоЭтапПодготовкиОтчетности);
	РезультатФункции = ПолучитьСостоянияЭтаповПоОрганизациям(МассивОрганизаций, ЕстьОтборПоОрганизациям, ВерсияРегламентаВход, МассивПредшественников, ПериодВход, СценарийВход, ЭкземплярПроцессаВход);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьТаблицуУтвержденияПредущихЭтапов()

// Возвращает таблицу, содержащую состояния этапов из массива этапов МассивЭтаповВход,
// в организациях МассивОрганизацийВход (если параметр ЕстьОтборПоОрганизациямВход - Ложь,
// отбор по организациям не накладывается) по регламенту ВерсияРегламентаВход, периоду 
// ПериодВход и сценарию СценарийВход.
Функция ПолучитьСостоянияЭтаповПоОрганизациям(МассивОрганизацийВход, ЕстьОтборПоОрганизациямВход, ВерсияРегламентаВход, МассивЭтаповВход, ПериодВход, СценарийВход, ЭкземплярПроцессаВход = Неопределено) Экспорт
	РезультатФункции = Новый ТаблицаЗначений; 
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса КАК ЭтапПроцесса,
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница
	|ПОМЕСТИТЬ ВТ_ОрганизацииЭтапов
	|ИЗ
	|	РегистрСведений.ОрганизационныеЕдиницыЭтаповПроцессов КАК ОрганизационныеЕдиницыЭтаповПроцессов
	|ГДЕ
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса В(&Этапы)
	|	И ОрганизационныеЕдиницыЭтаповПроцессов.ВерсияРегламентаПодготовкиОтчетности = &ВерсияРегламентаПодготовкиОтчетности
	|	И ВЫБОР
	|			КОГДА &ОтбиратьПоОрганизациям = ЛОЖЬ
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница В (&Организации)
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа КАК СостояниеЭтапа,
	|	СостоянияВыполненияПроцессовСрезПоследних.Сценарий КАК Сценарий,
	|	СостоянияВыполненияПроцессовСрезПоследних.ПериодСценария КАК ПериодСценария,
	|	СостоянияВыполненияПроцессовСрезПоследних.ЭтапПроцесса КАК ЭтапПроцесса,
	|	СостоянияВыполненияПроцессовСрезПоследних.Организация КАК Организация
	|ПОМЕСТИТЬ ВТ_СостоянияВыполнения
	|ИЗ
	|	РегистрСведений.СостоянияВыполненияПроцессов.СрезПоследних(
	|			,
	|			ПериодСценария = &Период
	|				И Сценарий = &Сценарий
	|				И НЕ ЭтапПроцесса.ПометкаУдаления
	|				И ВЫБОР
	|					КОГДА &ОтбиратьПоОрганизациям = ЛОЖЬ
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ Организация В (&Организации)
	|				КОНЕЦ) КАК СостоянияВыполненияПроцессовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВыполнениеПроцессовСрезПоследних.ДокументПроцесса КАК ДокументПроцесса,
	|	ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса КАК ЭтапПроцесса,
	|	ВыполнениеПроцессовСрезПоследних.СостояниеЭтапа КАК СостояниеЭтапа
	|ПОМЕСТИТЬ ВТ_ВыполненияПроцессов
	|ИЗ
	|	РегистрСведений.ВыполнениеПроцессов.СрезПоследних(
	|			,
	|			ДокументПроцесса = &ДокументПроцесса
	|				И НЕ ЭтапПроцесса.ПометкаУдаления) КАК ВыполнениеПроцессовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ОрганизацииЭтапов.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница,
	|	ВТ_ОрганизацииЭтапов.ЭтапПроцесса КАК ЭтапПроцесса,
	|	ЕСТЬNULL(ВТ_СостоянияВыполнения.СостояниеЭтапа, ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцессов.Запланирован)) КАК Состояние
	|ИЗ
	|	ВТ_ОрганизацииЭтапов КАК ВТ_ОрганизацииЭтапов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СостоянияВыполнения КАК ВТ_СостоянияВыполнения
	|		ПО ВТ_ОрганизацииЭтапов.ОрганизационнаяЕдиница = ВТ_СостоянияВыполнения.Организация
	|			И ВТ_ОрганизацииЭтапов.ЭтапПроцесса = ВТ_СостоянияВыполнения.ЭтапПроцесса
	|ГДЕ
	|	ВТ_ОрганизацииЭтапов.ЭтапПроцесса.ТипЭтапа = ЗНАЧЕНИЕ(Перечисление.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
	|	ЭтапыУниверсальныхПроцессов.Ссылка,
	|	ВЫБОР
	|		КОГДА ВТ_ВыполненияПроцессов.СостояниеЭтапа ЕСТЬ NULL
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцессов.Запланирован)
	|		КОГДА ВТ_ВыполненияПроцессов.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.НеАктивен)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцессов.Запланирован)
	|		КОГДА ВТ_ВыполненияПроцессов.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.ВОбработке)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцессов.Выполняется)
	|		КОГДА ВТ_ВыполненияПроцессов.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.Завершен)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцессов.Утвержден)
	|		КОГДА ВТ_ВыполненияПроцессов.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.ЗавершенСОшибкой)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцессов.Отменен)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцессов.Запланирован)
	|	КОНЕЦ
	|ИЗ
	|	Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапыУниверсальныхПроцессов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ШаблоныУниверсальныхПроцессов КАК ШаблоныУниверсальныхПроцессов
	|		ПО ЭтапыУниверсальныхПроцессов.Владелец = ШаблоныУниверсальныхПроцессов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВыполненияПроцессов КАК ВТ_ВыполненияПроцессов
	|		ПО (ВТ_ВыполненияПроцессов.ЭтапПроцесса = ЭтапыУниверсальныхПроцессов.Ссылка)
	|ГДЕ
	|	ШаблоныУниверсальныхПроцессов.СвязанныйРегламент = &ВерсияРегламентаПодготовкиОтчетности
	|	И НЕ ЭтапыУниверсальныхПроцессов.ПометкаУдаления
	|	И ЭтапыУниверсальныхПроцессов.ТипЭтапа <> ЗНАЧЕНИЕ(Перечисление.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности)
	|	И ЭтапыУниверсальныхПроцессов.Ссылка В(&Этапы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапПроцесса УБЫВ";
	Если ЭкземплярПроцессаВход = Неопределено Тогда
		ЭкземплярПроцессаРабочий = УправлениеПроцессамиСогласованияУХ.ПолучитьЭкземплярПроцессаСценария(ВерсияРегламентаВход, ПериодВход, СценарийВход);
	Иначе
		ЭкземплярПроцессаРабочий = ЭкземплярПроцессаВход;
	КонецЕсли;
	Запрос.УстановитьПараметр("Организации", МассивОрганизацийВход);			
	Запрос.УстановитьПараметр("ОтбиратьПоОрганизациям", ЕстьОтборПоОрганизациямВход);			
	Запрос.УстановитьПараметр("ВерсияРегламентаПодготовкиОтчетности", ВерсияРегламентаВход);
	Запрос.УстановитьПараметр("Этапы", МассивЭтаповВход);
	Запрос.УстановитьПараметр("Период", ПериодВход);
	Запрос.УстановитьПараметр("Сценарий", СценарийВход);
	Запрос.УстановитьПараметр("ДокументПроцесса", ЭкземплярПроцессаРабочий);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	РезультатФункции.Свернуть("ОрганизационнаяЕдиница, ЭтапПроцесса, Состояние");
	Возврат РезультатФункции;
КонецФункции		// ПолучитьСостоянияЭтаповПоОрганизациям()

// Возвращает таблицу, содержащую состояния утверждения этапов-последователей 
// этапа ЭтапВход по консолидирующим и  элиминирующим организациям для 
// организации ОрганизацияВход по регламенту ВерсияРегламентаВход, периоду
// ПериодВход и сценарию СценарийВход.
Функция ПолучитьТаблицуУтвержденияПоследующихЭтапов(ЭтапВход, ОрганизацияВход, ВерсияРегламентаВход, ПериодВход, СценарийВход, ЭкземплярПроцессаВход = Неопределено)
	РезультатФункции = Новый ТаблицаЗначений;
	МассивПоследователей = Новый Массив;
	МодульРегламентныхЗаданийУХ.ДополнитьМассивПоследователей(МассивПоследователей, ЭтапВход);
	Если ЭтапВход.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности Тогда
		МассивОрганизаций = ПолучитьМассивНеобходимыхПоследователейОрганизацийЭтапа(ЭтапВход, ОрганизацияВход, СценарийВход, ВерсияРегламентаВход);
		РезультатФункции = ПолучитьСостоянияЭтаповПоОрганизациям(МассивОрганизаций, Истина, ВерсияРегламентаВход, МассивПоследователей, ПериодВход, СценарийВход, ЭкземплярПроцессаВход);  
	Иначе
		МассивОрганизаций = Новый Массив;
		РезультатФункции = ПолучитьСостоянияЭтаповПоОрганизациям(МассивОрганизаций, Ложь, ВерсияРегламентаВход, МассивПоследователей, ПериодВход, СценарийВход, ЭкземплярПроцессаВход);  
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьТаблицуУтвержденияПредущихЭтапов()

// Возвращает успешность утверждения всех необходимых организаций на ранних этапах для
// исходного этапа ЭтапВход по проверяемой организации ОрганизацияВход в периоде
// ПериодВход, по сценарию СценарийВход и регламенту ВерсияРегламентаВход.
Функция ПроверитьУтверждениеПредшественников(ЭтапВход, ОрганизацияВход, ВерсияРегламентаВход, ПериодВход, СценарийВход, УтвердитьВход, ЭкземплярПроцессаВход = Неопределено)
	РезультатФункции = Истина;
	ТаблицаПредшественников = ПолучитьТаблицуУтвержденияПредыдущихЭтапов(ЭтапВход, ОрганизацияВход, ВерсияРегламентаВход, ПериодВход, СценарийВход, ЭкземплярПроцессаВход);
	СостояниеЭтапаУтвержден = Перечисления.СостоянияЭтаповПроцессов.Утвержден;
	Для Каждого ТекТаблицаПредшественников Из ТаблицаПредшественников Цикл
		Если ТекТаблицаПредшественников.Состояние <> СостояниеЭтапаУтвержден Тогда
			ТекстСообщения = "";
			Если УтвердитьВход Тогда
				ТекстСообщения = НСтр("ru = 'Обработка этапа %ИсходныйЭтап% по организации %Организация% не может быть завершена, так как существует незавершённый этап-предшественник %ЭтапПредшественник%'");
			Иначе	
				ТекстСообщения = НСтр("ru = 'Обработка этапа %ИсходныйЭтап% по организации %Организация% не может быть начата, так как существует незавершённый этап-предшественник %ЭтапПредшественник%'");
			КонецЕсли;
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(ОрганизацияВход));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭтапПредшественник%", Строка(ТекТаблицаПредшественников.ЭтапПроцесса));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИсходныйЭтап%", Строка(ЭтапВход));
			ОбщегоНазначенияКлиентСерверУХ.СообщитьПользователю(ТекстСообщения, , "ГруппаОсновная", ); 
			РезультатФункции = Ложь;
			Прервать;
		Иначе
			// Проверка пройдена. Продолжаем.
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		// ПроверитьУтверждениеПредшественников()

// Возвращает массив этапов-поледователей для, которые не находятся в состоянии 
// Запланирован для организации ОрганизацияВход.
Функция ВыделитьИзменяемыеЭтапыВТаблицеПоследователей(ТаблицаСостоянийВход, ТаблицаПоследователейВход, ОрганизацияВход = Неопределено) Экспорт
	РезультатФункции = Новый Массив;
	СостояниеЗапланирован = Перечисления.СостоянияЭтаповПроцессов.Запланирован;
	Для Каждого СтрП Из ТаблицаПоследователейВход Цикл
		Если (СтрП.СостояниеЭтапа <> СостояниеЗапланирован) Тогда
			// Проверим необходимость изменения состояния по этапу.
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Этап", СтрП.Этап);
			Если ЗначениеЗаполнено(ОрганизацияВход) Тогда
				СтруктураПоиска.Вставить("Организация", ОрганизацияВход);
			Иначе
				// Не добавляем отбор по организации, т.к. передана пустая.
			КонецЕсли;
			НайденныеСтроки = ТаблицаСостоянийВход.НайтиСтроки(СтруктураПоиска);
			Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
				Если ТекНайденныеСтроки.СостояниеЭтапа <> СостояниеЗапланирован Тогда
					РезультатФункции.Добавить(СтрП.Этап);
				Иначе
					// Продолжаем поиск далее.
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	РезультатФункции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатФункции);
	Возврат РезультатФункции;
КонецФункции		// ВыделитьИзменяемыеЭтапыВТаблицеПоследователей()

// Проверяет необходимость снятия обработки с этапов последователей и переводит их в
// состояние Не активен, если такая необходимость есть.
Процедура ИзменитьСостояниеЭтаповПоследователей(ТаблицаСостоянийВход, ТаблицаПоследователейВход, ОрганизацияВход, ДополнительныеПараметры)
	// Инициализация.
	СостояниеЗапланирован	 = Перечисления.СостоянияЭтаповПроцессов.Запланирован;
	СостояниеЧерновик		 = Перечисления.СостоянияОтчетов.Выполняется;
	ВерсияРегламента				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ВерсияРегламента", Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка());
	Период							 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Период", Справочники.Периоды.ПустаяСсылка());
	Сценарий						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Сценарий", Справочники.Сценарии.ПустаяСсылка());
	НастройкиОбработкиДокументов	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ОбрабатыватьДокументы", Ложь);
	ЭкземплярПроцесса				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ЭкземплярПроцесса", Документы.ЭкземплярПроцесса.ПустаяСсылка());
	// Сформируем массив изменяемых этапов.
	МассивИзменяемых = ВыделитьИзменяемыеЭтапыВТаблицеПоследователей(ТаблицаСостоянийВход, ТаблицаПоследователейВход, ОрганизацияВход);
	// Изменим состояние этапов по организации.
	МассивДокументовКОтмене = Новый Массив;
	Для Каждого ТекМассивИзменяемых Из МассивИзменяемых Цикл
		// Изменение состояние этапа.
		ИзменитьСостояниеЭтапаПроцесса(Период, Сценарий, ОрганизацияВход, ТекМассивИзменяемых, СостояниеЗапланирован);
		ОпределитьСостояниеЭтапаПроцесса(ЭкземплярПроцесса, ТекМассивИзменяемых, Период, Сценарий);	
		// Отменим согласование документов.
		Если НастройкиОбработкиДокументов.УстанавливатьСтатусОтчетов Тогда
			НастройкиОбработкиПоследователей = Новый Структура;
			НастройкиОбработкиПоследователей.Вставить("ЗаполнятьДокументы", Ложь);
			НастройкиОбработкиПоследователей.Вставить("УстанавливатьСтатусОтчетов", Истина);
			ОбработатьДокументыЭтапаПоОрганизации(ВерсияРегламента, Период, Сценарий, ТекМассивИзменяемых, ОрганизацияВход, Ложь, НастройкиОбработкиПоследователей, Ложь);
		Иначе
			// Не изменяем статус у отчётов на этапах последователях (наряду с основным этапом).
		КонецЕсли;
		// Оповещение пользователя.
		ТекстСообщения = НСтр("ru = 'Этап последователь %Этап% по организации %Организация% переведён в состояние %Состояние%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(ТекМассивИзменяемых));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(ОрганизацияВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Состояние%", Строка(СостояниеЗапланирован));
		ОбщегоНазначенияКлиентСерверУХ.СообщитьПользователю(ТекстСообщения, , "ГруппаОсновная", );
	КонецЦикла;
КонецПроцедуры		// ИзменитьСостояниеЭтаповПоследователей()

// Сбрасывает исполнение всех косолидирующих и элиминирующих организаций для организации
// ОрганизацияВход в этапах-последователях ЭтапВход по регламенту ВерсияРегламентаВход, в 
// периоде ПериодВход, сценарии СценарийВход и экземпляру процесса ЭкземплярПроцессаВход.
// А также сбрасывает выполнение у этапов не относящихся к Этапам подготовки отчетности.
Процедура СброситьВыполнениеЭлиминирующихКонсолидирующихОрганизацийИЭтаповНеПодготовкиОтчетности(ЭтапВход, ОрганизацияВход, ВерсияРегламентаВход, ПериодВход, 
	СценарийВход, ЭкземплярПроцессаВход, СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, АктивироватьПоследователиВход = Ложь)
	// Инициализация.
	ТаблицаОповещения = Новый ТаблицаЗначений;
	ТаблицаОповещения.Колонки.Добавить("Организация");
	ТаблицаОповещения.Колонки.Добавить("Этап");
	СостояниеЗапланирован = Перечисления.СостоянияЭтаповПроцессов.Запланирован;
	// Получение таблицы данных.
	ТаблицаУтверждения = ПолучитьТаблицуУтвержденияПоследующихЭтапов(ЭтапВход, ОрганизацияВход, ВерсияРегламентаВход, ПериодВход, СценарийВход, ЭкземплярПроцессаВход);
	// Установка состояний этапов.
	Для Каждого СтрП Из ТаблицаУтверждения Цикл
		ТекСостояние	 = СтрП.Состояние;
		ТекЭтап			 = СтрП.ЭтапПроцесса;
		ТекОрганизация	 = СтрП.ОрганизационнаяЕдиница;
		Если (ТекСостояние <> СостояниеЗапланирован) Тогда
			Если ТекЭтап.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности Тогда
				ИзменитьСостояниеЭтапаПроцесса(ПериодВход, СценарийВход, ТекОрганизация, ТекЭтап, СостояниеЗапланирован);
			ИначеЕсли ТекЭтап.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Оповещение Тогда    
				// Этап Оповещение.
				ОбработатьЭтапОповещенияВПодготовкеОтчетности(ТекЭтап, СостояниеЗапланирован, ВерсияРегламентаВход, ПериодВход, СценарийВход, ЭкземплярПроцессаВход, СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, АктивироватьПоследователиВход);
			ИначеЕсли ТекЭтап.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Обработка Тогда    
				// Этап Обработка. Для состояния Утверждён выполним обработку. Для состояния Выполняется создадим задачу ручного исполнения.
				ОбработатьЭтапОбработкаВПодготовкеОтчетности(ТекЭтап, СостояниеЗапланирован, ВерсияРегламентаВход, ПериодВход, СценарийВход, ЭкземплярПроцессаВход, СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, АктивироватьПоследователиВход);
			Иначе
				МодульУправленияПроцессамиУХ.УстановитьСостояниеТекущегоЭтапаНеАктивен(ТекЭтап, ЭкземплярПроцессаВход);
			КонецЕсли;
			НоваяСтрока = ТаблицаОповещения.Добавить();
			НоваяСтрока.Организация	 = ОрганизацияВход;
			НоваяСтрока.Этап		 = ТекЭтап;
			ОпределитьСостояниеЭтапаПроцесса(ЭкземплярПроцессаВход, ТекЭтап, ПериодВход, СценарийВход);	
		Иначе
			// Не требуется изменения состояния.
		КонецЕсли;
	КонецЦикла;
	// Информирование пользователя.
	ТаблицаОповещения.Свернуть("Организация, Этап");
	Для Каждого ТекТаблицаОповещения Из ТаблицаОповещения Цикл
		Если ЗначениеЗаполнено(ТекТаблицаОповещения.Организация) Тогда
			ТекстСообщения = НСтр("ru = 'Этап-последователь %Этап% по организации %Организация% переведён в состояние %Состояние%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(ТекТаблицаОповещения.Организация));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(ТекТаблицаОповещения.Этап));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Состояние%", Строка(СостояниеЗапланирован));
			ОбщегоНазначенияКлиентСерверУХ.СообщитьПользователю(ТекстСообщения, , "ГруппаОсновная", );
		Иначе
			ТекстСообщения = НСтр("ru = 'Этап-последователь %Этап% переведён в состояние %Состояние%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(ТекТаблицаОповещения.Этап));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Состояние%", Строка(СостояниеЗапланирован));
			ОбщегоНазначенияКлиентСерверУХ.СообщитьПользователю(ТекстСообщения, , "ГруппаОсновная", );
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры		// СброситьВыполнениеЭлиминирующихКонсолидирующихОрганизаций()

// Открывает этапы-последователи из Последователи, если им установлен
// соотвественное автоматическое действие.
Процедура ОткрытьЭтапыПоследователиАвтоматически(Последователи, ОрганизацияВход, СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, Период, Сценарий, ВерсияРегламента, ЭкземплярПроцесса)
	// Инициализация.
	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	ТаблицаАктивацииИтоговая = Новый ТаблицаЗначений;
	МассивТиповЭтапы = Новый Массив;
	МассивТиповЭтапы.Добавить(Тип("СправочникСсылка.ЭтапыУниверсальныхПроцессов"));
	ОписаниеТиповЭтапы = Новый ОписаниеТипов(МассивТиповЭтапы);
	ТаблицаАктивацииИтоговая.Колонки.Добавить("Этап", ОписаниеТиповЭтапы);
	МассивТиповОрганизации = Новый Массив;
	МассивТиповОрганизации.Добавить(Тип("СправочникСсылка.Организации"));
	ОписаниеТиповОрганизации = Новый ОписаниеТипов(МассивТиповОрганизации);
	ТаблицаАктивацииИтоговая.Колонки.Добавить("Организация", ОписаниеТиповОрганизации);
	ДействиеОткрыватьАвтоматически			 = Перечисления.АвтоматическиеДействияЭтапаПроцесса.ОткрыватьАвтоматически;
	ДействиеЗакрыватьОткрыватьАвтоматически	 = Перечисления.АвтоматическиеДействияЭтапаПроцесса.ЗакрыватьОткрыватьАвтоматически;
	// Заполним таблицу для активации последователей.
	Для Каждого ТекПоследователи Из Последователи Цикл
		ТекЭтап			 = ТекПоследователи.Этап;
		ТекСостояние	 = ТекПоследователи.СостояниеЭтапа;
		ТекАвтоДействие	 = ТекПоследователи.Этап.АвтоматическиеДействия;
		СостояниеНеАктивен	 = (ТекСостояние = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.НеАктивен) ИЛИ (ТекСостояние = Перечисления.СостоянияЭтаповПроцессов.Запланирован);
		СостояниеПустое		 = (ТекСостояние = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.ПустаяСсылка()) ИЛИ (ТекСостояние = Перечисления.СостоянияЭтаповПроцессов.ПустаяСсылка());
		ЭтоЭтапПодготовкиОтчетности = (ТекЭтап.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности);
		ТребуетсяАвтоматическоеОткрытие = (НЕ ЭтоЭтапПодготовкиОтчетности) ИЛИ (ТекАвтоДействие = ДействиеОткрыватьАвтоматически) ИЛИ (ТекАвтоДействие = ДействиеЗакрыватьОткрыватьАвтоматически);
		Если (СостояниеНеАктивен ИЛИ СостояниеПустое) И (ТребуетсяАвтоматическоеОткрытие) Тогда
			// Преобразование организаций.
			МассивОрганизацийАктивации = Новый Массив;
			Если ЗначениеЗаполнено(ОрганизацияВход) Тогда
				Если ЭтоЭтапПодготовкиОтчетности Тогда
					// Организация задана явно. Откроем этап по ней.
					МассивОрганизацийАктивации.Добавить(ОрганизацияВход);
				Иначе
					МассивОрганизацийАктивации.Добавить();
				КонецЕсли;
			Иначе
				// Организация не задана. Откроем этап по всем организациям, либо по пустой (если для данного этапа не требуется указания организации).
				Если ЭтоЭтапПодготовкиОтчетности Тогда
					ТаблицаОрганизацийЭтапа = ПолучитьТаблицуОрганизацийЭтапаПоРегламенту(ТекЭтап, ВерсияРегламента);
					Для Каждого ТекТаблицаОрганизацийЭтапа Из ТаблицаОрганизацийЭтапа Цикл
						МассивОрганизацийАктивации.Добавить(ТекТаблицаОрганизацийЭтапа.Организация);
					КонецЦикла;	
				Иначе
					МассивОрганизацийАктивации.Добавить();
				КонецЕсли;
			КонецЕсли;
			// Добавление строки в таблицу.
			Для Каждого ТекМассивОрганизацийАктивации Из МассивОрганизацийАктивации Цикл
				НоваяСтрока = ТаблицаАктивацииИтоговая.Добавить();
				НоваяСтрока.Этап = ТекЭтап;
				НоваяСтрока.Организация = ТекМассивОрганизацийАктивации;
			КонецЦикла;
		Иначе
			// Этап-последователь уже активирован.
		КонецЕсли;
	КонецЦикла;
	// Откроем этапы по тем организациям, которые ещё не открыты.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТзАктивация.Этап КАК Справочник.ЭтапыУниверсальныхПроцессов) КАК Этап,
		|	ВЫРАЗИТЬ(ТзАктивация.Организация КАК Справочник.Организации) КАК Организация
		|ПОМЕСТИТЬ ТЗ_Активация
		|ИЗ
		|	&ТЗ_Активация КАК ТзАктивация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВЫРАЗИТЬ(ТЗ_Активация.Этап КАК Справочник.ЭтапыУниверсальныхПроцессов) КАК Этап,
		|	ВЫРАЗИТЬ(ТЗ_Активация.Организация КАК Справочник.Организации) КАК Организация,
		|	МАКСИМУМ(ЕСТЬNULL(СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа, ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцессов.Запланирован))) КАК Состояние
		|ИЗ
		|	ТЗ_Активация КАК ТЗ_Активация
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияВыполненияПроцессов.СрезПоследних(
		|				,
		|				Сценарий = &Сценарий
		|					И ПериодСценария = &ПериодСценария) КАК СостоянияВыполненияПроцессовСрезПоследних
		|		ПО (СостоянияВыполненияПроцессовСрезПоследних.Организация = ТЗ_Активация.Организация)
		|			И (СостоянияВыполненияПроцессовСрезПоследних.ЭтапПроцесса = ТЗ_Активация.Этап)
		|ГДЕ
		|	ТЗ_Активация.Этап.ТипЭтапа = ЗНАЧЕНИЕ(Перечисление.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫРАЗИТЬ(ТЗ_Активация.Этап КАК Справочник.ЭтапыУниверсальныхПроцессов),
		|	ВЫРАЗИТЬ(ТЗ_Активация.Организация КАК Справочник.Организации)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(ТЗ_Активация.Этап КАК Справочник.ЭтапыУниверсальныхПроцессов),
		|	ВЫРАЗИТЬ(ТЗ_Активация.Организация КАК Справочник.Организации),
		|	МАКСИМУМ(ВЫБОР
		|			КОГДА НЕ ВыполнениеПроцессовСрезПоследних.СостояниеЭтапа ЕСТЬ NULL
		|				ТОГДА ВЫБОР
		|						КОГДА ВыполнениеПроцессовСрезПоследних.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.НеАктивен)
		|							ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцессов.Запланирован)
		|						КОГДА ВыполнениеПроцессовСрезПоследних.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.ВОбработке)
		|							ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцессов.Выполняется)
		|						КОГДА ВыполнениеПроцессовСрезПоследних.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.Завершен)
		|							ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцессов.Утвержден)
		|						КОГДА ВыполнениеПроцессовСрезПоследних.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.ЗавершенСОшибкой)
		|							ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцессов.Отменен)
		|						ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцессов.Запланирован)
		|					КОНЕЦ
		|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцессов.Запланирован)
		|		КОНЕЦ)
		|ИЗ
		|	ТЗ_Активация КАК ТЗ_Активация
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыполнениеПроцессов.СрезПоследних(, ДокументПроцесса = &ЭкземплярПроцесса) КАК ВыполнениеПроцессовСрезПоследних
		|		ПО (ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса = ТЗ_Активация.Этап)
		|ГДЕ
		|	ТЗ_Активация.Этап.ТипЭтапа <> ЗНАЧЕНИЕ(Перечисление.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫРАЗИТЬ(ТЗ_Активация.Этап КАК Справочник.ЭтапыУниверсальныхПроцессов),
		|	ВЫРАЗИТЬ(ТЗ_Активация.Организация КАК Справочник.Организации)";
	Запрос.УстановитьПараметр("ПериодСценария", Период);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("ТЗ_Активация", ТаблицаАктивацииИтоговая);
	Запрос.УстановитьПараметр("ЭкземплярПроцесса", ЭкземплярПроцесса);
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	// Откроем этапы, если он в статусе Запланирован.
	Для Каждого ТекВыгрузка Из Выгрузка Цикл
		Если ТекВыгрузка.Состояние = Перечисления.СостоянияЭтаповПроцессов.Запланирован Тогда
			ОткрытьЭтапПоследователь(ТекВыгрузка.Этап, ТекВыгрузка.Организация, Период, Сценарий, ВерсияРегламента, ЭкземплярПроцесса, СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок);
		Иначе
			// Этап уже открыт. Пропускаем.
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры		// ОткрытьЭтапыПоследователиАвтоматически()

// Проверяет таблицу ТаблицаВыполненияЭтаповВход на возможность закрытия этапа процесса
// подготовки отчётности по критерию Утверждены все экземпляры. Возвращает успешность проверки.
Функция ОбработатьКритерийВсеЭкземпляры(ТаблицаВыполненияЭтаповВход)
	РезультатФункции = Истина;
	СостояниеУтвержден = Перечисления.СостоянияОтчетов.Утвержден;
	Для Каждого ТекТаблицаВыполненияЭтаповВход Из ТаблицаВыполненияЭтаповВход Цикл
		Если ТекТаблицаВыполненияЭтаповВход.Состояние <> СостояниеУтвержден Тогда
			РезультатФункции = Ложь;
			Прервать;
		Иначе
			// Проверка пройдена.
		КонецЕсли;
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		 // ОбработатьКритерийВсеЭкземпляры()

// Проверяет таблицу ТаблицаВыполненияЭтаповВход на возможность закрытия этапа процесса
// подготовки отчётности по критерию Утверждены контрольные экземпляры. Возвращает 
// успешность проверки.
Функция ОбработатьКритерийКонтрольныеЭкземпляры(ТаблицаВыполненияЭтаповВход)
	РезультатФункции = Истина;
	СостояниеУтвержден = Перечисления.СостоянияОтчетов.Утвержден;
	Для Каждого ТекТаблицаВыполненияЭтаповВход Из ТаблицаВыполненияЭтаповВход Цикл
		Если ТекТаблицаВыполненияЭтаповВход.Контрольный Тогда
			Если ТекТаблицаВыполненияЭтаповВход.Состояние <> СостояниеУтвержден Тогда
				РезультатФункции = Ложь;
				Прервать;
			Иначе
				// Проверка пройдена.
			КонецЕсли;
		Иначе
			// Не контрольный экземпляр. Пропускаем.
		КонецЕсли;
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		 // ОбработатьКритерийКонтрольныеЭкземпляры()

// Проверяет таблицу ТаблицаВыполненияЭтаповВход на возможность закрытия этапа процесса
// подготовки отчётности по критерию Утверждены заполненные экземпляры. Возвращает 
// успешность проверки.
Функция ОбработатьКритерийЗаполненныеЭкземпляры(ТаблицаВыполненияЭтаповВход)
	РезультатФункции = Истина;
	СостояниеУтвержден = Перечисления.СостоянияОтчетов.Утвержден;
	Для Каждого ТекТаблицаВыполненияЭтаповВход Из ТаблицаВыполненияЭтаповВход Цикл
		ЭтоКонтрольныйЭкземпляр = ТекТаблицаВыполненияЭтаповВход.Контрольный;
		ЭкземплярЗаполнен = (ТекТаблицаВыполненияЭтаповВход.КоличествоВерсий > 0);
		ТребуетсяПроверка = (ЭтоКонтрольныйЭкземпляр ИЛИ ЭкземплярЗаполнен);
		Если ТребуетсяПроверка Тогда
			Если ТекТаблицаВыполненияЭтаповВход.Состояние <> СостояниеУтвержден Тогда
				РезультатФункции = Ложь;
				Прервать;
			Иначе
				// Проверка пройдена.
			КонецЕсли;
		Иначе
			// Не требуется проверка. Пропускаем.
		КонецЕсли;
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		 // ОбработатьКритерийВсеЭкземпляры()

// Проверяет, можно ли утвердить этап Этап, исходя из статуса его документов и настроек утверждения.
// В случае успеха устанавливает этапу новый статус.
Процедура ПроверитьИУтвердитьЭтапИзСтатусаДокументов(Организация, ТЗПоследователей, ТекущиеДанные, СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, ДополнительныеПараметры)
	// Инициализация.
	ВерсияРегламента				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ВерсияРегламента", Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка());
	Период							 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Период", Справочники.Периоды.ПустаяСсылка());
	Сценарий						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Сценарий", Справочники.Сценарии.ПустаяСсылка());
	Этап							 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Этап", Справочники.ЭтапыУниверсальныхПроцессов.ПустаяСсылка());
	Утвердить						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Утверждение", Ложь);
	Отладка							 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Отладка", Ложь);
	ОстанавливатьсяПриОшибке		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ОстанавливатьсяПриОшибке", Ложь);
	НастройкиОбработкиДокументов	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ОбрабатыватьДокументы", Ложь);
	ЭкземплярПроцесса				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ЭкземплярПроцесса", Документы.ЭкземплярПроцесса.ПустаяСсылка());
	АктивироватьПоследователиВход	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "АктивироватьПоследователи", Ложь);
	СостояниеИсх					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Состояние", Перечисления.СостоянияЭтаповПроцессов.ПустаяСсылка());
	ТекКритерийУтвержденияЭтапа = Этап.КритерийУтвержденияЭтапа;
	КритерийУтвержденыВсеЭкземпляры			 = Перечисления.КритерииУтвержденияЭтапаПроцесса.УтвержденыВсеЭкземплярыОтчетовЭтапа;
	КритерийУтвержденыКонтрольныеЭкземпляры	 = Перечисления.КритерииУтвержденияЭтапаПроцесса.УтвержденыКонтрольныеЭкземплярыОтчетов;
	КритерийУтвержденыЗаполненныеЭкземпляры	 = Перечисления.КритерииУтвержденияЭтапаПроцесса.УтвержденыЗаполненныеЭкземплярыОтчетов;
	СостояниеУтвержден = Перечисления.СостоянияЭтаповПроцессов.Утвержден;
	// Получение данных по этапам.
	ТаблицаИсполненияОтчетов = ТаблицаИсполненияОтчетов(Организация, Период, Сценарий, Этап);
	// Проверка критериев.
	Если ТекКритерийУтвержденияЭтапа = КритерийУтвержденыВсеЭкземпляры Тогда
		// Критерий - утверждены все экземпляры.
		Если ОбработатьКритерийВсеЭкземпляры(ТаблицаИсполненияОтчетов) Тогда
			ИзменитьСостояниеЭтапаПроцесса(Период, Сценарий, Организация, Этап, СостояниеУтвержден);	
		Иначе
			ТекстСообщения = НСтр("ru = 'Этап  %Этап% по организации %Организация% не может быть утвержден: существуют неутвержденные документы по этапу'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(Этап));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(Организация));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;	
	ИначеЕсли ТекКритерийУтвержденияЭтапа = КритерийУтвержденыКонтрольныеЭкземпляры Тогда
		// Критерий - утверждены контрольные экземпляры.
		Если ОбработатьКритерийКонтрольныеЭкземпляры(ТаблицаИсполненияОтчетов) Тогда
			ИзменитьСостояниеЭтапаПроцесса(Период, Сценарий, Организация, Этап, СостояниеУтвержден);	
		Иначе
			ТекстСообщения = НСтр("ru = 'Этап  %Этап% по организации %Организация% не может быть утвержден: существуют неутвержденные контрольные документы по этапу'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(Этап));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(Организация));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	ИначеЕсли ТекКритерийУтвержденияЭтапа = КритерийУтвержденыЗаполненныеЭкземпляры Тогда
		// Критерий - утверждены заполненные экземпляры.
		Если ОбработатьКритерийЗаполненныеЭкземпляры(ТаблицаИсполненияОтчетов) Тогда
			ИзменитьСостояниеЭтапаПроцесса(Период, Сценарий, Организация, Этап, СостояниеУтвержден);	
		Иначе
			ТекстСообщения = НСтр("ru = 'Этап  %Этап% по организации %Организация% не может быть утвержден: существуют неутвержденные контрольные документы по этапу'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(Этап));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(Организация));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекКритерийУтвержденияЭтапа) Тогда	
		// Когда критерий не указан, считаем, что требуется заполнить все экземпляры.
		Если ОбработатьКритерийВсеЭкземпляры(ТаблицаИсполненияОтчетов) Тогда
			ИзменитьСостояниеЭтапаПроцесса(Период, Сценарий, Организация, Этап, СостояниеУтвержден);	
		Иначе
			ТекстСообщения = НСтр("ru = 'Этап  %Этап% по организации %Организация% не может быть утвержден: существуют неутвержденные документы по этапу'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(Этап));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(Организация));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;	
	Иначе
		// Неизвестный вариант. Сообщим пользователю об ошибке.
		ТекстСообщения = НСтр("ru = 'В этапе %Этап% обнаружен неизвестный критерий завершения этапа %Критерий%. Завершение этапа отменено.'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(Этап));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Критерий%", Строка(ТекКритерийУтвержденияЭтапа));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;	
	// Изменим статус этапа процесса.
	ОпределитьСостояниеЭтапаПроцесса(ЭкземплярПроцесса, Этап, Период, Сценарий);
	// Откроем этапы-последователи, если у них установлено соответственное действие и утверждены все этапы перед ними.
	СледующиеЭтапы = ПолучитьПоследователейПоОрганизации(ТЗПоследователей, ТекущиеДанные[0], СостоянияВыполненияПроцесса, мПоследователиСтрок, Период, Сценарий, Ложь);
	Если АктивироватьПоследователиВход Тогда
		ОткрытьЭтапыПоследователиАвтоматически(СледующиеЭтапы, Организация, СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, Период, Сценарий, ВерсияРегламента, ЭкземплярПроцесса);
	Иначе
		// Не требуется активация последователей.
	КонецЕсли;
КонецПроцедуры		// ПроверитьИУтвердитьЭтапИзСтатусаДокументов()

// Выполняет обработку документов этапа Этап и устанавливает состояние этапа в состояние в зависимости от Утвердить.
Функция ОбработатьДокументыЭтапаИзменитьСтатусЭтапов(ОбрабатыватьДокументы, Организация, ТЗПоследователей, УспешноОбработаныДокументыЭтапа, 
	ТекущиеДанные, СостоянияВыполненияПроцесса, мПоследователиСтрок, мПредшественникиСтрок, ДополнительныеПараметры) Экспорт
	РезультатФункции = Истина;
	ВерсияРегламента				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ВерсияРегламента", Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка());
	Период							 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Период", Справочники.Периоды.ПустаяСсылка());
	Сценарий						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Сценарий", Справочники.Сценарии.ПустаяСсылка());
	Этап							 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Этап", Справочники.ЭтапыУниверсальныхПроцессов.ПустаяСсылка());
	Утвердить						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Утверждение", Ложь);
	Отладка							 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Отладка", Ложь);
	ОстанавливатьсяПриОшибке		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ОстанавливатьсяПриОшибке", Ложь);
	НастройкиОбработкиДокументов	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ОбрабатыватьДокументы", Ложь);
	ЭкземплярПроцесса				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ЭкземплярПроцесса", Документы.ЭкземплярПроцесса.ПустаяСсылка());
	АктивироватьПоследователиВход	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "АктивироватьПоследователи", Ложь);
	СостояниеИсх					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Состояние", Перечисления.СостоянияЭтаповПроцессов.ПустаяСсылка());
	СостояниеВыполняется = Перечисления.СостоянияЭтаповПроцессов.Выполняется;
	Если Утвердить Тогда
		// Выполним обработку документов до установки статуса Утверждён.
		Если НЕ ОбрабатыватьДокументы Тогда
			УспешноОбработаныДокументыЭтапаПоОрганизации = Истина;
		Иначе
			УспешноОбработаныДокументыЭтапаПоОрганизации = ОбработатьДокументыЭтапаПоОрганизации(ВерсияРегламента, Период, Сценарий, Этап, Организация, Утвердить, НастройкиОбработкиДокументов, ОстанавливатьсяПриОшибке);
		КонецЕсли;
		Если УспешноОбработаныДокументыЭтапа И (НЕ УспешноОбработаныДокументыЭтапаПоОрганизации) Тогда
			УспешноОбработаныДокументыЭтапа = Ложь;
			Если ОстанавливатьсяПриОшибке(ОбрабатыватьДокументы, ОстанавливатьсяПриОшибке) Тогда
				РезультатФункции = Ложь;
			КонецЕсли;
		КонецЕсли;
		// Проверим: можно ли утвердить этап, исходя из статусов его документов.
		ПроверитьИУтвердитьЭтапИзСтатусаДокументов(Организация, ТЗПоследователей, ТекущиеДанные, СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, ДополнительныеПараметры);
	Иначе	
		// Изменим состояние этапа.
		ИзменитьСостояниеЭтапаПроцесса(Период, Сценарий, Организация, Этап, СостояниеВыполняется);
		ОпределитьСостояниеЭтапаПроцесса(ЭкземплярПроцесса, Этап, Период, Сценарий);
		// Выполним обработку документов после снятия статуса Утверждён.
		Если НЕ ОбрабатыватьДокументы Тогда
			УспешноОбработаныДокументыЭтапаПоОрганизации = Истина;
		Иначе
			УспешноОбработаныДокументыЭтапаПоОрганизации = ОбработатьДокументыЭтапаПоОрганизации(ВерсияРегламента, Период, Сценарий, Этап, Организация, Утвердить, НастройкиОбработкиДокументов, ОстанавливатьсяПриОшибке);
		КонецЕсли;
		Если УспешноОбработаныДокументыЭтапа И (НЕ УспешноОбработаныДокументыЭтапаПоОрганизации) Тогда
			УспешноОбработаныДокументыЭтапа = Ложь;
			Если ОстанавливатьсяПриОшибке(ОбрабатыватьДокументы, ОстанавливатьсяПриОшибке) Тогда
				РезультатФункции = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ОбработатьДокументыЭтапаВФоне()

Функция ОбработатьДокументыЭтапа(СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, ДополнительныеПараметры) Экспорт
	// Считывание дополнительных параметров.
	ВерсияРегламента				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ВерсияРегламента", Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка());
	Период							 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Период", Справочники.Периоды.ПустаяСсылка());
	Сценарий						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Сценарий", Справочники.Сценарии.ПустаяСсылка());
	Этап							 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Этап", Справочники.ЭтапыУниверсальныхПроцессов.ПустаяСсылка());
	Организации						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ОрганизацииОтбор", Новый Массив);
	Утвердить						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Утверждение", Ложь);
	Отладка							 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Отладка", Ложь);
	ОстанавливатьсяПриОшибке		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ОстанавливатьсяПриОшибке", Ложь);
	НастройкиОбработкиДокументов	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ОбрабатыватьДокументы", Ложь);
	ЭкземплярПроцесса				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ЭкземплярПроцесса", Документы.ЭкземплярПроцесса.ПустаяСсылка());
	АктивироватьПоследователиВход	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "АктивироватьПоследователи", Ложь);
	СостояниеИсх					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Состояние", Перечисления.СостоянияЭтаповПроцессов.ПустаяСсылка());
	// Определяем необходимость обработки документов.
	ОбрабатыватьДокументы = Ложь;
	Если ТипЗнч(НастройкиОбработкиДокументов) = Тип("Структура")  Тогда
		ЗаполнятьДокументы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиОбработкиДокументов, "ЗаполнятьДокументы", Ложь);
		УстанавливатьСтатусОтчетов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НастройкиОбработкиДокументов, "УстанавливатьСтатусОтчетов", Ложь);
		ОбрабатыватьДокументы = (ЗаполнятьДокументы ИЛИ УстанавливатьСтатусОтчетов);
	ИначеЕсли ТипЗнч(НастройкиОбработкиДокументов) = Тип("Булево")  Тогда	
		ОбрабатыватьДокументы = НастройкиОбработкиДокументов;
	Иначе
		ОбрабатыватьДокументы = Ложь;
	КонецЕсли;
	
	Если Утвердить Тогда
		ЭтапУтвержден = ЭтапУтвержден(Период, Сценарий, Этап);		
		УспешноеУтверждениеПредыдущих = Истина;			
	КонецЕсли;
	Состояние = ПолучитьСостояниеЭтапа(Период, Сценарий, Этап);
	Если Состояние = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УспешноОбработаныДокументыЭтапа = Истина;
	// Получим массив выбранных организаций.
	МассивОрганизаций = Новый Массив;
	Для Каждого ТекОрганизации Из Организации Цикл
		Если ТекОрганизации.Значение Тогда
			МассивОрганизаций.Добавить(ТекОрганизации.Ключ);
		Иначе
			// Организация не выбрана. Пропускаем.
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаОрганизация Из Состояние Цикл
		ТекОрганизация = СтрокаОрганизация.Организация;
		Если НЕ Организации = Неопределено Тогда
			Если Организации.Получить(ТекОрганизация) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		//Если Этап переводится в состояние утвержден из обработки - то проверить утверждены ли этапы предшественники
		ВозможнаОбработкаЭтапа = Истина;
		Если СостояниеИсх <> Перечисления.СостоянияЭтаповПроцессов.Запланирован Тогда
			Если НЕ ПроверитьУтверждениеПредшественников(Этап, ТекОрганизация, ВерсияРегламента, Период, Сценарий, Утвердить, ЭкземплярПроцесса) Тогда
				ВозможнаОбработкаЭтапа = Ложь;
			Иначе
				// Проверка пройдена. Выполняем далее.
			КонецЕсли;
		Иначе
			ВозможнаОбработкаЭтапа = Истина;			// Отменяем обработку текущегно этапа - не требуется проверка открытия предшественников.
		КонецЕсли;
		
		Если НЕ ВозможнаОбработкаЭтапа Тогда
			УспешноОбработаныДокументыЭтапа = Ложь;
			Продолжить;	
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Этап", Этап);
		СтруктураПоиска.Вставить("Организация", ТекОрганизация);
		ТекущиеДанные = СостоянияВыполненияПроцесса.НайтиСтроки(СтруктураПоиска);
		ТЗПоследователей = Неопределено;
		// Если Этап переводится в состояние в обработке из утвержден - то снять утверждение с последователей.
		Если (НЕ Утвердить) Тогда
			Последователи = ПолучитьПоследователейПоОрганизации(ТЗПоследователей, ТекущиеДанные[0], СостоянияВыполненияПроцесса, мПоследователиСтрок, Период, Сценарий);
			Если ТипЗнч(СостоянияВыполненияПроцесса) = Тип("ТаблицаЗначений") Тогда
				ВыгрузкаСостояния = СостоянияВыполненияПроцесса.Скопировать();
			Иначе
				ВыгрузкаСостояния = СостоянияВыполненияПроцесса.Выгрузить();
			КонецЕсли;
			ИзменитьСостояниеЭтаповПоследователей(ВыгрузкаСостояния, Последователи, ТекОрганизация, ДополнительныеПараметры);
			СброситьВыполнениеЭлиминирующихКонсолидирующихОрганизацийИЭтаповНеПодготовкиОтчетности(Этап, ТекОрганизация, ВерсияРегламента, Период, Сценарий, ЭкземплярПроцесса,
				СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, АктивироватьПоследователиВход);
		Иначе
			// При утверждении этапов не требуется изменять состояния последователей.
		КонецЕсли;
		// Непосредственная обработка документов этапа.
		РезультатОбработки = ОбработатьДокументыЭтапаИзменитьСтатусЭтапов(ОбрабатыватьДокументы, ТекОрганизация, ТЗПоследователей, 
			УспешноОбработаныДокументыЭтапа, ТекущиеДанные, СостоянияВыполненияПроцесса, мПоследователиСтрок, мПредшественникиСтрок, 
			ДополнительныеПараметры);
		Если Не РезультатОбработки Тогда
			Прервать;		
		Иначе
			// Выполняем обработку далее.
		КонецЕсли;	
	КонецЦикла;
	
	Возврат УспешноОбработаныДокументыЭтапа;
	
КонецФункции

// Возвращает таблицу исполнителей и аналитик для оповещения ТребуетсяЗаполнитьОтчетыПоЭтапу.
Функция ПолучитьТаблицуОповещенияТребуетсяЗаполнитьОтчетыПоЭтапу(ВерсияРегламентаВход, ОрганизацииВход, ПериодВход, СценарийВход, ЭтапВход)
	РезультатФункции = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница КАК Организация,
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса КАК ЭтапПроцесса,
	|	СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа КАК СостояниеЭтапа,
	|	СостоянияВыполненияПроцессовСрезПоследних.ДатаНачала КАК ДатаНачала,
	|	СостоянияВыполненияПроцессовСрезПоследних.ДатаОкончания КАК ДатаОкончания,
	|	СостоянияВыполненияПроцессовСрезПоследних.ОтветственныйЗаЭтап КАК ОтветственныйЗаЭтап
	|ПОМЕСТИТЬ ТаблицаОрганизаций
	|ИЗ
	|	РегистрСведений.ОрганизационныеЕдиницыЭтаповПроцессов КАК ОрганизационныеЕдиницыЭтаповПроцессов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияВыполненияПроцессов.СрезПоследних(
	|				,
	|				ПериодСценария = &ПериодСценария
	|					И Сценарий = &Сценарий) КАК СостоянияВыполненияПроцессовСрезПоследних
	|		ПО ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница = СостоянияВыполненияПроцессовСрезПоследних.Организация
	|			И ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса = СостоянияВыполненияПроцессовСрезПоследних.ЭтапПроцесса
	|ГДЕ
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ВерсияРегламентаПодготовкиОтчетности = &ВерсияОрганизационнойСтруктуры
	|	И ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница В ИЕРАРХИИ(&Организация)
	|	И НЕ ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭтапыПроцессовФормируемыеОтчеты.Ссылка КАК ЭтапПроцесса,
	|	ЭтапыПроцессовФормируемыеОтчеты.ШаблонДокумента КАК ВидОтчета,
	|	ЭтапыПроцессовФормируемыеОтчеты.ВидДокумента КАК ВидДокумента,
	|	ЭтапыПроцессовФормируемыеОтчеты.ДокументБД КАК ДокументБД
	|ПОМЕСТИТЬ ТаблицаВидовОтчетов
	|ИЗ
	|	Справочник.ШаблоныУниверсальныхПроцессов КАК ВерсииОрганизационнойСтруктуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыПроцессовФормируемыеОтчеты
	|		ПО ВерсииОрганизационнойСтруктуры.Ссылка = ЭтапыПроцессовФормируемыеОтчеты.Ссылка.Владелец
	|ГДЕ
	|	ВерсииОрганизационнойСтруктуры.СвязанныйРегламент = &ВерсияОрганизационнойСтруктуры
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументБД,
	|	ВидОтчета,
	|	ВидДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастраиваемыйОтчет.ВидОтчета КАК ПолеШаблона,
	|	НастраиваемыйОтчет.Организация КАК Организация,
	|	НастраиваемыйОтчет.Ссылка КАК Ссылка,
	|	NULL КАК Аналитика1,
	|	NULL КАК Аналитика2,
	|	NULL КАК Аналитика3,
	|	РегистрСостоянийОбъектов.СостояниеОбъекта КАК Состояние,
	|	НастраиваемыйОтчет.Сценарий КАК Сценарий
	|ПОМЕСТИТЬ НастраиваемыйОтчетВрем
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(
	|				,
	|				Объект.Сценарий = &Сценарий
	|					И Объект.ПериодОтчета = &ПериодСценария
	|					И Объект ССЫЛКА Документ.НастраиваемыйОтчет) КАК РегистрСостоянийОбъектов
	|		ПО НастраиваемыйОтчет.Ссылка = РегистрСостоянийОбъектов.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВидовОтчетов КАК ТаблицаВидовОтчетов
	|		ПО НастраиваемыйОтчет.ВидОтчета = ТаблицаВидовОтчетов.ВидОтчета
	|ГДЕ
	|	НастраиваемыйОтчет.Сценарий = &Сценарий
	|	И НастраиваемыйОтчет.ПериодОтчета = &ПериодСценария
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПолеШаблона,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТрансформационнаяКорректировка.ШаблонКорректировки КАК ПолеШаблона,
	|	ТрансформационнаяКорректировка.Организация КАК Организация,
	|	ТрансформационнаяКорректировка.Ссылка КАК Ссылка,
	|	NULL КАК Аналитика1,
	|	NULL КАК Аналитика2,
	|	NULL КАК Аналитика3,
	|	ВЫБОР
	|		КОГДА ТрансформационнаяКорректировка.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Выполняется)
	|	КОНЕЦ КАК Состояние,
	|	ТрансформационнаяКорректировка.Сценарий КАК Сценарий
	|ПОМЕСТИТЬ КорректировкаВрем
	|ИЗ
	|	Документ.ТрансформационнаяКорректировка КАК ТрансформационнаяКорректировка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВидовОтчетов КАК ТаблицаВидовОтчетов
	|		ПО ТрансформационнаяКорректировка.ШаблонКорректировки = ТаблицаВидовОтчетов.ВидОтчета
	|ГДЕ
	|	ТрансформационнаяКорректировка.Сценарий = &Сценарий
	|	И ТрансформационнаяКорректировка.ПериодОтчета = &ПериодСценария
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПолеШаблона,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Трансляция.ШаблонКорректировки КАК ПолеШаблона,
	|	Трансляция.Организация КАК Организация,
	|	Трансляция.Ссылка КАК Ссылка,
	|	NULL КАК Аналитика1,
	|	NULL КАК Аналитика2,
	|	NULL КАК Аналитика3,
	|	ВЫБОР
	|		КОГДА Трансляция.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Выполняется)
	|	КОНЕЦ КАК Состояние,
	|	Трансляция.Сценарий КАК Сценарий
	|ПОМЕСТИТЬ ТрансляцияВрем
	|ИЗ
	|	ТаблицаВидовОтчетов КАК ТаблицаВидовОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Трансляция КАК Трансляция
	|		ПО (Трансляция.ШаблонКорректировки = ТаблицаВидовОтчетов.ВидОтчета)
	|ГДЕ
	|	Трансляция.Сценарий = &Сценарий
	|	И Трансляция.ПериодОтчета = &ПериодСценария
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПолеШаблона,
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаВидовОтчетов.ЭтапПроцесса КАК ЭтапПроцесса,
	|	ТаблицаВидовОтчетов.ВидОтчета КАК ВидОтчета,
	|	ТаблицаВидовОтчетов.ДокументБД КАК ДокументБД,
	|	ТаблицаОрганизаций.Организация КАК Организация,
	|	ТаблицаОрганизаций.СостояниеЭтапа КАК СостояниеЭтапа,
	|	НастраиваемыйОтчетВрем.Ссылка КАК Ссылка,
	|	НастраиваемыйОтчетВрем.Состояние КАК Состояние,
	|	ТаблицаВидовОтчетов.ЭтапПроцесса.ПорядковыйНомер КАК ПорядковыйНомерЭтапаПроцесса,
	|	ТаблицаОрганизаций.ДатаНачала КАК ДатаНачала,
	|	ТаблицаОрганизаций.ДатаОкончания КАК ДатаОкончания,
	|	НастраиваемыйОтчетВрем.Ссылка.ПоследнийРедактировавший КАК ПоследнийРедактировавший,
	|	НастраиваемыйОтчетВрем.Ссылка.ДатаИзменения КАК ДатаИзменения
	|ПОМЕСТИТЬ ВТ_Объединение
	|ИЗ
	|	ТаблицаВидовОтчетов КАК ТаблицаВидовОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОрганизаций КАК ТаблицаОрганизаций
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Периметр
	|			ПО (Периметр.Ссылка = ТаблицаОрганизаций.Организация.Родитель)
	|		ПО (ТаблицаОрганизаций.ЭтапПроцесса = ТаблицаВидовОтчетов.ЭтапПроцесса)
	|		ЛЕВОЕ СОЕДИНЕНИЕ НастраиваемыйОтчетВрем КАК НастраиваемыйОтчетВрем
	|		ПО (НастраиваемыйОтчетВрем.ПолеШаблона = ТаблицаВидовОтчетов.ВидОтчета)
	|			И (НастраиваемыйОтчетВрем.Организация = ТаблицаОрганизаций.Организация)
	|ГДЕ
	|	ТаблицаВидовОтчетов.ДокументБД = &ПарНастраиваемыйОтчет
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаВидовОтчетов.ЭтапПроцесса,
	|	ТаблицаВидовОтчетов.ВидОтчета,
	|	ТаблицаВидовОтчетов.ДокументБД,
	|	ТаблицаОрганизаций.Организация,
	|	ТаблицаОрганизаций.СостояниеЭтапа,
	|	ЕСТЬNULL(КорректировкаВрем.Ссылка, ЗНАЧЕНИЕ(Документ.ТрансформационнаяКорректировка.ПустаяСсылка)),
	|	ЕСТЬNULL(КорректировкаВрем.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Запланирован)),
	|	ТаблицаВидовОтчетов.ЭтапПроцесса.ПорядковыйНомер,
	|	ТаблицаОрганизаций.ДатаНачала,
	|	ТаблицаОрганизаций.ДатаОкончания,
	|	ЕСТЬNULL(КорректировкаВрем.Ссылка.ПоследнийРедактировавший, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)),
	|	ЕСТЬNULL(КорректировкаВрем.Ссылка.ДатаИзменения, &ПустаяДата)
	|ИЗ
	|	ТаблицаВидовОтчетов КАК ТаблицаВидовОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОрганизаций КАК ТаблицаОрганизаций
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Периметр
	|			ПО (Периметр.Ссылка = ТаблицаОрганизаций.Организация.Родитель)
	|		ПО (ТаблицаОрганизаций.ЭтапПроцесса = ТаблицаВидовОтчетов.ЭтапПроцесса)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КорректировкаВрем КАК КорректировкаВрем
	|		ПО ТаблицаВидовОтчетов.ВидОтчета = КорректировкаВрем.ПолеШаблона
	|			И (ТаблицаОрганизаций.Организация = КорректировкаВрем.Организация)
	|ГДЕ
	|	ТаблицаВидовОтчетов.ДокументБД = &ПарТрансформационнаяКорректировка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаВидовОтчетов.ЭтапПроцесса,
	|	ТаблицаВидовОтчетов.ВидОтчета,
	|	ТаблицаВидовОтчетов.ДокументБД,
	|	ТаблицаОрганизаций.Организация,
	|	ТаблицаОрганизаций.СостояниеЭтапа,
	|	ЕСТЬNULL(ТрансляцияВрем.Ссылка, ЗНАЧЕНИЕ(Документ.Трансляция.ПустаяСсылка)),
	|	ЕСТЬNULL(ТрансляцияВрем.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Запланирован)),
	|	ТаблицаВидовОтчетов.ЭтапПроцесса.ПорядковыйНомер,
	|	ТаблицаОрганизаций.ДатаНачала,
	|	ТаблицаОрганизаций.ДатаОкончания,
	|	ЕСТЬNULL(ТрансляцияВрем.Ссылка.ПоследнийРедактировавший, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)),
	|	ЕСТЬNULL(ТрансляцияВрем.Ссылка.ДатаИзменения, &ПустаяДата)
	|ИЗ
	|	ТаблицаВидовОтчетов КАК ТаблицаВидовОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОрганизаций КАК ТаблицаОрганизаций
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Периметр
	|			ПО (Периметр.Ссылка = ТаблицаОрганизаций.Организация.Родитель)
	|		ПО (ТаблицаОрганизаций.ЭтапПроцесса = ТаблицаВидовОтчетов.ЭтапПроцесса)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТрансляцияВрем КАК ТрансляцияВрем
	|		ПО ТаблицаВидовОтчетов.ВидОтчета = ТрансляцияВрем.ПолеШаблона
	|			И (ТаблицаОрганизаций.Организация = ТрансляцияВрем.Организация)
	|ГДЕ
	|	ТаблицаВидовОтчетов.ДокументБД = &ПарТрансляция
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_Объединение.ВидОтчета КАК ВидОтчета,
	|	ВТ_Объединение.Организация КАК Организация,
	|	ВТ_Объединение.Состояние КАК Состояние,
	|	ЕСТЬNULL(РегистрМатрицыПолномочий.Исполняющий, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)) КАК Исполняющий,
	|	ВТ_Объединение.Ссылка КАК Ссылка
	|ИЗ
	|	ВТ_Объединение КАК ВТ_Объединение
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрМатрицыПолномочий КАК РегистрМатрицыПолномочий
	|		ПО ВТ_Объединение.ВидОтчета = РегистрМатрицыПолномочий.ШаблонДокументаБД
	|			И ВТ_Объединение.Организация = РегистрМатрицыПолномочий.Организация
	|			И (РегистрМатрицыПолномочий.ДокументБД = &ПарНастраиваемыйОтчет)
	|			И (РегистрМатрицыПолномочий.ВерсияРегламентаПодготовкиОтчетности = &ВерсияОрганизационнойСтруктуры)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ЭтапПроцесса = НЕОПРЕДЕЛЕНО
	|					ИЛИ &ЭтапПроцесса = ЗНАЧЕНИЕ(Справочник.ЭтапыУниверсальныхПроцессов.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ВТ_Объединение.ЭтапПроцесса = &ЭтапПроцесса
	|		КОНЕЦ
	|	И ВТ_Объединение.Состояние <> &СостояниеУтвержден
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Объединение.ВидОтчета,
	|	ВТ_Объединение.Организация,
	|	ВТ_Объединение.Состояние,
	|	ЕСТЬNULL(РегистрМатрицыПолномочий.Исполняющий, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)),
	|	ВТ_Объединение.Ссылка";
	ДокументБдНастраиваемыйОтчет				 = Справочники.ДокументыБД.НайтиПоНаименованию("НастраиваемыйОтчет");
	ДокументБдТрансляция						 = Справочники.ДокументыБД.НайтиПоНаименованию("Трансляция");
	ДокументБдТрансформационнаяКорректировка	 = Справочники.ДокументыБД.НайтиПоНаименованию("ТрансформационнаяКорректировка");
	Запрос.УстановитьПараметр("ВерсияОрганизационнойСтруктуры",		 ВерсияРегламентаВход);
	Запрос.УстановитьПараметр("Организация",						 ОрганизацииВход);
	Запрос.УстановитьПараметр("ПарНастраиваемыйОтчет",				 ДокументБдНастраиваемыйОтчет);
	Запрос.УстановитьПараметр("ПарТрансляция",						 ДокументБдТрансляция);
	Запрос.УстановитьПараметр("ПарТрансформационнаяКорректировка",	 ДокументБдТрансформационнаяКорректировка);
	Запрос.УстановитьПараметр("ПериодСценария",						 ПериодВход);
	Запрос.УстановитьПараметр("ПустаяДата",							 Дата(1, 1, 1));
	Запрос.УстановитьПараметр("СостояниеУтвержден",					 Перечисления.СостоянияОтчетов.Утвержден);
	Запрос.УстановитьПараметр("Сценарий",							 СценарийВход);
	Запрос.УстановитьПараметр("ЭтапПроцесса",						 ЭтапВход);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;	
КонецФункции

// Выполняет отправку оповещений исполнителям отчетов о необходимости заполнить
// экземпляр по регламенту ВерсияРегламентаВход, периоду ПериодВход, сценарию
// СценарийВход на этапе подготовки отчетности ЭтапВход, где организации заданы
// в массиве ОрганизацииВход.
Процедура ОповеститьОНеобходимостиЗаполнитьОтчеты(ВерсияРегламентаВход, ОрганизацииВход, ПериодВход, СценарийВход, ЭтапВход)
	Выгрузка = ПолучитьТаблицуОповещенияТребуетсяЗаполнитьОтчетыПоЭтапу(ВерсияРегламентаВход, ОрганизацииВход, ПериодВход, СценарийВход, ЭтапВход);
	ВидСобытияТребуетсяЗаполнитьОтчеты = Справочники.ВидыСобытийОповещений.ТребуетсяЗаполнитьОтчетыПоЭтапу;
	Для Каждого ТекВыгрузка Из Выгрузка Цикл
		МассивОповещеаемых = Новый Массив;
		ДопПараметры = Новый Структура;
		ТекИсполняющий = ТекВыгрузка.Исполняющий;
		Если ЗначениеЗаполнено(ТекИсполняющий) Тогда
			Если ТипЗнч(ТекИсполняющий) = Тип("СправочникСсылка.Пользователи") Тогда
				МассивОповещеаемых.Добавить(ТекИсполняющий);
			ИначеЕсли ТипЗнч(ТекИсполняющий) = Тип("СправочникСсылка.РолиКонтактныхЛиц") Тогда
				ТаблицаОтветственных = МодульУправленияПроцессамиУХ.ПолучитьПользователейПоРоли(ТекИсполняющий, ТекВыгрузка.Организация);
				МассивОтветственных = ТаблицаОтветственных.ВыгрузитьКолонку("Пользователь");
				ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивОповещеаемых, МассивОтветственных);
			Иначе
				ТекстСообщения = НСтр("ru = 'Неизвестный тип исполнителя отчета %ВидОтчета% по сценарию %Сценарий%: %Исполняющий%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидОтчета%", Строка(ТекВыгрузка.ВидОтчета));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сценарий%", Строка(СценарийВход));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Исполняющий%", Строка(ТекИсполняющий));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
			ОбщегоНазначенияКлиентСерверУХ.УдалитьПустыеЭлементыМассива(МассивОповещеаемых);
			ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивОповещеаемых);
			ДопПараметры.Вставить("ВидОтчета",			 ТекВыгрузка.ВидОтчета);
			ДопПараметры.Вставить("Организация",		 ТекВыгрузка.Организация);
			ДопПараметры.Вставить("Сценарий",			 СценарийВход);
			ДопПараметры.Вставить("ОтчетКЗаполнению",	 ТекВыгрузка.Ссылка);
			МодульУправленияОповещениямиУХ.ОповеститьПользователей(ВидСобытияТребуетсяЗаполнитьОтчеты, , ЭтапВход, МассивОповещеаемых, ДопПараметры);
		Иначе
			// Исполняющий не заполнен. Ничего не делаем.
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

// Преобразует ОрганизацииВход в соответствие отбора организаций
Функция ПреобразоватьОрганизацииОтбор(ОрганизацииВход)
	РезультатФункции = Новый Соответствие;
	Если ОрганизацииВход = Неопределено Тогда
		РезультатФункции = Неопределено;
	Иначе
		РезультатФункции = Новый Соответствие;
		Если ТипЗнч(ОрганизацииВход) = Тип("СправочникСсылка.Организации") Тогда
			РезультатФункции.Вставить(ОрганизацииВход, Истина);
		ИначеЕсли ТипЗнч(ОрганизацииВход) = Тип("Массив") Тогда
			Для Каждого Организация Из ОрганизацииВход Цикл
				РезультатФункции.Вставить(Организация, Истина);
			КонецЦикла; 
		ИначеЕсли ТипЗнч(ОрганизацииВход) = Тип("Соответствие") Тогда
			РезультатФункции = ОрганизацииВход;
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Переводит этап оповещния ЭтапВход в состояние Состояние по регламенту ВерсияРегламента
// в периоде Период по сценарию Сценарий для процесса ЭкземплярПроцесса. Возвращает
// успешность выполнения операции.
Функция ОбработатьЭтапОповещенияВПодготовкеОтчетности(ЭтапВход, Состояние, ВерсияРегламента, Период, Сценарий, ЭкземплярПроцесса, СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, АктивироватьПоследователиВход = Истина)
	// Инициализация.
	РезультатФункции = Ложь;
	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	Если Состояние = Перечисления.СостоянияЭтаповПроцессов.Утвержден Тогда
		// Уверждение этапа. Отправим оповещение.
		РезультатПроверки = ПроверитьУтверждениеПредшественников(ЭтапВход, ПустаяОрганизация, ВерсияРегламента, Период, Сценарий, Истина, ЭкземплярПроцесса);
		Если РезультатПроверки Тогда
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ЭкземплярПроцесса", ЭкземплярПроцесса);
			СтруктураПараметров.Вставить("ТекущийЭтап", ЭтапВход);
			МодульОбработкиЭтаповПроцессовСерверУХ.ОбработатьЭтапОповещения(СтруктураПараметров);
			МодульУправленияПроцессамиУХ.УстановитьСостояниеТекущегоЭтапаЗавершен(ЭтапВход, ЭкземплярПроцесса);
			// Откроем этапы-последователи, если у них установлено соответственное действие и утверждены все этапы перед ними.
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Этап", ЭтапВход);
			ТекущиеДанные = СостоянияВыполненияПроцесса.НайтиСтроки(СтруктураПоиска);
			Если АктивироватьПоследователиВход Тогда
				ТЗПоследователей = Неопределено;
				Последователи = ПолучитьПоследователейПоОрганизации(ТЗПоследователей, ТекущиеДанные[0], СостоянияВыполненияПроцесса, мПоследователиСтрок, Период, Сценарий, Ложь);			
				ОткрытьЭтапыПоследователиАвтоматически(Последователи, ПустаяОрганизация, СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, Период, Сценарий, ВерсияРегламента, ЭкземплярПроцесса);
			Иначе
				// Не требуется активация.
			КонецЕсли;
			РезультатФункции = Истина;
		Иначе
			РезультатФункции = Ложь;		 // Проверка не пройдена. Не изменяем статус этапа.
		КонецЕсли;
	ИначеЕсли Состояние = Перечисления.СостоянияЭтаповПроцессов.Выполняется Тогда
		// Перевод в состояние ВОбработке.
		РезультатПроверки = ПроверитьУтверждениеПредшественников(ЭтапВход, ПустаяОрганизация, ВерсияРегламента, Период, Сценарий, Истина, ЭкземплярПроцесса);
		Если РезультатПроверки Тогда
			МодульУправленияПроцессамиУХ.УстановитьСостояниеТекущегоЭтапаВОбработке(ЭтапВход, ЭкземплярПроцесса);
			РезультатФункции = Истина;
		Иначе
			РезультатФункции = Ложь;		 // Проверка не пройдена. Не изменяем статус этапа.
		КонецЕсли;
	ИначеЕсли Состояние = Перечисления.СостоянияЭтаповПроцессов.Запланирован Тогда
		// Перевод в состояние Запланирован.
		МодульУправленияПроцессамиУХ.УстановитьСостояниеТекущегоЭтапаНеАктивен(ЭтапВход, ЭкземплярПроцесса);
		РезультатФункции = Истина;
	Иначе
		// Неизвестное состояние. Переведём в состояние Запланирован.
		МодульУправленияПроцессамиУХ.УстановитьСостояниеТекущегоЭтапаНеАктивен(ЭтапВход, ЭкземплярПроцесса);
		РезультатФункции = Истина;
	КонецЕсли;
	// Сбросим выполнение последователей при необходимости.
	Если Состояние <> Перечисления.СостоянияЭтаповПроцессов.Утвержден Тогда
		ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		СброситьВыполнениеЭлиминирующихКонсолидирующихОрганизацийИЭтаповНеПодготовкиОтчетности(ЭтапВход, ПустаяОрганизация, ВерсияРегламента, Период, Сценарий, ЭкземплярПроцесса,
			СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, АктивироватьПоследователиВход);
	Иначе
		// Это утверждение. Не требуется сбрасывать последователей.
	КонецЕсли;
	Возврат РезультатФункции;	
КонецФункции		// ОбработатьЭтапОповещенияВПодготовкеОтчетности()

// Переводит этап обработки Этап в состояние СостояниеВход по регламенту ВерсияРегламента
// в периоде Период, сценарию Сценарий для процесса ЭкземплярПроцесса. Возвращает успешность
// выполнения операции.
Функция ОбработатьЭтапОбработкаВПодготовкеОтчетности(ЭтапВход, СостояниеВход, ВерсияРегламента, Период, Сценарий, ЭкземплярПроцесса, СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, АктивироватьПоследователейВход = Ложь) Экспорт
	РезультатФункции = Ложь;
	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	Если СостояниеВход = Перечисления.СостоянияЭтаповПроцессов.Утвержден Тогда
		РезультатПроверки = ПроверитьУтверждениеПредшественников(ЭтапВход, ПустаяОрганизация, ВерсияРегламента, Период, Сценарий, Истина, ЭкземплярПроцесса);
		Если РезультатПроверки Тогда
			УспешноВыполненыПредварительныеДействия = Ложь;
			Если НЕ ЭтапВход.РучноеУтверждениеЭтапа Тогда
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ЭкземплярПроцесса", ЭкземплярПроцесса);
				СтруктураПараметров.Вставить("ТекущийЭтап", ЭтапВход);
				УспешноВыполненыПредварительныеДействия = МодульОбработкиЭтаповПроцессовСерверУХ.ОбработатьПроизвольныйКодЭтапа(СтруктураПараметров, ЭтапВход.ПроцедураПроцесса);
			Иначе	
				УспешноВыполненыПредварительныеДействия = Истина;		// Для ручного исполнения этапа не выполняем код.
			КонецЕсли;
			Если УспешноВыполненыПредварительныеДействия Тогда
				МодульУправленияПроцессамиУХ.УстановитьСостояниеТекущегоЭтапаЗавершен(ЭтапВход, ЭкземплярПроцесса);
				// Откроем этапы-последователи, если у них установлено соответственное действие и утверждены все этапы перед ними.
				Если АктивироватьПоследователейВход Тогда
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("Этап", ЭтапВход);
					ТекущиеДанные = СостоянияВыполненияПроцесса.НайтиСтроки(СтруктураПоиска);
					Если ТекущиеДанные.Количество() > 0 Тогда
						ТЗПоследователей = Неопределено;
						Последователи = ПолучитьПоследователейПоОрганизации(ТЗПоследователей, ТекущиеДанные[0], СостоянияВыполненияПроцесса, мПоследователиСтрок, Период, Сценарий, Ложь);
						ОткрытьЭтапыПоследователиАвтоматически(Последователи, ПустаяОрганизация, СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, Период, Сценарий, ВерсияРегламента, ЭкземплярПроцесса);
					Иначе
						ТекстСообщения = НСтр("ru = 'Не удалось получить данные для открытия последователей этапа %Этап%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(ЭтапВход));
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
						УспешноВыполненыПредварительныеДействия = Ложь; 
					КонецЕсли;
				Иначе
					// Не требуется открытие последователей.
				КонецЕсли;
			Иначе
				// Обработка не прошла. Не изменяем статус этапа.
			КонецЕсли;
			РезультатФункции = УспешноВыполненыПредварительныеДействия;
		Иначе
			РезультатФункции = Ложь; // Проверка не пройдена. Не изменяем статус этапа.
		КонецЕсли;
	ИначеЕсли СостояниеВход = Перечисления.СостоянияЭтаповПроцессов.Выполняется Тогда
		Если ЭтапВход.РучноеУтверждениеЭтапа Тогда
			РезультатПроверки = ПроверитьУтверждениеПредшественников(ЭтапВход, ПустаяОрганизация, ВерсияРегламента, Период, Сценарий, Истина, ЭкземплярПроцесса);
			Если РезультатПроверки Тогда
				ОтборЭтап = Новый Структура("Этап", ЭтапВход);
				ОтветственныеТекущегоЭтапа = ЭкземплярПроцесса.ДополнительныеСогласующие.Выгрузить(ОтборЭтап);
				СтрокаПредставленияОповещение = "";
				РасшифровкаОтветственных = РасшифроватьРолиОтветственных(ЭкземплярПроцесса, ОтветственныеТекущегоЭтапа, ПустаяОрганизация, СтрокаПредставленияОповещение);
				Если РасшифровкаОтветственных.Количество() > 0 Тогда
					МодульРегламентныхЗаданийУХ.ДобавитьЗаданиеНаЭтап(ЭкземплярПроцесса, ЭтапВход, ОтветственныеТекущегоЭтапа);
				Иначе
					ОбработатьОшибкуМаршрутизации(ЭтапВход, ЭкземплярПроцесса, ПустаяОрганизация);
				КонецЕсли;
				МодульУправленияПроцессамиУХ.УстановитьСостояниеТекущегоЭтапаВОбработке(ЭтапВход, ЭкземплярПроцесса);
				РезультатФункции = Истина; 
			Иначе
				РезультатФункции = Ложь; // Проверка не пройдена. Не изменяем статус этапа.
			КонецЕсли;
		Иначе
			РезультатФункции = Истина; // Не создаём задачу, когда исполнение автоматическое.
		КонецЕсли;
	ИначеЕсли СостояниеВход = Перечисления.СостоянияЭтаповПроцессов.Запланирован Тогда
		МодульУправленияПроцессамиУХ.УстановитьСостояниеТекущегоЭтапаНеАктивен(ЭтапВход, ЭкземплярПроцесса);
		РезультатФункции = Истина;
	Иначе
		МодульУправленияПроцессамиУХ.УстановитьСостояниеТекущегоЭтапаНеАктивен(ЭтапВход, ЭкземплярПроцесса);
		РезультатФункции = Истина;
	КонецЕсли;	
	// Сбросим выполнение последователей при необходимости.
	Если СостояниеВход <> Перечисления.СостоянияЭтаповПроцессов.Утвержден Тогда
		ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
		СброситьВыполнениеЭлиминирующихКонсолидирующихОрганизацийИЭтаповНеПодготовкиОтчетности(ЭтапВход, ПустаяОрганизация, ВерсияРегламента, Период, Сценарий, ЭкземплярПроцесса,
			СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, АктивироватьПоследователейВход);
	Иначе
		// Это утверждение. Не требуется сбрасывать последователей.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ОбработатьЭтапОбработкаВПодготовкеОтчетности()

// Формирует пустую структуру дополнительных параметров для обработки документов этапа.
Функция СформироватьСтруктуруДополнительныхПараметровОбработкиДокументовЭтапа()
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ВерсияРегламента", Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка());
	РезультатФункции.Вставить("Период", Справочники.Периоды.ПустаяСсылка());
	РезультатФункции.Вставить("Сценарий", Справочники.Сценарии.ПустаяСсылка());
	РезультатФункции.Вставить("Этап", Справочники.ЭтапыУниверсальныхПроцессов.ПустаяСсылка());
	РезультатФункции.Вставить("ОрганизацииОтбор", Новый Массив);
	РезультатФункции.Вставить("Утверждение", Ложь);
	РезультатФункции.Вставить("Отладка", Ложь);
	РезультатФункции.Вставить("ОстанавливатьсяПриОшибке", Ложь);
	РезультатФункции.Вставить("ОбрабатыватьДокументы", Ложь);
	РезультатФункции.Вставить("ЭкземплярПроцесса", Документы.ЭкземплярПроцесса.ПустаяСсылка());
	РезультатФункции.Вставить("АктивироватьПоследователи", Ложь);
	РезультатФункции.Вставить("Состояние", Перечисления.СостоянияЭтаповПроцессов.ПустаяСсылка());
	Возврат РезультатФункции;
КонецФункции		// СформироватьСтруктуруДополнительныхПараметровОбработкиДокументовЭтапа()

// Выполняет действия по этапу подготовки отчетности ЭтапВход согласно типу этапа.
Функция ВыполнитьДействияПоТипуЭтапаПроцесса(СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, ДополнительныеПараметры)
	РезультатФункции = Ложь;
	// Считывание дополнительных параметров.
	ВерсияРегламента				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ВерсияРегламента", Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка());
	Период							 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Период", Справочники.Периоды.ПустаяСсылка());
	Сценарий						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Сценарий", Справочники.Сценарии.ПустаяСсылка());
	Этап							 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Этап", Справочники.ЭтапыУниверсальныхПроцессов.ПустаяСсылка());
	Организации						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ОрганизацииОтбор", Новый Массив);
	Отладка							 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Отладка", Ложь);
	ОстанавливатьсяПриОшибке		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ОстанавливатьсяПриОшибке", Ложь);
	НастройкиОбработкиДокументов	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ОбрабатыватьДокументы", Ложь);
	ЭкземплярПроцесса				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ЭкземплярПроцесса", Документы.ЭкземплярПроцесса.ПустаяСсылка());
	АктивироватьПоследователиВход	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "АктивироватьПоследователи", Ложь);
	СостояниеИсх					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Состояние", Перечисления.СостоянияЭтаповПроцессов.ПустаяСсылка());
	Если Этап.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Оповещение Тогда    
		// Этап Оповещение.
		РезультатФункции = ОбработатьЭтапОповещенияВПодготовкеОтчетности(Этап, СостояниеИсх, ВерсияРегламента, Период, Сценарий, ЭкземплярПроцесса, СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, АктивироватьПоследователиВход);
	ИначеЕсли Этап.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Обработка Тогда    
		// Этап Обработка. Для состояния Утверждён выполним обработку. Для состояния Выполняется создадим задачу ручного исполнения.
		РезультатФункции = ОбработатьЭтапОбработкаВПодготовкеОтчетности(Этап, СостояниеИсх, ВерсияРегламента, Период, Сценарий, ЭкземплярПроцесса, СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, АктивироватьПоследователиВход);
	ИначеЕсли Этап.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности Тогда	
		// Этап Подготовка отчетности. Выполним действия с отчетами по данному этапу.
		РезультатФункции = ОбработатьДокументыЭтапа(СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, ДополнительныеПараметры);
	Иначе
		РезультатФункции = Истина; 		// Неизвестный вариант обработки. Ничего не делаем.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ВыполнитьДействияПоТипуЭтапаПроцесса()

// По структура дополнительных параметров ДополнительныеПараметры создаёт недостающие документы
// для процесса подготовки отчётности.
Процедура СоздатьНедостающиеДокументыЭтапа(ДополнительныеПараметры)
	// Инициализация.
	ТекИб = Справочники.ТипыБазДанных.ТекущаяИБ;
	ДокументБдНастраиваемыйОтчет				 = Справочники.ДокументыБД.НайтиПоНаименованию("НастраиваемыйОтчет", , , ТекИб);
	ДокументБдТрансляция						 = Справочники.ДокументыБД.НайтиПоНаименованию("Трансляция", , , ТекИб);
	ДокументБдТрансформационнаяКорректировка	 = Справочники.ДокументыБД.НайтиПоНаименованию("ТрансформационнаяКорректировка", , , ТекИб);
	ДокументБдЭлиминация						 = Справочники.ДокументыБД.НайтиПоНаименованию("Элиминация", , , ТекИб);
	// Считвание параметров из структуры.
	ВерсияРегламента				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ВерсияРегламента", Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка());
	Период							 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Период", Справочники.Периоды.ПустаяСсылка());
	Сценарий						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Сценарий", Справочники.Сценарии.ПустаяСсылка());
	Этап							 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "Этап", Справочники.ЭтапыУниверсальныхПроцессов.ПустаяСсылка());
	Организации						 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ОрганизацииОтбор", Новый Массив);
	ЭкземплярПроцесса				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ЭкземплярПроцесса", Документы.ЭкземплярПроцесса.ПустаяСсылка());
	Если ТипЗнч(Организации) = Тип("Соответствие") Тогда
		ОрганизацииОтбор = ОбщегоНазначенияКлиентСерверУХ.КлючиСоответствияВМассив(Организации); 
	Иначе
		ОрганизацииОтбор = Организации;
	КонецЕсли;
	// Получение периода окончания.
	ПериодОкончание = Период;
	Если ЗначениеЗаполнено(ЭкземплярПроцесса) Тогда
		УправлениеПериодом = ЭкземплярПроцесса.КлючевойОбъектПроцесса;
		Если ТипЗнч(УправлениеПериодом) = Тип("ДокументСсылка.УправлениеПериодомСценария") Тогда
			ПериодОкончание = УправлениеПериодом.ПериодСценарияОкончание;
		Иначе
			ПериодОкончание = Период;
		КонецЕсли;
	Иначе
		ПериодОкончание = Период;
	КонецЕсли;
	// Определим, какие отчёты необходимо заполнить на данном этапе..
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ВерсияРегламентаПодготовкиОтчетности КАК ВерсияРегламентаПодготовкиОтчетности,
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница,
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса КАК ЭтапПроцесса,
	|	ЭтапыУниверсальныхПроцессовФормируемыеДокументы.ДокументБД КАК ДокументБД,
	|	ЭтапыУниверсальныхПроцессовФормируемыеДокументы.ШаблонДокумента КАК ШаблонДокумента
	|ИЗ
	|	РегистрСведений.ОрганизационныеЕдиницыЭтаповПроцессов КАК ОрганизационныеЕдиницыЭтаповПроцессов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыУниверсальныхПроцессовФормируемыеДокументы
	|		ПО ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса = ЭтапыУниверсальныхПроцессовФормируемыеДокументы.Ссылка
	|ГДЕ
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ВерсияРегламентаПодготовкиОтчетности = &ВерсияРегламентаПодготовкиОтчетности
	|	И ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница В(&ОрганизационнаяЕдиница)
	|	И ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса = &ЭтапПроцесса";
	Запрос.УстановитьПараметр("ВерсияРегламентаПодготовкиОтчетности", ВерсияРегламента);
	Запрос.УстановитьПараметр("ОрганизационнаяЕдиница", ОрганизацииОтбор);
	Запрос.УстановитьПараметр("ЭтапПроцесса", Этап);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекДокументБд	 = ВыборкаДетальныеЗаписи.ДокументБД;
		ТекОрганизация	 = ВыборкаДетальныеЗаписи.ОрганизационнаяЕдиница;
		ТекВидОтчета	 = ВыборкаДетальныеЗаписи.ШаблонДокумента;
		// Поиск уже созданных документов.
		ДокументНайден = Ложь;
		Если ТекДокументБд = ДокументБдНастраиваемыйОтчет Тогда
			// Поиск Настраиваемого отчёта.
			НайденныйДокумент = Документы.НастраиваемыйОтчет.ПолучитьЭкземплярОтчета(ТекОрганизация, Период, Сценарий, ТекВидОтчета, , , Ложь);
			ДокументНайден = (ЗначениеЗаполнено(НайденныйДокумент));
		ИначеЕсли ТекДокументБд = ДокументБдТрансляция Тогда
			// Поиск Трансляции.
			НайденныйДокумент = Документы.Трансляция.ПолучитьЭкземплярТрансляции(Период, Сценарий, ТекОрганизация, ТекВидОтчета);
			ДокументНайден = (ЗначениеЗаполнено(НайденныйДокумент));
		ИначеЕсли ТекДокументБд = ДокументБдТрансформационнаяКорректировка Тогда
			// Поиск Трансформационной корректировки.
			НайденныйДокумент = Документы.ТрансформационнаяКорректировка.ПолучитьЭкземплярТрансформационнойКорректировки(Период, Сценарий, ТекОрганизация, ТекВидОтчета);
			ДокументНайден = (ЗначениеЗаполнено(НайденныйДокумент));			
		ИначеЕсли ТекДокументБд = ДокументБдЭлиминация Тогда
			// Поиск Элиминации.
			НайденныйДокумент = Документы.Элиминация.ПолучитьЭкземплярЭлиминации(Период, ТекОрганизация, Сценарий);
			ДокументНайден = (ЗначениеЗаполнено(НайденныйДокумент));						
		Иначе
			// Неизвестный вариант. Не осуществляем поиск.
			ДокументНайден = Ложь;
		КонецЕсли; 
		// Непосредственное создание документа.
		Если НЕ ДокументНайден Тогда
			СтруктураСоздания = Новый Структура;
			СтруктураСоздания.Вставить("ВерсияРегламента",		 	ВерсияРегламента);
			СтруктураСоздания.Вставить("ВидОтчета", 				ТекВидОтчета);
			СтруктураСоздания.Вставить("ДокументБД",			 	ТекДокументБд);
			СтруктураСоздания.Вставить("Организация",			 	ТекОрганизация);
			СтруктураСоздания.Вставить("ПериодСценария",		 	Период);
			СтруктураСоздания.Вставить("ПериодСценарияОкончание",	ПериодОкончание);		
			СтруктураСоздания.Вставить("Сценарий",				 	Сценарий);
			СоздатьОбъектПоСтруктуре(СтруктураСоздания);
		Иначе
			// Документ уже существует. Не создаём повторно.
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры		// СоздатьНедостающиеДокументыЭтапа()

Функция УстановитьСостояниеЭтапаПроцессаОтчетности(
	СостоянияВыполненияПроцесса
	, мПредшественникиСтрок	
	, мПоследователиСтрок	
	, ВерсияРегламента
	, Период
	, Сценарий
	, Этап
	, Организации = Неопределено
	, Состояние
	, Отладка = Ложь
	, ОстанавливатьсяПриОшибке = Ложь
	, ОбрабатыватьДокументы = Ложь
	, ЭкземплярПроцесса
	, АктивироватьПоследователейВход = Истина) Экспорт
	
	// Преобразование параметров.
	Если ТипЗнч(Состояние) = Тип("Строка") Тогда	
		Состояние = Перечисления.СостоянияЭтаповПроцессов[СтрЗаменить(Состояние,"ИзменитьСостояние_","")];
	КонецЕсли;
	ОрганизацииОтбор = ПреобразоватьОрганизацииОтбор(Организации);
	Утверждение = (Состояние = Перечисления.СостоянияЭтаповПроцессов.Утвержден);
	СтруктураДополнительныхПараметров = СформироватьСтруктуруДополнительныхПараметровОбработкиДокументовЭтапа();
	СтруктураДополнительныхПараметров.Вставить("ВерсияРегламента",				 ВерсияРегламента);
	СтруктураДополнительныхПараметров.Вставить("Период",						 Период);
	СтруктураДополнительныхПараметров.Вставить("Сценарий",						 Сценарий);
	СтруктураДополнительныхПараметров.Вставить("Этап",							 Этап);
	СтруктураДополнительныхПараметров.Вставить("ОрганизацииОтбор",				 ОрганизацииОтбор);
	СтруктураДополнительныхПараметров.Вставить("Отладка",						 Отладка);
	СтруктураДополнительныхПараметров.Вставить("ОстанавливатьсяПриОшибке",		 ОстанавливатьсяПриОшибке);
	СтруктураДополнительныхПараметров.Вставить("ОбрабатыватьДокументы",			 ОбрабатыватьДокументы);
	СтруктураДополнительныхПараметров.Вставить("ЭкземплярПроцесса",				 ЭкземплярПроцесса);
	СтруктураДополнительныхПараметров.Вставить("АктивироватьПоследователи",		 АктивироватьПоследователейВход);
	СтруктураДополнительныхПараметров.Вставить("Состояние",						 Состояние);
	СтруктураДополнительныхПараметров.Вставить("Утверждение",					 Утверждение);
	// Создание недостающих документов для данного этапа. Создание происходит в любом случае, вне зависимости от выбранного состояния этапа.
	СоздатьНедостающиеДокументыЭтапа(СтруктураДополнительныхПараметров);
	// Выполнение основных действий в зависимости от типа этапа.
	УспешноВыполненыПредварительныеДействия = ВыполнитьДействияПоТипуЭтапаПроцесса(СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, СтруктураДополнительныхПараметров);

	// Состояние Запланирован установим вручную.
	Если Состояние = Перечисления.СостоянияЭтаповПроцессов.Запланирован Тогда
		Для Каждого ТекОрганизацииОтбор Из ОрганизацииОтбор Цикл
			ИзменитьСостояниеЭтапаПроцесса(Период, Сценарий, ТекОрганизацииОтбор.Ключ, Этап, Состояние);
		КонецЦикла;
		// Изменим статус этапа процесса.
		ОпределитьСостояниеЭтапаПроцесса(ЭкземплярПроцесса, Этап, Период, Сценарий);
	Иначе
		// Состояние установлено ранее.
	КонецЕсли;
			
	Если НЕ (УспешноВыполненыПредварительныеДействия = Истина) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	//Обновим текущий статус этапов
	ОрганизацииМассив = Новый Массив;
	Для Каждого Орг Из ОрганизацииОтбор Цикл 
		ОрганизацииМассив.Добавить(Орг.Ключ);	
		СтрокиЭтапа = СостоянияВыполненияПроцесса.НайтиСтроки(Новый Структура("Этап,Организация",Этап,Орг.Ключ));
		Для Каждого СтрокаЭтапа Из СтрокиЭтапа Цикл
			СтрокаЭтапа.СостояниеЭтапа = Состояние;
		КонецЦикла;			
	КонецЦикла;
	
	//Контроль статуса экземпляра процесса
	ОбновитьСтатусЭкзепляраПроцесса(Сценарий,Период,ЭкземплярПроцесса);
	 
	// Оповещение об открытии этапа.
	МассивОповещеаемых = МодульУправленияОповещениямиУХ.ВернутьСписокОповещаемыхПоЭтапуПодготовкиОтчетности(Этап,ВерсияРегламента,ОрганизацииМассив);
	ДопПараметры = ЭкземплярПроцесса.ПараметрыПроцесса.Выгрузить();
	Если НЕ Утверждение Тогда
		МодульУправленияОповещениямиУХ.ОповеститьПользователей(Справочники.ВидыСобытийОповещений.ЭтапПроцессаПереведенВСтатусВыполняется,,Этап,МассивОповещеаемых,ДопПараметры);	
	Иначе
		МодульУправленияОповещениямиУХ.ОповеститьПользователей(Справочники.ВидыСобытийОповещений.ЭтапПроцессаПереведенВСтатусУтвержден,,Этап,МассивОповещеаемых,ДопПараметры);
	КонецЕсли;
	// Оповещение о необходимости заполнить экземпляры.
	Если Состояние = Перечисления.СостоянияЭтаповПроцессов.Выполняется
		И Этап.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности Тогда
		ОповеститьОНеобходимостиЗаполнитьОтчеты(ВерсияРегламента, ОрганизацииМассив, Период, Сценарий, Этап);
	Иначе
		// Не требуется отправка уведомления о заполнении отчетности.
	КонецЕсли;
	Возврат Истина;
	
КонецФункции

Функция ОстанавливатьсяПриОшибке(Отладка, ОстанавливатьсяПриОшике)
	
	Если Отладка Тогда
		Если ОстанавливатьсяПриОшике Тогда
			Возврат Истина;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

Функция ЭтапУтвержден(Период, Сценарий, Этап)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("Этап", Этап);	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(ВЫБОР
	|			КОГДА СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцессов.Утвержден)
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Утверждено,
	|	СУММА(ВЫБОР
	|			КОГДА СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцессов.Утвержден)
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК НеУтверждено
	|ИЗ
	|	РегистрСведений.СостоянияВыполненияПроцессов.СрезПоследних(
	|			,
	|			ПериодСценария = &Период
	|				И Сценарий = &Сценарий
	|				И ЭтапПроцесса = &Этап) КАК СостоянияВыполненияПроцессовСрезПоследних";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.НеУтверждено = 0;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСостояниеЭтапа(Период, Сценарий, Этап, Расширенно = Ложь) Экспорт
	
	Запрос = Новый Запрос;
    
	Если Этап.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СостоянияВыполненияПроцессовСрезПоследних.Организация,
		|	СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа,
		|	СостоянияВыполненияПроцессовСрезПоследних.ДатаНачала,
		|	СостоянияВыполненияПроцессовСрезПоследних.ДатаОкончания,
		|	СостоянияВыполненияПроцессовСрезПоследних.ОтветственныйЗаЭтап";
		Если Расширенно Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|СостоянияВыполненияПроцессовСрезПоследних.Организация.ТипОрганизации";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|	РегистрСведений.СостоянияВыполненияПроцессов.СрезПоследних(
		|			,
		|			ПериодСценария = &Период
		|				И Сценарий = &Сценарий
		|				И ЭтапПроцесса = &Этап) КАК СостоянияВыполненияПроцессовСрезПоследних";
		Запрос.УстановитьПараметр("Период", Период);
		Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса КАК ЭтапПроцесса,
		|	ВыполнениеПроцессовСрезПоследних.СостояниеЭтапа КАК СостояниеЭтапа,
		|	ВыполнениеПроцессовСрезПоследних.ДатаНачала КАК ДатаНачала,
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
		|	ВыполнениеПроцессовСрезПоследних.ДатаОкончания КАК ДатаОкончания,
		|	ВыполнениеПроцессовСрезПоследних.ОтветственныйЗаЭтап КАК ОтветственныйЗаЭтап
		|ИЗ
		|	РегистрСведений.ВыполнениеПроцессов.СрезПоследних(
		|			,
		|			ЭтапПроцесса = &Этап
		|				И ДокументПроцесса = &ДокументПроцесса) КАК ВыполнениеПроцессовСрезПоследних";
		Регламент = УправлениеОтчетамиУХ.ПолучитьВерсиюРегламентаПоПериодуИСценарию(Сценарий, Период);
		ЭкземплярПроцесса = УправлениеПроцессамиСогласованияУХ.ПолучитьЭкземплярПроцессаСценария(Регламент, Период, Сценарий);
		Запрос.УстановитьПараметр("ДокументПроцесса", ЭкземплярПроцесса);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Этап", Этап);	
	Запрос.Текст = ТекстЗапроса;	
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезультатЗапроса.Выгрузить();
	КонецЕсли;
		
КонецФункции

Функция ПолучитьСостояниеЭтапаПоЭкземпляруПроцесса(ЭкземплярПроцесса, Этап, Расширенно = Ложь)
	
	Запрос = Новый Запрос;
    
	Если Этап.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности Тогда
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	СостоянияВыполненияПроцессовСрезПоследних.Организация,
		|	СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа,
		|	СостоянияВыполненияПроцессовСрезПоследних.ДатаНачала,
		|	СостоянияВыполненияПроцессовСрезПоследних.ДатаОкончания,
		|	СостоянияВыполненияПроцессовСрезПоследних.ОтветственныйЗаЭтап";
		Если Расширенно Тогда
			ТекстЗапроса = ТекстЗапроса + ",
			|СостоянияВыполненияПроцессовСрезПоследних.Организация.ТипОрганизации";
		КонецЕсли;
		ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|	РегистрСведений.СостоянияВыполненияПроцессов.СрезПоследних(
		|			,
		|			ПериодСценария = &Период
		|				И Сценарий = &Сценарий
		|				И ЭтапПроцесса = &Этап) КАК СостоянияВыполненияПроцессовСрезПоследних";
		Запрос.УстановитьПараметр("Период", ЭкземплярПроцесса.Период);
		Запрос.УстановитьПараметр("Сценарий", ЭкземплярПроцесса.Сценарий);
	Иначе
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса КАК ЭтапПроцесса,
		|	ВыполнениеПроцессовСрезПоследних.СостояниеЭтапа КАК СостояниеЭтапа,
		|	ВыполнениеПроцессовСрезПоследних.ДатаНачала КАК ДатаНачала,
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
		|	ВыполнениеПроцессовСрезПоследних.ДатаОкончания КАК ДатаОкончания,
		|	ВыполнениеПроцессовСрезПоследних.ОтветственныйЗаЭтап КАК ОтветственныйЗаЭтап
		|ИЗ
		|	РегистрСведений.ВыполнениеПроцессов.СрезПоследних(
		|			,
		|			ЭтапПроцесса = &Этап
		|				И ДокументПроцесса = &ДокументПроцесса) КАК ВыполнениеПроцессовСрезПоследних";
		Запрос.УстановитьПараметр("ДокументПроцесса", ЭкземплярПроцесса);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Этап", Этап);	
	Запрос.Текст = ТекстЗапроса;	
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат РезультатЗапроса.Выгрузить();
	КонецЕсли;
	
КонецФункции

Процедура ИзменитьСостояниеЭтапаПроцесса(Период,Сценарий,Организация = Неопределено,Этап,Состояние) Экспорт
	
	Утверждение = Состояние = Перечисления.СостоянияЭтаповПроцессов.Утвержден;

	
	НаборЗаписей = РегистрыСведений.СостоянияВыполненияПроцессов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПериодСценария.Установить(Период);
	НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
	НаборЗаписей.Отбор.ЭтапПроцесса.Установить(Этап);
	Если Организация <> Неопределено Тогда
		НаборЗаписей.Отбор.Организация.Установить(Организация);
	Иначе
		// Не устанавливаем отбор.
	КонецЕсли;
	
	НаборЗаписей.Прочитать();
		
	Для Каждого Запись Из НаборЗаписей Цикл
		Если Утверждение Тогда
			Запись.ДатаОкончания = ТекущаяДата();
		КонецЕсли;
			
		Если НЕ Запись.СостояниеЭтапа = Состояние Тогда
			Запись.СостояниеЭтапа = Состояние;
		КонецЕсли;
		
	КонецЦикла; 
	
	НаборЗаписей.Записать();

КонецПроцедуры

// Возвращает значение из соответствия СоответствиеВход по ключу КлючВход. Когда ключ не найден, 
// будет возвращено значение ЗначениеПоУмолчаниюВход.
Функция ПолучитьЗначениеИзСоответствия(СоответствиеВход, КлючВход, ЗначениеПоУмолчаниюВход = Неопределено)
	РезультатФункции = ЗначениеПоУмолчаниюВход;
	РезультатФункции = СоответствиеВход.Получить(КлючВход);
	Если РезультатФункции = Неопределено Тогда
		РезультатФункции = ЗначениеПоУмолчаниюВход;
	Иначе
		// Не изменяем выходное значение.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьКоличествоИзСоответствия()

// Для этапа ТекущийЭтап в периоде отчета Период и сценарии Сценарий определяет
// состояние по состояниям выполнения этапа организациями, а после переводит
// данный этап в процессе ЭкземплярПроцесса в полученное состояние.
Процедура ОпределитьСостояниеЭтапаПроцесса(ЭкземплярПроцесса, ТекущийЭтап, Период, Сценарий) Экспорт
	// Получим соответствие этапов каждого состояния.
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа КАК Состояние,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СостоянияВыполненияПроцессовСрезПоследних.Организация) КАК КоличествоОрганизаций
	|ИЗ
	|	РегистрСведений.СостоянияВыполненияПроцессов.СрезПоследних(
	|			,
	|			ПериодСценария = &Период
	|				И Сценарий = &Сценарий
	|				И ЭтапПроцесса = &Этап) КАК СостоянияВыполненияПроцессовСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа";
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("Этап", ТекущийЭтап);
	ТЗЭтапы =  Запрос.Выполнить().Выгрузить();
	СоответствиеСостояний = ОбщегоНазначенияСерверУХ.ПреобразоватьТаблицуЗначенийВСоответствие(ТЗЭтапы, "Состояние", "КоличествоОрганизаций");
	// Определим наличие организаций в каждом статусе.
	КоличествоОшибка		 = ПолучитьЗначениеИзСоответствия(СоответствиеСостояний, Перечисления.СостоянияЭтаповПроцессов.Отменен, 0);
	КоличествоЗапланирован	 = ПолучитьЗначениеИзСоответствия(СоответствиеСостояний, Перечисления.СостоянияЭтаповПроцессов.Запланирован, 0);
	КоличествоВыполняется	 = ПолучитьЗначениеИзСоответствия(СоответствиеСостояний, Перечисления.СостоянияЭтаповПроцессов.Выполняется, 0);
	КоличествоУтвержден		 = ПолучитьЗначениеИзСоответствия(СоответствиеСостояний, Перечисления.СостоянияЭтаповПроцессов.Утвержден, 0);
	ЕстьСостояниеОшибка			 = (КоличествоОшибка <> 0);
	ЕстьСостояниеЗапланирован	 = (КоличествоЗапланирован <> 0);
	ЕстьСостояниеВыполняется	 = (КоличествоВыполняется <> 0);
	ЕстьСостояниеУтвержден		 = (КоличествоУтвержден <> 0);
	Если ЕстьСостояниеОшибка Тогда
		// Есть хотя бы одна организация с ошибкой. Считаем весь этап ошибочным.
		МодульУправленияПроцессамиУХ.УстановитьСостояниеТекущегоЭтапаЗавершенСОшибкой(ТекущийЭтап, ЭкземплярПроцесса);
	Иначе
		Если ЕстьСостояниеВыполняется Тогда	
			// Нет ни одной с ошибкой, но есть в работе - считаем весь этап в обработке.
			МодульУправленияПроцессамиУХ.УстановитьСостояниеТекущегоЭтапаВОбработке(ТекущийЭтап, ЭкземплярПроцесса);
		Иначе
			Если (ЕстьСостояниеУтвержден) И (НЕ ЕстьСостояниеЗапланирован) Тогда
				// Все организации в состоянии Утвержден. Считаем весь этап утвержденным.
				МодульУправленияПроцессамиУХ.УстановитьСостояниеТекущегоЭтапаЗавершен(ТекущийЭтап, ЭкземплярПроцесса);
			ИначеЕсли (Не ЕстьСостояниеУтвержден) И (ЕстьСостояниеЗапланирован) Тогда	
				// Все организации не активны. Считаем весь этап не активным.
				МодульУправленияПроцессамиУХ.УстановитьСостояниеТекущегоЭтапаНеАктивен(ТекущийЭтап, ЭкземплярПроцесса);
			ИначеЕсли (ЕстьСостояниеУтвержден) И (ЕстьСостояниеЗапланирован) Тогда		
				// Часть организаций в состоянии Утвержден, а часть - не активны. Считаем этап в обработке.
				МодульУправленияПроцессамиУХ.УстановитьСостояниеТекущегоЭтапаВОбработке(ТекущийЭтап, ЭкземплярПроцесса);
			Иначе
				// Пустая таблица, либо неизвестный вариант. Ничего не делаем.
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Возвращает таблицу исполнения отчётов для определения возможности завершить этап ЭтапВход.
Функция ТаблицаИсполненияОтчетов(ОрганизацияВход, ПериодВход, СценарийВход, ЭтапВход)
	РезультатФункции = Новый ТаблицаЗначений;
	ВерсияРегламентаВход = ЭтапВход.Владелец.СвязанныйРегламент;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭтапыУниверсальныхПроцессовФормируемыеДокументы.Контрольный КАК Контрольный,
		|	ЭтапыУниверсальныхПроцессовФормируемыеДокументы.ДокументБД КАК ДокументБД,
		|	ЭтапыУниверсальныхПроцессовФормируемыеДокументы.ШаблонДокумента КАК ШаблонДокумента,
		|	ЭтапыУниверсальныхПроцессовФормируемыеДокументы.ВидДокумента КАК ВидДокумента,
		|	ЭтапыУниверсальныхПроцессовФормируемыеДокументы.Ссылка КАК Ссылка,
		|	ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница
		|ПОМЕСТИТЬ врЭтапыОрганизаций
		|ИЗ
		|	Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыУниверсальныхПроцессовФормируемыеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизационныеЕдиницыЭтаповПроцессов КАК ОрганизационныеЕдиницыЭтаповПроцессов
		|		ПО ЭтапыУниверсальныхПроцессовФормируемыеДокументы.Ссылка = ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса
		|ГДЕ
		|	ЭтапыУниверсальныхПроцессовФормируемыеДокументы.Ссылка = &ЭтапВход
		|	И ОрганизационныеЕдиницыЭтаповПроцессов.ВерсияРегламентаПодготовкиОтчетности = &ВерсияРегламентаПодготовкиОтчетности
		|	И ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница = &ОрганизационнаяЕдиница
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВерсииЗначенийПоказателей.Ссылка КАК Ссылка,
		|	ВерсииЗначенийПоказателей.Валюта КАК Валюта,
		|	ВерсииЗначенийПоказателей.ВидОтчета КАК ВидОтчета,
		|	ВерсииЗначенийПоказателей.Организация КАК Организация,
		|	ВерсииЗначенийПоказателей.ПериодОтчета КАК ПериодОтчета,
		|	ВерсииЗначенийПоказателей.Сценарий КАК Сценарий
		|ПОМЕСТИТЬ ВТ_Версии
		|ИЗ
		|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
		|ГДЕ
		|	НЕ ВерсииЗначенийПоказателей.ПометкаУдаления
		|	И ВерсииЗначенийПоказателей.Сценарий = &Сценарий
		|	И ВерсииЗначенийПоказателей.ПериодОтчета = &ПериодОтчета
		|	И ВерсииЗначенийПоказателей.Организация = &ОрганизационнаяЕдиница
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗначенияПоказателейОтчетовСинтетика.Версия) КАК Количество,
		|	ВТ_Версии.Валюта КАК Валюта,
		|	ВТ_Версии.ВидОтчета КАК ВидОтчета,
		|	ВТ_Версии.Организация КАК Организация,
		|	ВТ_Версии.ПериодОтчета КАК ПериодОтчета,
		|	ВТ_Версии.Сценарий КАК Сценарий
		|ПОМЕСТИТЬ ВТ_КоличествоВерсий
		|ИЗ
		|	ВТ_Версии КАК ВТ_Версии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейОтчетовСинтетика КАК ЗначенияПоказателейОтчетовСинтетика
		|		ПО ВТ_Версии.Ссылка = ЗначенияПоказателейОтчетовСинтетика.Версия
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Версии.Валюта,
		|	ВТ_Версии.ВидОтчета,
		|	ВТ_Версии.Организация,
		|	ВТ_Версии.ПериодОтчета,
		|	ВТ_Версии.Сценарий
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗначенияПоказателейОтчетовВалютные.Версия),
		|	ВТ_Версии.Валюта,
		|	ВТ_Версии.ВидОтчета,
		|	ВТ_Версии.Организация,
		|	ВТ_Версии.ПериодОтчета,
		|	ВТ_Версии.Сценарий
		|ИЗ
		|	ВТ_Версии КАК ВТ_Версии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейОтчетовВалютные КАК ЗначенияПоказателейОтчетовВалютные
		|		ПО ВТ_Версии.Ссылка = ЗначенияПоказателейОтчетовВалютные.Версия
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Версии.Валюта,
		|	ВТ_Версии.ВидОтчета,
		|	ВТ_Версии.Организация,
		|	ВТ_Версии.ПериодОтчета,
		|	ВТ_Версии.Сценарий
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЗначенияПоказателейОтчетовНечисловые.Версия),
		|	ВТ_Версии.Валюта,
		|	ВТ_Версии.ВидОтчета,
		|	ВТ_Версии.Организация,
		|	ВТ_Версии.ПериодОтчета,
		|	ВТ_Версии.Сценарий
		|ИЗ
		|	ВТ_Версии КАК ВТ_Версии
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияПоказателейОтчетовНечисловые КАК ЗначенияПоказателейОтчетовНечисловые
		|		ПО ВТ_Версии.Ссылка = ЗначенияПоказателейОтчетовНечисловые.Версия
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Версии.Валюта,
		|	ВТ_Версии.ВидОтчета,
		|	ВТ_Версии.Организация,
		|	ВТ_Версии.ПериодОтчета,
		|	ВТ_Версии.Сценарий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ВТ_КоличествоВерсий.Количество) КАК Количество,
		|	ВТ_КоличествоВерсий.Валюта КАК Валюта,
		|	ВТ_КоличествоВерсий.ВидОтчета КАК ВидОтчета,
		|	ВТ_КоличествоВерсий.Организация КАК Организация,
		|	ВТ_КоличествоВерсий.ПериодОтчета КАК ПериодОтчета,
		|	ВТ_КоличествоВерсий.Сценарий КАК Сценарий
		|ПОМЕСТИТЬ ВТ_ВерсииСвертка
		|ИЗ
		|	ВТ_КоличествоВерсий КАК ВТ_КоличествоВерсий
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_КоличествоВерсий.Валюта,
		|	ВТ_КоличествоВерсий.ВидОтчета,
		|	ВТ_КоличествоВерсий.Организация,
		|	ВТ_КоличествоВерсий.ПериодОтчета,
		|	ВТ_КоличествоВерсий.Сценарий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(НастраиваемыйОтчет.Ссылка, ЗНАЧЕНИЕ(Документ.НастраиваемыйОтчет.ПустаяСсылка)) КАК Ссылка,
		|	врЭтапыОрганизаций.ШаблонДокумента КАК ШаблонДокумента,
		|	врЭтапыОрганизаций.Контрольный КАК Контрольный,
		|	ЕСТЬNULL(ВТ_ВерсииСвертка.Количество, 0) КАК КоличествоВерсий
		|ПОМЕСТИТЬ врДокументы
		|ИЗ
		|	врЭтапыОрганизаций КАК врЭтапыОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ВерсииСвертка КАК ВТ_ВерсииСвертка
		|			ПО НастраиваемыйОтчет.Организация = ВТ_ВерсииСвертка.Организация
		|				И НастраиваемыйОтчет.ПериодОтчета = ВТ_ВерсииСвертка.ПериодОтчета
		|				И НастраиваемыйОтчет.Сценарий = ВТ_ВерсииСвертка.Сценарий
		|				И НастраиваемыйОтчет.ВидОтчета = ВТ_ВерсииСвертка.ВидОтчета
		|				И НастраиваемыйОтчет.ОсновнаяВалюта = ВТ_ВерсииСвертка.Валюта
		|		ПО (НастраиваемыйОтчет.Сценарий = &Сценарий)
		|			И (НастраиваемыйОтчет.ПериодОтчета = &ПериодОтчета)
		|			И врЭтапыОрганизаций.ШаблонДокумента = НастраиваемыйОтчет.ВидОтчета
		|			И врЭтапыОрганизаций.ОрганизационнаяЕдиница = НастраиваемыйОтчет.Организация
		|ГДЕ
		|	врЭтапыОрганизаций.ШаблонДокумента ССЫЛКА Справочник.ВидыОтчетов
		|
		|СГРУППИРОВАТЬ ПО
		|	врЭтапыОрганизаций.Контрольный,
		|	ЕСТЬNULL(НастраиваемыйОтчет.Ссылка, ЗНАЧЕНИЕ(Документ.НастраиваемыйОтчет.ПустаяСсылка)),
		|	врЭтапыОрганизаций.ШаблонДокумента,
		|	ЕСТЬNULL(ВТ_ВерсииСвертка.Количество, 0)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЕСТЬNULL(ТрансформационнаяКорректировка.Ссылка, ЗНАЧЕНИЕ(Документ.ТрансформационнаяКорректировка.ПустаяСсылка)),
		|	врЭтапыОрганизаций.ШаблонДокумента,
		|	врЭтапыОрганизаций.Контрольный,
		|	1
		|ИЗ
		|	врЭтапыОрганизаций КАК врЭтапыОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТрансформационнаяКорректировка КАК ТрансформационнаяКорректировка
		|		ПО (ТрансформационнаяКорректировка.Сценарий = &Сценарий)
		|			И (ТрансформационнаяКорректировка.ПериодОтчета = &ПериодОтчета)
		|			И врЭтапыОрганизаций.ШаблонДокумента = ТрансформационнаяКорректировка.ШаблонКорректировки
		|			И врЭтапыОрганизаций.ОрганизационнаяЕдиница = ТрансформационнаяКорректировка.Организация
		|ГДЕ
		|	врЭтапыОрганизаций.ШаблонДокумента ССЫЛКА Справочник.ШаблоныТрансформационныхКорректировок
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Трансляция.Ссылка, ЗНАЧЕНИЕ(Документ.Трансляция.ПустаяСсылка)),
		|	врЭтапыОрганизаций.ШаблонДокумента,
		|	врЭтапыОрганизаций.Контрольный,
		|	1
		|ИЗ
		|	врЭтапыОрганизаций КАК врЭтапыОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Трансляция КАК Трансляция
		|		ПО (Трансляция.Сценарий = &Сценарий)
		|			И (Трансляция.ПериодОтчета = &ПериодОтчета)
		|			И врЭтапыОрганизаций.ШаблонДокумента = Трансляция.ШаблонКорректировки
		|			И врЭтапыОрганизаций.ОрганизационнаяЕдиница = Трансляция.Организация
		|ГДЕ
		|	врЭтапыОрганизаций.ШаблонДокумента ССЫЛКА Справочник.ШаблоныТрансляций
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЕСТЬNULL(Элиминация.Ссылка, ЗНАЧЕНИЕ(Документ.Элиминация.ПустаяСсылка)),
		|	врЭтапыОрганизаций.ШаблонДокумента,
		|	врЭтапыОрганизаций.Контрольный,
		|	1
		|ИЗ
		|	врЭтапыОрганизаций КАК врЭтапыОрганизаций
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Элиминация КАК Элиминация
		|		ПО (Элиминация.Сценарий = &Сценарий)
		|			И врЭтапыОрганизаций.ОрганизационнаяЕдиница = Элиминация.ОрганизацияДляЭлиминации
		|			И (Элиминация.ПериодОтчета = &ПериодОтчета)
		|ГДЕ
		|	врЭтапыОрганизаций.ДокументБД = &ДокументЭлиминация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////

		|ВЫБРАТЬ
		|	врДокументы.Ссылка КАК Ссылка,
		|	врДокументы.ШаблонДокумента КАК ШаблонДокумента,
		|	врДокументы.Контрольный КАК Контрольный,
		|	ЕСТЬNULL(РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта, НЕОПРЕДЕЛЕНО) КАК Состояние,
		|	врДокументы.КоличествоВерсий КАК КоличествоВерсий
		|ИЗ
		|	врДокументы КАК врДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних КАК РегистрСостоянийОбъектовСрезПоследних
		|		ПО врДокументы.Ссылка = РегистрСостоянийОбъектовСрезПоследних.Объект";
	ДокументЭлиминация = Справочники.ДокументыБД.НайтиПоНаименованию("Элиминация");	
	Запрос.УстановитьПараметр("ВерсияРегламентаПодготовкиОтчетности", ВерсияРегламентаВход);
	Запрос.УстановитьПараметр("ОрганизационнаяЕдиница", ОрганизацияВход);
	Запрос.УстановитьПараметр("ДокументЭлиминация", ДокументЭлиминация);
	Запрос.УстановитьПараметр("ПериодОтчета", ПериодВход);
	Запрос.УстановитьПараметр("Сценарий", СценарийВход);
	Запрос.УстановитьПараметр("ЭтапВход", ЭтапВход);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();

	Возврат РезультатФункции;
КонецФункции		 // ТаблицаИсполненияОтчетов()	

// Возвращает таблицу значений, содержащую этапы процесса подготовки отчетности,
// количество утвержденных и контроллируемых документов на этапе, а также критерий
// выполенения этапа. Для процесса в периоде ПериодОтчетаВход по сценарию СценарийВход. 
Функция ПолучитьСтатистикуВыполненияПоЭтапам(СценарийВход, ПериодОтчетаВход, ОрганизацияВход = Неопределено, ШаблонДокументаВход = Неопределено) Экспорт
	РезультатФункции = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	УправлениеПериодомСценария.Сценарий КАК Сценарий,
		|	УправлениеПериодомСценария.ПериодСценария КАК ПериодСценария,
		|	УправлениеПериодомСценария.Ссылка КАК Ссылка,
		|	УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры КАК ВерсияОрганизационнойСтруктуры
		|ПОМЕСТИТЬ ВТ_УправлениеПериодом
		|ИЗ
		|	Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
		|ГДЕ
		|	УправлениеПериодомСценария.ПериодСценария = &ПериодСценария
		|	И УправлениеПериодомСценария.Сценарий = &Сценарий
		|	И НЕ УправлениеПериодомСценария.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница КАК Организация,
		|	ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса КАК ЭтапПроцесса,
		|	ЕСТЬNULL(СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа, ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцессов.Запланирован)) КАК СостояниеЭтапа,
		|	СостоянияВыполненияПроцессовСрезПоследних.ОтветственныйЗаЭтап КАК ОтветственныйЗаЭтап,
		|	ЭтапыУниверсальныхПроцессовФормируемыеДокументы.ШаблонДокумента КАК ШаблонДокумента
		|ПОМЕСТИТЬ ТаблицаОрганизаций
		|ИЗ
		|	РегистрСведений.ОрганизационныеЕдиницыЭтаповПроцессов КАК ОрганизационныеЕдиницыЭтаповПроцессов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияВыполненияПроцессов.СрезПоследних(
		|				,
		|				ПериодСценария = &ПериодСценария
		|					И Сценарий = &Сценарий) КАК СостоянияВыполненияПроцессовСрезПоследних
		|		ПО ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница = СостоянияВыполненияПроцессовСрезПоследних.Организация
		|			И ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса = СостоянияВыполненияПроцессовСрезПоследних.ЭтапПроцесса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УправлениеПериодом КАК ВТ_УправлениеПериодом
		|		ПО ОрганизационныеЕдиницыЭтаповПроцессов.ВерсияРегламентаПодготовкиОтчетности = ВТ_УправлениеПериодом.ВерсияОрганизационнойСтруктуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыУниверсальныхПроцессовФормируемыеДокументы
		|		ПО ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса = ЭтапыУниверсальныхПроцессовФормируемыеДокументы.Ссылка
		|ГДЕ
		|	НЕ ЕСТЬNULL(СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа, ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцессов.Запланирован)) В (&СостоянияЭтапаЗакрыт)
		|	И НЕ ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса.ПометкаУдаления
		|	И ВЫБОР
		|			КОГДА &ОрганизационнаяЕдиница = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница = &ОрганизационнаяЕдиница
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ШаблонДокумента = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЭтапыУниверсальныхПроцессовФормируемыеДокументы.ШаблонДокумента = &ШаблонДокумента
		|		КОНЕЦ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭтапыПроцессовФормируемыеОтчеты.Ссылка КАК ЭтапПроцесса,
		|	ЭтапыПроцессовФормируемыеОтчеты.ШаблонДокумента КАК ВидОтчета,
		|	ЭтапыПроцессовФормируемыеОтчеты.ВидДокумента КАК ВидДокумента,
		|	ЭтапыПроцессовФормируемыеОтчеты.ДокументБД КАК ДокументБД,
		|	ЭтапыПроцессовФормируемыеОтчеты.Контрольный КАК Контрольный
		|ПОМЕСТИТЬ ТаблицаВидовОтчетов
		|ИЗ
		|	Справочник.ШаблоныУниверсальныхПроцессов КАК ВерсииОрганизационнойСтруктуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыПроцессовФормируемыеОтчеты
		|		ПО ВерсииОрганизационнойСтруктуры.Ссылка = ЭтапыПроцессовФормируемыеОтчеты.Ссылка.Владелец
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УправлениеПериодом КАК ВТ_УправлениеПериодом
		|		ПО ВерсииОрганизационнойСтруктуры.СвязанныйРегламент = ВТ_УправлениеПериодом.ВерсияОрганизационнойСтруктуры
		|ГДЕ
		|	ЕСТЬNULL(ЭтапыПроцессовФормируемыеОтчеты.Ссылка.АвтоматическиеДействия, ЗНАЧЕНИЕ(Справочник.ЭтапыУниверсальныхПроцессов.ПустаяСсылка)) В (&АвтоматическиеДействияЗакрытие)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ДокументБД,
		|	ВидОтчета,
		|	ВидДокумента
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НастраиваемыйОтчет.ВидОтчета КАК ПолеШаблона,
		|	НастраиваемыйОтчет.Организация КАК Организация,
		|	НастраиваемыйОтчет.Ссылка КАК Ссылка,
		|	РегистрСостоянийОбъектов.СостояниеОбъекта КАК Состояние,
		|	НастраиваемыйОтчет.Сценарий КАК Сценарий
		|ПОМЕСТИТЬ НастраиваемыйОтчетВрем
		|ИЗ
		|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(, ) КАК РегистрСостоянийОбъектов
		|		ПО НастраиваемыйОтчет.Ссылка = РегистрСостоянийОбъектов.Объект
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВидовОтчетов КАК ТаблицаВидовОтчетов
		|		ПО НастраиваемыйОтчет.ВидОтчета = ТаблицаВидовОтчетов.ВидОтчета
		|ГДЕ
		|	НастраиваемыйОтчет.Сценарий = &Сценарий
		|	И НастраиваемыйОтчет.ПериодОтчета = &ПериодСценария
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПолеШаблона,
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТрансформационнаяКорректировка.ШаблонКорректировки КАК ПолеШаблона,
		|	ТрансформационнаяКорректировка.Организация КАК Организация,
		|	ТрансформационнаяКорректировка.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА ТрансформационнаяКорректировка.Проведен
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Выполняется)
		|	КОНЕЦ КАК Состояние,
		|	ТрансформационнаяКорректировка.Сценарий КАК Сценарий
		|ПОМЕСТИТЬ КорректировкаВрем
		|ИЗ
		|	Документ.ТрансформационнаяКорректировка КАК ТрансформационнаяКорректировка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаВидовОтчетов КАК ТаблицаВидовОтчетов
		|		ПО ТрансформационнаяКорректировка.ШаблонКорректировки = ТаблицаВидовОтчетов.ВидОтчета
		|ГДЕ
		|	ТрансформационнаяКорректировка.Сценарий = &Сценарий
		|	И ТрансформационнаяКорректировка.ПериодОтчета = &ПериодСценария
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПолеШаблона,
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Трансляция.ШаблонКорректировки КАК ПолеШаблона,
		|	Трансляция.Организация КАК Организация,
		|	Трансляция.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА Трансляция.Проведен
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Выполняется)
		|	КОНЕЦ КАК Состояние,
		|	Трансляция.Сценарий КАК Сценарий
		|ПОМЕСТИТЬ ТрансляцияВрем
		|ИЗ
		|	ТаблицаВидовОтчетов КАК ТаблицаВидовОтчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.Трансляция КАК Трансляция
		|		ПО (Трансляция.ШаблонКорректировки = ТаблицаВидовОтчетов.ВидОтчета)
		|ГДЕ
		|	Трансляция.Сценарий = &Сценарий
		|	И Трансляция.ПериодОтчета = &ПериодСценария
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПолеШаблона,
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НЕОПРЕДЕЛЕНО КАК ПолеШаблона,
		|	Элиминация.ОрганизацияДляЭлиминации КАК Организация,
		|	Элиминация.Ссылка КАК Ссылка,
		|	ВЫБОР
		|		КОГДА Элиминация.Проведен
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Выполняется)
		|	КОНЕЦ КАК Состояние,
		|	Элиминация.Сценарий КАК Сценарий
		|ПОМЕСТИТЬ ЭлиминацияВрем
		|ИЗ
		|	ТаблицаВидовОтчетов КАК ТаблицаВидовОтчетов,
		|	Документ.Элиминация КАК Элиминация
		|ГДЕ
		|	Элиминация.Сценарий = &Сценарий
		|	И Элиминация.ПериодОтчета = &ПериодСценария
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПолеШаблона,
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаВидовОтчетов.ЭтапПроцесса КАК ЭтапПроцесса,
		|	ТаблицаВидовОтчетов.ВидОтчета КАК ВидОтчета,
		|	ТаблицаВидовОтчетов.ДокументБД КАК ДокументБД,
		|	ТаблицаОрганизаций.Организация КАК Организация,
		|	ТаблицаОрганизаций.СостояниеЭтапа КАК СостояниеЭтапа,
		|	НастраиваемыйОтчетВрем.Ссылка КАК Ссылка,
		|	НастраиваемыйОтчетВрем.Состояние КАК Состояние,
		|	ТаблицаВидовОтчетов.Контрольный КАК Контрольный,
		|	ВЫБОР
		|		КОГДА НастраиваемыйОтчетВрем.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоУтверждено,
		|	1 КАК КоличествоВсего,
		|	ВЫБОР
		|		КОГДА ТаблицаВидовОтчетов.Контрольный
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоКонтрольных,
		|	ВЫБОР
		|		КОГДА НастраиваемыйОтчетВрем.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден)
		|				И ТаблицаВидовОтчетов.Контрольный
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК КоличествоУтвержденоКонтрольных
		|ПОМЕСТИТЬ ВТ_Объединение
		|ИЗ
		|	ТаблицаВидовОтчетов КАК ТаблицаВидовОтчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОрганизаций КАК ТаблицаОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Периметр
		|			ПО (Периметр.Ссылка = ТаблицаОрганизаций.Организация.Родитель)
		|		ПО (ТаблицаОрганизаций.ЭтапПроцесса = ТаблицаВидовОтчетов.ЭтапПроцесса)
		|		ЛЕВОЕ СОЕДИНЕНИЕ НастраиваемыйОтчетВрем КАК НастраиваемыйОтчетВрем
		|		ПО (НастраиваемыйОтчетВрем.ПолеШаблона = ТаблицаВидовОтчетов.ВидОтчета)
		|			И (НастраиваемыйОтчетВрем.Организация = ТаблицаОрганизаций.Организация)
		|ГДЕ
		|	ТаблицаВидовОтчетов.ДокументБД = &ПарНастраиваемыйОтчет
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаВидовОтчетов.ЭтапПроцесса,
		|	ТаблицаВидовОтчетов.ВидОтчета,
		|	ТаблицаВидовОтчетов.ДокументБД,
		|	ТаблицаОрганизаций.Организация,
		|	ТаблицаОрганизаций.СостояниеЭтапа,
		|	ЕСТЬNULL(КорректировкаВрем.Ссылка, ЗНАЧЕНИЕ(Документ.ТрансформационнаяКорректировка.ПустаяСсылка)),
		|	ЕСТЬNULL(КорректировкаВрем.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Запланирован)),
		|	ТаблицаВидовОтчетов.Контрольный,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КорректировкаВрем.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Запланирован)) = ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	1,
		|	ВЫБОР
		|		КОГДА ТаблицаВидовОтчетов.Контрольный
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(КорректировкаВрем.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Запланирован)) = ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден)
		|				И ТаблицаВидовОтчетов.Контрольный
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	ТаблицаВидовОтчетов КАК ТаблицаВидовОтчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОрганизаций КАК ТаблицаОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Периметр
		|			ПО (Периметр.Ссылка = ТаблицаОрганизаций.Организация.Родитель)
		|		ПО (ТаблицаОрганизаций.ЭтапПроцесса = ТаблицаВидовОтчетов.ЭтапПроцесса)
		|		ЛЕВОЕ СОЕДИНЕНИЕ КорректировкаВрем КАК КорректировкаВрем
		|		ПО ТаблицаВидовОтчетов.ВидОтчета = КорректировкаВрем.ПолеШаблона
		|			И (КорректировкаВрем.Организация = ТаблицаОрганизаций.Организация)
		|ГДЕ
		|	ТаблицаВидовОтчетов.ДокументБД = &ПарТрансформационнаяКорректировка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаВидовОтчетов.ЭтапПроцесса,
		|	ТаблицаВидовОтчетов.ВидОтчета,
		|	ТаблицаВидовОтчетов.ДокументБД,
		|	ТаблицаОрганизаций.Организация,
		|	ТаблицаОрганизаций.СостояниеЭтапа,
		|	ЕСТЬNULL(ТрансляцияВрем.Ссылка, ЗНАЧЕНИЕ(Документ.Трансляция.ПустаяСсылка)),
		|	ЕСТЬNULL(ТрансляцияВрем.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Запланирован)),
		|	ТаблицаВидовОтчетов.Контрольный,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ТрансляцияВрем.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Запланирован)) = ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	1,
		|	ВЫБОР
		|		КОГДА ТаблицаВидовОтчетов.Контрольный
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ТрансляцияВрем.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Запланирован)) = ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден)
		|				И ТаблицаВидовОтчетов.Контрольный
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	ТаблицаВидовОтчетов КАК ТаблицаВидовОтчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОрганизаций КАК ТаблицаОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Периметр
		|			ПО (Периметр.Ссылка = ТаблицаОрганизаций.Организация.Родитель)
		|		ПО (ТаблицаОрганизаций.ЭтапПроцесса = ТаблицаВидовОтчетов.ЭтапПроцесса)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТрансляцияВрем КАК ТрансляцияВрем
		|		ПО ТаблицаВидовОтчетов.ВидОтчета = ТрансляцияВрем.ПолеШаблона
		|			И (ТрансляцияВрем.Организация = ТаблицаОрганизаций.Организация)
		|ГДЕ
		|	ТаблицаВидовОтчетов.ДокументБД = &ПарТрансляция
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаВидовОтчетов.ЭтапПроцесса,
		|	ТаблицаВидовОтчетов.ВидОтчета,
		|	ТаблицаВидовОтчетов.ДокументБД,
		|	ТаблицаОрганизаций.Организация,
		|	ТаблицаОрганизаций.СостояниеЭтапа,
		|	ЕСТЬNULL(ЭлиминацияВрем.Ссылка, ЗНАЧЕНИЕ(Документ.Трансляция.ПустаяСсылка)),
		|	ЕСТЬNULL(ЭлиминацияВрем.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Запланирован)),
		|	ТаблицаВидовОтчетов.Контрольный,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЭлиминацияВрем.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Запланирован)) = ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден)
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	1,
		|	ВЫБОР
		|		КОГДА ТаблицаВидовОтчетов.Контрольный
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ЭлиминацияВрем.Состояние, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Запланирован)) = ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден)
		|				И ТаблицаВидовОтчетов.Контрольный
		|			ТОГДА 1
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	ТаблицаВидовОтчетов КАК ТаблицаВидовОтчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаОрганизаций КАК ТаблицаОрганизаций
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК Периметр
		|			ПО (Периметр.Ссылка = ТаблицаОрганизаций.Организация.Родитель)
		|		ПО (ТаблицаОрганизаций.ЭтапПроцесса = ТаблицаВидовОтчетов.ЭтапПроцесса)
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЭлиминацияВрем КАК ЭлиминацияВрем
		|		ПО (ЭлиминацияВрем.Организация = ТаблицаОрганизаций.Организация)
		|ГДЕ
		|	ТаблицаВидовОтчетов.ДокументБД = &ПарЭлиминация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_Объединение.ЭтапПроцесса КАК ЭтапПроцесса,
		|	ВТ_Объединение.Организация КАК Организация,
		|	СУММА(ВТ_Объединение.КоличествоУтверждено) КАК КоличествоУтверждено,
		|	СУММА(ВТ_Объединение.КоличествоВсего) КАК КоличествоВсего,
		|	СУММА(ВТ_Объединение.КоличествоКонтрольных) КАК КоличествоКонтрольных,
		|	СУММА(ВТ_Объединение.КоличествоУтвержденоКонтрольных) КАК КоличествоУтвержденоКонтрольных,
		|	ВТ_Объединение.ЭтапПроцесса.КритерийУтвержденияЭтапа КАК КритерийУтвержденияЭтапа,
		|	ВТ_Объединение.СостояниеЭтапа КАК СостояниеЭтапа,
		|	ВТ_Объединение.ЭтапПроцесса.АвтоматическиеДействия КАК АвтоматическиеДействия,
		|	МАКСИМУМ(ЕСТЬNULL(ВыполнениеПроцессовСрезПоследних.ДокументПроцесса, ЗНАЧЕНИЕ(Документ.ЭкземплярПроцесса.ПустаяСсылка))) КАК ДокументПроцесса,
		|	МАКСИМУМ(ЕСТЬNULL(ВыполнениеПроцессовСрезПоследних.СостояниеЭтапа, ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.НеАктивен))) КАК СостояниеЭтапаПроцесса
		|ИЗ
		|	ВТ_Объединение КАК ВТ_Объединение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыполнениеПроцессов.СрезПоследних(, НЕ ДокументПроцесса.ПометкаУдаления) КАК ВыполнениеПроцессовСрезПоследних
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_УправлениеПериодом КАК ВТ_УправлениеПериодом
		|			ПО ВыполнениеПроцессовСрезПоследних.ДокументПроцесса.КлючевойОбъектПроцесса = ВТ_УправлениеПериодом.Ссылка
		|		ПО ВТ_Объединение.ЭтапПроцесса = ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Объединение.ЭтапПроцесса,
		|	ВТ_Объединение.ЭтапПроцесса.КритерийУтвержденияЭтапа,
		|	ВТ_Объединение.СостояниеЭтапа,
		|	ВТ_Объединение.ЭтапПроцесса.АвтоматическиеДействия,
		|	ВТ_Объединение.Организация";
	// Получение параметров запроса.
	ДокументЭкземплярОтчета					 = Справочники.ДокументыБД.НайтиПоНаименованию("НастраиваемыйОтчет");	
	ДокументТрансляция						 = Справочники.ДокументыБД.НайтиПоНаименованию("Трансляция");	
	ДокументТрансформационнаяКорректировка	 = Справочники.ДокументыБД.НайтиПоНаименованию("ТрансформационнаяКорректировка");	
	ДокументЭлиминация						 = Справочники.ДокументыБД.НайтиПоНаименованию("Элиминация");	
	ДействияЭтапаЗакрытие = Новый СписокЗначений;
	ДействияЭтапаЗакрытие.Добавить(Перечисления.АвтоматическиеДействияЭтапаПроцесса.ЗакрыватьАвтоматически);
	ДействияЭтапаЗакрытие.Добавить(Перечисления.АвтоматическиеДействияЭтапаПроцесса.ЗакрыватьОткрыватьАвтоматически);
	СостоянияЭтапаЗакрыт = Новый СписокЗначений;
	СостоянияЭтапаЗакрыт.Добавить(Перечисления.СостоянияЭтаповПроцессов.Утвержден);
	СостоянияЭтапаЗакрыт.Добавить(Перечисления.СостоянияЭтаповУниверсальныхПроцессов.Завершен);
	ОрганизацияРабочий = Неопределено;
	Если ЗначениеЗаполнено(ОрганизацияВход) Тогда
		ОрганизацияРабочий = ОрганизацияВход;
	Иначе
		ОрганизацияРабочий = Неопределено;
	КонецЕсли;
	// Выполнение запроса.
	Запрос.УстановитьПараметр("АвтоматическиеДействияЗакрытие",		 ДействияЭтапаЗакрытие);
	Запрос.УстановитьПараметр("ОрганизационнаяЕдиница",				 ОрганизацияРабочий);
	Запрос.УстановитьПараметр("ПарНастраиваемыйОтчет",				 ДокументЭкземплярОтчета);
	Запрос.УстановитьПараметр("ПарТрансляция",						 ДокументТрансляция);
	Запрос.УстановитьПараметр("ПарТрансформационнаяКорректировка",	 ДокументТрансформационнаяКорректировка);
	Запрос.УстановитьПараметр("ПарЭлиминация",						 ДокументЭлиминация);
	Запрос.УстановитьПараметр("ПериодСценария",						 ПериодОтчетаВход);
	Запрос.УстановитьПараметр("СостоянияЭтапаЗакрыт",				 СостоянияЭтапаЗакрыт);
	Запрос.УстановитьПараметр("Сценарий",							 СценарийВход);
	Запрос.УстановитьПараметр("ШаблонДокумента",					 ШаблонДокументаВход);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
КонецФункции

// Завершает выполнение этапа при осуществлении эскалации.
Процедура ИзменитьСостояниеЭтапаЭскалация(СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, СтруктураДанныхВход)
	// Инициализация.
	Период				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "Период", Справочники.Периоды.ПустаяСсылка());
	Сценарий			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "Сценарий", Справочники.Сценарии.ПустаяСсылка());
	ВерсияРегламента	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "ВерсияРегламента", Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка());
	Этап				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "Этап", Справочники.ЭтапыУниверсальныхПроцессов.ПустаяСсылка());
	Организации			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "Организации", Новый Соответствие);
	ЭкземплярПроцесса	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхВход, "ЭкземплярПроцесса", Документы.ЭкземплярПроцесса.ПустаяСсылка());
	// Изменение состояния.
	УправлениеРабочимиПроцессамиУХ.ИнициализироватьПроцесс(Период, Сценарий, ТекущаяДатаСеанса(), СостоянияВыполненияПроцесса, мПоследователиСтрок, мПредшественникиСтрок);
	УстановитьСостояниеЭтапаПроцессаОтчетности(
	СостоянияВыполненияПроцесса
	, мПредшественникиСтрок	
	, мПоследователиСтрок	
	, ВерсияРегламента
	, Период
	, Сценарий
	, Этап
	, Организации
	, Перечисления.СостоянияЭтаповПроцессов.Утвержден
	, Ложь
	, Истина
	, Ложь
	, ЭкземплярПроцесса);
КонецПроцедуры		// ИзменитьСостояниеЭтапаЭскалация()

Процедура ВыполнитьЭскалациюУтвержденияЭтапа(СценарийВход, ПериодВход, ОрганизацияВход = Неопределено, ШаблонДокументаВход = Неопределено, ВерсияРегламентаВход = Неопределено, МассивЭтаповВход)
	// Инициализация.
	СостояниеЭтапаУтвержден = Перечисления.СостоянияЭтаповПроцессов.Утвержден;
	КритерийУтвержденыВсеЭкземпляры		 = Перечисления.КритерииУтвержденияЭтапаПроцесса.УтвержденыВсеЭкземплярыОтчетовЭтапа;
	КритерийУтвержденыКонтроллируемые	 = Перечисления.КритерииУтвержденияЭтапаПроцесса.УтвержденыКонтрольныеЭкземплярыОтчетов;
	КритерийУтвержденыЗаполненные		 = Перечисления.КритерииУтвержденияЭтапаПроцесса.УтвержденыЗаполненныеЭкземплярыОтчетов;
	ОрганизацияРабочий = Справочники.Организации.ПустаяСсылка();
	Если ОрганизацияВход = Неопределено Тогда
		ОрганизацияРабочий = Справочники.Организации.ПустаяСсылка();
	Иначе
		ОрганизацияРабочий = ОрганизацияВход;
	КонецЕсли;
	// Получение таблицы данных утверждения документов этапа.
	Если ЗначениеЗаполнено(СценарийВход) И ЗначениеЗаполнено(ПериодВход) Тогда
		Если ЗначениеЗаполнено(ВерсияРегламентаВход) Тогда
			ВерсияРегламента = ВерсияРегламентаВход;
		Иначе
			ВерсияРегламента = УправлениеОтчетамиУХ.ПолучитьВерсиюРегламентаПоПериодуИСценарию(СценарийВход, ПериодВход);
		КонецЕсли;
		ЭкземплярПроцесса = УправлениеПроцессамиСогласованияУХ.ПолучитьЭкземплярПроцессаСценария(ВерсияРегламента, ПериодВход, СценарийВход);
		Для Каждого ТекМассивЭтаповВход Из МассивЭтаповВход Цикл
			ТекКритерий = ТекМассивЭтаповВход.КритерийУтвержденияЭтапа;
			ТаблицаИсполненияОтчетов = ТаблицаИсполненияОтчетов(ОрганизацияРабочий, ПериодВход, СценарийВход, ТекМассивЭтаповВход);
			мПоследователиСтрок = Неопределено;
			мПредшественникиСтрок = Неопределено;
			СостоянияВыполненияПроцесса = МодульРегламентныхЗаданийУХ.ИнициализироватьТаблицуВыполненияПроцесса();
			// Обход полученной таблицы.

			Организации = Новый Соответствие;
			Организации.Вставить(ОрганизацияВход, Истина);
			СтруктураЭскалации = Новый Структура;
			СтруктураЭскалации.Вставить("Период", ПериодВход);
			СтруктураЭскалации.Вставить("Сценарий", СценарийВход);
			СтруктураЭскалации.Вставить("ВерсияРегламента", ВерсияРегламента);
			СтруктураЭскалации.Вставить("Этап", ТекМассивЭтаповВход);
			СтруктураЭскалации.Вставить("Организации", Организации);
			СтруктураЭскалации.Вставить("ЭкземплярПроцесса", ЭкземплярПроцесса);
			// Изменим состояние этапа в регистре СостоянияВыполненияПроцессов в зависимости от критерия.
			Если ТекКритерий = КритерийУтвержденыВсеЭкземпляры Тогда
				Если ОбработатьКритерийВсеЭкземпляры(ТаблицаИсполненияОтчетов) Тогда
					ИзменитьСостояниеЭтапаЭскалация(СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, СтруктураЭскалации);
				Иначе
					// Критерий не выполнен. Не изменяем статус.
				КонецЕсли;
			ИначеЕсли ТекКритерий = КритерийУтвержденыКонтроллируемые Тогда		
				Если ОбработатьКритерийКонтрольныеЭкземпляры(ТаблицаИсполненияОтчетов) Тогда
					ИзменитьСостояниеЭтапаЭскалация(СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, СтруктураЭскалации);
				Иначе
					// Критерий не выполнен. Не изменяем статус.
				КонецЕсли;
			ИначеЕсли ТекКритерий = КритерийУтвержденыЗаполненные Тогда		
				Если ОбработатьКритерийЗаполненныеЭкземпляры(ТаблицаИсполненияОтчетов) Тогда
					ИзменитьСостояниеЭтапаЭскалация(СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, СтруктураЭскалации);
				Иначе
					// Критерий не выполнен. Не изменяем статус.
				КонецЕсли;
			ИначеЕсли НЕ ЗначениеЗаполнено(ТекКритерий) Тогда			
				Если ОбработатьКритерийВсеЭкземпляры(ТаблицаИсполненияОтчетов) Тогда
					ИзменитьСостояниеЭтапаЭскалация(СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, СтруктураЭскалации);
				Иначе
					// Критерий не выполнен. Не изменяем статус.
				КонецЕсли;
			Иначе
				// Неизвестный критерий. Пропускаем.
			КонецЕсли;
			// Изменим состояние этапа в регистре Выполенния процессов.
			СтруктураВыполнениеПроцессов = РегистрыСведений.ВыполнениеПроцессов.ПолучитьДанныеВыполненияПроцессов(ЭкземплярПроцесса, ТекМассивЭтаповВход);
			СостояниеЭтапа = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураВыполнениеПроцессов, "СостояниеЭтапа", Перечисления.СостоянияЭтаповУниверсальныхПроцессов.НеАктивен);
			ЭтапВОбработке = (СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.ВОбработке);
			Если ЗначениеЗаполнено(ЭкземплярПроцесса) И (ЭтапВОбработке) Тогда
				ОпределитьСостояниеЭтапаПроцесса(ЭкземплярПроцесса, ТекМассивЭтаповВход, ПериодВход, СценарийВход);
			Иначе
				// Документ не заполнен, либо этап не находится в обработке по данному документу. Не изменяем его состояние.
			КонецЕсли;
		КонецЦикла;	
	Иначе
		// Недостаточно данных. Не проверяем закрытие этапа.
	КонецЕсли;
КонецПроцедуры		// ВыполнитьЭскалациюУтвержденияЭтапа()

// Возвращает структуру, содержащую сценарий, организацию и период по объекту ИсточникВход.
Функция ПолучитьСценарийПериодПоИсточнику(ИсточникВход) Экспорт
	// Инициализация.
	РезультатФункции = Новый Структура; 
	ПустойСценарий		 = Справочники.Сценарии.ПустаяСсылка();
	ПустойПериод		 = Справочники.Периоды.ПустаяСсылка();
	ПустаяОрганизация	 = Справочники.Организации.ПустаяСсылка();
	ПустаяВерсия		 = Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка();
	СценарийРабочий				 = ПустойСценарий;
	ПериодРабочий				 = ПустойПериод;
	ОрганизацияРабочий			 = ПустаяОрганизация;
	ШаблонРабочий				 = Неопределено;
	ВерсияРегламентаРабочая		 = ПустаяВерсия;
	// Получение сценария, организации и периода из документа.
	ТипИсточника = ТипЗнч(ИсточникВход);
	МассивЭтапов = Новый Массив;
	Если ТипИсточника = Тип("ДокументОбъект.НастраиваемыйОтчет") ИЛИ ТипИсточника = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
		СценарийРабочий		 = ИсточникВход.Сценарий;
		ПериодРабочий		 = ИсточникВход.ПериодОтчета;
		ОрганизацияРабочий	 = ИсточникВход.Организация;
		ШаблонРабочий		 = ИсточникВход.ВидОтчета;
		МассивЭтапов 		 = Новый Массив;
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.Трансляция") ИЛИ ТипИсточника = Тип("ДокументСсылка.Трансляция") Тогда
		СценарийРабочий		 = ИсточникВход.Сценарий;
		ПериодРабочий		 = ИсточникВход.ПериодОтчета;
		ОрганизацияРабочий	 = ИсточникВход.Организация;
		ШаблонРабочий		 = ИсточникВход.ШаблонКорректировки;
		МассивЭтапов 		 = Новый Массив;
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.ТрансформационнаяКорректировка") ИЛИ ТипИсточника = Тип("ДокументСсылка.ТрансформационнаяКорректировка") Тогда
		СценарийРабочий		 = ИсточникВход.Сценарий;
		ПериодРабочий		 = ИсточникВход.ПериодОтчета;
		ОрганизацияРабочий	 = ИсточникВход.Организация;
		ШаблонРабочий		 = ИсточникВход.ШаблонКорректировки;
		МассивЭтапов 		 = Новый Массив;
	ИначеЕсли ТипИсточника = Тип("ДокументОбъект.Элиминация") ИЛИ ТипИсточника = Тип("ДокументСсылка.Элиминация") Тогда
		СценарийРабочий		 = ИсточникВход.Сценарий;
		ПериодРабочий		 = ИсточникВход.ПериодОтчета;
		ОрганизацияРабочий	 = ИсточникВход.ОрганизацияДляЭлиминации;		
		ШаблонРабочий		 = Неопределено;
		МассивЭтапов 		 = Новый Массив;
	ИначеЕсли ТипИсточника = Тип("Структура") Тогда
		СценарийРабочий			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсточникВход, "Сценарий", ПустойСценарий);
		ПериодРабочий			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсточникВход, "Период", ПустойПериод);
		ОрганизацияРабочий		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсточникВход, "Организация", ПустаяОрганизация);
		ШаблонРабочий			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсточникВход, "ШаблонДокумента", Неопределено);
		ВерсияРегламентаРабочая	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсточникВход, "ВерсияРегламента", ПустаяВерсия);
		МассивЭтапов	 		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ИсточникВход, "МассивЭтапов", Новый Массив);
	Иначе
		СценарийРабочий		 = ПустойСценарий;
		ПериодРабочий		 = ПустойПериод;
		ОрганизацияРабочий	 = ПустаяОрганизация;
		ШаблонРабочий		 = Неопределено;
	КонецЕсли;
	// Версия регламента.
	Если НЕ ЗначениеЗаполнено(ВерсияРегламентаРабочая) Тогда
		УправлениеПериодом = УправлениеОтчетамиУХ.НайтиДокументУправлениеОтчетнымПериодом(СценарийРабочий, ПериодРабочий);
		ВерсияРегламентаРабочая = УправлениеПериодом.ВерсияОрганизационнойСтруктуры;
	Иначе
		// Версия уже установлена.
	КонецЕсли;
	// Вывод результата.
	РезультатФункции.Вставить("ВерсияРегламента",	 ВерсияРегламентаРабочая);
	РезультатФункции.Вставить("МассивЭтапов",		 МассивЭтапов);
	РезультатФункции.Вставить("Организация",		 ОрганизацияРабочий);
	РезультатФункции.Вставить("Период",				 ПериодРабочий);
	РезультатФункции.Вставить("Сценарий",			 СценарийРабочий);
	РезультатФункции.Вставить("ШаблонДокумента",	 ШаблонРабочий);
	Возврат РезультатФункции;
КонецФункции

// Обработчик подписки на событие УтверждениеЭтапаПроцесса.
// Завершает выполнение этапа процесса, если утверждены все входащие в этап документы.
Процедура ЭскалацияУтвержденияЭтапа(Источник, Отказ) Экспорт
	Попытка
		// Преобразование данных из источника.
		СтруктураДанныхИсточника = ПолучитьСценарийПериодПоИсточнику(Источник);
		СценарийРабочий			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхИсточника, "Сценарий", Справочники.Сценарии.ПустаяСсылка());
		ПериодРабочий			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхИсточника, "Период", Справочники.Периоды.ПустаяСсылка());
		ОрганизацияРабочий		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхИсточника, "Организация", Справочники.Организации.ПустаяСсылка());		
		ШаблонДокументаРабочий	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхИсточника, "ШаблонДокумента", Неопределено);		
		ВерсияРегламентаРабочая	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхИсточника, "ВерсияРегламента", Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка());		
		МассивЭтаповРабочий		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДанныхИсточника, "МассивЭтапов", Новый Массив);		
		// Непоредственная эскалация утверждения.
		ВыполнитьЭскалациюУтвержденияЭтапа(СценарийРабочий, ПериодРабочий, ОрганизацияРабочий, ШаблонДокументаРабочий, ВерсияРегламентаРабочая, МассивЭтаповРабочий);		
	Исключение
		ТекстСообщения = НСтр("ru = 'Возникли ошибки при проверке выполнения этапа для объекта %Источник%: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Источник%", Строка(Источник));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры

Функция ПолучитьПредшественниковПоОрганизации(ТЗПредшественников,ТекущиеДанные, СостоянияВыполненияПроцесса, мПредшественникиСтрок,Период,Сценарий) Экспорт

	ТЗПредшественников =  Неопределено; 	
	ПолучитьПредшественниковПоОрганизацииРекурсивно(ТЗПредшественников,ТекущиеДанные, СостоянияВыполненияПроцесса, мПредшественникиСтрок);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТзЭтапов.Этап
	|ПОМЕСТИТЬ врЭтапы
	|ИЗ
	|	&ТзЭтапов КАК ТзЭтапов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа,
	|	СостоянияВыполненияПроцессовСрезПоследних.ЭтапПроцесса
	|ПОМЕСТИТЬ врСостоянияЭтапов
	|ИЗ
	|	РегистрСведений.СостоянияВыполненияПроцессов.СрезПоследних(
	|			,
	|			ПериодСценария = &Период
	|				И Организация = &Организация
	|				И Сценарий = &Сценарий) КАК СостоянияВыполненияПроцессовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	врЭтапы.Этап,
	|	врСостоянияЭтапов.СостояниеЭтапа
	|ИЗ
	|	врЭтапы КАК врЭтапы
	|		Левое СОЕДИНЕНИЕ врСостоянияЭтапов КАК врСостоянияЭтапов
	|		ПО врЭтапы.Этап = врСостоянияЭтапов.ЭтапПроцесса";
	
	Запрос.УстановитьПараметр("ТзЭтапов",ТЗПредшественников );
	
	Запрос.УстановитьПараметр("Период",Период );
	Запрос.УстановитьПараметр("Сценарий",Сценарий );
	Запрос.УстановитьПараметр("Организация",ТекущиеДанные.Организация);
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции 

Функция ПолучитьПоследователейПоОрганизации(ТЗПредшественников,ТекущиеДанные, СостоянияВыполненияПроцесса, мПоследователиСтрок, Период, Сценарий, РекурсивноВход = Истина) Экспорт
	
	ТЗПредшественников =  Неопределено; 	
	МассивИндексов = Новый Массив;
	ПолучитьПоследователейПоОрганизацииРекурсивно(ТЗПредшественников,ТекущиеДанные, СостоянияВыполненияПроцесса, мПоследователиСтрок, МассивИндексов, РекурсивноВход);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТзЭтапов.Этап КАК Этап
	|ПОМЕСТИТЬ врЭтапы
	|ИЗ
	|	&ТзЭтапов КАК ТзЭтапов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа КАК СостояниеЭтапа,
	|	СостоянияВыполненияПроцессовСрезПоследних.ЭтапПроцесса КАК ЭтапПроцесса
	|ПОМЕСТИТЬ врСостоянияЭтапов
	|ИЗ
	|	РегистрСведений.СостоянияВыполненияПроцессов.СрезПоследних(
	|			,
	|			ПериодСценария = &Период
	|				И Организация = &Организация
	|				И Сценарий = &Сценарий) КАК СостоянияВыполненияПроцессовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	врЭтапы.Этап КАК Этап,
	|	ЕСТЬNULL(врСостоянияЭтапов.СостояниеЭтапа, ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповПроцессов.Запланирован)) КАК СостояниеЭтапа
	|ИЗ
	|	врЭтапы КАК врЭтапы
	|		ЛЕВОЕ СОЕДИНЕНИЕ врСостоянияЭтапов КАК врСостоянияЭтапов
	|		ПО врЭтапы.Этап = врСостоянияЭтапов.ЭтапПроцесса";
	
	Запрос.УстановитьПараметр("ТзЭтапов", ТЗПредшественников);
	
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Сценарий", Сценарий );
	Запрос.УстановитьПараметр("Организация", ТекущиеДанные.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	Возврат Выгрузка;
	
КонецФункции
		
Процедура ПолучитьПредшественниковПоОрганизацииРекурсивно(ТЗПредшественников,ТекущиеДанные, СостоянияВыполненияПроцесса, мПредшественникиСтрок) Экспорт
	
	Если ТЗПредшественников =  Неопределено Тогда
		ТЗПредшественников = Новый ТаблицаЗначений;
		ТЗПредшественников.Колонки.Добавить("Этап",Новый ОписаниеТипов("СправочникСсылка.ЭтапыУниверсальныхПроцессов"));
	КонецЕсли;
	
	НовыйИндекс = УправлениеРабочимиПроцессамиУХ.ПолучитьИндексСтрокиТаблицы(ТекущиеДанные);
	Если мПредшественникиСтрок <> Неопределено Тогда
		Для Каждого Ид_СтрокаПредшественник Из мПредшественникиСтрок[НовыйИндекс] Цикл
			Если ТипЗнч(СостоянияВыполненияПроцесса) = Тип("ТаблицаЗначений") Тогда
				СтрокаПредшественник = СостоянияВыполненияПроцесса.Получить(Ид_СтрокаПредшественник);
			Иначе
				СтрокаПредшественник = СостоянияВыполненияПроцесса.НайтиПоИдентификатору(Ид_СтрокаПредшественник);
			КонецЕсли;
			НС = ТЗПредшественников.Добавить();
			НС.Этап = СтрокаПредшественник.Этап;
			ПолучитьПредшественниковПоОрганизацииРекурсивно(ТЗПредшественников,СтрокаПредшественник, СостоянияВыполненияПроцесса, мПредшественникиСтрок);
		КонецЦикла;
	Иначе
		// Предшественники не заданы.
	КонецЕсли;		
КонецПроцедуры 

Процедура ПолучитьПоследователейПоОрганизацииРекурсивно(ТЗПоследователей,ТекущиеДанные, СостоянияВыполненияПроцесса, мПоследователиСтрок, МассивИндексовВход, РекурсивноВход = Истина) Экспорт
	
	Если ТЗПоследователей =  Неопределено Тогда
		ТЗПоследователей = Новый ТаблицаЗначений;
		ТЗПоследователей.Колонки.Добавить("Этап",Новый ОписаниеТипов("СправочникСсылка.ЭтапыУниверсальныхПроцессов"));
	КонецЕсли;
	
	Попытка
		НовыйИндекс = УправлениеРабочимиПроцессамиУХ.ПолучитьИндексСтрокиТаблицы(ТекущиеДанные);
		Если МассивИндексовВход.Найти(НовыйИндекс) = Неопределено Тогда
			Если мПоследователиСтрок <> Неопределено Тогда
				Для Каждого Ид_СтрокаПредшественник Из мПоследователиСтрок[НовыйИндекс] Цикл
					Если ТипЗнч(СостоянияВыполненияПроцесса) = Тип("ТаблицаЗначений") Тогда
						СтрокаПоследователь = СостоянияВыполненияПроцесса.Получить(Ид_СтрокаПредшественник);
					Иначе
						СтрокаПоследователь = СостоянияВыполненияПроцесса.НайтиПоИдентификатору(Ид_СтрокаПредшественник);
					КонецЕсли;
					НС = ТЗПоследователей.Добавить();
					НС.Этап = СтрокаПоследователь.Этап;
					Если РекурсивноВход Тогда
						ПолучитьПоследователейПоОрганизацииРекурсивно(ТЗПоследователей,СтрокаПоследователь, СостоянияВыполненияПроцесса, мПоследователиСтрок, МассивИндексовВход, РекурсивноВход);
					Иначе
						// Не требуется получить последователей рекурсивно. Возвращаем только прямых последователей.
					КонецЕсли;
				КонецЦикла;
			Иначе
				// Последователи не заданы.
			КонецЕсли;		
		Иначе
			// Уже рассмотрен.
		КонецЕсли;
	Исключение
		ТекстСообщения = НСтр("ru = 'При получении последователей для этапов возникли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры 

Процедура ПолучитьОргЕдиницыТекущейВерсииПоЭтапу(Этап,ТаблицаОрганизаций=Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(ВложенныйЗапрос1.ОрганизационнаяЕдиницаРодитель) > 0
	|			ТОГДА ""K""
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВложенныйЗапрос.ОрганизационнаяЕдиница.ЭлиминирующаяОрганизация
	|					ТОГДА ""Э""
	|				ИНАЧЕ ""О""
	|			КОНЕЦ
	|	КОНЕЦ КАК ТипОрганизационнойЕдиницы,
	|	ВложенныйЗапрос.ВидОрганизационнойЕдиницы КАК ВидОрганизационнойЕдиницы
	|ПОМЕСТИТЬ ТабОрганизацийЭтапа
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница,
	|		ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.ОрганизационнаяЕдиницаРодитель КАК ОрганизационнаяЕдиницаРодитель,
	|		ЕСТЬNULL(ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ВидОрганизационнойЕдиницы, ЗНАЧЕНИЕ(Справочник.ВидыОрганизационныхЕдиниц.ПустаяСсылка)) КАК ВидОрганизационнойЕдиницы
	|	ИЗ
	|		Справочник.ВерсииРегламентовПодготовкиОтчетности.СтруктураГруппы КАК ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииРегламентовПодготовкиОтчетности.ОрганизационныеЕдиницы КАК ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы
	|			ПО ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.Ссылка = ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.Ссылка
	|				И ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.ОрганизационнаяЕдиница = ВерсииРегламентовПодготовкиОтчетностиОрганизационныеЕдиницы.ОрганизационнаяЕдиница
	|	ГДЕ
	|		ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.Ссылка = &ВерсияРегламента) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница,
	|			ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.ОрганизационнаяЕдиницаРодитель КАК ОрганизационнаяЕдиницаРодитель
	|		ИЗ
	|			Справочник.ВерсииРегламентовПодготовкиОтчетности.СтруктураГруппы КАК ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы
	|		ГДЕ
	|			ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.Ссылка = &ВерсияРегламента) КАК ВложенныйЗапрос1
	|		ПО ВложенныйЗапрос.ОрганизационнаяЕдиница = ВложенныйЗапрос1.ОрганизационнаяЕдиницаРодитель
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.ОрганизационнаяЕдиница,
	|	ВложенныйЗапрос.ВидОрганизационнойЕдиницы,
	|	ВложенныйЗапрос.ОрганизационнаяЕдиница.ЭлиминирующаяОрганизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница,
	|	ВложенныйЗапрос.ТипОрганизационнойЕдиницы КАК ТипОрганизационнойЕдиницы,
	|	ВложенныйЗапрос.ВидОрганизационнойЕдиницы КАК ВидОрганизационнойЕдиницы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТабОрганизацийЭтапа.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница,
	|		ТабОрганизацийЭтапа.ТипОрганизационнойЕдиницы КАК ТипОрганизационнойЕдиницы,
	|		ТабОрганизацийЭтапа.ВидОрганизационнойЕдиницы КАК ВидОрганизационнойЕдиницы
	|	ИЗ
	|		ТабОрганизацийЭтапа КАК ТабОрганизацийЭтапа
	|	ГДЕ
	|		ТабОрганизацийЭтапа.ТипОрганизационнойЕдиницы В(&ТипОрг)) КАК ВложенныйЗапрос
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТабОрганизацийЭтапа";
	
	СписокТиповОрганизаций = Новый СписокЗначений;
	Если Этап.ТипОрганизацийЭтапа = Перечисления.ТипыОрганизационныхЕдиниц.Обычная Тогда
		 СписокТиповОрганизаций.Добавить("О");
	ИначеЕсли Этап.ТипОрганизацийЭтапа = Перечисления.ТипыОрганизационныхЕдиниц.Консолидирующая Тогда
		  СписокТиповОрганизаций.Добавить("K");
	ИначеЕсли Этап.ТипОрганизацийЭтапа = Перечисления.ТипыОрганизационныхЕдиниц.Элиминирующая Тогда	
		   СписокТиповОрганизаций.Добавить("Э");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ВерсияРегламента",Этап.Владелец.СвязанныйРегламент);
	Запрос.УстановитьПараметр("ТипОрг",СписокТиповОрганизаций);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	СхемаКомпоновкиДанных=Справочники.ЭтапыУниверсальныхПроцессов.ПолучитьМакет("ОтборОрганизационныхЕдиниц");	
	
	Если  СтрДлина(Этап.ОрганизационныеЕдиницыОтбор_)>10 Тогда
		СохраненныеОтборы = ЗначениеИЗСтрокиВнутр(Этап.ОрганизационныеЕдиницыОтбор_);
	Иначе
		СохраненныеОтборы = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КонецЕсли;	
	
	мНаборДанных=СхемаКомпоновкиДанных.НаборыДанных[0];
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	
	СохраненныеОтборы.Структура.Очистить();
	Группировка_ = СохраненныеОтборы.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	Группировка_.Использование = ИСТИНА;
	
	ПолеКонтрагент = Группировка_.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеКонтрагент.Использование = ИСТИНА;
	ПолеКонтрагент.Поле = Новый ПолеКомпоновкиДанных("ОрганизационнаяЕдиница");
	
	ПолеВидОрганизации = Группировка_.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеВидОрганизации.Использование = ИСТИНА;
	ПолеВидОрганизации.Поле = Новый ПолеКомпоновкиДанных("ВидОрганизационнойЕдиницы");

	ОрганизационныеЕдиницыОтборСКД = Новый КомпоновщикНастроекКомпоновкиДанных;
	ОрганизационныеЕдиницыОтборСКД.ЗагрузитьНастройки(СохраненныеОтборы);
	ОрганизационныеЕдиницыОтборСКД.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));

	ВнешниеНаборыДанных=Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТЗДанные",Результат);
	
	КомпоновщикМакета=Новый КомпоновщикМакетаКомпоновкиДанных;

	МакетКомпоновки=КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,ОрганизационныеЕдиницыОтборСКД.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновкиДанных=Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных,);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	Если ТаблицаОрганизаций = Неопределено Тогда
		ТаблицаЗначений = Новый ТаблицаЗначений;
	КонецЕсли;
	
	ПроцессорВывода.УстановитьОбъект(ТаблицаОрганизаций);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных); 
  	  	
КонецПроцедуры

Процедура ПолучитьОргЕдиницыТекущейВерсииПоРегламенту(ВерсияРегламента,ОбновитьРегистр=Ложь) Экспорт
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШаблоныУниверсальныхПроцессов.Ссылка
	|ИЗ
	|	Справочник.ШаблоныУниверсальныхПроцессов КАК ШаблоныУниверсальныхПроцессов
	|ГДЕ
	|	ШаблоныУниверсальныхПроцессов.НазначениеПроцесса = &НазначениеПроцесса
	|	И ШаблоныУниверсальныхПроцессов.СвязанныйРегламент = &СвязанныйРегламент";
	
	Запрос.УстановитьПараметр("НазначениеПроцесса", Перечисления.НазначенияУниверсальныхПроцессов.ПроцессПодготовкиОтчетности);
	Запрос.УстановитьПараметр("СвязанныйРегламент", ВерсияРегламента);
	
	СвязанныйПроцесс = Запрос.Выполнить().Выгрузить();
	Если СвязанныйПроцесс.Количество()>0 Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапыУниверсальныхПроцессов.Ссылка КАК Этап,
		|	ЭтапыУниверсальныхПроцессов.Владелец,
		|	ЭтапыУниверсальныхПроцессов.Владелец.СвязанныйРегламент КАК СвязанныйРегламент 
		|ИЗ
		|	Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапыУниверсальныхПроцессов
		|ГДЕ
		|	ЭтапыУниверсальныхПроцессов.Владелец = &Владелец
		|	И ЭтапыУниверсальныхПроцессов.ТипЭтапа = &ТипЭтапа";
		
		Запрос.УстановитьПараметр("Владелец", СвязанныйПроцесс[0].Ссылка);
		Запрос.УстановитьПараметр("ТипЭтапа", Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности);
		
	КонецЕсли;	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТаблицаОрганизаций = Новый ТаблицаЗначений;
		ПолучитьОргЕдиницыТекущейВерсииПоЭтапу(Выборка.Этап,ТаблицаОрганизаций);
		Если  ОбновитьРегистр Тогда
			Справочники.ЭтапыУниверсальныхПроцессов.ОбновитьРегистрЭтапыОрганизаций(Выборка.СвязанныйРегламент,Выборка.Этап,ТаблицаОрганизаций);
		КонецЕсли;	
		
	КонецЦикла;	

	
	
	
	
КонецПроцедуры

Процедура ОбновитьОрганизацииЭтаповПоРегламенту(ВерсияРегламента,Этап=Неопределено) Экспорт

	Если Этап = Неопределено Тогда
		ПолучитьОргЕдиницыТекущейВерсииПоРегламенту(ВерсияРегламента,Истина)
	Иначе	
		ТаблицаОрганизаций = Новый ТаблицаЗначений;
		ПолучитьОргЕдиницыТекущейВерсииПоЭтапу(Этап,ТаблицаОрганизаций);
		Справочники.ЭтапыУниверсальныхПроцессов.ОбновитьРегистрЭтапыОрганизаций(Этап.Владелец.СвязанныйРегламент,Этап,ТаблицаОрганизаций);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбновитьСтатусЭкзепляраПроцесса(Сценарий, Период, ЭкземплярПроцесса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(СостоянияВыполненияПроцессовСрезПоследних.Организация) КАК ВсегоОрганизаций
	|ИЗ
	|	РегистрСведений.СостоянияВыполненияПроцессов.СрезПоследних(, ЭтапПроцесса.Владелец = &Шаблон) КАК СостоянияВыполненияПроцессовСрезПоследних
	|ГДЕ
	|	СостоянияВыполненияПроцессовСрезПоследних.ПериодСценария = &ПериодСценария
	|	И СостоянияВыполненияПроцессовСрезПоследних.Сценарий = &Сценарий
	|	И СостоянияВыполненияПроцессовСрезПоследних.ЭтапПроцесса.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(СостоянияВыполненияПроцессовСрезПоследних.Организация) КАК ВсегоОрганизацийУтв
	|ИЗ
	|	РегистрСведений.СостоянияВыполненияПроцессов.СрезПоследних(, ЭтапПроцесса.Владелец = &Шаблон) КАК СостоянияВыполненияПроцессовСрезПоследних
	|ГДЕ
	|	СостоянияВыполненияПроцессовСрезПоследних.ПериодСценария = &ПериодСценария
	|	И СостоянияВыполненияПроцессовСрезПоследних.Сценарий = &Сценарий
	|	И СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа = &СостояниеЭтапаУтвержден
	|	И СостоянияВыполненияПроцессовСрезПоследних.ЭтапПроцесса.ПометкаУдаления = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("ПериодСценария", Период);
	Запрос.УстановитьПараметр("СостояниеЭтапаУтвержден", Перечисления.СостоянияЭтаповПроцессов.Утвержден);
	Запрос.УстановитьПараметр("Шаблон", ЭкземплярПроцесса.ШаблонПроцесса);
	
	Результат = Запрос.ВыполнитьПакет();
	
	КоличествоВсего = Результат[0].Выгрузить()[0].ВсегоОрганизаций;
	КоличествоУтв	 = Результат[1].Выгрузить()[0].ВсегоОрганизацийУтв;
	
	Если КоличествоВсего = КоличествоУтв Тогда
		оЭкземплярПроцесса = ЭкземплярПроцесса.ПолучитьОбъект();
		оЭкземплярПроцесса.СостояниеВыполнения = Перечисления.СостоянияПроцесса.Завершен;	 
	Иначе	 
		оЭкземплярПроцесса = ЭкземплярПроцесса.ПолучитьОбъект();
		оЭкземплярПроцесса.СостояниеВыполнения = Перечисления.СостоянияПроцесса.Вработе;
	КонецЕсли;	 
	оЭкземплярПроцесса.Записать();
	
КонецПроцедуры	

// Проверяет, есть ли в текущем процессе подготовки отчетности этапы-последователи
// по организации ОрганизацииВход в состоянии отличном от неактивного.
Функция ЕстьЭтапыПоследователиДляСнятия(ОрганизацииВход, ЭтапВход, СостоянияВыполненияПроцесса, мПоследователиСтрок, ПериодВход, СценарийВход) Экспорт
	// Инициализация.
	РезультатФункции = Ложь;
	// Получим рассматриваемые организации.
	МассивОрганизаций = Новый Массив;
	Если ЭтоАдресВременногоХранилища(ОрганизацииВход) Тогда
		ТаблицаОрганизаций = ПолучитьИзВременногоХранилища(ОрганизацииВход);
		МассивОрганизаций = ТаблицаОрганизаций.ВыгрузитьКолонку("Организация");
	Иначе
		МассивОрганизаций = Новый Массив;
	КонецЕсли;
	Если МассивОрганизаций.Количество() = 0 Тогда
		// Массив пустой. Проверим по всем организациям.
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Этап", ЭтапВход);
		ТекущиеДанные = СостоянияВыполненияПроцесса.НайтиСтроки(СтруктураПоиска);
		Если ТекущиеДанные.Количество() > 0 Тогда
			ТЗПоследователей = Неопределено;
			Последователи = ПолучитьПоследователейПоОрганизации(ТЗПоследователей, ТекущиеДанные[0], СостоянияВыполненияПроцесса, мПоследователиСтрок, ПериодВход, СценарийВход);
			ИзменяемыеЭтапы = ВыделитьИзменяемыеЭтапыВТаблицеПоследователей(СостоянияВыполненияПроцесса, Последователи);			
			РезультатФункции = (ИзменяемыеЭтапы.Количество() > 0);		
		Иначе
			РезультатФункции = Ложь;
		КонецЕсли;
	Иначе
		// Есть отбор по организациям.
		Для Каждого ТекМассивОрганизаций Из МассивОрганизаций Цикл
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Этап", ЭтапВход);
			СтруктураПоиска.Вставить("Организация", ТекМассивОрганизаций);
			ТекущиеДанные = СостоянияВыполненияПроцесса.НайтиСтроки(СтруктураПоиска);
			Если ТекущиеДанные.Количество() > 0 Тогда
				ТЗПоследователей = Неопределено;
				Последователи = ПолучитьПоследователейПоОрганизации(ТЗПоследователей, ТекущиеДанные[0], СостоянияВыполненияПроцесса, мПоследователиСтрок, ПериодВход, СценарийВход);
				ИзменяемыеЭтапы = ВыделитьИзменяемыеЭтапыВТаблицеПоследователей(СостоянияВыполненияПроцесса, Последователи, ТекМассивОрганизаций);
				Если ИзменяемыеЭтапы.Количество() > 0 Тогда
					РезультатФункции = Истина;
					Прервать;
				Иначе
					// Продолжаем поиск.
				КонецЕсли;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПроверитьУтверждениеЭтаповПоследователей()

#КонецОбласти



////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ЭКСПОРТНЫЕ ПРОЦЕДУРЫ.
//
Функция ПолучитьТаблицуЭтапов(ШаблонПроцесса, Уровни,ТабличноеПоле_ЛинейнаяСвязь,ТабличноеПолеНачальныхНастроек) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1 КАК Счетчик,
	|	ЭтапыУниверсальныхПроцессов.Ссылка КАК Этап,
	|	ЭтапыУниверсальныхПроцессов.ЭтапыПредшественники.(
	|		Этап КАК ЭтапПроцесса
	|	) КАК ЭтапыПредшественники,
	|	ЭтапыУниверсальныхПроцессов.Утверждающие.(
	|		Ссылка,
	|		НомерСтроки,
	|		Пользователь,
	|		Организация
	|	),
	|	ЭтапыУниверсальныхПроцессов.Код,
	|	ЭтапыУниверсальныхПроцессов.Наименование,
	|	ЭтапыУниверсальныхПроцессов.Родитель,
	|	ЭтапыУниверсальныхПроцессов.УсловияСогласования КАК УсловияСогласованияХЗ,
	|	ЭтапыУниверсальныхПроцессов.УровеньОрганизации,
	|	ЭтапыУниверсальныхПроцессов.ТипЭтапа,
	|	ЭтапыУниверсальныхПроцессов.ПометкаУдаления,
	|	ЭтапыУниверсальныхПроцессов.ДлительностьСогласования,
	|	ЭтапыУниверсальныхПроцессов.ДлительностьПлановая,
	|   NULL КАК СостояниеЭтапа
	|ИЗ
	|	Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапыУниверсальныхПроцессов
	|ГДЕ
	|	ЭтапыУниверсальныхПроцессов.Владелец = &ШаблонПроцесса
	|	И ЭтапыУниверсальныхПроцессов.ЭтоГруппа = ЛОЖЬ
	|	И ЭтапыУниверсальныхПроцессов.ПометкаУдаления = ЛОЖЬ
	|	И ЭтапыУниверсальныхПроцессов.ДинамическийЭтап = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ШаблонПроцесса", ШаблонПроцесса);
	Этапы = Запрос.Выполнить().Выгрузить();
	Этапы.Колонки.Добавить("УровеньХ");
	Этапы.Колонки.Добавить("КоличествоПредшественников");
	Этапы.Колонки.Добавить("КоличествоПоследователей");
	Этапы.Колонки.Добавить("УсловияСогласования", Новый ОписаниеТипов("ДеревоЗначений"));
	Этапы.Колонки.Добавить("ТаблицаПоследователей", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Для каждого СтрокаЭтапа Из Этапы Цикл
		СтрокаЭтапа.КоличествоПредшественников = СтрокаЭтапа.ЭтапыПредшественники.Количество();
	КонецЦикла;
		
	Если Этапы.Количество() > 0 тогда
		ПервыеЭтапы = Этапы.НайтиСтроки(Новый Структура("КоличествоПредшественников", 0));
		
		Если ПервыеЭтапы.Количество() > 0 тогда
						
			Для Каждого ПервыйЭтап Из ПервыеЭтапы Цикл				
				МаксУровень = -1;				
				РассчитатьУровеньХРекурсивноДляПоследователей(ПервыйЭтап, Этапы, МаксУровень, ТабличноеПолеНачальныхНастроек);
			КонецЦикла;
		Иначе			
			МаксУровень = -1;				
			РассчитатьУровеньХРекурсивноДляПоследователей(Этапы[0], Этапы, МаксУровень, ТабличноеПолеНачальныхНастроек);
		КонецЕсли;
	КонецЕсли;
		
	Для каждого СтрокаЭтапа Из Этапы Цикл
		Если СтрокаЭтапа.УровеньХ = Неопределено тогда
			МаксУровень = -1;
			РассчитатьУровеньХРекурсивноДляПоследователей(СтрокаЭтапа, Этапы, МаксУровень, ТабличноеПолеНачальныхНастроек);
		КонецЕсли;	
	КонецЦикла;
	
	Этапы.Колонки.Удалить("УсловияСогласованияХЗ");
	Этапы.Сортировать("УровеньХ, КоличествоПредшественников, Родитель");
	
	Для каждого СтрокаЭтапа Из Этапы Цикл		
		СтрокаЭтапа.КоличествоПоследователей = СтрокаЭтапа.ТаблицаПоследователей.Количество();
	КонецЦикла;
	
	Этапы.Колонки.Добавить("УровеньУ");
	
	Уровни = Новый Структура("Х, У, ВысотаЭтапов, ТекстыЭтапов", Новый Соответствие, Новый Соответствие, Новый Соответствие, Новый Соответствие);
	УровеньХ = 0;
		
	СтрокиУровня = Новый Массив;
	СтрокиУровняДоОбработки = Этапы.НайтиСтроки(Новый Структура("УровеньХ", УровеньХ));
	
	Для Каждого СтрокаУровня Из СтрокиУровняДоОбработки Цикл
		Если СтрокаУровня.КоличествоПоследователей = 0 тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиУровня.Добавить(СтрокаУровня);
	КонецЦикла;
	
	СтрокиУровняДоОбработки = Этапы.НайтиСтроки(Новый Структура("УровеньХ, КоличествоПоследователей", УровеньХ, 0));
	Для Каждого СтрокаУровня Из СтрокиУровняДоОбработки Цикл	
		СтрокиУровня.Добавить(СтрокаУровня);
	КонецЦикла;
	
	Пока СтрокиУровня.Количество() Цикл
		СтруктураХ = Новый Структура("ОтступХ, ГоризонтальнаяКоррекция, ШиринаЭтапа, ЗанятыеУровниПоУ", 0, 0, 0, Новый Соответствие);
		Уровни.Х.Вставить(УровеньХ, СтруктураХ);
		УровеньУ = -1;
		Для каждого СтрокаЭтапа Из СтрокиУровня Цикл
			
			СтрокаЭтапа.ЭтапыПредшественники.Колонки.Добавить("ОтступХ", Новый ОписаниеТипов("Число"));
			СтрокаЭтапа.ЭтапыПредшественники.Колонки.Добавить("ОтступУ", Новый ОписаниеТипов("Число"));
			Если СтрокаЭтапа.ЭтапыПредшественники.Количество() = 0 Тогда
				УровеньУ = УровеньУ + 1;
			Иначе
				
				Если СтрокаЭтапа.УровеньХ = 0 Тогда
					УровеньУ = УровеньУ + 1;
				КонецЕсли;
				
				Если СтрокаЭтапа.ЭтапыПредшественники.Количество() = 1 Тогда
					Если ЗначениеЗаполнено(СтрокаЭтапа.ЭтапыПредшественники[0].СтрокаЭтапаПредшественника) Тогда
						Предпочтение =СтрокаЭтапа.ЭтапыПредшественники[0].СтрокаЭтапаПредшественника.УровеньУ;
					Иначе
						Предпочтение = Неопределено
					КонецЕсли;
				Иначе
					Предпочтение = Неопределено;
				КонецЕсли;
				
				УровеньУ = ОпределитьНовуюПозициюВУровнеY(СтрокаЭтапа, СтруктураХ.ЗанятыеУровниПоУ, Предпочтение);
				
				Для каждого СтрокаПредшественника Из СтрокаЭтапа.ЭтапыПредшественники Цикл
					
					СтруктураХ.ОтступХ = СтруктураХ.ОтступХ + 1;
										
					Если ЗначениеЗаполнено(СтрокаПредшественника.СтрокаЭтапаПредшественника) И Не СтрокаЭтапа.УровеньХ = СтрокаПредшественника.СтрокаЭтапаПредшественника.УровеньХ + 1 Тогда						
						СтруктураУ = Уровни.У[?(СтрокаПредшественника.СтрокаЭтапаПредшественника.УровеньУ = Неопределено, УровеньУ, СтрокаПредшественника.СтрокаЭтапаПредшественника.УровеньУ)];
												
						Если СтруктураУ <> Неопределено тогда
							СтруктураУ.ОтступУ = СтруктураУ.ОтступУ + 1;
							СтрокаПредшественника.ОтступУ = СтруктураУ.ОтступУ;
						Иначе
							СтруктураУ = Новый Структура("ОтступУ, ВертикальнаяКоррекция", 1, 0);
							СтрокаПредшественника.ОтступУ = СтруктураУ.ОтступУ;							
							Уровни.У.Вставить(УровеньУ, СтруктураУ);
						КонецЕсли;
						
						Если Предпочтение <> Неопределено И Предпочтение < УровеньУ тогда
							СтруктураУ.Вставить("ОтступУ", СтруктураУ.ОтступУ + Уровни.У[Предпочтение].ОтступУ);							
						КонецЕсли;						
					КонецЕсли;
					
					СтрокаПредшественника.ОтступХ = СтруктураХ.ОтступХ;
					
				КонецЦикла;	
			КонецЕсли;
			
			СтруктураУ = Уровни.У[УровеньУ];
			Если СтруктураУ = Неопределено Тогда
				СтруктураУ = Новый Структура("ОтступУ, ВертикальнаяКоррекция", 0, 0);
				Уровни.У.Вставить(УровеньУ, СтруктураУ);
			КонецЕсли;
			
			Если Предпочтение <> Неопределено И Предпочтение < УровеньУ тогда
				СтруктураУ.Вставить("ОтступУ", СтруктураУ.ОтступУ + Уровни.У[Предпочтение].ОтступУ);							
			КонецЕсли;
			
			СтрокаЭтапа.УровеньУ = УровеньУ;
			
		КонецЦикла;
		
		УровеньХ = УровеньХ + 1;
		СтрокиУровня = Этапы.НайтиСтроки(Новый Структура("УровеньХ", УровеньХ));
	КонецЦикла;
	
	Если ШаблонПроцесса.НазначениеПроцесса = Перечисления.НазначенияУниверсальныхПроцессов.ПроцессПодготовкиОтчетности Тогда
		Этапы.Колонки.Добавить("ДатаОкончанияПлан", Новый ОписаниеТипов("Дата"));
		Этапы.Колонки.Добавить("НакопленноеОтклонение");
		Этапы.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
		Этапы.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));          
		Этапы.Колонки.Добавить("Длительность");
		Этапы.Колонки.Добавить("МаксимальноеОтклонение");
		Этапы.Колонки.Добавить("КоличествоОрганизаций");
		Этапы.Колонки.Добавить("ЭтапВыполняется");
		Этапы.Колонки.Добавить("ЭтапУтвержден");	
	КонецЕсли;

	
	Возврат Этапы;
	
КонецФункции

Функция ПолучитьТаблицуЭтаповЭкземпляраПроцесса(ЭкземплярПроцесса, Уровни,ТабличноеПоле_ЛинейнаяСвязь,ТабличноеПолеНачальныхНастроек,ПланируемаяДатаЗавершения,НакопленноеОтклонение) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВизаДополнительныхСогласующих.ЭкземплярПроцесса,
	|	ВизаДополнительныхСогласующих.ЭтапПроцесса,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВизаДополнительныхСогласующих.Согласующий) КАК КоличествоСогласующих,
	|	СУММА(ВЫБОР
	|			КОГДА ВизаДополнительныхСогласующих.АрхивнаяЗапись
	|				ТОГДА 0
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК КоличествоНаСогласовании
	|ПОМЕСТИТЬ ВТ_КоличествоСогласующих
	|ИЗ
	|	РегистрСведений.ВизаДополнительныхСогласующих КАК ВизаДополнительныхСогласующих
	|ГДЕ
	|	ВизаДополнительныхСогласующих.ЭкземплярПроцесса = &ДокументПроцесса
	|
	|СГРУППИРОВАТЬ ПО
	|	ВизаДополнительныхСогласующих.ЭкземплярПроцесса,
	|	ВизаДополнительныхСогласующих.ЭтапПроцесса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	1 КАК Счетчик,
	|	ЭтапыУниверсальныхПроцессов.Ссылка КАК Этап,
	|	ЭтапыУниверсальныхПроцессов.ЭтапыПредшественники.(
	|		Этап КАК ЭтапПроцесса
	|	) КАК ЭтапыПредшественники,
	|	ЭтапыУниверсальныхПроцессов.Утверждающие.(
	|		Ссылка,
	|		НомерСтроки,
	|		Пользователь,
	|		Организация
	|	),
	|	ЭтапыУниверсальныхПроцессов.Код,
	|	ЭтапыУниверсальныхПроцессов.Наименование,
	|	ЭтапыУниверсальныхПроцессов.Родитель,
	|	ЭтапыУниверсальныхПроцессов.УсловияСогласования КАК УсловияСогласованияХЗ,
	|	ЭтапыУниверсальныхПроцессов.УровеньОрганизации,
	|	ЭтапыУниверсальныхПроцессов.ТипЭтапа,
	|	ЭтапыУниверсальныхПроцессов.ПометкаУдаления,
	|	ЭтапыУниверсальныхПроцессов.ДлительностьСогласования,
	|	ЭтапыУниверсальныхПроцессов.ДлительностьПлановая,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ВТ_КоличествоСогласующих.КоличествоНаСогласовании, 0) = 0
	|			ТОГДА ВыполнениеПроцессовСрезПоследних.СостояниеЭтапа
	|		ИНАЧЕ &СостояниеВОбработке
	|	КОНЕЦ КАК СостояниеЭтапа,
	|	ВыполнениеПроцессовСрезПоследних.Автор КАК Автор,
	|	ЕСТЬNULL(ВТ_КоличествоСогласующих.КоличествоСогласующих, 0) КАК КоличествоДопСогласующих,
	|	ЕСТЬNULL(ВТ_КоличествоСогласующих.КоличествоНаСогласовании, 0) КАК КоличествоНаДопСогласовании
	|ИЗ
	|	Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапыУниверсальныхПроцессов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыполнениеПроцессов.СрезПоследних(&ТекущаяДата, ДокументПроцесса = &ДокументПроцесса) КАК ВыполнениеПроцессовСрезПоследних
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_КоличествоСогласующих КАК ВТ_КоличествоСогласующих
	|			ПО (ВТ_КоличествоСогласующих.ЭкземплярПроцесса = ВыполнениеПроцессовСрезПоследних.ДокументПроцесса)
	|				И (ВТ_КоличествоСогласующих.ЭтапПроцесса = ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса)
	|		ПО ЭтапыУниверсальныхПроцессов.Ссылка = ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса
	|ГДЕ
	|	ЭтапыУниверсальныхПроцессов.Владелец = &ШаблонПроцесса
	|	И ЭтапыУниверсальныхПроцессов.ЭтоГруппа = ЛОЖЬ
	|	И ЭтапыУниверсальныхПроцессов.ПометкаУдаления = ЛОЖЬ
	|	И ЭтапыУниверсальныхПроцессов.ДинамическийЭтап = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("ШаблонПроцесса", ЭкземплярПроцесса.ШаблонПроцесса);
	Запрос.УстановитьПараметр("ДокументПроцесса", ЭкземплярПроцесса);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Запрос.УстановитьПараметр("СостояниеВОбработке", Перечисления.СостоянияЭтаповУниверсальныхПроцессов.ВОбработке);
	
	Этапы = Запрос.Выполнить().Выгрузить();
	Этапы.Колонки.Добавить("УровеньХ");
	Этапы.Колонки.Добавить("КоличествоПредшественников");
	Этапы.Колонки.Добавить("КоличествоПоследователей");
	Этапы.Колонки.Добавить("УсловияСогласования", Новый ОписаниеТипов("ДеревоЗначений"));
	Этапы.Колонки.Добавить("ТаблицаПоследователей", Новый ОписаниеТипов("ТаблицаЗначений"));
	
	Для каждого СтрокаЭтапа Из Этапы Цикл
		СтрокаЭтапа.КоличествоПредшественников = СтрокаЭтапа.ЭтапыПредшественники.Количество();
	КонецЦикла;
		
	Если Этапы.Количество() > 0 тогда
		ПервыеЭтапы = Этапы.НайтиСтроки(Новый Структура("КоличествоПредшественников", 0));
		
		Если ПервыеЭтапы.Количество() > 0 тогда
						
			Для Каждого ПервыйЭтап Из ПервыеЭтапы Цикл				
				МаксУровень = -1;				
				РассчитатьУровеньХРекурсивноДляПоследователей(ПервыйЭтап, Этапы, МаксУровень, ТабличноеПолеНачальныхНастроек);
			КонецЦикла;
		Иначе			
			МаксУровень = -1;				
			РассчитатьУровеньХРекурсивноДляПоследователей(Этапы[0], Этапы, МаксУровень, ТабличноеПолеНачальныхНастроек);
		КонецЕсли;
	КонецЕсли;
		
	Для каждого СтрокаЭтапа Из Этапы Цикл
		Если СтрокаЭтапа.УровеньХ = Неопределено тогда
			МаксУровень = -1;
			РассчитатьУровеньХРекурсивноДляПоследователей(СтрокаЭтапа, Этапы, МаксУровень, ТабличноеПолеНачальныхНастроек);
		КонецЕсли;	
	КонецЦикла;
	
	Этапы.Колонки.Удалить("УсловияСогласованияХЗ");
	Этапы.Сортировать("УровеньХ, КоличествоПредшественников, Родитель");
	
	Для каждого СтрокаЭтапа Из Этапы Цикл		
		СтрокаЭтапа.КоличествоПоследователей = СтрокаЭтапа.ТаблицаПоследователей.Количество();
	КонецЦикла;
	
	Этапы.Колонки.Добавить("УровеньУ");
	
	Уровни = Новый Структура("Х, У, ВысотаЭтапов, ТекстыЭтапов", Новый Соответствие, Новый Соответствие, Новый Соответствие, Новый Соответствие);
	УровеньХ = 0;
		
	СтрокиУровня = Новый Массив;
	СтрокиУровняДоОбработки = Этапы.НайтиСтроки(Новый Структура("УровеньХ", УровеньХ));
	
	Для Каждого СтрокаУровня Из СтрокиУровняДоОбработки Цикл
		Если СтрокаУровня.КоличествоПоследователей = 0 тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиУровня.Добавить(СтрокаУровня);
	КонецЦикла;
	
	СтрокиУровняДоОбработки = Этапы.НайтиСтроки(Новый Структура("УровеньХ, КоличествоПоследователей", УровеньХ, 0));
	Для Каждого СтрокаУровня Из СтрокиУровняДоОбработки Цикл	
		СтрокиУровня.Добавить(СтрокаУровня);
	КонецЦикла;
	
	Пока СтрокиУровня.Количество() Цикл
		СтруктураХ = Новый Структура("ОтступХ, ГоризонтальнаяКоррекция, ШиринаЭтапа, ЗанятыеУровниПоУ", 0, 0, 0, Новый Соответствие);
		Уровни.Х.Вставить(УровеньХ, СтруктураХ);
		УровеньУ = -1;
		Для каждого СтрокаЭтапа Из СтрокиУровня Цикл
			
			СтрокаЭтапа.ЭтапыПредшественники.Колонки.Добавить("ОтступХ", Новый ОписаниеТипов("Число"));
			СтрокаЭтапа.ЭтапыПредшественники.Колонки.Добавить("ОтступУ", Новый ОписаниеТипов("Число"));
			Если СтрокаЭтапа.ЭтапыПредшественники.Количество() = 0 Тогда
				УровеньУ = УровеньУ + 1;
			Иначе
				
				Если СтрокаЭтапа.УровеньХ = 0 Тогда
					УровеньУ = УровеньУ + 1;
				КонецЕсли;
				
				Если СтрокаЭтапа.ЭтапыПредшественники.Количество() = 1 Тогда
					Предпочтение =СтрокаЭтапа.ЭтапыПредшественники[0].СтрокаЭтапаПредшественника.УровеньУ;
				Иначе
					Предпочтение = Неопределено;
				КонецЕсли;
				
				УровеньУ = ОпределитьНовуюПозициюВУровнеY(СтрокаЭтапа, СтруктураХ.ЗанятыеУровниПоУ, Предпочтение);
				
				Для каждого СтрокаПредшественника Из СтрокаЭтапа.ЭтапыПредшественники Цикл
					
					СтруктураХ.ОтступХ = СтруктураХ.ОтступХ + 1;
										
					Если ЗначениеЗаполнено(СтрокаПредшественника.СтрокаЭтапаПредшественника) И Не СтрокаЭтапа.УровеньХ = СтрокаПредшественника.СтрокаЭтапаПредшественника.УровеньХ + 1 Тогда						
						СтруктураУ = Уровни.У[?(СтрокаПредшественника.СтрокаЭтапаПредшественника.УровеньУ = Неопределено, УровеньУ, СтрокаПредшественника.СтрокаЭтапаПредшественника.УровеньУ)];
												
						Если СтруктураУ <> Неопределено тогда
							СтруктураУ.ОтступУ = СтруктураУ.ОтступУ + 1;
							СтрокаПредшественника.ОтступУ = СтруктураУ.ОтступУ;
						Иначе
							СтруктураУ = Новый Структура("ОтступУ, ВертикальнаяКоррекция", 1, 0);
							СтрокаПредшественника.ОтступУ = СтруктураУ.ОтступУ;							
							Уровни.У.Вставить(УровеньУ, СтруктураУ);
						КонецЕсли;
						
						Если Предпочтение <> Неопределено И Предпочтение < УровеньУ тогда
							СтруктураУ.Вставить("ОтступУ", СтруктураУ.ОтступУ + Уровни.У[Предпочтение].ОтступУ);							
						КонецЕсли;						
					КонецЕсли;
					
					СтрокаПредшественника.ОтступХ = СтруктураХ.ОтступХ;
					
				КонецЦикла;
				
			КонецЕсли;
			
			СтруктураУ = Уровни.У[УровеньУ];
			Если СтруктураУ = Неопределено Тогда
				СтруктураУ = Новый Структура("ОтступУ, ВертикальнаяКоррекция", 0, 0);
				Уровни.У.Вставить(УровеньУ, СтруктураУ);
			КонецЕсли;
			
			Если Предпочтение <> Неопределено И Предпочтение < УровеньУ тогда
				СтруктураУ.Вставить("ОтступУ", СтруктураУ.ОтступУ + Уровни.У[Предпочтение].ОтступУ);							
			КонецЕсли;
			
			СтрокаЭтапа.УровеньУ = УровеньУ;
			
		КонецЦикла;
		
		УровеньХ = УровеньХ + 1;
		СтрокиУровня = Этапы.НайтиСтроки(Новый Структура("УровеньХ", УровеньХ));
	КонецЦикла;
	
	Если ЭкземплярПроцесса.НазначениеПроцесса = Перечисления.НазначенияУниверсальныхПроцессов.ПроцессПодготовкиОтчетности Тогда
		ДополнитьЭтапыИнформациейОтчетногоПериода(ЭкземплярПроцесса,Этапы,ПланируемаяДатаЗавершения,НакопленноеОтклонение);
	КонецЕсли;
	
	Возврат Этапы;

	
КонецФункции

Процедура РассчитатьУровеньХРекурсивноДляПоследователей(СтрокаЭтапа, Этапы, МаксУровень, ТабличноеПолеНачальныхНастроек)
			
	Если (СтрокаЭтапа = Неопределено ИЛИ СтрокаЭтапа.УровеньХ <> Неопределено) тогда
		Возврат;
	КонецЕсли;
	
	ПройденныеЭтапы = Новый Массив;
	
	РассчитатьУровеньX(СтрокаЭтапа, Этапы,, МаксУровень, ТабличноеПолеНачальныхНастроек, ПройденныеЭтапы);
		
	Для Каждого ЭтапПоследователь Из СтрокаЭтапа.ТаблицаПоследователей Цикл
		Если ЭтапПоследователь.Этап = Неопределено тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтапПоследователь.Этап.ПометкаУдаления тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаЭтапаПоследователя = Этапы.Найти(ЭтапПоследователь.Этап, "Этап");
		РассчитатьУровеньХРекурсивноДляПоследователей(СтрокаЭтапаПоследователя, Этапы, МаксУровень, ТабличноеПолеНачальныхНастроек);		
	КонецЦикла;
		
КонецПроцедуры

// Процедура расчитывает положение этапа на графике по оси Х
//
Процедура РассчитатьУровеньX(СтрокаЭтапа, Этапы, ТекущийЭтап = Неопределено, МаксУровень = 0, ТабличноеПолеНачальныхНастроек = Неопределено, ПройденныеЭтапы = Неопределено)
			
	Если СтрокаЭтапа = Неопределено ИЛИ Не СтрокаЭтапа.УровеньХ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПройденныеЭтапы <> Неопределено И ПройденныеЭтапы.Найти(СтрокаЭтапа.Этап) <> Неопределено тогда
		ВыводитьСообщениеОбОшибке = Истина;
		
		ТипыЭтаповПрепятствующихБесконечномуЦиклу = Новый Массив;
		ТипыЭтаповПрепятствующихБесконечномуЦиклу.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.Автоотклонение);
		ТипыЭтаповПрепятствующихБесконечномуЦиклу.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.Автоутверждение);
		ТипыЭтаповПрепятствующихБесконечномуЦиклу.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.ДочернийМаршрут);
		ТипыЭтаповПрепятствующихБесконечномуЦиклу.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход);
		ТипыЭтаповПрепятствующихБесконечномуЦиклу.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности);
		ТипыЭтаповПрепятствующихБесконечномуЦиклу.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования);	
		ТипыЭтаповПрепятствующихБесконечномуЦиклу.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапУниверсальногоИмпорта);
		ТипыЭтаповПрепятствующихБесконечномуЦиклу.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапУниверсальногоЭкспорта);
		
		Для Каждого ПройденныйЭтап Из ПройденныеЭтапы Цикл
			Если ТипыЭтаповПрепятствующихБесконечномуЦиклу.Найти(ПройденныйЭтап.ТипЭтапа) <> Неопределено тогда
				ВыводитьСообщениеОбОшибке = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ВыводитьСообщениеОбОшибке тогда
			ШаблонСообщения = НСтр("ru = 'Этап ""%1"" находится в бесконечном цикле'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, СтрокаЭтапа.Этап);
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	ПройденныеЭтапы.Добавить(СтрокаЭтапа.Этап);
	
	Если СтрокаЭтапа.ТаблицаПоследователей.Колонки.Количество() = 0 тогда
		СтрокаЭтапа.УсловияСогласования = СтрокаЭтапа.УсловияСогласованияХЗ.Получить(); // Раскроем ХЗ для условий.
		СтрокаЭтапа.ТаблицаПоследователей = ПолучитьЭтапыПоследователиТЗ(СтрокаЭтапа.УсловияСогласования,ТабличноеПолеНачальныхНастроек);
	КонецЕсли;
	
	Если СтрокаЭтапа.ЭтапыПредшественники.Колонки.Найти("СтрокаЭтапаПредшественника") = неопределено тогда
		СтрокаЭтапа.ЭтапыПредшественники.Колонки.Добавить("СтрокаЭтапаПредшественника");
	КонецЕсли;
			
	Если СтрокаЭтапа.ЭтапыПредшественники.Количество() Тогда
				
		Для каждого СтрокаПредшественника Из СтрокаЭтапа.ЭтапыПредшественники Цикл	
			Если СтрокаПредшественника.ЭтапПроцесса.ДинамическийЭтап Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаПредшественника.СтрокаЭтапаПредшественника = Неопределено тогда	
				СтрокаПредшественника.СтрокаЭтапаПредшественника = Этапы.Найти(СтрокаПредшественника.ЭтапПроцесса, "Этап");
			КонецЕсли;
		КонецЦикла;
		
		УровеньПредшественника = 0;
		МаксУровеньПредшественника = 0;
				
		Для каждого СтрокаПредшественника Из СтрокаЭтапа.ЭтапыПредшественники Цикл
			
			Если СтрокаПредшественника.ЭтапПроцесса.ДинамическийЭтап Тогда
				Продолжить;
			КонецЕсли;
												
			Если ЗначениеЗаполнено(СтрокаПредшественника.СтрокаЭтапаПредшественника) И Не СтрокаПредшественника.ЭтапПроцесса = ТекущийЭтап Тогда
								
				РассчитатьУровеньX(СтрокаПредшественника.СтрокаЭтапаПредшественника, Этапы, ?(ТекущийЭтап = Неопределено, СтрокаЭтапа.Этап, ТекущийЭтап), МаксУровень, ТабличноеПолеНачальныхНастроек, ПройденныеЭтапы);
				
				УровеньПредшественника = ?(СтрокаПредшественника.СтрокаЭтапаПредшественника.УровеньХ = Неопределено, 0, СтрокаПредшественника.СтрокаЭтапаПредшественника.УровеньХ);
								
				Если СтрокаПредшественника.ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.УсловныйПереход
					И СтрокаПредшественника.СтрокаЭтапаПредшественника.УровеньХ <> Неопределено тогда
					
					МаксУровень = Макс(УровеньПредшественника, МаксУровеньПредшественника);
				Иначе
					МаксУровень = Макс(МаксУровень, УровеньПредшественника, МаксУровеньПредшественника);
				КонецЕсли;
				
				МаксУровеньПредшественника = Макс(МаксУровеньПредшественника, МаксУровень);
				
			ИначеЕсли ТекущийЭтап <> Неопределено И СтрокаПредшественника.ЭтапПроцесса = ТекущийЭтап Тогда	
				СтрокаТекущегоЭтапа = Этапы.Найти(ТекущийЭтап, "Этап");
				МаксУровень = МаксУровень + 1;
				СтрокаТекущегоЭтапа.УровеньХ = МаксУровень;
				УровеньПредшественника = МаксУровень;
				
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
				
		Если СтрокаЭтапа.УровеньХ = неопределено тогда			
						
			Если СтрокаЭтапа.ЭтапыПредшественники.Количество() = 1 тогда
				СтрокаЭтапа.УровеньХ = УровеньПредшественника + 1;
			Иначе
				МаксУровень = МаксУровень + 1;
				СтрокаЭтапа.УровеньХ = МаксУровень;
			КонецЕсли;
			
			МаксУровень = Макс(МаксУровень, УровеньПредшественника + 1);
			
			Если СтрокаЭтапа.Этап.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.УсловныйПереход 
				И ТекущийЭтап <> Неопределено И ТабличноеПолеНачальныхНастроек <> Неопределено тогда
								
				Для Каждого ЭтапПоследователь Из СтрокаЭтапа.ТаблицаПоследователей Цикл
					Если ЭтапПоследователь.Этап = Неопределено тогда
						Продолжить;
					КонецЕсли;
					
					Если ЭтапПоследователь.Этап.ПометкаУдаления тогда
						Продолжить;
					КонецЕсли;
					
					СтрокаЭтапаПоследователя = Этапы.Найти(ЭтапПоследователь.Этап, "Этап");
					РассчитатьУровеньХРекурсивноДляПоследователей(СтрокаЭтапаПоследователя, Этапы, МаксУровень, ТабличноеПолеНачальныхНастроек);		
				КонецЦикла;
				
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли МаксУровень > -1 тогда
		СтрокаЭтапа.УровеньХ = 0;
	Иначе		
		МаксУровень = МаксУровень + 1;
		СтрокаЭтапа.УровеньХ = МаксУровень;
	КонецЕсли;
		
КонецПроцедуры

Функция ПолучитьЭтапыПоследователи(ДокументПроцесса, ЭтапСогласованияИсточник) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТекущийМаршрутПроцесса.ЭтапПриемник
	|ИЗ
	|	РегистрСведений.ТекущийМаршрутПроцесса КАК ТекущийМаршрутПроцесса
	|ГДЕ
	|	ТекущийМаршрутПроцесса.ДокументПроцесса = &ДокументПроцесса
	|	И НЕ ТекущийМаршрутПроцесса.ЭтапПриемник.ПометкаУдаления
	|	И ТекущийМаршрутПроцесса.ЭтапИсточник = &ЭтапСогласованияИсточник";
	Запрос.УстановитьПараметр("ДокументПроцесса", ДокументПроцесса);
	Запрос.УстановитьПараметр("ЭтапСогласованияИсточник", ЭтапСогласованияИсточник);
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	РезультатФункции = Выгрузка.ВыгрузитьКолонку("ЭтапПриемник");
	Возврат РезультатФункции;
	
КонецФункции

Функция ПолучитьЭтапыПоследователиТЗ(УсловияСогласования,ТабличноеПолеНачальныхНастроек)
	
	ТаблицаПоследователей = Новый ТаблицаЗначений;
	ТаблицаПоследователей.Колонки.Добавить("Этап");
	ТаблицаПоследователей.Колонки.Добавить("Уровень");
	
	РекурсивныйОбходСтрок(УсловияСогласования.Строки, ТаблицаПоследователей, 0,ТабличноеПолеНачальныхНастроек);
	ТабличноеПолеНачальныхНастроек.Сортировать("ВидУсловия");
	Возврат ТаблицаПоследователей;
		
КонецФункции

Процедура РекурсивныйОбходСтрок(Строки, ТаблицаПоследователей, Знач ТекУровень,ТабличноеПолеНачальныхНастроек)
	
	Для Каждого Строка Из Строки Цикл
		Если Строка.ЯвляетсяУсловием Тогда
			
			Если Строка.ОбработкаУсловия = 0 ИЛИ Строка.ОбработкаУсловия = 6 Тогда
				
				Если Строка.УсловиеДействие = Перечисления.УсловияЭтапа.ПараметрическоеУсловие Тогда
					Условие = Строка.ЗначениеОтбора;
				Иначе
					Условие = Строка.УсловиеДействие;
				КонецЕсли;
				
				Если ТабличноеПолеНачальныхНастроек.Найти(Условие, "Условие") = Неопределено Тогда
					
					НоваяСтрока = ТабличноеПолеНачальныхНастроек.Добавить();
					НоваяСтрока.Условие = Условие;
					
					Если Строка.УсловиеДействие = Перечисления.УсловияЭтапа.Организация Тогда
						НоваяСтрока.Значение = ОбщегоНазначенияУХ.ПустоеЗначениеТипа(Тип("СправочникСсылка.Организации"));
						НоваяСтрока.ВидУсловия = 0;
						НоваяСтрока.ПредставлениеУсловия = Условие;
					ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.ПриоритетЗаявки Тогда
						НоваяСтрока.Значение = ОбщегоНазначенияУХ.ПустоеЗначениеТипа(Тип("СправочникСсылка.ПриоритетыПлатежей"));
						НоваяСтрока.ВидУсловия = 15;
						НоваяСтрока.ПредставлениеУсловия = Условие;
					ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.ВидОтчета Тогда
						НоваяСтрока.Значение = ОбщегоНазначенияУХ.ПустоеЗначениеТипа(Тип("СправочникСсылка.ВидыОтчетов"));
						НоваяСтрока.ВидУсловия = 4;
						НоваяСтрока.ПредставлениеУсловия = Условие;
					ИначеЕсли Строка.УсловиеДЕйствие = Перечисления.УсловияЭтапа.Исполнитель ТОгда
						НоваяСтрока.Значение = ОбщегоНазначенияУХ.ПустоеЗначениеТипа(Тип("СправочникСсылка.Пользователи"));
						НоваяСтрока.ВидУсловия = 1;
						НоваяСтрока.ПредставлениеУсловия = Условие;
					ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.ПараметрическоеУсловие Тогда
						НоваяСтрока.Значение = Ложь;
						НоваяСтрока.ВидУсловия = 3;
						НовоеПредставлениеУсловия = НСтр("ru = 'Результат условия: %Условие%'");
						НовоеПредставлениеУсловия = СтрЗаменить(НовоеПредставлениеУсловия, "%Условие%", Строка(Условие));
						НоваяСтрока.ПредставлениеУсловия = НовоеПредставлениеУсловия;
					ИначеЕсли ТипЗнч(Строка.УсловиеДействие) = Тип("ПланВидовХарактеристикСсылка.ВидыСубконтоКорпоративные") Тогда
						НоваяСтрока.Значение = ОбщегоНазначенияУХ.ПустоеЗначениеТипа(строка.УсловиеДействие.ТипЗначения.Типы()[0]);
						НоваяСтрока.ВидУсловия = 2;
						НоваяСтрока.ПредставлениеУсловия = Условие;
					ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.Взаиморасчеты Тогда
						НоваяСтрока.Значение = 0;
						НоваяСтрока.ВидУсловия = 5;
						НоваяСтрока.ПредставлениеУсловия = Условие;
						Если Строка.Значение = Перечисления.ВидСравненияЛимитовЗаявок.АбсолютноеПревышениеЛимитаНа
						 ИЛИ Строка.Значение = Перечисления.ВидСравненияЛимитовЗаявок.ОтносительноеПревышениеЛимитаНа Тогда
							ДопСтрока = ТабличноеПолеНачальныхНастроек.Добавить();
							ДопСтрока.Условие = 1;
							ДопСтрока.Значение = 0;
							ДопСтрока.ВидУсловия = 12;
							ДопСтрока.ПредставлениеУсловия = Нстр("ru = 'Взаиморасчеты. Контроль'");
						КонецЕсли;
						
					ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.СуммаПлатежа Тогда
						НоваяСтрока.Значение = 0;
						НоваяСтрока.ВидУсловия = 6;						
						НоваяСтрока.ПредставлениеУсловия = Условие;
					ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.ПланыДДС Тогда
						НоваяСтрока.Значение = 0;
						НоваяСтрока.ВидУсловия = 7;
						НоваяСтрока.ПредставлениеУсловия = Условие;
						
						Если Строка.Значение = Перечисления.ВидСравненияЛимитовЗаявок.АбсолютноеПревышениеЛимитаНа
						 ИЛИ Строка.Значение = Перечисления.ВидСравненияЛимитовЗаявок.ОтносительноеПревышениеЛимитаНа Тогда
							ДопСтрока = ТабличноеПолеНачальныхНастроек.Добавить();
							ДопСтрока.Условие = 2;
							ДопСтрока.Значение = 0;
							ДопСтрока.ВидУсловия = 13;
							ДопСтрока.ПредставлениеУсловия = Нстр("ru = 'Планы ДДС. Контроль'");
						КонецЕсли;
						
					ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.ОстаткиДС Тогда
						НоваяСтрока.Значение = 0;
						НоваяСтрока.ВидУсловия = 8;
						НоваяСтрока.ПредставлениеУсловия = Условие;
						Если Строка.Значение = Перечисления.ВидСравненияЛимитовЗаявок.АбсолютноеПревышениеЛимитаНа
						 ИЛИ Строка.Значение = Перечисления.ВидСравненияЛимитовЗаявок.ОтносительноеПревышениеЛимитаНа Тогда
							ДопСтрока = ТабличноеПолеНачальныхНастроек.Добавить();
							ДопСтрока.Условие = 3;
							ДопСтрока.Значение = 0;
							ДопСтрока.ВидУсловия = 14;
							ДопСтрока.ПредставлениеУсловия = Нстр("ru = 'Остатки ДДС. Контроль'");
						КонецЕсли;
					
					ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.Договор Тогда
						НоваяСтрока.Значение = ОбщегоНазначенияУХ.ПустоеЗначениеТипа(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
						НоваяСтрока.ВидУсловия = 9;
						НоваяСтрока.ПредставлениеУсловия = Условие;
					ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.Контрагент Тогда
						НоваяСтрока.Значение = ОбщегоНазначенияУХ.ПустоеЗначениеТипа(Тип("СправочникСсылка.Контрагенты"));
						НоваяСтрока.ВидУсловия = 10;
						НоваяСтрока.ПредставлениеУсловия = Условие;
					ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.СтатьяДДС Тогда
						НоваяСтрока.Значение = ОбщегоНазначенияУХ.ПустоеЗначениеТипа(Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств"));
						НоваяСтрока.ВидУсловия = 11;
						НоваяСтрока.ПредставлениеУсловия = Условие;
					ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.НСИВидЗаявки Тогда
						НоваяСтрока.Значение = ОбщегоНазначенияУХ.ПустоеЗначениеТипа(Тип("ПеречислениеСсылка.ВидыОперацийИзмененияНСИ"));
						НоваяСтрока.ВидУсловия = 19;
						НоваяСтрока.ПредставлениеУсловия = Условие;
	                Иначе
						//НоваяСтрока.Значение = ОбщегоНазначенияУХ.ПустоеЗначениеТипа(Тип("ПеречислениеСсылка.ВидыОперацийИзмененияНСИ"));
						Если Строка.Значение = ВидСравнения.ВСписке ИЛИ  Строка.Значение = ВидСравнения.НЕВСписке Тогда
							НоваяСтрока.ВидУсловия = 20;
							НоваяСтрока.ПредставлениеУсловия = Условие;	
							НоваяСтрока.Значение = ОбщегоНазначенияУХ.ПустоеЗначениеТипа(ТипЗнч(Строка.ЗначениеОтбора[0].Значение));
							
						Иначе	
							НоваяСтрока.ВидУсловия = 20;
							НоваяСтрока.ПредставлениеУсловия = Условие;	
							НоваяСтрока.Значение = ОбщегоНазначенияУХ.ПустоеЗначениеТипа(ТипЗнч(Строка.ЗначениеОтбора));
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
				
				Если  Строка.ОбработкаУсловия = 6 Тогда
					ТекСтрока = Строка.Строки.Найти(7, "ОбработкаУсловия");
					РекурсивныйОбходСтрок(ТекСтрока.Строки, ТаблицаПоследователей, ТекУровень + 1,ТабличноеПолеНачальныхНастроек);
					ТекСтрока = Строка.Строки.Найти(2, "ОбработкаУсловия");
					РекурсивныйОбходСтрок(ТекСтрока.Строки, ТаблицаПоследователей, ТекУровень + 1,ТабличноеПолеНачальныхНастроек);
				Иначе	
					ТекСтрока = Строка.Строки.Найти(1, "ОбработкаУсловия");
					РекурсивныйОбходСтрок(ТекСтрока.Строки, ТаблицаПоследователей, ТекУровень + 1,ТабличноеПолеНачальныхНастроек);
					ТекСтрока = Строка.Строки.Найти(2, "ОбработкаУсловия");
					РекурсивныйОбходСтрок(ТекСтрока.Строки, ТаблицаПоследователей, ТекУровень + 1,ТабличноеПолеНачальныхНастроек);	
				КонецЕсли;	
								
			Иначе
				Для Каждого ТекСтрока Из Строка.Строки Цикл
					
					Если ТекСтрока.ОбработкаУсловия = 4   Тогда
						
						Если ТекСтрока.УсловиеДействие = Перечисления.УсловияЭтапа.ПараметрическоеУсловие Тогда
							Условие = ТекСтрока.ЗначениеОтбора;
						Иначе
							Условие = ТекСтрока.УсловиеДействие;
						КонецЕсли;

						Если ТабличноеПолеНачальныхНастроек.Найти(Условие, "Условие") = Неопределено Тогда
							
							НоваяСтрока = ТабличноеПолеНачальныхНастроек.Добавить();
							НоваяСтрока.Условие = Условие;
							
							Если ТекСтрока.УсловиеДействие = Перечисления.УсловияЭтапа.Организация Тогда
								НоваяСтрока.Значение = ОбщегоНазначенияУХ.ПустоеЗначениеТипа(Тип("СправочникСсылка.Организации"));
								НоваяСтрока.ВидУсловия = 0;
								НоваяСтрока.ПредставлениеУсловия = Условие;
							ИначеЕсли ТекСтрока.УсловиеДЕйствие = Перечисления.УсловияЭтапа.Исполнитель ТОгда
								НоваяСтрока.Значение = ОбщегоНазначенияУХ.ПустоеЗначениеТипа(Тип("СправочникСсылка.Пользователи"));
								НоваяСтрока.ВидУсловия = 1;
								НоваяСтрока.ПредставлениеУсловия = Условие;
							ИначеЕсли ТекСтрока.УсловиеДействие = Перечисления.УсловияЭтапа.ПараметрическоеУсловие Тогда
								НоваяСтрока.Значение = Ложь;
								НоваяСтрока.ВидУсловия = 3;
								НовоеПредставлениеУсловия = НСтр("ru = 'Результат условия: %Условие%'");
								НовоеПредставлениеУсловия = СтрЗаменить(НовоеПредставлениеУсловия, "%Условие%", Строка(Условие));
								НоваяСтрока.ПредставлениеУсловия = НовоеПредставлениеУсловия;
							ИначеЕсли ТекСтрока.УсловиеДействие = Перечисления.УсловияЭтапа.ВидОтчета Тогда
								НоваяСтрока.Значение = ОбщегоНазначенияУХ.ПустоеЗначениеТипа(Тип("СправочникСсылка.ВидыОтчетов"));
								НоваяСтрока.ВидУсловия = 4;
								НоваяСтрока.ПредставлениеУсловия = Условие;
							Иначе
								НоваяСтрока.Значение = ОбщегоНазначенияУХ.ПустоеЗначениеТипа(ТипЗнч(Текстрока.ЗначениеОтбора));
								НоваяСтрока.ВидУсловия = 2;
								НоваяСтрока.ПредставлениеУсловия = Условие;
							КонецЕсли;
							
						КонецЕсли;
						
					КонецЕсли;
					
					РекурсивныйОбходСтрок(ТекСтрока.Строки, ТаблицаПоследователей, ТекУровень + 1,ТабличноеПолеНачальныхНастроек);
				КонецЦикла;
			КонецЕсли;
			
		ИначеЕсли Строка.УсловиеДействие = Перечисления.ДействияЭтапа.ПерейтиКЭтапу И Строка.Значение <> Неопределено Тогда
			НоваяСтрока = ТаблицаПОследователей.Добавить();
			НоваяСтрока.Этап = Строка.Значение;
			НоваяСтрока.Уровень = ТекУровень;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция определяет положение этапа на графике по оси Y
// 
Функция ОпределитьНовуюПозициюВУровнеY(СтрокаЭтапа, ЗанятыеУровниПоУ, Предпочтение = Неопределено)
	
	Если Не Предпочтение = Неопределено и ЗанятыеУровниПоУ[Предпочтение] = Неопределено Тогда
		Результат = Предпочтение;
	Иначе
		Результат = 0;
		
		Пока Не ЗанятыеУровниПоУ[Результат] = Неопределено Цикл
			Результат = Результат + 1;
		КонецЦикла;
		
	КонецЕсли;
	ЗанятыеУровниПоУ.Вставить(Результат, Истина);
	Возврат Результат;
	
КонецФункции

Процедура ПриИнициализацииМаршрутаСогласования(ОбъектСсылка)
	
	Если ТипЗнч(ОбъектСсылка)=Тип("ДокументСсылка.ЗаявкаНаИзменениеНСИ") Тогда
		Если ОбъектСсылка.ВидОперации = Перечисления.ВидыОперацийИзмененияНСИ.РегистрацияНовогоОбъекта Тогда		 
			СправочникОбъект = ОбъектСсылка.ИзменяемыйОбъект.ПолучитьОбъект(); 
			СправочникОбъект.НСИ_НеАктивный = Истина;
			СправочникОбъект.НСИ_Состояние = Перечисления.СостоянияСогласования.НаУтверждении;  
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
			СправочникОбъект.Записать();	
		ИначеЕсли ОбъектСсылка.ВидОперации = Перечисления.ВидыОперацийИзмененияНСИ.ИзменениеРеквизитовОбъекта Тогда	
			СправочникОбъект = ОбъектСсылка.ИзменяемыйОбъект.ПолучитьОбъект(); 
			СправочникОбъект.НСИ_Состояние = Перечисления.СостоянияСогласования.НаУтверждении;  
			СправочникОбъект.ОбменДанными.Загрузка = Истина;
			СправочникОбъект.Записать();	
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры


Процедура ДополнитьЭтапыИнформациейОтчетногоПериода(РабочийПроцесс,Этапы,ПланируемаяДатаЗавершения,НакопленноеОтклонение)
	
	ДатаОкончания     = '00010101';
	ДатаОкончанияПлан = '00010101';
	
	Этапы.Колонки.Добавить("ДатаОкончанияПлан", Новый ОписаниеТипов("Дата"));
	Этапы.Колонки.Добавить("НакопленноеОтклонение");
    Этапы.Колонки.Добавить("ДатаОкончания", Новый ОписаниеТипов("Дата"));
	Этапы.Колонки.Добавить("ДатаНачала", Новый ОписаниеТипов("Дата"));          
	Этапы.Колонки.Добавить("Длительность");
	Этапы.Колонки.Добавить("МаксимальноеОтклонение");
	Этапы.Колонки.Добавить("КоличествоОрганизаций");
	Этапы.Колонки.Добавить("ЭтапВыполняется");
	Этапы.Колонки.Добавить("ЭтапУтвержден");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(СостоянияВыполненияПроцессовСрезПоследних.ДатаНачала) КАК ДатаНачала,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа = &СостояниеУтвержден
	|				ТОГДА СостоянияВыполненияПроцессовСрезПоследних.ДатаОкончания
	|			ИНАЧЕ &ТекущаяДата
	|		КОНЕЦ) КАК ДатаОкончания,
	|	СостоянияВыполненияПроцессовСрезПоследних.ЭтапПроцесса КАК ЭтапПроцесса,
	|	МАКСИМУМ(СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа) КАК СостояниеЭтапа,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СостоянияВыполненияПроцессовСрезПоследних.Организация) КАК Организация,
	|	СУММА(ВЫБОР
	|			КОГДА СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа = &СостояниеВыполняется
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Выполняется,
	|	СУММА(ВЫБОР
	|			КОГДА СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа = &СостояниеУтвержден
	|				ТОГДА 1
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Утвержден
	|ИЗ
	|	РегистрСведений.СостоянияВыполненияПроцессов.СрезПоследних(
	|			&ТекущаяДата,
	|			Сценарий = &ТСценарий
	|				И ПериодСценария = &ТПериод) КАК СостоянияВыполненияПроцессовСрезПоследних
	|
	|СГРУППИРОВАТЬ ПО
	|	СостоянияВыполненияПроцессовСрезПоследних.ЭтапПроцесса,
	|	ВЫБОР
	|		КОГДА СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа = 1
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ";

	
	Запрос.УстановитьПараметр("ТПериод", РабочийПроцесс.КлючевойОбъектПроцесса.ПериодСценария);
    Запрос.УстановитьПараметр("ТСценарий",РабочийПроцесс.КлючевойОбъектПроцесса.Сценарий);
    Запрос.УстановитьПараметр("СостояниеВыполняется",Перечисления.СостоянияЭтаповПроцессов.Выполняется);
    Запрос.УстановитьПараметр("СостояниеУтвержден",Перечисления.СостоянияЭтаповПроцессов.Утвержден);

	
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());

	
	РабочиеЭтапы = Запрос.Выполнить().Выгрузить();

	Для Каждого Стр ИЗ Этапы Цикл
		РабочийЭтап  = РабочиеЭтапы.НайтиСтроки(Новый Структура("ЭтапПроцесса",Стр.Этап)); 
		Если РабочийЭтап.Количество() = 1 Тогда
			 тРабочийЭтап = РабочийЭтап[0];
			 Стр.ДатаНачала = тРабочийЭтап.ДатаНачала;
			 Стр.ДатаОкончания = тРабочийЭтап.ДатаОкончания;
			 Стр.КоличествоОрганизаций = тРабочийЭтап.Организация;
             Стр.ЭтапВыполняется = тРабочийЭтап.Выполняется;
			 Стр.ЭтапУтвержден = тРабочийЭтап.Утвержден;

		КонецЕсли;
	КонецЦикла;
	
	
	Уровни = Новый Структура("Х, У, ВысотаЭтапов, ТекстыЭтапов", Новый Соответствие, Новый Соответствие, Новый Соответствие, Новый Соответствие);
	УровеньХ = 0;
	СтрокиУровня = Этапы.НайтиСтроки(Новый Структура("УровеньХ", УровеньХ));
	Пока СтрокиУровня.Количество() Цикл
		СтруктураХ = Новый Структура("ОтступХ, ГоризонтальнаяКоррекция, ШиринаЭтапа, ЗанятыеУровниПоУ", 0, 0, 0, Новый Соответствие);
		Уровни.Х.Вставить(УровеньХ, СтруктураХ);
		УровеньУ = -1;

		
		Для каждого СтрокаЭтапа Из СтрокиУровня Цикл
			
			Если СтрокаЭтапа.ЭтапыПредшественники.Количество() = 0 Тогда
				УровеньУ = УровеньУ + 1;
				СтрокаЭтапа.ДатаОкончанияПлан = РабочийПроцесс.КлючевойОбъектПроцесса.ДатаНачалаПроцесса + 60*60*СтрокаЭтапа.ДлительностьПлановая;
			Иначе	
				Если СтрокаЭтапа.ЭтапыПредшественники.Количество() = 1 Тогда
					Предпочтение =СтрокаЭтапа.ЭтапыПредшественники[0].СтрокаЭтапаПредшественника.УровеньУ;
				Иначе
					Предпочтение = Неопределено;
				КонецЕсли;
				
				УровеньУ = ОпределитьНовуюПозициюВУровнеY(СтрокаЭтапа, СтруктураХ.ЗанятыеУровниПоУ, Предпочтение);
				
				Для каждого СтрокаПредшественника Из СтрокаЭтапа.ЭтапыПредшественники Цикл
					
					СтрокаЭтапа.ДатаОкончанияПлан = Макс(СтрокаПредшественника.СтрокаЭтапаПредшественника.ДатаОкончанияПлан + 60*60*СтрокаЭтапа.ДлительностьПлановая, СтрокаЭтапа.ДатаОкончанияПлан);
					СтруктураХ.ОтступХ = СтруктураХ.ОтступХ + 1;
					
					Если Не СтрокаЭтапа.УровеньХ = СтрокаПредшественника.СтрокаЭтапаПредшественника.УровеньХ + 1 Тогда
						СтруктураУ = Уровни.У[СтрокаПредшественника.СтрокаЭтапаПредшественника.УровеньУ];
						СтруктураУ.ОтступУ = СтруктураУ.ОтступУ + 1;
						СтрокаПредшественника.ОтступУ = СтруктураУ.ОтступУ;
					КонецЕсли;
					
					СтрокаПредшественника.ОтступХ = СтруктураХ.ОтступХ;
					
				КонецЦикла;
				
				
			КонецЕсли;
			
			Если СтрокаЭтапа.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности Тогда
				Если ТипЗнч(СтрокаЭтапа.ДатаОкончания) = Тип("Дата") И ТипЗнч(СтрокаЭтапа.ДатаОкончанияПлан) = Тип("Дата") И 
					ЗначениеЗаполнено(СтрокаЭтапа.ДатаОкончания)  Тогда
					СтрокаЭтапа.НакопленноеОтклонение = Окр((СтрокаЭтапа.ДатаОкончания - СтрокаЭтапа.ДатаОкончанияПлан) / 86400, 2);
				Иначе
					СтрокаЭтапа.НакопленноеОтклонение  = 0;
				КонецЕсли;
				
				ПланируемаяДатаЗавершения = СтрокаЭтапа.ДатаОкончанияПлан;
				Если СтрокаЭтапа.НакопленноеОтклонение<>0 Тогда
					НакопленноеОтклонение =  СтрокаЭтапа.НакопленноеОтклонение;
				КонецЕсли;
			КонецЕсли;
			
			СтруктураУ = Уровни.У[УровеньУ];
			Если СтруктураУ = Неопределено Тогда
				СтруктураУ = Новый Структура("ОтступУ, ВертикальнаяКоррекция", 0, 0);
				Уровни.У.Вставить(УровеньУ, СтруктураУ);
			КонецЕсли;
			
			СтрокаЭтапа.УровеньУ = УровеньУ;
		
		КонецЦикла;
		
		УровеньХ = УровеньХ + 1;
		СтрокиУровня = Этапы.НайтиСтроки(Новый Структура("УровеньХ", УровеньХ));
		
	КонецЦикла;
		
КонецПроцедуры	

Функция ЕстьЭтапСогласованияПредшественник(ДокументПроцесса,ЭтапПроцесса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыполнениеПроцессовСрезПоследних.Период КАК Период,
	|	ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса ,
	|	ВыполнениеПроцессовСрезПоследних.ДокументПроцесса,
	|	ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса.ТипЭтапа КАК ТипЭтапа
	|ИЗ
	|	РегистрСведений.ВыполнениеПроцессов.СрезПоследних(, ДокументПроцесса = &ДокументПроцесса И ЭтапПроцесса <> &ЭтапПроцесса 
	|И СостояниеЭтапа=&Выполнен И ЭтапПроцесса.ТипЭтапа В (&ТипыЭтаповНаВозрат) ) КАК ВыполнениеПроцессовСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
		
	ТипыЭтаповНаВозрат = Новый СписокЗначений;
	ТипыЭтаповНаВозрат.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования);
	ТипыЭтаповНаВозрат.Добавить(Перечисления.ТипыЭтаповУниверсальныхПроцессов.ДочернийМаршрут);	
	
	Запрос.УстановитьПараметр("ДокументПроцесса", ДокументПроцесса);
	Запрос.УстановитьПараметр("ЭтапПроцесса"    , ЭтапПроцесса);
	Запрос.УстановитьПараметр("ТипыЭтаповНаВозрат",ТипыЭтаповНаВозрат);
	Запрос.УстановитьПараметр("Выполнен"    , Перечисления.СостоянияЭтаповУниверсальныхПроцессов.Завершен);
	
	Возврат Запрос.Выполнить().Выгрузить().Количество()>0;
	
		
КонецФункции
 
Функция ЭтапыСогласованияПредшественники(ДокументПроцесса,ЭтапПроцесса) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ИсторияВыполненияПроцессовСрезПоследних.ЭтапПроцесса,
	               |	ИсторияВыполненияПроцессовСрезПоследних.Период КАК Период
	               |ИЗ
	               |	РегистрСведений.ИсторияВыполненияПроцессов.СрезПоследних(
	               |			&ТекущаяДата,
	               |			ДокументПроцесса = &ДокументПроцесса
	               |				И ЭтапПроцесса <> &ТекущийЭтап) КАК ИсторияВыполненияПроцессовСрезПоследних
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период УБЫВ";
	
	Запрос.УстановитьПараметр("ДокументПроцесса",ДокументПроцесса);
	Запрос.УстановитьПараметр("ТекущийЭтап",ЭтапПроцесса);
    Запрос.УстановитьПараметр("ТекущаяДата",ТекущаяДата());
	
	Возврат Запрос.Выполнить().Выгрузить();
			 	 
	
КонецФункции

Процедура ОбновитьУсловныеПереходы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭтапыУниверсальныхПроцессовЗначенияПараметров.Ссылка КАК СсылкаОбъект
	|ИЗ
	|	Справочник.ЭтапыУниверсальныхПроцессов.ЗначенияПараметров КАК ЭтапыУниверсальныхПроцессовЗначенияПараметров";
		
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЭтапОбъект = Выборка.СсылкаОбъект.ПолучитьОбъект();
		
		Для Каждого Стр Из ЭтапОбъект.ЗначенияПараметров Цикл
			
			Если Стр.ТипОтбораПараметра = "Параметр" Тогда
				
				Стр.ПараметрОбъекта = Истина;
				Стр.ТипОтбораПараметра = Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение;
				
			КонецЕсли;	
				
		КонецЦикла;	 	
		
		ЭтапОбъект.Записать();

	КонецЦикла;
	
		
КонецПроцедуры

// Проверяет завершение основного согласования ЭкземплярПроцессаВход по этапу ЭтапСогласованияВход
Функция ЗавершеноОсновноеСогласование(ЭкземплярПроцессаВход, ЭтапСогласованияВход) Экспорт
	РезультатФункции = Истина;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВыполнениеПроцессовСрезПоследних.ДокументПроцесса,
		|	ВыполнениеПроцессовСрезПоследних.ЭтапПроцесса,
		|	ВыполнениеПроцессовСрезПоследних.СостояниеЭтапа,
		|	ВыполнениеПроцессовСрезПоследних.АрхивнаяЗапись
		|ИЗ
		|	РегистрСведений.ВыполнениеПроцессов.СрезПоследних(
		|			,
		|			ДокументПроцесса = &ДокументПроцесса
		|				И ЭтапПроцесса = &ЭтапПроцесса) КАК ВыполнениеПроцессовСрезПоследних
		|ГДЕ
		|	ВыполнениеПроцессовСрезПоследних.СостояниеЭтапа = &СостояниеЭтапа
		|	И ВыполнениеПроцессовСрезПоследних.АрхивнаяЗапись = ЛОЖЬ";
	Запрос.УстановитьПараметр("ДокументПроцесса", ЭкземплярПроцессаВход);
	Запрос.УстановитьПараметр("ЭтапПроцесса", ЭтапСогласованияВход);
	Запрос.УстановитьПараметр("СостояниеЭтапа", Перечисления.СостоянияЭтаповУниверсальныхПроцессов.ВОбработке);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Пустой();
	Возврат РезультатФункции;
КонецФункции 

// Возвращает массив пользователей, замещающих пользователя ПользовательВход.
// Когда пользователь не задан - будет использован текущий.
Функция ПолучитьЗаместителейТекущегоПользователя(ПользовательВход = Неопределено) Экспорт
	РезультатФункции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Заместители.ЗамещаемыйПользователь,
		|	Заместители.Заместитель
		|ИЗ
		|	РегистрСведений.Заместители КАК Заместители
		|ГДЕ
		|	Заместители.ЗамещаемыйПользователь = &ЗамещаемыйПользователь";
	Если ПользовательВход = Неопределено Тогда	
		ЗамещаемыйПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");	
	Иначе
		ЗамещаемыйПользователь = ПользовательВход;
	КонецЕсли;
	Запрос.УстановитьПараметр("ЗамещаемыйПользователь", ЗамещаемыйПользователь);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатФункции.Добавить(ВыборкаДетальныеЗаписи.Заместитель);
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Возвращает массив пользователей, которых замещает пользователь ПользовательВход.
// Когда пользователь не задан - будет использован текущий.
Функция ПолучитьЗамещаемыхТекущегоПользователя(ПользовательВход = Неопределено) Экспорт
	РезультатФункции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Заместители.ЗамещаемыйПользователь,
		|	Заместители.Заместитель
		|ИЗ
		|	РегистрСведений.Заместители КАК Заместители
		|ГДЕ
		|	Заместители.Заместитель = &Заместитель";
	Если ПользовательВход = Неопределено Тогда	
		ПользовательЗаместитель = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");	
	Иначе
		ПользовательЗаместитель = ПользовательВход;
	КонецЕсли;
	Запрос.УстановитьПараметр("Заместитель", ПользовательЗаместитель);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатФункции.Добавить(ВыборкаДетальныеЗаписи.ЗамещаемыйПользователь);
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Заполняет реквизит с именем НаименованиеРеквизитаВход в объекте ОбъектЗаполненияВход
// по данному аналогичного поля в структуре СтруктураВход. Когда в структуре поля нет - пропускает
// заполнение.
Процедура ЗаполнитьРеквизитПоСтруктуре(ОбъектЗаполненияВход, СтруктураВход, НаименованиеРеквизитаВход)
	Если СтруктураВход.Свойство(НаименованиеРеквизитаВход) Тогда
		ОбъектЗаполненияВход[НаименованиеРеквизитаВход] = СтруктураВход[НаименованиеРеквизитаВход];
	Иначе
		// Пропускаем реквизит.
	КонецЕсли;
КонецПроцедуры

// Возвращает случайный многопериодный бланк или бланк сводной таблицы 
// по виду отчёта ВидОтчетаВход.
Функция ПолучитьСлучайныйМногопериодныйСводныйБланк(ВидОтчетаВход)
	РезультатФункции = Справочники.БланкиОтчетов.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	БланкиОтчетов.Ссылка КАК Ссылка,
	|	БланкиОтчетов.Владелец КАК Владелец,
	|	БланкиОтчетов.РежимБланка КАК РежимБланка
	|ПОМЕСТИТЬ ВТ_БланкиОбъединение
	|ИЗ
	|	Справочник.БланкиОтчетов КАК БланкиОтчетов
	|ГДЕ
	|	НЕ БланкиОтчетов.ПометкаУдаления
	|	И БланкиОтчетов.Владелец = &Владелец
	|	И БланкиОтчетов.РежимБланка = 2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	БланкиОтчетов.Ссылка,
	|	БланкиОтчетов.Владелец,
	|	БланкиОтчетов.РежимБланка
	|ИЗ
	|	Справочник.БланкиОтчетов КАК БланкиОтчетов
	|ГДЕ
	|	НЕ БланкиОтчетов.ПометкаУдаления
	|	И БланкиОтчетов.Владелец = &Владелец
	|	И БланкиОтчетов.РежимБланка = 1
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВТ_БланкиОбъединение.Ссылка КАК Ссылка,
	|	ВТ_БланкиОбъединение.Владелец КАК Владелец
	|ИЗ
	|	ВТ_БланкиОбъединение КАК ВТ_БланкиОбъединение";
	Запрос.УстановитьПараметр("Владелец", ВидОтчетаВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатФункции = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьСлучайныйМногопериодныйСводныйБланк()

// Формирует многопериодный бланк по умолчанию для вида отчёта ВидОтчетаВход
// с наименованием НаименованиеВход. Параметр ТихийРежимВход регулирует 
// выпод служебных сообщений.
Функция СоздатьМногопериодныйБланкПоУмолчанию(ВидОтчетаВход, НаименованиеВход = "", ТихийРежимВход = Истина) Экспорт
	// Инициализация.
	РезультатФункции = Справочники.БланкиОтчетов.ПустаяСсылка();
	НаименованиеОтчета = "";
	Если НЕ ЗначениеЗаполнено(НаименованиеВход) Тогда
		НаименованиеОтчета = Строка(ВидОтчетаВход) + НСтр("ru = ' (многопериодный)'");
	Иначе
		НаименованиеОтчета = НаименованиеВход;
	КонецЕсли;
	Попытка
		// Создание обработки для заполнения бланка.
		ОбъектАБ = Обработки.АналитическийБланк.Создать();
		// Формирование таблиц строк и колонок.
		ТаблицаКолонок = СформироватьТаблицуКолонокБланка(ВидОтчетаВход);
		АдресТаблицыКолонок = ПоместитьВоВременноеХранилище(ТаблицаКолонок);
		ДеревоСтрок = СформироватьДеревоСтрокБланка(ВидОтчетаВход, ТаблицаКолонок);
		АдресДереваСтрок = ПоместитьВоВременноеХранилище(ДеревоСтрок);
		// Формирование табличного документа.
		ПолеТабличногоДокументаМакет = Новый ТабличныйДокумент;
		СтруктураИсходныхДанных = Новый Структура;
		СтруктураИсходныхДанных.Вставить("ВыводитьАналтикиВИерархии",	 Ложь);
		СтруктураИсходныхДанных.Вставить("ДеревоСтрок",					 АдресДереваСтрок);
		СтруктураИсходныхДанных.Вставить("ДобавитьИтогПоПериоду",		 Ложь);
		СтруктураИсходныхДанных.Вставить("Колонки",						 АдресТаблицыКолонок);
		СтруктураИсходныхДанных.Вставить("РасположениеИтогов",			 "");
		АналитическийБланкГенерацияМакетаУХСервер.СоздатьМакетБланка(СтруктураИсходныхДанных, ВидОтчетаВход, Истина, НаименованиеОтчета, ОбъектАБ, ПолеТабличногоДокументаМакет);
		// Создание и запись элемента бланка.
		БланкДляОтображенияТек = Справочники.БланкиОтчетов.СоздатьЭлемент();
		БланкДляОтображенияТек.Наименование	 = НаименованиеОтчета;
		БланкДляОтображенияТек.Владелец		 = ВидОтчетаВход;
		БланкДляОтображенияТек.Утвержден	 = Ложь;
		БланкДляОтображенияТек.РежимБланка	 = 2;	
		БланкДляОтображенияТек.Записать();
		РезультатФункции = БланкДляОтображенияТек.Ссылка;
		// Заполнение служебных областей.
		МакетСлужебныхОбластей = Справочники.БланкиОтчетов.ПолучитьМакет("ШаблонСлужебныхОбластей");
		
		Если НЕ ПолеТабличногоДокументаМакет.Область(1,0,1,0).Имя =  "ОбластьНастроекРаскрытийКолонок" Тогда
			
			ОбластьИсточник = МакетСлужебныхОбластей.Область("ОбластьНастроекРаскрытийКолонок");
			ОбластьПриемник = ПолеТабличногоДокументаМакет.Область(1,0,1,0);
			ПолеТабличногоДокументаМакет.ВставитьОбласть(ОбластьИсточник, ОбластьПриемник, ТипСмещенияТабличногоДокумента.ПоВертикали);
			
			Если НЕ ТихийРежимВход Тогда
				ТекстСообщения = НСтр("ru = 'Добавлена служебная область, содержащая настройки раскрытий колонок'");
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
			
		КонецЕсли;	
		
		Если НЕ ПолеТабличногоДокументаМакет.Область(0,1,0,1).Имя =  "ОбластьНастроекРаскрытийСтрок" Тогда
			
			ОбластьИсточник = МакетСлужебныхОбластей.Область("ОбластьНастроекРаскрытийСтрок");
			ОбластьПриемник = ПолеТабличногоДокументаМакет.Область(0,1,0,1);
			ПолеТабличногоДокументаМакет.ВставитьОбласть(ОбластьИсточник,ОбластьПриемник,ТипСмещенияТабличногоДокумента.ПоГоризонтали);
			
			Если НЕ ТихийРежимВход Тогда
				ТекстСообщения = НСтр("ru = 'Добавлена служебная область, содержащая настройки раскрытий строк'");
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;	
		КонецЕсли;	
		// Соранение итогового бланка и возврат результата.
		МакетДляВыводаПоказателей = Новый ТабличныйДокумент;
		МакетДляВыводаПоказателей.Очистить();
		Идентификатор = Новый УникальныйИдентификатор;
		Отказ = Ложь;
		Справочники.БланкиОтчетов.СохранитьМакетМногопериодногоБланка(РезультатФункции, ПолеТабличногоДокументаМакет, ОбъектАБ, Идентификатор, Отказ, МакетДляВыводаПоказателей);
		Обработки.АналитическийБланк.ЗаписатьНастройкиАналитическогоБланка(ПолеТабличногоДокументаМакет, МакетДляВыводаПоказателей, РезультатФункции, ОбъектАБ, Отказ);
	Исключение
		ТекстСообщения = НСтр("ru = 'При создании бланка для вида отчёта ""%ВидОтчета%"" возникли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидОтчета%", Строка(ВидОтчетаВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Справочники.БланкиОтчетов.ПустаяСсылка();
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции		// СоздатьМногопериодныйБланкПоУмолчанию()

// Возвращает таблицу колонок для вида отчёта ВидОтчетаВход.
Функция СформироватьТаблицуКолонокБланка(ВидОтчетаВход) Экспорт
	РезультатФункции = Новый ТаблицаЗначений;
	ЗапросКолонки = Новый Запрос;
	ЗапросКолонки.Текст = 
	"ВЫБРАТЬ
	|	КолонкиОтчетов.Код КАК Код,
	|	КолонкиОтчетов.Представление КАК Представление,
	|	КолонкиОтчетов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	|ГДЕ
	|	КолонкиОтчетов.Владелец = &ВидОтчета
	|	И КолонкиОтчетов.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	КолонкиОтчетов.ПорядковыйНомер";
	ЗапросКолонки.УстановитьПараметр("ВидОтчета", ВидОтчетаВход);
	РезультатФункции = ЗапросКолонки.Выполнить().Выгрузить();
	Возврат РезультатФункции;
КонецФункции		// СформироватьТаблицуКолонокБланка()

// Возвращает дерево значений строк вида отчёта ВидОтчетаВход по таблице
// колонок ТаблицаКолонокВход.
Функция СформироватьДеревоСтрокБланка(ВидОтчетаВход, ТаблицаКолонокВход) Экспорт
	РезультатФункции = Новый ДеревоЗначений;
	РезультатФункции.Колонки.Добавить("СтрокаВыбрана",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	РезультатФункции.Колонки.Добавить("Строка");
	РезультатФункции.Колонки.Добавить("СтрокаНаименование");
	РезультатФункции.Колонки.Добавить("СтрокаКод");
	РезультатФункции.Колонки.Добавить("СтрокаГруппаРаскрытия");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтрокиОтчетов.Ссылка КАК Ссылка,
	|	СтрокиОтчетов.Код КАК СтркаКод,
	|	СтрокиОтчетов.ГруппаРаскрытия КАК ГруппаРаскрытия,
	|	СтрокиОтчетов.ПорядковыйНомер КАК ПорядковыйНомер
	|ПОМЕСТИТЬ втМакетСтрок
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	СтрокиОтчетов.Владелец = &ВидОтчета
	|	И СтрокиОтчетов.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КолонкиОтчетов.Ссылка КАК Ссылка,
	|	КолонкиОтчетов.ПорядковыйНомер КАК ПорядковыйНомер
	|ПОМЕСТИТЬ втМакетКолонок
	|ИЗ
	|	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	|ГДЕ
	|	КолонкиОтчетов.Владелец = &ВидОтчета
	|	И КолонкиОтчетов.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Ссылка,
	|	ПоказателиОтчетов.Колонка КАК Колонка,
	|	ПоказателиОтчетов.Строка КАК Строка
	|ПОМЕСТИТЬ втПоказатели
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Владелец = &ВидОтчета
	|	И ПоказателиОтчетов.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втМакетКолонок.Ссылка КАК КолонкаСсылка,
	|	втМакетКолонок.ПорядковыйНомер КАК КолонкаПорядковыйНомер,
	|	втМакетСтрок.Ссылка КАК СтрокаСсылка,
	|	втМакетСтрок.СтркаКод КАК СтрокаКод,
	|	втМакетСтрок.ГруппаРаскрытия КАК ГруппаРаскрытия,
	|	втМакетСтрок.ПорядковыйНомер КАК СтрокаКолонкаПорядковыйНомер
	|ПОМЕСТИТЬ втМакет
	|ИЗ
	|	втМакетСтрок КАК втМакетСтрок
	|		ЛЕВОЕ СОЕДИНЕНИЕ втМакетКолонок КАК втМакетКолонок
	|		ПО (ИСТИНА)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втМакет.КолонкаСсылка КАК КолонкаСсылка,
	|	втМакет.КолонкаПорядковыйНомер КАК КолонкаПорядковыйНомер,
	|	втМакет.СтрокаСсылка КАК СтрокаСсылка,
	|	втМакет.СтрокаКод КАК СтрокаКод,
	|	втМакет.ГруппаРаскрытия КАК ГруппаРаскрытия,
	|	втМакет.СтрокаКолонкаПорядковыйНомер КАК СтрокаКолонкаПорядковыйНомер,
	|	втПоказатели.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втМакетСКолонками
	|ИЗ
	|	втМакет КАК втМакет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПоказатели КАК втПоказатели
	|		ПО втМакет.СтрокаСсылка = втПоказатели.Строка
	|			И втМакет.КолонкаСсылка = втПоказатели.Колонка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ИСТИНА КАК СтрокаВыбрана,
	|	СтрокиОтчетов.Ссылка КАК Строка,
	|	СтрокиОтчетов.Код КАК СтрокаКод,
	|	СтрокиОтчетов.Наименование КАК СтрокаНаименование,
	|	СтрокиОтчетов.ГруппаРаскрытия КАК СтрокаГруппаРаскрытия,
	|	СтрокиОтчетов.ПорядковыйНомер КАК ПорядковыйНомер,
	|	СтрокиОтчетов.Родитель КАК Родитель
	|ИЗ
	|	втМакетСКолонками КАК втМакетСКолонками
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|		ПО втМакетСКолонками.СтрокаСсылка = СтрокиОтчетов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	СтрокиОтчетов.Ссылка,
	|	СтрокиОтчетов.Код,
	|	СтрокиОтчетов.ГруппаРаскрытия,
	|	СтрокиОтчетов.ПорядковыйНомер,
	|	СтрокиОтчетов.Родитель,
	|	втМакетСКолонками.КолонкаПорядковыйНомер,
	|	СтрокиОтчетов.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтрокиОтчетов.ПорядковыйНомер ИЕРАРХИЯ,
	|	втМакетСКолонками.КолонкаПорядковыйНомер";
	
	СхемаЗапроса = Новый СхемаЗапроса;
	СхемаЗапроса.УстановитьТекстЗапроса(Запрос.Текст);
	
	Для Каждого СтрКолонка Из ТаблицаКолонокВход Цикл
		Нполе = СхемаЗапроса.ПакетЗапросов[4].Операторы[0].ВыбираемыеПоля.Добавить("ВЫБОР КОГДА ВтМакет.КолонкаСсылка = &Парам_"+СокрЛП(СтрКолонка.Код)+
		" ТОГДА ИСТИНА ИНАЧЕ ИСТИНА КОНЕЦ ");
		Запрос.УстановитьПараметр("Парам_"+СокрЛП(СтрКолонка.Код),СтрКолонка.Ссылка);
		СхемаЗапроса.ПакетЗапросов[4].Колонки[СхемаЗапроса.ПакетЗапросов[4].Колонки.Количество()-1].Псевдоним = СокрЛП(СтрКолонка.Код);
		
		Нполе = СхемаЗапроса.ПакетЗапросов[5].Операторы[0].ВыбираемыеПоля.Добавить("МАКСИМУМ("+СокрЛП(СтрКолонка.Код)+") ");
		СхемаЗапроса.ПакетЗапросов[5].Колонки[СхемаЗапроса.ПакетЗапросов[5].Колонки.Количество()-1].Псевдоним = СокрЛП(СтрКолонка.Код);
		
		РезультатФункции.Колонки.Добавить(СокрЛП(СтрКолонка.Код),ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());	
	КонецЦикла;	
	
	Запрос.Текст =  СхемаЗапроса.ПолучитьТекстЗапроса();	
	Запрос.УстановитьПараметр("ВидОтчета", ВидОтчетаВход);
				
	Результат=Запрос.Выполнить().Выбрать();
	
	ДеревоНастройкиСервер_Строки = РезультатФункции.Строки.Добавить();
	ДеревоНастройкиСервер_Строки.Строка = Нстр("ru = 'Выбранные строки'");
	ДеревоНастройкиСервер_Строки.СтрокаВыбрана = Истина;
	
	Для Каждого Кол Из ТаблицаКолонокВход Цикл
		ДеревоНастройкиСервер_Строки[СокрЛП(Кол.Код)] = Истина;
	КонецЦикла;
	
	ВыводимаяСтрокаОтчета=Справочники.СтрокиОтчетов.ПустаяСсылка();
	
	СоответствиеСтрок=Новый Соответствие;
	СоответствиеРодителей=Новый Соответствие;

	Пока Результат.Следующий() Цикл
		
		Если Результат.Строка<>ВыводимаяСтрокаОтчета Тогда
			
			ТекущаяСтрокаДерева=СоответствиеСтрок[Результат.Строка];
			
			Если ТекущаяСтрокаДерева=Неопределено Тогда
				
				Если Результат.Родитель=Справочники.СтрокиОтчетов.ПустаяСсылка() Тогда
					
					ТекущаяСтрокаДерева=ДеревоНастройкиСервер_Строки.Строки.Добавить();
					
				Иначе
					
					СтрокаРодитель=СоответствиеРодителей[Результат.Родитель];
					
					Если СтрокаРодитель=Неопределено Тогда
												
						СтрокаРодитель=РезультатФункции.Строки.Найти(Результат.Родитель, "Строка", Истина);
						СоответствиеРодителей.Вставить(Результат.Родитель,СтрокаРодитель);
						
					КонецЕсли;
					
					ТекущаяСтрокаДерева=СтрокаРодитель.Строки.Добавить();
					
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ТекущаяСтрокаДерева,Результат);
				СоответствиеСтрок.Вставить(Результат.Строка,ТекущаяСтрокаДерева);	
			КонецЕсли;
			
			ВыводимаяСтрокаОтчета=Результат.Строка;
			
		КонецЕсли;
		
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		// СформироватьДеревоСтрокБланка()

// Возвращает бланк отображения для экземпляра отчета по заданным настройкам.
Функция ПолучитьБланкНовогоОтчета(СценарийВход, ОрганизацияВход, ВидОтчетаВход, ПериодВход, ПериодОкончаниеВход, ВерсияРегламентаВход)
	ПустойБланк = Справочники.БланкиОтчетов.ПустаяСсылка();
	РезультатФункции = ПустойБланк;
	// Получение бланка из регламента.
	ТаблицаПолномочий = УправлениеОтчетамиУХ.ПолучитьТаблицуПолномочий(ПериодВход, СценарийВход, ВерсияРегламентаВход, Неопределено, , ОрганизацияВход, , ВидОтчетаВход);
	Если ТаблицаПолномочий.Количество() = 1 Тогда
		// Есть однозначные установленные настройки регламента.
		ПерваяСтрока = ТаблицаПолномочий[0];
		РезультатФункции = ПерваяСтрока.БланкДляОтображения;
	Иначе
		РезультатФункции = ПустойБланк;
	КонецЕсли;
	// Заполнение бланка запасными значениями.
	Если НЕ ЗначениеЗаполнено(РезультатФункции) Тогда
		// Не удаётся получить настройки из регламента.
		БланкОтображенияПоУмолчанию					 = Неопределено;
		БланкДляИмпортаПоУмолчанию					 = Неопределено;
		ПравилоОбработкиПоУмолчанию					 = Неопределено;
		ПравилоПроверкиПоУмолчанию					 = Неопределено;
		БланкСводнойТаблицыПоУмолчанию				 = Неопределено;
		БланкОтображенияПоУмолчаниюМногопериодный	 = Неопределено;
		Справочники.ВидыОтчетов.ПолучитьНастройкиПоУмолчанию(ВидОтчетаВход, БланкОтображенияПоУмолчанию, БланкДляИмпортаПоУмолчанию, ПравилоОбработкиПоУмолчанию, ПравилоПроверкиПоУмолчанию, БланкСводнойТаблицыПоУмолчанию, БланкОтображенияПоУмолчаниюМногопериодный);
		ЭтоМногопериодныйПроцесс = (ПериодВход <> ПериодОкончаниеВход);
		Если ЭтоМногопериодныйПроцесс Тогда
			Если ЗначениеЗаполнено(БланкОтображенияПоУмолчаниюМногопериодный) Тогда
				// Возьмём многопериодный бланк по умолчанию.
				РезультатФункции = БланкОтображенияПоУмолчаниюМногопериодный;
			Иначе
				Если ЗначениеЗаполнено(БланкСводнойТаблицыПоУмолчанию) Тогда
					// Возьмём бланк сводной таблицы по умолчанию.
					РезультатФункции = БланкСводнойТаблицыПоУмолчанию;
				Иначе
					// Найдём случайный многопериодный или сводный бланк.
					НовыйБланк = ПолучитьСлучайныйМногопериодныйСводныйБланк(ВидОтчетаВход);
					Если ЗначениеЗаполнено(НовыйБланк) Тогда
						РезультатФункции = НовыйБланк;
					Иначе
						// Сформируем бланк по умолчанию и назначим его основным.
						НаименованиеОтчета = Строка(ВидОтчетаВход) + НСтр("ru = ' (многопериодный)'");
						РезультатФункции = СоздатьМногопериодныйБланкПоУмолчанию(ВидОтчетаВход, НаименованиеОтчета);
						Справочники.БланкиОтчетов.УстановитьБланкОсновным(РезультатФункции);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			// Получение бланка по умолчанию.
			Если ЗначениеЗаполнено(БланкОтображенияПоУмолчанию) Тогда
				РезультатФункции = БланкОтображенияПоУмолчанию;
			Иначе
				РезультатФункции = ПустойБланк;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Значение получено. Не изменяем.
	КонецЕсли;
	Возврат РезультатФункции;	
КонецФункции		// ПолучитьБланкНовогоОтчета()

// Генерирует объеты БД по входной структуре СтруктураОбъекта.
Процедура СоздатьОбъектПоСтруктуре(СтруктураОбъекта) Экспорт
	
	НовыйОбъект=Документы[СтруктураОбъекта.ДокументБД.Наименование].СоздатьДокумент();
	ДанныеДляЗаполнения = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(СтруктураОбъекта.ВидОтчета, 
	, СтруктураОбъекта.Организация
	, 
	, СтруктураОбъекта.ВерсияРегламента);	
	Если ДанныеДляЗаполнения.Количество()=0 Тогда												
		Возврат
	КонецЕсли;												
	
	ЗаполнитьЗначенияСвойств(НовыйОбъект, ДанныеДляЗаполнения);
	
	НовыйОбъект.УстановитьНовыйНомер();
	Если ТипЗнч(НовыйОбъект) = Тип("ДокументОбъект.НастраиваемыйОтчет") Тогда
		Если ДанныеДляЗаполнения.Свойство("БланкОтчета") И Строка(ДанныеДляЗаполнения.БланкОтчета)<>"" Тогда
			НовыйОбъект.ШаблонОтчета = ДанныеДляЗаполнения.БланкОтчета;
			Если СокрЛП(ДанныеДляЗаполнения.БланкОтчета.РежимБланка) = "1" Тогда
				НовыйОбъект.СпособВывода = "СводнаяТаблица";
			Иначе
				НовыйОбъект.СпособВывода = "Бланк " + Строка(ДанныеДляЗаполнения.БланкОтчета);
			КонецЕсли;
		Иначе
			// Запасные настройки отображения отчёта.
			ТекВерсияРегламента			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОбъекта, "ВерсияРегламента",			 Справочники.Сценарии.ПустаяСсылка());
			ТекВидОтчета				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОбъекта, "ВидОтчета",				 Справочники.ВидыОтчетов.ПустаяСсылка());
			ТекОрганизация				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОбъекта, "Организация",				 Справочники.Организации.ПустаяСсылка());
			ТекПериодСценария			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОбъекта, "ПериодСценария",			 Справочники.Периоды.ПустаяСсылка());
			ТекПериодСценарияОкончание	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОбъекта, "ПериодСценарияОкончание",	 Справочники.Периоды.ПустаяСсылка());
			ТекСценарий					 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураОбъекта, "Сценарий",					 Справочники.Сценарии.ПустаяСсылка());
			НовыйБланк = ПолучитьБланкНовогоОтчета(ТекСценарий, ТекОрганизация, ТекВидОтчета, ТекПериодСценария, ТекПериодСценарияОкончание, ТекВерсияРегламента);
			Если ЗначениеЗаполнено(НовыйБланк) Тогда
				НовыйОбъект.ШаблонОтчета = НовыйБланк;
			Иначе
				// Не удалось определить бланк. Не заполняем шаблон отчёта.
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Не требуется создавать бланк.
	КонецЕсли;
	
	НовыйОбъект.Дата           = ТекущаяДата();
	Если СтруктураОбъекта.ДокументБД.ИспользоватьШаблоны Тогда
		НовыйОбъект[СтруктураОбъекта.ДокументБД.РеквизитШаблонаДокумета]=СтруктураОбъекта.ВидОтчета;
	КонецЕсли;	  
	
	
	Если ДанныеДляЗаполнения.Свойство("СпособФормированияОтчета") И ДанныеДляЗаполнения.СпособФормированияОтчета =Перечисления.СпособыФормированияОтчетов.Импорт  Тогда
		Если ДанныеДляЗаполнения.Свойство("ВИБ") Тогда
			НовыйОбъект.ИспользуемаяИБ =  ДанныеДляЗаполнения.ВИБ;
		КонецЕсли;	  
	КонецЕсли;
	
	ТекИб = Справочники.ТипыБазДанных.ТекущаяИБ;
	ДокументБдЭлиминация 				= Справочники.ДокументыБД.НайтиПоНаименованию("Элиминация", , , ТекИб);
	ДокументБдКорректировкаПоказателей 	= Справочники.ДокументыБД.НайтиПоНаименованию("КорректировкаЗначенийПоказателей", , , ТекИб);
	
	Если СтруктураОбъекта.ДокументБД = ДокументБдЭлиминация Тогда
		НовыйОбъект.ОрганизацияДляЭлиминации    = СтруктураОбъекта.Организация;
	Иначе
		НовыйОбъект.Организация				    = СтруктураОбъекта.Организация;
	КонецЕсли;
	НовыйОбъект.Сценарий       = СтруктураОбъекта.Сценарий;
	НовыйОбъект.ПериодОтчета   =  СтруктураОбъекта.ПериодСценария;
	Если НЕ НовыйОбъект.Метаданные().Реквизиты.Найти("ПериодОкончания") = Неопределено Тогда
		Если СтруктураОбъекта.Свойство("ПериодСценарияОкончание") Тогда
			НовыйОбъект.ПериодОкончания 		= СтруктураОбъекта.ПериодСценарияОкончание;
		КонецЕсли;
	КонецЕсли;	
	Если НЕ НовыйОбъект.Метаданные().Реквизиты.Найти("УправлениеПериодом") = Неопределено Тогда
		КонтекстПроцесса 		= УправлениеРабочимиПроцессамиУХ.ПолучитьКонтекстУправленияПериодомСценария(СтруктураОбъекта.Сценарий,СтруктураОбъекта.ПериодСценария);
		УОП						= КонтекстПроцесса.Ссылка;
		НовыйОбъект.УправлениеПериодом =  УОП;	
	КонецЕсли;
	
	ТаблицаВалютОтчетности 	= УправлениеОтчетамиУХ.ПолучитьТаблицуВалютДляВерсииОрганизационнойСтруктуры(СтруктураОбъекта.ВерсияРегламента);
	СтрокиВалюты 					= ТаблицаВалютОтчетности.НайтиСтроки(Новый Структура("Организация",СтруктураОбъекта.Организация));
	
	Если СтрокиВалюты.Количество()=0 Тогда
		ТекстОшибки = НСтр("ru = 'Версия регламента %ВерсияРегламента% не содержит настроек для заполнения основной валюты документа %ДокументБД% по шаблону %ВидОтчета%.
                           |Документ не создан!'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВерсияРегламента%", Строка(СтруктураОбъекта.ВерсияРегламента));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ДокументБД%", Строка(СтруктураОбъекта.ДокументБД));
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ВидОтчета%", Строка(СтруктураОбъекта.ВидОтчета));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки,,,СтатусСообщения.Внимание);	
		Возврат;
		
		
	КонецЕсли;	
	
	
	Если СтруктураОбъекта.ДокументБД = ДокументБдЭлиминация Тогда
		НовыйОбъект.ВалютаЭлиминационныхПроводок 	= СтрокиВалюты[0].ОсновнаяВалюта;
	ИначеЕсли СтруктураОбъекта.ДокументБД = ДокументБдКорректировкаПоказателей Тогда
	Иначе	
		НовыйОбъект.ОсновнаяВалюта				 	= СтрокиВалюты[0].ОсновнаяВалюта;
	КонецЕсли;
	
	Если ОбщегоНазначенияУХ.ЕстьТабличнаяЧастьОбъекта("ДополнительныеВалюты",НовыйОбъект) Тогда
		
		НовыйОбъект.ДополнительныеВалюты.Очистить();
		
		Для Каждого ЭлементВалюта Из СтрокиВалюты Цикл
			
			Для Каждого Элемент Из ЭлементВалюта.ДополнительныеВалюты Цикл		  
				НовыйОбъект.ДополнительныеВалюты.Добавить().Валюта = Элемент.Значение;		  
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если НЕ СтруктураОбъекта.ДокументБД = ДокументБдКорректировкаПоказателей Тогда	
		ОсновнаяВалюта = Справочники.Валюты.ПустаяСсылка();
		Если СтруктураОбъекта.ДокументБД = ДокументБдЭлиминация Тогда
			ОсновнаяВалюта = НовыйОбъект.ВалютаЭлиминационныхПроводок;
		Иначе
			ОсновнаяВалюта = НовыйОбъект.ОсновнаяВалюта;
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(ОсновнаяВалюта) Тогда
			ТекстСообщения = НСтр("ru = 'Не удалось определить валюту документа %НовыйОбъект%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НовыйОбъект%", Строка(НовыйОбъект));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураОбъекта.ДокументБД.Согласуется Тогда  
		Если ТипЗнч(НовыйОбъект) = Тип("ДокументОбъект.НастраиваемыйОтчет") Тогда
			МодульСогласованияДокументовУХ.ИзменитьСостояниеСогласованияОбъекта(НовыйОбъект, Перечисления.СостоянияОтчетов.Запланирован);		  
		Иначе
			// Не изменяем прочие состояния.
		КонецЕсли;
	КонецЕсли;												
	
	ЗаполнитьРеквизитПоСтруктуре(НовыйОбъект, СтруктураОбъекта, "ВидОперации");
	ЗаполнитьРеквизитПоСтруктуре(НовыйОбъект, СтруктураОбъекта, "ПланСчетов");
	ЗаполнитьРеквизитПоСтруктуре(НовыйОбъект, СтруктураОбъекта, "ДвиженияПоРегиструБухгалтерии");
	
	Попытка
		НовыйОбъект.Записать();
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось записать документ %НовыйОбъект%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НовыйОбъект%", Строка(НовыйОбъект));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Внимание);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Изменяет состояние экземпляров отчетов в списке СпДокументов по параметрам СтруктураПараметров.
Процедура ИзменитьСостояниеДокументов(СпДокументов, СтруктураПараметров) Экспорт

	Если Не СтруктураПараметров.Свойство("Состояние") ИЛИ СтруктураПараметров.Состояние = Перечисления.СостоянияОтчетов.ПустаяСсылка() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастраиваемыйОтчет.Ссылка КАК Экземпляр
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|ГДЕ
	|	НастраиваемыйОтчет.Ссылка В(&СписокЭкземпляров)
	|ИТОГИ ПО
	|	Экземпляр";
	Запрос.УстановитьПараметр("ВыбиратьИсторию", СтруктураПараметров.Состояние=Перечисления.СостоянияОтчетов.Возвращен);
	Запрос.УстановитьПараметр("СписокЭкземпляров", СпДокументов);
	ВыборкаПоДок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаПоДок.Следующий() Цикл
		
		ОбъектДок = ВыборкаПоДок.Экземпляр.ПолучитьОбъект();
		ОбъектДок.ОбменДанными.Загрузка = Истина;		
		МодульСогласованияДокументовУХ.ИзменитьСостояниеСогласованияОбъекта(ОбъектДок, СтруктураПараметров.Состояние);
		ОбъектДок.Записать();
		
	КонецЦикла;	

КонецПроцедуры // ИзменитьСостояниеДокументов(СпДокументов,СтруктураПараметров)

// Проводит документы в списке СписокВход, когда свойство Состояние находится в 
// значении Утвержден. В случае отсутствия или незаполненности свойства пропускает
// операцию. В остальных случаях - отменяет проведение.
Процедура ПровестиДокументыПоСтруктуреПараметров(СписокВход, СтруктураПараметровВход)
	ПустоеСостояние = Перечисления.СостоянияОтчетов.ПустаяСсылка();
	НовоеСостояние = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровВход, "Состояние", ПустоеСостояние);
	Если НовоеСостояние = Перечисления.СостоянияОтчетов.Утвержден Тогда
		// Проведем документы.
		Для Каждого ТекСписокВход Из СписокВход Цикл
			ТекЗначение = ТекСписокВход.Значение;
			ПредставлениеТекЗначения = Строка(ТекЗначение);
			Попытка
				ДокументОбъект = ТекЗначение.ПолучитьОбъект();
				ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось провести документ %ИмяДокумента%: %ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяДокумента%", ПредставлениеТекЗначения);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				Прервать;
			КонецПопытки;
		КонецЦикла;
	ИначеЕсли НовоеСостояние = ПустоеСостояние Тогда	
		Возврат; 			// Неизвестное или пустое состояние. Отменяем операцию.
	Иначе
		// В остальных случаях отменим проведение.
		Для Каждого ТекСписокВход Из СписокВход Цикл
			ТекЗначение = ТекСписокВход.Значение;
			ПредставлениеТекЗначения = Строка(ТекЗначение);
			Попытка
				ДокументОбъект = ТекЗначение.ПолучитьОбъект();
				ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось провести документ %ИмяДокумента%: %ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ИмяДокумента%", ПредставлениеТекЗначения);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				Прервать;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Изменяет состояние объектов из списка СписокОбъектовВход по структуре
// параметров СтруктураПараметровВход.
Процедура ИзменитьСостояниеОбъектовПроцесса(СписокОбъектовВход, СтруктураПараметровВход) Экспорт
	// Разделим исходный список на список с экземплярами отчетов и на список с документами для перепроведения.
	СписокЭкземпляры = Новый СписокЗначений;			// Список с экземплярами отчетов.
	СписокПроведения = Новый СписокЗначений;			// Список документов для проведения.
	Для Каждого ТекСписокОбъектовВход Из СписокОбъектовВход Цикл
		ТекЗначение = ТекСписокОбъектовВход.Значение;
		Если ТипЗнч(ТекЗначение) = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
			СписокЭкземпляры.Добавить(ТекСписокОбъектовВход.Значение);
		ИначеЕсли ТипЗнч(ТекЗначение) = Тип("ДокументСсылка.ТрансформационнаяКорректировка") Тогда	
			СписокПроведения.Добавить(ТекСписокОбъектовВход.Значение);
		ИначеЕсли ТипЗнч(ТекЗначение) = Тип("ДокументСсылка.Трансляция") Тогда	
			СписокПроведения.Добавить(ТекСписокОбъектовВход.Значение);
		ИначеЕсли ТипЗнч(ТекЗначение) = Тип("ДокументСсылка.Элиминация") Тогда	
			СписокПроведения.Добавить(ТекСписокОбъектовВход.Значение);			
		Иначе
			ТекстСообщения = НСтр("ru = 'Неизвестный вариант документа %Ссылка%. Пропущено.'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Строка(ТекЗначение));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	КонецЦикла;
	// Обработаем список с экземплярами отчетов.
	Если СписокЭкземпляры.Количество() > 0 Тогда
		ИзменитьСостояниеДокументов(СписокЭкземпляры, СтруктураПараметровВход);
	Иначе
		// Пустой список. Пропускаем.
	КонецЕсли;
	// Обработаем список с документами для перепроведения.
	Если СписокПроведения.Количество() > 0 Тогда
		ПровестиДокументыПоСтруктуреПараметров(СписокПроведения, СтруктураПараметровВход);
	Иначе
		// Пустой список. Пропускаем.
	КонецЕсли;
КонецПроцедуры

// Записывает в регистр ДатыВыполненияДействийПоРасписаниямЭтапов этап ЭтапВход,
// дату последнего исполнения ДатаПоследнегоИсполненияВход, дату следующего
// исполнения ДатаСледующегоИсполненияВход.
Процедура УстановитьДатуОбработкиЭтапаПоРасписанию(ЭтапВход, ДатаПоследнегоИсполненияВход, ДатаСледующегоИсполненияВход, ЭкземплярПроцессаВход)
	Попытка
		МенеджерЗаписи = РегистрыСведений.ДатыВыполненияДействийПоРасписаниямЭтапов.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ЭтапПроцесса				 = ЭтапВход;
		МенеджерЗаписи.ЭкземплярПроцесса		 = ЭкземплярПроцессаВход;
		МенеджерЗаписи.ДатаПоследнегоИсполнения	 = ДатаПоследнегоИсполненияВход;
		МенеджерЗаписи.ДатаСледующегоИсполнения	 = ДатаСледующегоИсполненияВход;
		МенеджерЗаписи.Записать();
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось установить дату исполнения по этапу %Этап%: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(ЭтапВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры

// Записывает в регистр ДатыВыполненияДействийПоРасписаниямЭтапов даты последнего и 
// следующего выполняения действий по расписанию этапа процесса ЭтапВход. В качестве
// последнего значения будет установлена ДатаВход, когда параметр не задан -
// текущая дата. Дата следующего выполнения будет вычислена на основе даты
// последнего и настройки расписания этапа.
Процедура УстановитьТекущуюДатуОбработкиЭтапа(ЭтапВход, ЭкземплярПроцессаВход, ДатаВход = Неопределено) Экспорт
	Если ДатаВход = Неопределено Тогда
		ДатаРабочая = ТекущаяДата();
	Иначе
		ДатаРабочая = ДатаВход;
	КонецЕсли;
	РасписаниеХранилище = ЭтапВход.РасписаниеАвтоматическогоВыполнения;
	РасписаниеЗначение = РасписаниеХранилище.Получить();
	Если ТипЗнч(РасписаниеЗначение) = Тип("РасписаниеРегламентногоЗадания") Тогда
		НоваяДата = ОбщегоНазначенияСерверУХ.ПолучитьЗапланированныйМоментЗапускаЗадания(РасписаниеЗначение, "", ДатаРабочая + 1, ДатаРабочая);
		УстановитьДатуОбработкиЭтапаПоРасписанию(ЭтапВход, ДатаРабочая, НоваяДата, ЭкземплярПроцессаВход);
	Иначе
		// Не удалось получить расписание. Пропускаем.
	КонецЕсли;
КонецПроцедуры

// По экземпляру процесса возвращает структуру, содержащую период отчета и сценарий. 
Функция ПолучитьСтруктуруПериодаСценарияПоЭкземпляруПроцесса(ЭкземплярПроцессаВход)
	РезультатФункции = Новый Структура;
	КлючевойОбъектПроцесса = ЭкземплярПроцессаВход.КлючевойОбъектПроцесса;
	Если ТипЗнч(КлючевойОбъектПроцесса) = Тип("ДокументСсылка.УправлениеПериодомСценария") Тогда
		ПериодОтчета	 = КлючевойОбъектПроцесса.ПериодСценария;
		Сценарий		 = КлючевойОбъектПроцесса.Сценарий;
	Иначе
		ПериодОтчета	 = ЭкземплярПроцессаВход.Период;
		Сценарий		 = ЭкземплярПроцессаВход.Сценарий;
	КонецЕсли;
	РезультатФункции.Вставить("ПериодОтчета",	 ПериодОтчета);
	РезультатФункции.Вставить("Сценарий",		 Сценарий);
	Возврат РезультатФункции;
КонецФункции

// Формирует пробную отчетность в процессе ЭкземплярПроцессаВход на этапе ЭтапВход.  
Процедура СформироватьПробнуюОтчетностьНаЭтапе(ЭтапВход, ЭкземплярПроцессаВход)
	// Инициализация.
	Перем мПоследователиСтрок, мПредшественникиСтрок, СостоянияВыполненияПроцесса;
	СостоянияВыполненияПроцесса = Неопределено;
	СтруктураПериодСценарий = ПолучитьСтруктуруПериодаСценарияПоЭкземпляруПроцесса(ЭкземплярПроцессаВход);
	ПериодОтчета	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПериодСценарий, "ПериодОтчета", Справочники.Периоды.ПустаяСсылка());
	Сценарий		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПериодСценарий, "Сценарий", Справочники.Сценарии.ПустаяСсылка());
	// Заполнение данных процесса.
	УправлениеПроцессамиСогласованияУХ.ИнициализироватьПроцесс(ПериодОтчета, Сценарий, ТекущаяДатаСеанса(), СостоянияВыполненияПроцесса, мПоследователиСтрок, мПредшественникиСтрок);
	// Выполнение этапов.
	СтруктураВрем = Новый Структура;
	СтруктураВрем.Вставить("ПериодСценария",	 ПериодОтчета);
	СтруктураВрем.Вставить("Сценарий",			 Сценарий);
	СтруктураВрем.Вставить("ШаблонПроцесса",	 ЭкземплярПроцессаВход.ШаблонПроцесса);
	ФиксСтруктураОсновныхРеквизитов = Новый ФиксированнаяСтруктура(СтруктураВрем);
	Обработки.УправлениеПроцессомПодготовкиОтчетности.СформироватьПробнуюОтчетность(ЭтапВход, мПредшественникиСтрок, мПоследователиСтрок, ФиксСтруктураОсновныхРеквизитов, СостоянияВыполненияПроцесса, ЭкземплярПроцессаВход);
КонецПроцедуры

// Выполняет назначенные на эта действия в процессе ЭкземплярПроцессаВход на этапе ЭтапВход.  
Процедура ВыполнитьДействияЭтапа(ЭтапВход, ЭкземплярПроцессаВход)
	// Инициализация.
	Перем мПоследователиСтрок, мПредшественникиСтрок, СостоянияВыполненияПроцесса;
	СостоянияВыполненияПроцесса = Неопределено;
	СтруктураПериодСценарий = ПолучитьСтруктуруПериодаСценарияПоЭкземпляруПроцесса(ЭкземплярПроцессаВход);
	ПериодОтчета	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПериодСценарий, "ПериодОтчета", Справочники.Периоды.ПустаяСсылка());
	Сценарий		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПериодСценарий, "Сценарий", Справочники.Сценарии.ПустаяСсылка());
	// Заполнение данных процесса.
	УправлениеПроцессамиСогласованияУХ.ИнициализироватьПроцесс(ПериодОтчета, Сценарий, ТекущаяДатаСеанса(), СостоянияВыполненияПроцесса, мПоследователиСтрок, мПредшественникиСтрок);
	// Выполнение этапов.
	СтруктураВрем = Новый Структура;
	СтруктураВрем.Вставить("ПериодСценария",	 ПериодОтчета);
	СтруктураВрем.Вставить("Сценарий",			 Сценарий);
	СтруктураВрем.Вставить("ШаблонПроцесса",	 ЭкземплярПроцессаВход.ШаблонПроцесса);
	ФиксСтруктураОсновныхРеквизитов = Новый ФиксированнаяСтруктура(СтруктураВрем);
	Обработки.УправлениеПроцессомПодготовкиОтчетности.ВыполнитьДействияЭтапа(ЭтапВход, ФиксСтруктураОсновныхРеквизитов, СостоянияВыполненияПроцесса, ЭкземплярПроцессаВход);
КонецПроцедуры

// Выполняет для этапа процесса ЭтапВход в процессе ЭкземплярПроцессаВход назначенное 
//действие по расписанию и записывает дату выполнения в регистр.
Процедура ВыполнитьНазначенноеДействиеДляЭтапа(ЭтапВход, ЭкземплярПроцессаВход, СостояниеЭтапаВход) Экспорт
	// Выполнение действия.
	ЕстьОшибки = Ложь;
	Попытка
		ВыполняемоеДействие = ЭтапВход.ДействиеПоРасписанию;
		Если ВыполняемоеДействие = Перечисления.ДействияЭтапаПоРасписанию.ВыполнитьДоТекущего Тогда
			// Выполнить процесс до текущего этапа.
			Если (СостояниеЭтапаВход <> Перечисления.СостоянияЭтаповПроцессов.Утвержден) И (СостояниеЭтапаВход <> Перечисления.СостоянияЭтаповУниверсальныхПроцессов.Завершен) Тогда
				УправлениеПроцессом = ЭкземплярПроцессаВход.КлючевойОбъектПроцесса;
				Если ТипЗнч(УправлениеПроцессом) = Тип("ДокументСсылка.УправлениеПериодомСценария") Тогда
					Период				 = УправлениеПроцессом.ПериодСценария;
					Сценарий			 = УправлениеПроцессом.Сценарий;
					ВерсияРегламента	 = УправлениеПроцессом.ВерсияОрганизационнойСтруктуры;
					Дата = ТекущаяДатаСеанса();
					СостоянияВыполненияПроцесса = Новый ТаблицаЗначений;
					СостоянияВыполненияПроцесса.Колонки.Добавить("МодификацияСтроки");
					СостоянияВыполненияПроцесса.Колонки.Добавить("Этап");
					СостоянияВыполненияПроцесса.Колонки.Добавить("Организация");
					СостоянияВыполненияПроцесса.Колонки.Добавить("СостояниеЭтапа");
					СостоянияВыполненияПроцесса.Колонки.Добавить("ДатаНачала");
					СостоянияВыполненияПроцесса.Колонки.Добавить("ДатаОкончания");
					СостоянияВыполненияПроцесса.Колонки.Добавить("СостояниеЭтапаРасчетное");
					СостоянияВыполненияПроцесса.Колонки.Добавить("ДатаНачалаРасчетная");
					СостоянияВыполненияПроцесса.Колонки.Добавить("ДатаОкончанияРасчетная");
					СостоянияВыполненияПроцесса.Колонки.Добавить("ПлановаяДлительностьЭтапа");
					СостоянияВыполненияПроцесса.Колонки.Добавить("ПрофильОрганизации");
					СостоянияВыполненияПроцесса.Колонки.Добавить("ОтветственныйЗаЭтап");
					СостоянияВыполненияПроцесса.Колонки.Добавить("ДатаОкончанияПлановая");
					СостоянияВыполненияПроцесса.Колонки.Добавить("ВидДокументовЭтапа");
					мПоследователиСтрок = Новый Соответствие;
					мПредшественникиСтрок = Новый Соответствие;
					Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
						Модуль = ОбщегоНазначения.ОбщийМодуль("УправлениеПроцессамиСогласованияУХ");
						Модуль.ИнициализироватьПроцесс(Период, Сценарий, Дата, СостоянияВыполненияПроцесса, мПоследователиСтрок, мПредшественникиСтрок);
					КонецЕсли;
					УправлениеПроцессамиСогласованияУХ.ВыполнитьПроцессДоЭтапа(ЭтапВход, ВерсияРегламента, СостоянияВыполненияПроцесса, Период, Сценарий, ЭкземплярПроцессаВход, мПредшественникиСтрок, мПоследователиСтрок);
				Иначе
					ТекстСообщения = НСтр("ru = 'Не удалось выполить назначенное действие для этапа %Этап%. Передан неизвестный ключевой объект процесса.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(ЭтапВход));
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				КонецЕсли;
			Иначе
				// Этап уже утверждён. Пропускаем.
			КонецЕсли;
		ИначеЕсли ВыполняемоеДействие = Перечисления.ДействияЭтапаПоРасписанию.ВыполнитьТекущий Тогда	
			// Выполним действия этапа.
			ВыполнитьДействияЭтапа(ЭтапВход, ЭкземплярПроцессаВход);
		ИначеЕсли ВыполняемоеДействие = Перечисления.ДействияЭтапаПоРасписанию.СформироватьПробнуюОтчетность Тогда		
			// Сформировать пробную отчетность.
			СформироватьПробнуюОтчетностьНаЭтапе(ЭтапВход, ЭкземплярПроцессаВход);
		ИначеЕсли ВыполняемоеДействие = Перечисления.ДействияЭтапаПоРасписанию.НеВыполнятьДействий Тогда	
			// Не требуется выполнять действий.
		ИначеЕсли ВыполняемоеДействие = Перечисления.ДействияЭтапаПоРасписанию.ПустаяСсылка() Тогда	
			// Не требуется выполнять действий.
		Иначе
			ТекстСообщения = НСтр("ru = 'Неизвестный вариант действия %Действие% для этапа %Этап%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Действие%", Строка(ВыполняемоеДействие));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(ЭтапВход));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			ЕстьОшибки = Истина;
		КонецЕсли;
	Исключение
		ЕстьОшибки = Истина;
		ТекстСообщения = НСтр("ru = 'Возникли ошибки при выполнении действий %Действие% этапа %Этап% по расписанию: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Действие%", Строка(ВыполняемоеДействие));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(ЭтапВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
	// Запись даты в регистр.
	Если НЕ ЕстьОшибки Тогда
		УстановитьТекущуюДатуОбработкиЭтапа(ЭтапВход, ЭкземплярПроцессаВход);
	Иначе
		// Не удалось записать. Не добавляем дату в регистр.
	КонецЕсли;
КонецПроцедуры

Процедура ПроцессЗапущен(ВерсияОрганизационнойСтруктуры,ТекДокументСсылка,тПроцессЗапущен = Ложь) Экспорт
	
	ШаблонПроцесса = Неопределено;
	ОпределитьСвязанныйШаблон(ВерсияОрганизационнойСтруктуры,ШаблонПроцесса);
	тПроцессЗапущен = МодульУправленияПроцессамиУХ.ПроверитьПроцессИнициализирован(ТекДокументСсылка,Неопределено,,ШаблонПроцесса);	
			
КонецПроцедуры	

// Возвращает массив экземпляров отчетов для закрытия периода по документу
// управления периодом УправлениеПериодомВход.
Функция ПолучитьЭкземплярыОтчетовЗакрытияПериода(УправлениеПериодомВход)
	РезультатФункции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НастраиваемыйОтчет.Ссылка КАК Ссылка,
		|	НастраиваемыйОтчет.Организация КАК Организация,
		|	НастраиваемыйОтчет.ВидОтчета КАК ВидОтчета,
		|	НастраиваемыйОтчет.ПериодОтчета КАК ПериодОтчета,
		|	НастраиваемыйОтчет.ПериодОкончания КАК ПериодОкончания,
		|	НастраиваемыйОтчет.Сценарий КАК Сценарий
		|ИЗ
		|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
		|ГДЕ
		|	НЕ НастраиваемыйОтчет.ПометкаУдаления
		|	И НастраиваемыйОтчет.УправлениеПериодом = &УправлениеПериодом";
	Запрос.УстановитьПараметр("УправлениеПериодом", УправлениеПериодомВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатФункции.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	РезультатФункции = ОбщегоНазначенияКлиентСервер.СвернутьМассив(РезультатФункции);
	Возврат РезультатФункции;	
КонецФункции		// ПолучитьЭкземплярыОтчетовЗакрытияПериода()

// Выбирает из массива экземпляров МассивДокументовВход те из них,
// которые не принадлежат закрытым этапам.
Функция ОтделитьЗакрытыеЭтапы(МассивДокументовВход)
	РезультатФункции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СостоянияВыполненияПроцессовСрезПоследних.Организация КАК Организация,
		|	СостоянияВыполненияПроцессовСрезПоследних.ПериодСценария КАК ПериодСценария,
		|	СостоянияВыполненияПроцессовСрезПоследних.ЭтапПроцесса КАК ЭтапПроцесса,
		|	СостоянияВыполненияПроцессовСрезПоследних.Сценарий КАК Сценарий,
		|	СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа КАК СостояниеЭтапа
		|ПОМЕСТИТЬ ВТ_СостоянияЭтапов
		|ИЗ
		|	РегистрСведений.СостоянияВыполненияПроцессов.СрезПоследних КАК СостоянияВыполненияПроцессовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВТ_СостоянияЭтапов.Организация КАК Организация,
		|	ВТ_СостоянияЭтапов.ПериодСценария КАК ПериодСценария,
		|	ВТ_СостоянияЭтапов.ЭтапПроцесса КАК ЭтапПроцесса,
		|	ВТ_СостоянияЭтапов.Сценарий КАК Сценарий,
		|	ВТ_СостоянияЭтапов.СостояниеЭтапа КАК СостояниеЭтапа,
		|	ЭтапыУниверсальныхПроцессовФормируемыеДокументы.ШаблонДокумента КАК ШаблонДокумента
		|ПОМЕСТИТЬ ВТ_ШаблоныДокументовЭтапов
		|ИЗ
		|	ВТ_СостоянияЭтапов КАК ВТ_СостоянияЭтапов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыУниверсальныхПроцессовФормируемыеДокументы
		|		ПО ВТ_СостоянияЭтапов.ЭтапПроцесса = ЭтапыУниверсальныхПроцессовФормируемыеДокументы.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ШаблоныДокументовЭтапов.Организация КАК Организация,
		|	ВТ_ШаблоныДокументовЭтапов.ПериодСценария КАК ПериодСценария,
		|	ВТ_ШаблоныДокументовЭтапов.ЭтапПроцесса КАК ЭтапПроцесса,
		|	ВТ_ШаблоныДокументовЭтапов.Сценарий КАК Сценарий,
		|	ВТ_ШаблоныДокументовЭтапов.СостояниеЭтапа КАК СостояниеЭтапа,
		|	ВТ_ШаблоныДокументовЭтапов.ШаблонДокумента КАК ШаблонДокумента,
		|	ОрганизационныеЕдиницыЭтаповПроцессов.ВерсияРегламентаПодготовкиОтчетности КАК ВерсияРегламентаПодготовкиОтчетности
		|ПОМЕСТИТЬ ВТ_ОрганизацииЭтапов
		|ИЗ
		|	ВТ_ШаблоныДокументовЭтапов КАК ВТ_ШаблоныДокументовЭтапов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизационныеЕдиницыЭтаповПроцессов КАК ОрганизационныеЕдиницыЭтаповПроцессов
		|		ПО ВТ_ШаблоныДокументовЭтапов.ЭтапПроцесса = ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса
		|			И ВТ_ШаблоныДокументовЭтапов.Организация = ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НастраиваемыйОтчет.Ссылка КАК Ссылка,
		|	ВТ_ОрганизацииЭтапов.ЭтапПроцесса КАК ЭтапПроцесса,
		|	ВТ_ОрганизацииЭтапов.СостояниеЭтапа КАК СостояниеЭтапа,
		|	НастраиваемыйОтчет.УправлениеПериодом КАК УправлениеПериодом,
		|	ВТ_ОрганизацииЭтапов.ШаблонДокумента КАК ШаблонДокумента,
		|	НастраиваемыйОтчет.ПериодОтчета КАК ПериодОтчета,
		|	ВТ_ОрганизацииЭтапов.Организация КАК Организация,
		|	ВТ_ОрганизацииЭтапов.Сценарий КАК Сценарий,
		|	ВТ_ОрганизацииЭтапов.ВерсияРегламентаПодготовкиОтчетности КАК ВерсияРегламентаПодготовкиОтчетности
		|ПОМЕСТИТЬ ВТ_СостоянияДокументов
		|ИЗ
		|	ВТ_ОрганизацииЭтапов КАК ВТ_ОрганизацииЭтапов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
		|		ПО ВТ_ОрганизацииЭтапов.ЭтапПроцесса.Владелец.СвязанныйРегламент = НастраиваемыйОтчет.УправлениеПериодом.ВерсияОрганизационнойСтруктуры
		|			И ВТ_ОрганизацииЭтапов.ШаблонДокумента = НастраиваемыйОтчет.ВидОтчета
		|			И ВТ_ОрганизацииЭтапов.Организация = НастраиваемыйОтчет.Организация
		|			И ВТ_ОрганизацииЭтапов.Сценарий = НастраиваемыйОтчет.Сценарий
		|ГДЕ
		|	НастраиваемыйОтчет.Ссылка В(&Ссылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_СостоянияДокументов.Ссылка КАК Ссылка
		|ИЗ
		|	ВТ_СостоянияДокументов КАК ВТ_СостоянияДокументов
		|ГДЕ
		|	ВТ_СостоянияДокументов.СостояниеЭтапа = &СостояниеЭтапаЗакрыт";
	Запрос.УстановитьПараметр("Ссылка", МассивДокументовВход);
	Запрос.УстановитьПараметр("СостояниеЭтапаЗакрыт", Перечисления.СостоянияЭтаповУниверсальныхПроцессов.Завершен);
	РезультатЗапроса = Запрос.Выполнить();
	ВыгрузкаЗакрытых = РезультатЗапроса.Выгрузить();
	МассивЗакрытых = ВыгрузкаЗакрытых.ВыгрузитьКолонку("Ссылка");
	Для Каждого ТекМассивДокументовВход Из МассивДокументовВход Цикл
		Если МассивЗакрытых.Найти(ТекМассивДокументовВход) = Неопределено Тогда
			РезультатФункции.Добавить(ТекМассивДокументовВход);
		Иначе
			// Документ находится в закрытом этапе. Не изменяем.
		КонецЕсли;
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции		// ОтделитьЗакрытыеЭтапы()

Процедура ВыполнитьРегламентЗакрытияПериода(ТекДокументСсылка) Экспорт
	
	// 1. Утверждаем показатели по версиям (ракурсы)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ВерсииЗначенийПоказателей.ВидОтчета,
	               |	ВерсииЗначенийПоказателей.Организация,
	               |	ВерсииЗначенийПоказателей.Проект
	               |ПОМЕСТИТЬ втВидыОтчетов
	               |ИЗ
	               |	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	               |ГДЕ
	               |	ВерсииЗначенийПоказателей.Сценарий = &Сценарий
	               |	И ВерсииЗначенийПоказателей.ПериодОтчета.ДатаНачала >= &ПериодОтчетаДатаНачала
	               |	И ВерсииЗначенийПоказателей.ПериодОтчета.ДатаОкончания <= &ПериодОтчетаДатаОкончания
	               |	И ВерсииЗначенийПоказателей.ПериодОтчета.Периодичность = &Периодичность
	               |	И ВерсииЗначенийПоказателей.ВидОтчета.ОбъектДляСогласованияЗначений = &ОбъектДляСогласованияЗначений
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втВидыОтчетов.ВидОтчета,
	               |	СтатусыПериодовСценариев.Периоды,
	               |	СтатусыПериодовСценариев.Сценарии,
	               |	СтатусыПериодовСценариев.Организации,
	               |	ОбластиДанныхВидовОтчетов.Ссылка КАК Ракурс,
	               |	СтатусыПериодовСценариев.СтатусБлокировки
	               |ИЗ
	               |	втВидыОтчетов КАК втВидыОтчетов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	               |		ПО (СтатусыПериодовСценариев.Сценарии = &Сценарий)
	               |			И втВидыОтчетов.Организация = СтатусыПериодовСценариев.Организации
	               |			И (СтатусыПериодовСценариев.Периоды.ДатаНачала >= &ПериодОтчетаДатаНачала)
	               |			И (СтатусыПериодовСценариев.Периоды.ДатаОкончания <= &ПериодОтчетаДатаОкончания)
	               |			И (СтатусыПериодовСценариев.Периоды.Периодичность = &Периодичность)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбластиДанныхВидовОтчетов КАК ОбластиДанныхВидовОтчетов
	               |		ПО втВидыОтчетов.ВидОтчета = ОбластиДанныхВидовОтчетов.Владелец
	               |			И (ОбластиДанныхВидовОтчетов.ПометкаУдаления = ЛОЖЬ)
	               |			И (ОбластиДанныхВидовОтчетов.ЭтоГруппа = ЛОЖЬ)
	               |ГДЕ
	               |	НЕ СтатусыПериодовСценариев.Организации = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	               |	И СтатусыПериодовСценариев.СтатусБлокировки = 0";
	
	Запрос.УстановитьПараметр("ПериодОтчетаДатаНачала",ТекДокументСсылка.ПериодСценария.ДатаНачала);
	Запрос.УстановитьПараметр("ПериодОтчетаДатаОкончания",ТекДокументСсылка.ПериодСценарияОкончание.ДатаОкончания);
	Запрос.УстановитьПараметр("Периодичность",ТекДокументСсылка.ПериодСценария.Периодичность);
	Запрос.УстановитьПараметр("Сценарий",ТекДокументСсылка.Сценарий);
	Запрос.УстановитьПараметр("ОбъектДляСогласованияЗначений",Перечисления.ОбъектыСогласованияЗначенийПоказателейОтчетов.Ракурс);

	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл	
		
		ТекущийДокументСогласования = ПолучитьРакурсСогласованияОбласти(ТекДокументСсылка,Выборка.Ракурс,Выборка.Организации);
		
		УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВСостояниеУтверждена(ТекущийДокументСогласования);
 	
		ДокументОбъект = ТекущийДокументСогласования.ПолучитьОбъект();
				
		//
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЭтоЗакрытиеПериода", Истина);
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;	
		
	КонецЦикла;
		
    // 2. Утверждаем показатели по экземплярам 
	МассивЭкземляров = ПолучитьЭкземплярыОтчетовЗакрытияПериода(ТекДокументСсылка);
	МассивЭкземляров = ОтделитьЗакрытыеЭтапы(МассивЭкземляров);
	Для Каждого ТекМассивЭкземляров Из МассивЭкземляров Цикл
		Если ТекМассивЭкземляров = Неопределено Тогда	
			ВызватьИсключение НСтр("ru = 'Ошибка утверждения данных'");	
		КонецЕсли;	
		
		ДокументОбъект = ТекМассивЭкземляров.ПолучитьОбъект();
		ДокументОбъект.ФормироватьДвиженияПоЛимитам = Истина;
		ДокументОбъект.ВсегдаЗаполнятьАналитики = Истина;
		ДокументОбъект.ИнициализироватьКонтекст();
		ДокументОбъект.ФормироватьДвиженияПоЛимитам = Истина;
		
		//
		ДокументОбъект.ДополнительныеСвойства.Вставить("ЭтоЗакрытиеПериода", Истина);
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось перепровести документ %Документ% при закрытии периода'");        		
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Строка(ТекМассивЭкземляров));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецПопытки;	
		
		УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(ТекМассивЭкземляров, Перечисления.СостоянияОтчетов.Утвержден,,,,, Ложь);
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ШаблонЗаполнен(ВерсияОрганизационнойСтруктуры,тШаблонЗаполнен) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ШаблоныУниверсальныхПроцессов.Ссылка
	|ИЗ
	|	Справочник.ШаблоныУниверсальныхПроцессов КАК ШаблоныУниверсальныхПроцессов
	|ГДЕ
	|	ШаблоныУниверсальныхПроцессов.СвязанныйРегламент = &СвязанныйРегламент";
	Запрос.УстановитьПараметр("СвязанныйРегламент", ВерсияОрганизационнойСтруктуры);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		тШаблонЗаполнен =  Истина;
	Иначе
		тШаблонЗаполнен =  Ложь;
	КонецЕсли;
	
КонецПроцедуры	

Процедура ОстановитьПроцессРасширенный(тСсылка,тПроцессОстановлен, ОстанавливатьОбъект = Истина) Экспорт
	
	тПроцессОстановлен = УправлениеПериодомОстановитьПроцесс(тСсылка, ОстанавливатьОбъект);
	
КонецПроцедуры	

Процедура ИнициализироватьПроцессРасширенный(ШаблонПроцесса,тСсылка,тЭкземплярПроцесса) Экспорт
	
	ИнициализироватьПроцесс(Неопределено,ШаблонПроцесса,,тСсылка,,,тЭкземплярПроцесса);
	
КонецПроцедуры	

Процедура НайтиЭкземплярПроцессаРасширенный(Объект) Экспорт
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ЭкземплярПроцесса) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
			|	ЭкземплярПроцесса.Ссылка,
			|	ЭкземплярПроцесса.КлючевойОбъектПроцесса
			|ИЗ
			|	Документ.ЭкземплярПроцесса КАК ЭкземплярПроцесса
			|ГДЕ
			|	НЕ ЭкземплярПроцесса.ПометкаУдаления
			|	И ЭкземплярПроцесса.КлючевойОбъектПроцесса = &КлючевойОбъектПроцесса";
			Запрос.УстановитьПараметр("КлючевойОбъектПроцесса", Объект.Ссылка);
			РезультатЗапроса = Запрос.Выполнить();
			Выгрузка = РезультатЗапроса.Выгрузить();
			Если Выгрузка.Количество() = 1 Тогда
				ПерваяСтрока = Выгрузка[0];
				Объект.ЭкземплярПроцесса = ПерваяСтрока.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьСвязанныйШаблон(ВерсияРегламента,СвязанныйШаблонПроцесса) Экспорт
	
	СвязанныйШаблонПроцесса = Неопределено;
	
	Если ВерсияРегламента = Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ШаблоныУниверсальныхПроцессов.Ссылка
	|ИЗ
	|	Справочник.ШаблоныУниверсальныхПроцессов КАК ШаблоныУниверсальныхПроцессов
	|ГДЕ
	|	ШаблоныУниверсальныхПроцессов.ПометкаУдаления = ЛОЖЬ
	|	И ШаблоныУниверсальныхПроцессов.СвязанныйРегламент = &СвязанныйРегламент";
	
	Запрос.УстановитьПараметр("СвязанныйРегламент",ВерсияРегламента);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СвязанныйШаблонПроцесса = Выборка.Ссылка;		
	КонецЦикла;
	
КонецПроцедуры

// Создает шаблон по версии шаблона ВерсияВход с наименованием 
// НаименованиеВход и возвращает ссылку. Когда такой шаблон уже 
// создан - будет возвращена ссылка на него. В случае неудачи при 
// создании - будет возвращена пустая ссылка.
Процедура СоздатьШаблонПроцесса(ВерсияВход, НаименованиеВход,РезультатФункции) Экспорт
	
	Если ЗначениеЗаполнено(ВерсияВход) Тогда
		Если РегламентыВызовСервера.ОпределитьСвязанныйШаблон(ВерсияВход, РезультатФункции) Тогда
			// Значение уже есть. Оно было передано в РезультатФункции. Ничего не делаем дополнительно.
		Иначе
			Попытка
				НовыйШаблон = Справочники.ШаблоныУниверсальныхПроцессов.СоздатьЭлемент();
				НовыйШаблон.Наименование			 = НаименованиеВход;
				НовыйШаблон.НазначениеПроцесса		 = Перечисления.НазначенияУниверсальныхПроцессов.ПроцессПодготовкиОтчетности;
				НовыйШаблон.СвязанныйРегламент		 = ВерсияВход;
				НовыйШаблон.ТипОбъектаСогласования	 = Справочники.ДокументыБД.НайтиПоНаименованию("УправлениеПериодомСценария", , , Справочники.ТипыБазДанных.ТекущаяИБ);
				НовыйШаблон.АдминистраторПроцесса	 = Пользователи.ТекущийПользователь();
				НовыйШаблон.Записать();
				РезультатФункции = НовыйШаблон.Ссылка;
			Исключение
				ТекстСообщения = НСтр("ru = 'Возникли ошибки при создании шаблона: %ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", Строка(ОписаниеОшибки()));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
	Иначе
		РезультатФункции = Справочники.ШаблоныУниверсальныхПроцессов.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьРакурсСогласованияОбласти(ТекДокумент,Ракурс,Организация, ИспользоватьПроекты = Ложь) Экспорт
	// Попытаемся получить документы Ракурс из БД.
	Запрос = Новый Запрос;
	Если ИспользоватьПроекты Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СогласованиеОбластиДанных.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РакурсДанных КАК СогласованиеОбластиДанных
		|ГДЕ
		|	СогласованиеОбластиДанных.Сценарий = &Сценарий
		|	И СогласованиеОбластиДанных.ПериодОтчета = &Период
		|	И СогласованиеОбластиДанных.Область = &Область
		|	И СогласованиеОбластиДанных.Организация = &Организация
		|	И СогласованиеОбластиДанных.ПометкаУдаления = ЛОЖЬ
		|	И СогласованиеОбластиДанных.Проект = &Проект";
		Запрос.УстановитьПараметр("Проект", ТекДокумент.Проект);
	Иначе 
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СогласованиеОбластиДанных.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РакурсДанных КАК СогласованиеОбластиДанных
		|ГДЕ
		|	СогласованиеОбластиДанных.Сценарий = &Сценарий
		|	И СогласованиеОбластиДанных.ПериодОтчета = &Период
		|	И СогласованиеОбластиДанных.Область = &Область
		|	И СогласованиеОбластиДанных.Организация = &Организация
		|	И СогласованиеОбластиДанных.ПометкаУдаления = ЛОЖЬ";
	КонецЕсли;
	Запрос.УстановитьПараметр("Сценарий", ТекДокумент.Сценарий);
	Если ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
		Запрос.УстановитьПараметр("Период", ТекДокумент.ПериодОтчета);
	Иначе
		Запрос.УстановитьПараметр("Период", ТекДокумент.ПериодСценария);
	КонецЕсли;
	Запрос.УстановитьПараметр("Область", Ракурс);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		// Документ получен. Вернём его.
		Возврат Выборка.Ссылка;
		
	Иначе	
		
		// Документ ещё не создан. Создадим его и вернём ссылку.
		СогласованиеОбластиДанных = Документы.РакурсДанных.СоздатьДокумент();
		СогласованиеОбластиДанных.Дата = ТекущаяДата();
		СогласованиеОбластиДанных.Область =  Ракурс;
		СогласованиеОбластиДанных.Сценарий = ТекДокумент.Сценарий;
		СогласованиеОбластиДанных.Организация = Организация;
		Если ИспользоватьПроекты Тогда
			СогласованиеОбластиДанных.Проект = ТекДокумент.Проект;
		Иначе
			// Нет данных о проекте. Пропускаем заполнение реквизита.
		КонецЕсли;
		
		//СогласованиеОбластиДанных.ПредставлениеПериода = Элементы.СписокДоступныхПериодов.СписокВыбора.НайтиПоЗначению(СписокДоступныхПериодов).Представление;
		Если ТипЗнч(ТекДокумент) = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
			ТекПериодОтчета = ТекДокумент.ПериодОтчета;
			ДокументУправление = УправлениеОтчетамиУХ.НайтиДокументУправлениеОтчетнымПериодом(ТекДокумент.Сценарий, ТекПериодОтчета);
			Если ЗначениеЗаполнено(ДокументУправление) Тогда
				СогласованиеОбластиДанных.ПериодНачалоДата = ДокументУправление.ПериодСценария.ДатаНачала;
				СогласованиеОбластиДанных.ПериодОкончаниеДата = ДокументУправление.ПериодСценарияОкончание.ДатаОкончания;
				СогласованиеОбластиДанных.Периодичность = ТекПериодОтчета.Периодичность;
			Иначе
				СогласованиеОбластиДанных.ПериодНачалоДата = ТекПериодОтчета.ДатаНачала;
				Если ЗначениеЗаполнено(ТекДокумент.Сценарий.Периодичность) Тогда
					ПериодОкончания =  ДокументУправление.ПериодСценарияОкончание;
					СогласованиеОбластиДанных.ПериодОкончаниеДата	 = ПериодОкончания.ДатаОкончания;
					СогласованиеОбластиДанных.Периодичность			 = ТекДокумент.Сценарий.Периодичность;
				Иначе	 
					СогласованиеОбластиДанных.Периодичность			 = ТекДокумент.ТекПериодОтчета.Периодичность;
					СогласованиеОбластиДанных.ПериодОкончаниеДата	 = ТекПериодОтчета.ДатаОкончания;
				КонецЕсли;
			КонецЕсли;
			СогласованиеОбластиДанных.ПериодОтчета = ТекПериодОтчета;
		Иначе
			СогласованиеОбластиДанных.ПериодНачалоДата = ТекДокумент.ПериодСценария.ДатаНачала;
			Если ЗначениеЗаполнено(ТекДокумент.ПериодСценарияОкончание) Тогда
				СогласованиеОбластиДанных.ПериодОкончаниеДата = ТекДокумент.ПериодСценарияОкончание.ДатаОкончания;
			Иначе	 
				СогласованиеОбластиДанных.ПериодОкончаниеДата = ТекДокумент.ПериодСценария.ДатаОкончания;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекДокумент.Сценарий.Периодичность) Тогда
				СогласованиеОбластиДанных.Периодичность =ТекДокумент.Сценарий.Периодичность;
			Иначе	 
				СогласованиеОбластиДанных.Периодичность = ТекДокумент.ПериодСценария.Периодичность;
			КонецЕсли;
			
			СогласованиеОбластиДанных.ПериодОтчета = ТекДокумент.ПериодСценария;
		КонецЕсли;
		
		СогласованиеОбластиДанных.Записать();
		
		Возврат СогласованиеОбластиДанных.Ссылка;
		
	КонецЕсли;
	
КонецФункции	

// Возвращает таблицу значений организаций по регламенту ВерсияРегламентаВход для
// этапа ЭтапВход.
Функция ПолучитьТаблицуОрганизацийЭтапаПоРегламенту(ЭтапВход, ВерсияРегламентаВход) Экспорт
	РезультатФункции = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница КАК Организация
		|ИЗ
		|	РегистрСведений.ОрганизационныеЕдиницыЭтаповПроцессов КАК ОрганизационныеЕдиницыЭтаповПроцессов
		|ГДЕ
		|	ОрганизационныеЕдиницыЭтаповПроцессов.ВерсияРегламентаПодготовкиОтчетности = &ВерсияРегламентаПодготовкиОтчетности
		|	И ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса = &ЭтапПроцесса";
	Запрос.УстановитьПараметр("ВерсияРегламентаПодготовкиОтчетности", ВерсияРегламентаВход);
	Запрос.УстановитьПараметр("ЭтапПроцесса", ЭтапВход);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
КонецФункции

// Возвращает таблицу значений, содержащую данные для формирования необходимых
// документов по этапу ЭтапВход в регламенте ВерсияРегламентаВход. Когда
// параметр ОрганизацияВход указан, будет произведен отбор по организации.
Функция ПолучитьТаблицуФормируемыхДокументовПоЭтапу(ЭтапВход, ВерсияРегламентаВход, ОрганизацияВход = Неопределено) Экспорт
	РезультатФункции = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЭтапыПроцессовФормируемыеДокументы.ДокументБД КАК ДокументБД,
	|	ЭтапыПроцессовФормируемыеДокументы.ШаблонДокумента КАК ШаблонДокумента,
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница
	|ИЗ
	|	Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыПроцессовФормируемыеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизационныеЕдиницыЭтаповПроцессов КАК ОрганизационныеЕдиницыЭтаповПроцессов
	|		ПО ЭтапыПроцессовФормируемыеДокументы.Ссылка = ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса
	|			И (ОрганизационныеЕдиницыЭтаповПроцессов.ВерсияРегламентаПодготовкиОтчетности = &Регламент)
	|ГДЕ
	|	ЭтапыПроцессовФормируемыеДокументы.Ссылка = &Этап
	|	И ВЫБОР
	|			КОГДА &ОрганизационнаяЕдиница = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница = &ОрганизационнаяЕдиница
	|		КОНЕЦ
	|	И НЕ ЭтапыПроцессовФормируемыеДокументы.Ссылка.ПометкаУдаления";
	ОрганизацияРабочий = Справочники.Организации.ПустаяСсылка();	
	Если ЗначениеЗаполнено(ОрганизацияВход) Тогда
		ОрганизацияРабочий = ОрганизацияВход;
	Иначе
		ОрганизацияРабочий = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	Запрос.УстановитьПараметр("Этап", ЭтапВход);
	Запрос.УстановитьПараметр("Регламент", ВерсияРегламентаВход);
	Запрос.УстановитьПараметр("ОрганизационнаяЕдиница", ОрганизацияРабочий);
	Результат = Запрос.Выполнить();
	РезультатФункции = Результат.Выгрузить();
	Возврат РезультатФункции;
КонецФункции		// ПолучитьТаблицуФормируемыхДокументовПоЭтапу()
 
// Проверяет, находится ли объект ОбъектСсылкаВход на согласовании
// и отменяет согласование, если согласование установлено.
Процедура ОтменитьСогласованиеПриОтменеПроведения(ОбъектСсылкаВход, Отказ = Ложь) Экспорт
	// Инициализация.
	ПустойПользователь = Справочники.Пользователи.ПустаяСсылка();
	СостояниеЧерновик = Перечисления.СостоянияСогласования.Черновик;
	// Получение и проверка статуса согласования.
	СтатусСогласования = ПолучитьОбщийСтатусДляСогласования(ОбъектСсылкаВход);
	Если (СтатусСогласования = "НаУтверждении") ИЛИ (СтатусСогласования = "Утвержден") Тогда
		СтруктураПараметровЗапуска = ПолучитьПараметрыЗапускаПроцесса(, ОбъектСсылкаВход);
		Согласующий = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровЗапуска, "Согласующий", ПустойПользователь);
		Если ЗначениеЗаполнено(Согласующий) Тогда
			// Есть согласующий. Отменим согласование.
			ОтменитьСогласование(, ОбъектСсылкаВход, Ложь,, Отказ);
		Иначе
			// Перевод документа в статус Черновик вручную.
			ТекДата = ТекущаяДатаСеанса();
			ТекОтветственный = ПустойПользователь;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектСсылкаВход, "Ответственный") Тогда
				ТекОтветственный = ОбъектСсылкаВход.Ответственный;
			ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектСсылкаВход, "Автор") Тогда
				ТекОтветственный = ОбъектСсылкаВход.Автор;
			Иначе
				ТекОтветственный = ПустойПользователь;
			КонецЕсли;
			
			ТекущееСостояние = УправлениеПроцессамиСогласованияУХ.ВернутьСтатусОбъекта(ОбъектСсылкаВход);
			
			СостоянияРаспроведения = Новый Массив;
			СостоянияРаспроведения.Добавить(Перечисления.СостоянияСогласования.Черновик);
			СостоянияРаспроведения.Добавить(Перечисления.СостоянияСогласования.Возвращена);
									
			Если СостоянияРаспроведения.Найти(ТекущееСостояние) = Неопределено Тогда
				ТекущееСостояние = СостояниеЧерновик;
			КонецЕсли;
			
			УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(ОбъектСсылкаВход, ТекущееСостояние, ТекДата, ТекОтветственный, , , Ложь);
			
		КонецЕсли;
	Иначе
		// Перевод документа в статус Черновик вручную.
		ТекДата = ТекущаяДатаСеанса();
		ТекОтветственный = ПустойПользователь;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектСсылкаВход, "Ответственный") Тогда
			ТекОтветственный = ОбъектСсылкаВход.Ответственный;
		ИначеЕсли ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ОбъектСсылкаВход, "Автор") Тогда
			ТекОтветственный = ОбъектСсылкаВход.Автор;
		Иначе
			ТекОтветственный = ПустойПользователь;
		КонецЕсли;
		УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(ОбъектСсылкаВход, СостояниеЧерновик, ТекДата, ТекОтветственный,,, Ложь);
	КонецЕсли;
КонецПроцедуры		// ОтменитьСогласованиеПриОтменеПроведения()
