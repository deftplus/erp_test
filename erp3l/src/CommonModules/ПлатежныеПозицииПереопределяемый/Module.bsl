
#Область ПрограммныйИнтерфейс

// Добавляет регистры для вывода в отчет о движениях по полю, отличному от Регистратор.
// 
// Параметры:
//    Документ - ДокументСсылка - документ коллекцию движений которого необходимо дополнить.
//    СоответствиеРегистров - Соответствие - соответствие с данными:
//        * Ключ     - ОбъектМетаданных - регистр как объект метаданных.
//        * Значение - Строка           - имя поля регистратора.
//
Процедура ДополнитьСоответствияРегистраторовОтчетаОДвижениях(Документ, СоответствиеРегистров) Экспорт
	
	Если Метаданные.ОпределяемыеТипы.ДокументыПлатежнойПозиции.Тип.СодержитТип(ТипЗнч(Документ)) Тогда
		СоответствиеРегистров.Вставить(Метаданные.РегистрыСведений.РазмещениеЗаявок, "ЗаявкаНаОперацию");
		СоответствиеРегистров.Вставить(Метаданные.РегистрыСведений.ДвиженияБюджетированияПоПозициям, "ЗаявкаНаОперацию");
		СоответствиеРегистров.Вставить(Метаданные.РегистрыСведений.СостоянияИсполненияДокументовПланирования, "ДокументПланирования");
		СоответствиеРегистров.Вставить(Метаданные.РегистрыСведений.РегистрСостоянийОбъектов, "Объект");
	КонецЕсли;
	
КонецПроцедуры

// Функция определяет получателя платежа по данным отбора. 
Функция ОпределитьПолучателяПоДаннымОтбора(ДанныеОтбора) Экспорт
	
	// УХ 3.1
	Получатель = ДанныеОтбора.Контрагент;
	
	Возврат Получатель;
	
	//// ERP.УХ 3.1
	//Получатель = Неопределено;
	//Если ДанныеОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
	//	Или ДанныеОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
	//	
	//	Получатель = ДанныеОтбора.ПодотчетноеЛицо;
	//	
	//ИначеЕсли ДанныеОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию
	//	Или ДанныеОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию
	//	Или ДанныеОтбора.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВнутренняяПередачаДенежныхСредств Тогда
	//	
	//	Если ДанныеОтбора.ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
	//		Получатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОтбора.БанковскийСчетПолучатель, "Владелец");
	//	ИначеЕсли ДанныеОтбора.ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
	//		Получатель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеОтбора.КассаПолучатель, "Владелец");
	//	КонецЕсли;
	//Иначе
	//	Получатель = ДанныеОтбора.Контрагент;
	//КонецЕсли;
	//
	//Возврат Получатель;
	
КонецФункции

#КонецОбласти
