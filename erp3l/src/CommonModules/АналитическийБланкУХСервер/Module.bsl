

#Область ЗапросыПолученияДанных

Функция ПодготовитьТекстЗапросаПолученияДанных(ОбъектАБ,ПолеТабличногоДокументаМакет,СтруктураАналитикРаскрытияПоказателей) Экспорт
	  
	ФинальныйЗапрос = Новый Запрос;	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	СоздатьТаблицуПоказателей(ФинальныйЗапрос);	
	СхемаЗапроса.УстановитьТекстЗапроса(ФинальныйЗапрос.Текст);
	
	ТекстШаблонаЗапроса = "";
	ТекстШаблонаЗапросаКомментарииПоказателей = "";

	ТзПараметровЗапроса = Новый ТаблицаЗначений;
	ТзПараметровЗапроса.Колонки.Добавить("ИмяОтбора");
	ТзПараметровЗапроса.Колонки.Добавить("ТипОтбора");
	ТзПараметровЗапроса.Колонки.Добавить("ЗначениеОтбора");
    ТзПараметровЗапроса.Колонки.Добавить("УидГруппыОтбора");
	
	Нотбор = ТзПараметровЗапроса.Добавить();
	Нотбор.ИмяОтбора 		= "Валюта";
	Нотбор.ТипОтбора 		= "Параметр отчета";
	Нотбор.ЗначениеОтбора	= "&Валюта";
	
	ТзСтруктураВыводаГруппировок = Обработки.АналитическийБланк.ПолучитьОписаниеТаблицыВыводаГруппировок();
	
	Если ОбъектАБ.КэшГруппОтборовПоказателей.Количество() = 0 Тогда	
		 Возврат Неопределено;	
	КонецЕсли;	
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбъектАБ",ОбъектАБ);
    СтруктураПараметров.Вставить("ФинальныйЗапрос",ФинальныйЗапрос);
    СтруктураПараметров.Вставить("ТзПараметровЗапроса",ТзПараметровЗапроса);
    СтруктураПараметров.Вставить("ТзСтруктураВыводаГруппировок",ТзСтруктураВыводаГруппировок);
	СтруктураПараметров.Вставить("тДополнительныхОтборов",Неопределено);

	//Получим текст запросов данных по отборам текущего среза
	//СформироватьЗапросПолученияТаблицыДанных(СтруктураПараметров);
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("тКэшОбластейРаскрытияАдрес"					,ПоместитьВовременноеХранилище(ОбъектАБ.КэшВыводаОбластейМакета.Выгрузить(),Новый УникальныйИдентификатор()));
	//СтруктураПараметров.Вставить("Бланк"										,Бланк);
	СтруктураПараметров.Вставить("тзПоказателиАдрес"							,ПоместитьВовременноеХранилище(ОбъектАБ.КэшИменОбластейПоказателей.Выгрузить(),Новый УникальныйИдентификатор()));
    СтруктураПараметров.Вставить("тзКэшГруппОтборовПоказателейАдрес"			,ПоместитьВовременноеХранилище(ОбъектАБ.КэшГруппОтборовПоказателей.Выгрузить(),Новый УникальныйИдентификатор()));
	СтруктураПараметров.Вставить("тзРасшифровкаОтборовАдрес"					,ПоместитьВовременноеХранилище(ОбъектАБ.РасшифровкаГруппОтборов.Выгрузить(),Новый УникальныйИдентификатор()));
    СтруктураПараметров.Вставить("ТзПараметровЗапроса"							,ТзПараметровЗапроса);
	СтруктураПараметров.Вставить("СтруктураАналитикРаскрытияПоказателей"		,СтруктураАналитикРаскрытияПоказателей);
	СтруктураПараметров.Вставить("ТзСтруктураВыводаГруппировок"					,ТзСтруктураВыводаГруппировок);
	
	ПодготовитьТекстЗапросаСинтетика(СтруктураПараметров,ОбъектАБ,ПолеТабличногоДокументаМакет);
	Если ОбъектАБ.РежимСводнойТаблицы Тогда 
		ПодготовитьТекстЗапросаРаскрытияКолонкиСКД(СтруктураПараметров,ОбъектАБ,ПолеТабличногоДокументаМакет);	
	Иначе	
		ПодготовитьТекстЗапросаРаскрытияКолонки(СтруктураПараметров,ОбъектАБ,ПолеТабличногоДокументаМакет);	
	КонецЕсли;
	ПодготовитьТекстЗапросаРаскрытияСтроки(СтруктураПараметров,ОбъектАБ,ПолеТабличногоДокументаМакет);	
	ПодготовитьТекстЗапросаРаскрытияТаблицы(СтруктураПараметров,ОбъектАБ,ПолеТабличногоДокументаМакет);
			
	Возврат СтруктураПараметров;
	
КонецФункции	  

Процедура ПодготовитьТекстЗапросаСинтетика(СтруктураПараметров,ОбъектАБ,ПолеТабличногоДокументаМакет) 
	
	ТзПараметровЗапроса 		= СтруктураПараметров.ТзПараметровЗапроса.СкопироватьКолонки();
	ТзСтруктураВыводаГруппировок = СтруктураПараметров.ТзСтруктураВыводаГруппировок;
	ИндексЗапросаПакета         = ТзСтруктураВыводаГруппировок.Количество();
	
	КэшИменОбластейСинтетика 	 =  ОбъектАБ.КэшИменОбластейПоказателей.Выгрузить(Новый Структура("ТолькоСинтетика",Истина));
	КэшИменОбластейСинтетикаУИДЫ =  КэшИменОбластейСинтетика.Скопировать();
	КэшИменОбластейСинтетикаУИДЫ.Свернуть("УидГруппыОтборов");
	КэшИменОбластейСинтетика.Свернуть("Показатель");
		
		
	Нотбор = ТзПараметровЗапроса.Добавить();
	Нотбор.ИмяОтбора 		= "ГруппыОтборовСинтетика";
	Нотбор.ТипОтбора 		= "В списке";
	Нотбор.ЗначениеОтбора	=  КэшИменОбластейСинтетикаУИДЫ.ВыгрузитьКолонку("УидГруппыОтборов");
	
	Нотбор = ТзПараметровЗапроса.Добавить();
	Нотбор.ИмяОтбора 		= "ПоказателиСинтетика";
	Нотбор.ТипОтбора 		= "В списке";
	Нотбор.ЗначениеОтбора	=  КэшИменОбластейСинтетика.ВыгрузитьКолонку("Показатель");
	
		
	ТекстИтоговогоЗапросаСинтетика = ПодготовитьТекстФинальногоЗапросаСинтетика(ТзПараметровЗапроса,Нотбор.ЗначениеОтбора);
			
	//Добавляем в таблицу запросов подзапрос по данным
	СтруктураВыводаТекущейОбласти = ТзСтруктураВыводаГруппировок.Добавить();
	СтруктураВыводаТекущейОбласти.ИндексЗапросаПакета        = ИндексЗапросаПакета;
	СтруктураВыводаТекущейОбласти.ПараметрыЗапроса           = ТзПараметровЗапроса;
	СтруктураВыводаТекущейОбласти.ОбластьСодержитМакет       = Ложь;
	СтруктураВыводаТекущейОбласти.ТекстЗапросаВыводаОбластей = ТекстИтоговогоЗапросаСинтетика;
	СтруктураВыводаТекущейОбласти.ТипОбласти       			= "Синтетика";
	ИндексЗапросаПакета = ИндексЗапросаПакета+1;

	
КонецПроцедуры	  

Функция ЗаполнитьТаблицуОтборовДопАналитик(УидГруппыОтборов,ТзДоступныхАналитик=Неопределено,ОбъектАБ,ТаблицаТекущихОтборов = Неопределено)
	
	Если ТзДоступныхАналитик = Неопределено Тогда
		ТзДоступныхАналитик = Обработки.АналитическийБланк.ПолучитьОписаниеТаблицыНастроекАналитик();	
	КонецЕсли;
	 
	 ДопОтборы = ОбъектАБ.РасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("УидГруппыОтборов",УидГруппыОтборов));
	 	 
	 Для Каждого СтрОтбор Из ДопОтборы Цикл  // Добавим поля отборов по аналитикам из макета 
		 Если СтрОтбор.ПолеКод = "ПериодС" ИЛИ СтрОтбор.ПолеКод = "ПериодПо" ИЛИ СтрОтбор.ПолеКод = "Организация" ИЛИ СтрОтбор.ПолеКод = "Сценарий" ИЛИ СтрОтбор.ПолеКод = "Проект" Тогда
			  Продолжить;
		 КонецЕсли;	 
		 Если НЕ СтрОтбор.Отбор = "Отбор не производится" Тогда
			  Нстр = ТзДоступныхАналитик.Добавить(); 
			  Нстр.АналитикаПредставление 	= СтрОтбор.Поле;
			  Нстр.АналитикаКод 			= СтрОтбор.ПолеКод;
			  Нстр.ЭтоАналитикаВерсии 		= Ложь;
              Нстр.ЭтоОтбор 				= Истина;	  
		 КонецЕсли;	      
	 КонецЦикла;		 
	 
	 Если Не ТаблицаТекущихОтборов = Неопределено Тогда  //Дополним полями отборов по аналитикам из таблицы отборов
		 ТаблицаТекущихОтборовКопия = ТаблицаТекущихОтборов.Скопировать(Новый Структура("Использовать,ОтборВерсии",Истина,Ложь));
		 ТаблицаТекущихОтборовКопия.Свернуть("ОсновноеПолеКод");
		 Для Каждого СтрДопОтбор Из ТаблицаТекущихОтборовКопия Цикл
			 Если   ТзДоступныхАналитик.Найти(,"АналитикаКод") = Неопределено Тогда
				 Нстр = ТзДоступныхАналитик.Добавить(); 
				 Нстр.АналитикаПредставление 	= СтрДопОтбор.ОсновноеПолеКод;
				 Нстр.АналитикаКод 				= СтрДопОтбор.ОсновноеПолеКод;
				 Нстр.ЭтоАналитикаВерсии 		= Ложь;
				 Нстр.ЭтоОтбор 					= Истина;	   
			 КонецЕсли;			   
		 КонецЦикла;	 
	 КонецЕсли;
	 
	 Возврат ТзДоступныхАналитик;
	 
КонецФункции	

Процедура СоздатьТаблицуПоказателей(ФинальныйЗапрос)
	
	 ФинальныйЗапрос.Текст = "
	 |ВЫБРАТЬ 
	 |	тзПоказатели.Показатель,
	 |	тзПоказатели.ПоказательКод,
	 |	тзПоказатели.ИмяОбластиДляВывода,
	 |	тзПоказатели.ВидОтчета 
	 |	ПОМЕСТИТЬ тзПоказатели
	 |ИЗ
	 |	&тзПоказатели КАК тзПоказатели
	 |ИНДЕКСИРОВАТЬ ПО Показатель";
	 
 КонецПроцедуры	
 
Процедура СоздатьТаблицуЛогаНечисловых(ФинальныйЗапрос)
	
	 //Нечисловые выделим в отдельную таблицу, чтобы получить срез значений по последним транзакциям

	 ФинальныйЗапрос.Текст =  ФинальныйЗапрос.Текст+"
	 |
	 |;
	 |///////////////// Нечисловые выделим в отдельную таблицу, чтобы получить срез значений по последним транзакциям
	 |ВЫБРАТЬ 
	 |	мДанныеЛога.НомерТранзакции,
	 |	мДанныеЛога.Показатель,
	 |	мДанныеЛога.Сценарий,
	 |	мДанныеЛога.Организация,
	 |	мДанныеЛога.Проект, 
	 |	мДанныеЛога.Аналитика1,
	 |	мДанныеЛога.Аналитика2,
	 |	мДанныеЛога.Аналитика3,
	 |	мДанныеЛога.Аналитика4,
	 |	мДанныеЛога.Аналитика5,
	 |	мДанныеЛога.Аналитика6,
     |	мДанныеЛога.АналитикаВалюта,
     |	мДанныеЛога.ПериодОтчета,
	 |	мДанныеЛога.Валюта,
	 |	мДанныеЛога.ЗначениеНечисловое 
	 |	ПОМЕСТИТЬ мДанныеЛогаНечисловые_
     |ИЗ
	 |	РегистрСведений.ЛогИзмененныхЗначенийПоказателейОтчетов КАК мДанныеЛога
     |ГДЕ 
	 |	мДанныеЛога.УникальныйИдентификаторСеанса = &УникальныйИдентификаторСеанса
	 |	И мДанныеЛога.ЗначениеНечисловое <> НЕОПРЕДЕЛЕНО 
	 |;
	 |///////////////// 
	 |ВЫБРАТЬ 
	 |	МАКСИМУМ(мДанныеЛога.НомерТранзакции),
	 |	мДанныеЛога.Показатель,
	 |	мДанныеЛога.Сценарий,
	 |	мДанныеЛога.Организация,
	 |	мДанныеЛога.Проект, 
	 |	мДанныеЛога.Аналитика1,
	 |	мДанныеЛога.Аналитика2,
	 |	мДанныеЛога.Аналитика3,
	 |	мДанныеЛога.Аналитика4,
	 |	мДанныеЛога.Аналитика5,
	 |	мДанныеЛога.Аналитика6,
     |	мДанныеЛога.АналитикаВалюта,
     |	мДанныеЛога.ПериодОтчета,
	 |	мДанныеЛога.Валюта
	 |	ПОМЕСТИТЬ мДанныеЛогаНечисловыеПоследние
     |ИЗ
	 |	мДанныеЛогаНечисловые_ КАК мДанныеЛога
     |СГРУППИРОВАТЬ ПО 
     |	мДанныеЛога.Показатель,
	 |	мДанныеЛога.Сценарий,
	 |	мДанныеЛога.Организация,
	 |	мДанныеЛога.Проект, 
	 |	мДанныеЛога.Аналитика1,
	 |	мДанныеЛога.Аналитика2,
	 |	мДанныеЛога.Аналитика3,
	 |	мДанныеЛога.Аналитика4,
	 |	мДанныеЛога.Аналитика5,
	 |	мДанныеЛога.Аналитика6,
	 |	мДанныеЛога.АналитикаВалюта,
	 |	мДанныеЛога.ПериодОтчета,
	 |	мДанныеЛога.Валюта
	 |;
	 |/////////////////  Срез последних по нечисловым
	 |ВЫБРАТЬ 
	 |	мДанныеЛогаНечисловыеПоследние.НомерТранзакции,
	 |	мДанныеЛогаНечисловые.Показатель,
	 |	мДанныеЛогаНечисловые.Сценарий,
	 |	мДанныеЛогаНечисловые.Организация,
	 |	мДанныеЛогаНечисловые.Проект, 
	 |	мДанныеЛогаНечисловые.Аналитика1,
	 |	мДанныеЛогаНечисловые.Аналитика2,
	 |	мДанныеЛогаНечисловые.Аналитика3,
	 |	мДанныеЛогаНечисловые.Аналитика4,
	 |	мДанныеЛогаНечисловые.Аналитика5,
	 |	мДанныеЛогаНечисловые.Аналитика6,
     |	мДанныеЛогаНечисловые.АналитикаВалюта,
     |	мДанныеЛогаНечисловые.ПериодОтчета,
	 |	мДанныеЛогаНечисловые.Валюта,
	 |	мДанныеЛогаНечисловые.ЗначениеНечисловое,
	 |	-1 КАК Значение,
	 |	-1 КАК ЗначениеВалюта
	 |	ПОМЕСТИТЬ мДанныеЛогаНечисловые
     |ИЗ
	 |	мДанныеЛогаНечисловыеПоследние КАК мДанныеЛогаНечисловыеПоследние
     |ЛЕВОЕ СОЕДИНЕНИЕ мДанныеЛогаНечисловые_ КАК мДанныеЛогаНечисловые 
	 |ПО 
	 |	мДанныеЛогаНечисловыеПоследние.НомерТранзакции 	   = мДанныеЛогаНечисловые.НомерТранзакции
	 |	И мДанныеЛогаНечисловыеПоследние.Показатель        = мДанныеЛогаНечисловые.Показатель
	 |	И мДанныеЛогаНечисловыеПоследние.Сценарий          = мДанныеЛогаНечисловые.Сценарий
	 |	И мДанныеЛогаНечисловыеПоследние.Организация       = мДанныеЛогаНечисловые.Организация
	 |	И мДанныеЛогаНечисловыеПоследние.Проект            = мДанныеЛогаНечисловые.Проект
	 |	И мДанныеЛогаНечисловыеПоследние.Аналитика1        = мДанныеЛогаНечисловые.Аналитика1
	 |	И мДанныеЛогаНечисловыеПоследние.Аналитика2        = мДанныеЛогаНечисловые.Аналитика2
	 |	И мДанныеЛогаНечисловыеПоследние.Аналитика3        = мДанныеЛогаНечисловые.Аналитика3
	 |	И мДанныеЛогаНечисловыеПоследние.Аналитика4        = мДанныеЛогаНечисловые.Аналитика4
	 |	И мДанныеЛогаНечисловыеПоследние.Аналитика5        = мДанныеЛогаНечисловые.Аналитика5
	 |	И мДанныеЛогаНечисловыеПоследние.Аналитика6        = мДанныеЛогаНечисловые.Аналитика6
	 |	И мДанныеЛогаНечисловыеПоследние.АналитикаВалюта   = мДанныеЛогаНечисловые.АналитикаВалюта
	 |	И мДанныеЛогаНечисловыеПоследние.ПериодОтчета      = мДанныеЛогаНечисловые.ПериодОтчета
	 |	И мДанныеЛогаНечисловыеПоследние.Валюта            = мДанныеЛогаНечисловые.Валюта";

	 	 
 КонецПроцедуры	

 
Процедура ПолучитьПодзапросТекущейВерсии(ФинальныйЗапрос,СтрГруппы,ТзПараметровЗапроса,ОбъектАБ,ИндексРегистра,ТаблицаТекущихОтборов)

	УидГруппы = СтрГруппы.УидГруппыОтборов;
	
	ТекущиеОтборыВерсий  		= ТаблицаТекущихОтборов.НайтиСтроки(Новый Структура("Использовать,ОтборВерсии",Истина,Истина));
	ИспользуемыеОтборыВерсий    = ТаблицаТекущихОтборов.СкопироватьКолонки();
	
	Для Каждого СтрТекущийОтбор Из ТекущиеОтборыВерсий Цикл
		тРасшифровкаОтбораМакета  =  ОбъектАБ.РасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("УидГруппыОтборов,Поле",СтрГруппы.УидГруппыОтборов,СтрТекущийОтбор.ОсновноеПолеКод));
		Если тРасшифровкаОтбораМакета.Количество() = 1 
			И СтрТекущийОтбор.РежимОтбора = Перечисления.РежимыОтборовАналитическихТаблиц.Данные 
			И СтрНайти(тРасшифровкаОтбораМакета[0].Отбор," отчета")>0 Тогда //Если отбор устанавливается на данные, то фильруем только "текущие" данные
			
			нИспользуемыйОтбор = ИспользуемыеОтборыВерсий.Добавить();
			ЗаполнитьЗначенияСвойств(нИспользуемыйОтбор,СтрТекущийОтбор);
			
		ИначеЕсли тРасшифровкаОтбораМакета.Количество() = 1 
			И СтрТекущийОтбор.РежимОтбора = Перечисления.РежимыОтборовАналитическихТаблиц.Данные 
			И тРасшифровкаОтбораМакета[0].Отбор = "Отбор не производится" Тогда //Если отбор устанавливается на данные, то фильруем только "текущие" данные
			
			нИспользуемыйОтбор = ИспользуемыеОтборыВерсий.Добавить();
			ЗаполнитьЗначенияСвойств(нИспользуемыйОтбор,СтрТекущийОтбор);
	
			
		ИначеЕсли тРасшифровкаОтбораМакета.Количество() = 1    				//Если отбор устанавливается на данные, то оставляем фиксированные отборы макета без изменений
			И СтрТекущийОтбор.РежимОтбора = Перечисления.РежимыОтборовАналитическихТаблиц.Данные Тогда 
			
			нИспользуемыйОтбор = ИспользуемыеОтборыВерсий.Добавить();
			
			нИспользуемыйОтбор.ПолеКод 					= тРасшифровкаОтбораМакета[0].ПолеКод;
			нИспользуемыйОтбор.ОсновноеПолеКод 			= тРасшифровкаОтбораМакета[0].ПолеКод;
			нИспользуемыйОтбор.ПолеПредставление 		= тРасшифровкаОтбораМакета[0].Поле;
			нИспользуемыйОтбор.ВидСравненияСтрока 		= тРасшифровкаОтбораМакета[0].Отбор;
			нИспользуемыйОтбор.ЗначениеОтбора 			= ЗначениеИзСтрокиВнутр(тРасшифровкаОтбораМакета[0].ЗначениеОтбораСтрока);
			
			МассивТиповСтрока 					=   СтрРазделить(тРасшифровкаОтбораМакета[0].ТипЗначенияСтрока,"|");
			МассивТипов   						=   Новый Массив;
			Для Каждого СтрТип Из МассивТиповСтрока Цикл
				МассивТипов.Добавить(Тип(СтрТип));
			КонецЦикла;		
			нИспользуемыйОтбор.ТипЗначения 				= Новый ОписаниеТипов(МассивТипов);

			
		ИначеЕсли тРасшифровкаОтбораМакета.Количество() = 1    				//Если отбор устанавливается на макет, то фильтруем все данные
			И СтрТекущийОтбор.РежимОтбора = Перечисления.РежимыОтборовАналитическихТаблиц.Макет Тогда 
			
			нИспользуемыйОтбор = ИспользуемыеОтборыВерсий.Добавить();
			ЗаполнитьЗначенияСвойств(нИспользуемыйОтбор,СтрТекущийОтбор);
		ИначеЕсли СтрТекущийОтбор.ПолеКод = "Валюта" ИЛИ СтрТекущийОтбор.ПолеКод = "ПериодОтчета" Тогда
			нИспользуемыйОтбор = ИспользуемыеОтборыВерсий.Добавить();
			ЗаполнитьЗначенияСвойств(нИспользуемыйОтбор,СтрТекущийОтбор);
		КонецЕсли;	
		
	КонецЦикла;	
	
	
	Если ИндексРегистра = -1 ИЛИ ИндексРегистра = -11 Тогда  //Это нечисловые или нечисловые синтетика. По ним срез по версиям не агрегируется. Просто берем последнюю версию.
		
		ФинальныйЗапрос.Текст =  ФинальныйЗапрос.Текст +"
		|;
		|// ВЕРСИИ НЕЧИСЛОВЫХ
		|
		|ВЫБРАТЬ
		|	МАКСИМУМ(ЗначенияПоказателейОтчетов.Версия.Код) КАК ВерсияКод,
		|	ЗначенияПоказателейОтчетов.Показатель КАК Показатель,
		|	ЗначенияПоказателейОтчетов.Версия.Сценарий КАК Сценарий,
		|	ЗначенияПоказателейОтчетов.Версия.Проект КАК Проект,
		|	ЗначенияПоказателейОтчетов.Версия.ПериодОтчета КАК ПериодОтчета,
		|	ЗначенияПоказателейОтчетов.Версия.Организация КАК Организация	
		|ПОМЕСТИТЬ втВерсииБазаПредв
		|	ИЗ
		|РегистрСведений.ЗначенияПоказателейОтчетовНечисловые КАК ЗначенияПоказателейОтчетов
		|	ГДЕ
		|//[ОтборПоВерсиямНечисловые	
		|ЗначенияПоказателейОтчетов.Версия.Валюта = &Валюта
		|//ТекстОтбораПоКлючамВерсии
		|	И ЗначенияПоказателейОтчетов.Версия.ВидОтчета В (&ВидыОтчетаСинтетика)
		|	И НЕ ЗначенияПоказателейОтчетов.Версия.ЧерноваяВерсия
		|//ОтборПоВерсиямНечисловые]	
		|СГРУППИРОВАТЬ ПО
		|	ЗначенияПоказателейОтчетов.Версия.Сценарий,
		|	ЗначенияПоказателейОтчетов.Версия.Проект,
		|	ЗначенияПоказателейОтчетов.Версия.ПериодОтчета,
		|	ЗначенияПоказателейОтчетов.Версия.Организация,
		|	ЗначенияПоказателейОтчетов.Показатель
		|;
		|/////////////////////////////////////////////////
		|
		|ВЫБРАТЬ
		|	ВерсииЗначенийПоказателей.Ссылка КАК Версия,
		|	ВерсииЗначенийПоказателей.Сценарий КАК Сценарий,
		|	ВерсииЗначенийПоказателей.Проект КАК Проект,
		|	ВерсииЗначенийПоказателей.ПериодОтчета КАК ПериодОтчета,
		|	ВерсииЗначенийПоказателей.Валюта КАК Валюта,
		|	ВерсииЗначенийПоказателей.Организация КАК Организация,
		|	втВерсииБазаПредв.Показатель,
		|	"+""""+УИДГруппы+""""+ " КАК УидГруппыОтборов"+"
		|ПОМЕСТИТЬ втВерсииБаза_"+УИДГруппы+"
		|ИЗ
		|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
		|ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсииБазаПредв КАК втВерсииБазаПредв
		|ПО
		|	ВерсииЗначенийПоказателей.Код =  втВерсииБазаПредв.ВерсияКод 
		|	И ВерсииЗначенийПоказателей.Сценарий =  втВерсииБазаПредв.Сценарий
		|	И ВерсииЗначенийПоказателей.Организация =  втВерсииБазаПредв.Организация
		|	И ВерсииЗначенийПоказателей.ПериодОтчета =  втВерсииБазаПредв.ПериодОтчета
        |	И ВерсииЗначенийПоказателей.Проект =  втВерсииБазаПредв.Проект
		|;
		|/////////////////////////////////////////////////
        |УНИЧТОЖИТЬ втВерсииБазаПредв";
		
		ТекстОтбораПоКлючамВерсии = СформироватьТекстОтбора("ЗначенияПоказателейОтчетов.Версия",УидГруппы,ИспользуемыеОтборыВерсий,ТзПараметровЗапроса);
	    ФинальныйЗапрос.Текст = СтрЗаменить(ФинальныйЗапрос.Текст,"//ТекстОтбораПоКлючамВерсии",ТекстОтбораПоКлючамВерсии);

		
	Иначе	
		ФинальныйЗапрос.Текст =  ФинальныйЗапрос.Текст +"
		|;
		|// ВЕРСИИ ЧИСЛОВЫХ
		|
		|ВЫБРАТЬ
		|	ВерсииЗначенийПоказателей.Ссылка КАК Версия,
		|	ВерсииЗначенийПоказателей.Сценарий КАК Сценарий,
		|	ВерсииЗначенийПоказателей.Проект КАК Проект,
		|	ВерсииЗначенийПоказателей.ПериодОтчета КАК ПериодОтчета,
		|	ВерсииЗначенийПоказателей.Валюта КАК Валюта,
		|	ВерсииЗначенийПоказателей.Организация КАК Организация,
		|	"+""""+УИДГруппы+""""+ " КАК УидГруппыОтборов"+"
		|ПОМЕСТИТЬ втВерсииБаза_"+УИДГруппы+"
		|ИЗ
		|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
		|ГДЕ
		|	//[ОтборПоВерсиямЧисловые	
		|	ВерсииЗначенийПоказателей.ВидОтчета В (&ВидыОтчетаСинтетика)
		|	//ТекстОтбораПоКлючамВерсии
		|	И ВерсииЗначенийПоказателей.Валюта = &Валюта
		|	И НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия
		|	//ОтборПоВерсиямЧисловые]
		|";
		
		Если ОбъектАБ.ЕстьДополнительныеВалюты Тогда
			ФинальныйЗапрос.Текст =  ФинальныйЗапрос.Текст +" 
			|;
			|// ВЕРСИИ ЧИСЛОВЫХ
			|
			|ВЫБРАТЬ
			|	ВерсииЗначенийПоказателей.Ссылка КАК Версия,
			|	ВерсииЗначенийПоказателей.Сценарий КАК Сценарий,
			|	ВерсииЗначенийПоказателей.Проект КАК Проект,
			|	ВерсииЗначенийПоказателей.ПериодОтчета КАК ПериодОтчета,
			|	ВерсииЗначенийПоказателей.Валюта КАК Валюта,
			|	ВерсииЗначенийПоказателей.Организация КАК Организация,
			|	"+""""+УИДГруппы+""""+ " КАК УидГруппыОтборов"+"
			|ПОМЕСТИТЬ втВерсииБаза_ВсеВалюты_"+УИДГруппы+"
			|ИЗ
			|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
			|ГДЕ
			|	//[ОтборПоВерсиямЧисловые
			|	ВерсииЗначенийПоказателей.ВидОтчета В (&ВидыОтчетаСинтетика)
			|	//ТекстОтбораПоКлючамВерсии
			|	И НЕ ВерсииЗначенийПоказателей.ЧерноваяВерсия
			|	//ОтборПоВерсиямЧисловые]
			|";
		КонецЕсли;
		
		ТекстОтбораПоКлючамВерсии = СформироватьТекстОтбора("ВерсииЗначенийПоказателей",УидГруппы,ИспользуемыеОтборыВерсий,ТзПараметровЗапроса);
	    ФинальныйЗапрос.Текст = СтрЗаменить(ФинальныйЗапрос.Текст,"//ТекстОтбораПоКлючамВерсии",ТекстОтбораПоКлючамВерсии); 
		
	КонецЕсли;
	
КонецПроцедуры	

Функция СформироватьТекстОтбора(ПрефиксТаблицы,ПрефиксПараметра,ТаблицаТекущихОтборов,ТзПараметровЗапроса,ИмяПоля ="",ОператорОбъединения=" И ",ИдентификаторРодителя=0) Экспорт
	
	ТекстЗапросаПоОтборам = "";
			
	Для Каждого СтрокаГруппыОтборов Из ТаблицаТекущихОтборов Цикл
		
		Если СтрокаГруппыОтборов.ВидСравненияСтрока = "ГруппаИ" Тогда			
			
			ТекстОтбора = СформироватьТекстОтбора(ПрефиксТаблицы,ПрефиксПараметра,ТаблицаТекущихОтборов,ТзПараметровЗапроса,ИмяПоля,,СтрокаГруппыОтборов.ИдентификаторСтроки);
			Если СокрЛП(ТекстОтбора) <> "" Тогда
				ТекстЗапросаПоОтборам = ТекстЗапросаПоОтборам + ?(ТекстЗапросаПоОтборам = "","",Символы.ПС + Символы.Таб) + ОператорОбъединения + "(" + Сред(ТекстОтбора,3) + ")";
			КонецЕсли;	
				
		ИначеЕсли СтрокаГруппыОтборов.ВидСравненияСтрока = "ГруппаИЛИ" Тогда
			
			ТекстОтбора = СформироватьТекстОтбора(ПрефиксТаблицы,ПрефиксПараметра,ТаблицаТекущихОтборов,ТзПараметровЗапроса,ИмяПоля," ИЛИ ",СтрокаГруппыОтборов.ИдентификаторСтроки);
			Если СокрЛП(ТекстОтбора) <> "" Тогда				
				ТекстЗапросаПоОтборам = ТекстЗапросаПоОтборам + ?(ТекстЗапросаПоОтборам = "","",Символы.ПС + Символы.Таб) + ОператорОбъединения + "(" + Сред(ТекстОтбора,5) + ")";
			КонецЕсли;
			
		ИначеЕсли СтрокаГруппыОтборов.ВидСравненияСтрока = "ГруппаНЕ" Тогда			
			
			ТекстОтбора = СформироватьТекстОтбора(ПрефиксТаблицы,ПрефиксПараметра,ТаблицаТекущихОтборов,ТзПараметровЗапроса,ИмяПоля,,СтрокаГруппыОтборов.ИдентификаторСтроки);
			Если СокрЛП(ТекстОтбора) <> "" Тогда
				ТекстЗапросаПоОтборам = ТекстЗапросаПоОтборам + ?(ТекстЗапросаПоОтборам = "","",Символы.ПС + Символы.Таб) + ОператорОбъединения + "НЕ (" + Сред(ТекстОтбора,3) + ")";
			КонецЕсли;
			
		Иначе
			
			ТекстЗапросаПоОтборам = ТекстЗапросаПоОтборам + ?(ТекстЗапросаПоОтборам = "","",Символы.ПС + Символы.Таб)
				+ ПолучитьТекстОтбора(ПрефиксТаблицы,ПрефиксПараметра,СтрокаГруппыОтборов,ТзПараметровЗапроса,ИмяПоля,ОператорОбъединения);					
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТекстЗапросаПоОтборам;
	
КонецФункции

Функция ПолучитьТекстОтбора(ПрефиксТаблицы,ПрефиксПараметра,СтрокаОтбора="ПериодОтчета",ТзПараметровЗапроса,нИмяПоля="",ОператорОбъединения) Экспорт
	
	Если СтрокаОтбора.ОсновноеПолеКод = "ПериодОтчета" Тогда 
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+СтрокаОтбора.ОсновноеПолеКод+" В (&ПериодОтчета_"+ПрефиксПараметра+")";
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "ПериодОтчета_"+ПрефиксПараметра;
		Нотбор.ТипОтбора 		= "ПериодОтчета";
		Нотбор.ЗначениеОтбора	= "ПериодОтчета";	 
		Нотбор.УидГруппыОтбора	= СтрЗаменить(ПрефиксПараметра,"Пар_","");
		Возврат  ТекстОтбора;
	КонецЕсли;
	
	ТекстОтбора 			= "";
	ИмяПоляПуть 			= ?(ЗначениеЗаполнено(нИмяПоля),СтрЗаменить(СтрокаОтбора.ПолеКод,СтрокаОтбора.ОсновноеПолеКод,нИмяПоля),СтрокаОтбора.ПолеКод);
	ИмяПоля					= ?(ЗначениеЗаполнено(нИмяПоля),нИмяПоля,СтрЗаменить(СтрокаОтбора.ПолеКод,".","_"));
	Отбор   				= СтрокаОтбора.ВидСравненияСтрока;
	ЗначениеОтбора 			= СтрокаОтбора.ЗначениеОтбора;
	
	Если Отбор = "Равно" Тогда 
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоляПуть+" = &Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	=  ЗначениеОтбора;	 
	ИначеЕсли Отбор = "Не равно" Тогда
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоляПуть+" <> &Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	= ЗначениеОтбора;	 
	ИначеЕсли Отбор = "Параметр отчета" Тогда	 
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоляПуть+" В (&"+ПрефиксПараметра+")";
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= ПрефиксПараметра;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	=  ЗначениеОтбора;	
	ИначеЕсли Прав(Отбор,6) = "отчета" Тогда
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоля+" В (&"+СтрокаОтбора.ПолеКод+")";
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= СтрокаОтбора.ПолеКод;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	= СтрокаОтбора.ПолеКод;	 	 	 	
	ИначеЕсли Отбор = "В списке" Тогда	 
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоляПуть+" В (&Пар_"+ПрефиксПараметра+"_"+ИмяПоля+")";
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	=  ЗначениеОтбора;	 		
		
		Если СтрокаОтбора.ТипЗначения = Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ") И ЗначениеЗаполнено(Нотбор.ЗначениеОтбора[0].Значение) Тогда 
			тВладелец =  Нотбор.ЗначениеОтбора[0].Значение.Владелец;
			ТекстОтбора = ТекстОтбора+" И "+ПрефиксТаблицы+"."+ИмяПоля+".Владелец = &Пар_Владелец"+ПрефиксПараметра+"_"+ИмяПоля+"";
			Нотбор = ТзПараметровЗапроса.Добавить();
			Нотбор.ИмяОтбора 		= "Пар_Владелец"+ПрефиксПараметра+"_"+ИмяПоля;
			Нотбор.ТипОтбора 		= Отбор;
			Нотбор.ЗначениеОтбора	= тВладелец;	
		КонецЕсли;

		
	ИначеЕсли Отбор = "Не в списке" Тогда	 
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоляПуть+" НЕ В (&Пар_"+ПрефиксПараметра+"_"+ИмяПоля+")";
		
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	=  ЗначениеОтбора;			
		
		Если СтрокаОтбора.ТипЗначения = Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ") И ЗначениеЗаполнено(Нотбор.ЗначениеОтбора[0].Значение) Тогда 
			тВладелец =  Нотбор.ЗначениеОтбора[0].Значение.Владелец;
			ТекстОтбора = ТекстОтбора+" И "+ПрефиксТаблицы+"."+ИмяПоля+".Владелец = &Пар_Владелец"+ПрефиксПараметра+"_"+ИмяПоля+"";
			Нотбор = ТзПараметровЗапроса.Добавить();
			Нотбор.ИмяОтбора 		= "Пар_Владелец"+ПрефиксПараметра+"_"+ИмяПоля;
			Нотбор.ТипОтбора 		= Отбор;
			Нотбор.ЗначениеОтбора	= тВладелец;	
		КонецЕсли;
				
	ИначеЕсли Отбор = "В группе"  Тогда	 
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоляПуть+"  В ИЕРАРХИИ(&Пар_"+ПрефиксПараметра+"_"+ИмяПоля+")";
		Если  ПоддерживаетИерархиюГрупп(СтрокаОтбора.ТипЗначения) Тогда
		    ТекстОтбора = ТекстОтбора+" И "+ПрефиксТаблицы+"."+ИмяПоляПуть+".ЭтоГруппа = ЛОЖЬ";
		Иначе 
			//ТекстОтбора = ТекстОтбора+" И "+ПрефиксТаблицы+"."+ИмяПоля+" <> &Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		КонецЕсли;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	=  ЗначениеОтбора;		
		
	ИначеЕсли Отбор  = "В группе из списка" Тогда
		
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоляПуть+"  В ИЕРАРХИИ(&Пар_"+ПрефиксПараметра+"_"+ИмяПоля+")";
		Если  ПоддерживаетИерархиюГрупп(СтрокаОтбора.ТипЗначения) Тогда
		    ТекстОтбора = ТекстОтбора+" И "+ИмяПоляПуть+"."+ИмяПоля+".ЭтоГруппа = ЛОЖЬ";
		Иначе 
			//ТекстОтбора = ТекстОтбора+" И "+ПрефиксТаблицы+"."+ИмяПоля+" НЕ В( &Пар_"+ПрефиксПараметра+"_"+ИмяПоля+")";
		КонецЕсли;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	=  ЗначениеОтбора;	
		
	ИначеЕсли Отбор = "НЕ в группе"  Тогда	 
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоляПуть+"  В ИЕРАРХИИ(&Пар_"+ПрефиксПараметра+"_"+ИмяПоля+")";
		Если  ПоддерживаетИерархиюГрупп(СтрокаОтбора.ТипЗначения) Тогда
		    ТекстОтбора = ТекстОтбора+" И "+ПрефиксТаблицы+"."+ИмяПоля+".ЭтоГруппа = ЛОЖЬ";
		Иначе 
			//ТекстОтбора = ТекстОтбора+" И "+ПрефиксТаблицы+"."+ИмяПоля+" <> &Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		КонецЕсли;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	=  ЗначениеОтбора;		
		
	ИначеЕсли Отбор  = "Не в группе из списка" Тогда
		
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоляПуть+"  В ИЕРАРХИИ(&Пар_"+ПрефиксПараметра+"_"+ИмяПоля+")";
		Если  ПоддерживаетИерархиюГрупп(СтрокаОтбора.ТипЗначения) Тогда
		    ТекстОтбора = ТекстОтбора+" И "+ПрефиксТаблицы+"."+ИмяПоля+".ЭтоГруппа = ЛОЖЬ";
		Иначе 
			//ТекстОтбора = ТекстОтбора+" И "+ПрефиксТаблицы+"."+ИмяПоля+" НЕ В( &Пар_"+ПрефиксПараметра+"_"+ИмяПоля+")";
		КонецЕсли;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	=  ЗначениеОтбора;		
			
	ИначеЕсли Отбор = "Отбор не производится" Тогда
		ТекстОтбора = "";
		
	ИначеЕсли Отбор = "Заполнено" Тогда
		
		СписокПустыхЗначений = Новый СписокЗначений();
		СписокПустыхЗначений.Добавить(Неопределено);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаОтбора, "ТипЗначения") тогда
			СписокПустыхЗначений.Добавить(СтрокаОтбора.ТипЗначения.ПривестиЗначение());
		КонецЕсли;
		
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоляПуть+" НЕ В (&Пар_"+ПрефиксПараметра+"_"+ИмяПоля+")";
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= "Не в списке";
		Нотбор.ЗначениеОтбора	= СписокПустыхЗначений;
		
	ИначеЕсли Отбор = "Не заполнено" Тогда
		
		СписокПустыхЗначений = Новый СписокЗначений();
		СписокПустыхЗначений.Добавить(Неопределено);
		
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтрокаОтбора, "ТипЗначения") тогда
			СписокПустыхЗначений.Добавить(СтрокаОтбора.ТипЗначения.ПривестиЗначение());
		КонецЕсли;
		
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоляПуть+" В (&Пар_"+ПрефиксПараметра+"_"+ИмяПоля+")";
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= "В списке";
		Нотбор.ЗначениеОтбора	= СписокПустыхЗначений;
			
	ИначеЕсли Отбор = "Больше" Тогда 
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоляПуть+" > &Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	= ЗначениеОтбора;
	ИначеЕсли Отбор = "Больше или равно" Тогда 
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоляПуть+" >= &Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	= ЗначениеОтбора;
	ИначеЕсли Отбор = "Меньше" Тогда 
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоляПуть+" < &Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	= ЗначениеОтбора;
	ИначеЕсли Отбор = "Меньше или равно" Тогда 
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоляПуть+" <= &Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	= ЗначениеОтбора;
		
	ИначеЕсли Отбор = "Содержит" Тогда
		
		ЗначениеОтбора = СтрЗаменить(ЗначениеОтбора, """", "");
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоляПуть+" ПОДОБНО ""%"+ЗначениеОтбора+"%""";
		
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	= ЗначениеОтбора;
		
	ИначеЕсли Отбор = "Не содержит" Тогда
		
		ЗначениеОтбора = СтрЗаменить(ЗначениеОтбора, """", "");
		ТекстОтбора = "И НЕ "+ПрефиксТаблицы+"."+ИмяПоляПуть+" ПОДОБНО ""%"+ЗначениеОтбора+"%""";
		
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	= ЗначениеОтбора;
		
	ИначеЕсли Отбор = "Начинается с" Тогда
		
		ЗначениеОтбора = СтрЗаменить(ЗначениеОтбора, """", "");
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоляПуть+" ПОДОБНО """+ЗначениеОтбора+"%""";
		
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	= ЗначениеОтбора;
		
	ИначеЕсли Отбор = "Не начинается с" Тогда
		
		ЗначениеОтбора = СтрЗаменить(ЗначениеОтбора, """", "");
		ТекстОтбора = "И НЕ "+ПрефиксТаблицы+"."+ИмяПоляПуть+" ПОДОБНО """+ЗначениеОтбора+"%""";
		
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	= ЗначениеОтбора;
		
	ИначеЕсли Отбор = "Соответствует шаблону" Тогда
		
		ЗначениеОтбора = СтрЗаменить(ЗначениеОтбора, """", "");
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоляПуть+" ПОДОБНО """+ЗначениеОтбора+"""";
		
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	= ЗначениеОтбора;
		
	ИначеЕсли Отбор = "Не соответствует шаблону" Тогда
		
		ЗначениеОтбора = СтрЗаменить(ЗначениеОтбора, """", "");
		ТекстОтбора = "И НЕ "+ПрефиксТаблицы+"."+ИмяПоляПуть+" ПОДОБНО """+ЗначениеОтбора+"""";
		
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	= ЗначениеОтбора;
			
	КонецЕсли;
	
	Возврат  ТекстОтбора;
	
КонецФункции	

Процедура ПолучитьТекстЗначенийПоказателей(ТекстШаблонаЗапроса,УИДГруппы,ИндексРегистра,ТзПараметровЗапроса,глТзАналитик,ГруппаПоказателей=Неопределено,ИндексЗапроса,ОбъектАБ,МаксИспользуемыхАналитик,ТаблицаТекущихОтборов)
		
	ТекстДополнительногоОтбора 		= "";	
	ТекстДополнительныхПолей 		= "";
	АналитикаДоВалютаКод            = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты.Код;
	
	_ИндексРегистра = ИндексРегистра;
	Если ИндексРегистра = -1 ИЛИ  ИндексРегистра = -11 Тогда 
		_ИндексРегистра = ПараметрыСеанса.ЧислоДопАналитик;
	КонецЕсли;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл	
		Если  _ИндексРегистра>= Инд Тогда
			ТекстДополнительныхПолей = ТекстДополнительныхПолей+"&&ТекущийРегистр.Аналитика"+Инд+" КАК Аналитика"+Инд+",";
		Иначе	
			ТекстДополнительныхПолей = ТекстДополнительныхПолей+"NULL КАК Аналитика"+Инд+",";
		КонецЕсли;		
	КонецЦикла;	
	
	Если _ИндексРегистра>0 ИЛИ _ИндексРегистра=-2 Тогда
		ТекстДополнительныхПолей = ТекстДополнительныхПолей+"&&ТекущийРегистр.АналитикаВалюта КАК АналитикаВалюта,";
	Иначе	
		ТекстДополнительныхПолей = ТекстДополнительныхПолей+"ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК АналитикаВалюта,";
	КонецЕсли;	
	
	Если Не ГруппаПоказателей=Неопределено Тогда
		Для Каждого РасшифровкаАналитки Из глТзАналитик Цикл
			ИндексАналитики = Неопределено;	
			Если НЕ ГруппаПоказателей.Владелец().Колонки.Найти("ВидАналитики_"+РасшифровкаАналитки.АналитикаКод) = Неопределено Тогда	
				ИндексАналитики = ГруппаПоказателей["ВидАналитики_"+РасшифровкаАналитки.АналитикаКод];	
			КонецЕсли;
			Если РасшифровкаАналитки.АналитикаКод = АналитикаДоВалютаКод Тогда	
				Если ЗначениеЗаполнено(ГруппаПоказателей.АналитикаВалюта) Тогда
					ИндексАналитики = "Валюта";	
				Иначе
					ИндексАналитики = 0;
				КонецЕсли; 	 
			КонецЕсли;	
			
			Если НЕ ИндексАналитики = 0 Тогда 					
				
				ПрефиксПараметра = УИДГруппы+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0");
				
				ОтборыТекущейАналитикиПоМакету	 = ОбъектАБ.РасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("УидГруппыОтборов,ПолеКод",УИДГруппы,РасшифровкаАналитки.АналитикаКод));
				ОтборыТекущейАналитикиПоОтборам  = ТаблицаТекущихОтборов.НайтиСтроки(Новый Структура("ОсновноеПолеКод,Использовать",РасшифровкаАналитки.АналитикаКод,Истина));

				ФинальныеОтборыТекущейАналитики = ТаблицаТекущихОтборов.СкопироватьКолонки();
				
				Если ОтборыТекущейАналитикиПоМакету.Количество()>0 
					И ОтборыТекущейАналитикиПоОтборам.Количество() =0 Тогда    //Отбор только по макету - добавляем его в финальный отбор
					
					НстрОтбора  						= ФинальныеОтборыТекущейАналитики.Добавить();
					НстрОтбора.ПолеКод 					= ОтборыТекущейАналитикиПоМакету[0].ПолеКод;
					НстрОтбора.ОсновноеПолеКод 			= ОтборыТекущейАналитикиПоМакету[0].ПолеКод;
					НстрОтбора.ПолеПредставление 		= ОтборыТекущейАналитикиПоМакету[0].Поле;
                    НстрОтбора.ВидСравненияСтрока 		= ОтборыТекущейАналитикиПоМакету[0].Отбор;
                    НстрОтбора.ЗначениеОтбора 			= ЗначениеИзСтрокиВнутр(ОтборыТекущейАналитикиПоМакету[0].ЗначениеОтбораСтрока);
					
					МассивТиповСтрока 					=   СтрРазделить(ОтборыТекущейАналитикиПоМакету[0].ТипЗначенияСтрока,"|");
					МассивТипов   						=   Новый Массив;
					Для Каждого СтрТип Из МассивТиповСтрока Цикл
						МассивТипов.Добавить(Тип(СтрТип));
					КонецЦикла;		
					НстрОтбора.ТипЗначения 				= Новый ОписаниеТипов(МассивТипов);
					
				ИначеЕсли ОтборыТекущейАналитикиПоМакету.Количество()= 0 
					И ОтборыТекущейАналитикиПоОтборам.Количество()>0  Тогда    //Отбор только по текущим значениям - добавляем его в финальный отбор
					
					Для Каждого СтрОтбор Из ОтборыТекущейАналитикиПоОтборам Цикл
						НстрОтбора  						= ФинальныеОтборыТекущейАналитики.Добавить();
						ЗаполнитьЗначенияСвойств(НстрОтбора,СтрОтбор);
					КонецЦикла;	
					
				ИначеЕсли ОтборыТекущейАналитикиПоМакету.Количество()> 0 
					И ОтборыТекущейАналитикиПоОтборам.Количество()>0  Тогда    //Отбор макета пересекается с отбором по текущим значениям...
					
					Для Каждого СтрОтбор Из ОтборыТекущейАналитикиПоОтборам Цикл
						Если  СтрОтбор.РежимОтбора = Перечисления.РежимыОтборовАналитическихТаблиц.Макет Тогда
							НстрОтбора  						= ФинальныеОтборыТекущейАналитики.Добавить();
							ЗаполнитьЗначенияСвойств(НстрОтбора,СтрОтбор);
						Иначе	
							тОтборАналитикиПоМакету = ОтборыТекущейАналитикиПоМакету[0];
							Если ОтборыТекущейАналитикиПоМакету[0].Отбор = "Отбор не производится" Тогда
								НстрОтбора  						= ФинальныеОтборыТекущейАналитики.Добавить();
								ЗаполнитьЗначенияСвойств(НстрОтбора,СтрОтбор);	
							Иначе	
								НстрОтбора  						= ФинальныеОтборыТекущейАналитики.Добавить();
								НстрОтбора.ПолеКод 					= ОтборыТекущейАналитикиПоМакету[0].ПолеКод;
								НстрОтбора.ОсновноеПолеКод 			= ОтборыТекущейАналитикиПоМакету[0].ПолеКод;
								НстрОтбора.ПолеПредставление 		= ОтборыТекущейАналитикиПоМакету[0].Поле;
								НстрОтбора.ВидСравненияСтрока 		= ОтборыТекущейАналитикиПоМакету[0].Отбор;
								НстрОтбора.ЗначениеОтбора 			= ЗначениеИзСтрокиВнутр(ОтборыТекущейАналитикиПоМакету[0].ЗначениеОтбораСтрока);
								
								МассивТиповСтрока 					=   СтрРазделить(ОтборыТекущейАналитикиПоМакету[0].ТипЗначенияСтрока,"|");
								МассивТипов   						=   Новый Массив;
								Для Каждого СтрТип Из МассивТиповСтрока Цикл
									МассивТипов.Добавить(Тип(СтрТип));
								КонецЦикла;		
								НстрОтбора.ТипЗначения 				= Новый ОписаниеТипов(МассивТипов);
								
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;	
						
				КонецЕсли;	
				
				Если ФинальныеОтборыТекущейАналитики.Количество()> 0 Тогда
					
					СтрокаУсловий = СформироватьТекстОтбора("&&ТекущийРегистр",ПрефиксПараметра,ФинальныеОтборыТекущейАналитики,ТзПараметровЗапроса,"Аналитика"+ИндексАналитики);
					//Если отбор установлен на реквизит аналитики, выразим тип аналитики
					Для Каждого СтрПолеОтбор Из ФинальныеОтборыТекущейАналитики Цикл
						Если СтрНайти(СтрПолеОтбор.ПолеКод,".")>0 Тогда
							
							РеквизитПоля  = СтрЗаменить(СтрПолеОтбор.ПолеКод,СтрПолеОтбор.ОсновноеПолеКод,"");
							ТекСубконто   = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.НайтиПоКоду(СтрПолеОтбор.ОсновноеПолеКод); 
							Если Не ТекСубконто = Неопределено Тогда
								ТипАналитики  = АналитическийБланкГенерацияМакетаУХСервер.ПолучитьТипСортировкуАналитики(СтрПолеОтбор.ОсновноеПолеКод,ТекСубконто.ТипЗначения);
								ТипАналитикиВЗапоросе = СтрЗаменить(ТипАналитики.ТипСтрока,"Ссылка","");
								Если  СтрНайти(ТипАналитикиВЗапоросе,"|")=0 Тогда	//Составной тип не выражаем			
									СтрокаУсловий = СтрЗаменить(СтрокаУсловий,"&&ТекущийРегистр.Аналитика"+ИндексАналитики+РеквизитПоля,
									"ВЫРАЗИТЬ( "+"&&ТекущийРегистр.Аналитика"+ИндексАналитики+"  КАК "+ТипАналитикиВЗапоросе+")"+РеквизитПоля);
								КонецЕсли
							КонецЕсли;	
						КонецЕсли;	
					КонецЦикла;	
					
					ТекстДополнительногоОтбора = ТекстДополнительногоОтбора+" "+СтрокаУсловий;
					
				КонецЕсли;
				
			Иначе	
				
				//Аналитики такой нет, а отбор есть. - данные не должны попасть в итог.
				ОтборыТекущейАналитикиПоОтборам  = ТаблицаТекущихОтборов.НайтиСтроки(Новый Структура("ОсновноеПолеКод,Использовать",РасшифровкаАналитки.АналитикаКод,Истина));
				Если ОтборыТекущейАналитикиПоОтборам.Количество()>0 Тогда
					ТекстДополнительногоОтбора = ТекстДополнительногоОтбора+" И ЛОЖЬ ";	
				КонецЕсли;	
				
			КонецЕсли;
		КонецЦикла;
		
	Иначе	//Это Синтетика 
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекстШаблонаЗапроса) Тогда		
		ТекстШаблонаЗапроса = ТекстШаблонаЗапроса+"
		|;
		|// ПОЛУЧАЕМ ДАННЫЕ ВО ВРЕМЕННУЮ ТАБЛИЦУ
		|ВЫБРАТЬ
		|	ЛОЖЬ КАК ЗначениеИзЛога,
		|	тзПоказатели.Показатель,
		|	тзПоказатели.ИмяОбластиДляВывода+&&втВерсииБаза.УидГруппыОтборов КАК ИмяОбластиДляВывода,
		|	тзПоказатели.ПоказательКод,
		|	&&втВерсииБаза.УидГруппыОтборов,
		|	&&втВерсииБаза.ПериодОтчета,
		|	&&втВерсииБаза.Сценарий,
		|	&&втВерсииБаза.Организация,
		|	&&втВерсииБаза.Проект,
		|"+ТекстДополнительныхПолей+"
		|	&&ТекущийРегистр.ЗначениеВалюта КАК ЗначениеВалюта,
		|	&&ЗначениеНеЧисло,
		|	NULL КАК ЗначениеНеЧислоИзЛога,
		|	&&ЗначениеЧисло
		|ПОМЕСТИТЬ мПоказателиРаскрытияВрем
		|ИЗ
		| тзПоказатели КАК тзПоказатели
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ &&ТекущийРегистр 
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &&втВерсииБаза КАК &&втВерсииБаза
		|		ПО &&втВерсииБаза.Версия = &&ТекущийРегистр.Версия
		|       &&СоединениеНечисловые
		|	ПО &&ТекущийРегистр.Версия = &&втВерсииБаза.Версия И &&ТекущийРегистр.Показатель В (&ОтборПоказателей_"+УИДГруппы+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0")+")
		|    И тзПоказатели.Показатель = &&ТекущийРегистр.Показатель
		|ГДЕ
		|	тзПоказатели.Показатель В (&ОтборПоказателей_"+УИДГруппы+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0")+") "+ТекстДополнительногоОтбора+" И &&ТекущийРегистр.Значение<>0 &&ТекстОтбораИтога" ;	
	Иначе		
		ТекстШаблонаЗапроса = ТекстШаблонаЗапроса+"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|	ЛОЖЬ КАК ЗначениеИзЛога,
		|	тзПоказатели.Показатель,
		|	тзПоказатели.ИмяОбластиДляВывода+&&втВерсииБаза.УидГруппыОтборов,
		|	тзПоказатели.ПоказательКод,
		|	&&втВерсииБаза.УидГруппыОтборов,
		|	&&втВерсииБаза.ПериодОтчета,
		|	&&втВерсииБаза.Сценарий,
		|	&&втВерсииБаза.Организация,
		|	&&втВерсииБаза.Проект,
		|"+ТекстДополнительныхПолей+"
		|	&&ТекущийРегистр.ЗначениеВалюта КАК ЗначениеВалюта,
		|	&&ЗначениеНеЧисло,
		|	NULL КАК ЗначениеНеЧислоИзЛога,
		|	&&ЗначениеЧисло
		|ИЗ
		| тзПоказатели КАК тзПоказатели
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ &&ТекущийРегистр 
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &&втВерсииБаза КАК &&втВерсииБаза
		|		ПО &&втВерсииБаза.Версия = &&ТекущийРегистр.Версия
		|       &&СоединениеНечисловые
		|	ПО &&ТекущийРегистр.Версия = &&втВерсииБаза.Версия И &&ТекущийРегистр.Показатель В (&ОтборПоказателей_"+УИДГруппы+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0")+")
		|    И тзПоказатели.Показатель = &&ТекущийРегистр.Показатель
		|ГДЕ
		|	тзПоказатели.Показатель В (&ОтборПоказателей_"+УИДГруппы+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0")+") "+ТекстДополнительногоОтбора+" И &&ТекущийРегистр.Значение<>0 &&ТекстОтбораИтога" ;
			
	КонецЕсли;
		
	ЧислоАналитикГруппы = ИндексРегистра;
	Если ЧислоАналитикГруппы = 0 ИЛИ ЧислоАналитикГруппы=NULL Тогда
		ЧислоАналитикГруппы = "Синтетика";
		ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекущийРегистр.ЗначениеВалюта","0");
	ИначеЕсли ЧислоАналитикГруппы = -1 Тогда
		ЧислоАналитикГруппы = "Нечисловые";
		ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекущийРегистр.ЗначениеВалюта","0");
	ИначеЕсли ЧислоАналитикГруппы = -11 Тогда
		ЧислоАналитикГруппы = "Нечисловые";
		ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекущийРегистр.ЗначениеВалюта","0");	
	ИначеЕсли ЧислоАналитикГруппы = -2 Тогда
		ЧислоАналитикГруппы = "Валютные";
	КонецЕсли;	
		
	Если ЧислоАналитикГруппы = "Нечисловые" Тогда
		Если ИндексРегистра = -1 Тогда
			ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекстОтбораИтога"," И &&ТекущийРегистр.ИтоговоеЗначение = ЛОЖЬ");
			ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ЗначениеНеЧисло","&&ТекущийРегистр.Значение КАК ЗначениеНеЧисло");
			ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ЗначениеЧисло","-1 КАК Значение");
		Иначе
			ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекстОтбораИтога"," И &&ТекущийРегистр.ИтоговоеЗначение = ИСТИНА");
			ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ЗначениеНеЧисло","&&ТекущийРегистр.Значение КАК ЗначениеНеЧисло");
			ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ЗначениеЧисло","-1 КАК Значение");
		КонецЕсли;
	Иначе	
		ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекстОтбораИтога","");
		ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ЗначениеНеЧисло","ЛОЖЬ КАК ЗначениеНеЧисло");
		ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ЗначениеЧисло","&&ТекущийРегистр.Значение КАК Значение");
	КонецЕсли;	
	
	ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекущийРегистр","РегистрСведений.ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы);
	ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&втВерсииБаза","втВерсииБаза_"+УИДГруппы);
	
	Если ИндексРегистра = -1 Тогда
		ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&СоединениеНечисловые","	И втВерсииБаза_"+УИДГруппы+".Показатель = РегистрСведений.ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".Показатель");
	ИначеЕсли 	ИндексРегистра = -11 Тогда
		ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&СоединениеНечисловые","	И втВерсииБаза_"+УИДГруппы+".Показатель = РегистрСведений.ЗначенияПоказателейОтчетов"+ЧислоАналитикГруппы+".Показатель");
	Иначе	
		ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&СоединениеНечисловые","");
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ПолучитьТекстЗначенийДанныхЛога_(ТекстШаблонаЗапроса,УИДГруппы,ИндексРегистра,ТзПараметровЗапроса,глТзАналитик,ГруппаПоказателей=Неопределено,ИндексЗапроса,ОбъектАБ,МаксИспользуемыхАналитик,ТаблицаТекущихОтборов)
		
	ТекстДополнительногоОтбора 		= "";	
	ТекстДополнительныхПолей 		= "";
	АналитикаДоВалютаКод            = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты.Код;
	ЭтоНечисловыеПоказатели         = Ложь;
	
	_ИндексРегистра = ИндексРегистра;
	Если ИндексРегистра = -1 ИЛИ  ИндексРегистра = -11 Тогда 
		_ИндексРегистра = ПараметрыСеанса.ЧислоДопАналитик;
		ЭтоНечисловыеПоказатели = Истина;
	КонецЕсли;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл	
		Если  _ИндексРегистра>= Инд Тогда
			ТекстДополнительныхПолей = ТекстДополнительныхПолей+"&&ТекущийРегистр.Аналитика"+Инд+" КАК Аналитика"+Инд+",";
		Иначе	
			ТекстДополнительныхПолей = ТекстДополнительныхПолей+"NULL КАК Аналитика"+Инд+",";
		КонецЕсли;		
	КонецЦикла;	
	
	Если _ИндексРегистра>0 ИЛИ _ИндексРегистра=-2 Тогда
		ТекстДополнительныхПолей = ТекстДополнительныхПолей+"&&ТекущийРегистр.АналитикаВалюта КАК АналитикаВалюта,";
	Иначе	
		ТекстДополнительныхПолей = ТекстДополнительныхПолей+"ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК АналитикаВалюта,";
	КонецЕсли;	

	
	Если Не ГруппаПоказателей=Неопределено Тогда
		Для Каждого РасшифровкаАналитки Из глТзАналитик Цикл
			ИндексАналитики = Неопределено;	
			Если НЕ ГруппаПоказателей.Владелец().Колонки.Найти("ВидАналитики_"+РасшифровкаАналитки.АналитикаКод) = Неопределено Тогда	
				ИндексАналитики = ГруппаПоказателей["ВидАналитики_"+РасшифровкаАналитки.АналитикаКод];	
			КонецЕсли;
			Если РасшифровкаАналитки.АналитикаКод = АналитикаДоВалютаКод Тогда	
				Если ЗначениеЗаполнено(ГруппаПоказателей.АналитикаВалюта) Тогда
					ИндексАналитики = "Валюта";	
				Иначе
					ИндексАналитики = 0;
				КонецЕсли; 	 
			КонецЕсли;	
			
			Если НЕ ИндексАналитики = 0 Тогда 					
				
				ПрефиксПараметра = УИДГруппы+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0");
				
				ОтборыТекущейАналитикиПоМакету	 = ОбъектАБ.РасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("УидГруппыОтборов,ПолеКод",УИДГруппы,РасшифровкаАналитки.АналитикаКод));
				ОтборыТекущейАналитикиПоОтборам  = ТаблицаТекущихОтборов.НайтиСтроки(Новый Структура("ОсновноеПолеКод,Использовать",РасшифровкаАналитки.АналитикаКод,Истина));

				ФинальныеОтборыТекущейАналитики = ТаблицаТекущихОтборов.СкопироватьКолонки();
				
				Если ОтборыТекущейАналитикиПоМакету.Количество()>0 
					И ОтборыТекущейАналитикиПоОтборам.Количество() =0 Тогда    //Отбор только по макету - добавляем его в финальный отбор
					
					НстрОтбора  						= ФинальныеОтборыТекущейАналитики.Добавить();
					НстрОтбора.ПолеКод 					= ОтборыТекущейАналитикиПоМакету[0].ПолеКод;
					НстрОтбора.ОсновноеПолеКод 			= ОтборыТекущейАналитикиПоМакету[0].ПолеКод;
					НстрОтбора.ПолеПредставление 		= ОтборыТекущейАналитикиПоМакету[0].Поле;
                    НстрОтбора.ВидСравненияСтрока 		= ОтборыТекущейАналитикиПоМакету[0].Отбор;
                    НстрОтбора.ЗначениеОтбора 			= ЗначениеИзСтрокиВнутр(ОтборыТекущейАналитикиПоМакету[0].ЗначениеОтбораСтрока);
					
					МассивТиповСтрока 					=   СтрРазделить(ОтборыТекущейАналитикиПоМакету[0].ТипЗначенияСтрока,"|");
					МассивТипов   						=   Новый Массив;
					Для Каждого СтрТип Из МассивТиповСтрока Цикл
						МассивТипов.Добавить(Тип(СтрТип));
					КонецЦикла;		
					НстрОтбора.ТипЗначения 				= Новый ОписаниеТипов(МассивТипов);
					
				ИначеЕсли ОтборыТекущейАналитикиПоМакету.Количество()= 0 
					И ОтборыТекущейАналитикиПоОтборам.Количество()>0  Тогда    //Отбор только по текущим значениям - добавляем его в финальный отбор
					
					Для Каждого СтрОтбор Из ОтборыТекущейАналитикиПоОтборам Цикл
						НстрОтбора  						= ФинальныеОтборыТекущейАналитики.Добавить();
						ЗаполнитьЗначенияСвойств(НстрОтбора,СтрОтбор);
					КонецЦикла;	
					
				ИначеЕсли ОтборыТекущейАналитикиПоМакету.Количество()> 0 
					И ОтборыТекущейАналитикиПоОтборам.Количество()>0  Тогда    //Отбор макета пересекается с отбором по текущим значениям...
					
					Для Каждого СтрОтбор Из ОтборыТекущейАналитикиПоОтборам Цикл
						Если  СтрОтбор.РежимОтбора = Перечисления.РежимыОтборовАналитическихТаблиц.Макет Тогда
							НстрОтбора  						= ФинальныеОтборыТекущейАналитики.Добавить();
							ЗаполнитьЗначенияСвойств(НстрОтбора,СтрОтбор);
						Иначе	
							тОтборАналитикиПоМакету = ОтборыТекущейАналитикиПоМакету[0];
							Если ОтборыТекущейАналитикиПоМакету[0].Отбор = "Отбор не производится" Тогда
								НстрОтбора  						= ФинальныеОтборыТекущейАналитики.Добавить();
								ЗаполнитьЗначенияСвойств(НстрОтбора,СтрОтбор);	
							Иначе	
								НстрОтбора  						= ФинальныеОтборыТекущейАналитики.Добавить();
								НстрОтбора.ПолеКод 					= ОтборыТекущейАналитикиПоМакету[0].ПолеКод;
								НстрОтбора.ОсновноеПолеКод 			= ОтборыТекущейАналитикиПоМакету[0].ПолеКод;
								НстрОтбора.ПолеПредставление 		= ОтборыТекущейАналитикиПоМакету[0].Поле;
								НстрОтбора.ВидСравненияСтрока 		= ОтборыТекущейАналитикиПоМакету[0].Отбор;
								НстрОтбора.ЗначениеОтбора 			= ЗначениеИзСтрокиВнутр(ОтборыТекущейАналитикиПоМакету[0].ЗначениеОтбораСтрока);
								
								МассивТиповСтрока 					=   СтрРазделить(ОтборыТекущейАналитикиПоМакету[0].ТипЗначенияСтрока,"|");
								МассивТипов   						=   Новый Массив;
								Для Каждого СтрТип Из МассивТиповСтрока Цикл
									МассивТипов.Добавить(Тип(СтрТип));
								КонецЦикла;		
								НстрОтбора.ТипЗначения 				= Новый ОписаниеТипов(МассивТипов);
								
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;	
						
				КонецЕсли;	
				
				Если ФинальныеОтборыТекущейАналитики.Количество()> 0 Тогда
					
					СтрокаУсловий = СформироватьТекстОтбора("&&ТекущийРегистр",ПрефиксПараметра,ФинальныеОтборыТекущейАналитики,ТзПараметровЗапроса,"Аналитика"+ИндексАналитики);
					//Если отбор установлен на реквизит аналитики, выразим тип аналитики
					Для Каждого СтрПолеОтбор Из ФинальныеОтборыТекущейАналитики Цикл
						Если СтрНайти(СтрПолеОтбор.ПолеКод,".")>0 Тогда
							
							РеквизитПоля  = СтрЗаменить(СтрПолеОтбор.ПолеКод,СтрПолеОтбор.ОсновноеПолеКод,"");
							ТекСубконто   = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.НайтиПоКоду(СтрПолеОтбор.ОсновноеПолеКод); 
							Если Не ТекСубконто = Неопределено Тогда
								ТипАналитики  = АналитическийБланкГенерацияМакетаУХСервер.ПолучитьТипСортировкуАналитики(СтрПолеОтбор.ОсновноеПолеКод,ТекСубконто.ТипЗначения);
								ТипАналитикиВЗапоросе = СтрЗаменить(ТипАналитики.ТипСтрока,"Ссылка","");
								Если  СтрНайти(ТипАналитикиВЗапоросе,"|")=0 Тогда	//Составной тип не выражаем			
									СтрокаУсловий = СтрЗаменить(СтрокаУсловий,"&&ТекущийРегистр.Аналитика"+ИндексАналитики+РеквизитПоля,
									"ВЫРАЗИТЬ( "+"&&ТекущийРегистр.Аналитика"+ИндексАналитики+"  КАК "+ТипАналитикиВЗапоросе+")"+РеквизитПоля);
								КонецЕсли
							КонецЕсли;	
						КонецЕсли;	
					КонецЦикла;	
					
					ТекстДополнительногоОтбора = ТекстДополнительногоОтбора+" "+СтрокаУсловий;
					
				КонецЕсли;
				
			Иначе	
				
				//Аналитики такой нет, а отбор есть. - данные не должны попасть в итог.
				ОтборыТекущейАналитикиПоОтборам  = ТаблицаТекущихОтборов.НайтиСтроки(Новый Структура("ОсновноеПолеКод,Использовать",РасшифровкаАналитки.АналитикаКод,Истина));
				Если ОтборыТекущейАналитикиПоОтборам.Количество()>0 Тогда
					ТекстДополнительногоОтбора = ТекстДополнительногоОтбора+" И ЛОЖЬ ";	
				КонецЕсли;	
				
			КонецЕсли;
		КонецЦикла;
		
	Иначе			
	КонецЕсли;
	
	
	ТекущиеОтборыВерсий  		= ТаблицаТекущихОтборов.НайтиСтроки(Новый Структура("Использовать,ОтборВерсии",Истина,Истина));
	ИспользуемыеОтборыВерсий    = ТаблицаТекущихОтборов.СкопироватьКолонки();
	
	Для Каждого СтрТекущийОтбор Из ТекущиеОтборыВерсий Цикл
		тРасшифровкаОтбораМакета  =  ОбъектАБ.РасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("УидГруппыОтборов,Поле",УидГруппы,СтрТекущийОтбор.ОсновноеПолеКод));
		Если тРасшифровкаОтбораМакета.Количество() = 1 
			И СтрТекущийОтбор.РежимОтбора = Перечисления.РежимыОтборовАналитическихТаблиц.Данные 
			И СтрНайти(тРасшифровкаОтбораМакета[0].Отбор," отчета")>0 Тогда //Если отбор устанавливается на данные, то фильруем только "текущие" данные
			
			нИспользуемыйОтбор = ИспользуемыеОтборыВерсий.Добавить();
			ЗаполнитьЗначенияСвойств(нИспользуемыйОтбор,СтрТекущийОтбор);
			
		ИначеЕсли тРасшифровкаОтбораМакета.Количество() = 1 
			И СтрТекущийОтбор.РежимОтбора = Перечисления.РежимыОтборовАналитическихТаблиц.Данные 
			И тРасшифровкаОтбораМакета[0].Отбор = "Отбор не производится" Тогда //Если отбор устанавливается на данные, то фильруем только "текущие" данные
			
			нИспользуемыйОтбор = ИспользуемыеОтборыВерсий.Добавить();
			ЗаполнитьЗначенияСвойств(нИспользуемыйОтбор,СтрТекущийОтбор);
	
			
		ИначеЕсли тРасшифровкаОтбораМакета.Количество() = 1    				//Если отбор устанавливается на данные, то оставляем фиксированные отборы макета без изменений
			И СтрТекущийОтбор.РежимОтбора = Перечисления.РежимыОтборовАналитическихТаблиц.Данные Тогда 
			
			нИспользуемыйОтбор = ИспользуемыеОтборыВерсий.Добавить();
			
			нИспользуемыйОтбор.ПолеКод 					= тРасшифровкаОтбораМакета[0].ПолеКод;
			нИспользуемыйОтбор.ОсновноеПолеКод 			= тРасшифровкаОтбораМакета[0].ПолеКод;
			нИспользуемыйОтбор.ПолеПредставление 		= тРасшифровкаОтбораМакета[0].Поле;
			нИспользуемыйОтбор.ВидСравненияСтрока 		= тРасшифровкаОтбораМакета[0].Отбор;
			нИспользуемыйОтбор.ЗначениеОтбора 			= ЗначениеИзСтрокиВнутр(тРасшифровкаОтбораМакета[0].ЗначениеОтбораСтрока);
			
			МассивТиповСтрока 					=   СтрРазделить(тРасшифровкаОтбораМакета[0].ТипЗначенияСтрока,"|");
			МассивТипов   						=   Новый Массив;
			Для Каждого СтрТип Из МассивТиповСтрока Цикл
				МассивТипов.Добавить(Тип(СтрТип));
			КонецЦикла;		
			нИспользуемыйОтбор.ТипЗначения 				= Новый ОписаниеТипов(МассивТипов);

			
		ИначеЕсли тРасшифровкаОтбораМакета.Количество() = 1    				//Если отбор устанавливается на макет, то фильтруем все данные
			И СтрТекущийОтбор.РежимОтбора = Перечисления.РежимыОтборовАналитическихТаблиц.Макет Тогда 
			
			нИспользуемыйОтбор = ИспользуемыеОтборыВерсий.Добавить();
			ЗаполнитьЗначенияСвойств(нИспользуемыйОтбор,СтрТекущийОтбор);
		ИначеЕсли СтрТекущийОтбор.ПолеКод = "Валюта" ИЛИ СтрТекущийОтбор.ПолеКод = "ПериодОтчета" Тогда
			нИспользуемыйОтбор = ИспользуемыеОтборыВерсий.Добавить();
			ЗаполнитьЗначенияСвойств(нИспользуемыйОтбор,СтрТекущийОтбор);
		КонецЕсли;	
		
	КонецЦикла;	

	ТзПараметровЗапроса_ = ТзПараметровЗапроса.СкопироватьКолонки();
	ТекстОтбораПоКлючамВерсии = СформироватьТекстОтбора("мДанныеЛога",УидГруппы,ИспользуемыеОтборыВерсий,ТзПараметровЗапроса_);

	
	Если ЭтоНечисловыеПоказатели Тогда
		
		ТекстШаблонаЗапроса = ТекстШаблонаЗапроса+"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИСТИНА КАК ЗначениеИзЛога,
		|	тзПоказатели.Показатель,
		|	тзПоказатели.ИмяОбластиДляВывода+" +""""+УИДГруппы+""""+ " КАК ИмяОбластиДляВывода,
		|	тзПоказатели.ПоказательКод,
		|	"+""""+УИДГруппы+""""+ " КАК УидГруппыОтборов"+",
		|	мДанныеЛога.ПериодОтчета,
		|	мДанныеЛога.Сценарий,
		|	мДанныеЛога.Организация,
		|	мДанныеЛога.Проект,
		|"+ТекстДополнительныхПолей+"
		|	-1 КАК ЗначениеВалюта,
		|	NULL КАК ЗначениеНеЧисло,
		|	мДанныеЛога.ЗначениеНечисловое КАК ЗначениеНеЧислоИзЛога,
		|	-1 КАК Значение
		|	
		|ИЗ
		| тзПоказатели КАК тзПоказатели
		|	ЛЕВОЕ СОЕДИНЕНИЕ мДанныеЛогаНечисловые КАК мДанныеЛога		
		|		ПО  мДанныеЛога.Показатель В (&ОтборПоказателей_"+УИДГруппы+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0")+")
		|   	И тзПоказатели.Показатель = мДанныеЛога.Показатель 
		|   	И мДанныеЛога.Валюта 	  = &Валюта
		|       //ТекстОтбораПоКлючамВерсии
		|ГДЕ
		|	тзПоказатели.Показатель В (&ОтборПоказателей_"+УИДГруппы+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0")+") "+ТекстДополнительногоОтбора+"" ;	
			
	Иначе	
		
		ТекстШаблонаЗапроса = ТекстШаблонаЗапроса+"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИСТИНА КАК ЗначениеИзЛога,
		|	тзПоказатели.Показатель,
		|	тзПоказатели.ИмяОбластиДляВывода+" +""""+УИДГруппы+""""+ " КАК ИмяОбластиДляВывода,
		|	тзПоказатели.ПоказательКод,
		|	"+""""+УИДГруппы+""""+ " КАК УидГруппыОтборов"+",
		|	мДанныеЛога.ПериодОтчета,
		|	мДанныеЛога.Сценарий,
		|	мДанныеЛога.Организация,
		|	мДанныеЛога.Проект,
		|"+ТекстДополнительныхПолей+"
		|	мДанныеЛога.ЗначениеВалюта КАК ЗначениеВалюта,
		|	NULL КАК ЗначениеНеЧисло,
		|	мДанныеЛога.ЗначениеНечисловое КАК ЗначениеНеЧислоИзЛога,
		|	мДанныеЛога.Значение КАК Значение
		|	
		|ИЗ
		| тзПоказатели КАК тзПоказатели
		|	ЛЕВОЕ СОЕДИНЕНИЕ мДанныеЛога		
		|		ПО  мДанныеЛога.Показатель В (&ОтборПоказателей_"+УИДГруппы+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0")+")
		|   	И тзПоказатели.Показатель = мДанныеЛога.Показатель 
		|   	И мДанныеЛога.Валюта 	  = &Валюта
		|       //ТекстОтбораПоКлючамВерсии
		|ГДЕ
		|	тзПоказатели.Показатель В (&ОтборПоказателей_"+УИДГруппы+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0")+") "+ТекстДополнительногоОтбора+"" ;	
		
	КонецЕсли;
	
	ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"//ТекстОтбораПоКлючамВерсии",ТекстОтбораПоКлючамВерсии); 
   	ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекущийРегистр","мДанныеЛога");

	
КонецПроцедуры	

Процедура ПолучитьТекстЗначенийДанныхЛога(ТекстШаблонаЗапроса,УИДГруппы,ИндексРегистра,ТзПараметровЗапроса,глТзАналитик,ГруппаПоказателей=Неопределено,ИндексЗапроса,ОбъектАБ,МаксИспользуемыхАналитик,ТаблицаТекущихОтборов)
		
	ТекстДополнительногоОтбора 		= "";	
	ТекстДополнительныхПолей 		= "";
	АналитикаДоВалютаКод            = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты.Код;
	ЭтоНечисловыеПоказатели         = Ложь;
	
	_ИндексРегистра = ИндексРегистра;
	Если ИндексРегистра = -1 ИЛИ  ИндексРегистра = -11 Тогда 
		_ИндексРегистра = ПараметрыСеанса.ЧислоДопАналитик;
		ЭтоНечисловыеПоказатели = Истина;
	КонецЕсли;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл	
		Если  _ИндексРегистра>= Инд Тогда
			ТекстДополнительныхПолей = ТекстДополнительныхПолей+"&&ТекущийРегистр.Аналитика"+Инд+" КАК Аналитика"+Инд+",";
		Иначе	
			ТекстДополнительныхПолей = ТекстДополнительныхПолей+"NULL КАК Аналитика"+Инд+",";
		КонецЕсли;		
	КонецЦикла;	
	
	Если _ИндексРегистра>0 ИЛИ _ИндексРегистра=-2 Тогда
		ТекстДополнительныхПолей = ТекстДополнительныхПолей+"&&ТекущийРегистр.АналитикаВалюта КАК АналитикаВалюта,";
	Иначе	
		ТекстДополнительныхПолей = ТекстДополнительныхПолей+"ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка) КАК АналитикаВалюта,";
	КонецЕсли;	

	
	Если Не ГруппаПоказателей=Неопределено Тогда
		Для Каждого РасшифровкаАналитки Из глТзАналитик Цикл
			ИндексАналитики = Неопределено;	
			Если НЕ ГруппаПоказателей.Владелец().Колонки.Найти("ВидАналитики_"+РасшифровкаАналитки.АналитикаКод) = Неопределено Тогда	
				ИндексАналитики = ГруппаПоказателей["ВидАналитики_"+РасшифровкаАналитки.АналитикаКод];	
			КонецЕсли;
			Если РасшифровкаАналитки.АналитикаКод = АналитикаДоВалютаКод Тогда	
				Если ЗначениеЗаполнено(ГруппаПоказателей.АналитикаВалюта) Тогда
					ИндексАналитики = "Валюта";	
				Иначе
					ИндексАналитики = 0;
				КонецЕсли; 	 
			КонецЕсли;	
			
			Если НЕ ИндексАналитики = 0 Тогда 					
				
				ПрефиксПараметра = УИДГруппы+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0");
				
				ОтборыТекущейАналитикиПоМакету	 = ОбъектАБ.РасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("УидГруппыОтборов,ПолеКод",УИДГруппы,РасшифровкаАналитки.АналитикаКод));
				ОтборыТекущейАналитикиПоОтборам  = ТаблицаТекущихОтборов.НайтиСтроки(Новый Структура("ОсновноеПолеКод,Использовать",РасшифровкаАналитки.АналитикаКод,Истина));

				ФинальныеОтборыТекущейАналитики = ТаблицаТекущихОтборов.СкопироватьКолонки();
				
				Если ОтборыТекущейАналитикиПоМакету.Количество()>0 
					И ОтборыТекущейАналитикиПоОтборам.Количество() =0 Тогда    //Отбор только по макету - добавляем его в финальный отбор
					
					НстрОтбора  						= ФинальныеОтборыТекущейАналитики.Добавить();
					НстрОтбора.ПолеКод 					= ОтборыТекущейАналитикиПоМакету[0].ПолеКод;
					НстрОтбора.ОсновноеПолеКод 			= ОтборыТекущейАналитикиПоМакету[0].ПолеКод;
					НстрОтбора.ПолеПредставление 		= ОтборыТекущейАналитикиПоМакету[0].Поле;
                    НстрОтбора.ВидСравненияСтрока 		= ОтборыТекущейАналитикиПоМакету[0].Отбор;
                    НстрОтбора.ЗначениеОтбора 			= ЗначениеИзСтрокиВнутр(ОтборыТекущейАналитикиПоМакету[0].ЗначениеОтбораСтрока);
					
					МассивТиповСтрока 					=   СтрРазделить(ОтборыТекущейАналитикиПоМакету[0].ТипЗначенияСтрока,"|");
					МассивТипов   						=   Новый Массив;
					Для Каждого СтрТип Из МассивТиповСтрока Цикл
						МассивТипов.Добавить(Тип(СтрТип));
					КонецЦикла;		
					НстрОтбора.ТипЗначения 				= Новый ОписаниеТипов(МассивТипов);
					
				ИначеЕсли ОтборыТекущейАналитикиПоМакету.Количество()= 0 
					И ОтборыТекущейАналитикиПоОтборам.Количество()>0  Тогда    //Отбор только по текущим значениям - добавляем его в финальный отбор
					
					Для Каждого СтрОтбор Из ОтборыТекущейАналитикиПоОтборам Цикл
						НстрОтбора  						= ФинальныеОтборыТекущейАналитики.Добавить();
						ЗаполнитьЗначенияСвойств(НстрОтбора,СтрОтбор);
					КонецЦикла;	
					
				ИначеЕсли ОтборыТекущейАналитикиПоМакету.Количество()> 0 
					И ОтборыТекущейАналитикиПоОтборам.Количество()>0  Тогда    //Отбор макета пересекается с отбором по текущим значениям...
					
					Для Каждого СтрОтбор Из ОтборыТекущейАналитикиПоОтборам Цикл
						Если  СтрОтбор.РежимОтбора = Перечисления.РежимыОтборовАналитическихТаблиц.Макет Тогда
							НстрОтбора  						= ФинальныеОтборыТекущейАналитики.Добавить();
							ЗаполнитьЗначенияСвойств(НстрОтбора,СтрОтбор);
						Иначе	
							тОтборАналитикиПоМакету = ОтборыТекущейАналитикиПоМакету[0];
							Если ОтборыТекущейАналитикиПоМакету[0].Отбор = "Отбор не производится" Тогда
								НстрОтбора  						= ФинальныеОтборыТекущейАналитики.Добавить();
								ЗаполнитьЗначенияСвойств(НстрОтбора,СтрОтбор);	
							Иначе	
								НстрОтбора  						= ФинальныеОтборыТекущейАналитики.Добавить();
								НстрОтбора.ПолеКод 					= ОтборыТекущейАналитикиПоМакету[0].ПолеКод;
								НстрОтбора.ОсновноеПолеКод 			= ОтборыТекущейАналитикиПоМакету[0].ПолеКод;
								НстрОтбора.ПолеПредставление 		= ОтборыТекущейАналитикиПоМакету[0].Поле;
								НстрОтбора.ВидСравненияСтрока 		= ОтборыТекущейАналитикиПоМакету[0].Отбор;
								НстрОтбора.ЗначениеОтбора 			= ЗначениеИзСтрокиВнутр(ОтборыТекущейАналитикиПоМакету[0].ЗначениеОтбораСтрока);
								
								МассивТиповСтрока 					=   СтрРазделить(ОтборыТекущейАналитикиПоМакету[0].ТипЗначенияСтрока,"|");
								МассивТипов   						=   Новый Массив;
								Для Каждого СтрТип Из МассивТиповСтрока Цикл
									МассивТипов.Добавить(Тип(СтрТип));
								КонецЦикла;		
								НстрОтбора.ТипЗначения 				= Новый ОписаниеТипов(МассивТипов);
								
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;	
						
				КонецЕсли;	
				
				Если ФинальныеОтборыТекущейАналитики.Количество()> 0 Тогда
					
					СтрокаУсловий = СформироватьТекстОтбора("&&ТекущийРегистр",ПрефиксПараметра,ФинальныеОтборыТекущейАналитики,ТзПараметровЗапроса,"Аналитика"+ИндексАналитики);
					//Если отбор установлен на реквизит аналитики, выразим тип аналитики
					Для Каждого СтрПолеОтбор Из ФинальныеОтборыТекущейАналитики Цикл
						Если СтрНайти(СтрПолеОтбор.ПолеКод,".")>0 Тогда
							
							РеквизитПоля  = СтрЗаменить(СтрПолеОтбор.ПолеКод,СтрПолеОтбор.ОсновноеПолеКод,"");
							ТекСубконто   = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.НайтиПоКоду(СтрПолеОтбор.ОсновноеПолеКод); 
							Если Не ТекСубконто = Неопределено Тогда
								ТипАналитики  = АналитическийБланкГенерацияМакетаУХСервер.ПолучитьТипСортировкуАналитики(СтрПолеОтбор.ОсновноеПолеКод,ТекСубконто.ТипЗначения);
								ТипАналитикиВЗапоросе = СтрЗаменить(ТипАналитики.ТипСтрока,"Ссылка","");
								Если  СтрНайти(ТипАналитикиВЗапоросе,"|")=0 Тогда	//Составной тип не выражаем			
									СтрокаУсловий = СтрЗаменить(СтрокаУсловий,"&&ТекущийРегистр.Аналитика"+ИндексАналитики+РеквизитПоля,
									"ВЫРАЗИТЬ( "+"&&ТекущийРегистр.Аналитика"+ИндексАналитики+"  КАК "+ТипАналитикиВЗапоросе+")"+РеквизитПоля);
								КонецЕсли
							КонецЕсли;	
						КонецЕсли;	
					КонецЦикла;	
					
					ТекстДополнительногоОтбора = ТекстДополнительногоОтбора+" "+СтрокаУсловий;
					
				КонецЕсли;
				
			Иначе	
				
				//Аналитики такой нет, а отбор есть. - данные не должны попасть в итог.
				ОтборыТекущейАналитикиПоОтборам  = ТаблицаТекущихОтборов.НайтиСтроки(Новый Структура("ОсновноеПолеКод,Использовать",РасшифровкаАналитки.АналитикаКод,Истина));
				Если ОтборыТекущейАналитикиПоОтборам.Количество()>0 Тогда
					ТекстДополнительногоОтбора = ТекстДополнительногоОтбора+" И ЛОЖЬ ";	
				КонецЕсли;	
				
			КонецЕсли;
		КонецЦикла;
		
	Иначе			
	КонецЕсли;
	
	
	ТекущиеОтборыВерсий  		= ТаблицаТекущихОтборов.НайтиСтроки(Новый Структура("Использовать,ОтборВерсии",Истина,Истина));
	ИспользуемыеОтборыВерсий    = ТаблицаТекущихОтборов.СкопироватьКолонки();
	
	Для Каждого СтрТекущийОтбор Из ТекущиеОтборыВерсий Цикл
		тРасшифровкаОтбораМакета  =  ОбъектАБ.РасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("УидГруппыОтборов,Поле",УидГруппы,СтрТекущийОтбор.ОсновноеПолеКод));
		Если тРасшифровкаОтбораМакета.Количество() = 1 
			И СтрТекущийОтбор.РежимОтбора = Перечисления.РежимыОтборовАналитическихТаблиц.Данные 
			И СтрНайти(тРасшифровкаОтбораМакета[0].Отбор," отчета")>0 Тогда //Если отбор устанавливается на данные, то фильруем только "текущие" данные
			
			нИспользуемыйОтбор = ИспользуемыеОтборыВерсий.Добавить();
			ЗаполнитьЗначенияСвойств(нИспользуемыйОтбор,СтрТекущийОтбор);
			
		ИначеЕсли тРасшифровкаОтбораМакета.Количество() = 1 
			И СтрТекущийОтбор.РежимОтбора = Перечисления.РежимыОтборовАналитическихТаблиц.Данные 
			И тРасшифровкаОтбораМакета[0].Отбор = "Отбор не производится" Тогда //Если отбор устанавливается на данные, то фильруем только "текущие" данные
			
			нИспользуемыйОтбор = ИспользуемыеОтборыВерсий.Добавить();
			ЗаполнитьЗначенияСвойств(нИспользуемыйОтбор,СтрТекущийОтбор);
	
			
		ИначеЕсли тРасшифровкаОтбораМакета.Количество() = 1    				//Если отбор устанавливается на данные, то оставляем фиксированные отборы макета без изменений
			И СтрТекущийОтбор.РежимОтбора = Перечисления.РежимыОтборовАналитическихТаблиц.Данные Тогда 
			
			нИспользуемыйОтбор = ИспользуемыеОтборыВерсий.Добавить();
			
			нИспользуемыйОтбор.ПолеКод 					= тРасшифровкаОтбораМакета[0].ПолеКод;
			нИспользуемыйОтбор.ОсновноеПолеКод 			= тРасшифровкаОтбораМакета[0].ПолеКод;
			нИспользуемыйОтбор.ПолеПредставление 		= тРасшифровкаОтбораМакета[0].Поле;
			нИспользуемыйОтбор.ВидСравненияСтрока 		= тРасшифровкаОтбораМакета[0].Отбор;
			нИспользуемыйОтбор.ЗначениеОтбора 			= ЗначениеИзСтрокиВнутр(тРасшифровкаОтбораМакета[0].ЗначениеОтбораСтрока);
			
			МассивТиповСтрока 					=   СтрРазделить(тРасшифровкаОтбораМакета[0].ТипЗначенияСтрока,"|");
			МассивТипов   						=   Новый Массив;
			Для Каждого СтрТип Из МассивТиповСтрока Цикл
				МассивТипов.Добавить(Тип(СтрТип));
			КонецЦикла;		
			нИспользуемыйОтбор.ТипЗначения 				= Новый ОписаниеТипов(МассивТипов);

			
		ИначеЕсли тРасшифровкаОтбораМакета.Количество() = 1    				//Если отбор устанавливается на макет, то фильтруем все данные
			И СтрТекущийОтбор.РежимОтбора = Перечисления.РежимыОтборовАналитическихТаблиц.Макет Тогда 
			
			нИспользуемыйОтбор = ИспользуемыеОтборыВерсий.Добавить();
			ЗаполнитьЗначенияСвойств(нИспользуемыйОтбор,СтрТекущийОтбор);
		ИначеЕсли СтрТекущийОтбор.ПолеКод = "Валюта" ИЛИ СтрТекущийОтбор.ПолеКод = "ПериодОтчета" Тогда
			нИспользуемыйОтбор = ИспользуемыеОтборыВерсий.Добавить();
			ЗаполнитьЗначенияСвойств(нИспользуемыйОтбор,СтрТекущийОтбор);
		КонецЕсли;	
		
	КонецЦикла;	

	ТзПараметровЗапроса_ = ТзПараметровЗапроса.СкопироватьКолонки();
	ТекстОтбораПоКлючамВерсии = СформироватьТекстОтбора("мДанныеЛога",УидГруппы,ИспользуемыеОтборыВерсий,ТзПараметровЗапроса_);

	
	Если ЭтоНечисловыеПоказатели Тогда
		
		ТекстШаблонаЗапроса = ТекстШаблонаЗапроса+"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИСТИНА КАК ЗначениеИзЛога,
		|	тзПоказатели.Показатель,
		|	тзПоказатели.ИмяОбластиДляВывода+" +""""+УИДГруппы+""""+ " КАК ИмяОбластиДляВывода,
		|	тзПоказатели.ПоказательКод,
		|	"+""""+УИДГруппы+""""+ " КАК УидГруппыОтборов"+",
		|	мДанныеЛога.ПериодОтчета,
		|	мДанныеЛога.Сценарий,
		|	мДанныеЛога.Организация,
		|	мДанныеЛога.Проект,
		|"+ТекстДополнительныхПолей+"
		|	-1 КАК ЗначениеВалюта,
		|	NULL КАК ЗначениеНеЧисло,
		|	мДанныеЛога.ЗначениеНечисловое КАК ЗначениеНеЧислоИзЛога,
		|	-1 КАК Значение
		|	
		|ИЗ
		| тзПоказатели КАК тзПоказатели
		|	ЛЕВОЕ СОЕДИНЕНИЕ мДанныеЛогаНечисловые КАК мДанныеЛога		
		|		ПО  мДанныеЛога.Показатель В (&ОтборПоказателей_"+УИДГруппы+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0")+")
		|   	И тзПоказатели.Показатель = мДанныеЛога.Показатель 
		|   	И мДанныеЛога.Валюта 	  = &Валюта
		|       //ТекстОтбораПоКлючамВерсии
		|ГДЕ
		|	тзПоказатели.Показатель В (&ОтборПоказателей_"+УИДГруппы+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0")+") "+ТекстДополнительногоОтбора+"" ;	
			
	Иначе	
		
		ТекстШаблонаЗапроса = ТекстШаблонаЗапроса+"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ИСТИНА КАК ЗначениеИзЛога,
		|	тзПоказатели.Показатель,
		|	тзПоказатели.ИмяОбластиДляВывода+" +""""+УИДГруппы+""""+ " КАК ИмяОбластиДляВывода,
		|	тзПоказатели.ПоказательКод,
		|	"+""""+УИДГруппы+""""+ " КАК УидГруппыОтборов"+",
		|	мДанныеЛога.ПериодОтчета,
		|	мДанныеЛога.Сценарий,
		|	мДанныеЛога.Организация,
		|	мДанныеЛога.Проект,
		|"+ТекстДополнительныхПолей+"
		|	мДанныеЛога.ЗначениеВалюта КАК ЗначениеВалюта,
		|	NULL КАК ЗначениеНеЧисло,
		|	мДанныеЛога.ЗначениеНечисловое КАК ЗначениеНеЧислоИзЛога,
		|	мДанныеЛога.Значение КАК Значение
		|	
		|ИЗ
		| тзПоказатели КАК тзПоказатели
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛогИзмененныхЗначенийПоказателейОтчетов КАК мДанныеЛога		
		|		ПО  
		|   		мДанныеЛога.УникальныйИдентификаторСеанса = &УникальныйИдентификаторСеанса
		|			И мДанныеЛога.Показатель В (&ОтборПоказателей_"+УИДГруппы+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0")+")
		|   		И тзПоказатели.Показатель = мДанныеЛога.Показатель 
		|   		И мДанныеЛога.Валюта 	  = &Валюта
		|       	//ТекстОтбораПоКлючамВерсии
		|ГДЕ
		|	тзПоказатели.Показатель В (&ОтборПоказателей_"+УИДГруппы+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0")+") "+ТекстДополнительногоОтбора+"" ;	
		
	КонецЕсли;
	
	ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"//ТекстОтбораПоКлючамВерсии",ТекстОтбораПоКлючамВерсии); 
   	ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекущийРегистр","мДанныеЛога");

	
КонецПроцедуры	




Процедура ПолучитьТекстКомментариевЗначенийПоказателей(ТекстШаблонаЗапроса,УИДГруппы,ИндексРегистра,ТзПараметровЗапроса,глТзАналитик,ГруппаПоказателей=Неопределено,ИндексЗапроса,ОбъектАБ,МаксИспользуемыхАналитик)
		
	ТекстДополнительногоОтбора 	= "";	
	ТекстДополнительныхПолей 	= "&&ТекущийРегистр.АналитикаВалюта КАК АналитикаВалюта,";
	АналитикаДоВалютаКод        = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты.Код;
	ПрефиксВерсии 				= "";
	
	_ИндексРегистра = ИндексРегистра;
	Если ИндексРегистра = -1 ИЛИ  ИндексРегистра = -11 Тогда 
		_ИндексРегистра = ПараметрыСеанса.ЧислоДопАналитик;		
	ИначеЕсли ОбъектАБ.ЕстьДополнительныеВалюты Тогда
		ПрефиксВерсии = "ВсеВалюты_";
	КонецЕсли;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл	
		Если  _ИндексРегистра>= Инд Тогда
			ТекстДополнительныхПолей = ТекстДополнительныхПолей+"
			|	&&ТекущийРегистр.Аналитика"+Инд+" КАК Аналитика"+Инд+",";
		Иначе	
			ТекстДополнительныхПолей = ТекстДополнительныхПолей+"
			|	NULL КАК Аналитика"+Инд+",";
		КонецЕсли;		
	КонецЦикла;	
		
	Если Не ГруппаПоказателей=Неопределено Тогда
		Для Каждого РасшифровкаАналитки Из глТзАналитик Цикл
			ИндексАналитики = Неопределено;	
			Если НЕ ГруппаПоказателей.Владелец().Колонки.Найти("ВидАналитики_"+РасшифровкаАналитки.АналитикаКод) = Неопределено Тогда	
				ИндексАналитики = ГруппаПоказателей["ВидАналитики_"+РасшифровкаАналитки.АналитикаКод];	
			КонецЕсли;
			Если РасшифровкаАналитки.АналитикаКод =АналитикаДоВалютаКод Тогда	
				Если ЗначениеЗаполнено(ГруппаПоказателей.АналитикаВалюта) Тогда
					ИндексАналитики = "Валюта";	
				Иначе
					ИндексАналитики = 0;
				КонецЕсли; 	 
			КонецЕсли;	
			
			Если НЕ ИндексАналитики = 0 Тогда 					
				
				ПрефиксПараметра = УИДГруппы+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0");
				
				ОтборыТекущейАналитики = ОбъектАБ.РасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("УидГруппыОтборов,ПолеКод",УИДГруппы,РасшифровкаАналитки.АналитикаКод));
				Если ОтборыТекущейАналитики.Количество()= 1 Тогда
					ОтборТекущейАналитики = ОтборыТекущейАналитики[0];
					СтрокаУсловий = СформироватьТекстОтбораПоВерсии("&&ТекущийРегистр",ПрефиксПараметра,ОтборТекущейАналитики,ТзПараметровЗапроса,"Аналитика"+ИндексАналитики);
					ТекстДополнительногоОтбора = ТекстДополнительногоОтбора+" "+СтрокаУсловий;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
	Иначе	//Это Синтетика 
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекстШаблонаЗапроса) Тогда		
		ТекстШаблонаЗапроса = ТекстШаблонаЗапроса+"
		|// ПОЛУЧАЕМ КОММЕНТАРИИ ПОКАЗАТЕЛЕЙ
		|";
	Иначе		
		ТекстШаблонаЗапроса = ТекстШаблонаЗапроса+"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|";
	КонецЕсли;
	
	ТекстШаблонаЗапроса = ТекстШаблонаЗапроса+"
		|ВЫБРАТЬ
		|	&&ТекущийРегистр.Показатель,
		|	&&втВерсииБаза.УидГруппыОтборов,
		|	&&втВерсииБаза.ПериодОтчета,
		|	&&втВерсииБаза.Сценарий,
		|	&&втВерсииБаза.Организация,
		|	&&втВерсииБаза.Проект,
		|	"+ТекстДополнительныхПолей+"
		|	&&ТекущийРегистр.Комментарий
		|ИЗ &&ТекущийРегистр 
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ &&втВерсииБаза КАК &&втВерсииБаза
		|		ПО &&втВерсииБаза.Версия = &&ТекущийРегистр.Версия
		|ГДЕ
		|	&&ТекущийРегистр.Показатель В (&ОтборПоказателей_"+УИДГруппы+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0")+") "+ТекстДополнительногоОтбора+"";
			
	 ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&ТекущийРегистр","РегистрСведений.КомментарииЗначенийПоказателей");
	 ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&втВерсииБаза","втВерсииБаза_" +ПрефиксВерсии+УИДГруппы);
			
КонецПроцедуры	

Процедура ПодготовитьТекстФинальногоЗапросаДанные(ТекстИтоговогоЗапроса)
			
	ТекстИтоговогоЗапроса =ТекстИтоговогоЗапроса+"
	|;
	|// Подзапрос для получения сгруппированного среза по данным с помещением в ВТ
	|ВЫБРАТЬ
	|	мПоказателиРаскрытияВрем.Показатель КАК Показатель,
	|	мПоказателиРаскрытияВрем.ИмяОбластиДляВывода КАК ИмяОбластиДляВывода,
	|	мПоказателиРаскрытияВрем.УидГруппыОтборов КАК УидГруппыОтборов,
	|	мПоказателиРаскрытияВрем.ПериодОтчета КАК ПериодОтчета,
	|	мПоказателиРаскрытияВрем.Сценарий КАК Сценарий,
	|	мПоказателиРаскрытияВрем.Организация КАК Организация,
	|	мПоказателиРаскрытияВрем.Проект КАК Проект,";
	
	Для ИндАналитики = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл	
		ТекстИтоговогоЗапроса =ТекстИтоговогоЗапроса+"
		|	мПоказателиРаскрытияВрем.Аналитика"+ИндАналитики+" КАК Аналитика"+ИндАналитики+",";
	КонецЦикла;
	
	ТекстИтоговогоЗапроса =ТекстИтоговогоЗапроса+"
	
	|	мПоказателиРаскрытияВрем.АналитикаВалюта КАК АналитикаВалюта,
	|	СУММА(мПоказателиРаскрытияВрем.Значение) КАК Значение,
	|	СУММА(мПоказателиРаскрытияВрем.ЗначениеВалюта) КАК ЗначениеВалюта,
	|	ВЫБОР КОГДА МАКСИМУМ(мПоказателиРаскрытияВрем.ЗначениеИзЛога) = ИСТИНА ТОГДА МАКСИМУМ(мПоказателиРаскрытияВрем.ЗначениеНеЧислоИзЛога) ИНАЧЕ МАКСИМУМ(мПоказателиРаскрытияВрем.ЗначениеНеЧисло) КОНЕЦ КАК ЗначениеНеЧисло,
	|	МАКСИМУМ(мПоказателиРаскрытияВрем.ПоказательКод) КАК ПоказательКод
	|ПОМЕСТИТЬ тмПоказателиРаскрытия
	|ИЗ
	|	мПоказателиРаскрытияВрем КАК мПоказателиРаскрытияВрем
	|
	|СГРУППИРОВАТЬ ПО
	|	мПоказателиРаскрытияВрем.Показатель,
	|	мПоказателиРаскрытияВрем.УидГруппыОтборов,
	|	мПоказателиРаскрытияВрем.ИмяОбластиДляВывода,
	|	мПоказателиРаскрытияВрем.ПериодОтчета,
	|	мПоказателиРаскрытияВрем.Сценарий,
	|	мПоказателиРаскрытияВрем.Организация,
	|	мПоказателиРаскрытияВрем.Проект,";
	
	Для ИндАналитики = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл	
		ТекстИтоговогоЗапроса =ТекстИтоговогоЗапроса+"
		|	мПоказателиРаскрытияВрем.Аналитика"+ИндАналитики+",";
	КонецЦикла;

	ТекстИтоговогоЗапроса =ТекстИтоговогоЗапроса+"

	|	мПоказателиРаскрытияВрем.АналитикаВалюта
	|
	|ИМЕЮЩИЕ
	|	СУММА(мПоказателиРаскрытияВрем.Значение) <> 0
	|;
	|
	|// Подзапрос для получения сгруппированного среза по данным без помещения в ВТ
	|ВЫБРАТЬ
	|	мПоказателиРаскрытия.Показатель КАК Показатель,
	|	мПоказателиРаскрытия.ИмяОбластиДляВывода КАК ИмяОбластиДляВывода,
	|	мПоказателиРаскрытия.УидГруппыОтборов КАК УидГруппыОтборов,
	|	мПоказателиРаскрытия.ПериодОтчета КАК ПериодОтчета,
	|	мПоказателиРаскрытия.Сценарий КАК Сценарий,
	|	мПоказателиРаскрытия.Организация КАК Организация,
	|	мПоказателиРаскрытия.Проект КАК Проект,";
	
	Для ИндАналитики = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл	
		ТекстИтоговогоЗапроса =ТекстИтоговогоЗапроса+"
		|	мПоказателиРаскрытия.Аналитика"+ИндАналитики+" КАК Аналитика"+ИндАналитики+",";
	КонецЦикла;

	ТекстИтоговогоЗапроса =ТекстИтоговогоЗапроса+"
	
	|	мПоказателиРаскрытия.АналитикаВалюта КАК АналитикаВалюта,
	|	мПоказателиРаскрытия.Значение КАК Значение,
	|	мПоказателиРаскрытия.ЗначениеВалюта КАК ЗначениеВалюта,
	|	мПоказателиРаскрытия.ЗначениеНеЧисло КАК ЗначениеНеЧисло,
	|	мПоказателиРаскрытия.ПоказательКод КАК ПоказательКод
	|ИЗ
	|	тмПоказателиРаскрытия КАК мПоказателиРаскрытия";	
	
	
КонецПроцедуры	

Функция ПодготовитьТекстФинальногоЗапросаСинтетика(ТзПараметровЗапроса,ПоказателиСинтетика)
	
	Если ПоказателиСинтетика.Количество() = 0 Тогда
		 Возврат Неопределено;
	КонецЕсли;	
	
	ПоказателиСумма 					= Новый Массив;
	ПоказателиМаксимум 					= Новый Массив;
	ПоказателиМинимум 					= Новый Массив;
	ПоказателиБезИтога 					= Новый Массив;
	ПоказателиСреднее                   = Новый Массив;
	ПоказателиМаксимумНечисловые 		= Новый Массив;
	ПоказателиМинимумНечисловые 		= Новый Массив;
	ПоказателиБезИтогаНечисловые		= Новый Массив;
	
	ТзСвойстваПоказателей  =  ПолучитьСвойстваПоказателей(ПоказателиСинтетика);
	
	Для Каждого Пок Из ТзСвойстваПоказателей Цикл
		
		Если Пок.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			Если   Пок.ВидИтога = Перечисления.ВидыИтоговПоказателя.НеРассчитывается ИЛИ Пок.СпособРасчетаИтогаПоПериоду = Перечисления.ВидыИтоговПоказателяПоПериоду.НеРассчитывать  Тогда
				ПоказателиБезИтога.Добавить(Пок.Ссылка);
			ИначеЕсли  Пок.ВидИтога = Перечисления.ВидыИтоговПоказателя.Максимум Тогда
				ПоказателиМаксимум.Добавить(Пок.Ссылка);
			ИначеЕсли  Пок.ВидИтога = Перечисления.ВидыИтоговПоказателя.Минимум Тогда
				ПоказателиМинимум.Добавить(Пок.Ссылка);
			ИначеЕсли  Не ЗначениеЗаполнено(Пок.ВидИтога) ИЛИ Пок.ВидИтога = Перечисления.ВидыИтоговПоказателя.Сумма Тогда 	
				ПоказателиСумма.Добавить(Пок.Ссылка);
			ИначеЕсли Пок.ВидИтога = Перечисления.ВидыИтоговПоказателя.Среднее Тогда	
				ПоказателиСреднее.Добавить(Пок.Ссылка);
			КонецЕсли;				
		Иначе	
			Если   Пок.ВидИтога = Перечисления.ВидыИтоговПоказателя.НеРассчитывается ИЛИ Пок.СпособРасчетаИтогаПоПериоду = Перечисления.ВидыИтоговПоказателяПоПериоду.НеРассчитывать  Тогда
				ПоказателиБезИтогаНечисловые.Добавить(Пок.Ссылка);
			ИначеЕсли  Пок.ВидИтога = Перечисления.ВидыИтоговПоказателя.Максимум Тогда
				ПоказателиМаксимумНечисловые.Добавить(Пок.Ссылка);
			ИначеЕсли  Пок.ВидИтога = Перечисления.ВидыИтоговПоказателя.Минимум Тогда
				ПоказателиМинимумНечисловые.Добавить(Пок.Ссылка);
			ИначеЕсли  (Не ЗначениеЗаполнено(Пок.ВидИтога) И  Пок.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Строка) Тогда 	
				ПоказателиБезИтогаНечисловые.Добавить(Пок.Ссылка);
			ИначеЕсли  (Не ЗначениеЗаполнено(Пок.ВидИтога) И  (Пок.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево ИЛИ Пок.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата)) Тогда 	
				ПоказателиМаксимумНечисловые.Добавить(Пок.Ссылка);
			КонецЕсли;		
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстВыбираемыхПолей = "";
	КоличествоВыбираемыхПолей = 0;
	Если ПоказателиСумма.Количество()>0 Тогда	
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|ИНАЧЕ ВЫБОР КОГДА  тмПоказателиРаскрытия.Показатель В (&ПоказателиСуммаСинтетика) 		ТОГДА СУММА(тмПоказателиРаскрытия.Значение)";	
		КоличествоВыбираемыхПолей = КоличествоВыбираемыхПолей+1;
	КонецЕсли;	
	Если ПоказателиМаксимум.Количество()>0 Тогда	
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|ИНАЧЕ ВЫБОР КОГДА  тмПоказателиРаскрытия.Показатель В (&ПоказателиМаксимумСинтетика) 	ТОГДА  МАКСИМУМ(тмПоказателиРаскрытия.Значение)";	
		КоличествоВыбираемыхПолей = КоличествоВыбираемыхПолей+1;
	КонецЕсли;	
	Если ПоказателиМинимум.Количество()>0 Тогда	
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|ИНАЧЕ ВЫБОР КОГДА  тмПоказателиРаскрытия.Показатель В (&ПоказателиМинимумСинтетика) 	ТОГДА  МИНИМУМ(тмПоказателиРаскрытия.Значение)";	
		КоличествоВыбираемыхПолей = КоличествоВыбираемыхПолей+1;
	КонецЕсли;	
    Если ПоказателиБезИтога.Количество()>0 Тогда	
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|ИНАЧЕ ВЫБОР КОГДА  тмПоказателиРаскрытия.Показатель В (&ПоказателиБезИтога) 			ТОГДА  НЕОПРЕДЕЛЕНО";	
		КоличествоВыбираемыхПолей = КоличествоВыбираемыхПолей+1;
	КонецЕсли;	
	Если ПоказателиСреднее.Количество()>0 Тогда	
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|ИНАЧЕ ВЫБОР КОГДА  тмПоказателиРаскрытия.Показатель В (&ПоказателиСреднееСинтетика) 	ТОГДА  СРЕДНЕЕ(тмПоказателиРаскрытия.Значение)";	
		КоличествоВыбираемыхПолей = КоличествоВыбираемыхПолей+1;
	КонецЕсли;		
	Если ПоказателиБезИтогаНечисловые.Количество()>0 Тогда	
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|ИНАЧЕ ВЫБОР КОГДА  тмПоказателиРаскрытия.Показатель В (&ПоказателиБезИтогаНечисловые) 	ТОГДА  """"";	
		КоличествоВыбираемыхПолей = КоличествоВыбираемыхПолей+1;
	КонецЕсли;
	Если ПоказателиМаксимумНечисловые.Количество()>0 Тогда	
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|ИНАЧЕ ВЫБОР КОГДА  тмПоказателиРаскрытия.Показатель В (&ПоказателиМаксимумНечисловые) 	ТОГДА   МАКСИМУМ(тмПоказателиРаскрытия.ЗначениеНеЧисло)";	
		КоличествоВыбираемыхПолей = КоличествоВыбираемыхПолей+1;
	КонецЕсли;
    Если ПоказателиМинимумНечисловые.Количество()>0 Тогда	
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|ИНАЧЕ ВЫБОР КОГДА  тмПоказателиРаскрытия.Показатель В (&ПоказателиМинимумНечисловые) 	ТОГДА   МИНИМУМ(тмПоказателиРаскрытия.ЗначениеНеЧисло)";	
		КоличествоВыбираемыхПолей = КоличествоВыбираемыхПолей+1;
	КонецЕсли;
	
	ТекстОкончанияВыборов = "";
	Для Инд = 1 По КоличествоВыбираемыхПолей Цикл
		ТекстОкончанияВыборов = ТекстОкончанияВыборов+"
		|КОНЕЦ";
	КонецЦикла;	
		
	Если КоличествоВыбираемыхПолей = 1 Тогда
		ТекстТогда = СтрНайти(ТекстВыбираемыхПолей,"ТОГДА");
		ТекстВыбираемыхПолей = Прав(ТекстВыбираемыхПолей,СтрДлина(ТекстВыбираемыхПолей)-(ТекстТогда+4))+"
		| КАК Значение";
	ИначеЕсли КоличествоВыбираемыхПолей = 0 Тогда	
		ТекстВыбираемыхПолей = "
		|NULL КАК Значение";
	Иначе
		ТекстВыбираемыхПолей = Прав(ТекстВыбираемыхПолей,СтрДлина(ТекстВыбираемыхПолей)-6)+" 
		|"+ТекстОкончанияВыборов+"
		| КАК Значение";
	КонецЕсли;
	
	ТекстШаблонаЗапроса="
	|//-- ПОЛУЧЕНИЕ ЗАПРОСА ДЛЯ ВЫВОДА ОБЛАСТЕЙ БЕЗ РАСКРЫТИЙ    
	|";	
	ТекстШаблонаЗапроса		=	ТекстШаблонаЗапроса +"
	|ВЫБРАТЬ
	| тмПоказателиРаскрытия.Показатель,
	| тмПоказателиРаскрытия.ИмяОбластиДляВывода КАК ИмяОбластиДляВывода,		
	| СУММА(тмПоказателиРаскрытия.Значение)
	|ИЗ
	| 	тмПоказателиРаскрытия КАК тмПоказателиРаскрытия
	| 	ГДЕ тмПоказателиРаскрытия.Показатель В (&ПоказателиСинтетика) 
	| 	И тмПоказателиРаскрытия.УидГруппыОтборов В (&ГруппыОтборовСинтетика)
	|СГРУППИРОВАТЬ ПО 
	|	тмПоказателиРаскрытия.Показатель,
	|	тмПоказателиРаскрытия.ИмяОбластиДляВывода
	|";
		
	ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"СУММА(тмПоказателиРаскрытия.Значение)",ТекстВыбираемыхПолей);
	
	Нотбор = ТзПараметровЗапроса.Добавить();
	Нотбор.ИмяОтбора 		= "ПоказателиСуммаСинтетика";
	Нотбор.ТипОтбора 		= "В списке";
	Нотбор.ЗначениеОтбора	= ПоказателиСумма;
	
	Нотбор = ТзПараметровЗапроса.Добавить();
	Нотбор.ИмяОтбора 		= "ПоказателиМаксимумСинтетика";
	Нотбор.ТипОтбора 		= "В списке";
	Нотбор.ЗначениеОтбора	=  ПоказателиМаксимум;
	
	Нотбор = ТзПараметровЗапроса.Добавить();
	Нотбор.ИмяОтбора 		= "ПоказателиМинимумСинтетика";
	Нотбор.ТипОтбора 		= "В списке";
	Нотбор.ЗначениеОтбора	=  ПоказателиМинимум;
	
	Нотбор = ТзПараметровЗапроса.Добавить();
	Нотбор.ИмяОтбора 		= "ПоказателиБезИтогаСинтетика";
	Нотбор.ТипОтбора 		= "В списке";
	Нотбор.ЗначениеОтбора	=  ПоказателиБезИтога;
	
	Нотбор = ТзПараметровЗапроса.Добавить();
	Нотбор.ИмяОтбора 		= "ПоказателиСреднееСинтетика";
	Нотбор.ТипОтбора 		= "В списке";
	Нотбор.ЗначениеОтбора	=  ПоказателиСреднее;
	
	Нотбор = ТзПараметровЗапроса.Добавить();
	Нотбор.ИмяОтбора 		= "ПоказателиБезИтогаНечисловые";
	Нотбор.ТипОтбора 		= "В списке";
	Нотбор.ЗначениеОтбора	=  ПоказателиБезИтогаНечисловые;
	
	Нотбор = ТзПараметровЗапроса.Добавить();
	Нотбор.ИмяОтбора 		= "ПоказателиБезИтога";
	Нотбор.ТипОтбора 		= "В списке";
	Нотбор.ЗначениеОтбора	=  ПоказателиБезИтога;
	
	Нотбор = ТзПараметровЗапроса.Добавить();
	Нотбор.ИмяОтбора 		= "ПоказателиМинимумНечисловые";
	Нотбор.ТипОтбора 		= "В списке";
	Нотбор.ЗначениеОтбора	=  ПоказателиМинимумНечисловые;
	
	Нотбор = ТзПараметровЗапроса.Добавить();
	Нотбор.ИмяОтбора 		= "ПоказателиМаксимумНечисловые";
	Нотбор.ТипОтбора 		= "В списке";
	Нотбор.ЗначениеОтбора	=  ПоказателиМаксимумНечисловые;
	
	
	Возврат ТекстШаблонаЗапроса;
	
КонецФункции	

Функция СформироватьТекстОтбораПоВерсии(ПрефиксТаблицы,ПрефиксПараметра,СтрокаОтбора="ПериодОтчета",ТзПараметровЗапроса,нИмяПоля="") Экспорт
	
	Если СтрокаОтбора = "ПериодОтчета" Тогда 
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+нИмяПоля+" В (&ПериодОтчета_"+ПрефиксПараметра+")";
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "ПериодОтчета_"+ПрефиксПараметра;
		Нотбор.ТипОтбора 		= "ПериодОтчета";
		Нотбор.ЗначениеОтбора	= "ПериодОтчета";	 
		Нотбор.УидГруппыОтбора	= СтрЗаменить(ПрефиксПараметра,"Пар_","");
		Возврат  ТекстОтбора;
	КонецЕсли;
	
	ТекстОтбора 	= "";
	ИмяПоля 		= ?(ЗначениеЗаполнено(нИмяПоля),нИмяПоля,СтрокаОтбора.Поле);
	Отбор   		= СтрокаОтбора.Отбор;
	ЗначениеОтбора = СтрокаОтбора.ЗначениеОтбораСтрока;
	
	Если Отбор = "Равно" Тогда 
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоля+" = &Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	=  ЗначениеИзСтрокиВнутр(ЗначениеОтбора);	 
	ИначеЕсли Отбор = "Не равно" Тогда
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоля+" <> &Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	= ЗначениеИзСтрокиВнутр(ЗначениеОтбора);	 
	ИначеЕсли Отбор = "Параметр отчета" Тогда	 
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоля+" В (&"+ПрефиксПараметра+")";
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= ПрефиксПараметра;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	=  ЗначениеИзСтрокиВнутр(ЗначениеОтбора);	
	ИначеЕсли Прав(Отбор,6) = "отчета" Тогда
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоля+" В (&"+СтрокаОтбора.ПолеКод+")";
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= СтрокаОтбора.ПолеКод;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	= СтрокаОтбора.ПолеКод;	 	 	 	
	ИначеЕсли Отбор = "В списке" Тогда	 
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоля+" В (&Пар_"+ПрефиксПараметра+"_"+ИмяПоля+")";
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	=  ЗначениеИзСтрокиВнутр(ЗначениеОтбора);	 		
	ИначеЕсли Отбор = "Не в списке" Тогда	 
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоля+" НЕ В (&Пар_"+ПрефиксПараметра+"_"+ИмяПоля+")";
		
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	=  ЗначениеИзСтрокиВнутр(ЗначениеОтбора);			
		
		Если СтрокаОтбора.ТипЗначенияСтрока = "СправочникСсылка.ПроизвольныйКлассификаторУХ" И ЗначениеЗаполнено(Нотбор.ЗначениеОтбора[0].Значение) Тогда 
			тВладелец =  Нотбор.ЗначениеОтбора[0].Значение.Владелец;
			ТекстОтбора = ТекстОтбора+" И "+ПрефиксТаблицы+"."+ИмяПоля+".Владелец = &Пар_Владелец"+ПрефиксПараметра+"_"+ИмяПоля+"";
			Нотбор = ТзПараметровЗапроса.Добавить();
			Нотбор.ИмяОтбора 		= "Пар_Владелец"+ПрефиксПараметра+"_"+ИмяПоля;
			Нотбор.ТипОтбора 		= Отбор;
			Нотбор.ЗначениеОтбора	= тВладелец;	
		КонецЕсли;
				
	ИначеЕсли Отбор = "В группе"  Тогда	 
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоля+"  В ИЕРАРХИИ(&Пар_"+ПрефиксПараметра+"_"+ИмяПоля+")";
		Если  ПоддерживаетИерархиюГрупп(СтрокаОтбора.ТипЗначенияСтрока) Тогда
		    ТекстОтбора = ТекстОтбора+" И "+ПрефиксТаблицы+"."+ИмяПоля+".ЭтоГруппа = ЛОЖЬ";
		Иначе 
			//ТекстОтбора = ТекстОтбора+" И "+ПрефиксТаблицы+"."+ИмяПоля+" <> &Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		КонецЕсли;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	=  ЗначениеИзСтрокиВнутр(ЗначениеОтбора);		
		
	ИначеЕсли Отбор  = "В группе из списка" Тогда
		
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоля+"  В ИЕРАРХИИ(&Пар_"+ПрефиксПараметра+"_"+ИмяПоля+")";
		Если  ПоддерживаетИерархиюГрупп(СтрокаОтбора.ТипЗначенияСтрока) Тогда
		    ТекстОтбора = ТекстОтбора+" И "+ПрефиксТаблицы+"."+ИмяПоля+".ЭтоГруппа = ЛОЖЬ";
		Иначе 
			//ТекстОтбора = ТекстОтбора+" И "+ПрефиксТаблицы+"."+ИмяПоля+" НЕ В( &Пар_"+ПрефиксПараметра+"_"+ИмяПоля+")";
		КонецЕсли;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	=  ЗначениеИзСтрокиВнутр(ЗначениеОтбора);	
		
	ИначеЕсли Отбор = "НЕ в группе"  Тогда	 
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоля+"НЕ  В ИЕРАРХИИ(&Пар_"+ПрефиксПараметра+"_"+ИмяПоля+")";
		Если  ПоддерживаетИерархиюГрупп(СтрокаОтбора.ТипЗначенияСтрока) Тогда
		    ТекстОтбора = ТекстОтбора+" И "+ПрефиксТаблицы+"."+ИмяПоля+".ЭтоГруппа = ЛОЖЬ";
		Иначе 
			//ТекстОтбора = ТекстОтбора+" И "+ПрефиксТаблицы+"."+ИмяПоля+" <> &Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		КонецЕсли;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	=  ЗначениеИзСтрокиВнутр(ЗначениеОтбора);		
		
	ИначеЕсли Отбор  = "Не в группе из списка" Тогда
		
		ТекстОтбора = "И "+ПрефиксТаблицы+"."+ИмяПоля+"НЕ В ИЕРАРХИИ(&Пар_"+ПрефиксПараметра+"_"+ИмяПоля+")";
		Если  ПоддерживаетИерархиюГрупп(СтрокаОтбора.ТипЗначенияСтрока) Тогда
		    ТекстОтбора = ТекстОтбора+" И "+ПрефиксТаблицы+"."+ИмяПоля+".ЭтоГруппа = ЛОЖЬ";
		Иначе 
			//ТекстОтбора = ТекстОтбора+" И "+ПрефиксТаблицы+"."+ИмяПоля+" НЕ В( &Пар_"+ПрефиксПараметра+"_"+ИмяПоля+")";
		КонецЕсли;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "Пар_"+ПрефиксПараметра+"_"+ИмяПоля;
		Нотбор.ТипОтбора 		= Отбор;
		Нотбор.ЗначениеОтбора	=  ЗначениеИзСтрокиВнутр(ЗначениеОтбора);		
			
	ИначеЕсли Отбор = "Отбор не производится" Тогда
		ТекстОтбора = "";
	КонецЕсли;
	
	 Возврат  ТекстОтбора;

	
КонецФункции	

Функция  ПоддерживаетИерархиюГрупп(ТипСтрока)
	
	Если ТипЗнч(ТипСтрока) = Тип("Строка") Тогда
		Если СтрНайти(ТипСтрока,"|")>0 Тогда //составной тип не анализируем.
			Возврат Ложь;
		КонецЕсли;	
		ТипСсылка = Новый(ТипСтрока);
	Иначе	
		Если ТипСтрока.Типы().Количество()<>1 Тогда //составной тип не анализируем.
			Возврат Ложь;
		КонецЕсли;	
		ТипСсылка = ТипСтрока.ПривестиЗначение();
	КонецЕсли;
	
	Если Лев(ТипСтрока,10) = "Справочник" И  ТипСсылка.Метаданные().Иерархический И  ТипСсылка.Метаданные().ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов  Тогда		
		Возврат Истина			
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции

Функция ЗаполнитьИерархиюАналитикРаскрываемойОбласти(ОбластьРаскрытия,ТипОбласти,тзОписаниеАналитик,глТзАналитик,ОбъектАБ,ПолеТабличногоДокументаМакет,тСтруктураМакетовРаскрытия = Неопределено)
	
	тИерархияГруппировок  = Новый ТаблицаЗначений;
	
	тИерархияГруппировок.Колонки.Добавить("УровеньГруппировки");
	тИерархияГруппировок.Колонки.Добавить("ИмяОбласти");
	тИерархияГруппировок.Колонки.Добавить("СтрокаГруппировок");
	тИерархияГруппировок.Колонки.Добавить("Группировки");

	ТзДоступныхАналитик = Обработки.АналитическийБланк.ПолучитьОписаниеТаблицыНастроекАналитик();
	
	Если ТипОбласти = "Строки" Тогда
		
		//Определяем связанные области
		СвязанныеОбласти =  тСтруктураМакетовРаскрытия.НайтиСтроки(Новый Структура("ИмяМакетаРаскрытия,ТипОбласти",ОбластьРаскрытия.Имя,"Строки"));
		
		Если СвязанныеОбласти.Количество() > 1 Тогда
			Возврат Неопределено;
		Иначе	
			тПодчиненныеОбласти =  тСтруктураМакетовРаскрытия.НайтиСтроки(Новый Структура("ИмяОбластиРаскрытия,ТипОбласти",ОбластьРаскрытия.Имя,"Строки"));
			Для Каждого тПодчиненнаяОбласть Из тПодчиненныеОбласти Цикл
				Обл = ОбъектАБ.КэшРаскрываемыхОбластей.Найти(тПодчиненнаяОбласть.ИмяМакетаРаскрытия,"ИмяОбласти"); 
				тОбласть = ПолеТабличногоДокументаМакет.Область(Обл.ИмяОбласти);
				нСтр1 = тИерархияГруппировок.Добавить();
				нСтр1.УровеньГруппировки  = тОбласть.Верх;
				нСтр1.ИмяОбласти  = Обл.ИмяОбласти;	
				
				СтрокаГруппировок 				= "";
				СтрукутраГруппировок            = Новый Структура;
				
				ТзАналитик  = ЗначениеИзСтрокиВнутр(Обл.НастройкиАналитикРаскрытия);
				
				Для Каждого аСтр Из ТзАналитик Цикл
					Если ТзДоступныхАналитик.НайтиСтроки(Новый Структура("АналитикаКод",аСтр.АналитикаКод)).Количество()=0 Тогда;
						испАналитика = ТзДоступныхАналитик.Добавить();
						ЗаполнитьЗначенияСвойств(испАналитика,аСтр);
					КонецЕсли;
					
					Если глТзАналитик.НайтиСтроки(Новый Структура("АналитикаКод",аСтр.АналитикаКод)).Количество()=0 Тогда;	 
						испАналитика = глТзАналитик.Добавить();
						ЗаполнитьЗначенияСвойств(испАналитика,аСтр);
					КонецЕсли;	
					
					СтрокаГруппировок =  СтрокаГруппировок+аСтр.АналитикаКод+",";
					СтрукутраГруппировок.Вставить(аСтр.АналитикаКод);
						
					ОтборыАналитик = ОбъектАБ.НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов",Обл.УидГруппыОтборов));
					
					Для Каждого СтрОтбор Из ОтборыАналитик Цикл
						Если СтрОтбор.ПолеКод = "ПериодС" 
							ИЛИ СтрОтбор.ПолеКод = "ПериодПо" 
							ИЛИ СтрОтбор.ПолеКод = "Сценарий"
							ИЛИ  СтрОтбор.ПолеКод = "Организация"
							ИЛИ  СтрОтбор.ПолеКод = "Проект" Тогда
							Продолжить;	
						КонецЕсли;			
					КонецЦикла;		
					
					нСтр1.СтрокаГруппировок	 	= СтрокаГруппировок;
					нСтр1.Группировки        	= СтрукутраГруппировок;	
				КонецЦикла;	  	
			КонецЦикла;	
		КонецЕсли;			
		
	ИначеЕсли ТипОбласти = "Колонки" Тогда
		
		нСтр = тИерархияГруппировок.Добавить();
		нСтр.УровеньГруппировки  		= ОбластьРаскрытия.Лево;
		нСтр.ИмяОбласти 				= ОбластьРаскрытия.Имя;
		
				
		Для Каждого Обл Из ОбъектАБ.КэшРаскрываемыхОбластей Цикл	
			
			Если Обл.ИмяОбласти = ОбластьРаскрытия.Имя Тогда	
				ТзАналитик  = ЗначениеИзСтрокиВнутр(Обл.НастройкиАналитикРаскрытия);
				
				СтрокаГруппировок 				= "";
				СтрукутраГруппировок            = Новый Структура;
	
				Для Каждого аСтр Из ТзАналитик Цикл
					Если ТзДоступныхАналитик.НайтиСтроки(Новый Структура("АналитикаКод",аСтр.АналитикаКод)).Количество()=0 Тогда;
						испАналитика = ТзДоступныхАналитик.Добавить();
						ЗаполнитьЗначенияСвойств(испАналитика,аСтр);
					КонецЕсли;
					
					Если глТзАналитик.НайтиСтроки(Новый Структура("АналитикаКод",аСтр.АналитикаКод)).Количество()=0 Тогда;	 
						испАналитика = глТзАналитик.Добавить();
						ЗаполнитьЗначенияСвойств(испАналитика,аСтр);
					КонецЕсли;
					
					СтрокаГруппировок =  СтрокаГруппировок+аСтр.АналитикаКод+",";
					СтрукутраГруппировок.Вставить(аСтр.АналитикаКод);
					
					ОтборыАналитик = ОбъектАБ.НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов",Обл.УидГруппыОтборов));
					
					Для Каждого СтрОтбор Из ОтборыАналитик Цикл
						Если СтрОтбор.ПолеКод = "ПериодС" 
							ИЛИ СтрОтбор.ПолеКод = "ПериодПо" 
							ИЛИ СтрОтбор.ПолеКод = "Сценарий"
							ИЛИ  СтрОтбор.ПолеКод = "Организация"
							ИЛИ  СтрОтбор.ПолеКод = "Проект" Тогда
							Продолжить;	
						КонецЕсли;			
					КонецЦикла;		
				КонецЦикла;
				
				нСтр.СтрокаГруппировок	 	= СтрокаГруппировок;
				нСтр.Группировки        	= СтрукутраГруппировок;
	
				Продолжить;
			КонецЕсли;	
			
			
			тОбласть = ПолеТабличногоДокументаМакет.Область(Обл.ИмяОбласти);
			//Если область имеет область - родителя, то возвращаем неопределено
			Если тОбласть.Лево<ОбластьРаскрытия.Лево И тОбласть.Право>=ОбластьРаскрытия.Право Тогда
				Возврат Неопределено;
			КонецЕсли;	
			
			Если тОбласть.Лево>ОбластьРаскрытия.Лево И тОбласть.Право<=ОбластьРаскрытия.Право Тогда
				нСтр1 = тИерархияГруппировок.Добавить();
				нСтр1.УровеньГруппировки  = тОбласть.Лево;
				нСтр1.ИмяОбласти  = Обл.ИмяОбласти;
				
				СтрокаГруппировок 				= "";
				СтрукутраГруппировок            = Новый Структура;
		
				ТзАналитик  = ЗначениеИзСтрокиВнутр(Обл.НастройкиАналитикРаскрытия);
				Для Каждого аСтр Из ТзАналитик Цикл
					Если ТзДоступныхАналитик.НайтиСтроки(Новый Структура("АналитикаКод",аСтр.АналитикаКод)).Количество()=0 Тогда;
						испАналитика = ТзДоступныхАналитик.Добавить();
						ЗаполнитьЗначенияСвойств(испАналитика,аСтр);
					КонецЕсли;
					
					Если глТзАналитик.НайтиСтроки(Новый Структура("АналитикаКод",аСтр.АналитикаКод)).Количество()=0 Тогда;	 
						испАналитика = глТзАналитик.Добавить();
						ЗаполнитьЗначенияСвойств(испАналитика,аСтр);
					КонецЕсли;
					
					СтрокаГруппировок =  СтрокаГруппировок+аСтр.АналитикаКод+",";
					СтрукутраГруппировок.Вставить(аСтр.АналитикаКод);

					ОтборыАналитик = ОбъектАБ.НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов",Обл.УидГруппыОтборов));
					Для Каждого СтрОтбор Из ОтборыАналитик Цикл
						Если СтрОтбор.ПолеКод = "ПериодС" 
							ИЛИ СтрОтбор.ПолеКод = "ПериодПо" 
							ИЛИ СтрОтбор.ПолеКод = "Сценарий"
							ИЛИ  СтрОтбор.ПолеКод = "Организация"
							ИЛИ  СтрОтбор.ПолеКод = "Проект" Тогда
							Продолжить;	
						КонецЕсли;				
					КонецЦикла;		
				КонецЦикла;	  
				
				нСтр1.СтрокаГруппировок	 	= СтрокаГруппировок;
				нСтр1.Группировки        	= СтрукутраГруппировок;
					
			КонецЕсли;	
		КонецЦикла;	
	КонецЕсли;	
		
	нОписаниеАналитик 				= тзОписаниеАналитик.Добавить();
	нОписаниеАналитик.ИмяОбласти 	= ОбластьРаскрытия.Имя;
	нОписаниеАналитик.ТзАналитик 	= ТзДоступныхАналитик;
	
	Возврат тИерархияГруппировок;
	
КонецФункции	

Процедура ПолучитьТекстЗапросаМакетаПоказателей(ТзАналитик,НастройкиРаскрываемыхОбластей,ФинальныйЗапрос,ОписаниеТекущейГруппыОтборовАналитикРаскрытия,ТзПараметровЗапроса,ОписаниеТекущейОбласти,ТзПоказателейОбластей,нТзПараметровОбластей = Неопределено)
	
	ТзОтборов = Новый ТаблицаЗначений;
    	                                                                                                
	ТекстТаблицАналититки = "
	|
	|// ПОЛУЧЕНИЕ МАКЕТА ДЛЯ ВЫВОДА ОБЛАСТИ ["+ОписаниеТекущейОбласти.УидГруппыОтборов+"] -------------------------------------------------
	|
	|ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Показатель,
	|	ПоказателиОтчетов.НормализованныйКод КАК ПоказательКод,
	|	ПоказателиОтчетов.ГруппаРаскрытия КАК ГруппаРаскрытия,
	|	ПоказателиОтчетов.ВидИтога КАК ВидИтога,
	|	ПоказателиОтчетов.ТипПоказателя КАК ТипПоказателя,
	|	ПоказателиОтчетов.Владелец КАК Владелец
	|ПОМЕСТИТЬ тВремПоказатели
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Ссылка В (&Пар_"+ОписаниеТекущейОбласти.УидГруппыОтборов+"_Показатели);
	|///////////////////////////////////////////////////";
			
	МассивПоказателейТекущейОбласти = ТзПоказателейОбластей.Скопировать(Новый Структура("ИмяОбласти",ОписаниеТекущейОбласти.ИмяОбласти)).ВыгрузитьКолонку("Показатель");
	
	Нотбор = ТзПараметровЗапроса.Добавить();
	Нотбор.ИмяОтбора 		= "Пар_"+ОписаниеТекущейОбласти.УидГруппыОтборов+"_Показатели";
	Нотбор.ТипОтбора 		= "В списке";
	Нотбор.ЗначениеОтбора	= МассивПоказателейТекущейОбласти;	 	
	
	ТекстПолейФинальногоЗапроса 			= "
	|ВЫБРАТЬ  
	|	тВремПоказатели.Показатель,  тВремПоказатели.ПоказательКод"; 
	ТекстСоединенийФинальногоЗапроса 		= "";
	ТекстДопПолейФинальногоЗапросаПолей     = "";
		
	ТекстЗапросаУдаляемых = ";
	|////////////////////////////// 
	|УНИЧТОЖИТЬ тВремПоказатели";
	
	
	Для Каждого СтрАналитика Из  ТзАналитик Цикл
		
		ТипЗначенийСтрока_ = СтрРазделить(СтрАналитика.АналитикаТипСтрока,"|");
		
		ЭтоПервыйТип = Истина;
		
		ИмяобъектаЗАпроса = Неопределено;
		
		Для Каждого СтрАналитикаТип Из ТипЗначенийСтрока_ Цикл
			
			Если  ЭтоПервыйТип Тогда
				
				Если СтрАналитика.ЭтоОтбор Тогда
					Продолжить;
				КонецЕсли;	
				
				ПрефиксПараметра = "Пар_"+ОписаниеТекущейОбласти.УидГруппыОтборов+"_"+СтрАналитика.АналитикаКод;
				
				глСтрокаУсловий = "ГДЕ ";
				
				Если СтрАналитика.АналитикаКод = "ПериодОтчета" Тогда
					ПрефиксПараметра = "Пар_"+ОписаниеТекущейОбласти.УидГруппыОтборов;
					СтрокаУсловий = СформироватьТекстОтбораПоВерсии("ТекТаблица",ПрефиксПараметра,,ТзПараметровЗапроса,"Ссылка");
					глСтрокаУсловий = глСтрокаУсловий+СтрокаУсловий;
				Иначе	
					ОтборыТекущейАналитики = НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов,ПолеКод",ОписаниеТекущейОбласти.УидГруппыОтборов,СтрАналитика.АналитикаКод));
					Если ОтборыТекущейАналитики.Количество()<> 0 Тогда
						Если ОтборыТекущейАналитики[0].Отбор = "Отбор не производится" Тогда
							СтрАналитика.АналитикаБезОтбора = Истина;
							Продолжить;
						КонецЕсли;		
						ОтборТекущейАналитики = ОтборыТекущейАналитики[0];
						СтрокаУсловий = СформироватьТекстОтбораПоВерсии("ТекТаблица",ПрефиксПараметра,ОтборТекущейАналитики,ТзПараметровЗапроса,"Ссылка");
						глСтрокаУсловий = глСтрокаУсловий+СтрокаУсловий;
					КонецЕсли;	
				КонецЕсли;
				
				ТекстПолейФинальногоЗапроса = ТекстПолейФинальногоЗапроса+"
				|,тВрем_"+СтрАналитика.АналитикаКод+"."+СтрАналитика.АналитикаКод +" КАК "+СтрАналитика.АналитикаКод;
				
				ТекстСоединенийФинальногоЗапроса = ТекстСоединенийФинальногоЗапроса+"
				|ЛЕВОЕ СОЕДИНЕНИЕ тВрем_"+СтрАналитика.АналитикаКод+" КАК тВрем_"+СтрАналитика.АналитикаКод +" 
				|ПО ИСТИНА ";
				
				ИмяобъектаЗАпроса = СтрЗАменить(СтрАналитикаТип,"Ссылка","");
				
				глСтрокаУсловий = СтрЗаменить(глСтрокаУсловий,"ГДЕ И","ГДЕ");
				
				ТекстТаблицАналититки = ТекстТаблицАналититки+"
				|ВЫБРАТЬ 
				|"+СформироватьТекстДопПолей(СтрАналитика,нТзПараметровОбластей,ТекстДопПолейФинальногоЗапросаПолей)+"
				|	ТекТаблица.Ссылка КАК "+СтрАналитика.АналитикаКод+"
				|ПОМЕСТИТЬ тВрем_"+СтрАналитика.АналитикаКод+"
				|ИЗ "+ИмяобъектаЗапроса+" КАК ТекТаблица
				| "+глСтрокаУсловий;
								
				ТекстЗапросаУдаляемых = ТекстЗапросаУдаляемых+";
				|////////////////////////////// 
				|УНИЧТОЖИТЬ "+ "тВрем_"+СтрАналитика.АналитикаКод;	
				
				ТекстПолейФинальногоЗапроса = ТекстПолейФинальногоЗапроса+"
				|";
			Иначе	
				Если СтрАналитика.ЭтоОтбор Тогда
					Продолжить;
				КонецЕсли;	
				
				ТекстДопПолейФинальногоЗапросаПолей = "";
				
				ПрефиксПараметра = "Пар_"+ОписаниеТекущейОбласти.УидГруппыОтборов+"_"+СтрАналитика.АналитикаКод;
				
				глСтрокаУсловий = "ГДЕ ";
				
				Если СтрАналитика.АналитикаКод = "ПериодОтчета" Тогда
					ПрефиксПараметра = "Пар_"+ОписаниеТекущейОбласти.УидГруппыОтборов;
					СтрокаУсловий = СформироватьТекстОтбораПоВерсии("ТекТаблица",ПрефиксПараметра,,ТзПараметровЗапроса,"Ссылка");
					глСтрокаУсловий = глСтрокаУсловий+СтрокаУсловий;
				Иначе	
					ОтборыТекущейАналитики = НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов,ПолеКод",ОписаниеТекущейОбласти.УидГруппыОтборов,СтрАналитика.АналитикаКод));
					Если ОтборыТекущейАналитики.Количество()<> 0 Тогда
						Если ОтборыТекущейАналитики[0].Отбор = "Отбор не производится" Тогда
							СтрАналитика.АналитикаБезОтбора = Истина;
							Продолжить;
						КонецЕсли;		
						ОтборТекущейАналитики = ОтборыТекущейАналитики[0];
						СтрокаУсловий = СформироватьТекстОтбораПоВерсии("ТекТаблица",ПрефиксПараметра,ОтборТекущейАналитики,ТзПараметровЗапроса,"Ссылка");
						глСтрокаУсловий = глСтрокаУсловий+СтрокаУсловий;
					КонецЕсли;	
				КонецЕсли;
				
								
				ИмяобъектаЗАпроса = СтрЗАменить(СтрАналитикаТип,"Ссылка","");
				
				глСтрокаУсловий = СтрЗаменить(глСтрокаУсловий,"ГДЕ И","ГДЕ");
				
				ТекстТаблицАналититки = ТекстТаблицАналититки+"
				|ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ
				|"+СформироватьТекстДопПолей(СтрАналитика,нТзПараметровОбластей,ТекстДопПолейФинальногоЗапросаПолей)+"
				|	ТекТаблица.Ссылка КАК "+СтрАналитика.АналитикаКод+"
				|ИЗ "+ИмяобъектаЗапроса+" КАК ТекТаблица
				| "+глСтрокаУсловий;				
				
			КонецЕсли;
			
			ЭтоПервыйТип = Ложь;

		КонецЦикла;
		
		Если НЕ ИмяобъектаЗАпроса = Неопределено Тогда
			ТекстТаблицАналититки = ТекстТаблицАналититки+"
			|;
			|//////////////////////////////////////////////";
		КонецЕсли;
		
	КонецЦикла;	
	
	ТекстФинальногоЗапроса = ТекстТаблицАналититки+ТекстПолейФинальногоЗапроса+ТекстДопПолейФинальногоЗапросаПолей+"
	|ПОМЕСТИТЬ тМакетРаскрытия_"+ОписаниеТекущейОбласти.УидГруппыОтборов+"
	|ИЗ тВремПоказатели КАК  тВремПоказатели "+ТекстСоединенийФинальногоЗапроса+"
	|"+ТекстЗапросаУдаляемых;
	
	Если Не ЗначениеЗаполнено(ФинальныйЗапрос.Текст) Тогда	
		ФинальныйЗапрос.Текст = ТекстФинальногоЗапроса;	
	Иначе		
		ФинальныйЗапрос.Текст = ФинальныйЗапрос.Текст +";
		|/////////////////////////////////////
		|"+ ТекстФинальногоЗапроса;		
	КонецЕсли;	
		
КонецПроцедуры	

Функция СформироватьТекстДопПолей(СтрАналитика,нТзПараметровОбластей,ТекстДопПолейФинальногоЗапросаПолей)
	
	ТекстДопПолей = "";
	
	Если нТзПараметровОбластей = Неопределено Тогда	
		Возврат "";	
	КонецЕсли;	
	
	ТекПоля = нТзПараметровОбластей.НайтиСтроки(Новый Структура("ПутьКДанным",СтрАналитика.АналитикаКод));
	Для Каждого тПоле Из ТекПоля Цикл
		
		ИмяРеквизитовПоля = ?(ЗначениеЗаполнено(тПоле.ВыражениеПоля),"."+тПоле.ВыражениеПоля,"");      
		
		Если НЕ тПоле.ИмяВМакете = СтрАналитика.АналитикаКод Тогда
				
			ТекстДопПолей = ТекстДопПолей+"
			|	ТекТаблица.Ссылка"+ИмяРеквизитовПоля+" КАК "+тПоле.ИмяПоляВЗапросе+",";
			
			ТекстДопПолейФинальногоЗапросаПолей = ТекстДопПолейФинальногоЗапросаПолей+"
			|	,тВрем_"+СтрАналитика.АналитикаКод+"."+тПоле.ИмяПоляВЗапросе +" КАК "+тПоле.ИмяПоляВЗапросе;
			
			тПоле.ВыбранВМакете = Истина;
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат ТекстДопПолей;
	
КонецФункции	

Процедура ПолучитьТекстЗначенийПоказателей_Раскрытие(ТекстШаблонаЗапроса,СтрГруппы,ИндексРегистра,ОписаниеТекущейОбласти,АналитикиРаскрытия,глТзАналитик,ГруппаПоказателей,ИндексЗапроса,ТзПараметровЗапроса,ОбъектАБ,ТзПараметровОбластей = Неопределено)
	
	Если  ОписаниеТекущейОбласти.Низ = 0 Тогда
		ПостфиксОбласти = "Колонки";
	Иначе
		ПостфиксОбласти = "Строки";
	КонецЕсли;	
	
	УидГруппы = СтрГруппы.УидГруппыОтборов;
	РаскрываемаяОбласть_УидГруппыОтборов = ОписаниеТекущейОбласти.УидГруппыОтборов;
	
	ТекстАналитик = "";
	ТекстДополнительногоСоединения = "";	
	ТекстДополнительногоОтбора = "ГДЕ тзПоказатели.Показатель В (&Пар_"+УидГруппы+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0")+"_Показатели) ";
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("глТзАналитик",глТзАналитик);
	СтруктураПараметров.Вставить("АналитикиРаскрытия",АналитикиРаскрытия);
	СтруктураПараметров.Вставить("ГруппаПоказателей",ГруппаПоказателей);
	СтруктураПараметров.Вставить("ТзПараметровЗапроса",ТзПараметровЗапроса);
	СтруктураПараметров.Вставить("УидГруппы",УидГруппы);
	СтруктураПараметров.Вставить("ХэшГруппыОтборов",СтрГруппы.ХэшГруппыОтборов);
	СтруктураПараметров.Вставить("ИндексЗапроса",ИндексЗапроса);
	СтруктураПараметров.Вставить("ОбъектАБ",ОбъектАБ);

	СтруктураИндексовАналитик = Новый Структура;
	
	СформироватьТекстДополнительныхПолейЗапроса(СтруктураПараметров,ТекстАналитик,ТекстДополнительногоСоединения,,СтруктураИндексовАналитик);
			
	ТзАналитик = ЗаполнитьТаблицуОтборовДопАналитик(УидГруппы,,ОбъектАБ);
		
	СтруктураПараметров.Вставить("глТзАналитик",ТзАналитик);		
	
	Если Не ЗначениеЗаполнено(ТекстШаблонаЗапроса) Тогда
		
		ТекстШаблонаЗапроса = ТекстШаблонаЗапроса+"
		|;
		|///////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|
		| тмПоказателиРаскрытия.Показатель,
		| &&АналитикаРаскрытия,
		|"+""""+УидГруппы+""""+" КАК УидГруппыОтборов,
		|"+""""+РаскрываемаяОбласть_УидГруппыОтборов+""""+ " КАК Уид_Области,"+"
		| тмПоказателиРаскрытия.ИмяОбластиДляВывода,
		| тмПоказателиРаскрытия.Значение,
		| тмПоказателиРаскрытия.ЗначениеНеЧисло,
		| тмПоказателиРаскрытия.ЗначениеВалюта,
		| тзПоказатели.ПоказательКод+"+""""+УидГруппы+""""+" КАК ИдентификаторПоказателя
		| ПОМЕСТИТЬ втДанныеПредварительные_"+ПостфиксОбласти+"
		|ИЗ
		|тМакетРаскрытия_"+РаскрываемаяОбласть_УидГруппыОтборов+" КАК ТзПоказатели
		|	ЛЕВОЕ СОЕДИНЕНИЕ тмПоказателиРаскрытия КАК тмПоказателиРаскрытия 
		|	ПО тмПоказателиРаскрытия.УидГруппыОтборов = "+""""+УидГруппы+""""+" И 
		|	тзПоказатели.Показатель 	= тмПоказателиРаскрытия.Показатель 		
		| "+ТекстДополнительногоСоединения+"
		| "+ТекстДополнительногоОтбора+"
		|
		|";	
	Иначе		
		ТекстШаблонаЗапроса = ТекстШаблонаЗапроса+"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|
		| тмПоказателиРаскрытия.Показатель,
		| &&АналитикаРаскрытия,
		|"+""""+УидГруппы+""""+" КАК УидГруппыОтборов,
		|"+""""+РаскрываемаяОбласть_УидГруппыОтборов+""""+ " КАК Уид_Области,"+"
		| тмПоказателиРаскрытия.ИмяОбластиДляВывода,
		| тмПоказателиРаскрытия.Значение,
		| тмПоказателиРаскрытия.ЗначениеНеЧисло,
		| тмПоказателиРаскрытия.ЗначениеВалюта,
		| тзПоказатели.ПоказательКод+"+""""+УидГруппы+""""+" КАК ИдентификаторПоказателя
		|ИЗ
		|тМакетРаскрытия_"+РаскрываемаяОбласть_УидГруппыОтборов+" КАК ТзПоказатели
		|	ЛЕВОЕ СОЕДИНЕНИЕ тмПоказателиРаскрытия КАК тмПоказателиРаскрытия 
		|	ПО тмПоказателиРаскрытия.УидГруппыОтборов = "+""""+УидГруппы+""""+" И 
		|	тзПоказатели.Показатель 	= тмПоказателиРаскрытия.Показатель 		
		| "+ТекстДополнительногоСоединения+"
		| "+ТекстДополнительногоОтбора+"
		|
		|" ;	
	КонецЕсли;
		
	ЧислоАналитикГруппы = ИндексРегистра;
	Если ЧислоАналитикГруппы = 0 ИЛИ ЧислоАналитикГруппы=NULL Тогда
		ЧислоАналитикГруппы = "Синтетика";
	КонецЕсли;	
	
	Если НЕ ТзПараметровОбластей = Неопределено Тогда	
		
		ТзПараметровОбластей_ = ТзПараметровОбластей.Скопировать(,"ПутьКДанным,ИмяПоляВзапросе,ИмяВмакете");
		ТзПараметровОбластей_.Свернуть("ПутьКДанным,ИмяПоляВзапросе,ИмяВмакете");
		
		Для Каждого СтрПараметр Из ТзПараметровОбластей_ Цикл	
						
			тАналитика = СтруктураПараметров.АналитикиРаскрытия.Найти(СтрПараметр.ПутьКДанным,"АналитикаКод");
			
			Если  СтрПараметр.ИмяПоляВзапросе = СтрПараметр.ПутьКДанным Тогда
				Продолжить;		
			ИначеЕсли 	тАналитика = Неопределено   Тогда
				ТекстАналитик = ТекстАналитик+"
				|NULL КАК "+СтрПараметр.ИмяПоляВзапросе+",";
			Иначе	
				
				Если тАналитика.АналитикаБезОтбора Тогда
					
					Если тАналитика.ЭтоАналитикаВерсии Тогда
						
						ТипАналитикиВЗапоросе = СтрЗаменить(тАналитика.АналитикаТипСтрока,"Ссылка","");
						имяРеквизитов		  = СтрЗаменить(СтрПараметр.ИмяВмакете,тАналитика.АналитикаКод,"");
						
						ТекстАналитик = ТекстАналитик+"
						|тмПоказателиРаскрытия."+тАналитика.АналитикаКод+имяРеквизитов+" КАК "+СтрПараметр.ИмяПоляВзапросе+",";
						
					Иначе	
						
						Если СтруктураИндексовАналитик[тАналитика.АналитикаКод] = Неопределено Тогда
							ТекстАналитик = ТекстАналитик+"
							|NULL КАК "+СтрПараметр.ИмяПоляВзапросе+",";		
						Иначе	
							ТипАналитикиВЗапоросе = СтрЗаменить(тАналитика.АналитикаТипСтрока,"Ссылка","");
							имяРеквизитов		  = СтрЗаменить(СтрПараметр.ИмяВмакете,тАналитика.АналитикаКод,"");
							
							Если СтрНайти(ТипАналитикиВЗапоросе,"|")>0 Тогда	//Составной тип не выражаем
								ТекстАналитик = ТекстАналитик+"
								|тмПоказателиРаскрытия.Аналитика"+СтруктураИндексовАналитик[тАналитика.АналитикаКод]+имяРеквизитов+" КАК "+СтрПараметр.ИмяПоляВзапросе+",";		
							Иначе   
								ТекстАналитик = ТекстАналитик+"
								|ВЫРАЗИТЬ(тмПоказателиРаскрытия.Аналитика"+СтруктураИндексовАналитик[тАналитика.АналитикаКод]+" КАК "+ТипАналитикиВЗапоросе+")"+имяРеквизитов+" КАК "+СтрПараметр.ИмяПоляВзапросе+",";		
							КонецЕсли;			
							
						КонецЕсли;
					КонецЕсли;
					
				Иначе	
					ТекстАналитик = ТекстАналитик+"
					|ТзПоказатели."+СтрПараметр.ИмяПоляВзапросе+",";	
				КонецЕсли;	
			КонецЕсли;		
		КонецЦикла;		
	КонецЕсли;	
	
	ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&АналитикаРаскрытия,",ТекстАналитик);
				                                           
КонецПроцедуры	

Функция ПолучитьТипОбласти(ПолеТабличногоДокументаМакет,ИмяОбласти) 

	Если  ПолеТабличногоДокументаМакет.Области.Найти(ИмяОбласти) = Неопределено Тогда
		  Возврат Неопределено;
	КонецЕсли;	
	
	ТекОбласть =  ПолеТабличногоДокументаМакет.Область(ИмяОбласти);
	
	Если ТекОбласть.Лево = 0 Тогда
		 Возврат "Строки";
	КонецЕсли;	
	
	Если ТекОбласть.Верх = 0 Тогда
		 Возврат "Колонки";
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции	

Процедура СформироватьТекстДополнительныхПолейЗапроса(СтруктураПараметров,ТекстАналитик,ТекстДополнительногоСоединения,ЗаменятьПоляВыборки = Ложь,СтруктураИндексовАналитик)
		
	глТзАналитик 				= СтруктураПараметров.глТзАналитик;
	АналитикиРаскрытия          = СтруктураПараметров.АналитикиРаскрытия;
	ГруппаПоказателей           = СтруктураПараметров.ГруппаПоказателей;
	ТзПараметровЗапроса         = СтруктураПараметров.ТзПараметровЗапроса;
    УИДГруппы                   = СтруктураПараметров.УИДГруппы;
	ИндексЗапроса               = СтруктураПараметров.ИндексЗапроса;
	АналитикаДоВалютаКод        = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты.Код;
	
	Для Каждого РасшифровкаАналитки Из глТзАналитик Цикл			
		
		ТекущаяАналитика =  АналитикиРаскрытия.НайтиСтроки(Новый Структура("АналитикаКод",РасшифровкаАналитки.АналитикаКод));
		Если  РасшифровкаАналитки.ЭтоОтбор Тогда			
			Продолжить;
		КонецЕсли;			
		//Формируем текст выбора в запрос дополнительных аналитик
		Если ТекущаяАналитика.Количество() = 0 Тогда	
			ТекстАналитик = ТекстАналитик+"NULL КАК "+РасшифровкаАналитки.АналитикаКод+" ,";	
		Иначе
			ТекущаяАналитика = ТекущаяАналитика[0];
			Если НЕ ТекущаяАналитика.АналитикаБезОтбора Тогда		
				
				Если РасшифровкаАналитки.ЭтоАналитикаВерсии Тогда
					
					//Добавляем выражения полей
					ТекстАналитик = ТекстАналитик+"ТзПоказатели"+"."+РасшифровкаАналитки.АналитикаКод+" ,";		
					СтруктураИндексовАналитик.Вставить(РасшифровкаАналитки.АналитикаКод,99);
							
					//Добавляем выражение соединения
					Если РасшифровкаАналитки.АналитикаКод = "ПериодОтчета" Тогда
						
						тРасшифровкаОтбораПериодаОперанда = СтруктураПараметров.ОбъектАБ.РасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("УидГруппыОтборов,ПолеКод,Отбор",УИДГруппы,"ПериодС","Период начала со сдвигом"));
						СдвигПоПериодуОперанда = ?(тРасшифровкаОтбораПериодаОперанда.Количество() = 0,0,ЗначениеИзСтрокиВнутр(тРасшифровкаОтбораПериодаОперанда[0].ЗначениеОтбораСтрока)); 
						
						тРасшифровкаОтбораПериодаРаскрытия = СтруктураПараметров.ОбъектАБ.НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов,ПолеКод,Отбор",СтруктураПараметров.ИндексЗапроса,"ПериодС","Период начала со сдвигом"));
                        СдвигПоПериодуРаскрытия = ?(тРасшифровкаОтбораПериодаРаскрытия.Количество() = 0,0,ЗначениеИзСтрокиВнутр(тРасшифровкаОтбораПериодаРаскрытия[0].ЗначениеОтбораСтрока)); 

						СдвигПоПериоду = СдвигПоПериодуОперанда-СдвигПоПериодуРаскрытия;
						
						Если СдвигПоПериоду = 0 Тогда
							ТекстДополнительногоСоединения = ТекстДополнительногоСоединения+" 
							| И тмПоказателиРаскрытия."+РасшифровкаАналитки.АналитикаКод+" = тзПоказатели."+РасшифровкаАналитки.АналитикаКод;
						Иначе	 
							ТекстДополнительногоСоединения = ТекстДополнительногоСоединения+" 
							| И тмПоказателиРаскрытия."+РасшифровкаАналитки.АналитикаКод+".ДатаНачала =  ДобавитьКДате(тзПоказатели.ПериодОтчета.ДатаНачала,СЕКУНДА,"+СдвигПоПериоду+")";
						КонецЕсли;
							
					Иначе	
						
						ТекстДополнительногоСоединения = ТекстДополнительногоСоединения+" 
						| И тмПоказателиРаскрытия."+РасшифровкаАналитки.АналитикаКод+" = тзПоказатели."+РасшифровкаАналитки.АналитикаКод;
						
					КонецЕсли;
					СтруктураИндексовАналитик.Вставить(РасшифровкаАналитки.АналитикаКод,99);
	
				Иначе
					
					//Добавляем выражения полей
					Если ЗаменятьПоляВыборки Тогда
						
						ИндексАналитики = Неопределено;	
						Если НЕ ГруппаПоказателей.Владелец().Колонки.Найти("ВидАналитики_"+РасшифровкаАналитки.АналитикаКод) = Неопределено Тогда	
							ИндексАналитики = ГруппаПоказателей["ВидАналитики_"+РасшифровкаАналитки.АналитикаКод];	
						КонецЕсли;
						Если РасшифровкаАналитки.АналитикаКод = АналитикаДоВалютаКод Тогда	
							Если ЗначениеЗаполнено(ГруппаПоказателей.АналитикаВалюта) Тогда
								ИндексАналитики = "Валюта";	
							КонецЕсли; 	 
						КонецЕсли;	
						
						Если ИндексАналитики = 0 Тогда 		
							ТекстАналитик = ТекстАналитик+"НЕОПРЕДЕЛЕНО КАК "+РасшифровкаАналитки.АналитикаКод+",";	
							СтруктураИндексовАналитик.Вставить(РасшифровкаАналитки.АналитикаКод,Неопределено);
						Иначе							
							ТекстАналитик = ТекстАналитик+"ТзПоказатели.Аналитика"+ИндексАналитики+" КАК "+РасшифровкаАналитки.АналитикаКод+",";		
							СтруктураИндексовАналитик.Вставить(РасшифровкаАналитки.АналитикаКод,ИндексАналитики);
						КонецЕсли;		
						
					Иначе
						
						ИндексАналитики = Неопределено;	
						Если НЕ ГруппаПоказателей.Владелец().Колонки.Найти("ВидАналитики_"+РасшифровкаАналитки.АналитикаКод) = Неопределено Тогда	
							ИндексАналитики = ГруппаПоказателей["ВидАналитики_"+РасшифровкаАналитки.АналитикаКод];	
						КонецЕсли;
						Если РасшифровкаАналитки.АналитикаКод = АналитикаДоВалютаКод Тогда	
							Если ЗначениеЗаполнено(ГруппаПоказателей.АналитикаВалюта) Тогда
								ИндексАналитики = "Валюта";	
							КонецЕсли; 	 
						КонецЕсли;	
						
						Если ИндексАналитики = 0 Тогда 		
							//ТекстАналитик = ТекстАналитик+"НЕОПРЕДЕЛЕНО КАК "+РасшифровкаАналитки.АналитикаКод+",";	
							ТекстАналитик = ТекстАналитик+"ТзПоказатели"+"."+РасшифровкаАналитки.АналитикаКод+" ,";	
							СтруктураИндексовАналитик.Вставить(РасшифровкаАналитки.АналитикаКод,Неопределено);
						Иначе							
							ТекстАналитик = ТекстАналитик+"ТзПоказатели"+"."+РасшифровкаАналитки.АналитикаКод+" ,";
							ТекстДополнительногоСоединения = ТекстДополнительногоСоединения+" 
							| И тмПоказателиРаскрытия.Аналитика"+ИндексАналитики+" = тзПоказатели."+РасшифровкаАналитки.АналитикаКод;		
							СтруктураИндексовАналитик.Вставить(РасшифровкаАналитки.АналитикаКод,ИндексАналитики);
						КонецЕсли;		

					
					КонецЕсли;
					
				КонецЕсли;
				
					
			Иначе	
				Если РасшифровкаАналитки.ЭтоАналитикаВерсии Тогда
					ТекстАналитик = ТекстАналитик+"тмПоказателиРаскрытия."+РасшифровкаАналитки.АналитикаКод+",";
					СтруктураИндексовАналитик.Вставить(РасшифровкаАналитки.АналитикаКод,99);
				Иначе		
					ИндексАналитики = Неопределено;	
					Если НЕ ГруппаПоказателей.Владелец().Колонки.Найти("ВидАналитики_"+РасшифровкаАналитки.АналитикаКод) = Неопределено Тогда	
						ИндексАналитики = ГруппаПоказателей["ВидАналитики_"+РасшифровкаАналитки.АналитикаКод];	
					КонецЕсли;
					Если РасшифровкаАналитки.АналитикаКод = АналитикаДоВалютаКод Тогда	
						Если ЗначениеЗаполнено(ГруппаПоказателей.АналитикаВалюта) Тогда
							ИндексАналитики = "Валюта";	
						КонецЕсли; 	 
					КонецЕсли;	
					
					Если ИндексАналитики = 0 Тогда 		
						ТекстАналитик = ТекстАналитик+"НЕОПРЕДЕЛЕНО КАК "+РасшифровкаАналитки.АналитикаКод+",";
						СтруктураИндексовАналитик.Вставить(РасшифровкаАналитки.АналитикаКод,Неопределено);
					Иначе																				
						ТекстАналитик = ТекстАналитик+"тмПоказателиРаскрытия.Аналитика"+ИндексАналитики+" КАК "+РасшифровкаАналитки.АналитикаКод+",";
						СтруктураИндексовАналитик.Вставить(РасшифровкаАналитки.АналитикаКод,ИндексАналитики);
					КонецЕсли;			
				КонецЕсли;				
			КонецЕсли;					
		КонецЕсли;		
	КонецЦикла;
	
КонецПроцедуры	

Функция  ПолучитьСвойстваПоказателей(мПоказатели) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка КАК Ссылка,
	|	ПоказателиОтчетов.Владелец КАК Владелец,
	|	ПоказателиОтчетов.ВидИтога КАК ВидИтога,
	|	ПоказателиОтчетов.НеФинансовый КАК НеФинансовый,
	|	ПоказателиОтчетов.НеМасштабируется КАК НеМасштабируется,
	|	ПоказателиОтчетов.ТипЗначения КАК ТипЗначения,
	|	ПоказателиОтчетов.Валютный КАК Валютный,
	|	ПоказателиОтчетов.ТипПоказателя КАК ТипПоказателя,
	|	ПоказателиОтчетов.Защищенный КАК Защищенный,
	|	ПоказателиОтчетов.СпособРасчетаИтогаПоПериоду КАК СпособРасчетаИтогаПоПериоду
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	ПоказателиОтчетов.Ссылка В (&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка",мПоказатели);
	
	Возврат  Запрос.Выполнить().Выгрузить();
	 		
КонецФункции	

Процедура ПреобразоватьОтборСКДВСтроку(нСтр,СтрОтбор) Экспорт
	
	Если СтрОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно Тогда нСтр.ВидСравненияСтрока     					= "Равно"
	ИначеЕсли СтрОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеРавно Тогда нСтр.ВидСравненияСтрока   			= "Не равно"
	ИначеЕсли СтрОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСписке Тогда нСтр.ВидСравненияСтрока   			= "В списке"
	ИначеЕсли СтрОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеВСписке Тогда нСтр.ВидСравненияСтрока 			= "Не в списке"
	ИначеЕсли СтрОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВИерархии Тогда нСтр.ВидСравненияСтрока     		= "В группе"
	ИначеЕсли СтрОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда нСтр.ВидСравненияСтрока     = "В группе из списка"
	ИначеЕсли СтрОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда нСтр.ВидСравненияСтрока     		= "Не в группе"
	ИначеЕсли СтрОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда нСтр.ВидСравненияСтрока   = "Не в группе из списка"	
	ИначеЕсли СтрОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Больше Тогда нСтр.ВидСравненияСтрока    			= "Больше"
	ИначеЕсли СтрОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда нСтр.ВидСравненияСтрока     	= "Больше или равно"
	ИначеЕсли СтрОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Меньше Тогда нСтр.ВидСравненияСтрока     			= "Меньше"
	ИначеЕсли СтрОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда нСтр.ВидСравненияСтрока     	= "Меньше или равно"
	ИначеЕсли СтрОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Содержит Тогда нСтр.ВидСравненияСтрока     			= "Содержит"	
	ИначеЕсли СтрОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.НачинаетсяС Тогда нСтр.ВидСравненияСтрока     		= "Начинается с"	
	ИначеЕсли СтрОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеСодержит Тогда нСтр.ВидСравненияСтрока     		= "Не содержит"	
	ИначеЕсли СтрОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеНачинаетсяС Тогда нСтр.ВидСравненияСтрока         = "Не начинается с"
	ИначеЕсли СтрОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Заполнено Тогда нСтр.ВидСравненияСтрока         	= "Заполнено"
	ИначеЕсли СтрОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда нСтр.ВидСравненияСтрока         	= "Не заполнено"	
	ИначеЕсли СтрОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.Подобно Тогда нСтр.ВидСравненияСтрока         		= "Соответствует шаблону"
	ИначеЕсли СтрОтбор.ВидСравнения  = ВидСравненияКомпоновкиДанных.НеПодобно Тогда нСтр.ВидСравненияСтрока         	= "Не соответствует шаблону"
	КонецЕсли;	
	
	
КонецПроцедуры	

#КонецОбласти

#Область ЗапросыПолученияТаблицыДанных

Процедура СформироватьЗапросПолученияТаблицыДанных(глСтруктураПараметров) Экспорт
	                    
	ОбъектАБ 						= глСтруктураПараметров.ОбъектАБ;
	ФинальныйЗапрос     			= глСтруктураПараметров.ФинальныйЗапрос;
	ТзПараметровЗапроса 			= глСтруктураПараметров.ТзПараметровЗапроса;
	ТзСтруктураВыводаГруппировок    = глСтруктураПараметров.ТзСтруктураВыводаГруппировок;
	ТаблицаТекущихОтборов           = глСтруктураПараметров.ТаблицаТекущихОтборов;
	АдресЛогаИзмененныхПоказателей  = глСтруктураПараметров.АдресЛогаИзмененныхПоказателей;
	
	ВключатьЗапросДанныхИзЛога = Ложь;
	Если ЗначениеЗаполнено(ОбъектАБ.ИдентификаторСеанса) И ОбъектАБ.ИспользоватьЛогИзмененныхПоказателей Тогда
		ВключатьЗапросДанныхИзЛога = Истина;
	КонецЕсли;	 
		
	СоздатьТаблицуПоказателей(ФинальныйЗапрос);	
		
	Нотбор = ТзПараметровЗапроса.Добавить();
	Нотбор.ИмяОтбора 		= "Валюта";
	Нотбор.ТипОтбора 		= "Параметр отчета";
	Нотбор.ЗначениеОтбора	= "&Валюта";
	
	Если ВключатьЗапросДанныхИзЛога Тогда
		СоздатьТаблицуЛогаНечисловых(ФинальныйЗапрос);
	КонецЕсли;	

	ТекстШаблонаЗапроса = "";
	ТекстШаблонаЗапросаКомментарииПоказателей = "";

	тМаксИспользуемыхАналитик = ОбъектАБ.КэшГруппОтборовПоказателей.Выгрузить();
	тМаксИспользуемыхАналитик.Сортировать("ИндексРегистра УБЫВ");
	МаксИспользуемыхАналитик = тМаксИспользуемыхАналитик[0].ИндексРегистра;
	
	Если МаксИспользуемыхАналитик = -1 Тогда
		МаксИспользуемыхАналитик = ПараметрыСеанса.ЧислоДопАналитик;
	КонецЕсли;	
	
	КэшИменПоказателей = ОбъектАБ.КэшИменОбластейПоказателей.Выгрузить();
	КэшИменПоказателей.Свернуть("УидГруппыОтборов,Показатель");	
	ИндексЗапросаПакета = 0;
	
	
	
	Для Каждого СтрГруппаУид Из ОбъектАБ.КэшГруппОтборовПоказателей Цикл
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ПериодОтчета");
		СтруктураПараметров.Вставить("Сценарий");
		СтруктураПараметров.Вставить("Организация");
		СтруктураПараметров.Вставить("Валюта");
		СтруктураПараметров.Вставить("Проект");
		
		ПоказателиТекущейОбласти = КэшИменПоказателей.Скопировать(Новый Структура("УидГруппыОтборов",СтрГруппаУид.УидГруппыОтборов)).ВыгрузитьКолонку("Показатель");
		//Проверим, есть ли отборы по именованным аналитикам. Если есть то разобъем запрос по индексам отборов.
		ТзАналитик = ЗаполнитьТаблицуОтборовДопАналитик(СтрГруппаУид.УидГруппыОтборов,,ОбъектАБ,ТаблицаТекущихОтборов);
		
		ПолучитьПодзапросТекущейВерсии(ФинальныйЗапрос,СтрГруппаУид,ТзПараметровЗапроса,ОбъектАБ,СтрГруппаУид.ИндексРегистра,ТаблицаТекущихОтборов);
		
		ИндексЗапроса = 0;
		
		Если ТзАналитик.Количество() = 0 Тогда //Нет отборов по аналитикам
			
			ПолучитьТекстЗначенийПоказателей(ТекстШаблонаЗапроса,СтрГруппаУид.УидГруппыОтборов,СтрГруппаУид.ИндексРегистра,ТзПараметровЗапроса,,,ИндексЗапроса,ОбъектАБ,МаксИспользуемыхАналитик,ТаблицаТекущихОтборов);	
			ПолучитьТекстКомментариевЗначенийПоказателей(ТекстШаблонаЗапросаКомментарииПоказателей,СтрГруппаУид.УидГруппыОтборов,СтрГруппаУид.ИндексРегистра,ТзПараметровЗапроса,,,ИндексЗапроса,ОбъектАБ,МаксИспользуемыхАналитик);
			
			Если ВключатьЗапросДанныхИзЛога Тогда
				 ПолучитьТекстЗначенийДанныхЛога(ТекстШаблонаЗапроса,СтрГруппаУид.УидГруппыОтборов,СтрГруппаУид.ИндексРегистра,ТзПараметровЗапроса,,,ИндексЗапроса,ОбъектАБ,МаксИспользуемыхАналитик,ТаблицаТекущихОтборов);	
			КонецЕсли;	

			Нотбор = ТзПараметровЗапроса.Добавить();
			Нотбор.ИмяОтбора 		= "ОтборПоказателей_"+СтрГруппаУид.УидГруппыОтборов+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0");
			Нотбор.ТипОтбора 		= "Равно";
			Нотбор.ЗначениеОтбора	= ПоказателиТекущейОбласти;	
			
		Иначе	
			КэшПоказателей = Неопределено;
			КэшАналитик    = Неопределено;
			ПолучитьКэшПоказателей(ПоказателиТекущейОбласти,ТзАналитик,КэшПоказателей,КэшАналитик);
			
			Для Каждого ГруппаПоказателей Из КэшАналитик Цикл
				
				ПолучитьТекстЗначенийПоказателей(ТекстШаблонаЗапроса,СтрГруппаУид.УидГруппыОтборов,СтрГруппаУид.ИндексРегистра,ТзПараметровЗапроса,ТзАналитик,ГруппаПоказателей,ИндексЗапроса,ОбъектАБ,МаксИспользуемыхАналитик,ТаблицаТекущихОтборов);		
				ПолучитьТекстКомментариевЗначенийПоказателей(ТекстШаблонаЗапросаКомментарииПоказателей,СтрГруппаУид.УидГруппыОтборов,СтрГруппаУид.ИндексРегистра,ТзПараметровЗапроса,ТзАналитик,ГруппаПоказателей,ИндексЗапроса,ОбъектАБ,МаксИспользуемыхАналитик);
				
				Если ВключатьЗапросДанныхИзЛога Тогда
					ПолучитьТекстЗначенийДанныхЛога(ТекстШаблонаЗапроса,СтрГруппаУид.УидГруппыОтборов,СтрГруппаУид.ИндексРегистра,ТзПараметровЗапроса,ТзАналитик,ГруппаПоказателей,ИндексЗапроса,ОбъектАБ,МаксИспользуемыхАналитик,ТаблицаТекущихОтборов);	
				КонецЕсли;

				СтруктураПоискаПоказателей  = Новый Структура;
				
				Для Каждого Кол Из КэшАналитик.Колонки Цикл
					СтруктураПоискаПоказателей.Вставить(Кол.Имя,ГруппаПоказателей[Кол.Имя]);
				Конеццикла;	
				
				Если СтруктураПоискаПоказателей.ГруппаРаскрытияЧислоАналитик = NULL Тогда
					СтруктураПоискаПоказателей.ГруппаРаскрытияЧислоАналитик=0;
				КонецЕсли;	
				
				ПоказателиТекущейПодОбласти = КэшПоказателей.Скопировать(СтруктураПоискаПоказателей);
				ПоказателиТекущейПодОбласти.Свернуть("Ссылка");	
				ПоказателиТекущейПодОбласти =  ПоказателиТекущейПодОбласти.ВыгрузитьКолонку("Ссылка");	
				
				Нотбор = ТзПараметровЗапроса.Добавить();
				Нотбор.ИмяОтбора 		= "ОтборПоказателей_"+СтрГруппаУид.УидГруппыОтборов+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0");
				Нотбор.ТипОтбора 		= "Равно";
				Нотбор.ЗначениеОтбора	= ПоказателиТекущейПодОбласти;		
				ИндексЗапроса = ИндексЗапроса+1;
			КонецЦикла;	
		КонецЕсли;		
	КонецЦикла;
	
	ВидыОтчетовСинтетика = ОбъектАБ.КэшИменОбластейПоказателей.Выгрузить();
	ВидыОтчетовСинтетика.Свернуть("ВидОтчета");
	ВидыОтчетовСинтетикаМассив =ВидыОтчетовСинтетика.ВыгрузитьКолонку("ВидОтчета");	

	Нотбор = ТзПараметровЗапроса.Добавить();
	Нотбор.ИмяОтбора 		= "ВидыОтчетаСинтетика";
	Нотбор.ТипОтбора 		= "Равно";
	Нотбор.ЗначениеОтбора	= ВидыОтчетовСинтетикаМассив;
	
	ПодготовитьТекстФинальногоЗапросаДанные(ТекстШаблонаЗапроса);	
	
	//Добавляем в таблицу запросов подзапрос по данным
	СтруктураВыводаТекущейОбласти = ТзСтруктураВыводаГруппировок.Добавить();
	СтруктураВыводаТекущейОбласти.ИндексЗапросаПакета        = ИндексЗапросаПакета;
	СтруктураВыводаТекущейОбласти.ПараметрыЗапроса           = ТзПараметровЗапроса.Скопировать();
	СтруктураВыводаТекущейОбласти.ОбластьСодержитМакет       = Ложь;
	СтруктураВыводаТекущейОбласти.ТекстЗапросаВыводаОбластей = ФинальныйЗапрос.Текст+ТекстШаблонаЗапроса;
	СтруктураВыводаТекущейОбласти.ТипОбласти       			= "Данные";
	ИндексЗапросаПакета = ИндексЗапросаПакета+1;
	
	//Добавляем в таблицу запросов подзапрос по комментариям
	СтруктураВыводаТекущейОбласти = ТзСтруктураВыводаГруппировок.Добавить();
	СтруктураВыводаТекущейОбласти.ИндексЗапросаПакета        = ИндексЗапросаПакета;
	СтруктураВыводаТекущейОбласти.ПараметрыЗапроса           = ТзПараметровЗапроса.Скопировать();
	СтруктураВыводаТекущейОбласти.ОбластьСодержитМакет       = Ложь;
	СтруктураВыводаТекущейОбласти.ТекстЗапросаВыводаОбластей = ТекстШаблонаЗапросаКомментарииПоказателей;
	СтруктураВыводаТекущейОбласти.ТипОбласти       			= "КомментарииДанных";
	ИндексЗапросаПакета = ИндексЗапросаПакета+1;
	
	
КонецПроцедуры	

#КонецОбласти


#Область ВыводКолонок

//Колонки без пересечений
Процедура ПодготовитьТекстЗапросаРаскрытияКолонкиСКД(СтруктураПараметров,ОбъектАБ,ПолеТабличногоДокументаМакет);
	  
	ТзПараметровЗапроса 			= СтруктураПараметров.ТзПараметровЗапроса.СкопироватьКолонки();
	ТзСтруктураВыводаГруппировок     = СтруктураПараметров.ТзСтруктураВыводаГруппировок;
	
	СтруктураАналитик = Новый ТаблицаЗначений;
	СтруктураАналитик.Колонки.Добавить("КодАналитки");
	СтруктураАналитик.Колонки.Добавить("ТзАналитик");
    СтруктураАналитик.Колонки.Добавить("УидГруппыОтборов");
	
	ТекстШаблонаЗапроса 			= "";
	ТекстИтоговогоЗапросаКолонки	= "";
	ТекстЗапроса 					= "";	
	ТекстИтогов	                    = "";
	
	КэшУникальныхКодовПоказателей  = Новый Структура;
	КэшПоказателей                 = Новый Массив;
	МассивУидовГруппОтборов 	   = Новый Структура;
	
	глТзАналитик = Обработки.АналитическийБланк.ПолучитьОписаниеТаблицыНастроекАналитик(); 

	ТзПоказателейОбластей = Новый ТаблицаЗначений;
	ТзПоказателейОбластей.Колонки.Добавить("ИмяОбласти");
	ТзПоказателейОбластей.Колонки.Добавить("Показатель");                           
    ТзПоказателейОбластей.Колонки.Добавить("ВидОтчета");
	ТзПоказателейОбластей.Колонки.Добавить("КлючВерсииОтборов");
	ТзПоказателейОбластей.Колонки.Добавить("КодПоляПоказателя");

	
	ТзПараметровОбластей = Новый ТаблицаЗначений;
	ТзПараметровОбластей.Колонки.Добавить("ИмяВмакете");
	ТзПараметровОбластей.Колонки.Добавить("ПутьКДанным");                           
	ТзПараметровОбластей.Колонки.Добавить("ВыражениеПоля");
	ТзПараметровОбластей.Колонки.Добавить("ТипПараметра");
	ТзПараметровОбластей.Колонки.Добавить("ИмяПоляВзапросе");
	ТзПараметровОбластей.Колонки.Добавить("ИмяОбластиВмакете");
	ТзПараметровОбластей.Колонки.Добавить("ИмяМакета");
	ТзПараметровОбластей.Колонки.Добавить("ВыбранВМакете",ОбщегоНазначенияУх.ПолучитьОписаниеТиповБулево());
	ТзПараметровОбластей.Колонки.Добавить("ЭтоСортировка",ОбщегоНазначенияУх.ПолучитьОписаниеТиповБулево());
	ТзПараметровОбластей.Колонки.Добавить("УровеньВгруппировке",ОбщегоНазначенияУх.ПолучитьОписаниеТиповЧисла(3));
	ТзПараметровОбластей.Колонки.Добавить("ПорядокСортировки");

	
	СтруктураПараметров_ = Новый Структура;
	СтруктураПараметров_.Вставить("ТипОбласти",						"Колонки");
	СтруктураПараметров_.Вставить("ТипМакета",						"Колонки");
	СтруктураПараметров_.Вставить("МассивУидовГруппОтборов",		МассивУидовГруппОтборов);                                         
	СтруктураПараметров_.Вставить("КэшУникальныхКодовПоказателей",	КэшУникальныхКодовПоказателей);
	СтруктураПараметров_.Вставить("КэшПоказателей",					КэшПоказателей);
	СтруктураПараметров_.Вставить("тзПоказателейОбластей",			тзПоказателейОбластей);
	СтруктураПараметров_.Вставить("ОбъектАБ",						ОбъектАБ);
	СтруктураПараметров_.Вставить("ПолеТабличногоДокументаМакет",	ПолеТабличногоДокументаМакет);
	СтруктураПараметров_.Вставить("глТзАналитик",					глТзАналитик);
	СтруктураПараметров_.Вставить("ТзПоказателейОбластей",			ТзПоказателейОбластей);
	СтруктураПараметров_.Вставить("ТзСтруктураВыводаГруппировок",	ТзСтруктураВыводаГруппировок);
	СтруктураПараметров_.Вставить("ТзПараметровОбластей",			ТзПараметровОбластей);
	СтруктураПараметров_.Вставить("СтруктураАналитикРаскрытияПоказателей",	СтруктураПараметров.СтруктураАналитикРаскрытияПоказателей);
	
	//Все области раскрытия колонок,верхний 
	КэшГруппОтборовПоказателейРаскрытияМассив = ПолучитьКэшГруппОтборовПоказателейРаскрытияКолонки(СтруктураПараметров_);
		
	глТзАналитик.Сортировать("ПорядокАналитики");
	
	ИндексЗапросаПакета = 1;
	
	Для Каждого Стр Из КэшГруппОтборовПоказателейРаскрытияМассив Цикл		
		Для Каждого СтрАналитика Из Стр.ТзАналитик Цикл			
			ДополнитьПараметрыОбластейПолямиПорядка(ТзПараметровОбластей,Стр.ТзАналитик);			
		КонецЦикла;			
	КонецЦикла;	
	
	тСтруктураГруппирвок = ПолучитьИзВременногоХранилища(ОбъектАБ.тСтруктураМакетовРаскрытияАдрес);
	
	Для Каждого СтрГруппаУид Из КэшГруппОтборовПоказателейРаскрытияМассив Цикл
		
		ПодзапросВыводаМакетаРаскрытия = Новый Запрос;
		ТекстПодзапросаВыбораДанных    = "";
		лТзПараметровЗапроса = ТзПараметровЗапроса.СкопироватьКолонки();
		тПараметрыОбластей = ПолучитьПараметрыТекущейОбласти(СтрГруппаУид,ТзПараметровОбластей,тСтруктураГруппирвок);

		//Здесь настройки раскрытия текущей области 
		ОписаниеТекущейОбласти = ОбъектАБ.КэшРаскрываемыхОбластей.НайтиСтроки(Новый Структура("ИмяОбласти",СтрГруппаУид.ИмяОбласти))[0];	
		
		//Здесь описание отборов 
		ОписаниеТекущейГруппыОтборовАналитикРаскрытия  = ОбъектАБ.НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов",ОписаниеТекущейОбласти.УидГруппыОтборов));
		
		//Здесь формируем заготовок текста для полного макета, в соответствии с отборами области 
		ПолучитьТекстЗапросаМакетаПоказателей(СтрГруппаУид.ТзАналитик,ОбъектАБ.НастройкиРаскрываемыхОбластей,ПодзапросВыводаМакетаРаскрытия,ОписаниеТекущейГруппыОтборовАналитикРаскрытия,лТзПараметровЗапроса,ОписаниеТекущейОбласти,ТзПоказателейОбластей,ТзПараметровОбластей); 
		
		//Здесь  получаем УИды групп отборов показателей, входящих в область текущего макета
		КэшКлючевыхОтборовТекущегоРаскрытия = МассивУидовГруппОтборов[СтрГруппаУид.ИмяОбласти];
		
		ИндексЗапроса = СтрГруппаУид.ИмяОбласти;
		
		Для Каждого КлючВерсии Из  КэшКлючевыхОтборовТекущегоРаскрытия Цикл
			ОписаниеТекущейГруппыОтборов = ОбъектАБ.КэшГруппОтборовПоказателей.НайтиСтроки(Новый Структура("УидГруппыОтборов",КлючВерсии.Значение))[0];				
			
			Если СтрГруппаУид.ТзАналитик.НайтиСтроки(Новый Структура("ЭтоАналитикаВерсии",ЛОЖЬ)).Количество() = 0 Тогда
				//Получаем данные для каждого УИДА
				ПолучитьТекстЗначенийПоказателей_Раскрытие(ТекстПодзапросаВыбораДанных
				,ОписаниеТекущейГруппыОтборов
				,ОписаниеТекущейГруппыОтборов.ИндексРегистра
				,ОписаниеТекущейОбласти
				,СтрГруппаУид.ТзАналитик
				,глТзАналитик
				,Неопределено
				,ИндексЗапроса
				,лТзПараметровЗапроса
				,ОбъектАБ
				,ТзПараметровОбластей);
				
				ПоказателиТекущегоЗапроса = ТзПоказателейОбластей.Скопировать(Новый Структура("ИмяОбласти,КлючВерсииОтборов",СтрГруппаУид.ИмяОбласти,КлючВерсии.Значение)).ВыгрузитьКолонку("Показатель");
				
				Нотбор = лТзПараметровЗапроса.Добавить();
				Нотбор.ИмяОтбора 		=  "Пар_"+КлючВерсии.Значение+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0")+"_Показатели";
				Нотбор.ТипОтбора 		= "Равно";
				Нотбор.ЗначениеОтбора	= ПоказателиТекущегоЗапроса;				
	
			Иначе
				КэшПоказателей = Неопределено;
				КэшАналитик    = Неопределено;
				
				ПоказателиТекущейГруппы = ТзПоказателейОбластей.Скопировать(Новый Структура("ИмяОбласти,КлючВерсииОтборов",СтрГруппаУид.ИмяОбласти,КлючВерсии.Значение)).ВыгрузитьКолонку("Показатель");
				ПолучитьКэшПоказателей(ПоказателиТекущейГруппы,СтрГруппаУид.ТзАналитик,КэшПоказателей,КэшАналитик);
				
				Для Каждого ГруппаПоказателей Из КэшАналитик Цикл
					
					СтруктураПоиска = Новый Структура;
					
					Для Каждого Кол Из КэшАналитик.Колонки Цикл
						СтруктураПоиска.Вставить(Кол.Имя,ГруппаПоказателей[Кол.Имя]);
					Конеццикла;			
					Если СтруктураПоиска.ГруппаРаскрытияЧислоАналитик = NULL Тогда
						СтруктураПоиска.ГруппаРаскрытияЧислоАналитик=0;
					КонецЕсли;	
					
					ДанныеТекущегоЗапроса     = КэшПоказателей.Скопировать(СтруктураПоиска);
					ДанныеТекущегоЗапроса.Свернуть("Ссылка,СтрокаОтчета");	
					ПоказателиТекущегоЗапроса =  ДанныеТекущегоЗапроса.ВыгрузитьКолонку("Ссылка");	

					//Получаем данные для каждого УИДА
					ПолучитьТекстЗначенийПоказателей_Раскрытие(ТекстПодзапросаВыбораДанных
					,ОписаниеТекущейГруппыОтборов
					,ОписаниеТекущейГруппыОтборов.ИндексРегистра
					,ОписаниеТекущейОбласти
					,СтрГруппаУид.ТзАналитик
					,глТзАналитик
					,ГруппаПоказателей
					,ИндексЗапроса
					,лТзПараметровЗапроса
					,ОбъектАБ
					,ТзПараметровОбластей);
										
					Нотбор = лТзПараметровЗапроса.Добавить();
					Нотбор.ИмяОтбора 		=  "Пар_"+КлючВерсии.Значение+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0")+"_Показатели";
					Нотбор.ТипОтбора 		= "Равно";
					Нотбор.ЗначениеОтбора	= ПоказателиТекущегоЗапроса;				
					
					ИндексЗапроса = ИндексЗапроса+1;
					
				КонецЦикла;	
			КонецЕсли;	
		КонецЦикла;			
		
		СтруктураВыводаТекущейОбласти = ТзСтруктураВыводаГруппировок.НайтиСтроки(Новый Структура("УидОбласти",СтрГруппаУид.ИмяОбласти));

		ТЗПоказателиТекущейОбласти = ТзПоказателейОбластей.Скопировать(Новый Структура("ИмяОбласти",СтрГруппаУид.ИмяОбласти));
		ПоказателиТекущейОбласти   = ТЗПоказателиТекущейОбласти.ВыгрузитьКолонку("Показатель");
		
		ТекстПоказателейПоВидамИтогов = "";
						
		ПолучитьТекстМакетаСгруппировкамиКолонкиСКД(ТекстПоказателейПоВидамИтогов,СтрГруппаУид.ТзАналитик,тПараметрыОбластей,ТзПоказателейОбластей,лТзПараметровЗапроса);
						
		//Настройка вывода периодов
		тНастройкиПериодов = ОбъектАБ.КэшНастроекПериодов.Выгрузить().Скопировать(Новый Структура("ИмяОбласти",СтруктураВыводаТекущейОбласти[0].ИмяОбласти));
		СтруктураВыводаТекущейОбласти[0].КэшНастроекПериодов  = тНастройкиПериодов;
						
		//Настройка вывода иерархий 
		НастройкиИерархий = ОбъектАБ.КэшНастроекИерархий.Выгрузить().СкопироватьКолонки();
		Для Каждого СтрВложенныйМакет Из СтруктураВыводаТекущейОбласти Цикл
			тНастройкиИерархий = ОбъектАБ.КэшНастроекИерархий.НайтиСтроки(Новый Структура("ИмяОбласти",СтрВложенныйМакет.ИмяОбласти));
			Для Каждого настройка Из тНастройкиИерархий Цикл
				нНастройкиИерархий = НастройкиИерархий.Добавить();
				ЗаполнитьЗначенияСвойств(нНастройкиИерархий,настройка);
			КонецЦикла;
		КонецЦикла;
		СтруктураВыводаТекущейОбласти[0].КэшНастроекИерархий  = НастройкиИерархий;

	
		СтруктураВыводаТекущейОбласти[0].ТекстЗапросаВыводаОбластей = ПодзапросВыводаМакетаРаскрытия.Текст
			+ТекстПодзапросаВыбораДанных
			+ТекстПоказателейПоВидамИтогов
			+ПолучитьТекстЗапросаВыводаМакетаКолонкиСКД(ТЗПоказателиТекущейОбласти,СтрГруппаУид.ТзАналитик, СтруктураВыводаТекущейОбласти, СтрГруппаУид.ИмяОбласти, тПараметрыОбластей,СтруктураПараметров_.КэшУникальныхКодовПоказателей);
		
		//Запрос вывода колонк через СКД																																			
		СтруктураПараметровОписанияСхемыКД = Новый Структура;
		СтруктураПараметровОписанияСхемыКД.Вставить("СтрокаВывода",СтруктураВыводаТекущейОбласти[0]);
		СтруктураПараметровОписанияСхемыКД.Вставить("ПрефиксЗапроса",ПодзапросВыводаМакетаРаскрытия.Текст+ТекстПодзапросаВыбораДанных+ТекстПоказателейПоВидамИтогов);
		СтруктураПараметровОписанияСхемыКД.Вставить("ТаблицаПоказателиТекущейОбласти",ТЗПоказателиТекущейОбласти);
		СтруктураПараметровОписанияСхемыКД.Вставить("ТзАналитик",СтрГруппаУид.ТзАналитик);
		СтруктураПараметровОписанияСхемыКД.Вставить("СтруктураВыводаТекущейОбласти",СтруктураВыводаТекущейОбласти);
		СтруктураПараметровОписанияСхемыКД.Вставить("ИмяОбласти",СтрГруппаУид.ИмяОбласти);
		СтруктураПараметровОписанияСхемыКД.Вставить("тПараметрыОбластей",тПараметрыОбластей);
		СтруктураПараметровОписанияСхемыКД.Вставить("КэшУникальныхКодовПоказателей",СтруктураПараметров_.КэшУникальныхКодовПоказателей);
		
		ПолучитьОписаниеСхемыКДВыводаМакетКолонки(СтруктураПараметровОписанияСхемыКД);											
		
		СтруктураВыводаТекущейОбласти[0].ИндексЗапросаПакета        = ИндексЗапросаПакета;
		СтруктураВыводаТекущейОбласти[0].ПараметрыЗапроса           = лТзПараметровЗапроса;
		СтруктураВыводаТекущейОбласти[0].ПоказателиОбласти        	= ТЗПоказателиТекущейОбласти;
		СтруктураВыводаТекущейОбласти[0].ОбластьСодержитМакет       = ОбластьСодержитМакет(СтрГруппаУид.ТзАналитик);
		
		ИндексЗапросаПакета 		= ИндексЗапросаПакета + 1;
		ИндексЗапроса 				= ИндексЗапроса+1;

	КонецЦикла;
	
	ТзСтруктураВыводаГруппировок.Сортировать("УидОбласти, Уровень, ИндексЗапросаПакета");
				
	СтруктураПараметров.Вставить("ТзСтруктураВыводаГруппировокКолонок"	,ПоместитьВовременноеХранилище(ТзСтруктураВыводаГруппировок,Новый УникальныйИдентификатор()));
	СтруктураПараметров.Вставить("ПараметрыОбластейКолонки"				,ПоместитьВовременноеХранилище(ТзПараметровОбластей,Новый УникальныйИдентификатор()));		
	СтруктураПараметров.Вставить("ТзПоказателейОбластейКолонки"			,ТзПоказателейОбластей);
		
КонецПроцедуры

Процедура ПодготовитьТекстЗапросаРаскрытияКолонки(СтруктураПараметров,ОбъектАБ,ПолеТабличногоДокументаМакет);
	  
	ТзПараметровЗапроса 			= СтруктураПараметров.ТзПараметровЗапроса.СкопироватьКолонки();
	ТзСтруктураВыводаГруппировок     = СтруктураПараметров.ТзСтруктураВыводаГруппировок;
	
	СтруктураАналитик = Новый ТаблицаЗначений;
	СтруктураАналитик.Колонки.Добавить("КодАналитки");
	СтруктураАналитик.Колонки.Добавить("ТзАналитик");
    СтруктураАналитик.Колонки.Добавить("УидГруппыОтборов");
	
	ТекстШаблонаЗапроса 			= "";
	ТекстИтоговогоЗапросаКолонки	= "";
	ТекстЗапроса 					= "";	
	ТекстИтогов	                    = "";
	
	КэшУникальныхКодовПоказателей  = Новый Структура;
	КэшПоказателей                 = Новый Массив;
	МассивУидовГруппОтборов 	   = Новый Структура;
	
	глТзАналитик = Обработки.АналитическийБланк.ПолучитьОписаниеТаблицыНастроекАналитик(); 

	ТзПоказателейОбластей = Новый ТаблицаЗначений;
	ТзПоказателейОбластей.Колонки.Добавить("ИмяОбласти");
	ТзПоказателейОбластей.Колонки.Добавить("Показатель");                           
    ТзПоказателейОбластей.Колонки.Добавить("ВидОтчета");
	ТзПоказателейОбластей.Колонки.Добавить("КлючВерсииОтборов");
	ТзПоказателейОбластей.Колонки.Добавить("КодПоляПоказателя");

	
	ТзПараметровОбластей = Новый ТаблицаЗначений;
	ТзПараметровОбластей.Колонки.Добавить("ИмяВмакете");
	ТзПараметровОбластей.Колонки.Добавить("ПутьКДанным");                           
	ТзПараметровОбластей.Колонки.Добавить("ВыражениеПоля");
	ТзПараметровОбластей.Колонки.Добавить("ТипПараметра");
	ТзПараметровОбластей.Колонки.Добавить("ИмяПоляВзапросе");
	ТзПараметровОбластей.Колонки.Добавить("ИмяОбластиВмакете");
	ТзПараметровОбластей.Колонки.Добавить("ИмяМакета");
	ТзПараметровОбластей.Колонки.Добавить("ВыбранВМакете",ОбщегоНазначенияУх.ПолучитьОписаниеТиповБулево());
	ТзПараметровОбластей.Колонки.Добавить("ЭтоСортировка",ОбщегоНазначенияУх.ПолучитьОписаниеТиповБулево());
	ТзПараметровОбластей.Колонки.Добавить("УровеньВгруппировке",ОбщегоНазначенияУх.ПолучитьОписаниеТиповЧисла(3));
	
	СтруктураПараметров_ = Новый Структура;
	СтруктураПараметров_.Вставить("ТипОбласти",						"Колонки");
	СтруктураПараметров_.Вставить("ТипМакета",						"Колонки");
	СтруктураПараметров_.Вставить("МассивУидовГруппОтборов",		МассивУидовГруппОтборов);                                         
	СтруктураПараметров_.Вставить("КэшУникальныхКодовПоказателей",	КэшУникальныхКодовПоказателей);
	СтруктураПараметров_.Вставить("КэшПоказателей",					КэшПоказателей);
	СтруктураПараметров_.Вставить("тзПоказателейОбластей",			тзПоказателейОбластей);
	СтруктураПараметров_.Вставить("ОбъектАБ",						ОбъектАБ);
	СтруктураПараметров_.Вставить("ПолеТабличногоДокументаМакет",	ПолеТабличногоДокументаМакет);
	СтруктураПараметров_.Вставить("глТзАналитик",					глТзАналитик);
	СтруктураПараметров_.Вставить("ТзПоказателейОбластей",			ТзПоказателейОбластей);
	СтруктураПараметров_.Вставить("ТзСтруктураВыводаГруппировок",	ТзСтруктураВыводаГруппировок);
	СтруктураПараметров_.Вставить("ТзПараметровОбластей",			ТзПараметровОбластей);
	СтруктураПараметров_.Вставить("СтруктураАналитикРаскрытияПоказателей",	СтруктураПараметров.СтруктураАналитикРаскрытияПоказателей);
	
	//Все области раскрытия колонок,верхний 
	КэшГруппОтборовПоказателейРаскрытияМассив = ПолучитьКэшГруппОтборовПоказателейРаскрытияКолонки(СтруктураПараметров_);
		
	глТзАналитик.Сортировать("ПорядокАналитики");
	
	ИндексЗапросаПакета = 1;
	
	Для Каждого Стр Из КэшГруппОтборовПоказателейРаскрытияМассив Цикл
		Для Каждого СтрАналитика Из Стр.ТзАналитик Цикл		
			ИмяПоляВЗапросе                                     =  СтрЗАменить(СтрАналитика.АналитикаСортировка,".","");	
			ТекПоле                                             =  ТзПараметровОбластей.НайтиСтроки(Новый Структура("ИмяПоляВзапросе",ИмяПоляВЗапросе));
			Если  ТекПоле.Количество() = 0 Тогда
				нТзПараметровОбластей 								= ТзПараметровОбластей.Добавить();
			Иначе	
				нТзПараметровОбластей 								= ТекПоле[0];
			КонецЕсли;	
			нТзПараметровОбластей.ИмяВМакете    				= СтрАналитика.АналитикаСортировка;
			нТзПараметровОбластей.ВыражениеПоля    				= СтрЗаменить(СтрАналитика.АналитикаСортировка,СтрАналитика.АналитикаКод+".","");
			нТзПараметровОбластей.ПутьКДанным   				= СтрАналитика.АналитикаКод;
			нТзПараметровОбластей.ТипПараметра  				= "Группировка";
			нТзПараметровОбластей.ЭтоСортировка  				= Истина;
			нТзПараметровОбластей.ИмяПоляВзапросе    			= ИмяПоляВЗапросе;	
		КонецЦикла;			
	КонецЦикла;	
	
	тСтруктураГруппирвок = ПолучитьИзВременногоХранилища(ОбъектАБ.тСтруктураМакетовРаскрытияАдрес);
	
	Для Каждого СтрГруппаУид Из КэшГруппОтборовПоказателейРаскрытияМассив Цикл
		
		
		ПодзапросВыводаМакетаРаскрытия = Новый Запрос;
		ТекстПодзапросаВыбораДанных    = "";
		лТзПараметровЗапроса = ТзПараметровЗапроса.СкопироватьКолонки();
		тПараметрыОбластей = ПолучитьПараметрыТекущейОбласти(СтрГруппаУид,ТзПараметровОбластей,тСтруктураГруппирвок);

		
		//Здесь настройки раскрытия текущей области 
		ОписаниеТекущейОбласти = ОбъектАБ.КэшРаскрываемыхОбластей.НайтиСтроки(Новый Структура("ИмяОбласти",СтрГруппаУид.ИмяОбласти))[0];	
		
		//Здесь описание отборов 
		ОписаниеТекущейГруппыОтборовАналитикРаскрытия  = ОбъектАБ.НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов",ОписаниеТекущейОбласти.УидГруппыОтборов));
		
		//Здесь формируем заготовок текста для полного макета, в соответствии с отборами области 
		ПолучитьТекстЗапросаМакетаПоказателей(СтрГруппаУид.ТзАналитик,ОбъектАБ.НастройкиРаскрываемыхОбластей,ПодзапросВыводаМакетаРаскрытия,ОписаниеТекущейГруппыОтборовАналитикРаскрытия,лТзПараметровЗапроса,ОписаниеТекущейОбласти,ТзПоказателейОбластей,ТзПараметровОбластей); 
		
		//Здесь  получаем УИды групп отборов показателей, входящих в область текущего макета
		КэшКлючевыхОтборовТекущегоРаскрытия = МассивУидовГруппОтборов[СтрГруппаУид.ИмяОбласти];
		
		ИндексЗапроса = СтрГруппаУид.ИмяОбласти;
		
		Для Каждого КлючВерсии Из  КэшКлючевыхОтборовТекущегоРаскрытия Цикл
			ОписаниеТекущейГруппыОтборов = ОбъектАБ.КэшГруппОтборовПоказателей.НайтиСтроки(Новый Структура("УидГруппыОтборов",КлючВерсии.Значение))[0];				
			
			Если СтрГруппаУид.ТзАналитик.НайтиСтроки(Новый Структура("ЭтоАналитикаВерсии",ЛОЖЬ)).Количество() = 0 Тогда
				//Получаем данные для каждого УИДА
				ПолучитьТекстЗначенийПоказателей_Раскрытие(ТекстПодзапросаВыбораДанных
				,ОписаниеТекущейГруппыОтборов
				,ОписаниеТекущейГруппыОтборов.ИндексРегистра
				,ОписаниеТекущейОбласти
				,СтрГруппаУид.ТзАналитик
				,глТзАналитик
				,Неопределено
				,ИндексЗапроса
				,лТзПараметровЗапроса
				,ОбъектАБ
				,ТзПараметровОбластей);
				
				ПоказателиТекущегоЗапроса = ТзПоказателейОбластей.Скопировать(Новый Структура("ИмяОбласти,КлючВерсииОтборов",СтрГруппаУид.ИмяОбласти,КлючВерсии.Значение)).ВыгрузитьКолонку("Показатель");
				
				Нотбор = лТзПараметровЗапроса.Добавить();
				Нотбор.ИмяОтбора 		=  "Пар_"+КлючВерсии.Значение+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0")+"_Показатели";
				Нотбор.ТипОтбора 		= "Равно";
				Нотбор.ЗначениеОтбора	= ПоказателиТекущегоЗапроса;				

				
			Иначе
				КэшПоказателей = Неопределено;
				КэшАналитик    = Неопределено;
				
				ПоказателиТекущейГруппы = ТзПоказателейОбластей.Скопировать(Новый Структура("ИмяОбласти,КлючВерсииОтборов",СтрГруппаУид.ИмяОбласти,КлючВерсии.Значение)).ВыгрузитьКолонку("Показатель");
				ПолучитьКэшПоказателей(ПоказателиТекущейГруппы,СтрГруппаУид.ТзАналитик,КэшПоказателей,КэшАналитик);
				
				
				Для Каждого ГруппаПоказателей Из КэшАналитик Цикл
					
					СтруктураПоиска = Новый Структура;
					
					Для Каждого Кол Из КэшАналитик.Колонки Цикл
						СтруктураПоиска.Вставить(Кол.Имя,ГруппаПоказателей[Кол.Имя]);
					Конеццикла;			
					Если СтруктураПоиска.ГруппаРаскрытияЧислоАналитик = NULL Тогда
						СтруктураПоиска.ГруппаРаскрытияЧислоАналитик=0;
					КонецЕсли;	
					
					ДанныеТекущегоЗапроса     = КэшПоказателей.Скопировать(СтруктураПоиска);
					ДанныеТекущегоЗапроса.Свернуть("Ссылка,СтрокаОтчета");	
					ПоказателиТекущегоЗапроса =  ДанныеТекущегоЗапроса.ВыгрузитьКолонку("Ссылка");	

					//Получаем данные для каждого УИДА
					ПолучитьТекстЗначенийПоказателей_Раскрытие(ТекстПодзапросаВыбораДанных
					,ОписаниеТекущейГруппыОтборов
					,ОписаниеТекущейГруппыОтборов.ИндексРегистра
					,ОписаниеТекущейОбласти
					,СтрГруппаУид.ТзАналитик
					,глТзАналитик
					,ГруппаПоказателей
					,ИндексЗапроса
					,лТзПараметровЗапроса
					,ОбъектАБ
					,ТзПараметровОбластей);
					
					ПоказателиТекущегоЗапроса = ТзПоказателейОбластей.Скопировать(Новый Структура("ИмяОбласти,КлючВерсииОтборов",СтрГруппаУид.ИмяОбласти,КлючВерсии.Значение)).ВыгрузитьКолонку("Показатель");
					
					Нотбор = лТзПараметровЗапроса.Добавить();
					Нотбор.ИмяОтбора 		=  "Пар_"+КлючВерсии.Значение+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0")+"_Показатели";
					Нотбор.ТипОтбора 		= "Равно";
					Нотбор.ЗначениеОтбора	= ПоказателиТекущегоЗапроса;				
					
					ИндексЗапроса = ИндексЗапроса+1;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;			
		
		ТЗПоказателиТекущейОбласти = ТзПоказателейОбластей.Скопировать(Новый Структура("ИмяОбласти",СтрГруппаУид.ИмяОбласти));
		ПоказателиТекущейОбласти   = ТЗПоказателиТекущейОбласти.ВыгрузитьКолонку("Показатель");
		
		ТекстПоказателейПоВидамИтогов = "";
				
		ПолучитьТекстМакетаСгруппировкамиКолонки(ТекстПоказателейПоВидамИтогов,СтрГруппаУид.ТзАналитик,тПараметрыОбластей,ТзПоказателейОбластей,лТзПараметровЗапроса);

		СтруктураВыводаТекущейОбласти = ТзСтруктураВыводаГруппировок.НайтиСтроки(Новый Структура("УидОбласти",СтрГруппаУид.ИмяОбласти));
				
		МаксимальноеКоличествоПоказателей = 300;
		ТекущийИндекс = 0;
		КоличествоПоказателей = ТЗПоказателиТекущейОбласти.Количество();
		ТекущееОграничение = Мин(МаксимальноеКоличествоПоказателей, КоличествоПоказателей);
		
		ТаблицаПоказателиТекущейОбласти = ТЗПоказателиТекущейОбласти.СкопироватьКолонки();
				
		Пока ТекущееОграничение <= КоличествоПоказателей Цикл
			
			Если ТекущееОграничение <= МаксимальноеКоличествоПоказателей тогда   //первый проход
				СтрокаВывода = СтруктураВыводаТекущейОбласти[0];
			Иначе
				СтрокаВывода = ТзСтруктураВыводаГруппировок.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаВывода, СтруктураВыводаТекущейОбласти[0],, "ПоказателиОбласти, ТекстЗапросаВыводаОбластей");
			КонецЕсли;
			
			ТаблицаПоказателиТекущейОбласти.Очистить();
			
			Пока ТекущийИндекс < ТекущееОграничение Цикл
				
				НоваяСтрокаПоказатели = ТаблицаПоказателиТекущейОбласти.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаПоказатели, ТЗПоказателиТекущейОбласти[ТекущийИндекс]);
								
				ТекущийИндекс = ТекущийИндекс + 1;
				
			КонецЦикла;
												
			СтрокаВывода.ТекстЗапросаВыводаОбластей = ПодзапросВыводаМакетаРаскрытия.Текст
				+ТекстПодзапросаВыбораДанных
				+ТекстПоказателейПоВидамИтогов
				+ПолучитьТекстЗапросаВыводаМакетаКолонки(ТаблицаПоказателиТекущейОбласти, 
														СтрГруппаУид.ТзАналитик, 
														СтруктураВыводаТекущейОбласти, 
														СтрГруппаУид.ИмяОбласти, 
														тПараметрыОбластей, 
														ТзПоказателейОбластей, 
														СтруктураПараметров_.КэшУникальныхКодовПоказателей);
			
			СтрокаВывода.ИндексЗапросаПакета        = ИндексЗапросаПакета;
			СтрокаВывода.ПараметрыЗапроса           = лТзПараметровЗапроса;
			СтрокаВывода.ПоказателиОбласти        	= ТаблицаПоказателиТекущейОбласти;
			СтрокаВывода.ОбластьСодержитМакет       = ОбластьСодержитМакет(СтрГруппаУид.ТзАналитик);
			
			Если ТекущееОграничение = КоличествоПоказателей тогда
				Прервать;
			Иначе
				ТекущееОграничение = Мин(ТекущееОграничение + МаксимальноеКоличествоПоказателей, КоличествоПоказателей);
			КонецЕсли;
			
		КонецЦикла;
			
		ИндексЗапросаПакета = ИндексЗапросаПакета + 1;
					
	КонецЦикла;
	
	ТзСтруктураВыводаГруппировок.Сортировать("УидОбласти, Уровень, ИндексЗапросаПакета");
				
	СтруктураПараметров.Вставить("ТзСтруктураВыводаГруппировокКолонок"	,ПоместитьВовременноеХранилище(ТзСтруктураВыводаГруппировок,Новый УникальныйИдентификатор()));
	СтруктураПараметров.Вставить("ПараметрыОбластейКолонки"				,ПоместитьВовременноеХранилище(ТзПараметровОбластей,Новый УникальныйИдентификатор()));		
	СтруктураПараметров.Вставить("ТзПоказателейОбластейКолонки"			,ТзПоказателейОбластей);
		
КонецПроцедуры

Функция ПолучитьКэшГруппОтборовПоказателейРаскрытияКолонки(СтруктураПараметров)
	
	глМассивУидовГруппОтборов   			= СтруктураПараметров.МассивУидовГруппОтборов;
	глТзАналитик                    		= СтруктураПараметров.глТзАналитик;
	КэшУникальныхКодовПоказателей   		= СтруктураПараметров.КэшУникальныхКодовПоказателей;
	КэшПоказателей                  		= СтруктураПараметров.КэшПоказателей;
	тзПоказателейОбластей           		= СтруктураПараметров.тзПоказателейОбластей;
	ОбъектАБ                        		= СтруктураПараметров.ОбъектАБ;
	ПолеТабличногоДокументаМакет    		= СтруктураПараметров.ПолеТабличногоДокументаМакет;
	ТипМакета  								= СтруктураПараметров.ТипОбласти;
	ТипОбласти  							= СтруктураПараметров.ТипОбласти;
	ТзСтруктураВыводаГруппировок     		= СтруктураПараметров.ТзСтруктураВыводаГруппировок;
	ТзПараметровОбластей            		= СтруктураПараметров.ТзПараметровОбластей;
	СтруктураАналитикРаскрытияПоказателей   = СтруктураПараметров.СтруктураАналитикРаскрытияПоказателей;
    
	
	тзОписаниеАналитик = Новый ТаблицаЗначений;
	тзОписаниеАналитик.Колонки.Добавить("ИмяОбласти");
	тзОписаниеАналитик.Колонки.Добавить("ТзАналитик");
	тзОписаниеАналитик.Колонки.Добавить("ТзПоказателей");

	КэшУникальныхКодовПоказателей  = Новый Структура;                        
	
	ОбъектАБ.КэшРаскрываемыхОбластей.Сортировать("Лево,Верх");
	
	Для Каждого РаскрываемаяОбласть Из ОбъектАБ.КэшРаскрываемыхОбластей  Цикл
			
		КэшПоказателей                 = Новый Массив;	
		ОбластьРаскрытия = ПолеТабличногоДокументаМакет.Область(РаскрываемаяОбласть.ИмяОбласти);
		
		Если ОбластьРаскрытия = Неопределено Тогда
			Продолжить;
		КонецЕсли;		
		Если Не ПолучитьТипОбласти(ПолеТабличногоДокументаМакет,РаскрываемаяОбласть.ИмяОбласти) = ТипОбласти Тогда
			Продолжить;
		КонецЕсли;	
				
		//Формируем настройки СКД для вывода оболасти
		СтруктураАналитик = ЗаполнитьИерархиюАналитикРаскрываемойОбласти(ОбластьРаскрытия,ТипОбласти,тзОписаниеАналитик,глТзАналитик,ОбъектАБ,ПолеТабличногоДокументаМакет);
		
		Если СтруктураАналитик = Неопределено Тогда
			 Продолжить;
		КонецЕсли;	
				
		СтруктураАналитик.Сортировать("УровеньГруппировки");
						
		МассивУидовГруппОтборов = Новый Структура;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ТипОбласти",						ТипОбласти);
		СтруктураПараметров.Вставить("СтруктураАналитик",				СтруктураАналитик);
		СтруктураПараметров.Вставить("ОбластьРаскрытия",	 			ОбластьРаскрытия);
		СтруктураПараметров.Вставить("МассивУидовГруппОтборов",			МассивУидовГруппОтборов);                                         
        СтруктураПараметров.Вставить("КэшУникальныхКодовПоказателей",	КэшУникальныхКодовПоказателей);
		СтруктураПараметров.Вставить("тзПоказателейОбластей",			тзПоказателейОбластей);
        СтруктураПараметров.Вставить("ОбъектАБ",						ОбъектАБ);
		СтруктураПараметров.Вставить("ПолеТабличногоДокументаМакет",	ПолеТабличногоДокументаМакет);
        СтруктураПараметров.Вставить("ТзСтруктураВыводаГруппировок",		ТзСтруктураВыводаГруппировок);
		СтруктураПараметров.Вставить("ТзПараметровОбластей",			ТзПараметровОбластей);
		СтруктураПараметров.Вставить("СтруктураАналитикРаскрытияПоказателей",СтруктураАналитикРаскрытияПоказателей);

		
		ПолучитьОписаниеОбластиКолонок(СтруктураПараметров);
		
		глМассивУидовГруппОтборов.Вставить(РаскрываемаяОбласть.ИмяОбласти,МассивУидовГруппОтборов);
		
	КонецЦикла;
		
	ТзПоказателейОбластей.Свернуть("ИмяОбласти,Показатель,ВидОтчета,КлючВерсииОтборов,КодПоляПоказателя");
	
	Возврат  тзОписаниеАналитик;  
	
КонецФункции

Процедура ПолучитьОписаниеОбластиКолонок(СтруктураПараметров)
	
	ТипОбласти                          	= СтруктураПараметров.ТипОбласти;
	СтруктураАналитик 						= СтруктураПараметров.СтруктураАналитик;
	ОбластьРаскрытия  						= СтруктураПараметров.ОбластьРаскрытия;
    КэшУникальныхКодовПоказателей       	= СтруктураПараметров.КэшУникальныхКодовПоказателей;
	МассивУидовГруппОтборов             	= СтруктураПараметров.МассивУидовГруппОтборов;
	ТзПоказателейОбластей			    	= СтруктураПараметров.ТзПоказателейОбластей;
	ОбъектАБ                            	= СтруктураПараметров.ОбъектАБ;
	ПолеТабличногоДокументаМакет        	= СтруктураПараметров.ПолеТабличногоДокументаМакет;
    ТзСвойствПоказателей                	= ПолучитьИзВременногоХранилища(ОбъектАБ.ТзСвойстваПоказателейАдрес);
	ТабОперандов                        	= ПолучитьИзВременногоХранилища(ОбъектАБ.ТабОперандовАдрес);
	СтруктураИменКэшей                  	= ПолучитьИзВременногоХранилища(ОбъектАБ.СтруктураИменКэшейАдрес);
	ТзСтруктураВыводаГруппировок         	= СтруктураПараметров.ТзСтруктураВыводаГруппировок;
	ТзПараметровОбластей	            	= СтруктураПараметров.ТзПараметровОбластей;
	СтруктураАналитикРаскрытияПоказателей 	= СтруктураПараметров.СтруктураАналитикРаскрытияПоказателей;
	СтруктураНемасштабируемых               = ПолучитьИзВременногоХранилища(ОбъектАБ.НемасшатбируемыеАдрес);
	тСоставОбластейРаскрытия                = ПолучитьИзВременногоХранилища(ОбъектАБ.тСоставОбластейРаскрытияАдрес);
	
	
	Если  ОбластьРаскрытия.Верх =0 Тогда	
		 Верх  = 1;
		 Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
		 Лево  = ОбластьРаскрытия.Лево;
		 Право = ОбластьРаскрытия.Право;	 
		 ТипРаскрытия  = "Колонки";
	 Иначе	 	
		 Верх  = ОбластьРаскрытия.Верх;
		 Низ   = ОбластьРаскрытия.Низ;
		 Лево  = 1;
		 Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;;	
		 ТипРаскрытия  = "Строки";
	 КонецЕсли;	
	
	УидОбласти = ОбластьРаскрытия.Имя;
    ТекГруппровка 				= Неопределено;
	флИспользованияМаркера      = "";
	ИндексВыводимойОбласти 		= 0;
	
	СтруктураИспользованныхАналитик    =  Новый Структура;
	КоличествоОдинаковыхИмен           = Новый Структура;
	
	ТзИспользованныхАналитик            = Неопределено;
	
	Для Каждого СтрАналитика Из  СтруктураАналитик Цикл
		
		КоличествоОдинаковыхИмен           = Новый Структура;

		ТзАналитик = ЗначениеИзСтрокиВнутр(ОбъектАБ.КэшРаскрываемыхОбластей.НайтиСтроки(Новый Структура("ИмяОбласти",СтрАналитика.ИмяОбласти))[0].НастройкиАналитикРаскрытия);
		
		
		Если ТзИспользованныхАналитик  = Неопределено Тогда
			ТзИспользованныхАналитик = ТзАналитик.Скопировать();
		КонецЕсли;	
		
		Для Каждого полеАналитики Из ТзАналитик Цикл
			СтруктураИспользованныхАналитик.Вставить(полеАналитики.АналитикаКод);
			Истр = ТзИспользованныхАналитик.Добавить();
			ЗаполнитьЗначенияСвойств(Истр,полеАналитики);
		КонецЦикла;	

		Для Каждого полеАналитики Из ТзАналитик Цикл
			СтруктураИспользованныхАналитик.Вставить(полеАналитики.АналитикаКод);
		КонецЦикла;	
				
		//Иерархическоая структура группировок
		Если СтруктураАналитик.Количество()>1 Тогда		
			Если ИндексВыводимойОбласти<СтруктураАналитик.Количество()-1 Тогда
				ТекущаяОбласть   = ПолеТабличногоДокументаМакет.Область(СтруктураАналитик[ИндексВыводимойОбласти].ИмяОбласти); 
				СледующаяОбласть = ПолеТабличногоДокументаМакет.Область(СтруктураАналитик[ИндексВыводимойОбласти+1].ИмяОбласти); 
				Если  ОбластьРаскрытия.Верх =0 Тогда	
					Верх  = 1;
					Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
					Право = СледующаяОбласть.Лево-1;	 
					Лево  = ТекущаяОбласть.Лево;
					ТипРаскрытия  = "Колонки";
				Иначе	 	
					Низ   = СледующаяОбласть.Верх-1;
					Верх  = ТекущаяОбласть.Верх;
					Лево  = 1;
					Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;;	
					ТипРаскрытия  = "Строки";
				КонецЕсли;		
			Иначе		
				СледующаяОбласть = ПолеТабличногоДокументаМакет.Область(СтруктураАналитик[ИндексВыводимойОбласти].ИмяОбласти);
				Если  ОбластьРаскрытия.Верх =0 Тогда	
					Верх  = 1;
					Низ   = ПолеТабличногоДокументаМакет.ВысотаТаблицы;
					Лево  = СледующаяОбласть.Лево;
					Право = СледующаяОбласть.Право;	 
					ТипРаскрытия  = "Колонки";
				Иначе	 	
					Верх  = СледующаяОбласть.Верх;
					Низ   = СледующаяОбласть.Низ;
					Лево  = 1;
					Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;;	
					ТипРаскрытия  = "Строки";
				КонецЕсли;		
			КонецЕсли;	
		КонецЕсли;	
		
		Если  ОбластьРаскрытия.Верх =0 Тогда
			
			тДокМакетОбласти                = ПолеТабличногоДокументаМакет.ПолучитьОбласть(0,Лево,0,Право);	//Нужен "чистый" макет	
			НстрСтруктуры 					= ТзСтруктураВыводаГруппировок.Добавить();
			НстрСтруктуры.ТипОбласти       	= "Колонки";
			НстрСтруктуры.ИмяОбласти        = СтрАналитика.ИмяОбласти;
			НстрСтруктуры.УидОбласти        = УидОбласти;
			НстрСтруктуры.Уровень        	= ИндексВыводимойОбласти+1;
			НстрСтруктуры.ИменаГруппировок  = СтрАналитика.СтрокаГруппировок;
			НстрСтруктуры.Группировки        = СтрАналитика.Группировки;
			НстрСтруктуры.Макет 		    = тДокМакетОбласти;	
			
		ИначеЕсли  ОбластьРаскрытия.Лево =0 Тогда
	
			тДокМакетОбласти                = ПолеТабличногоДокументаМакет.ПолучитьОбласть(Верх,0,Верх,0);	//Нужен "чистый" макет	
			НстрСтруктуры 					= ТзСтруктураВыводаГруппировок.Добавить();
			НстрСтруктуры.ТипОбласти       	= "Колонки";
			НстрСтруктуры.ИмяОбласти        = СтрАналитика.ИмяОбласти;
			НстрСтруктуры.УидОбласти        = УидОбласти;
			НстрСтруктуры.Уровень        	= ИндексВыводимойОбласти+1;
			НстрСтруктуры.ИменаГруппировок  = СтрАналитика.СтрокаГруппировок;
			НстрСтруктуры.Группировки       = СтрАналитика.Группировки;
			НстрСтруктуры.Макет 		    = тДокМакетОбласти;	
	
		КонецЕсли;
		
		
		//Прорисовка макета группировки по ячейкам
		Для ИндС = Верх По Низ Цикл
			//Проверка на то, что строка макета не принадлежит другой области строк			
			Для ИндК =  Лево По Право Цикл
				
				ТекОбл 			= ПолеТабличногоДокументаМакет.Область(ИндС,ИндК,ИндС,ИндК);
								
				//Проверка на то, что колонка макета не принадлежит другой области колонки
				Если ТипРаскрытия = "Колонки" И ОбластьВходитВТаблицу(ИндС,0,ТипРаскрытия,ОбъектАБ,ПолеТабличногоДокументаМакет,тСоставОбластейРаскрытия,ТекОбл.Имя) Тогда
					
					Если ТипЗнч(ТекОбл.Расшифровка) = Тип("Структура") Тогда
						Если ТекОбл.Расшифровка.Свойство("Ссылка") Тогда	
							
							тПоказатель  =  ТзСвойствПоказателей.Найти(ТекОбл.Расшифровка.Ссылка,"Ссылка");
							СтруктураСвойствПоказателя  = ПолучитьСвойстваПоказателя(ТекОбл.Расшифровка,тПоказатель);
							тУидГруппыОтборов           = СтруктураИменКэшей[ТекОбл.Имя];
							
							МассивУидовГруппОтборов.Вставить("Гр_"+тУидГруппыОтборов,тУидГруппыОтборов);
							КодПоляПоказателя               =  СокрП(тПоказатель.ВидОтчетаКод)+"_"+СокрП(тПоказатель.ПоказательКод)+"_"+тУидГруппыОтборов;
							ОтображатьСуммуВДопВалюте       = ?(ТекОбл.Расшифровка.Свойство("ОтображатьСуммуВДопВалюте"),"ЗначениеВалюта","");	
							Если   ЗначениеЗаполнено(ОтображатьСуммуВДопВалюте)  Тогда
								КодПоляПоказателя = КодПоляПоказателя+"_Вал";
							КонецЕсли;							
							
							КэшУникальныхКодовПоказателей.Вставить(КодПоляПоказателя,СтруктураСвойствПоказателя);	
							нПоказатели 					= тзПоказателейОбластей.Добавить();
							нПоказатели.ИмяОбласти		 	= ОбластьРаскрытия.Имя;
							нПоказатели.Показатель          = ТекОбл.Расшифровка.Ссылка;
							нПоказатели.ВидОтчета           = тПоказатель.ВидОтчета;
							нПоказатели.КлючВерсииОтборов   = тУидГруппыОтборов;	
							нПоказатели.КодПоляПоказателя   = КодПоляПоказателя;
							
							тОбластьМакетаДляВывода = тДокМакетОбласти.Область(ИндС,(ИндК-Лево)+1,ИндС,(ИндК-Лево)+1);
							
							нПоказательОбласти 						=  ОбъектАБ.ПоказателиМакетовРаскрытий.Добавить();
							нПоказательОбласти.ТипМакета   			=  "Колонки";
							нПоказательОбласти.Показатель   		=  ТекОбл.Расшифровка.Ссылка;
							нПоказательОбласти.УидГруппыОтборов   	=  тУидГруппыОтборов;
							нПоказательОбласти.ИмяМакетаКолонок   	=  СтрАналитика.ИмяОбласти;
							нПоказательОбласти.СмещениеХ            =  тОбластьМакетаДляВывода.Лево-1;
							нПоказательОбласти.СмещениеY            =  тОбластьМакетаДляВывода.Верх;
														
						КонецЕсли;
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;	
											
									
				Если ТипЗнч(ТекОбл.Расшифровка) = Тип("Структура") Тогда
					Если ТекОбл.Расшифровка.Свойство("Ссылка") Тогда
						
						тПоказатель  =  ТзСвойствПоказателей.Найти(ТекОбл.Расшифровка.Ссылка,"Ссылка");
						СтруктураСвойствПоказателя  = ПолучитьСвойстваПоказателя(ТекОбл.Расшифровка,тПоказатель);
						тУидГруппыОтборов           = СтруктураИменКэшей[ТекОбл.Имя];

						МассивУидовГруппОтборов.Вставить("Гр_"+тУидГруппыОтборов,тУидГруппыОтборов);
						КодПоляПоказателя               =  СокрП(тПоказатель.ВидОтчетаКод)+"_"+СокрП(тПоказатель.ПоказательКод)+"_"+тУидГруппыОтборов;
						ОтображатьСуммуВДопВалюте       = ?(ТекОбл.Расшифровка.Свойство("ОтображатьСуммуВДопВалюте"),"ЗначениеВалюта","");
						Если   ЗначениеЗаполнено(ОтображатьСуммуВДопВалюте)  Тогда
							КодПоляПоказателя = КодПоляПоказателя+"_Вал";
						КонецЕсли;	
						
						СтруктураПараметровЯчейки = Новый Структура;
						СтруктураПараметровЯчейки.Вставить("ТекОбл",ТекОбл);;
						СтруктураПараметровЯчейки.Вставить("СтруктураИспользованныхАналитик",СтруктураИспользованныхАналитик);
						СтруктураПараметровЯчейки.Вставить("СтруктураСвойствПоказателя",СтруктураСвойствПоказателя);
						СтруктураПараметровЯчейки.Вставить("тПоказатель",тПоказатель);
						СтруктураПараметровЯчейки.Вставить("ТипОбласти",ТипОбласти);
						
						ВыводитьЗначение 				= ПроверитьВыводЗначенияПоПоказателю(СтруктураПараметровЯчейки);
								
						КэшУникальныхКодовПоказателей.Вставить(КодПоляПоказателя,СтруктураСвойствПоказателя);		
												
						нПоказатели 					= тзПоказателейОбластей.Добавить();
						нПоказатели.ИмяОбласти		 	= ОбластьРаскрытия.Имя;
						нПоказатели.Показатель          = ТекОбл.Расшифровка.Ссылка;
						нПоказатели.ВидОтчета           = тПоказатель.ВидОтчета;
						нПоказатели.КлючВерсииОтборов   = тУидГруппыОтборов;	 	
						нПоказатели.КодПоляПоказателя   = КодПоляПоказателя;
						
						ИмяОбластиДляВыводаСУид        =  СокрП(тПоказатель.ВидОтчетаКод)+"_"+СокрП(тПоказатель.ПоказательКод)+"_"+тУидГруппыОтборов+?(ТекОбл.Расшифровка.Свойство("ОтображатьСуммуВДопВалюте"),"_Вал","");
						
						Если ВыводитьЗначение Тогда
							
							Если КоличествоОдинаковыхИмен.Свойство(ИмяОбластиДляВыводаСУид) Тогда	
								ИндексИмени = КоличествоОдинаковыхИмен[ИмяОбластиДляВыводаСУид]+1;
								Если ИндексИмени = 0 Тогда
									ИндексИмени = 1;
								КонецЕсли;	
								КоличествоОдинаковыхИмен[ИмяОбластиДляВыводаСУид] = ИндексИмени;
							Иначе	
								ИндексИмени  = 1;
								КоличествоОдинаковыхИмен.Вставить(ИмяОбластиДляВыводаСУид,1);
							КонецЕсли;
							
						КонецЕсли;
						
						тОбластьМакетаДляВывода = тДокМакетОбласти.Область(ИндС,(ИндК-Лево)+1,ИндС,(ИндК-Лево)+1);
 
						нПоказательОбласти 						=  ОбъектАБ.ПоказателиМакетовРаскрытий.Добавить();
						нПоказательОбласти.ТипМакета   			=  "Колонки";
						нПоказательОбласти.Показатель   		=  ТекОбл.Расшифровка.Ссылка;
						нПоказательОбласти.УидГруппыОтборов   	=  тУидГруппыОтборов;
						нПоказательОбласти.ИмяМакетаКолонок   	=  СтрАналитика.ИмяОбласти;
						нПоказательОбласти.СмещениеХ            =  тОбластьМакетаДляВывода.Лево-1;
                        нПоказательОбласти.СмещениеY            =  тОбластьМакетаДляВывода.Верх;
						
						Если тПоказатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
														
							тОбластьМакетаДляВывода.СодержитЗначение = Истина;
							ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьМакетаДляВывода, 0,,5);
														
							тОбластьМакетаДляВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
							
						ИначеЕсли тПоказатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Строка Тогда	
														
							тОбластьМакетаДляВывода.СодержитЗначение = Истина;
							ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьМакетаДляВывода, "");
														
							тОбластьМакетаДляВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
								
						ИначеЕсли тПоказатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда
							
							тОбластьМакетаДляВывода.СодержитЗначение = Истина;
							ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьМакетаДляВывода, Дата(1,1,1));
							
							тОбластьМакетаДляВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
							
						ИначеЕсли тПоказатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда
							
							тОбластьМакетаДляВывода.СодержитЗначение = Истина;
							ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьМакетаДляВывода, Ложь);
							
							тОбластьМакетаДляВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
												
						Иначе
														
							тОбластьМакетаДляВывода.СодержитЗначение = Истина;
							ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьМакетаДляВывода, Неопределено);
														
							тОбластьМакетаДляВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
							
						КонецЕсли;
						
						тОбластьМакетаДляВывода.Имя 			= ИмяОбластиДляВыводаСУид+"_"+ИндексИмени;
						
						СтруктураРасшифровки                    = Новый Структура;
						СтруктураРасшифровки.Вставить("Ссылка"	,тОбластьМакетаДляВывода.Расшифровка.Ссылка);
						СтруктураРасшифровки.Вставить("УИД"		,тУидГруппыОтборов);
						Если тОбластьМакетаДляВывода.Расшифровка.Свойство("ОтображатьСуммуВдопВалюте") Тогда
							 СтруктураРасшифровки.Вставить("ОтображатьСуммуВдопВалюте"		,Истина);
						КонецЕсли;	
						
						тОбластьМакетаДляВывода.Расшифровка 	= СтруктураРасшифровки;
						
						СтруктураАналитикРаскрытияПоказателей.Вставить(ТекОбл.Имя, ПолучитьМассивИзСтруктуры(СтруктураИспользованныхАналитик));		
						
						Если тПоказатель.НеМасштабируется Тогда
							СтруктураНемасштабируемых.Вставить(тОбластьМакетаДляВывода.Имя);
						КонецЕсли;	

						
					ИначеЕсли ТекОбл.Расшифровка.Свойство("НастройкиАналитикРаскрытия") Тогда	
						
						тОбластьМакетаДляВывода = тДокМакетОбласти.Область(ИндС,(ИндК-Лево)+1,ИндС,(ИндК-Лево)+1);
						тОбластьМакетаДляВывода.Картинка  		= Неопределено;
						тОбластьМакетаДляВывода.Расшифровка     = Неопределено;
				
					ИначеЕсли ТекОбл.Расшифровка.Свойство("ТекстФормулы") Тогда	
						
						тОперанды                                           = ЗначениеИзСтрокиВнутр(ТекОбл.Расшифровка.РасшифровкаФормулы);
						
						Для Каждого тОперанд Из тОперанды Цикл
							тПоказатель  										=  ТзСвойствПоказателей.Найти(тОперанд.Показатель,"Ссылка");		
							ТекУИД                                              =  ТабОперандов.Найти(тОперанд.ИмяВФормуле,"ИмяВФормуле").УидГруппыОтборов;
							ИмяОбластиДляВыводаСУид       						=  СокрП(тПоказатель.ВидОтчетаКод)+"_"+СокрП(тПоказатель.ПоказательКод)+"_"+ТекУИД;
							тОбластьМакетаДляВывода 							= тДокМакетОбласти.Область(ИндС,(ИндК-Лево)+1,ИндС,(ИндК-Лево)+1); 
							ТекстФормулыЯчейки            						= тОбластьМакетаДляВывода.Расшифровка.ТекстФормулы;
							ТекстФормулыПриведенный 							= СтрЗаменить(ТекстФормулыЯчейки,"["+тОперанд.ИмяВФормуле+"]","КэшОперандов."+ИмяОбластиДляВыводаСУид);
							тОбластьМакетаДляВывода.Расшифровка				 	= Новый Структура("ТекстФормулы",ТекстФормулыПриведенный);
														
							тОбластьМакетаДляВывода.СодержитЗначение = Истина;
							ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьМакетаДляВывода,0,,5);
														
							тОбластьМакетаДляВывода.ГоризонтальноеПоложение 	= ГоризонтальноеПоложение.Право;		
							
							МассивУидовГруппОтборов.Вставить("Гр_"+ТекУИД,ТекУИД);	
																					
							КодПоляПоказателя               = СокрП(тПоказатель.ВидОтчетаКод)+"_"+СокрП(тПоказатель.ПоказательКод)+"_"+ТекУИД;
                            СтруктураСвойствПоказателя  	= ПолучитьСвойстваПоказателя(ТекОбл.Расшифровка,тПоказатель);
							
							КэшУникальныхКодовПоказателей.Вставить(КодПоляПоказателя,СтруктураСвойствПоказателя);

							нПоказатели 					= тзПоказателейОбластей.Добавить();
							нПоказатели.ИмяОбласти		 	= ОбластьРаскрытия.Имя;
							нПоказатели.Показатель          = тПоказатель.Ссылка;
							нПоказатели.ВидОтчета           = тПоказатель.ВидОтчета;
							нПоказатели.КлючВерсииОтборов   = ТекУИД;
							нПоказатели.КодПоляПоказателя   = КодПоляПоказателя;

							Если НЕ КоличествоОдинаковыхИмен.Свойство(ИмяОбластиДляВыводаСУид) Тогда // не было такого показателя
								КоличествоОдинаковыхИмен.Вставить(ИмяОбластиДляВыводаСУид,-1);
							КонецЕсли;
								
						КонецЦикла;	
						
						нПоказательОбласти 						=  ОбъектАБ.ПоказателиМакетовРаскрытий.Добавить();
						нПоказательОбласти.ТипМакета   			=  "Колонки";
						нПоказательОбласти.Формула		   		=  ТекОбл.Имя;
						нПоказательОбласти.УидГруппыОтборов   	=  тУидГруппыОтборов;
						нПоказательОбласти.ИмяМакетаКолонок   	=  СтрАналитика.ИмяОбласти;
						нПоказательОбласти.СмещениеХ            =  тОбластьМакетаДляВывода.Лево-1;
						нПоказательОбласти.СмещениеY            =  тОбластьМакетаДляВывода.Верх;
							
						СтруктураАналитикРаскрытияПоказателей.Вставить(ТекОбл.Имя, ПолучитьМассивИзСтруктуры(СтруктураИспользованныхАналитик));

						тОбластьМакетаДляВывода.Расшифровка.Вставить("УидФормулы",ТекОбл.Имя);

						
					КонецЕсли;
					
				ИначеЕсли СтрНайти(ТекОбл.Текст,"[")>0 И СтрНайти(ТекОбл.Текст,"]")>0  Тогда		
					
					ТекОбластьТекст   			= ТекОбл.Текст;					
					ТзПараметровВыражения 		= ОбработатьСтрокуШаблонаЗаголовкаАналитики(ТекОбластьТекст,ТзИспользованныхАналитик);
					тОбластьМакетаДляВывода 	= тДокМакетОбласти.Область(ИндС,(ИндК-Лево)+1,ИндС,(ИндК-Лево)+1);
					тОбластьМакетаДляВывода.Имя = "Пар_"+тОбластьМакетаДляВывода.Имя;
					ВыражениеВМакете            = "";
					
					Для Каждого стрПараметр Из ТзПараметровВыражения Цикл		
							
						Если стрПараметр.ТипОбласти = "Параметр" Тогда	
							
														ПозицияПервойТочки  = СтрНайти(стрПараметр.ТекстОбласти,".");
							Если ПозицияПервойТочки>0 Тогда
								ПутьКДанным 			= Лев(стрПараметр.ТекстОбласти,ПозицияПервойТочки-1);
								ВыражениеПоля      	= Сред(стрПараметр.ТекстОбласти,ПозицияПервойТочки+1,СтрДлина(стрПараметр.ТекстОбласти));
							Иначе	
								ПутьКДанным 		= стрПараметр.ТекстОбласти;
								ВыражениеПоля      = "";
							КонецЕсли;	
							
							ИмяПоляВзапросе                                     =  СтрЗАменить(стрПараметр.ТекстОбласти,".","");
							ТекПоле                                             =  ТзПараметровОбластей.НайтиСтроки(Новый Структура("ИмяПоляВзапросе,ИмяМакета",ИмяПоляВЗапросе,СтрАналитика.ИмяОбласти));
							
							Если  ТекПоле.Количество() = 0 Тогда
								нТзПараметровОбластей 								= ТзПараметровОбластей.Добавить();
								ИмяОбластейВмакете 									= Новый Массив;
							Иначе	
								нТзПараметровОбластей 								= ТекПоле[0];
								ИмяОбластейВмакете 									= нТзПараметровОбластей.ИмяОбластиВмакете;
							КонецЕсли;	
							
							нТзПараметровОбластей.ИмяВМакете    				= стрПараметр.ТекстОбласти;
							
							нТзПараметровОбластей.ВыражениеПоля   				= ВыражениеПоля;
							нТзПараметровОбластей.ПутьКДанным   				= ПутьКДанным;
							нТзПараметровОбластей.ТипПараметра  				= "Группировка";
							нТзПараметровОбластей.ИмяПоляВзапросе    			= СтрЗАменить(стрПараметр.ТекстОбласти,".","");
							
							Если ИмяОбластейВмакете.Найти(тОбластьМакетаДляВывода.Имя) = Неопределено Тогда
								ИмяОбластейВмакете.Добавить(тОбластьМакетаДляВывода.Имя);
							КонецЕсли;
							
							нТзПараметровОбластей.ИмяОбластиВмакете             = ИмяОбластейВмакете;
							нТзПараметровОбластей.ИмяМакета             		= СтрАналитика.ИмяОбласти;
							нТзПараметровОбластей.ВыбранВМакете   				= Истина;
							
							ВыражениеВМакете = ВыражениеВМакете+"["+стрПараметр.ТекстОбласти+"]";
							
						ИначеЕсли СтрНайти(стрПараметр.ТекстОбласти,"Параметр") Тогда  //Параметр вида отчета
							
						Иначе	
							ВыражениеВМакете = ВыражениеВМакете+стрПараметр.ТекстОбласти;	
						КонецЕсли;			
					КонецЦикла;		
					
					тОбластьМакетаДляВывода.СодержитЗначение = Ложь;
					тОбластьМакетаДляВывода.Текст = ВыражениеВМакете;
															
				КонецЕсли;		
			КонецЦикла;	
		КонецЦикла;	
		
		ИндексВыводимойОбласти = ИндексВыводимойОбласти+1;
		
		НстрСтруктуры.КоличествоОдинаковыхИмен = КоличествоОдинаковыхИмен;	
		
	КонецЦикла;
		
КонецПроцедуры	

Процедура ПолучитьТекстМакетаСгруппировкамиКолонки(ТекстИтоговогоЗапроса,глТзАналитик,ТзПараметровОбластей,ПоказателиКолонки,ТзПараметровЗапроса)
	
	ТзСвойстваПоказателей  =  ПолучитьСвойстваПоказателей(ПоказателиКолонки.ВыгрузитьКолонку("Показатель"));
	
	СтрокаПолейЗапроса 		= "";
	ТекстАналитик = "";		
		
	ПоказателиСумма 					= Новый Массив;
	ПоказателиМаксимум 					= Новый Массив;
	ПоказателиМинимум 					= Новый Массив;
	ПоказателиБезИтога 					= Новый Массив;
	ПоказателиСреднее                   = Новый Массив;
	ПоказателиМаксимумНечисловые 		= Новый Массив;
	ПоказателиМинимумНечисловые 		= Новый Массив;
	ПоказателиБезИтогаНечисловые		= Новый Массив;
	
	ЕстьВалютные 		= ТзСвойстваПоказателей.НайтиСтроки(Новый Структура("Валютный",Истина)).Количество()>0;
	ЕстьНеЧисловые      = ТзСвойстваПоказателей.НайтиСтроки(Новый Структура("ТипЗначения",Перечисления.ТипыЗначенийПоказателейОтчетов.Число)).Количество()<>ТзСвойстваПоказателей.Количество();
	
	Для Каждого Пок Из ТзСвойстваПоказателей Цикл
		
		Если Пок.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			Если Пок.ВидИтога = Перечисления.ВидыИтоговПоказателя.НеРассчитывается Тогда
				ПоказателиБезИтога.Добавить(Пок.Ссылка);
			ИначеЕсли Пок.ВидИтога = Перечисления.ВидыИтоговПоказателя.Максимум Тогда
				ПоказателиМаксимум.Добавить(Пок.Ссылка);
			ИначеЕсли Пок.ВидИтога = Перечисления.ВидыИтоговПоказателя.Минимум Тогда
				ПоказателиМинимум.Добавить(Пок.Ссылка);
			ИначеЕсли Не ЗначениеЗаполнено(Пок.ВидИтога) ИЛИ Пок.ВидИтога = Перечисления.ВидыИтоговПоказателя.Сумма Тогда 	
				ПоказателиСумма.Добавить(Пок.Ссылка);
			ИначеЕсли Пок.ВидИтога = Перечисления.ВидыИтоговПоказателя.Среднее Тогда	
				ПоказателиСреднее.Добавить(Пок.Ссылка);
			КонецЕсли;				
		Иначе	
			Если Пок.ВидИтога = Перечисления.ВидыИтоговПоказателя.НеРассчитывается Тогда
				ПоказателиБезИтогаНечисловые.Добавить(Пок.Ссылка);
			ИначеЕсли Пок.ВидИтога = Перечисления.ВидыИтоговПоказателя.Максимум Тогда
				ПоказателиМаксимумНечисловые.Добавить(Пок.Ссылка);
			ИначеЕсли Пок.ВидИтога = Перечисления.ВидыИтоговПоказателя.Минимум Тогда
				ПоказателиМинимумНечисловые.Добавить(Пок.Ссылка);
			ИначеЕсли (Не ЗначениеЗаполнено(Пок.ВидИтога) И  Пок.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Строка) Тогда 	
				ПоказателиБезИтогаНечисловые.Добавить(Пок.Ссылка);
			ИначеЕсли (Не ЗначениеЗаполнено(Пок.ВидИтога) И  (Пок.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево ИЛИ Пок.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата)) Тогда 	
				ПоказателиМаксимумНечисловые.Добавить(Пок.Ссылка);
			КонецЕсли;		
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстВыбираемыхПолей 				= "";
	КоличествоВыбираемыхПолей 			= 0;
	КоличествоВыбираемыхПолейНечисловые = 0;
	ТекстВыбираемыхПолейВалютные        = "";
	ТекстВыбираемыхПолейНечисловые      = "";

	
	Если ПоказателиСумма.Количество()>0 Тогда	
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|ИНАЧЕ ВЫБОР КОГДА  втДанныеПредварительные.Показатель В (&ПоказателиСуммаСинтетика_Колонки) 		ТОГДА СУММА(втДанныеПредварительные.Значение)";	
		Если  ЕстьВалютные Тогда
			ТекстВыбираемыхПолейВалютные = ТекстВыбираемыхПолейВалютные+"
			|ИНАЧЕ ВЫБОР КОГДА  втДанныеПредварительные.Показатель В (&ПоказателиСуммаСинтетика_Колонки) 		ТОГДА СУММА(втДанныеПредварительные.ЗначениеВалюта)";
		КонецЕсли;	
		КоличествоВыбираемыхПолей = КоличествоВыбираемыхПолей+1;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "ПоказателиСуммаСинтетика_Колонки";
		Нотбор.ТипОтбора 		= "В списке";
		Нотбор.ЗначениеОтбора	= ПоказателиСумма;	
	КонецЕсли;	
	Если ПоказателиМаксимум.Количество()>0 Тогда	
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|ИНАЧЕ ВЫБОР КОГДА  втДанныеПредварительные.Показатель В (&ПоказателиМаксимумСинтетика_Колонки) 	ТОГДА  МАКСИМУМ(втДанныеПредварительные.Значение)";	
		Если  ЕстьВалютные Тогда
			ТекстВыбираемыхПолейВалютные = ТекстВыбираемыхПолейВалютные+"
			|ИНАЧЕ ВЫБОР КОГДА  втДанныеПредварительные.Показатель В (&ПоказателиСуммаСинтетика_Колонки) 		ТОГДА МАКСИМУМ(втДанныеПредварительные.ЗначениеВалюта)";
		КонецЕсли;	
		КоличествоВыбираемыхПолей = КоличествоВыбираемыхПолей+1;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "ПоказателиМаксимумСинтетика_Колонки";
		Нотбор.ТипОтбора 		= "В списке";
		Нотбор.ЗначениеОтбора	=  ПоказателиМаксимум;	
	КонецЕсли;	
	Если ПоказателиМинимум.Количество()>0 Тогда	
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|ИНАЧЕ ВЫБОР КОГДА  втДанныеПредварительные.Показатель В (&ПоказателиМинимумСинтетика_Колонки) 	ТОГДА  МИНИМУМ(втДанныеПредварительные.Значение)";	
		Если  ЕстьВалютные Тогда
			ТекстВыбираемыхПолейВалютные = ТекстВыбираемыхПолейВалютные+"
			|ИНАЧЕ ВЫБОР КОГДА  втДанныеПредварительные.Показатель В (&ПоказателиСуммаСинтетика_Колонки) 		ТОГДА МИНИМУМ(втДанныеПредварительные.ЗначениеВалюта)";
		КонецЕсли;	
		КоличествоВыбираемыхПолей = КоличествоВыбираемыхПолей+1;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "ПоказателиМинимумСинтетика_Колонки";
		Нотбор.ТипОтбора 		= "В списке";
		Нотбор.ЗначениеОтбора	=  ПоказателиМинимум;
	КонецЕсли;	
	Если ПоказателиБезИтога.Количество()>0 Тогда	
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|ИНАЧЕ ВЫБОР КОГДА  втДанныеПредварительные.Показатель В (&ПоказателиБезИтога_Колонки) 			ТОГДА  NULL";	
		Если  ЕстьВалютные Тогда
			ТекстВыбираемыхПолейВалютные = ТекстВыбираемыхПолейВалютные+"
			|ИНАЧЕ ВЫБОР КОГДА  втДанныеПредварительные.Показатель В (&ПоказателиСуммаСинтетика_Колонки) ТОГДА  NULL";
		КонецЕсли;	
		КоличествоВыбираемыхПолей = КоличествоВыбираемыхПолей+1;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "ПоказателиБезИтога_Колонки";
		Нотбор.ТипОтбора 		= "В списке";
		Нотбор.ЗначениеОтбора	=  ПоказателиБезИтога;
	КонецЕсли;	
	Если ПоказателиСреднее.Количество()>0 Тогда	
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|ИНАЧЕ ВЫБОР КОГДА  втДанныеПредварительные.Показатель В (&ПоказателиСреднееСинтетика_Колонки) 	ТОГДА  СРЕДНЕЕ(втДанныеПредварительные.Значение)";	
		Если  ЕстьВалютные Тогда
			ТекстВыбираемыхПолейВалютные = ТекстВыбираемыхПолейВалютные+"
			|ИНАЧЕ ВЫБОР КОГДА  втДанныеПредварительные.Показатель В (&ПоказателиСуммаСинтетика_Колонки) ТОГДА СРЕДНЕЕ(втДанныеПредварительные.ЗначениеВалюта)";
		КонецЕсли;	
		КоличествоВыбираемыхПолей = КоличествоВыбираемыхПолей+1;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "ПоказателиСреднееСинтетика_Колонки";
		Нотбор.ТипОтбора 		= "В списке";
		Нотбор.ЗначениеОтбора	=  ПоказателиСреднее;	
	КонецЕсли;		
	Если ПоказателиБезИтогаНечисловые.Количество()>0 Тогда	
		ТекстВыбираемыхПолейНечисловые = ТекстВыбираемыхПолейНечисловые+"
		|ИНАЧЕ ВЫБОР КОГДА  втДанныеПредварительные.Показатель В (&ПоказателиБезИтогаНечисловые_Колонки) 	ТОГДА  МАКСИМУМ(втДанныеПредварительные.ЗначениеНеЧисло)";	
		КоличествоВыбираемыхПолейНечисловые = КоличествоВыбираемыхПолейНечисловые+1;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "ПоказателиБезИтогаНечисловые_Колонки";
		Нотбор.ТипОтбора 		= "В списке";
		Нотбор.ЗначениеОтбора	=  ПоказателиБезИтогаНечисловые;
	КонецЕсли;
	Если ПоказателиМаксимумНечисловые.Количество()>0 Тогда	
		ТекстВыбираемыхПолейНечисловые = ТекстВыбираемыхПолейНечисловые+"
		|ИНАЧЕ ВЫБОР КОГДА  втДанныеПредварительные.Показатель В (&ПоказателиМаксимумНечисловые_Колонки) 	ТОГДА   МАКСИМУМ(втДанныеПредварительные.ЗначениеНеЧисло)";	
		КоличествоВыбираемыхПолейНечисловые = КоличествоВыбираемыхПолейНечисловые+1;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "ПоказателиМаксимумНечисловые_Колонки";
		Нотбор.ТипОтбора 		= "В списке";
		Нотбор.ЗначениеОтбора	=  ПоказателиМаксимумНечисловые;	
	КонецЕсли;
    Если ПоказателиМинимумНечисловые.Количество()>0 Тогда	
		ТекстВыбираемыхПолейНечисловые = ТекстВыбираемыхПолейНечисловые+"
		|ИНАЧЕ ВЫБОР КОГДА  втДанныеПредварительные.Показатель В (&ПоказателиМинимумНечисловые_Колонки) 	ТОГДА   МИНИМУМ(втДанныеПредварительные.ЗначениеНеЧисло)";	
		КоличествоВыбираемыхПолейНечисловые = КоличествоВыбираемыхПолейНечисловые+1;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "ПоказателиМинимумНечисловые_Колонки";
		Нотбор.ТипОтбора 		= "В списке";
		Нотбор.ЗначениеОтбора	=  ПоказателиМинимумНечисловые;
	КонецЕсли;

	
	ТекстОкончанияВыборов = "";
	Для Инд = 1 По КоличествоВыбираемыхПолей Цикл
		ТекстОкончанияВыборов = ТекстОкончанияВыборов+"
		|КОНЕЦ";
	КонецЦикла;	
		
	ТекстОкончанияВыборовНечисловые = "";
	Для Инд = 1 По КоличествоВыбираемыхПолейНечисловые Цикл
		ТекстОкончанияВыборовНечисловые = ТекстОкончанияВыборовНечисловые+"
		|КОНЕЦ";
	КонецЦикла;	

	Если КоличествоВыбираемыхПолей = 1 Тогда
		ТекстТогда = СтрНайти(ТекстВыбираемыхПолей,"ТОГДА");
		ТекстВыбираемыхПолей = Прав(ТекстВыбираемыхПолей,СтрДлина(ТекстВыбираемыхПолей)-(ТекстТогда+4))+"
		| КАК Значение";
		
		Если  ЕстьВалютные Тогда
			ТекстТогдаВал = СтрНайти(ТекстВыбираемыхПолейВалютные,"ТОГДА");
			ТекстВыбираемыхПолейВалютные = Прав(ТекстВыбираемыхПолейВалютные,СтрДлина(ТекстВыбираемыхПолейВалютные)-(ТекстТогдаВал+4))+"
			| КАК ЗначениеВалюта";
		КонецЕсли;
	ИначеЕсли  КоличествоВыбираемыхПолей =0 Тогда
		ТекстВыбираемыхПолей = " 0 КАК Значение";
		Если  ЕстьВалютные Тогда
			ТекстВыбираемыхПолейВалютные = Прав(ТекстВыбираемыхПолейВалютные,СтрДлина(ТекстВыбираемыхПолейВалютные)-6)+" 
			|"+ТекстОкончанияВыборов+"
			| КАК ЗначениеВалюта";
		КонецЕсли;
	Иначе	
		ТекстВыбираемыхПолей = Прав(ТекстВыбираемыхПолей,СтрДлина(ТекстВыбираемыхПолей)-6)+" 
		|"+ТекстОкончанияВыборов+"
		| КАК Значение";
		Если  ЕстьВалютные Тогда
			ТекстВыбираемыхПолейВалютные = Прав(ТекстВыбираемыхПолейВалютные,СтрДлина(ТекстВыбираемыхПолейВалютные)-6)+" 
			|"+ТекстОкончанияВыборов+"
			| КАК ЗначениеВалюта";
		КонецЕсли;
	КонецЕсли;
	
	//Нечисловые
	Если КоличествоВыбираемыхПолейНечисловые = 1 Тогда
		ТекстТогда = СтрНайти(ТекстВыбираемыхПолейНечисловые,"ТОГДА");
		ТекстВыбираемыхПолейНечисловые = Прав(ТекстВыбираемыхПолейНечисловые,СтрДлина(ТекстВыбираемыхПолейНечисловые)-(ТекстТогда+4))+"
		| КАК ЗначениеНеЧисло";
	ИначеЕсли  КоличествоВыбираемыхПолейНечисловые = 0 Тогда
		ТекстВыбираемыхПолейНечисловые = " """" КАК ЗначениеНеЧисло";
	Иначе	
		ТекстВыбираемыхПолейНечисловые = Прав(ТекстВыбираемыхПолейНечисловые,СтрДлина(ТекстВыбираемыхПолейНечисловые)-6)+" 
		|"+ТекстОкончанияВыборовНечисловые+"
		| КАК ЗначениеНеЧисло";
	КонецЕсли;

	ТзПараметровОбластей_ = ТзПараметровОбластей.Скопировать(,"ИмяПоляВЗапросе");
	ТзПараметровОбластей_.Свернуть("ИмяПоляВЗапросе");
	
	Для Каждого СтрПараметр Из ТзПараметровОбластей_ Цикл	
		ТекстАналитик = ТекстАналитик+"
		|втДанныеПредварительные."+СтрПараметр.ИмяПоляВзапросе+",";	
	КонецЦикла;	
	
	Для Каждого РасшифровкаАналитки Из глТзАналитик Цикл
		ТекстАналитик = ТекстАналитик+"
		|втДанныеПредварительные."+РасшифровкаАналитки.АналитикаКод+",";								
	КонецЦикла;

	Если  ЕстьВалютные Тогда
		ТекстВыбираемыхПолейВалютные = ТекстВыбираемыхПолейВалютные+",";
	КонецЕсли;

	ТекстИтоговогоЗапроса =ТекстИтоговогоЗапроса+"
	|;
	|///////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|
	| "+ТекстАналитик+"
	| "+ТекстВыбираемыхПолей+",
	| "+ТекстВыбираемыхПолейНечисловые+",
	| "+ТекстВыбираемыхПолейВалютные+"
	|втДанныеПредварительные.Уид_Области,
	|втДанныеПредварительные.ИмяОбластиДляВывода
	|ПОМЕСТИТЬ втДанныеПредварительные_Колонки_
	|ИЗ
	| втДанныеПредварительные_Колонки КАК втДанныеПредварительные
	| СГРУППИРОВАТЬ ПО "+ТекстАналитик+ "втДанныеПредварительные.Уид_Области,втДанныеПредварительные.Показатель
	|,втДанныеПредварительные.ИмяОбластиДляВывода 
	|";		
	
КонецПроцедуры	

Процедура ПолучитьТекстМакетаСгруппировкамиКолонкиСКД(ТекстИтоговогоЗапроса,глТзАналитик,ТзПараметровОбластей,ПоказателиКолонки,ТзПараметровЗапроса)
	
	ТзСвойстваПоказателей  =  ПолучитьСвойстваПоказателей(ПоказателиКолонки.ВыгрузитьКолонку("Показатель"));
	
	СтрокаПолейЗапроса 		= "";
	ТекстАналитик = "";		
		
	ПоказателиСумма 					= Новый Массив;
	ПоказателиМаксимум 					= Новый Массив;
	ПоказателиМинимум 					= Новый Массив;
	ПоказателиБезИтога 					= Новый Массив;
	ПоказателиСреднее                   = Новый Массив;
	ПоказателиМаксимумНечисловые 		= Новый Массив;
	ПоказателиМинимумНечисловые 		= Новый Массив;
	ПоказателиБезИтогаНечисловые		= Новый Массив;
	
	ЕстьВалютные 		= ТзСвойстваПоказателей.НайтиСтроки(Новый Структура("Валютный",Истина)).Количество()>0;
	ЕстьНеЧисловые      = ТзСвойстваПоказателей.НайтиСтроки(Новый Структура("ТипЗначения",Перечисления.ТипыЗначенийПоказателейОтчетов.Число)).Количество()<>ТзСвойстваПоказателей.Количество();
	
		
	ТекстВыбираемыхПолей 				= "";
	КоличествоВыбираемыхПолей 			= 0;
	КоличествоВыбираемыхПолейНечисловые = 0;
	ТекстВыбираемыхПолейВалютные        = "";
	ТекстВыбираемыхПолейНечисловые      = "";

	
	
	
	ТекстОкончанияВыборов = "";
	Для Инд = 1 По КоличествоВыбираемыхПолей Цикл
		ТекстОкончанияВыборов = ТекстОкончанияВыборов+"
		|КОНЕЦ";
	КонецЦикла;	
		
	ТекстОкончанияВыборовНечисловые = "";
	Для Инд = 1 По КоличествоВыбираемыхПолейНечисловые Цикл
		ТекстОкончанияВыборовНечисловые = ТекстОкончанияВыборовНечисловые+"
		|КОНЕЦ";
	КонецЦикла;	
	
	//Нечисловые
	Если КоличествоВыбираемыхПолейНечисловые = 1 Тогда
		ТекстТогда = СтрНайти(ТекстВыбираемыхПолейНечисловые,"ТОГДА");
		ТекстВыбираемыхПолейНечисловые = Прав(ТекстВыбираемыхПолейНечисловые,СтрДлина(ТекстВыбираемыхПолейНечисловые)-(ТекстТогда+4))+"
		| КАК ЗначениеНеЧисло";
	ИначеЕсли  КоличествоВыбираемыхПолейНечисловые = 0 Тогда
		ТекстВыбираемыхПолейНечисловые = " """" КАК ЗначениеНеЧисло";
	Иначе	
		ТекстВыбираемыхПолейНечисловые = Прав(ТекстВыбираемыхПолейНечисловые,СтрДлина(ТекстВыбираемыхПолейНечисловые)-6)+" 
		|"+ТекстОкончанияВыборовНечисловые+"
		| КАК ЗначениеНеЧисло";
	КонецЕсли;

	ТзПараметровОбластей_ = ТзПараметровОбластей.Скопировать(,"ИмяПоляВЗапросе");
	ТзПараметровОбластей_.Свернуть("ИмяПоляВЗапросе");
	
	Для Каждого СтрПараметр Из ТзПараметровОбластей_ Цикл	
		ТекстАналитик = ТекстАналитик+"
		|втДанныеПредварительные."+СтрПараметр.ИмяПоляВзапросе+",";	
	КонецЦикла;	
	
	Для Каждого РасшифровкаАналитки Из глТзАналитик Цикл
		ТекстАналитик = ТекстАналитик+"
		|втДанныеПредварительные."+РасшифровкаАналитки.АналитикаКод+",";								
	КонецЦикла;

	
	ТекстИтоговогоЗапроса =ТекстИтоговогоЗапроса+"
	|;
	|///////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|
	| "+ТекстАналитик+"
	|втДанныеПредварительные.Значение,
	|втДанныеПредварительные.ЗначениеНеЧисло,
	|втДанныеПредварительные.ЗначениеВалюта,
	|втДанныеПредварительные.Уид_Области,
	|втДанныеПредварительные.ИмяОбластиДляВывода
	|ПОМЕСТИТЬ втДанныеПредварительные_Колонки_
	|ИЗ
	| втДанныеПредварительные_Колонки КАК втДанныеПредварительные
	|";		
	
КонецПроцедуры	

Функция ПолучитьТекстЗапросаВыводаМакетаКолонкиСКД(ПоказателиТекущегоЗапроса,ТзАналитик,СтруктураВыводаТекущейОбласти,Уид_Области,ТзПараметровОбластей,КэшУникальныхКодовПоказателей)
	
	ТекстИтоговогоЗапроса 	= "";
	СтрокаПолейЗапросаИтог  = "";
	СтрокаПолейЗапроса	    = "";
	СтрокаПолейЗапросаСгруппированные  = "";
	
	ПоказателиТекущегоЗапросаКлючиКодов = ПоказателиТекущегоЗапроса.Скопировать();
	ПоказателиТекущегоЗапросаКлючиКодов.Свернуть("КодПоляПоказателя");
	
	Для Каждого   тПоказательЗапроса Из   ПоказателиТекущегоЗапросаКлючиКодов  Цикл	
		
		 СтрПолеКлюч 		= тПоказательЗапроса.КодПоляПоказателя;
		 СтрПолеЗначение    = КэшУникальныхКодовПоказателей[СтрПолеКлюч];
		 
		 НачалоКодаПоказателя  	= СтрНайти(СтрПолеКлюч,"_MES_");
		 КодБезПрефикса         = Прав(СтрПолеКлюч,СтрДлина(СтрПолеКлюч)-НачалоКодаПоказателя-4);
		 КодБезПрефикса         = СтрЗаменить(КодБезПрефикса,"_UID_","");
		 Если СтрПолеЗначение.Свойство("ЗначениеВалюта") Тогда
			 КодБезПрефикса         = СтрЗаменить(КодБезПрефикса,"_Вал","");
			 СтрокаПолейЗапроса 	= СтрокаПолейЗапроса +"
			 |	ВЫБОР КОГДА  втДанныеПредварительные.ИмяОбластиДляВывода = """+СтрЗаменить(СтрПолеКлюч,"_Вал","") +""" ТОГДА втДанныеПредварительные.ЗначениеВалюта ИНАЧЕ NULL КОНЕЦ  КАК "+СтрЗаменить(СтрПолеКлюч,"_MES","")+",";	
		 ИначеЕсли СтрПолеЗначение.ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда	 
			 СтрокаПолейЗапроса 	= СтрокаПолейЗапроса +"
			 |	ВЫБОР КОГДА   втДанныеПредварительные.ИмяОбластиДляВывода = """+СтрПолеКлюч +""" ТОГДА втДанныеПредварительные.Значение ИНАЧЕ NULL КОНЕЦ  КАК "+СтрПолеКлюч+",";			 
		 Иначе 
			 СтрокаПолейЗапроса 	= СтрокаПолейЗапроса +"
			 |	ВЫБОР КОГДА  втДанныеПредварительные.ИмяОбластиДляВывода = """+СтрПолеКлюч +""" ТОГДА втДанныеПредварительные.ЗначениеНеЧисло ИНАЧЕ NULL КОНЕЦ  КАК "+СтрПолеКлюч+",";			 
		 КонецЕсли; 	 
		 
		 Если СтрПолеЗначение.ПоказательВидИтога = Перечисления.ВидыИтоговПоказателя.Максимум Тогда
			 СтрокаПолейЗапросаИтог 	= СтрокаПолейЗапросаИтог +"
			 |	МАКСИМУМ("+СтрПолеКлюч+"),";		 
		 ИначеЕсли СтрПолеЗначение.ПоказательВидИтога = Перечисления.ВидыИтоговПоказателя.Минимум Тогда
			 СтрокаПолейЗапросаИтог 	= СтрокаПолейЗапросаИтог +"
			 |	МИНИМУМ("+СтрПолеКлюч+") ,";			 
		 ИначеЕсли СтрПолеЗначение.ПоказательВидИтога = Перечисления.ВидыИтоговПоказателя.НеРассчитывается Тогда
			 СтрокаПолейЗапросаИтог 	= СтрокаПолейЗапросаИтог +"
			 |	МАКСИМУМ("+СтрПолеКлюч+") ,";		 
		 ИначеЕсли НЕ СтрПолеЗначение.ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			 СтрокаПолейЗапросаИтог 	= СтрокаПолейЗапросаИтог +"
			 |	МАКСИМУМ("+СтрПолеКлюч+") ,";				 
		 Иначе 			
			 СтрокаПолейЗапросаИтог 	= СтрокаПолейЗапросаИтог +"
			 |	СУММА("+СтрПолеКлюч+") ,";		 			 
		 КонецЕсли;
		 
		 Если СтрПолеЗначение.ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			  СтрокаПолейЗапросаСгруппированные = СтрокаПолейЗапросаСгруппированные+"
			 |СУММА(втДанныеПредварительные."+СтрПолеКлюч+") КАК "+СтрПолеКлюч+" ,";
		 Иначе
			 СтрокаПолейЗапросаСгруппированные = СтрокаПолейЗапросаСгруппированные+"
			 |МАКСИМУМ(втДанныеПредварительные."+СтрПолеКлюч+") КАК "+СтрПолеКлюч+" ,";
		 КонецЕсли;	 
		 
	 КонецЦикла;	
	 
	 ТекстАналитик = "";		
	 ТекстИтогов   = "";
	 ТекстСортировок = "";
	 тИндекс = 1;
	 СтруктураИтогов = Новый Структура;
	 ВсегоГруппировок =  СтруктураВыводаТекущейОбласти.Количество();
	 
	 Для Каждого УровеньГруппировки Из СтруктураВыводаТекущейОбласти Цикл
		
		Для Каждого РасшифровкаАналитки Из УровеньГруппировки.Группировки Цикл
			ТекстАналитик = ТекстАналитик+"
			|	втДанныеПредварительные."+РасшифровкаАналитки.Ключ+",";						
			
			Если РасшифровкаАналитки.Ключ = "ПериодОтчета" И  УровеньГруппировки.КэшНастроекПериодов.Количество() = 1 Тогда
				тСвойстваПериодов = УровеньГруппировки.КэшНастроекПериодов[0];
				Если тСвойстваПериодов.ВыводитьИтогГод
					ИЛИ  тСвойстваПериодов.ВыводитьИтогПолугодие
					ИЛИ  тСвойстваПериодов.ВыводитьИтогКвартал
					ИЛИ  тСвойстваПериодов.ВыводитьИтогМесяц
					ИЛИ  тСвойстваПериодов.ВыводитьИтогДекада
					ИЛИ  тСвойстваПериодов.ВыводитьИтогНеделя
					ИЛИ  тСвойстваПериодов.ВыводитьИтогДень Тогда
					ТекстИтогов = ТекстИтогов+"
					|	,"+РасшифровкаАналитки.Ключ +" ИЕРАРХИЯ ";
				Иначе
					ТекстИтогов = ТекстИтогов+"
					|	,"+РасшифровкаАналитки.Ключ ;	
				КонецЕсли;	
			Иначе	
				ТекстИтогов = ТекстИтогов+"
				|	,"+РасшифровкаАналитки.Ключ ;	
				
			КонецЕсли;	
			СтруктураИтогов.Вставить(РасшифровкаАналитки.Ключ);		
			
		КонецЦикла;
		
		тИндекс = тИндекс+1;
			
	КонецЦикла;
	
	Для Каждого СтрПараметр Из ТзПараметровОбластей Цикл			
		Если СтрПараметр.ВыбранВМакете Тогда
			Если СтруктураИтогов.Свойство(СтрПараметр.ИмяПоляВзапросе) Тогда  //Уже добавили такое поле аналитики из поля группировки
				Продолжить;
			КонецЕсли;		
			ТекстАналитик = ТекстАналитик+"
			|	втДанныеПредварительные."+СтрПараметр.ИмяПоляВзапросе+",";	
			
			СтрокаПолейЗапросаИтог = СтрокаПолейЗапросаИтог+"
			| МАКСИМУМ(втДанныеПредварительные."+СтрПараметр.ИмяПоляВзапросе+"),";
		КонецЕсли;		
	КонецЦикла;	
	
	Для Каждого СтрУровень Из  СтруктураВыводаТекущейОбласти Цикл	
		Для Каждого СтрГруппировка Из  СтрУровень.Группировки Цикл
			
			тПараметрСортировка =   ТзПараметровОбластей.НайтиСтроки(Новый Структура("ПутьКДанным,ЭтоСортировка",СтрГруппировка.Ключ,Истина))[0];
			ИмяПоляВзапросе 	=   тПараметрСортировка.ИмяПоляВзапросе;
			ПорядокСортировки   =   тПараметрСортировка.ПорядокСортировки;
			
			ТекстСортировок = ТекстСортировок+"
			|"+ИмяПоляВзапросе+?(ПорядокСортировки = НаправлениеСортировкиКомпоновкиДанных.Убыв," УБЫВ ","")+",";	
			
		КонецЦикла;	
	КонецЦикла;

	СтрокаПолейЗапросаИтог = ЛЕВ(СтрокаПолейЗапросаИтог,СтрДлина(СтрокаПолейЗапросаИтог)-1);
	
	ТекстСортировок = ЛЕВ(ТекстСортировок,СтрДлина(ТекстСортировок)-1);
	
	ТекстИтоговогоЗапроса =ТекстИтоговогоЗапроса+"
	|;
	|///////////////////////////////////////////////////////////
    |ВЫБРАТЬ "+ТекстАналитик+СтрокаПолейЗапроса+"
	|	втДанныеПредварительные.Уид_Области
	|ПОМЕСТИТЬ втДанныеПредварительные_"+Уид_Области+" 
	|ИЗ
	|	втДанныеПредварительные_Колонки_ КАК втДанныеПредварительные	
	|;
	|///////////////////////////////////////////////////////////
	|ВЫБРАТЬ "+ТекстАналитик+СтрокаПолейЗапросаСгруппированные+"
	|	втДанныеПредварительные.Уид_Области
	|ИЗ
	| 	втДанныеПредварительные_"+Уид_Области+" КАК втДанныеПредварительные
	|ГДЕ 
	|	втДанныеПредварительные.Уид_Области  = "+""""+Уид_Области+""""+"
	|СГРУППИРОВАТЬ ПО "+ТекстАналитик+"
	| втДанныеПредварительные.Уид_Области
	|УПОРЯДОЧИТЬ ПО "+ТекстСортировок+" 
	|ИТОГИ 
	| "+СтрокаПолейЗапросаИтог+"
	|ПО
	|	Уид_Области";	
		
	ТекстИтоговогоЗапроса = ТекстИтоговогоЗапроса+ТекстИтогов;
	
	ТекстИтоговогоЗапроса = ТекстИтоговогоЗапроса+"
	|;
	|/////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ втДанныеПредварительные_"+Уид_Области+"
	|;
	|/////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ втДанныеПредварительные_Колонки
	|;
	|/////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ втДанныеПредварительные_Колонки_";
	
	Возврат ТекстИтоговогоЗапроса;
	
КонецФункции

Функция ПолучитьТекстЗапросаВыводаМакетаКолонки(ПоказателиТекущегоЗапроса,ТзАналитик,СтруктураВыводаТекущейОбласти,Уид_Области,ТзПараметровОбластей,ПоказателиКолонки,КэшУникальныхКодовПоказателей)
	
	ТекстИтоговогоЗапроса 	= "";
	СтрокаПолейЗапросаИтог  = "";
	СтрокаПолейЗапроса	    = "";
	СтрокаПолейЗапросаСгруппированные  = "";
	
	ПоказателиТекущегоЗапросаКлючиКодов = ПоказателиТекущегоЗапроса.Скопировать();
	ПоказателиТекущегоЗапросаКлючиКодов.Свернуть("КодПоляПоказателя");
	
	Для Каждого   тПоказательЗапроса Из   ПоказателиТекущегоЗапросаКлючиКодов  Цикл	
		
		 СтрПолеКлюч 		= тПоказательЗапроса.КодПоляПоказателя;
		 СтрПолеЗначение    = КэшУникальныхКодовПоказателей[СтрПолеКлюч];
		 
		 НачалоКодаПоказателя  	= СтрНайти(СтрПолеКлюч,"_MES_");
		 КодБезПрефикса         = Прав(СтрПолеКлюч,СтрДлина(СтрПолеКлюч)-НачалоКодаПоказателя-4);
		 КодБезПрефикса         = СтрЗаменить(КодБезПрефикса,"_UID_","");
		 Если СтрПолеЗначение.Свойство("ЗначениеВалюта") Тогда
			 КодБезПрефикса         = СтрЗаменить(КодБезПрефикса,"_Вал","");
			 СтрокаПолейЗапроса 	= СтрокаПолейЗапроса +"
			 |	ВЫБОР КОГДА  втДанныеПредварительные.ИмяОбластиДляВывода = """+СтрЗаменить(СтрПолеКлюч,"_Вал","") +""" ТОГДА втДанныеПредварительные.ЗначениеВалюта ИНАЧЕ NULL КОНЕЦ  КАК "+СтрЗаменить(СтрПолеКлюч,"_MES","")+",";	
		 ИначеЕсли СтрПолеЗначение.ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда	 
			 СтрокаПолейЗапроса 	= СтрокаПолейЗапроса +"
			 |	ВЫБОР КОГДА   втДанныеПредварительные.ИмяОбластиДляВывода = """+СтрПолеКлюч +""" ТОГДА втДанныеПредварительные.Значение ИНАЧЕ NULL КОНЕЦ  КАК "+СтрПолеКлюч+",";			 
		 Иначе 
			 СтрокаПолейЗапроса 	= СтрокаПолейЗапроса +"
			 |	ВЫБОР КОГДА  втДанныеПредварительные.ИмяОбластиДляВывода = """+СтрПолеКлюч +""" ТОГДА втДанныеПредварительные.ЗначениеНеЧисло ИНАЧЕ NULL КОНЕЦ  КАК "+СтрПолеКлюч+",";			 
		 КонецЕсли; 	 
		 
		 Если СтрПолеЗначение.ПоказательВидИтога = Перечисления.ВидыИтоговПоказателя.Максимум Тогда
			 СтрокаПолейЗапросаИтог 	= СтрокаПолейЗапросаИтог +"
			 |	МАКСИМУМ("+СтрПолеКлюч+"),";		 
		 ИначеЕсли СтрПолеЗначение.ПоказательВидИтога = Перечисления.ВидыИтоговПоказателя.Минимум Тогда
			 СтрокаПолейЗапросаИтог 	= СтрокаПолейЗапросаИтог +"
			 |	МИНИМУМ("+СтрПолеКлюч+") ,";			 
		 ИначеЕсли СтрПолеЗначение.ПоказательВидИтога = Перечисления.ВидыИтоговПоказателя.НеРассчитывается Тогда
			 СтрокаПолейЗапросаИтог 	= СтрокаПолейЗапросаИтог +"
			 |	МАКСИМУМ("+СтрПолеКлюч+") ,";		 
		 ИначеЕсли НЕ СтрПолеЗначение.ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			 СтрокаПолейЗапросаИтог 	= СтрокаПолейЗапросаИтог +"
			 |	МАКСИМУМ("+СтрПолеКлюч+") ,";				 
		 Иначе 			
			 СтрокаПолейЗапросаИтог 	= СтрокаПолейЗапросаИтог +"
			 |	СУММА("+СтрПолеКлюч+") ,";		 			 
		 КонецЕсли;
		 
		  СтрокаПолейЗапросаСгруппированные = СтрокаПолейЗапросаСгруппированные+"
		  |	МАКСИМУМ(втДанныеПредварительные."+СтрПолеКлюч+") КАК "+СтрПолеКлюч+" ,";
			 
	 КонецЦикла;	

	ТзСвойстваПоказателей  =  ПолучитьСвойстваПоказателей(ПоказателиКолонки.ВыгрузитьКолонку("Показатель"));

	ЕстьВалютные 		= ТзСвойстваПоказателей.НайтиСтроки(Новый Структура("Валютный",Истина)).Количество()>0;
		
	ТекстАналитик = "";		
	ТекстИтогов   = "";
	ТекстСортировок = "";
	тИндекс = 1;
	СтруктураИтогов = Новый Структура;
	ВсегоГруппировок =  СтруктураВыводаТекущейОбласти.Количество();
		
	Для Каждого УровеньГруппировки Из СтруктураВыводаТекущейОбласти Цикл
								
		Для Каждого РасшифровкаАналитки Из УровеньГруппировки.Группировки Цикл
			ТекстАналитик = ТекстАналитик+"
			|	втДанныеПредварительные."+РасшифровкаАналитки.Ключ+",";						
			
			ТекстИтогов = ТекстИтогов+"
			|	,"+?(РасшифровкаАналитки.Ключ = "ПериодОтчета","ПериодОтчета",РасшифровкаАналитки.Ключ) ;		
			
			СтруктураИтогов.Вставить(РасшифровкаАналитки.Ключ);		
					
		КонецЦикла;
		
		тИндекс = тИндекс+1;
			
	КонецЦикла;
	
	Для Каждого СтрПараметр Из ТзПараметровОбластей Цикл			
		Если СтрПараметр.ВыбранВМакете Тогда
			Если СтруктураИтогов.Свойство(СтрПараметр.ИмяПоляВзапросе) Тогда  //Уже добавили такое поле аналитики из поля группировки
				Продолжить;
			КонецЕсли;		
			ТекстАналитик = ТекстАналитик+"
			|	втДанныеПредварительные."+СтрПараметр.ИмяПоляВзапросе+",";	
			
			СтрокаПолейЗапросаИтог = СтрокаПолейЗапросаИтог+"
			| МАКСИМУМ(втДанныеПредварительные."+СтрПараметр.ИмяПоляВзапросе+"),";
		КонецЕсли;		
	КонецЦикла;	
	
	Для Каждого СтрУровень Из  СтруктураВыводаТекущейОбласти Цикл	
		Для Каждого СтрГруппировка Из  СтрУровень.Группировки Цикл
			
			ИмяПоляВзапросе =   ТзПараметровОбластей.НайтиСтроки(Новый Структура("ПутьКДанным,ЭтоСортировка",СтрГруппировка.Ключ,Истина))[0].ИмяПоляВзапросе;
			
			ТекстСортировок = ТекстСортировок+"
			|	"+ИмяПоляВзапросе+",";	
		КонецЦикла;	
	КонецЦикла;

	СтрокаПолейЗапросаИтог = ЛЕВ(СтрокаПолейЗапросаИтог,СтрДлина(СтрокаПолейЗапросаИтог)-1);
	
	ТекстСортировок = ЛЕВ(ТекстСортировок,СтрДлина(ТекстСортировок)-1);
	
	ТекстИтоговогоЗапроса =ТекстИтоговогоЗапроса+"
	|;
	|///////////////////////////////////////////////////////////
    |ВЫБРАТЬ "+ТекстАналитик+СтрокаПолейЗапроса+"
	|	втДанныеПредварительные.Уид_Области
	|ПОМЕСТИТЬ втДанныеПредварительные_"+Уид_Области+" 
	|ИЗ
	|	втДанныеПредварительные_Колонки_ КАК втДанныеПредварительные	
	|;
	|///////////////////////////////////////////////////////////
	|ВЫБРАТЬ "+ТекстАналитик+СтрокаПолейЗапросаСгруппированные+"
	|	втДанныеПредварительные.Уид_Области
	|ИЗ
	| 	втДанныеПредварительные_"+Уид_Области+" КАК втДанныеПредварительные
	|ГДЕ 
	|	втДанныеПредварительные.Уид_Области  = "+""""+Уид_Области+""""+"
	|СГРУППИРОВАТЬ ПО "+ТекстАналитик+"
	| втДанныеПредварительные.Уид_Области
	|УПОРЯДОЧИТЬ ПО "+ТекстСортировок+" 
	|ИТОГИ 
	| "+СтрокаПолейЗапросаИтог+"
	|ПО
	|	Уид_Области";	
		
	ТекстИтоговогоЗапроса = ТекстИтоговогоЗапроса+ТекстИтогов;
	
	ТекстИтоговогоЗапроса = ТекстИтоговогоЗапроса+"
	|;
	|/////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ втДанныеПредварительные_"+Уид_Области+"
	|;
	|/////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ втДанныеПредварительные_Колонки
	|;
	|/////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ втДанныеПредварительные_Колонки_";
	
	Возврат ТекстИтоговогоЗапроса;
	
КонецФункции

Процедура ПолучитьОписаниеСхемыКДВыводаМакетКолонки(СтруктураПараметров)
	
	ПоказателиТекущегоЗапроса 		= СтруктураПараметров.ТаблицаПоказателиТекущейОбласти;
	ТзАналитик                		= СтруктураПараметров.ТзАналитик;
	СтруктураВыводаТекущейОбласти   = СтруктураПараметров.СтруктураВыводаТекущейОбласти;
	Уид_Области                     = СтруктураПараметров.ИмяОбласти;
	ТзПараметровОбластей            = СтруктураПараметров.тПараметрыОбластей;
	КэшУникальныхКодовПоказателей   = СтруктураПараметров.КэшУникальныхКодовПоказателей;
	СтрокаВывода                    = СтруктураПараметров.СтрокаВывода;
	ПрефиксЗапроса                  = СтруктураПараметров.ПрефиксЗапроса;
	
	
	Если ПоказателиТекущегоЗапроса.Количество() = 0 Тогда
		 Возврат;
	КонецЕсли;	
	
	ТекстИтоговогоЗапроса 				= "";
	СтрокаПолейЗапросаИтог  			= "";
	СтрокаПолейЗапроса	    			= "";
	СтрокаПолейЗапросаСгруппированные  	= "";
	СтруктураИтогов        				= Новый Структура;
	ТекстАналитикТипизиованные 			= "";
	ТекстАналитик 						= "";		
    СтруктураИменПолейСКД  				= Новый Структура;
	СтруктураИменРесурсовСКД 			= Новый Структура;;
	
	СхемаСКД = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных 							= СхемаСКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя 						= "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных 		= "Local";
	
	ТекущийНаборДанных 						= СхемаСКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	ТекущийНаборДанных.Имя 					= "ОсновнойНабор";
	ТекущийНаборДанных.Запрос  				= "";
	ТекущийНаборДанных.ИсточникДанных 		= "ИсточникДанных";			
	
	//Добавляем вычисляемое поле, содержащее имя текущего макета оформления
	НовоеПолеВычисления=СхемаСКД.ВычисляемыеПоля.Добавить();
	НовоеПолеВычисления.Заголовок="ИмяМакета";
	ЗначениеПоля  = "УР1";
	НовоеПолеВычисления.Выражение=""""+ЗначениеПоля+"""";
	НовоеПолеВычисления.ПутьКДанным="ИмяМакета";

	НастройкиПоУмолчанию = СхемаСКД.НастройкиПоУмолчанию;
	НастройкиПоУмолчанию.ПараметрыВывода.УстановитьЗначениеПараметра("ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
    НастройкиПоУмолчанию.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов"	, РасположениеИтоговКомпоновкиДанных.Нет);
	НастройкиПоУмолчанию.ПараметрыВывода.УстановитьЗначениеПараметра("РасположениеПолейГруппировки"			, РасположениеПолейГруппировкиКомпоновкиДанных.Отдельно);
    
	ТаблицаКомпоновкиДанных                 = НастройкиПоУмолчанию.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));

	ПоказателиТекущегоЗапросаКлючиКодов = ПоказателиТекущегоЗапроса.Скопировать();
	ПоказателиТекущегоЗапросаКлючиКодов.Свернуть("КодПоляПоказателя");
	
	тПараметрыСортировки =   ТзПараметровОбластей.НайтиСтроки(Новый Структура("ЭтоСортировка",Истина));
	
	
	//Добавляем группировку в колонках по именам областей
	Группировка 									= НастройкиПоУмолчанию.Структура[0].Колонки.Добавить();
	
	нПолеГруппировки 								= Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	нПолеГруппировки.Поле							= Новый ПолеКомпоновкиДанных("ИмяОбластиДляВывода");	
	
	ВыбранноеПолеГрКомпоновкиДанных 				= Группировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
	ВыбранноеПолеГрКомпоновкиДанных.Поле 			= Новый ПолеКомпоновкиДанных("ИмяОбластиДляВывода");
	ВыбранноеПолеГрКомпоновкиДанных.Использование 	= Истина;

	
	//Аналзируем какие ресурсы и с какими агрегатами нам понадобятся
	//Заполняем  поля -ресурсы и итоги по ним...
	
	тИтогиПоПоказателям = Новый ТаблицаЗначений;
	тИтогиПоПоказателям.Колонки.Добавить("ИмяОбласти");
	тИтогиПоПоказателям.Колонки.Добавить("ИмяРесурса");
	тИтогиПоПоказателям.Колонки.Добавить("АгрегатнаяФункция");
	
	Для Каждого   тПоказательЗапроса Из   ПоказателиТекущегоЗапросаКлючиКодов  Цикл	
		
		 СтрПолеКлюч 		= тПоказательЗапроса.КодПоляПоказателя;
		 СтрПолеЗначение    = КэшУникальныхКодовПоказателей[СтрПолеКлюч];
		 
		 НачалоКодаПоказателя  	= СтрНайти(СтрПолеКлюч,"_MES_");
		 КодБезПрефикса         = Прав(СтрПолеКлюч,СтрДлина(СтрПолеКлюч)-НачалоКодаПоказателя-4);
		 КодБезПрефикса         = СтрЗаменить(КодБезПрефикса,"_UID_","");

		 нСтрокаИтога 				=  тИтогиПоПоказателям.Добавить();
		 нСтрокаИтога.ИмяОбласти    =  СтрПолеКлюч;
		 
		 Если СтрПолеЗначение.Свойство("ЗначениеВалюта") Тогда
			 нСтрокаИтога.ИмяОбласти    =  СтрЗаменить(СтрПолеКлюч,"_MES","");
			 нСтрокаИтога.ИмяРесурса    =  "ЗначениеВалюта"; 			 
		 ИначеЕсли СтрПолеЗначение.ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда	 	 
			 нСтрокаИтога.ИмяОбласти    =  СтрПолеКлюч;
			 нСтрокаИтога.ИмяРесурса    =  "Значение";	 
		 Иначе 	 
			 нСтрокаИтога.ИмяОбласти    =  СтрПолеКлюч;
			 нСтрокаИтога.ИмяРесурса    =  "ЗначениеНеЧисло"; 	 
		 КонецЕсли; 	 
		 
		 Если СтрПолеЗначение.ПоказательВидИтога = Перечисления.ВидыИтоговПоказателя.Максимум Тогда	  			 
			 нСтрокаИтога.АгрегатнаяФункция    =  "МАКСИМУМ";
		 ИначеЕсли СтрПолеЗначение.ПоказательВидИтога = Перечисления.ВидыИтоговПоказателя.Минимум Тогда		 
			  нСтрокаИтога.АгрегатнаяФункция    =  "МИНИМУМ";
		 ИначеЕсли СтрПолеЗначение.ПоказательВидИтога = Перечисления.ВидыИтоговПоказателя.НеРассчитывается Тогда 	 
			нСтрокаИтога.АгрегатнаяФункция    =  "МАКСИМУМ";		 
		 ИначеЕсли НЕ СтрПолеЗначение.ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда	  
			нСтрокаИтога.АгрегатнаяФункция    =  "МАКСИМУМ";
		 Иначе 				 			  
			нСтрокаИтога.АгрегатнаяФункция    =  "СУММА";
		 КонецЕсли;
		 
		  СтруктураИменРесурсовСКД.Вставить(СтрПолеКлюч,нСтрокаИтога.ИмяРесурса);
		 
	КонецЦикла;
	 
	тРазличныеИтоги = тИтогиПоПоказателям.Скопировать();
	тРазличныеИтоги.Свернуть("АгрегатнаяФункция");
	
	тРазличныеРесурсы = тИтогиПоПоказателям.Скопировать();
	тРазличныеРесурсы.Свернуть("ИмяРесурса");
	
	тИтогиРесурсы = тИтогиПоПоказателям.Скопировать();
	тИтогиРесурсы.Свернуть("АгрегатнаяФункция,ИмяРесурса");
	
	Если тРазличныеИтоги.Количество() = 1 Тогда	
		
		Для Каждого тРесурс Из тРазличныеРесурсы Цикл 
			ПолеРесурса            							 = СхемаСКД.ПоляИтога.Добавить();
			ПолеРесурса.ПутьКДанным							 = тРесурс.ИмяРесурса;
			ПолеРесурса.Выражение   						 = тРазличныеИтоги[0].АгрегатнаяФункция+"(" + тРесурс.ИмяРесурса +")";	
		КонецЦикла;
		
	Иначе	
		
		Для Каждого СтрРесурс Из тРазличныеРесурсы Цикл
			
			ЗакрывающаяСтрока = "";
			ОсновнаяСтрока    = "";
			НомерСтроки       = 1;
				
			РазличныеИтоги = тИтогиРесурсы.НайтиСтроки(Новый Структура("ИмяРесурса",СтрРесурс.ИмяРесурса));
			
			Для Каждого СтрИтог Из РазличныеИтоги Цикл
				
				ОсновнаяСтрока = ОсновнаяСтрока+?(НомерСтроки=1,"","ИНАЧЕ ")+ "
				|ВЫБОР КОГДА ИмяОбластиДляВывода В (&ГР_"+СтрИтог.АгрегатнаяФункция+"_"+СтрИтог.ИмяРесурса+") ТОГДА "+СтрИтог.АгрегатнаяФункция+"("+СтрИтог.ИмяРесурса+")";
				
				ЗакрывающаяСтрока = ЗакрывающаяСтрока+" 
				|КОНЕЦ";
				
				тПоказатели         =  тИтогиПоПоказателям.Скопировать(Новый Структура("ИмяРесурса,АгрегатнаяФункция",СтрИтог.ИмяРесурса,СтрИтог.АгрегатнаяФункция)).ВыгрузитьКолонку("ИмяОбласти");
				
				Нпар 				= СхемаСКД.Параметры.Добавить();
				Нпар.Имя    		= "ГР_"+СтрИтог.АгрегатнаяФункция+"_"+СтрИтог.ИмяРесурса;
				Нпар.Значение   	= тПоказатели;
				Нпар.Использование  = ИспользованиеПараметраКомпоновкиДанных.Всегда;
				
				НомерСтроки = НомерСтроки+1;
			КонецЦикла;	
			
			ПолеРесурса            							 = СхемаСКД.ПоляИтога.Добавить();
			ПолеРесурса.ПутьКДанным							 = СтрРесурс.ИмяРесурса;
			ПолеРесурса.Выражение                            = ОсновнаяСтрока+ЗакрывающаяСтрока;
			
		КонецЦикла;	
		
	КонецЕсли;	
	
	Для Каждого СтрРесурс Из тРазличныеРесурсы Цикл
		ВыбранноеПолеГрКомпоновкиДанных 				= Группировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
		ВыбранноеПолеГрКомпоновкиДанных.Поле 			= Новый ПолеКомпоновкиДанных(СтрРесурс.ИмяРесурса);
		ВыбранноеПолеГрКомпоновкиДанных.Использование 	= Истина;
	КонецЦикла;
	
	
	//Добавляем в строки группировки
	ИндексПоля = 1;
	ТекущийУровеньГруппировки = 1;

	Для Каждого УровеньГруппировки Из СтруктураВыводаТекущейОбласти Цикл	
		
		Если НастройкиПоУмолчанию.Структура[0].Строки.Количество() = 0 Тогда
			Группировка = НастройкиПоУмолчанию.Структура[0].Строки.Добавить();
		Иначе	
			Группировка = Группировка.Структура.Добавить();
		КонецЕсли;	
		
		Группировка.ПараметрыВывода.УстановитьЗначениеПараметра("РасположениеРеквизитов"				, РасположениеРеквизитовКомпоновкиДанных.Отдельно);
		Группировка.ПараметрыВывода.УстановитьЗначениеПараметра("РасположениеГруппировки"				, РасположениеГруппировкиКомпоновкиДанных.Начало);
		
		Для Каждого РасшифровкаАналитки Из УровеньГруппировки.Группировки Цикл 	
			нПолеГруппировки 			= Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			нПолеГруппировки.Поле		= Новый ПолеКомпоновкиДанных(РасшифровкаАналитки.Ключ);		
			Если РасшифровкаАналитки.Ключ = "ПериодОтчета" И  УровеньГруппировки.КэшНастроекПериодов.Количество() = 1 Тогда
				тСвойстваПериодов = УровеньГруппировки.КэшНастроекПериодов[0];
				Если тСвойстваПериодов.ВыводитьИтогГод
					ИЛИ  тСвойстваПериодов.ВыводитьИтогПолугодие
					ИЛИ  тСвойстваПериодов.ВыводитьИтогКвартал
					ИЛИ  тСвойстваПериодов.ВыводитьИтогМесяц
					ИЛИ  тСвойстваПериодов.ВыводитьИтогДекада
					ИЛИ  тСвойстваПериодов.ВыводитьИтогНеделя
					ИЛИ  тСвойстваПериодов.ВыводитьИтогДень Тогда		
					нПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
					Группировка.ПараметрыВывода.Элементы[5].Использование=Истина;
					Группировка.ПараметрыВывода.Элементы[5].Значение=РасположениеГруппировкиКомпоновкиДанных.Конец;
				КонецЕсли;	
			КонецЕсли;
			
			тНастройкаИерархииПоля = СтруктураВыводаТекущейОбласти[0].КэшНастроекИерархий.Найти(РасшифровкаАналитки.Ключ,"КодАналитики");
			Если Не тНастройкаИерархииПоля = Неопределено Тогда
				нПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
				Группировка.ПараметрыВывода.Элементы[5].Использование=Истина;
				Группировка.ПараметрыВывода.Элементы[5].Значение=РасположениеГруппировкиКомпоновкиДанных.Начало;		
			КонецЕсли;	
			
			ВыбранноеПолеКомпоновкиДанных 						= НастройкиПоУмолчанию.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
			ВыбранноеПолеКомпоновкиДанных.Поле 					= Новый ПолеКомпоновкиДанных(РасшифровкаАналитки.Ключ);
			ВыбранноеПолеКомпоновкиДанных.Заголовок 			= РасшифровкаАналитки.Ключ;
			ВыбранноеПолеКомпоновкиДанных.Использование 		= Истина;
			
			ВыбранноеПолеГрКомпоновкиДанных 				= Группировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
			ВыбранноеПолеГрКомпоновкиДанных.Поле 			= Новый ПолеКомпоновкиДанных(РасшифровкаАналитки.Ключ);
			ВыбранноеПолеГрКомпоновкиДанных.Заголовок 		= РасшифровкаАналитки.Ключ;
			ВыбранноеПолеГрКомпоновкиДанных.Использование 	= Истина;
			
			СтруктураИтогов.Вставить(РасшифровкаАналитки.Ключ);
			
			СтруктураИменПолейСКД.Вставить(РасшифровкаАналитки.Ключ,ИндексПоля);
						
			ТекстАналитик = ТекстАналитик+"
			|	втДанныеПредварительные."+РасшифровкаАналитки.Ключ+",";	
			
			тАналиткаРасшифровка = ТзАналитик.Найти(РасшифровкаАналитки.Ключ,"АналитикаКод");
			ТипАналитикиВЗапоросе = СтрЗаменить(тАналиткаРасшифровка.АналитикаТипСтрока,"Ссылка","");
			
			Если СтрНайти(ТипАналитикиВЗапоросе,"|")>0 Тогда	//Составной тип не выражаем
				ТекстАналитикТипизиованные = ТекстАналитикТипизиованные+"
				|втДанныеПредварительные."+РасшифровкаАналитки.Ключ+" КАК "+РасшифровкаАналитки.Ключ+",";		
			Иначе   
				ТекстАналитикТипизиованные = ТекстАналитикТипизиованные+"
				|ВЫРАЗИТЬ(втДанныеПредварительные."+РасшифровкаАналитки.Ключ+" КАК "+ТипАналитикиВЗапоросе+") КАК "+РасшифровкаАналитки.Ключ+",";		
			КонецЕсли;	
	
		КонецЦикла;
		
		//Добавляем   поля реквизиты на каждый уровень группировки 
		ТзПараметровОбластейТекущегоУровня  = ТзПараметровОбластей.НайтиСтроки(Новый Структура("ИмяМакета",УровеньГруппировки.ИмяОбласти));
		Для Каждого СтрПараметр Из ТзПараметровОбластейТекущегоУровня Цикл			
			
			Если СтруктураИтогов.Свойство(СтрПараметр.ИмяПоляВзапросе) Тогда
				Продолжить;
			КонецЕсли;	
			
			нПолеГруппировки 							= Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			нПолеГруппировки.Поле						= Новый ПолеКомпоновкиДанных(СтрПараметр.ИмяПоляВзапросе);		
			
			ВыбранноеПолеКомпоновкиДанных 				= НастройкиПоУмолчанию.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
			ВыбранноеПолеКомпоновкиДанных.Поле 			= Новый ПолеКомпоновкиДанных(СтрПараметр.ИмяПоляВзапросе);
			ВыбранноеПолеКомпоновкиДанных.Заголовок 	=СтрПараметр.ИмяПоляВзапросе;
			ВыбранноеПолеКомпоновкиДанных.Использование = Истина;
			
			ВыбранноеПолеГрКомпоновкиДанных 				= Группировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
			ВыбранноеПолеГрКомпоновкиДанных.Поле 			= Новый ПолеКомпоновкиДанных(СтрПараметр.ИмяПоляВзапросе);
			ВыбранноеПолеГрКомпоновкиДанных.Заголовок 		=СтрПараметр.ИмяПоляВзапросе;
			ВыбранноеПолеГрКомпоновкиДанных.Использование 	= Истина;
			
			ТекстАналитик = ТекстАналитик+"
			|	втДанныеПредварительные."+СтрПараметр.ИмяПоляВзапросе+",";	
			
			ТекстАналитикТипизиованные = ТекстАналитикТипизиованные+"
			|	втДанныеПредварительные."+СтрПараметр.ИмяПоляВзапросе+",";	
			
			СтруктураИменПолейСКД.Вставить(СтрПараметр.ИмяПоляВзапросе);
			
		КонецЦикла;	

		
		//Добавляем служебное поле макета; 		
		нПолеГруппировки 							= Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		нПолеГруппировки.Поле						= Новый ПолеКомпоновкиДанных("ИмяМакета");
		
		ВыбранноеПолеГрКомпоновкиДанных 				= Группировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
		ВыбранноеПолеГрКомпоновкиДанных.Поле 			= Новый ПолеКомпоновкиДанных("ИмяМакета");
		ВыбранноеПолеГрКомпоновкиДанных.Использование 	= Истина;
		
		//ЭлементУсловногоОформленияУстанавливаем условное оформление вычисляемого поля - индикатора  уровня макета в группирвке
		ЭлементУсловногоОформления = Группировка.УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "УР"+Строка(ТекущийУровеньГруппировки));
		ЭлементУсловногоОформления.Использование = Истина;
		ЭлементУсловногоОформления.ИспользоватьВЗаголовке=ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
		ЭлементУсловногоОформления.ИспользоватьВЗаголовкеПолей = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
		ЭлементУсловногоОформления.ИспользоватьВЗаголовкеПолейРесурсов = ИспользованиеУсловногоОформленияКомпоновкиДанных.НеИспользовать;
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ИмяМакета");
		ОформляемоеПоле.Использование = Истина;

		ТекущийУровеньГруппировки 		=  ТекущийУровеньГруппировки+1;
		
		//Добавляем сортировки	
		МассивДобавленныхПолейСортировок = Новый Массив;
		Для Каждого тПараметрСортировка Из тПараметрыСортировки Цикл
			Для Каждого СтрПоле Из Группировка.Выбор.Элементы Цикл
				Если Строка(СтрПоле.Поле) = тПараметрСортировка.ПутьКДанным Тогда
					Если тПараметрСортировка.ИмяВмакете = "ПериодОтчета.ДатаНачала"  Тогда	
						ИмяПоляВзапросе 						= тПараметрСортировка.ИмяПоляВзапросе;
						НовыйЭлементПорядка 					= Группировка.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
						НовыйЭлементПорядка.Поле 				= Новый ПолеКомпоновкиДанных(тПараметрСортировка.ИмяВмакете);
						Если ЗначениеЗаполнено(тПараметрСортировка.ПорядокСортировки) Тогда
							НовыйЭлементПорядка.ТипУпорядочивания 	= тПараметрСортировка.ПорядокСортировки;	
						КонецЕсли;	
					Иначе	
						ИмяПоляВзапросе 						= тПараметрСортировка.ИмяПоляВзапросе;
						НовыйЭлементПорядка 					= Группировка.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
						НовыйЭлементПорядка.Поле 				= Новый ПолеКомпоновкиДанных(тПараметрСортировка.ИмяПоляВзапросе);
						Если ЗначениеЗаполнено(тПараметрСортировка.ПорядокСортировки) Тогда
							НовыйЭлементПорядка.ТипУпорядочивания 	= тПараметрСортировка.ПорядокСортировки;	
						КонецЕсли;
						МассивДобавленныхПолейСортировок.Добавить(тПараметрСортировка.ИмяПоляВзапросе);
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;				
		КонецЦикла;
		
		//Добавляем поля сортировок; 		
		Для Каждого СтрПолеСортировки Из МассивДобавленныхПолейСортировок Цикл
			
			нПолеГруппировки 								= Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			нПолеГруппировки.Поле							= Новый ПолеКомпоновкиДанных(СтрПолеСортировки);	
			
			ВыбранноеПолеГрКомпоновкиДанных 				= Группировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
			ВыбранноеПолеГрКомпоновкиДанных.Поле 			= Новый ПолеКомпоновкиДанных(СтрПолеСортировки);
			ВыбранноеПолеГрКомпоновкиДанных.Заголовок 		= СтрПолеСортировки;
			ВыбранноеПолеГрКомпоновкиДанных.Использование 	= Истина;
			
			ВыбранноеПолеГрКомпоновкиДанных 				= НастройкиПоУмолчанию.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
			ВыбранноеПолеГрКомпоновкиДанных.Поле 			= Новый ПолеКомпоновкиДанных(СтрПолеСортировки);
			ВыбранноеПолеГрКомпоновкиДанных.Заголовок 		= СтрПолеСортировки;
			ВыбранноеПолеГрКомпоновкиДанных.Использование 	= Истина;
			
			ТекстАналитик = ТекстАналитик+"
			|	втДанныеПредварительные."+СтрПолеСортировки+",";
			
			ТекстАналитикТипизиованные = ТекстАналитикТипизиованные+"
			|	втДанныеПредварительные."+СтрПолеСортировки+",";

			СтруктураИменПолейСКД.Вставить(СтрПолеСортировки);
			
		КонецЦикла;
		
		//Добавляем служебное поле уровень в группировке; 		 
		Если НЕ СтруктураИменПолейСКД.Свойство("УровеньВГруппировке") Тогда
			ВыбранноеПолеГрКомпоновкиДанных 				= Группировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
			ВыбранноеПолеГрКомпоновкиДанных.Поле 			= Новый ПолеКомпоновкиДанных("СистемныеПоля.УровеньВГруппировке");   
			ВыбранноеПолеГрКомпоновкиДанных.Заголовок		= "УровеньВГруппировке";
			ВыбранноеПолеГрКомпоновкиДанных.Использование 	= Истина;
			СтруктураИменПолейСКД.Вставить("УровеньВГруппировке");
		КонецЕсли;

			
	КонецЦикла;

		
	 СтруктураИменПолейСКД.Вставить("ИмяМакета",ИндексПоля);
	 
	 СтруктураИменПолейСКДИндексированная = Новый Структура;
	
	ИндексПоля 				= 1;
	Для Каждого ПолеРесурс Из СтруктураИменПолейСКД Цикл
		СтруктураИменПолейСКДИндексированная.Вставить(ПолеРесурс.Ключ,ИндексПоля);
		 ИндексПоля = ИндексПоля+1;
	КонецЦикла;
	
	Для Каждого ПолеРесурс Из СтруктураИменРесурсовСКД Цикл
		СтруктураИменПолейСКДИндексированная.Вставить(ПолеРесурс.Ключ,ИндексПоля);
		 ИндексПоля = ИндексПоля+1;
	КонецЦикла;

	
	
	СтруктураИменПолейСКДИндексированная.Вставить("ИмяМакета",ИндексПоля);

	 	 
	СтрокаПолейЗапросаИтог = ЛЕВ(СтрокаПолейЗапросаИтог,СтрДлина(СтрокаПолейЗапросаИтог)-1);
	
	ТекстАналитикГруппа = ТекстАналитик+"
	|	втДанныеПредварительные.Уид_Области";	

	
	ТекстИтоговогоЗапроса =ТекстИтоговогоЗапроса+"
	|;
	|///////////////////////////////////////////////////////////
    |ВЫБРАТЬ "+ТекстАналитик+СтрокаПолейЗапроса+"
	|	втДанныеПредварительные.Уид_Области,
	|	втДанныеПредварительные.ИмяОбластиДляВывода,
	|	втДанныеПредварительные.Значение,
	|	втДанныеПредварительные.ЗначениеНеЧисло,
	|	втДанныеПредварительные.ЗначениеВалюта
	|ПОМЕСТИТЬ втДанныеПредварительные_"+Уид_Области+" 
	|ИЗ
	|	втДанныеПредварительные_Колонки_ КАК втДанныеПредварительные	
	|;
	|///////////////////////////////////////////////////////////
	|ВЫБРАТЬ "+ТекстАналитик+СтрокаПолейЗапросаСгруппированные+"
	|	втДанныеПредварительные.Уид_Области,
	|	втДанныеПредварительные.ИмяОбластиДляВывода,
	|	втДанныеПредварительные.Значение,
	|	втДанныеПредварительные.ЗначениеНеЧисло,
	|	втДанныеПредварительные.ЗначениеВалюта
	|ИЗ
	| 	втДанныеПредварительные_"+Уид_Области+" КАК втДанныеПредварительные
	|ГДЕ 
	|	втДанныеПредварительные.Уид_Области  = "+""""+Уид_Области+"""";
	
	ТекстИтоговогоЗапроса = ТекстИтоговогоЗапроса+"
	|;
	|/////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ втДанныеПредварительные_"+Уид_Области+"
	|;
	|/////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ втДанныеПредварительные_Колонки
	|;
	|/////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ втДанныеПредварительные_Колонки_";
	
	
	ТекущийНаборДанных.Запрос  				=  ПрефиксЗапроса + ТекстИтоговогоЗапроса;
	
	КомпоновщикМакета	=	Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки 	= 	Новый ДанныеРасшифровкиКомпоновкиДанных;
	МакетКомпоновки		=   КомпоновщикМакета.Выполнить(СхемаСКД,СхемаСКД.НастройкиПоУмолчанию,ДанныеРасшифровки);

	СтрокаВывода.СКДДляВыводаОбласти 		=  СхемаСКД;
	СтрокаВывода.СтруктураИменПолейСКД      =  СтруктураИменПолейСКДИндексированная;
	СтрокаВывода.МакетКомпоновки      		=  МакетКомпоновки;
    СтрокаВывода.ДанныеРасшифровки      	=  ДанныеРасшифровки;

	
КонецПроцедуры


#КонецОбласти


#Область ВыводСтрок

//Строки без пересечений
Процедура ПодготовитьТекстЗапросаРаскрытияСтроки(СтруктураПараметров,ОбъектАБ,ПолеТабличногоДокументаМакет);
	  				
	ТзПараметровЗапроса 			= СтруктураПараметров.ТзПараметровЗапроса;
	ТзСтруктураВыводаГруппировок  	= СтруктураПараметров.ТзСтруктураВыводаГруппировок;
	
	СтруктураАналитик = Новый ТаблицаЗначений;
	СтруктураАналитик.Колонки.Добавить("КодАналитки");
	СтруктураАналитик.Колонки.Добавить("ТзАналитик");
    СтруктураАналитик.Колонки.Добавить("УидГруппыОтборов");
	
	ТекстШаблонаЗапроса 			= "";
	ТекстИтоговогоЗапросаСтоки		= "";
	ТекстЗапроса 					= "";	
	
	КэшУникальныхКодовПоказателей  = Новый Структура;
	КэшПоказателей                 = Новый Массив;
	МассивУидовГруппОтборов 	   = Новый Структура;
	
	глТзАналитик = Обработки.АналитическийБланк.ПолучитьОписаниеТаблицыНастроекАналитик(); 

	ТзПоказателейОбластей = Новый ТаблицаЗначений;
	ТзПоказателейОбластей.Колонки.Добавить("ИмяОбласти");
	ТзПоказателейОбластей.Колонки.Добавить("Показатель");
    ТзПоказателейОбластей.Колонки.Добавить("ВидОтчета");
	ТзПоказателейОбластей.Колонки.Добавить("КлючВерсииОтборов");
	ТзПоказателейОбластей.Колонки.Добавить("КодПоляПоказателя");
	
	ТзПараметровОбластей = Новый ТаблицаЗначений;
	ТзПараметровОбластей.Колонки.Добавить("ИмяВмакете");
	ТзПараметровОбластей.Колонки.Добавить("ПутьКДанным");                           
	ТзПараметровОбластей.Колонки.Добавить("ВыражениеПоля");
	ТзПараметровОбластей.Колонки.Добавить("ТипПараметра");
	ТзПараметровОбластей.Колонки.Добавить("ИмяПоляВзапросе");
	ТзПараметровОбластей.Колонки.Добавить("ИмяОбластиВмакете");
	ТзПараметровОбластей.Колонки.Добавить("ИмяМакета");
	ТзПараметровОбластей.Колонки.Добавить("ВыбранВМакете",ОбщегоНазначенияУх.ПолучитьОписаниеТиповБулево());
	ТзПараметровОбластей.Колонки.Добавить("ЭтоСортировка",ОбщегоНазначенияУх.ПолучитьОписаниеТиповБулево());
	ТзПараметровОбластей.Колонки.Добавить("УровеньВгруппировке",ОбщегоНазначенияУх.ПолучитьОписаниеТиповЧисла(3));	
	ТзПараметровОбластей.Колонки.Добавить("ПорядокСортировки");

	
	СтруктураПараметров_ = Новый Структура;
	СтруктураПараметров_.Вставить("ТипОбласти",						"Строки");
	СтруктураПараметров_.Вставить("ТипМакета",						"Строки");
	СтруктураПараметров_.Вставить("МассивУидовГруппОтборов",		МассивУидовГруппОтборов);                                         
	СтруктураПараметров_.Вставить("КэшУникальныхКодовПоказателей",	КэшУникальныхКодовПоказателей);
	СтруктураПараметров_.Вставить("КэшПоказателей",					КэшПоказателей);
	СтруктураПараметров_.Вставить("тзПоказателейОбластей",			тзПоказателейОбластей);
	СтруктураПараметров_.Вставить("ОбъектАБ",						ОбъектАБ);
	СтруктураПараметров_.Вставить("ПолеТабличногоДокументаМакет",	ПолеТабличногоДокументаМакет);
	СтруктураПараметров_.Вставить("глТзАналитик",					глТзАналитик);
	СтруктураПараметров_.Вставить("ТзПоказателейОбластей",			ТзПоказателейОбластей);
	СтруктураПараметров_.Вставить("ТзСтруктураВыводаГруппировок",	ТзСтруктураВыводаГруппировок);
	СтруктураПараметров_.Вставить("ТзПараметровОбластей",			ТзПараметровОбластей);
    СтруктураПараметров_.Вставить("СтруктураАналитикРаскрытияПоказателей",	СтруктураПараметров.СтруктураАналитикРаскрытияПоказателей);
		
	КэшГруппОтборовПоказателейРаскрытияМассив = ПолучитьКэшГруппОтборовПоказателейРаскрытияСтроки(СтруктураПараметров_);
			
	глТзАналитик.Сортировать("ПорядокАналитики");
	
	ИндексЗапроса = 0;
	
	ИндексЗапросаПакета = 1;
		
	ГлКэшПоказателей_ = Неопределено;
	ГлКэшАналитик_    = Неопределено;
	
	ПолучитьКэшПоказателей(СтруктураПараметров_.тзПоказателейОбластей.ВыгрузитьКолонку("Показатель"),глТзАналитик,ГлКэшПоказателей_,ГлКэшАналитик_); 
	
	ГлКэшПоказателей_.Индексы.Добавить("Ссылка");
		
	ТзПараметровОбластей.Свернуть("ИмяВмакете,ПутьКДанным,ВыражениеПоля,ТипПараметра,ИмяПоляВзапросе,ВыбранВМакете,ЭтоСортировка,ИмяОбластиВмакете,ИмяМакета,УровеньВгруппировке,ПорядокСортировки");
			
	тСтруктураГруппирвок = ПолучитьИзВременногоХранилища(ОбъектАБ.тСтруктураМакетовРаскрытияАдрес);
	
	Для Каждого СтрГруппаУид Из КэшГруппОтборовПоказателейРаскрытияМассив Цикл
		
		тПараметрыОбластей = ПолучитьПараметрыТекущейОбласти(СтрГруппаУид,ТзПараметровОбластей,тСтруктураГруппирвок);
		
		ОписаниеТекущейОбласти = ОбъектАБ.КэшРаскрываемыхОбластей.НайтиСтроки(Новый Структура("ИмяОбласти",СтрГруппаУид.ИмяОбласти))[0];	
		
		ПодзапросВыводаМакетаРаскрытия = Новый Запрос;
		ТекстПодзапросаВыбораДанных    = "";
		лТзПараметровЗапроса = ТзПараметровЗапроса.СкопироватьКолонки();
		
		ОписаниеТекущейГруппыОтборовАналитикРаскрытия  = ОбъектАБ.НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов",ОписаниеТекущейОбласти.УидГруппыОтборов));
		
		ПолучитьТекстЗапросаМакетаПоказателей(СтрГруппаУид.ТзАналитик,ОбъектАБ.НастройкиРаскрываемыхОбластей,ПодзапросВыводаМакетаРаскрытия,ОписаниеТекущейГруппыОтборовАналитикРаскрытия,лТзПараметровЗапроса,ОписаниеТекущейОбласти,ТзПоказателейОбластей,тПараметрыОбластей); 
		
		КэшКлючевыхОтборовТекущегоРаскрытия = МассивУидовГруппОтборов[СтрГруппаУид.ИмяОбласти];
		
		Для Каждого КлючВерсии Из  КэшКлючевыхОтборовТекущегоРаскрытия Цикл
		
			ОписаниеТекущейГруппыОтборов = ОбъектАБ.КэшГруппОтборовПоказателей.НайтиСтроки(Новый Структура("УидГруппыОтборов",КлючВерсии.Значение))[0];
						
			//Если  в раскрытии есть аналитики группы раскрыия, то необходимо проверить наличие разных индексов раскрываемых аналитик, и при необходимости разбить запросы данных
			Если СтрГруппаУид.ТзАналитик.НайтиСтроки(Новый Структура("ЭтоАналитикаВерсии",ЛОЖЬ)).Количество() = 0 Тогда		
				ПолучитьТекстЗначенийПоказателей_Раскрытие(ТекстПодзапросаВыбораДанных
				,ОписаниеТекущейГруппыОтборов
				,ОписаниеТекущейГруппыОтборов.ИндексРегистра
				,ОписаниеТекущейОбласти
				,СтрГруппаУид.ТзАналитик
				,глТзАналитик
				,Неопределено
				,ИндексЗапроса
				,лТзПараметровЗапроса
				,ОбъектАБ
				,тПараметрыОбластей);
				
				ПоказателиТекущегоЗапроса = ТзПоказателейОбластей.Скопировать(Новый Структура("ИмяОбласти,КлючВерсииОтборов",СтрГруппаУид.ИмяОбласти,КлючВерсии.Значение)).ВыгрузитьКолонку("Показатель");
				
				Нотбор = лТзПараметровЗапроса.Добавить();
				Нотбор.ИмяОтбора 		=  "Пар_"+КлючВерсии.Значение+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0")+"_Показатели";
				Нотбор.ТипОтбора 		= "Равно";
				Нотбор.ЗначениеОтбора	= ПоказателиТекущегоЗапроса;		
				
			Иначе
				
				КэшПоказателей = Неопределено;
				КэшАналитик    = Неопределено;
				
				ПоказателиТекущейГруппы = ТзПоказателейОбластей.Скопировать(Новый Структура("ИмяОбласти,КлючВерсииОтборов",СтрГруппаУид.ИмяОбласти,КлючВерсии.Значение)).ВыгрузитьКолонку("Показатель");
				
				ЗаполнитьКэшПоказателей(СтрГруппаУид.ТзАналитик,ПоказателиТекущейГруппы,ГлКэшПоказателей_,ГлКэшАналитик_,КэшПоказателей,КэшАналитик);
								
				Для Каждого ГруппаПоказателей Из КэшАналитик Цикл
					
					СтруктураПоиска = Новый Структура;
					
					Для Каждого Кол Из КэшАналитик.Колонки Цикл
						СтруктураПоиска.Вставить(Кол.Имя,ГруппаПоказателей[Кол.Имя]);
					Конеццикла;			
					Если СтруктураПоиска.ГруппаРаскрытияЧислоАналитик = NULL Тогда
						СтруктураПоиска.ГруппаРаскрытияЧислоАналитик=0;
					КонецЕсли;	
					
					ДанныеТекущегоЗапроса     = КэшПоказателей.Скопировать(СтруктураПоиска);
					ДанныеТекущегоЗапроса.Свернуть("Ссылка,СтрокаОтчета");	
					ПоказателиТекущегоЗапроса =  ДанныеТекущегоЗапроса.ВыгрузитьКолонку("Ссылка");	
					
					ПолучитьТекстЗначенийПоказателей_Раскрытие(ТекстПодзапросаВыбораДанных
					,ОписаниеТекущейГруппыОтборов
					,ОписаниеТекущейГруппыОтборов.ИндексРегистра
					,ОписаниеТекущейОбласти
					,СтрГруппаУид.ТзАналитик
					,глТзАналитик                                                                                                      
					,ГруппаПоказателей
					,ИндексЗапроса
					,лТзПараметровЗапроса
					,ОбъектАБ
					,тПараметрыОбластей);
					
					Нотбор = лТзПараметровЗапроса.Добавить();
					Нотбор.ИмяОтбора 		=  "Пар_"+КлючВерсии.Значение+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0")+"_Показатели";
					Нотбор.ТипОтбора 		= "Равно";
					Нотбор.ЗначениеОтбора	= ПоказателиТекущегоЗапроса;						
					ИндексЗапроса = ИндексЗапроса+1;
				КонецЦикла;					
			КонецЕсли;			
								
		КонецЦикла;		
		
		СтруктураВыводаТекущейОбласти = ТзСтруктураВыводаГруппировок.НайтиСтроки(Новый Структура("УидОбласти",СтрГруппаУид.ИмяОбласти));
		
		ТЗПоказателиТекущейОбласти = ТзПоказателейОбластей.Скопировать(Новый Структура("ИмяОбласти",СтрГруппаУид.ИмяОбласти));
		ПоказателиТекущейОбласти   = ТЗПоказателиТекущейОбласти.ВыгрузитьКолонку("Показатель");
		
		ТекстПоказателейПоВидамИтогов = "";
				
		ПолучитьТекстМакетаСгруппировкамиСтроки(ТекстПоказателейПоВидамИтогов,глТзАналитик,тПараметрыОбластей,ПоказателиТекущейОбласти,лТзПараметровЗапроса);
		
		//Настройка вывода периодов
		тНастройкиПериодов = ОбъектАБ.КэшНастроекПериодов.Выгрузить().Скопировать(Новый Структура("ИмяОбласти",СтруктураВыводаТекущейОбласти[0].ИмяОбласти));
		СтруктураВыводаТекущейОбласти[0].КэшНастроекПериодов  = тНастройкиПериодов;

		//Настройка вывода иерархий 
		НастройкиИерархий = ОбъектАБ.КэшНастроекИерархий.Выгрузить().СкопироватьКолонки();
		Для Каждого СтрВложенныйМакет Из СтруктураВыводаТекущейОбласти Цикл
			тНастройкиИерархий = ОбъектАБ.КэшНастроекИерархий.НайтиСтроки(Новый Структура("ИмяОбласти",СтрВложенныйМакет.ИмяОбласти));
			Для Каждого настройка Из тНастройкиИерархий Цикл
				нНастройкиИерархий = НастройкиИерархий.Добавить();
				ЗаполнитьЗначенияСвойств(нНастройкиИерархий,настройка);
			КонецЦикла;
		КонецЦикла;
		СтруктураВыводаТекущейОбласти[0].КэшНастроекИерархий  = НастройкиИерархий;

		
		СтруктураВыводаТекущейОбласти[0].ТекстЗапросаВыводаОбластей = ПодзапросВыводаМакетаРаскрытия.Текст
			+ТекстПодзапросаВыбораДанных
			+ТекстПоказателейПоВидамИтогов
			+ПолучитьТекстЗапросаВыводаМакетаСтроки(ТЗПоказателиТекущейОбласти,СтрГруппаУид.ТзАналитик,СтруктураВыводаТекущейОбласти,СтрГруппаУид.ИмяОбласти,тПараметрыОбластей,СтруктураПараметров_.КэшУникальныхКодовПоказателей);
		
			
		//Запрос вывода строк через СКД																																			
		СтруктураПараметровОписанияСхемыКД = Новый Структура;
		СтруктураПараметровОписанияСхемыКД.Вставить("СтрокаВывода",СтруктураВыводаТекущейОбласти[0]);
		СтруктураПараметровОписанияСхемыКД.Вставить("ПрефиксЗапроса",ПодзапросВыводаМакетаРаскрытия.Текст+ТекстПодзапросаВыбораДанных+ТекстПоказателейПоВидамИтогов);
		СтруктураПараметровОписанияСхемыКД.Вставить("ТаблицаПоказателиТекущейОбласти",ТЗПоказателиТекущейОбласти);
		СтруктураПараметровОписанияСхемыКД.Вставить("ТзАналитик",СтрГруппаУид.ТзАналитик);
		СтруктураПараметровОписанияСхемыКД.Вставить("СтруктураВыводаТекущейОбласти",СтруктураВыводаТекущейОбласти);
		СтруктураПараметровОписанияСхемыКД.Вставить("ИмяОбласти",СтрГруппаУид.ИмяОбласти);
		СтруктураПараметровОписанияСхемыКД.Вставить("тПараметрыОбластей",тПараметрыОбластей);
		СтруктураПараметровОписанияСхемыКД.Вставить("КэшУникальныхКодовПоказателей",СтруктураПараметров_.КэшУникальныхКодовПоказателей);
		
		ПолучитьОписаниеСхемыКДВыводаМакетСтроки(СтруктураПараметровОписанияСхемыКД);		
			
		СтруктураВыводаТекущейОбласти[0].ИндексЗапросаПакета        = ИндексЗапросаПакета;
		СтруктураВыводаТекущейОбласти[0].ПараметрыЗапроса           = лТзПараметровЗапроса;
		СтруктураВыводаТекущейОбласти[0].ПоказателиОбласти        	= ТЗПоказателиТекущейОбласти;
		СтруктураВыводаТекущейОбласти[0].ОбластьСодержитМакет       = ОбластьСодержитМакет(СтрГруппаУид.ТзАналитик);
				
		ИндексЗапросаПакета = ИндексЗапросаПакета+1;	
		ИндексЗапроса = ИндексЗапроса+1;
		
	КонецЦикла;		
		
	СтруктураПараметров.Вставить("ТзСтруктураВыводаГруппировокСтрок"	,ПоместитьВовременноеХранилище(ТзСтруктураВыводаГруппировок,Новый УникальныйИдентификатор()));
	СтруктураПараметров.Вставить("ПараметрыОбластейСтроки"				,ПоместитьВовременноеХранилище(ТзПараметровОбластей,Новый УникальныйИдентификатор()));
	СтруктураПараметров.Вставить("ТзПоказателейОбластейСтроки"			,ТзПоказателейОбластей);
	
	
КонецПроцедуры	  

Функция ПолучитьКэшГруппОтборовПоказателейРаскрытияСтроки(СтруктураПараметров)

	
	глМассивУидовГруппОтборов   	= СтруктураПараметров.МассивУидовГруппОтборов;
	глТзАналитик                    = СтруктураПараметров.глТзАналитик;
	КэшУникальныхКодовПоказателей   = СтруктураПараметров.КэшУникальныхКодовПоказателей;
	КэшПоказателей                  = СтруктураПараметров.КэшПоказателей;
	тзПоказателейОбластей           = СтруктураПараметров.тзПоказателейОбластей;
	ОбъектАБ                        = СтруктураПараметров.ОбъектАБ;
	ПолеТабличногоДокументаМакет    = СтруктураПараметров.ПолеТабличногоДокументаМакет;
	ТипМакета  						= СтруктураПараметров.ТипОбласти;
	ТипОбласти  					= СтруктураПараметров.ТипОбласти;
	ТзСтруктураВыводаГруппировок     = СтруктураПараметров.ТзСтруктураВыводаГруппировок;
	ТзПараметровОбластей            = СтруктураПараметров.ТзПараметровОбластей;
	СтруктураАналитикРаскрытияПоказателей = СтруктураПараметров.СтруктураАналитикРаскрытияПоказателей;
	
	тзОписаниеАналитик = Новый ТаблицаЗначений;
	тзОписаниеАналитик.Колонки.Добавить("ИмяОбласти");
	тзОписаниеАналитик.Колонки.Добавить("ТзАналитик");
	тзОписаниеАналитик.Колонки.Добавить("ТзПоказателей");

	КэшУникальныхКодовПоказателей  = Новый Структура;                        
	
	тСтруктураМакетовРаскрытия = ПолучитьИзВременногоХранилища(ОбъектАБ.тСтруктураМакетовРаскрытияАдрес);
	
	Для Каждого РаскрываемаяОбласть Из ОбъектАБ.КэшРаскрываемыхОбластей  Цикл
			
		КэшПоказателей                 = Новый Массив;	
		ОбластьРаскрытия = ПолеТабличногоДокументаМакет.Область(РаскрываемаяОбласть.ИмяОбласти);
		
		Если ОбластьРаскрытия = Неопределено Тогда
			Продолжить;
		КонецЕсли;		
		Если Не ПолучитьТипОбласти(ПолеТабличногоДокументаМакет,РаскрываемаяОбласть.ИмяОбласти) = ТипОбласти Тогда
			Продолжить;
		КонецЕсли;	
				
		//Формируем настройки СКД для вывода оболасти
		СтруктураАналитик = ЗаполнитьИерархиюАналитикРаскрываемойОбласти(ОбластьРаскрытия,ТипОбласти,тзОписаниеАналитик,глТзАналитик,ОбъектАБ,ПолеТабличногоДокументаМакет,тСтруктураМакетовРаскрытия);
		
		Если СтруктураАналитик = Неопределено Тогда
			 Продолжить;
		КонецЕсли;	
				
		СтруктураАналитик.Сортировать("УровеньГруппировки");
						
		МассивУидовГруппОтборов = Новый Структура;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ТипОбласти",						ТипОбласти);
		СтруктураПараметров.Вставить("СтруктураАналитик",				СтруктураАналитик);
		СтруктураПараметров.Вставить("ОбластьРаскрытия",	 			ОбластьРаскрытия);
		СтруктураПараметров.Вставить("МассивУидовГруппОтборов",			МассивУидовГруппОтборов);                                         
        СтруктураПараметров.Вставить("КэшУникальныхКодовПоказателей",	КэшУникальныхКодовПоказателей);
		СтруктураПараметров.Вставить("тзПоказателейОбластей",			тзПоказателейОбластей);
        СтруктураПараметров.Вставить("ОбъектАБ",						ОбъектАБ);
		СтруктураПараметров.Вставить("ПолеТабличногоДокументаМакет",	ПолеТабличногоДокументаМакет);
        СтруктураПараметров.Вставить("ТзСтруктураВыводаГруппировок",		ТзСтруктураВыводаГруппировок);
		СтруктураПараметров.Вставить("ТзПараметровОбластей",			ТзПараметровОбластей);
		СтруктураПараметров.Вставить("СтруктураАналитикРаскрытияПоказателей",			СтруктураАналитикРаскрытияПоказателей);
	
		ПолучитьОписаниеОбластиСтрок(СтруктураПараметров);
		
		глМассивУидовГруппОтборов.Вставить(РаскрываемаяОбласть.ИмяОбласти,МассивУидовГруппОтборов);
		
	КонецЦикла;
		
	ТзПоказателейОбластей.Свернуть("ИмяОбласти,Показатель,ВидОтчета,КлючВерсииОтборов,КодПоляПоказателя");
	
	Возврат  тзОписаниеАналитик;  
	
КонецФункции

Процедура ПолучитьОписаниеОбластиСтрок(СтруктураПараметров)
	
	ТипОбласти                          	= СтруктураПараметров.ТипОбласти;
	СтруктураАналитик 						= СтруктураПараметров.СтруктураАналитик;
	ОбластьРаскрытия  						= СтруктураПараметров.ОбластьРаскрытия;
    КэшУникальныхКодовПоказателей       	= СтруктураПараметров.КэшУникальныхКодовПоказателей;
	МассивУидовГруппОтборов             	= СтруктураПараметров.МассивУидовГруппОтборов;
	ТзПоказателейОбластей			    	= СтруктураПараметров.ТзПоказателейОбластей;
	ОбъектАБ                            	= СтруктураПараметров.ОбъектАБ;
	ПолеТабличногоДокументаМакет        	= СтруктураПараметров.ПолеТабличногоДокументаМакет;
    ТзСвойствПоказателей                	= ПолучитьИзВременногоХранилища(ОбъектАБ.ТзСвойстваПоказателейАдрес);
	ТабОперандов                        	= ПолучитьИзВременногоХранилища(ОбъектАБ.ТабОперандовАдрес);
	СтруктураИменКэшей                  	= ПолучитьИзВременногоХранилища(ОбъектАБ.СтруктураИменКэшейАдрес);
	ТзСтруктураВыводаГруппировок         	= СтруктураПараметров.ТзСтруктураВыводаГруппировок;
	ТзПараметровОбластей	            	= СтруктураПараметров.ТзПараметровОбластей;
	СтруктураАналитикРаскрытияПоказателей 	= СтруктураПараметров.СтруктураАналитикРаскрытияПоказателей;
    СтруктураНемасштабируемых               = ПолучитьИзВременногоХранилища(ОбъектАБ.НемасшатбируемыеАдрес);
    тСоставОбластейРаскрытия                = ПолучитьИзВременногоХранилища(ОбъектАБ.тСоставОбластейРаскрытияАдрес);
	
	Верх  = ОбластьРаскрытия.Верх;
	Низ   = ОбластьРаскрытия.Низ;
	Лево  = 1;
	Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;;	
	ТипРаскрытия  = "Строки";
	
	УидОбласти 							= ОбластьРаскрытия.Имя;
	ТекГруппровка 						= Неопределено;
	ИндексВыводимойОбласти 				= 0;	
	СтруктураИспользованныхАналитик    	= Новый Структура;
	КоличествоОдинаковыхИмен           	= Новый Структура;
	
	ТзИспользованныхАналитик            = Неопределено;
	
	РаскрытиеКолонокМакета = ОбъектАБ.КэшРаскрываемыхОбластей.НайтиСтроки(Новый Структура("Верх",0));
	
	Для Каждого СтрАналитика Из  СтруктураАналитик Цикл
		
		КоличествоОдинаковыхИмен           = Новый Структура;

		ТзАналитик = ЗначениеИзСтрокиВнутр(ОбъектАБ.КэшРаскрываемыхОбластей.НайтиСтроки(Новый Структура("ИмяОбласти",СтрАналитика.ИмяОбласти))[0].НастройкиАналитикРаскрытия);
		
		Если ТзИспользованныхАналитик  = Неопределено Тогда
			ТзИспользованныхАналитик = ТзАналитик.Скопировать();
		КонецЕсли;	
		
		Для Каждого полеАналитики Из ТзАналитик Цикл
			СтруктураИспользованныхАналитик.Вставить(полеАналитики.АналитикаКод);
			Истр = ТзИспользованныхАналитик.Добавить();
			ЗаполнитьЗначенияСвойств(Истр,полеАналитики);
		КонецЦикла;	
				
		//Иерархическоая структура группировок
		Если СтруктураАналитик.Количество()>1 Тогда		
			Если ИндексВыводимойОбласти<СтруктураАналитик.Количество()-1 Тогда
				ТекущаяОбласть   = ПолеТабличногоДокументаМакет.Область(СтруктураАналитик[ИндексВыводимойОбласти].ИмяОбласти); 
				СледующаяОбласть = ПолеТабличногоДокументаМакет.Область(СтруктураАналитик[ИндексВыводимойОбласти+1].ИмяОбласти); 
				Низ   = СледующаяОбласть.Верх-1;
				Верх  = ТекущаяОбласть.Верх;
				Лево  = 1;
				Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;;	
				ТипРаскрытия  = "Строки";	
			Иначе		
				СледующаяОбласть = ПолеТабличногоДокументаМакет.Область(СтруктураАналитик[ИндексВыводимойОбласти].ИмяОбласти);
				Верх  = СледующаяОбласть.Верх;
				Низ   = СледующаяОбласть.Низ;
				Лево  = 1;
				Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;;	
				ТипРаскрытия  = "Строки";	
			КонецЕсли;	
		КонецЕсли;	
		
		тДокМакетОбласти                = ПолеТабличногоДокументаМакет.ПолучитьОбласть(Верх,0,Низ,0);	//Нужен "чистый" макет	
		НстрСтруктуры 					= ТзСтруктураВыводаГруппировок.Добавить();
		НстрСтруктуры.ТипОбласти       	= "Строки";
		НстрСтруктуры.ИмяОбласти        = СтрАналитика.ИмяОбласти;
		НстрСтруктуры.УидОбласти        = УидОбласти;
		НстрСтруктуры.Уровень        	= ИндексВыводимойОбласти+1;
		НстрСтруктуры.ИменаГруппировок  = СтрАналитика.СтрокаГруппировок;
		НстрСтруктуры.Группировки       = СтрАналитика.Группировки;
		НстрСтруктуры.Макет 		    = тДокМакетОбласти;	
			
		//Добавляем именованные области колонок
		Для Каждого рКолонки Из РаскрытиеКолонокМакета Цикл
			ОбластьКолонки =  ПолеТабличногоДокументаМакет.Область(рКолонки.ИмяОбласти);
			тДокМакетОбласти.Область(0,ОбластьКолонки.Лево,0,ОбластьКолонки.Право).Имя = рКолонки.ИмяОбласти;
		КонецЦикла;	
		
		//Прорисовка макета группировки по ячейкам
		ОбластиКУдалению = Новый Массив;
		
		Для ИндС = Верх По Низ Цикл
			//Проверка на то, что строка макета не принадлежит другой области строк		
			Для ИндК =  Лево По Право Цикл
				
				ТекОбл 			= ПолеТабличногоДокументаМакет.Область(ИндС,ИндК,ИндС,ИндК);
								
				//Проверка на то, что колонка макета не принадлежит другой области колонки
				Если ОбластьВходитВТаблицу(0,ИндК,ТипРаскрытия,ОбъектАБ,ПолеТабличногоДокументаМакет,тСоставОбластейРаскрытия,ТекОбл.Имя) Тогда
					
					Если ТипЗнч(ТекОбл.Расшифровка) = Тип("Структура") Тогда
						Если ТекОбл.Расшифровка.Свойство("Ссылка") Тогда	
							
							тПоказатель  =  ТзСвойствПоказателей.Найти(ТекОбл.Расшифровка.Ссылка,"Ссылка");
							СтруктураСвойствПоказателя  = ПолучитьСвойстваПоказателя(ТекОбл.Расшифровка,тПоказатель);
							тУидГруппыОтборов           = СтруктураИменКэшей[ТекОбл.Имя];
							
							МассивУидовГруппОтборов.Вставить("Гр_"+тУидГруппыОтборов,тУидГруппыОтборов);
							КодПоляПоказателя               = СокрП(тПоказатель.ВидОтчетаКод)+"_"+СокрП(тПоказатель.ПоказательКод)+"_"+тУидГруппыОтборов;
							ОтображатьСуммуВДопВалюте       = ?(ТекОбл.Расшифровка.Свойство("ОтображатьСуммуВДопВалюте"),"ЗначениеВалюта","");	
							
							КэшУникальныхКодовПоказателей.Вставить(КодПоляПоказателя,СтруктураСвойствПоказателя);	
							нПоказатели 					= тзПоказателейОбластей.Добавить();
							нПоказатели.ИмяОбласти		 	= ОбластьРаскрытия.Имя;
							нПоказатели.Показатель          = ТекОбл.Расшифровка.Ссылка;
							нПоказатели.ВидОтчета           = тПоказатель.ВидОтчета;
							нПоказатели.КлючВерсииОтборов   = тУидГруппыОтборов;	
							нПоказатели.КодПоляПоказателя   = КодПоляПоказателя;
							
							тОбластьМакетаДляВывода = тДокМакетОбласти.Область((ИндС-Верх)+1,ИндК,(ИндС-Верх)+1,ИндК);
												
							СтруктураРасшифровки                    = Новый Структура;                                                           
							СтруктураРасшифровки.Вставить("Ссылка"	,ТекОбл.Расшифровка.Ссылка);
							СтруктураРасшифровки.Вставить("УИД"		,тУидГруппыОтборов);
							
							Если ТекОбл.Расшифровка.Свойство("ОтображатьСуммуВДопВалюте") Тогда
								СтруктураРасшифровки.Вставить("ОтображатьСуммуВДопВалюте"		,Истина);
							КонецЕсли;	
			
							тОбластьМакетаДляВывода.Расшифровка 	= СтруктураРасшифровки;
							
							Если тПоказатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
																
								тОбластьМакетаДляВывода.СодержитЗначение = Истина;
								ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьМакетаДляВывода,0,,5);
																
								тОбластьМакетаДляВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
								
							ИначеЕсли тПоказатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Строка Тогда
								
								тОбластьМакетаДляВывода.СодержитЗначение = Истина;
								ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьМакетаДляВывода, "");
								
								тОбластьМакетаДляВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
								
							ИначеЕсли тПоказатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда	
								
								тОбластьМакетаДляВывода.СодержитЗначение = Истина;
								ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьМакетаДляВывода, Дата(1,1,1));
																
								тОбластьМакетаДляВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
								
							ИначеЕсли тПоказатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда	
								
								тОбластьМакетаДляВывода.СодержитЗначение = Истина;
								ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьМакетаДляВывода, Ложь);
																
								тОбластьМакетаДляВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
							
							Иначе
																
								тОбластьМакетаДляВывода.СодержитЗначение = Истина;
								ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьМакетаДляВывода, Неопределено);
																								
								тОбластьМакетаДляВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
								
							КонецЕсли;
							
							тОбластьМакетаДляВывода.Имя = 0;
							
						ИначеЕсли ТекОбл.Расшифровка.Свойство("ТекстФормулы") Тогда		
							
							
							тОперанды                                           = ЗначениеИзСтрокиВнутр(ТекОбл.Расшифровка.РасшифровкаФормулы);
							
							Для Каждого тОперанд Из тОперанды Цикл
								тПоказатель  										=  ТзСвойствПоказателей.Найти(тОперанд.Показатель,"Ссылка");		
								ТекУИД                                              =  ТабОперандов.Найти(тОперанд.ИмяВФормуле,"ИмяВФормуле").УидГруппыОтборов;
								ИмяОбластиДляВыводаСУид       						=  СокрП(тПоказатель.ВидОтчетаКод)+"_"+СокрП(тПоказатель.ПоказательКод)+"_"+ТекУИД;
								тОбластьМакетаДляВывода 							=  тДокМакетОбласти.Область((ИндС-Верх)+1,ИндК,(ИндС-Верх)+1,ИндК); 
								ТекстФормулыЯчейки            						=  тОбластьМакетаДляВывода.Расшифровка.ТекстФормулы;
								ТекстФормулыПриведенный 							=  СтрЗаменить(ТекстФормулыЯчейки,"["+тОперанд.ИмяВФормуле+"]","КэшОперандов."+ИмяОбластиДляВыводаСУид);
								тОбластьМакетаДляВывода.Расшифровка				 	=  Новый Структура("ТекстФормулы",ТекстФормулыПриведенный);
								
								тОбластьМакетаДляВывода.СодержитЗначение = Истина;
								ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьМакетаДляВывода,0,,5);
								
								тОбластьМакетаДляВывода.ГоризонтальноеПоложение 	=  ГоризонтальноеПоложение.Право;		
								
								КодПоляПоказателя               = СокрП(тПоказатель.ВидОтчетаКод)+"_"+СокрП(тПоказатель.ПоказательКод)+"_"+ТекУИД;
								СтруктураСвойствПоказателя  	= ПолучитьСвойстваПоказателя(ТекОбл.Расшифровка,тПоказатель);
								
								КэшУникальныхКодовПоказателей.Вставить(КодПоляПоказателя,СтруктураСвойствПоказателя);
								
								МассивУидовГруппОтборов.Вставить("Гр_"+ТекУИД,ТекУИД);	
								
								нПоказатели 					= тзПоказателейОбластей.Добавить();
								нПоказатели.ИмяОбласти		 	= ОбластьРаскрытия.Имя;
								нПоказатели.Показатель          = тПоказатель.Ссылка;
								нПоказатели.ВидОтчета           = тПоказатель.ВидОтчета;
								нПоказатели.КлючВерсииОтборов   = ТекУИД;
								нПоказатели.КодПоляПоказателя   = КодПоляПоказателя;
								
								Если НЕ КоличествоОдинаковыхИмен.Свойство(ИмяОбластиДляВыводаСУид) Тогда // не было такого показателя
									КоличествоОдинаковыхИмен.Вставить(ИмяОбластиДляВыводаСУид,-1);
								КонецЕсли;
								
								СтруктураАналитикРаскрытияПоказателей.Вставить(ТекОбл.Имя, ПолучитьМассивИзСтруктуры(СтруктураИспользованныхАналитик));
								
							КонецЦикла;	
							
							тОбластьМакетаДляВывода = тДокМакетОбласти.Область((ИндС-Верх)+1,ИндК,(ИндС-Верх)+1,ИндК);
							
							тОбластьМакетаДляВывода.СодержитЗначение = Истина;
							ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьМакетаДляВывода,0,,5);
							
							тОбластьМакетаДляВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
							
							СтруктураРасшифровки                    	= Новый Структура;                                                           
							СтруктураРасшифровки.Вставить("УидФормулы"	,ТекОбл.Имя);
							
							тОбластьМакетаДляВывода.Расшифровка 	= СтруктураРасшифровки;
							
						КонецЕсли;
					КонецЕсли;
					
					Продолжить;
					
				КонецЕсли;	
																
				Если ТипЗнч(ТекОбл.Расшифровка) = Тип("Структура") Тогда
					Если ТекОбл.Расшифровка.Свойство("Ссылка") Тогда
						
						тПоказатель  =  ТзСвойствПоказателей.Найти(ТекОбл.Расшифровка.Ссылка,"Ссылка");
						СтруктураСвойствПоказателя  = ПолучитьСвойстваПоказателя(ТекОбл.Расшифровка,тПоказатель);
						тУидГруппыОтборов           = СтруктураИменКэшей[ТекОбл.Имя];

						МассивУидовГруппОтборов.Вставить("Гр_"+тУидГруппыОтборов,тУидГруппыОтборов);
						КодПоляПоказателя               =  СокрП(тПоказатель.ВидОтчетаКод)+"_"+СокрП(тПоказатель.ПоказательКод)+"_"+тУидГруппыОтборов;
						ОтображатьСуммуВДопВалюте       = ?(ТекОбл.Расшифровка.Свойство("ОтображатьСуммуВДопВалюте"),"ЗначениеВалюта","");
						Если   ЗначениеЗаполнено(ОтображатьСуммуВДопВалюте)  Тогда
							КодПоляПоказателя = КодПоляПоказателя+"_Вал";
						КонецЕсли;	
						КэшУникальныхКодовПоказателей.Вставить(КодПоляПоказателя,СтруктураСвойствПоказателя);		
						нПоказатели 					= тзПоказателейОбластей.Добавить();
						нПоказатели.ИмяОбласти		 	= ОбластьРаскрытия.Имя;
						нПоказатели.Показатель          = ТекОбл.Расшифровка.Ссылка;
						нПоказатели.ВидОтчета           = тПоказатель.ВидОтчета;
						нПоказатели.КлючВерсииОтборов   = тУидГруппыОтборов;	 	
						нПоказатели.КодПоляПоказателя   = КодПоляПоказателя;
						
						ИмяОбластиДляВыводаСУид        =  СокрП(тПоказатель.ВидОтчетаКод)+"_"+СокрП(тПоказатель.ПоказательКод)+"_"+тУидГруппыОтборов+?(ТекОбл.Расшифровка.Свойство("ОтображатьСуммуВДопВалюте"),"_Вал","");
						
						СтруктураПараметровЯчейки = Новый Структура;
						СтруктураПараметровЯчейки.Вставить("ТекОбл",ТекОбл);;
						СтруктураПараметровЯчейки.Вставить("СтруктураИспользованныхАналитик",СтруктураИспользованныхАналитик);
						СтруктураПараметровЯчейки.Вставить("СтруктураСвойствПоказателя",СтруктураСвойствПоказателя);
						СтруктураПараметровЯчейки.Вставить("тПоказатель",тПоказатель);
						СтруктураПараметровЯчейки.Вставить("ТипОбласти",ТипОбласти);
					
						ВыводитьЗначение 				= ПроверитьВыводЗначенияПоПоказателю(СтруктураПараметровЯчейки);

						Если ВыводитьЗначение Тогда
							
							Если КоличествоОдинаковыхИмен.Свойство(ИмяОбластиДляВыводаСУид) Тогда	
								ИндексИмени = КоличествоОдинаковыхИмен[ИмяОбластиДляВыводаСУид]+1;
								Если ИндексИмени = 0 Тогда
									ИндексИмени = 1;
								КонецЕсли;	
								КоличествоОдинаковыхИмен[ИмяОбластиДляВыводаСУид] = ИндексИмени;
							Иначе	
								ИндексИмени  = 1;
								КоличествоОдинаковыхИмен.Вставить(ИмяОбластиДляВыводаСУид,1);
							КонецЕсли;
							
						КонецЕсли;
						
						тОбластьМакетаДляВывода = тДокМакетОбласти.Область((ИндС-Верх)+1,ИндК,(ИндС-Верх)+1,ИндК);
 
						нПоказательОбласти 						=  ОбъектАБ.ПоказателиМакетовРаскрытий.Добавить();
						нПоказательОбласти.ТипМакета   			=  "Строки";
						нПоказательОбласти.Показатель   		=  ТекОбл.Расшифровка.Ссылка;
						нПоказательОбласти.УидГруппыОтборов   	=  тУидГруппыОтборов;
						нПоказательОбласти.ИмяМакетаСтрок   	=  СтрАналитика.ИмяОбласти;
						нПоказательОбласти.СмещениеХ            =  тОбластьМакетаДляВывода.Лево;
                        нПоказательОбласти.СмещениеY            =  тОбластьМакетаДляВывода.Верх-1;

						Если тПоказатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
														
							тОбластьМакетаДляВывода.СодержитЗначение = Истина;
							ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьМакетаДляВывода,0,,5);
																					
							тОбластьМакетаДляВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
							
						ИначеЕсли тПоказатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Строка Тогда
							
							тОбластьМакетаДляВывода.СодержитЗначение = Истина;
							ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьМакетаДляВывода, "");
							
							тОбластьМакетаДляВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
							
						ИначеЕсли тПоказатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда
							
							тОбластьМакетаДляВывода.СодержитЗначение = Истина;
							ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьМакетаДляВывода, Дата(1,1,1));
							
							тОбластьМакетаДляВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
							
						ИначеЕсли тПоказатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда
							
							тОбластьМакетаДляВывода.СодержитЗначение = Истина;
							ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьМакетаДляВывода, Ложь);
							
							тОбластьМакетаДляВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
							
						Иначе
														
							тОбластьМакетаДляВывода.СодержитЗначение = Истина;
							ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьМакетаДляВывода, Неопределено);
							
							тОбластьМакетаДляВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
							
						КонецЕсли;
												
						тОбластьМакетаДляВывода.Имя 			= ИмяОбластиДляВыводаСУид+"_"+ИндексИмени;
						
						СтруктураРасшифровки                    = Новый Структура;                                                           
						СтруктураРасшифровки.Вставить("Ссылка"	,ТекОбл.Расшифровка.Ссылка);
						СтруктураРасшифровки.Вставить("УИД"		,тУидГруппыОтборов);

						тОбластьМакетаДляВывода.Расшифровка 	= СтруктураРасшифровки;
						
						СтруктураАналитикРаскрытияПоказателей.Вставить(ТекОбл.Имя, ПолучитьМассивИзСтруктуры(СтруктураИспользованныхАналитик));

						Если тПоказатель.НеМасштабируется Тогда
							СтруктураНемасштабируемых.Вставить(тОбластьМакетаДляВывода.Имя);
						КонецЕсли;	
						
					ИначеЕсли ТекОбл.Расшифровка.Свойство("НастройкиАналитикРаскрытия") Тогда	
						
						тОбластьМакетаДляВывода = тДокМакетОбласти.Область((ИндС-Верх)+1,ИндК,(ИндС-Верх)+1,ИндК);
                        тОбластьМакетаДляВывода.Картинка  		= Неопределено;
						тОбластьМакетаДляВывода.Расшифровка     = Неопределено;
						
					ИначеЕсли ТекОбл.Расшифровка.Свойство("ТекстФормулы") Тогда	
						
						тОперанды                                           = ЗначениеИзСтрокиВнутр(ТекОбл.Расшифровка.РасшифровкаФормулы);
						
						Для Каждого тОперанд Из тОперанды Цикл
							тПоказатель  										=  ТзСвойствПоказателей.Найти(тОперанд.Показатель,"Ссылка");		
							ТекУИД                                              =  ТабОперандов.Найти(тОперанд.ИмяВФормуле,"ИмяВФормуле").УидГруппыОтборов;
							ИмяОбластиДляВыводаСУид       						=  СокрП(тПоказатель.ВидОтчетаКод)+"_"+СокрП(тПоказатель.ПоказательКод)+"_"+ТекУИД;
							тОбластьМакетаДляВывода 							=  тДокМакетОбласти.Область((ИндС-Верх)+1,ИндК,(ИндС-Верх)+1,ИндК); 
							ТекстФормулыЯчейки            						=  тОбластьМакетаДляВывода.Расшифровка.ТекстФормулы;
							ТекстФормулыПриведенный 							=  СтрЗаменить(ТекстФормулыЯчейки,"["+тОперанд.ИмяВФормуле+"]","КэшОперандов."+ИмяОбластиДляВыводаСУид);
							тОбластьМакетаДляВывода.Расшифровка				 	=  Новый Структура("ТекстФормулы",ТекстФормулыПриведенный);
														
							тОбластьМакетаДляВывода.СодержитЗначение = Истина;
							ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьМакетаДляВывода,0,,5);
														
							тОбластьМакетаДляВывода.ГоризонтальноеПоложение 	=  ГоризонтальноеПоложение.Право;		
					
							КодПоляПоказателя               = СокрП(тПоказатель.ВидОтчетаКод)+"_"+СокрП(тПоказатель.ПоказательКод)+"_"+ТекУИД;
                            СтруктураСвойствПоказателя  	= ПолучитьСвойстваПоказателя(ТекОбл.Расшифровка,тПоказатель);
							
							КэшУникальныхКодовПоказателей.Вставить(КодПоляПоказателя,СтруктураСвойствПоказателя);
														
							МассивУидовГруппОтборов.Вставить("Гр_"+ТекУИД,ТекУИД);	
							
							нПоказатели 					= тзПоказателейОбластей.Добавить();
							нПоказатели.ИмяОбласти		 	= ОбластьРаскрытия.Имя;
							нПоказатели.Показатель          = тПоказатель.Ссылка;
							нПоказатели.ВидОтчета           = тПоказатель.ВидОтчета;
							нПоказатели.КлючВерсииОтборов   = ТекУИД;
							нПоказатели.КодПоляПоказателя   = КодПоляПоказателя;
							
							Если НЕ КоличествоОдинаковыхИмен.Свойство(ИмяОбластиДляВыводаСУид) Тогда // не было такого показателя
								КоличествоОдинаковыхИмен.Вставить(ИмяОбластиДляВыводаСУид,-1);
							КонецЕсли;
								
							СтруктураАналитикРаскрытияПоказателей.Вставить(ТекОбл.Имя, ПолучитьМассивИзСтруктуры(СтруктураИспользованныхАналитик));
	
						КонецЦикла;	
						
						нПоказательОбласти 						=  ОбъектАБ.ПоказателиМакетовРаскрытий.Добавить();
						нПоказательОбласти.ТипМакета   			=  "Строки";
						нПоказательОбласти.Формула   			=  ТекОбл.Имя;
						нПоказательОбласти.УидГруппыОтборов   	=  тУидГруппыОтборов;
						нПоказательОбласти.ИмяМакетаСтрок   	=  СтрАналитика.ИмяОбласти;
						нПоказательОбласти.СмещениеХ            =  тОбластьМакетаДляВывода.Лево;
						нПоказательОбласти.СмещениеY            =  тОбластьМакетаДляВывода.Верх-1;

						тОбластьМакетаДляВывода.Расшифровка.Вставить("УидФормулы",ТекОбл.Имя);
						
						
					КонецЕсли;
					
				ИначеЕсли СтрНайти(ТекОбл.Текст,"[")>0 И СтрНайти(ТекОбл.Текст,"]")>0  Тогда		
					
					ТекОбластьТекст   			= ТекОбл.Текст;					
					ТзПараметровВыражения 		= ОбработатьСтрокуШаблонаЗаголовкаАналитики(ТекОбластьТекст,ТзИспользованныхАналитик);
					тОбластьМакетаДляВывода 	= тДокМакетОбласти.Область((ИндС-Верх)+1,ИндК,(ИндС-Верх)+1,ИндК);;
					тОбластьМакетаДляВывода.Имя = "Пар_"+тОбластьМакетаДляВывода.Имя;
					
					ВыражениеВМакете            = "";
					
					тОбластьМакетаДляВывода 							=  тДокМакетОбласти.Область((ИндС-Верх)+1,ИндК,(ИндС-Верх)+1,ИндК); 
					
					Для Каждого стрПараметр Из ТзПараметровВыражения Цикл		
						
						Если стрПараметр.ТипОбласти = "Параметр" Тогда	
							
							ПозицияПервойТочки  = СтрНайти(стрПараметр.ТекстОбласти,".");
							Если ПозицияПервойТочки>0 Тогда
								ПутьКДанным 			= Лев(стрПараметр.ТекстОбласти,ПозицияПервойТочки-1);
								ВыражениеПоля      	= Сред(стрПараметр.ТекстОбласти,ПозицияПервойТочки+1,СтрДлина(стрПараметр.ТекстОбласти));
							Иначе	
								ПутьКДанным 		= стрПараметр.ТекстОбласти;
								ВыражениеПоля      = "";
							КонецЕсли;	
							
							ИмяПоляВзапросе                                     =  СтрЗАменить(стрПараметр.ТекстОбласти,".","");							
							ТекПоле                                             =  ТзПараметровОбластей.НайтиСтроки(Новый Структура("ИмяПоляВзапросе,ИмяМакета",ИмяПоляВЗапросе,СтрАналитика.ИмяОбласти));		
							
							Если  ТекПоле.Количество() = 0 Тогда
								нТзПараметровОбластей 								= ТзПараметровОбластей.Добавить();
								ИмяОбластейВмакете 									= Новый Массив;
							Иначе	
								нТзПараметровОбластей 								= ТекПоле[0];
								ИмяОбластейВмакете                                  = нТзПараметровОбластей.ИмяОбластиВмакете;
							КонецЕсли;	
							
							нТзПараметровОбластей.ИмяВМакете    				= стрПараметр.ТекстОбласти;	
							нТзПараметровОбластей.ВыражениеПоля   				= ВыражениеПоля;
							нТзПараметровОбластей.ПутьКДанным   				= ПутьКДанным;
							нТзПараметровОбластей.ТипПараметра  				= "Группировка";
							нТзПараметровОбластей.ИмяПоляВзапросе    			= ИмяПоляВзапросе;
							нТзПараметровОбластей.ИмяОбластиВмакете             = тОбластьМакетаДляВывода.Имя;
							нТзПараметровОбластей.ИмяМакета             		= СтрАналитика.ИмяОбласти;
							нТзПараметровОбластей.ВыбранВМакете   				= Истина;

							нТзПараметровОбластей.ВыражениеПоля   				= ВыражениеПоля;
							нТзПараметровОбластей.ПутьКДанным   				= ПутьКДанным;
							нТзПараметровОбластей.ТипПараметра  				= "Группировка";
							нТзПараметровОбластей.ИмяПоляВзапросе    			= СтрЗАменить(стрПараметр.ТекстОбласти,".","");
							
							Если ИмяОбластейВмакете.Найти(тОбластьМакетаДляВывода.Имя) = Неопределено Тогда
								ИмяОбластейВмакете.Добавить(тОбластьМакетаДляВывода.Имя);
							КонецЕсли;
							
							нТзПараметровОбластей.ИмяОбластиВмакете             = ИмяОбластейВмакете;
							нТзПараметровОбластей.ИмяМакета             		= СтрАналитика.ИмяОбласти;
							нТзПараметровОбластей.УровеньВгруппировке           = ИндексВыводимойОбласти+1;
							
							ВыражениеВМакете = ВыражениеВМакете+"["+стрПараметр.ТекстОбласти+"]";
														
						ИначеЕсли СтрНайти(стрПараметр.ТекстОбласти,"Параметр") Тогда  //Параметр вида отчета
							
						Иначе	
							ВыражениеВМакете = ВыражениеВМакете+стрПараметр.ТекстОбласти;
						КонецЕсли;			
							
					КонецЦикла;									
					
					тОбластьМакетаДляВывода.СодержитЗначение = Ложь;
					тОбластьМакетаДляВывода.Текст = ВыражениеВМакете;
										
				КонецЕсли;		
			КонецЦикла;	
		КонецЦикла;	
		
		ИндексВыводимойОбласти = ИндексВыводимойОбласти+1;
		
		НстрСтруктуры.КоличествоОдинаковыхИмен = КоличествоОдинаковыхИмен;	
				
	КонецЦикла;
		
КонецПроцедуры	

Процедура ПолучитьТекстМакетаСгруппировкамиСтроки(ТекстИтоговогоЗапроса,глТзАналитик,ТзПараметровОбластей,ПоказателиТекущейОбласти,ТзПараметровЗапроса)
	
	ТзСвойстваПоказателей  =  ПолучитьСвойстваПоказателей(ПоказателиТекущейОбласти);

	СтрокаПолейЗапроса 			= "";
	ТекстАналитик 				= "";		
	ТекстГруппировокАналитик    = "";
		
	ПоказателиСумма 					= Новый Массив;
	ПоказателиМаксимум 					= Новый Массив;
	ПоказателиМинимум 					= Новый Массив;
	ПоказателиБезИтога 					= Новый Массив;
	ПоказателиСреднее                   = Новый Массив;
	ПоказателиМаксимумНечисловые 		= Новый Массив;
	ПоказателиМинимумНечисловые 		= Новый Массив;
	ПоказателиБезИтогаНечисловые		= Новый Массив;
	
	ЕстьВалютные 		= ТзСвойстваПоказателей.НайтиСтроки(Новый Структура("Валютный",Истина)).Количество()>0;
	ЕстьНеЧисловые      = ТзСвойстваПоказателей.НайтиСтроки(Новый Структура("ТипЗначения",Перечисления.ТипыЗначенийПоказателейОтчетов.Число)).Количество()<>ТзСвойстваПоказателей.Количество();
	ЕстьЧисловые        = ТзСвойстваПоказателей.НайтиСтроки(Новый Структура("ТипЗначения",Перечисления.ТипыЗначенийПоказателейОтчетов.Число)).Количество()>0;

	
	Для Каждого Пок Из ТзСвойстваПоказателей Цикл
		
		Если Пок.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			Если Пок.СпособРасчетаИтогаПоПериоду = Перечисления.ВидыИтоговПоказателяПоПериоду.НеРассчитывать Тогда
				ПоказателиБезИтога.Добавить(Пок.Ссылка);
			ИначеЕсли  Пок.ВидИтога = Перечисления.ВидыИтоговПоказателя.Максимум Тогда
				ПоказателиМаксимум.Добавить(Пок.Ссылка);
			ИначеЕсли  Пок.ВидИтога = Перечисления.ВидыИтоговПоказателя.Минимум Тогда
				ПоказателиМинимум.Добавить(Пок.Ссылка);
			ИначеЕсли  Не ЗначениеЗаполнено(Пок.ВидИтога) ИЛИ Пок.ВидИтога = Перечисления.ВидыИтоговПоказателя.Сумма Тогда 	
				ПоказателиСумма.Добавить(Пок.Ссылка);
			ИначеЕсли Пок.ВидИтога = Перечисления.ВидыИтоговПоказателя.Среднее Тогда	
				ПоказателиСреднее.Добавить(Пок.Ссылка);
			КонецЕсли;				
		Иначе	
			Если Пок.СпособРасчетаИтогаПоПериоду = Перечисления.ВидыИтоговПоказателяПоПериоду.НеРассчитывать Тогда
				ПоказателиБезИтогаНечисловые.Добавить(Пок.Ссылка);
			ИначеЕсли  Пок.ВидИтога = Перечисления.ВидыИтоговПоказателя.Максимум Тогда
				ПоказателиМаксимумНечисловые.Добавить(Пок.Ссылка);
			ИначеЕсли  Пок.ВидИтога = Перечисления.ВидыИтоговПоказателя.Минимум Тогда
				ПоказателиМинимумНечисловые.Добавить(Пок.Ссылка);
			ИначеЕсли  (Не ЗначениеЗаполнено(Пок.ВидИтога) И  Пок.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Строка) Тогда 	
				ПоказателиБезИтогаНечисловые.Добавить(Пок.Ссылка);
			ИначеЕсли  (Не ЗначениеЗаполнено(Пок.ВидИтога) И  (Пок.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево ИЛИ Пок.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата)) Тогда 	
				ПоказателиМаксимумНечисловые.Добавить(Пок.Ссылка);
			КонецЕсли;		
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстВыбираемыхПолей 				= "";
	ТекстВыбираемыхНечисловые 			= "";
	ТекстВыбираемыхПолейВалютные        = "";
	КоличествоВыбираемыхПолей 			= 0;
	КоличествоВыбираемыхПолейНечисловые = 0;
	
	Если ПоказателиСумма.Количество()>0 Тогда	
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|ИНАЧЕ ВЫБОР КОГДА  втДанныеПредварительные.Показатель В (&ПоказателиСуммаСинтетика) 		ТОГДА СУММА(втДанныеПредварительные.Значение)";	
		Если  ЕстьВалютные Тогда
			ТекстВыбираемыхПолейВалютные = ТекстВыбираемыхПолейВалютные+"
			|ИНАЧЕ ВЫБОР КОГДА  втДанныеПредварительные.Показатель В (&ПоказателиСуммаСинтетика) 		ТОГДА СУММА(втДанныеПредварительные.ЗначениеВалюта)";
		КонецЕсли;	
		КоличествоВыбираемыхПолей = КоличествоВыбираемыхПолей+1;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "ПоказателиСуммаСинтетика";
		Нотбор.ТипОтбора 		= "В списке";
		Нотбор.ЗначениеОтбора	= ПоказателиСумма;	
	КонецЕсли;	
	Если ПоказателиМаксимум.Количество()>0 Тогда	
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|ИНАЧЕ ВЫБОР КОГДА  втДанныеПредварительные.Показатель В (&ПоказателиМаксимумСинтетика) 	ТОГДА  МАКСИМУМ(втДанныеПредварительные.Значение)";	
		Если  ЕстьВалютные Тогда
			ТекстВыбираемыхПолейВалютные = ТекстВыбираемыхПолейВалютные+"
			|ИНАЧЕ ВЫБОР КОГДА  втДанныеПредварительные.Показатель В (&ПоказателиСуммаСинтетика) 		ТОГДА МАКСИМУМ(втДанныеПредварительные.ЗначениеВалюта)";
		КонецЕсли;	
		КоличествоВыбираемыхПолей = КоличествоВыбираемыхПолей+1;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "ПоказателиМаксимумСинтетика";
		Нотбор.ТипОтбора 		= "В списке";
		Нотбор.ЗначениеОтбора	=  ПоказателиМаксимум;	
	КонецЕсли;	
	Если ПоказателиМинимум.Количество()>0 Тогда	
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|ИНАЧЕ ВЫБОР КОГДА  втДанныеПредварительные.Показатель В (&ПоказателиМинимумСинтетика) 	ТОГДА  МИНИМУМ(втДанныеПредварительные.Значение)";	
		Если  ЕстьВалютные Тогда
			ТекстВыбираемыхПолейВалютные = ТекстВыбираемыхПолейВалютные+"
			|ИНАЧЕ ВЫБОР КОГДА  втДанныеПредварительные.Показатель В (&ПоказателиСуммаСинтетика) 		ТОГДА МИНИМУМ(втДанныеПредварительные.ЗначениеВалюта)";
		КонецЕсли;	
		КоличествоВыбираемыхПолей = КоличествоВыбираемыхПолей+1;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "ПоказателиМинимумСинтетика";
		Нотбор.ТипОтбора 		= "В списке";
		Нотбор.ЗначениеОтбора	=  ПоказателиМинимум;
	КонецЕсли;	
	Если ПоказателиБезИтога.Количество()>0 Тогда		
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|ИНАЧЕ ВЫБОР КОГДА  втДанныеПредварительные.Показатель В (&ПоказателиБезИтога) 			ТОГДА  0";	
		Если  ЕстьВалютные Тогда
			ТекстВыбираемыхПолейВалютные = ТекстВыбираемыхПолейВалютные+"
			|ИНАЧЕ ВЫБОР КОГДА  втДанныеПредварительные.Показатель В (&ПоказателиСуммаСинтетика) ТОГДА  0";
		КонецЕсли;
		КоличествоВыбираемыхПолей = КоличествоВыбираемыхПолей+1;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "ПоказателиБезИтога";
		Нотбор.ТипОтбора 		= "В списке";
		Нотбор.ЗначениеОтбора	=  ПоказателиБезИтога;
	КонецЕсли;	
	Если ПоказателиСреднее.Количество()>0 Тогда	
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+"
		|ИНАЧЕ ВЫБОР КОГДА  втДанныеПредварительные.Показатель В (&ПоказателиСреднееСинтетика) 	ТОГДА  СРЕДНЕЕ(втДанныеПредварительные.Значение)";	
		Если  ЕстьВалютные Тогда
			ТекстВыбираемыхПолейВалютные = ТекстВыбираемыхПолейВалютные+"
			|ИНАЧЕ ВЫБОР КОГДА  втДанныеПредварительные.Показатель В (&ПоказателиСуммаСинтетика) ТОГДА СРЕДНЕЕ(втДанныеПредварительные.ЗначениеВалюта)";
		КонецЕсли;	
		КоличествоВыбираемыхПолей = КоличествоВыбираемыхПолей+1;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "ПоказателиСреднееСинтетика";
		Нотбор.ТипОтбора 		= "В списке";
		Нотбор.ЗначениеОтбора	=  ПоказателиСреднее;	
	КонецЕсли;		
	
	
	Если ПоказателиБезИтогаНечисловые.Количество()>0 Тогда	
		ТекстВыбираемыхНечисловые = ТекстВыбираемыхНечисловые+"
		|ИНАЧЕ ВЫБОР КОГДА  втДанныеПредварительные.Показатель В (&ПоказателиБезИтогаНечисловые) 	ТОГДА  МАКСИМУМ(втДанныеПредварительные.ЗначениеНеЧисло)";	
		КоличествоВыбираемыхПолейНечисловые = КоличествоВыбираемыхПолейНечисловые+1;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "ПоказателиБезИтогаНечисловые";
		Нотбор.ТипОтбора 		= "В списке";
		Нотбор.ЗначениеОтбора	=  ПоказателиБезИтогаНечисловые;
	КонецЕсли;
	Если ПоказателиМаксимумНечисловые.Количество()>0 Тогда	
		ТекстВыбираемыхНечисловые = ТекстВыбираемыхНечисловые+"
		|ИНАЧЕ ВЫБОР КОГДА  втДанныеПредварительные.Показатель В (&ПоказателиМаксимумНечисловые) 	ТОГДА   МАКСИМУМ(втДанныеПредварительные.ЗначениеНеЧисло)";	
		КоличествоВыбираемыхПолейНечисловые = КоличествоВыбираемыхПолейНечисловые+1;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "ПоказателиМаксимумНечисловые";
		Нотбор.ТипОтбора 		= "В списке";
		Нотбор.ЗначениеОтбора	=  ПоказателиМаксимумНечисловые;	
	КонецЕсли;
    Если ПоказателиМинимумНечисловые.Количество()>0 Тогда	
		ТекстВыбираемыхНечисловые = ТекстВыбираемыхНечисловые+"
		|ИНАЧЕ ВЫБОР КОГДА  втДанныеПредварительные.Показатель В (&ПоказателиМинимумНечисловые) 	ТОГДА   МИНИМУМ(втДанныеПредварительные.ЗначениеНеЧисло)";	
		КоличествоВыбираемыхПолейНечисловые = КоличествоВыбираемыхПолейНечисловые+1;
		Нотбор = ТзПараметровЗапроса.Добавить();
		Нотбор.ИмяОтбора 		= "ПоказателиМинимумНечисловые";
		Нотбор.ТипОтбора 		= "В списке";
		Нотбор.ЗначениеОтбора	=  ПоказателиМинимумНечисловые;
	КонецЕсли;
	
	ТекстОкончанияВыборов = "";
	Для Инд = 1 По КоличествоВыбираемыхПолей Цикл
		ТекстОкончанияВыборов = ТекстОкончанияВыборов+"
		|КОНЕЦ";
	КонецЦикла;	
		
	ТекстОкончанияВыборовНечисловые = "";
	Для Инд = 1 По КоличествоВыбираемыхПолейНечисловые Цикл
		ТекстОкончанияВыборовНечисловые = ТекстОкончанияВыборовНечисловые+"
		|КОНЕЦ";
	КонецЦикла;	

	
	Если КоличествоВыбираемыхПолей = 1 Тогда
		
		Если ЕстьЧисловые Тогда
			ТекстТогда = СтрНайти(ТекстВыбираемыхПолей,"ТОГДА");
			ТекстВыбираемыхПолей = Прав(ТекстВыбираемыхПолей,СтрДлина(ТекстВыбираемыхПолей)-(ТекстТогда+4))+"
			| КАК Значение";
		КонецЕсли;
		
		Если  ЕстьВалютные Тогда
			ТекстТогдаВал = СтрНайти(ТекстВыбираемыхПолейВалютные,"ТОГДА");
			ТекстВыбираемыхПолейВалютные = Прав(ТекстВыбираемыхПолейВалютные,СтрДлина(ТекстВыбираемыхПолейВалютные)-(ТекстТогдаВал+4))+"
			| КАК ЗначениеВалюта";
		КонецЕсли;
		
	Иначе
		
		Если ЕстьЧисловые Тогда
			ТекстВыбираемыхПолей = Прав(ТекстВыбираемыхПолей,СтрДлина(ТекстВыбираемыхПолей)-6)+" 
			|"+ТекстОкончанияВыборов+"
			| КАК Значение";
		КонецЕсли;
		
		Если  ЕстьВалютные Тогда
			ТекстВыбираемыхПолейВалютные = Прав(ТекстВыбираемыхПолейВалютные,СтрДлина(ТекстВыбираемыхПолейВалютные)-6)+" 
			|"+ТекстОкончанияВыборов+"
			| КАК ЗначениеВалюта";
		КонецЕсли;
		
	КонецЕсли;
	
	Если КоличествоВыбираемыхПолейНечисловые = 1 Тогда
			Если ЕстьНеЧисловые Тогда
			ТекстТогдаНЧСЛ = СтрНайти(ТекстВыбираемыхНечисловые,"ТОГДА");
			ТекстВыбираемыхНечисловые = Прав(ТекстВыбираемыхНечисловые,СтрДлина(ТекстВыбираемыхНечисловые)-(ТекстТогдаНЧСЛ+4))+"
			| КАК ЗначениеНеЧисло";	
		КонецЕсли;	
	Иначе	
		 Если ЕстьНеЧисловые Тогда
			ТекстВыбираемыхНечисловые = Прав(ТекстВыбираемыхНечисловые,СтрДлина(ТекстВыбираемыхНечисловые)-6)+" 
			|"+ТекстОкончанияВыборовНечисловые+"
			| КАК ЗначениеНеЧисло";
		КонецЕсли;	
	КонецЕсли;	
	
	СтруктураВыводимыхПолейАналитик = Новый Структура;
	
	Для Каждого СтрПараметр Из ТзПараметровОбластей Цикл	
		Если НЕ СтруктураВыводимыхПолейАналитик.Свойство(СтрПараметр.ИмяПоляВзапросе) Тогда
			СтруктураВыводимыхПолейАналитик.Вставить(СтрПараметр.ИмяПоляВзапросе);
			
			ТекстАналитик = ТекстАналитик+"
			|втДанныеПредварительные."+СтрПараметр.ИмяПоляВзапросе+",";	
			
			ТекстГруппировокАналитик = ТекстГруппировокАналитик+"
			|втДанныеПредварительные."+СтрПараметр.ИмяПоляВзапросе+",";	
			
		КонецЕсли;
	КонецЦикла;	
	
	Для Каждого РасшифровкаАналитки Из глТзАналитик Цикл
		Если НЕ СтруктураВыводимыхПолейАналитик.Свойство(РасшифровкаАналитки.АналитикаКод) Тогда
			ТекстАналитик = ТекстАналитик+"
			|втДанныеПредварительные."+РасшифровкаАналитки.АналитикаКод+",";								
			ТекстГруппировокАналитик = ТекстГруппировокАналитик+"
			|втДанныеПредварительные."+РасшифровкаАналитки.АналитикаКод+",";
		КонецЕсли;
	КонецЦикла;

	Если  ЕстьЧисловые Тогда
		ТекстВыбираемыхПолей = ТекстВыбираемыхПолей+",";
	КонецЕсли;
	
	Если  ЕстьВалютные Тогда
		ТекстВыбираемыхПолейВалютные = ТекстВыбираемыхПолейВалютные+",";
	КонецЕсли;
	
	Если  ЕстьНеЧисловые Тогда
		ТекстВыбираемыхНечисловые = ТекстВыбираемыхНечисловые+",";
	КонецЕсли;

	ТекстИтоговогоЗапроса =ТекстИтоговогоЗапроса+"
	|;
	|///////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	| "+ТекстАналитик+"
	| "+ТекстВыбираемыхПолей+"
	| "+ТекстВыбираемыхПолейВалютные+"
	| "+ТекстВыбираемыхНечисловые+"
	|	втДанныеПредварительные.Уид_Области,
	|	втДанныеПредварительные.ИмяОбластиДляВывода
	|ПОМЕСТИТЬ втДанныеПредварительные_Строки_
	|ИЗ
	| 	втДанныеПредварительные_Строки КАК втДанныеПредварительные
	|СГРУППИРОВАТЬ ПО "+ТекстГруппировокАналитик+ "втДанныеПредварительные.Уид_Области
	|	,втДанныеПредварительные.Показатель
	|	,втДанныеПредварительные.ИмяОбластиДляВывода
	|;
	|/////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ втДанныеПредварительные_Строки
	|";		
	
КонецПроцедуры	

Функция ПолучитьТекстЗапросаВыводаМакетаСтроки(ПоказателиТекущегоЗапроса,ТзАналитик,СтруктураВыводаТекущейОбласти,Уид_Области,ТзПараметровОбластей,КэшУникальныхКодовПоказателей)
	
	ТекстИтоговогоЗапроса 	= "";
	СтрокаПолейЗапросаИтог  = "";
	СтрокаПолейЗапроса	    = "";
	СтрокаПолейЗапросаСгруппированные  = "";
	
	Для Каждого   тПоказательЗапроса Из   ПоказателиТекущегоЗапроса  Цикл	
		
		 СтрПолеКлюч 		= тПоказательЗапроса.КодПоляПоказателя;
		 СтрПолеЗначение    = КэшУникальныхКодовПоказателей[СтрПолеКлюч];
		 
		 НачалоКодаПоказателя  	= СтрНайти(СтрПолеКлюч,"_MES_");
		 КодБезПрефикса         = Прав(СтрПолеКлюч,СтрДлина(СтрПолеКлюч)-НачалоКодаПоказателя-4);
		 КодБезПрефикса         = СтрЗаменить(КодБезПрефикса,"_UID_","");
		 Если СтрПолеЗначение.Свойство("ЗначениеВалюта") Тогда
			 КодБезПрефикса         = СтрЗаменить(КодБезПрефикса,"_Вал","");
			 СтрокаПолейЗапроса 	= СтрокаПолейЗапроса +"
			 | ВЫБОР КОГДА  втДанныеПредварительные.ИмяОбластиДляВывода = """+СтрЗаменить(СтрПолеКлюч,"_Вал","") +""" ТОГДА втДанныеПредварительные.ЗначениеВалюта ИНАЧЕ NULL КОНЕЦ  КАК "+СтрПолеКлюч+",";	
		 ИначеЕсли СтрПолеЗначение.ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			 СтрокаПолейЗапроса 	= СтрокаПолейЗапроса +"
			 | ВЫБОР КОГДА   втДанныеПредварительные.ИмяОбластиДляВывода = """+СтрПолеКлюч +""" ТОГДА втДанныеПредварительные.Значение ИНАЧЕ 0 КОНЕЦ  КАК "+СтрПолеКлюч+",";
		 Иначе 
			 СтрокаПолейЗапроса 	= СтрокаПолейЗапроса +"
			 | ВЫБОР КОГДА  втДанныеПредварительные.ИмяОбластиДляВывода = """+СтрПолеКлюч +""" ТОГДА втДанныеПредварительные.ЗначениеНеЧисло ИНАЧЕ NULL КОНЕЦ  КАК "+СтрПолеКлюч+",";			 
		 КонецЕсли; 	 
		 
		 Если СтрПолеЗначение.ПоказательВидИтога = Перечисления.ВидыИтоговПоказателя.Максимум Тогда
			 СтрокаПолейЗапросаИтог 	= СтрокаПолейЗапросаИтог +"
			 |  МАКСИМУМ("+СтрПолеКлюч+"),";		 
		 ИначеЕсли СтрПолеЗначение.ПоказательВидИтога = Перечисления.ВидыИтоговПоказателя.Минимум Тогда
			 СтрокаПолейЗапросаИтог 	= СтрокаПолейЗапросаИтог +"
			  | МИНИМУМ("+СтрПолеКлюч+") ,";			 
		 ИначеЕсли СтрПолеЗначение.ПоказательВидИтогаПериод = Перечисления.ВидыИтоговПоказателяПоПериоду.НеРассчитывать Тогда
			 СтрокаПолейЗапросаИтог 	= СтрокаПолейЗапросаИтог +"
			  | МАКСИМУМ("+СтрПолеКлюч+") ,";		 
		 ИначеЕсли НЕ СтрПолеЗначение.ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			 СтрокаПолейЗапросаИтог 	= СтрокаПолейЗапросаИтог +"
			 | МАКСИМУМ("+СтрПолеКлюч+") ,";				 
		 Иначе 			
			 СтрокаПолейЗапросаИтог 	= СтрокаПолейЗапросаИтог +"
			 | СУММА("+СтрПолеКлюч+") ,";		 			 
		 КонецЕсли;
		 
		 Если СтрПолеЗначение.ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			  СтрокаПолейЗапросаСгруппированные = СтрокаПолейЗапросаСгруппированные+"
			 |СУММА(втДанныеПредварительные."+СтрПолеКлюч+") КАК "+СтрПолеКлюч+" ,";
		 Иначе
			 СтрокаПолейЗапросаСгруппированные = СтрокаПолейЗапросаСгруппированные+"
			 |МАКСИМУМ(втДанныеПредварительные."+СтрПолеКлюч+") КАК "+СтрПолеКлюч+" ,";
		 КонецЕсли;	 
			 
	 КонецЦикла;	
	
	ТекстАналитик = "";		
	ТекстИтогов   = "";
	ТекстСортировок = "";
	
	ВсегоГруппировок =  СтруктураВыводаТекущейОбласти.Количество();                                
	тИндекс          =  1;
	
	СтруктураИтогов = Новый Структура;
	
	Для Каждого УровеньГруппировки Из СтруктураВыводаТекущейОбласти Цикл
			
		Для Каждого РасшифровкаАналитки Из УровеньГруппировки.Группировки Цикл
			
			текАналитикаСвойство = ТзАналитик.Найти(РасшифровкаАналитки.Ключ,"АналитикаКод");
				
			ТекстАналитик = ТекстАналитик+"
			|втДанныеПредварительные."+РасшифровкаАналитки.Ключ+",";											
			ТекстАналитик = ТекстАналитик+"
			|ПРЕДСТАВЛЕНИЕССЫЛКИ(втДанныеПредварительные."+РасшифровкаАналитки.Ключ+"),";						
			
			ТекстИтогов = ТекстИтогов+"
			|,"+РасшифровкаАналитки.Ключ+?(текАналитикаСвойство.ИерархииАналитики = ТипГруппировкиКомпоновкиДанных.Иерархия," ИЕРАРХИЯ","");		
			
			СтруктураИтогов.Вставить(РасшифровкаАналитки.Ключ);

		КонецЦикла;
		
		тИндекс = тИндекс+1;
		
	КонецЦикла;
			
	ТзПараметровОбластей_ = ТзПараметровОбластей.Скопировать(,"ИмяПоляВзапросе,ПутьКДанным");
	ТзПараметровОбластей_.Свернуть("ИмяПоляВзапросе,ПутьКДанным");
	
	Для Каждого СтрПараметр Из ТзПараметровОбластей_ Цикл			
		
		Если СтруктураИтогов.Свойство(СтрПараметр.ИмяПоляВзапросе) Тогда
			Продолжить;
		КонецЕсли;	
		
		СтрокаПолейЗапросаИтог = СтрокаПолейЗапросаИтог+"
		| МАКСИМУМ(втДанныеПредварительные."+СтрПараметр.ИмяПоляВзапросе+"),";		
	КонецЦикла;	
	
	Для Каждого СтрПараметр Из ТзПараметровОбластей Цикл			
		Если СтрПараметр.ВыбранВМакете Тогда
			Если СтруктураИтогов.Свойство(СтрПараметр.ИмяПоляВзапросе) Тогда  //Уже добавили такое поле аналитики из поля группировки
				 Продолжить;
			КонецЕсли;		
			ТекстАналитик = ТекстАналитик+"
			|	втДанныеПредварительные."+СтрПараметр.ИмяПоляВзапросе+",";	
		КонецЕсли;		
	КонецЦикла;	
	
	
	Для Каждого СтрУровень Из  СтруктураВыводаТекущейОбласти Цикл	
		Для Каждого СтрГруппировка Из  СтрУровень.Группировки Цикл
			
			тПараметрСортировка =   ТзПараметровОбластей.НайтиСтроки(Новый Структура("ПутьКДанным,ЭтоСортировка",СтрГруппировка.Ключ,Истина))[0];
			ИмяПоляВзапросе 	=   тПараметрСортировка.ИмяПоляВзапросе;
			ПорядокСортировки   =   тПараметрСортировка.ПорядокСортировки;
			
			ТекстСортировок = ТекстСортировок+"
			|"+ИмяПоляВзапросе+?(ПорядокСортировки = НаправлениеСортировкиКомпоновкиДанных.Убыв," УБЫВ ","")+",";	
			
		КонецЦикла;	
	КонецЦикла;
	
	//Для Каждого тОбластьСтруктура Из СтруктураВыводаТекущейОбласти Цикл
	//	Для Каждого РасшифровкаАналитки Из тОбластьСтруктура.Группировки Цикл
	//		ТекстАналитик = ТекстАналитик+"
	//		|втДанныеПредварительные."+РасшифровкаАналитки.Ключ+",";											
	//		ТекстАналитик = ТекстАналитик+"
	//		|ПРЕДСТАВЛЕНИЕССЫЛКИ(втДанныеПредварительные."+РасшифровкаАналитки.Ключ+"),";	
	//	КонецЦикла;
	//КонецЦикла;
	
	СтрокаПолейЗапросаИтог = ЛЕВ(СтрокаПолейЗапросаИтог,СтрДлина(СтрокаПолейЗапросаИтог)-1);
	
	ТекстСортировок = ЛЕВ(ТекстСортировок,СтрДлина(ТекстСортировок)-1);
	
	ТекстИтоговогоЗапроса =ТекстИтоговогоЗапроса+"
	|;
	|///////////////////////////////////////////////////////////
    |ВЫБРАТЬ 
	| "+ТекстАналитик+"
	| "+СтрокаПолейЗапроса+"
	|втДанныеПредварительные.Уид_Области
	|ПОМЕСТИТЬ втДанныеПредварительные_"+Уид_Области+" 
	|ИЗ
	|	втДанныеПредварительные_Строки_ КАК втДанныеПредварительные	
	|;
	|///////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	| "+ТекстАналитик+"
	| "+СтрокаПолейЗапросаСгруппированные+"
	|	втДанныеПредварительные.Уид_Области
	|ИЗ
	| 	втДанныеПредварительные_"+Уид_Области+" КАК втДанныеПредварительные
	|СГРУППИРОВАТЬ ПО "+ТекстАналитик+" втДанныеПредварительные.Уид_Области
	|УПОРЯДОЧИТЬ ПО "+ТекстСортировок+" 
	|ИТОГИ 
	| "+СтрокаПолейЗапросаИтог+"
	|ПО
	|	Уид_Области";		
	
	ТекстИтоговогоЗапроса = ТекстИтоговогоЗапроса+ТекстИтогов;
	
	ТекстИтоговогоЗапроса = ТекстИтоговогоЗапроса+"
	|;
	|/////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ втДанныеПредварительные_"+Уид_Области+"
	|;
	|/////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ втДанныеПредварительные_Строки_";
	
	Возврат ТекстИтоговогоЗапроса;
	
КонецФункции

Функция ПолучитьМассивИзСтруктуры(СтруктураИсточник)
	
	Массив = Новый массив;
	
	Для Каждого Стр Из СтруктураИсточник Цикл
		Массив.Добавить(Стр.Ключ);
	КонецЦикла;	
	
	Возврат Массив;
	
КонецФункции

Процедура ЗаполнитьКэшПоказателей(ТзАналитик,ПоказателиТекущейГруппы,ГлКэшПоказателей_,ГлКэшАналитик_,КэшПоказателей,КэшАналитик)
	
	КэшПоказателей = ГлКэшПоказателей_.СкопироватьКолонки();
	КэшАналитик    = ГлКэшАналитик_.СкопироватьКолонки();
	
	МассивУдаляемыхКолонок = Новый Массив;
	
	Для Каждого Кол Из КэшАналитик.Колонки Цикл
		
		Если  Кол.Имя = "АналитикаВалюта" ИЛИ Кол.Имя = "ГруппаРаскрытияЧислоАналитик" ИЛИ Кол.Имя = "ТипЗначенияЧисло" Тогда
			  Продолжить;
		КонецЕсли;	
		
		Если ТзАналитик.Найти(СтрЗаменить(Кол.Имя,"ВидАналитики_",""),"АналитикаКод") = Неопределено Тогда
			 МассивУдаляемыхКолонок.Добавить(Кол);
		КонецЕсли;	
	
	КонецЦикла;	
	
	Для Каждого удКол Из МассивУдаляемыхКолонок Цикл
		КэшАналитик.Колонки.Удалить(удКол);
	КонецЦикла;	
	
	Для Каждого тПоказатель Из ПоказателиТекущейГруппы Цикл
		
		глПоказатель  	 = ГлКэшПоказателей_.Найти(тПоказатель,"Ссылка");
		нКэшПоказателей  = КэшПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(нКэшПоказателей,глПоказатель);
		
		нКэшАналитик = КэшАналитик.Добавить();
		ЗаполнитьЗначенияСвойств(нКэшАналитик,глПоказатель);
		
	КонецЦикла;	
	
	СтрокаСвертки = "";
	Для Каждого Кол Из КэшАналитик.Колонки Цикл
		СтрокаСвертки = СтрокаСвертки+Кол.Имя+",";
	КонецЦикла;	
	
	КэшАналитик.Свернуть(Лев(СтрокаСвертки,СтрДлина(СтрокаСвертки)-1));
	
КонецПроцедуры	

Функция ПолучитьПараметрыТекущейОбласти(СтрГруппаУид,ТзПараметровОбластей,тСтруктураГруппирвок)
	
	тПараметрыОбластей = ТзПараметровОбластей.СкопироватьКолонки();
	
	тМакетыГруппировок = тСтруктураГруппирвок.НайтиСтроки(Новый Структура("ИмяОбластиРаскрытия",СтрГруппаУид.ИмяОбласти));
	Для Каждого тМакет Из  тМакетыГруппировок Цикл
		тПараметрыМакета = ТзПараметровОбластей.НайтиСтроки(Новый Структура("ИмяМакета",тМакет.ИмяМакетаРаскрытия));
		Для Каждого тПараметрМакета Из  тПараметрыМакета Цикл
			нтПараметр = тПараметрыОбластей.Добавить();
			ЗаполнитьЗначенияСвойств(нтПараметр,тПараметрМакета);
		КонецЦикла;	
	КонецЦикла;	
	
	//Добавляем поля сортиовок к полям, выведенным в макет, если отличаются.
	ДополнитьПараметрыОбластейПолямиПорядка(тПараметрыОбластей,СтрГруппаУид.ТзАналитик);

	Возврат тПараметрыОбластей;
	
КонецФункции	

Функция ОбластьСодержитМакет(ТзАналитик)
	
	ТзАналитикБезОтбора = ТзАналитик.НайтиСтроки(Новый Структура("АналитикаБезОтбора",Истина));
	
	Возврат НЕ ТзАналитик.Количество() = ТзАналитикБезОтбора.Количество();
	
КонецФункции	

Процедура ПолучитьОписаниеСхемыКДВыводаМакетСтроки(СтруктураПараметров)
	
	ПоказателиТекущегоЗапроса 		= СтруктураПараметров.ТаблицаПоказателиТекущейОбласти;
	ТзАналитик                		= СтруктураПараметров.ТзАналитик;
	СтруктураВыводаТекущейОбласти   = СтруктураПараметров.СтруктураВыводаТекущейОбласти;
	Уид_Области                     = СтруктураПараметров.ИмяОбласти;
	ТзПараметровОбластей            = СтруктураПараметров.тПараметрыОбластей;
	КэшУникальныхКодовПоказателей   = СтруктураПараметров.КэшУникальныхКодовПоказателей;
	СтрокаВывода                    = СтруктураПараметров.СтрокаВывода;
	ПрефиксЗапроса                  = СтруктураПараметров.ПрефиксЗапроса;
	
	Если ПоказателиТекущегоЗапроса.Количество() = 0 Тогда
		 Возврат;
	КонецЕсли;	
	
	ТекстИтоговогоЗапроса 	= "";
	СтрокаПолейЗапросаИтог  = "";
	СтрокаПолейЗапроса	    = "";
	СтрокаПолейЗапросаСгруппированные  = "";
	ТекстАналитик = "";		
	ТекстАналитикТипизиованные = "";
	СтруктураИменПолейСКД  		=  Новый Структура;
	СтруктураИменРесурсовСКД    =  Новый Структура;
	
	СхемаСКД = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных 							= СхемаСКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя 						= "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных 		= "Local";
	
	ТекущийНаборДанных 						= СхемаСКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	ТекущийНаборДанных.Имя 					= "ОсновнойНабор";
	ТекущийНаборДанных.Запрос  				= "";
	ТекущийНаборДанных.ИсточникДанных 		= "ИсточникДанных";			
	
	//Добавляем вычисляемое поле, содержащее имя текущего макета оформления
	НовоеПолеВычисления=СхемаСКД.ВычисляемыеПоля.Добавить();
	НовоеПолеВычисления.Заголовок="ИмяМакета";
	ЗначениеПоля  = "УР1";
	НовоеПолеВычисления.Выражение=""""+ЗначениеПоля+"""";
	НовоеПолеВычисления.ПутьКДанным="ИмяМакета";
	
	ПолеРесурса             = СхемаСКД.ПоляИтога.Добавить();
	ПолеРесурса.ПутьКДанным = "ИмяМакета";
	ПолеРесурса.Выражение   = "МАКСИМУМ(ИмяМакета)";

	НастройкиПоУмолчанию = СхемаСКД.НастройкиПоУмолчанию;
	НастройкиПоУмолчанию.ПараметрыВывода.УстановитьЗначениеПараметра("ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
    НастройкиПоУмолчанию.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов"	, РасположениеИтоговКомпоновкиДанных.Нет);
	НастройкиПоУмолчанию.ПараметрыВывода.УстановитьЗначениеПараметра("РасположениеПолейГруппировки"			, РасположениеПолейГруппировкиКомпоновкиДанных.Отдельно);
    
	ПоказателиТекущегоЗапросаКлючиКодов = ПоказателиТекущегоЗапроса.Скопировать();
	ПоказателиТекущегоЗапросаКлючиКодов.Свернуть("КодПоляПоказателя");
	
	тПараметрыСортировки =   ТзПараметровОбластей.НайтиСтроки(Новый Структура("ЭтоСортировка",Истина));

	//Заполняем  поля -ресурсы и итоги по ним...
	Для Каждого   тПоказательЗапроса Из   ПоказателиТекущегоЗапросаКлючиКодов  Цикл	
		
		 СтрПолеКлюч 		= тПоказательЗапроса.КодПоляПоказателя;
		 СтрПолеЗначение    = КэшУникальныхКодовПоказателей[СтрПолеКлюч];
		 
		 НачалоКодаПоказателя  	= СтрНайти(СтрПолеКлюч,"_MES_");
		 КодБезПрефикса         = Прав(СтрПолеКлюч,СтрДлина(СтрПолеКлюч)-НачалоКодаПоказателя-4);
		 КодБезПрефикса         = СтрЗаменить(КодБезПрефикса,"_UID_","");
		 Если СтрПолеЗначение.Свойство("ЗначениеВалюта") Тогда
			 КодБезПрефикса         = СтрЗаменить(КодБезПрефикса,"_Вал","");
			 СтрокаПолейЗапроса 	= СтрокаПолейЗапроса +"
			 |	ВЫБОР КОГДА  втДанныеПредварительные.ИмяОбластиДляВывода = """+СтрЗаменить(СтрПолеКлюч,"_Вал","") +""" ТОГДА втДанныеПредварительные.ЗначениеВалюта ИНАЧЕ NULL КОНЕЦ  КАК "+СтрЗаменить(СтрПолеКлюч,"_MES","")+",";	
		 ИначеЕсли СтрПолеЗначение.ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда	 
			 СтрокаПолейЗапроса 	= СтрокаПолейЗапроса +"
			 |	ВЫБОР КОГДА   втДанныеПредварительные.ИмяОбластиДляВывода = """+СтрПолеКлюч +""" ТОГДА втДанныеПредварительные.Значение ИНАЧЕ NULL КОНЕЦ  КАК "+СтрПолеКлюч+",";			 
		 Иначе 
			 СтрокаПолейЗапроса 	= СтрокаПолейЗапроса +"
			 |	ВЫБОР КОГДА  втДанныеПредварительные.ИмяОбластиДляВывода = """+СтрПолеКлюч +""" ТОГДА втДанныеПредварительные.ЗначениеНеЧисло ИНАЧЕ NULL КОНЕЦ  КАК "+СтрПолеКлюч+",";			 
		 КонецЕсли; 	 
		 
		 Если СтрПолеЗначение.ПоказательВидИтога = Перечисления.ВидыИтоговПоказателя.Максимум Тогда	  
			 ПолеРесурса             = СхемаСКД.ПоляИтога.Добавить();
			 ПолеРесурса.ПутьКДанным = СтрПолеКлюч;
			 ПолеРесурса.Выражение   = "МАКСИМУМ(" + СтрПолеКлюч + ")";	 
		 ИначеЕсли СтрПолеЗначение.ПоказательВидИтога = Перечисления.ВидыИтоговПоказателя.Минимум Тогда		 
			 ПолеРесурса             = СхемаСКД.ПоляИтога.Добавить();
			 ПолеРесурса.ПутьКДанным = СтрПолеКлюч;
			 ПолеРесурса.Выражение   = "МИНИМУМ(" + СтрПолеКлюч + ")";	 
		 ИначеЕсли СтрПолеЗначение.ПоказательВидИтога = Перечисления.ВидыИтоговПоказателя.НеРассчитывается Тогда 	 
			 ПолеРесурса             = СхемаСКД.ПоляИтога.Добавить();
			 ПолеРесурса.ПутьКДанным = СтрПолеКлюч;
			 ПолеРесурса.Выражение   = "МАКСИМУМ(" + СтрПолеКлюч + ")";			 
		 ИначеЕсли НЕ СтрПолеЗначение.ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда	  
			 ПолеРесурса             = СхемаСКД.ПоляИтога.Добавить();
			 ПолеРесурса.ПутьКДанным = СтрПолеКлюч;
			 ПолеРесурса.Выражение   = "МАКСИМУМ(" + СтрПолеКлюч + ")";	 
		 Иначе 				 			  
			 ПолеРесурса             = СхемаСКД.ПоляИтога.Добавить();
			 ПолеРесурса.ПутьКДанным = СтрПолеКлюч;
			 ПолеРесурса.Выражение   = "СУММА(" + СтрПолеКлюч + ")";
		 КонецЕсли;
		 
		 СтруктураИменРесурсовСКД.Вставить(СтрПолеКлюч);
		 
		 Если СтрПолеЗначение.ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			 СтрокаПолейЗапросаСгруппированные = СтрокаПолейЗапросаСгруппированные+"
			 |СУММА(втДанныеПредварительные."+СтрПолеКлюч+") КАК "+СтрПолеКлюч+" ,";
		 Иначе
			 СтрокаПолейЗапросаСгруппированные = СтрокаПолейЗапросаСгруппированные+"
			 |МАКСИМУМ(втДанныеПредварительные."+СтрПолеКлюч+") КАК "+СтрПолеКлюч+" ,";
		 КонецЕсли;	 
		  		  		     
	 КонецЦикла;	


	//Вычисляем совйства полей - группировок
	ТекущийУровеньГруппировки = 1;
	Для Каждого УровеньГруппировки Из СтруктураВыводаТекущейОбласти Цикл	
		
		СтруктураИтогов         = Новый Структура;
      
		Если НастройкиПоУмолчанию.Структура.Количество() = 0 Тогда
			Группировка = НастройкиПоУмолчанию.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		Иначе	
			Группировка = Группировка.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		КонецЕсли;	
		
		Группировка.ПараметрыВывода.УстановитьЗначениеПараметра("РасположениеПолейГруппировки"			, РасположениеПолейГруппировкиКомпоновкиДанных.Отдельно);
		Группировка.ПараметрыВывода.УстановитьЗначениеПараметра("РасположениеРеквизитов"				, РасположениеРеквизитовКомпоновкиДанных.Отдельно);
					
		Для Каждого РасшифровкаАналитки Из УровеньГруппировки.Группировки Цикл 	
			нПолеГруппировки 			= Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			нПолеГруппировки.Поле		= Новый ПолеКомпоновкиДанных(РасшифровкаАналитки.Ключ);		
			Если РасшифровкаАналитки.Ключ = "ПериодОтчета" И  СтруктураВыводаТекущейОбласти[0].КэшНастроекПериодов.Количество() = 1 Тогда
				тСвойстваПериодов = СтруктураВыводаТекущейОбласти[0].КэшНастроекПериодов[0];
				Если тСвойстваПериодов.ВыводитьИтогГод
					ИЛИ  тСвойстваПериодов.ВыводитьИтогПолугодие
					ИЛИ  тСвойстваПериодов.ВыводитьИтогКвартал
					ИЛИ  тСвойстваПериодов.ВыводитьИтогМесяц
					ИЛИ  тСвойстваПериодов.ВыводитьИтогДекада
					ИЛИ  тСвойстваПериодов.ВыводитьИтогНеделя
					ИЛИ  тСвойстваПериодов.ВыводитьИтогДень Тогда		
					нПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
					Группировка.ПараметрыВывода.Элементы[6].Использование=Истина;
					Группировка.ПараметрыВывода.Элементы[6].Значение=РасположениеГруппировкиКомпоновкиДанных.Начало;
				КонецЕсли;	
			КонецЕсли;
			
			тНастройкаИерархииПоля = СтруктураВыводаТекущейОбласти[0].КэшНастроекИерархий.Найти(РасшифровкаАналитки.Ключ,"КодАналитики");
			Если Не тНастройкаИерархииПоля = Неопределено Тогда
				нПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
				Группировка.ПараметрыВывода.Элементы[6].Использование=Истина;
				Группировка.ПараметрыВывода.Элементы[6].Значение=РасположениеГруппировкиКомпоновкиДанных.Начало;		
			КонецЕсли;	
			
			ВыбранноеПолеКомпоновкиДанных 				= НастройкиПоУмолчанию.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
			ВыбранноеПолеКомпоновкиДанных.Поле 			= Новый ПолеКомпоновкиДанных(РасшифровкаАналитки.Ключ);
			ВыбранноеПолеКомпоновкиДанных.Использование = Истина;
			
			ВыбранноеПолеГрКомпоновкиДанных 				= Группировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
			ВыбранноеПолеГрКомпоновкиДанных.Поле 			= Новый ПолеКомпоновкиДанных(РасшифровкаАналитки.Ключ);
			ВыбранноеПолеГрКомпоновкиДанных.Использование = Истина;
			
			СтруктураИтогов.Вставить(РасшифровкаАналитки.Ключ);
			
			СтруктураИменПолейСКД.Вставить(РасшифровкаАналитки.Ключ);
			
			ТекстАналитик = ТекстАналитик+"
			|	втДанныеПредварительные."+РасшифровкаАналитки.Ключ+",";	
			
	
			тАналиткаРасшифровка = ТзАналитик.Найти(РасшифровкаАналитки.Ключ,"АналитикаКод");
			ТипАналитикиВЗапоросе = СтрЗаменить(тАналиткаРасшифровка.АналитикаТипСтрока,"Ссылка","");
			
			Если СтрНайти(ТипАналитикиВЗапоросе,"|")>0 Тогда	//Составной тип не выражаем
				ТекстАналитикТипизиованные = ТекстАналитикТипизиованные+"
				|втДанныеПредварительные."+РасшифровкаАналитки.Ключ+" КАК "+РасшифровкаАналитки.Ключ+",";		
			Иначе   
				ТекстАналитикТипизиованные = ТекстАналитикТипизиованные+"
				|ВЫРАЗИТЬ(втДанныеПредварительные."+РасшифровкаАналитки.Ключ+" КАК "+ТипАналитикиВЗапоросе+") КАК "+РасшифровкаАналитки.Ключ+",";		
			КонецЕсли;	
							
		КонецЦикла;
		
		
		//Добавляем   поля реквизиты на каждый уровень группировки 
		ТзПараметровОбластейТекущегоУровня  = ТзПараметровОбластей.НайтиСтроки(Новый Структура("ИмяМакета",УровеньГруппировки.ИмяОбласти));
		Для Каждого СтрПараметр Из ТзПараметровОбластейТекущегоУровня Цикл			
			
			Если СтруктураИтогов.Свойство(СтрПараметр.ИмяПоляВзапросе) Тогда
				Продолжить;
			КонецЕсли;	
			
			нПолеГруппировки 							= Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			нПолеГруппировки.Поле						= Новый ПолеКомпоновкиДанных(СтрПараметр.ИмяПоляВзапросе);		
			
			ВыбранноеПолеКомпоновкиДанных 				= НастройкиПоУмолчанию.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
			ВыбранноеПолеКомпоновкиДанных.Поле 			= Новый ПолеКомпоновкиДанных(СтрПараметр.ИмяПоляВзапросе);
			ВыбранноеПолеКомпоновкиДанных.Использование = Истина;
			
			ВыбранноеПолеГрКомпоновкиДанных 				= Группировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
			ВыбранноеПолеГрКомпоновкиДанных.Поле 			= Новый ПолеКомпоновкиДанных(СтрПараметр.ИмяПоляВзапросе);
			ВыбранноеПолеГрКомпоновкиДанных.Использование 	= Истина;
			
			ТекстАналитик = ТекстАналитик+"
			|	втДанныеПредварительные."+СтрПараметр.ИмяПоляВзапросе+",";	
			
			ТекстАналитикТипизиованные = ТекстАналитикТипизиованные+"
			|	втДанныеПредварительные."+СтрПараметр.ИмяПоляВзапросе+",";	
			
			СтруктураИменПолейСКД.Вставить(СтрПараметр.ИмяПоляВзапросе);
			
		КонецЦикла;	
		
		//Добавляем поля- ресурсы
		Для Каждого ПолеРесурс Из СтруктураИменРесурсовСКД Цикл
			ВыбранноеПолеГрКомпоновкиДанных 				= Группировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
			ВыбранноеПолеГрКомпоновкиДанных.Поле 			= Новый ПолеКомпоновкиДанных(ПолеРесурс.Ключ);
			ВыбранноеПолеГрКомпоновкиДанных.Использование = Истина;
		КонецЦикла;
		
		//Добавляем служебное поле макета; 		
		ВыбранноеПолеГрКомпоновкиДанных 				= Группировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
		ВыбранноеПолеГрКомпоновкиДанных.Поле 			= Новый ПолеКомпоновкиДанных("ИмяМакета");
		ВыбранноеПолеГрКомпоновкиДанных.Использование 	= Истина;
		
		//ЭлементУсловногоОформленияУстанавливаем условное оформление вычисляемого поля - индикатора  уровня макета в группирвке
		ЭлементУсловногоОформления = Группировка.УсловноеОформление.Элементы.Добавить();
		ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", "УР"+Строка(ТекущийУровеньГруппировки));
        ЭлементУсловногоОформления.Использование = Истина;
		
		ОформляемоеПоле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ИмяМакета");
		ОформляемоеПоле.Использование = Истина;

		ТекущийУровеньГруппировки 		=  ТекущийУровеньГруппировки+1;
		
		//Добавляем сортировки	
		МассивДобавленныхПолейСортировок = Новый Массив;
		Для Каждого тПараметрСортировка Из тПараметрыСортировки Цикл
			Для Каждого СтрПоле Из Группировка.Выбор.Элементы Цикл
				Если Строка(СтрПоле.Поле) = тПараметрСортировка.ПутьКДанным Тогда
					Если тПараметрСортировка.ИмяВмакете = "ПериодОтчета.ДатаНачала"  Тогда	
						ИмяПоляВзапросе 						= тПараметрСортировка.ИмяПоляВзапросе;
						НовыйЭлементПорядка 					= Группировка.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
						НовыйЭлементПорядка.Поле 				= Новый ПолеКомпоновкиДанных(тПараметрСортировка.ИмяВмакете);
						Если ЗначениеЗаполнено(тПараметрСортировка.ПорядокСортировки) Тогда
							НовыйЭлементПорядка.ТипУпорядочивания 	= тПараметрСортировка.ПорядокСортировки;	
						КонецЕсли;	
					Иначе	
						ИмяПоляВзапросе 						= тПараметрСортировка.ИмяПоляВзапросе;
						НовыйЭлементПорядка 					= Группировка.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
						НовыйЭлементПорядка.Поле 				= Новый ПолеКомпоновкиДанных(тПараметрСортировка.ИмяПоляВзапросе);
						Если ЗначениеЗаполнено(тПараметрСортировка.ПорядокСортировки) Тогда
							НовыйЭлементПорядка.ТипУпорядочивания 	= тПараметрСортировка.ПорядокСортировки;	
						КонецЕсли;
						МассивДобавленныхПолейСортировок.Добавить(тПараметрСортировка.ИмяПоляВзапросе);
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;				
		КонецЦикла;
		
		//Добавляем поля сортировок; 		
		Для Каждого СтрПолеСортировки Из МассивДобавленныхПолейСортировок Цикл
			
			нПолеГруппировки 								= Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			нПолеГруппировки.Поле							= Новый ПолеКомпоновкиДанных(СтрПолеСортировки);	
			
			ВыбранноеПолеГрКомпоновкиДанных 				= Группировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
			ВыбранноеПолеГрКомпоновкиДанных.Поле 			= Новый ПолеКомпоновкиДанных(СтрПолеСортировки);
			ВыбранноеПолеГрКомпоновкиДанных.Использование 	= Истина;
			
			ВыбранноеПолеГрКомпоновкиДанных 				= НастройкиПоУмолчанию.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
			ВыбранноеПолеГрКомпоновкиДанных.Поле 			= Новый ПолеКомпоновкиДанных(СтрПолеСортировки);
			ВыбранноеПолеГрКомпоновкиДанных.Использование 	= Истина;
			
			ТекстАналитик = ТекстАналитик+"
			|	втДанныеПредварительные."+СтрПолеСортировки+",";
			
			ТекстАналитикТипизиованные = ТекстАналитикТипизиованные+"
			|	втДанныеПредварительные."+СтрПолеСортировки+",";

			СтруктураИменПолейСКД.Вставить(СтрПолеСортировки);
			
		КонецЦикла;
		
		//Добавляем служебное поле уровень в группировке; 		 
		Если НЕ СтруктураИменПолейСКД.Свойство("УровеньВГруппировке") Тогда
			ВыбранноеПолеГрКомпоновкиДанных 				= Группировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
			ВыбранноеПолеГрКомпоновкиДанных.Поле 			= Новый ПолеКомпоновкиДанных("СистемныеПоля.УровеньВГруппировке");   
			ВыбранноеПолеГрКомпоновкиДанных.Использование 	= Истина;
			СтруктураИменПолейСКД.Вставить("УровеньВГруппировке");
		КонецЕсли;

		
	КонецЦикла;
	
	
	//Добавляем поля- ресурсы
	Для Каждого ПолеРесурс Из СтруктураИменРесурсовСКД Цикл
		СтруктураИменПолейСКД.Вставить(ПолеРесурс.Ключ);
	КонецЦикла;

	СтруктураИменПолейСКДИндексированная = Новый Структура;
	
	ИндексПоля 				= 1;
	Для Каждого ПолеРесурс Из СтруктураИменПолейСКД Цикл
		СтруктураИменПолейСКДИндексированная.Вставить(ПолеРесурс.Ключ,ИндексПоля);
		 ИндексПоля = ИндексПоля+1;
	КонецЦикла;
    СтруктураИменПолейСКДИндексированная.Вставить("ИмяМакета",ИндексПоля);
		
	СтрокаПолейЗапросаИтог = ЛЕВ(СтрокаПолейЗапросаИтог,СтрДлина(СтрокаПолейЗапросаИтог)-1);
	
	ТекстАналитикГруппа = ТекстАналитик+"
	|	втДанныеПредварительные.Уид_Области";	

	
	ТекстИтоговогоЗапроса =ТекстИтоговогоЗапроса+"
	|;
	|///////////////////////////////////////////////////////////
    |ВЫБРАТЬ "+ТекстАналитик+СтрокаПолейЗапроса+"
	|	втДанныеПредварительные.Уид_Области
	|ПОМЕСТИТЬ втДанныеПредварительные_"+Уид_Области+" 
	|ИЗ
	|	втДанныеПредварительные_Строки_ КАК втДанныеПредварительные	
	|;
	|///////////////////////////////////////////////////////////
	|ВЫБРАТЬ "+ТекстАналитикТипизиованные+СтрокаПолейЗапросаСгруппированные+"
	|	втДанныеПредварительные.Уид_Области
	|ИЗ
	| 	втДанныеПредварительные_"+Уид_Области+" КАК втДанныеПредварительные
	|ГДЕ 
	|	втДанныеПредварительные.Уид_Области  = "+""""+Уид_Области+""""+"
	|СГРУППИРОВАТЬ ПО "+ТекстАналитикГруппа;		
	
	ТекстИтоговогоЗапроса = ТекстИтоговогоЗапроса+"
	|;
	|/////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ втДанныеПредварительные_"+Уид_Области+"
	|;
	|/////////////////////////////////////////////////////////////
	|
	|УНИЧТОЖИТЬ втДанныеПредварительные_Строки_";
	
	
	ТекущийНаборДанных.Запрос  =  ПрефиксЗапроса + ТекстИтоговогоЗапроса;
	
	КомпоновщикМакета	=	Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки 	= 	Новый ДанныеРасшифровкиКомпоновкиДанных;
	МакетКомпоновки		=   КомпоновщикМакета.Выполнить(СхемаСКД,СхемаСКД.НастройкиПоУмолчанию,ДанныеРасшифровки);
	
	СтрокаВывода.СКДДляВыводаОбласти 		=  СхемаСКД;
	СтрокаВывода.СтруктураИменПолейСКД      =  СтруктураИменПолейСКДИндексированная;
	СтрокаВывода.МакетКомпоновки      		=  МакетКомпоновки;
    СтрокаВывода.ДанныеРасшифровки      	=  ДанныеРасшифровки;
	
КонецПроцедуры


#КонецОбласти


#Область ВыводКроссТаблиц

//Таблицы
Процедура ПодготовитьТекстЗапросаРаскрытияТаблицы(СтруктураПараметров,ОбъектАБ,ПолеТабличногоДокументаМакет);
	  		
	//ФинальныйЗапрос 			= СтруктураПараметров.Запрос;	
	//СхемаЗапроса 				= Новый СхемаЗапроса;	
	ТзПараметровЗапроса 		= СтруктураПараметров.ТзПараметровЗапроса;
	
	СтруктураАналитик = Новый ТаблицаЗначений;
	СтруктураАналитик.Колонки.Добавить("КодАналитки");
	СтруктураАналитик.Колонки.Добавить("ТзАналитик");
    СтруктураАналитик.Колонки.Добавить("УидГруппыОтборов");
	
	ТекстШаблонаЗапроса 			= "";
	ТекстИтоговогоЗапросаСтоки		= "";
	ТекстЗапроса 					= "";	
	АдресСКДСтрок 					= "";
	АдресНастроекСКДСтрок 			= "";
	
	КэшУникальныхКодовПоказателей  = Новый Структура;
	КэшПоказателей                 = Новый Массив;
	МассивУидовГруппОтборов 	   = Новый Структура;
	
	глТзАналитик = Обработки.АналитическийБланк.ПолучитьОписаниеТаблицыНастроекАналитик(); 

	ТзПоказателейОбластей = Новый ТаблицаЗначений;
	ТзПоказателейОбластей.Колонки.Добавить("ИмяОбласти");
	ТзПоказателейОбластей.Колонки.Добавить("Показатель");
    ТзПоказателейОбластей.Колонки.Добавить("ВидОтчета");
	ТзПоказателейОбластей.Колонки.Добавить("КлючВерсииОтборов");
	ТзПоказателейОбластей.Колонки.Добавить("КодПоляПоказателя");

	ТзПараметровОбластей = Новый ТаблицаЗначений;
	ТзПараметровОбластей.Колонки.Добавить("ИмяВмакете");
	ТзПараметровОбластей.Колонки.Добавить("ПутьКДанным");                           
	ТзПараметровОбластей.Колонки.Добавить("ВыражениеПоля");
	ТзПараметровОбластей.Колонки.Добавить("ТипПараметра");
	ТзПараметровОбластей.Колонки.Добавить("ИмяПоляВзапросе");
	ТзПараметровОбластей.Колонки.Добавить("ИмяОбластиВмакете");
	ТзПараметровОбластей.Колонки.Добавить("ИмяМакета");
	ТзПараметровОбластей.Колонки.Добавить("ВыбранВМакете",ОбщегоНазначенияУх.ПолучитьОписаниеТиповБулево());
	ТзПараметровОбластей.Колонки.Добавить("ЭтоСортировка",ОбщегоНазначенияУх.ПолучитьОписаниеТиповБулево());
	ТзПараметровОбластей.Колонки.Добавить("УровеньВгруппировке",ОбщегоНазначенияУх.ПолучитьОписаниеТиповЧисла(3));
	ТзПараметровОбластей.Колонки.Добавить("ПорядокСортировки");

	ТзСтруктураВыводаГруппировок  = СтруктураПараметров.ТзСтруктураВыводаГруппировок;
		
	СтруктураПараметров_ = Новый Структура;
	СтруктураПараметров_.Вставить("ТипОбласти",						"Таблица");
	СтруктураПараметров_.Вставить("ТипМакета",						"Таблица");
	СтруктураПараметров_.Вставить("МассивУидовГруппОтборов",		МассивУидовГруппОтборов);                                         
	СтруктураПараметров_.Вставить("КэшУникальныхКодовПоказателей",	КэшУникальныхКодовПоказателей);
	СтруктураПараметров_.Вставить("КэшПоказателей",					КэшПоказателей);
	СтруктураПараметров_.Вставить("тзПоказателейОбластей",			тзПоказателейОбластей);
	СтруктураПараметров_.Вставить("ОбъектАБ",						ОбъектАБ);
	СтруктураПараметров_.Вставить("ПолеТабличногоДокументаМакет",	ПолеТабличногоДокументаМакет);
	СтруктураПараметров_.Вставить("глТзАналитик",					глТзАналитик);
	СтруктураПараметров_.Вставить("ТзПоказателейОбластей",			ТзПоказателейОбластей);
	СтруктураПараметров_.Вставить("ТзСтруктураВыводаГруппировок",	ТзСтруктураВыводаГруппировок);
	СтруктураПараметров_.Вставить("ТзПараметровОбластей",			ТзПараметровОбластей);
    СтруктураПараметров_.Вставить("СтруктураАналитикРаскрытияПоказателей",	СтруктураПараметров.СтруктураАналитикРаскрытияПоказателей);
	
	КэшГруппОтборовПоказателейРаскрытияМассив = ПолучитьКэшГруппОтборовПоказателейРаскрытияТаблиц(СтруктураПараметров_);
	
	глТзАналитик.Сортировать("ПорядокАналитики");
	
	ИндексЗапроса = 0;
	
	ИндексЗапросаПакета = 1;
	
	Для Каждого Стр Из КэшГруппОтборовПоказателейРаскрытияМассив Цикл
		Для Каждого СтрАналитика Из Стр.ТзАналитик Цикл		
			ДополнитьПараметрыОбластейПолямиПорядка(ТзПараметровОбластей,Стр.ТзАналитик);
		КонецЦикла;			
	КонецЦикла;	

	ГлКэшПоказателей_ = Неопределено;
	ГлКэшАналитик_    = Неопределено;
	
	ПолучитьКэшПоказателей(СтруктураПараметров_.тзПоказателейОбластей.ВыгрузитьКолонку("Показатель"),глТзАналитик,ГлКэшПоказателей_,ГлКэшАналитик_); 
	
	ГлКэшПоказателей_.Индексы.Добавить("Ссылка");

	
	ТзПараметровОбластей.Свернуть("ИмяВмакете,ПутьКДанным,ВыражениеПоля,ТипПараметра,ИмяПоляВзапросе,ВыбранВМакете,ЭтоСортировка,ИмяОбластиВмакете,ИмяМакета,УровеньВгруппировке,ПорядокСортировки");
			
	Для Каждого СтрГруппаУид Из КэшГруппОтборовПоказателейРаскрытияМассив Цикл
		
		ОписаниеТекущейОбласти = ОбъектАБ.КэшТаблицРаскрываемыхОбластей.НайтиСтроки(Новый Структура("ИмяОбласти",СтрГруппаУид.ИмяОбласти))[0];	
		ОписаниеТекущейГруппыОтборовАналитикРаскрытия  = ОбъектАБ.НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов",ОписаниеТекущейОбласти.УидГруппыОтборов)); 	
		КэшКлючевыхОтборовТекущегоРаскрытия = МассивУидовГруппОтборов["Таблица"+СтрЗаменить(СтрГруппаУид.ИмяОбласти,":","РазделительОбластей")];
		ТекстПодзапросаВыбораДанных    = "";
		лТзПараметровЗапроса = ТзПараметровЗапроса.СкопироватьКолонки();
		
		Для Каждого КлючВерсии Из  КэшКлючевыхОтборовТекущегоРаскрытия Цикл
		
			ОписаниеТекущейГруппыОтборов = ОбъектАБ.КэшГруппОтборовПоказателей.НайтиСтроки(Новый Структура("УидГруппыОтборов",КлючВерсии.Значение))[0];
					
			//Если  в раскрытии есть аналитики группы раскрыия, то необходимо проверить наличие разных индексов раскрываемых аналитик, и при необходимости разбить запросы данных
			Если СтрГруппаУид.ТзАналитик.НайтиСтроки(Новый Структура("ЭтоАналитикаВерсии",ЛОЖЬ)).Количество() = 0 Тогда		
				ПолучитьТекстЗначенийПоказателейТаблицы(ТекстПодзапросаВыбораДанных
				,ОписаниеТекущейГруппыОтборов
				,ОписаниеТекущейГруппыОтборов.ИндексРегистра
				,ОписаниеТекущейОбласти
				,СтрГруппаУид.ТзАналитик
				,глТзАналитик
				,Неопределено
				,ИндексЗапроса
				,лТзПараметровЗапроса
				,ОбъектАБ);

				ПоказателиТекущегоЗапроса = ТзПоказателейОбластей.Скопировать(Новый Структура("ИмяОбласти,КлючВерсииОтборов",СтрГруппаУид.ИмяОбласти,КлючВерсии.Значение)).ВыгрузитьКолонку("Показатель");
				
				Нотбор = лТзПараметровЗапроса.Добавить();
				Нотбор.ИмяОтбора 		=  "Пар_"+КлючВерсии.Значение+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0")+"_Показатели";
				Нотбор.ТипОтбора 		= "Равно";
				Нотбор.ЗначениеОтбора	= ПоказателиТекущегоЗапроса;		
				
			Иначе
								
				ПоказателиТекущейГруппы = ТзПоказателейОбластей.Скопировать(Новый Структура("ИмяОбласти,КлючВерсииОтборов",СтрГруппаУид.ИмяОбласти,КлючВерсии.Значение)).ВыгрузитьКолонку("Показатель");
				КэшПоказателей = Неопределено;
				КэшАналитик    = Неопределено;
				
				ПоказателиТекущейГруппы = ТзПоказателейОбластей.Скопировать(Новый Структура("ИмяОбласти,КлючВерсииОтборов",СтрГруппаУид.ИмяОбласти,КлючВерсии.Значение)).ВыгрузитьКолонку("Показатель");
				
				ЗаполнитьКэшПоказателей(СтрГруппаУид.ТзАналитик,ПоказателиТекущейГруппы,ГлКэшПоказателей_,ГлКэшАналитик_,КэшПоказателей,КэшАналитик);
	
				Для Каждого ГруппаПоказателей Из КэшАналитик Цикл
					
					СтруктураПоиска = Новый Структура;
					
					Для Каждого Кол Из КэшАналитик.Колонки Цикл
						СтруктураПоиска.Вставить(Кол.Имя,ГруппаПоказателей[Кол.Имя]);
					Конеццикла;			
					Если СтруктураПоиска.ГруппаРаскрытияЧислоАналитик = NULL Тогда
						СтруктураПоиска.ГруппаРаскрытияЧислоАналитик=0;
					КонецЕсли;	
					
					ДанныеТекущегоЗапроса     = КэшПоказателей.Скопировать(СтруктураПоиска);
					ДанныеТекущегоЗапроса.Свернуть("Ссылка,СтрокаОтчета");	
					ПоказателиТекущегоЗапроса =  ДанныеТекущегоЗапроса.ВыгрузитьКолонку("Ссылка");	
					
					ПолучитьТекстЗначенийПоказателейТаблицы(ТекстПодзапросаВыбораДанных
					,ОписаниеТекущейГруппыОтборов
					,ОписаниеТекущейГруппыОтборов.ИндексРегистра
					,ОписаниеТекущейОбласти
					,СтрГруппаУид.ТзАналитик
					,глТзАналитик                                                                                                      
					,ГруппаПоказателей
					,ИндексЗапроса
					,лТзПараметровЗапроса
					,ОбъектАБ);	
					
					Нотбор = лТзПараметровЗапроса.Добавить();
					Нотбор.ИмяОтбора 		=  "Пар_"+КлючВерсии.Значение+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0")+"_Показатели";
					Нотбор.ТипОтбора 		= "Равно";
					Нотбор.ЗначениеОтбора	= ПоказателиТекущегоЗапроса;						
					ИндексЗапроса = ИндексЗапроса+1;
				КонецЦикла;					
			КонецЕсли;			
									
		КонецЦикла;		
		
		СтруктураВыводаТекущейОбласти = ТзСтруктураВыводаГруппировок.НайтиСтроки(Новый Структура("УидОбласти",СтрГруппаУид.ИмяОбласти));
		
		ТЗПоказателиТекущейОбласти = ТзПоказателейОбластей.Скопировать(Новый Структура("ИмяОбласти",СтрГруппаУид.ИмяОбласти));
		ПоказателиТекущейОбласти = ТзПоказателейОбластей.Скопировать(Новый Структура("ИмяОбласти",СтрГруппаУид.ИмяОбласти)).ВыгрузитьКолонку("Показатель");
		
		ТекстПоказателейПоВидамИтогов = ПолучитьТекстЗапросаВыводаИтоговТаблицы(ТЗПоказателиТекущейОбласти,СтрГруппаУид.ТзАналитик,СтруктураВыводаТекущейОбласти,СтрГруппаУид.ИмяОбласти,ТзПараметровОбластей,СтруктураПараметров_.КэшУникальныхКодовПоказателей,ИндексЗапроса,ОписаниеТекущейОбласти.УидГруппыОтборов);		
		СтруктураВыводаТекущейОбласти[0].ТекстЗапросаВыводаОбластей = ТекстПодзапросаВыбораДанных+ТекстПоказателейПоВидамИтогов;
		
		//Настройка вывода периодов
		ОбластиСтрокКолонок =  ОбъектАБ.КэшТаблицРаскрываемыхОбластей.Найти(СтруктураВыводаТекущейОбласти[0].УидОбласти,"ИмяОбласти");
		тНастройкиПериодов 	= ОбъектАБ.КэшНастроекПериодов.Выгрузить().Скопировать(Новый Структура("ИмяОбласти",ОбластиСтрокКолонок.ИмяОбластиСтрок));
		Если тНастройкиПериодов.Количество() = 0 Тогда
			тНастройкиПериодов = ОбъектАБ.КэшНастроекПериодов.Выгрузить().Скопировать(Новый Структура("ИмяОбласти",ОбластиСтрокКолонок.ИмяОбластиКолонок));
		КонецЕсли;	
		СтруктураВыводаТекущейОбласти[0].КэшНастроекПериодов  = тНастройкиПериодов;

		//Настройка вывода иерархий 
		
		НастройкиИерархий 		= ОбъектАБ.КэшНастроекИерархий.Выгрузить().СкопироватьКолонки();
		тСоставМакетов 			= ПолучитьИзВременногоХранилища(ОбъектАБ.тСтруктураМакетовРаскрытияАдрес);
		тСоставМакетовСтроки    = тСоставМакетов.НайтиСтроки(Новый Структура("ИмяОбластиРаскрытия",ОбластиСтрокКолонок.ИмяОбластиСтрок));
		
		Для Каждого СтрВложенныйМакет Из тСоставМакетовСтроки Цикл
			тНастройкиИерархий = ОбъектАБ.КэшНастроекИерархий.НайтиСтроки(Новый Структура("ИмяОбласти",СтрВложенныйМакет.ИмяМакетаРаскрытия));
			Для Каждого настройка Из тНастройкиИерархий Цикл
				нНастройкиИерархий = НастройкиИерархий.Добавить();
				ЗаполнитьЗначенияСвойств(нНастройкиИерархий,настройка);
			КонецЦикла;
		КонецЦикла;
		
		тСоставМакетовКолонки    = тСоставМакетов.НайтиСтроки(Новый Структура("ИмяОбластиРаскрытия",ОбластиСтрокКолонок.ИмяОбластиКолонок));
		
		Для Каждого СтрВложенныйМакет Из тСоставМакетовКолонки Цикл
			тНастройкиИерархий = ОбъектАБ.КэшНастроекИерархий.НайтиСтроки(Новый Структура("ИмяОбласти",СтрВложенныйМакет.ИмяМакетаРаскрытия));
			Для Каждого настройка Из тНастройкиИерархий Цикл
				нНастройкиИерархий = НастройкиИерархий.Добавить();
				ЗаполнитьЗначенияСвойств(нНастройкиИерархий,настройка);
			КонецЦикла;
		КонецЦикла;

		
		СтруктураВыводаТекущейОбласти[0].КэшНастроекИерархий  = НастройкиИерархий;

		//Запрос вывода строк через СКД																																			
		СтруктураПараметровОписанияСхемыКД = Новый Структура;
		СтруктураПараметровОписанияСхемыКД.Вставить("СтрокаВывода",СтруктураВыводаТекущейОбласти[0]);
		СтруктураПараметровОписанияСхемыКД.Вставить("ПрефиксЗапроса",ТекстПодзапросаВыбораДанных);
		СтруктураПараметровОписанияСхемыКД.Вставить("ТаблицаПоказателиТекущейОбласти",ТЗПоказателиТекущейОбласти);
		СтруктураПараметровОписанияСхемыКД.Вставить("ТзАналитик",СтрГруппаУид.ТзАналитик);
		СтруктураПараметровОписанияСхемыКД.Вставить("СтруктураВыводаТекущейОбласти",СтруктураВыводаТекущейОбласти);
		СтруктураПараметровОписанияСхемыКД.Вставить("ИмяОбласти",СтрГруппаУид.ИмяОбласти);
		СтруктураПараметровОписанияСхемыКД.Вставить("тПараметрыОбластей",ТзПараметровОбластей);
		СтруктураПараметровОписанияСхемыКД.Вставить("КэшУникальныхКодовПоказателей",СтруктураПараметров_.КэшУникальныхКодовПоказателей);
		
		ПолучитьОписаниеСхемыКДВыводаТаблицы(СтруктураПараметровОписанияСхемыКД);		
		
		СтруктураВыводаТекущейОбласти[0].ИндексЗапросаПакета        = ИндексЗапросаПакета;
		СтруктураВыводаТекущейОбласти[0].ПараметрыЗапроса           = лТзПараметровЗапроса;
		СтруктураВыводаТекущейОбласти[0].ПоказателиОбласти        	= ТЗПоказателиТекущейОбласти;
		СтруктураВыводаТекущейОбласти[0].ИмяОбластиСтроки       	= ОписаниеТекущейОбласти.ИмяОбластиСтрок;
		СтруктураВыводаТекущейОбласти[0].ИмяОбластиКолонки       	= ОписаниеТекущейОбласти.ИмяОбластиКолонок;
		
		ИндексЗапросаПакета = ИндексЗапросаПакета+1;
		
		ИндексЗапроса = ИндексЗапроса+1;
		
	КонецЦикла;		
		
	СтруктураПараметров.Вставить("ТзСтруктураВыводаГруппировокТаблиц"		,ПоместитьВовременноеХранилище(ТзСтруктураВыводаГруппировок,Новый УникальныйИдентификатор()));
	СтруктураПараметров.Вставить("ПараметрыОбластейТаблицы"					,ПоместитьВовременноеХранилище(ТзПараметровОбластей,Новый УникальныйИдентификатор()));
	СтруктураПараметров.Вставить("ТзПоказателейОбластейТаблицы"				,ТзПоказателейОбластей);
	                                                                                                            
	
КонецПроцедуры	  

Функция ПолучитьКэшГруппОтборовПоказателейРаскрытияТаблиц(СтруктураПараметров)

	глМассивУидовГруппОтборов   	= СтруктураПараметров.МассивУидовГруппОтборов;
	глТзАналитик                    = СтруктураПараметров.глТзАналитик;
	КэшУникальныхКодовПоказателей   = СтруктураПараметров.КэшУникальныхКодовПоказателей;
	КэшПоказателей                  = СтруктураПараметров.КэшПоказателей;
	тзПоказателейОбластей           = СтруктураПараметров.тзПоказателейОбластей;
	ОбъектАБ                        = СтруктураПараметров.ОбъектАБ;
	ПолеТабличногоДокументаМакет    = СтруктураПараметров.ПолеТабличногоДокументаМакет;
	ТипМакета  						= СтруктураПараметров.ТипОбласти;
	ТипОбласти  					= СтруктураПараметров.ТипОбласти;
	ТзСтруктураВыводаГруппировок     = СтруктураПараметров.ТзСтруктураВыводаГруппировок;
	ТзПараметровОбластей            = СтруктураПараметров.ТзПараметровОбластей;
	СтруктураАналитикРаскрытияПоказателей = СтруктураПараметров.СтруктураАналитикРаскрытияПоказателей;
	
	тзОписаниеАналитик = Новый ТаблицаЗначений;
	тзОписаниеАналитик.Колонки.Добавить("ИмяОбласти");
	тзОписаниеАналитик.Колонки.Добавить("ТзАналитик");
	тзОписаниеАналитик.Колонки.Добавить("ТзПоказателей");

	КэшУникальныхКодовПоказателей  = Новый Структура;                                         
	
	тСтруктураМакетовРаскрытия = ПолучитьИзВременногоХранилища(ОбъектАБ.тСтруктураМакетовРаскрытияАдрес);
	
	РаскрываемыеОбластиКолонки 	=  ОбъектАБ.КэшРаскрываемыхОбластей.Выгрузить(Новый Структура("Верх",0));
	РаскрываемыеОбластиСтроки 	=  ОбъектАБ.КэшРаскрываемыхОбластей.Выгрузить(Новый Структура("Лево",0));
	
	Для Каждого РаскрываемаяОбласть Из ОбъектАБ.КэшТаблицРаскрываемыхОбластей  Цикл
			
		КэшПоказателей                 = Новый Массив;	
		ОбластьРаскрытия = ПолеТабличногоДокументаМакет.Область(РаскрываемаяОбласть.Верх,РаскрываемаяОбласть.Лево,РаскрываемаяОбласть.Низ,РаскрываемаяОбласть.Право);
					
		СтруктураАналитик = ЗаполнитьИерархиюАналитикРаскрываемойОбластиТаблицы(ОбластьРаскрытия,ТипОбласти,тзОписаниеАналитик,глТзАналитик,ОбъектАБ,РаскрываемаяОбласть,тСтруктураМакетовРаскрытия);
		
		Если СтруктураАналитик = Неопределено Тогда
			 Продолжить;
		КонецЕсли;	
				
		СтруктураАналитик.Сортировать("УровеньГруппировкиКолонки,УровеньГруппировкиСтроки");
	
		МассивУидовГруппОтборов = Новый Структура;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("УидОбласти",								РаскрываемаяОбласть.УидГруппыОтборов);
		СтруктураПараметров.Вставить("СтруктураАналитик",						СтруктураАналитик);
		СтруктураПараметров.Вставить("ОбластьРаскрытия",	 					ОбластьРаскрытия);
		СтруктураПараметров.Вставить("МассивУидовГруппОтборов",					МассивУидовГруппОтборов);                                         
        СтруктураПараметров.Вставить("КэшУникальныхКодовПоказателей",			КэшУникальныхКодовПоказателей);
   		СтруктураПараметров.Вставить("тзПоказателейОбластей",					тзПоказателейОбластей);
        СтруктураПараметров.Вставить("ОбъектАБ",								ОбъектАБ);
        СтруктураПараметров.Вставить("ПолеТабличногоДокументаМакет",			ПолеТабличногоДокументаМакет);
		СтруктураПараметров.Вставить("СтруктураАналитикРаскрытияПоказателей",	СтруктураАналитикРаскрытияПоказателей);
        СтруктураПараметров.Вставить("ТипОбласти",								ТипОбласти);
		СтруктураПараметров.Вставить("ТзПараметровОбластей",					ТзПараметровОбластей);
		СтруктураПараметров.Вставить("ТзСтруктураВыводаГруппировок",				ТзСтруктураВыводаГруппировок);
		СтруктураПараметров.Вставить("РаскрываемыеОбластиКолонки",				РаскрываемыеОбластиКолонки);
		СтруктураПараметров.Вставить("РаскрываемыеОбластиСтроки",				РаскрываемыеОбластиСтроки);
		
		ПолучитьОписаниеОбластиТаблицы(СтруктураПараметров);
		
		глМассивУидовГруппОтборов.Вставить("Таблица"+СтрЗаменить(РаскрываемаяОбласть.ИмяОбласти,":","РазделительОбластей"),МассивУидовГруппОтборов);
		
	КонецЦикла;
		
	ТзПоказателейОбластей.Свернуть("ИмяОбласти,Показатель,ВидОтчета,КлючВерсииОтборов,КодПоляПоказателя");
		
	Возврат  тзОписаниеАналитик;  
	
КонецФункции

Функция ЗаполнитьИерархиюАналитикРаскрываемойОбластиТаблицы(ОбластьРаскрытия,ТипОбласти,тзОписаниеАналитик,глТзАналитик,ОбъектАБ,РаскрываемаяОбласть,тСтруктураМакетовРаскрытия)
	
	тИерархияГруппировок  = Новый ТаблицаЗначений;
	
	тИерархияГруппировок.Колонки.Добавить("УровеньГруппировкиКолонки");
	тИерархияГруппировок.Колонки.Добавить("УровеньГруппировкиСтроки");
	тИерархияГруппировок.Колонки.Добавить("ИмяОбласти");
	тИерархияГруппировок.Колонки.Добавить("ГруппировкаСтроки");
	тИерархияГруппировок.Колонки.Добавить("ГруппировкаКолонки");
    тИерархияГруппировок.Колонки.Добавить("СмещениеПоказателейX");
	тИерархияГруппировок.Колонки.Добавить("СмещениеПоказателейY");
	тИерархияГруппировок.Колонки.Добавить("УидОбластиСтрок");
    тИерархияГруппировок.Колонки.Добавить("УидОбластиКолонок");
	
	ТзДоступныхАналитик = Обработки.АналитическийБланк.ПолучитьОписаниеТаблицыНастроекАналитик();
		
	//Если Область имеет родителя по строке или колонке, то возвращаем неопределено
	тПодчиненныеОбластиСтроки =  тСтруктураМакетовРаскрытия.НайтиСтроки(Новый Структура("ИмяМакетаРаскрытия,ТипОбласти",РаскрываемаяОбласть.ИмяОбластиСтрок,"Строки"));
	Если тПодчиненныеОбластиСтроки.Количество() > 1 Тогда
		Возврат Неопределено;
    КонецЕсли;
		
	тПодчиненныеОбластиКолонки =  тСтруктураМакетовРаскрытия.НайтиСтроки(Новый Структура("ИмяМакетаРаскрытия,ТипОбласти",РаскрываемаяОбласть.ИмяОбластиКолонок,"Колонки"));
	Если тПодчиненныеОбластиКолонки.Количество() > 1 Тогда
		Возврат Неопределено;
    КонецЕсли;	
	
	//Если область входит в текущую по колонке 
	тПодчиненныеОбластиКолонки 	=  тСтруктураМакетовРаскрытия.НайтиСтроки(Новый Структура("ИмяОбластиРаскрытия,ТипОбласти",РаскрываемаяОбласть.ИмяОбластиКолонок,"Колонки"));
	тПодчиненныеОбластиСтроки 	=  тСтруктураМакетовРаскрытия.НайтиСтроки(Новый Структура("ИмяОбластиРаскрытия,ТипОбласти",РаскрываемаяОбласть.ИмяОбластиСтрок,"Строки"));

	Для Каждого тПодчиненнаяОбластьСтрок Из тПодчиненныеОбластиСтроки Цикл
		
		Для Каждого тПодчиненнаяОбластьКолонок Из тПодчиненныеОбластиКолонки Цикл
			Обл = ОбъектАБ.КэшТаблицРаскрываемыхОбластей.НайтиСтроки(Новый Структура("ИмяОбластиСтрок,ИмяОбластиКолонок",тПодчиненнаяОбластьСтрок.ИмяМакетаРаскрытия,тПодчиненнаяОбластьКолонок.ИмяМакетаРаскрытия ))[0]; 
			нСтр = тИерархияГруппировок.Добавить();
			нСтр.УровеньГруппировкиКолонки  	= Обл.Лево;
			нСтр.УровеньГруппировкиСтроки  		= Обл.Верх;
			нСтр.ИмяОбласти  					= Обл.ИмяОбласти;
			нСтр.ГруппировкаСтроки 				= Обл.ИмяОбластиСтрок;
			нСтр.ГруппировкаКолонки 			= Обл.ИмяОбластиКолонок;	
			нСтр.УидОбластиСтрок 				= РаскрываемаяОбласть.ИмяОбластиСтрок;
			нСтр.УидОбластиКолонок 				= РаскрываемаяОбласть.ИмяОбластиКолонок;	
			
			ТзАналитик  = ЗначениеИзСтрокиВнутр(Обл.НастройкиАналитикРаскрытия);
			Для Каждого аСтр Из ТзАналитик Цикл
				Если ТзДоступныхАналитик.НайтиСтроки(Новый Структура("АналитикаКод",аСтр.АналитикаКод)).Количество()=0 Тогда;
					испАналитика = ТзДоступныхАналитик.Добавить();
					ЗаполнитьЗначенияСвойств(испАналитика,аСтр);
				КонецЕсли;
				
				Если глТзАналитик.НайтиСтроки(Новый Структура("АналитикаКод",аСтр.АналитикаКод)).Количество()=0 Тогда;	 
					испАналитика = глТзАналитик.Добавить();
					ЗаполнитьЗначенияСвойств(испАналитика,аСтр);
				КонецЕсли;
				
				ОтборыАналитик = ОбъектАБ.НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов",Обл.УидГруппыОтборов));
				Для Каждого СтрОтбор Из ОтборыАналитик Цикл
					Если СтрОтбор.ПолеКод = "ПериодС" 
						ИЛИ СтрОтбор.ПолеКод = "ПериодПо" 
						ИЛИ СтрОтбор.ПолеКод = "Сценарий"
						ИЛИ  СтрОтбор.ПолеКод = "Организация"
						ИЛИ  СтрОтбор.ПолеКод = "Проект" Тогда
						Продолжить;	
					КонецЕсли;			
					
					Если Не СтрОтбор.Отбор = "Отбор не производится" Тогда
						испАналитика = ТзДоступныхАналитик.Добавить();
						испАналитика.АналитикаКод 	 = СтрОтбор.ПолеКод;
						испАналитика.ЭтоОтбор		 = Истина;
					КонецЕсли;	
				КонецЦикла;		
			КонецЦикла;	  	
		КонецЦикла;	  	
	КонецЦикла;	
	
	нОписаниеАналитик 				= тзОписаниеАналитик.Добавить();
	нОписаниеАналитик.ИмяОбласти 	= ОбластьРаскрытия.Имя;
	нОписаниеАналитик.ТзАналитик 	= ТзДоступныхАналитик;
	
	Возврат тИерархияГруппировок;
	
КонецФункции	

Процедура ПолучитьОписаниеОбластиТаблицы(СтруктураПараметров)
	
	ТипОбласти                          	= СтруктураПараметров.ТипОбласти;
	СтруктураАналитик 						= СтруктураПараметров.СтруктураАналитик;
	ОбластьРаскрытия  						= СтруктураПараметров.ОбластьРаскрытия;
    КэшУникальныхКодовПоказателей       	= СтруктураПараметров.КэшУникальныхКодовПоказателей;
	МассивУидовГруппОтборов             	= СтруктураПараметров.МассивУидовГруппОтборов;
	ТзПоказателейОбластей			    	= СтруктураПараметров.ТзПоказателейОбластей;
	ОбъектАБ                            	= СтруктураПараметров.ОбъектАБ;
	ПолеТабличногоДокументаМакет        	= СтруктураПараметров.ПолеТабличногоДокументаМакет;
    ТзСвойствПоказателей                	= ПолучитьИзВременногоХранилища(ОбъектАБ.ТзСвойстваПоказателейАдрес);
	ТабОперандов                        	= ПолучитьИзВременногоХранилища(ОбъектАБ.ТабОперандовАдрес);
	СтруктураИменКэшей                  	= ПолучитьИзВременногоХранилища(ОбъектАБ.СтруктураИменКэшейАдрес);
	ТзСтруктураВыводаГруппировок         	= СтруктураПараметров.ТзСтруктураВыводаГруппировок;
	ТзПараметровОбластей	            	= СтруктураПараметров.ТзПараметровОбластей;
	СтруктураАналитикРаскрытияПоказателей 	= СтруктураПараметров.СтруктураАналитикРаскрытияПоказателей;
    тСоставОбластейРаскрытия                = ПолучитьИзВременногоХранилища(ОбъектАБ.тСоставОбластейРаскрытияАдрес);
    РаскрываемыеОбластиКолонки 				= СтруктураПараметров.РаскрываемыеОбластиКолонки;
	РаскрываемыеОбластиСтроки 				= СтруктураПараметров.РаскрываемыеОбластиСтроки;
	
	
	Верх  = ОбластьРаскрытия.Верх;
	Низ   = ОбластьРаскрытия.Низ;
	Лево  = 1;
	Право = ПолеТабличногоДокументаМакет.ШиринаТаблицы;;	
	ТипРаскрытия  = "Строки";
	
	УидОбласти 							= ОбластьРаскрытия.Имя;
	ТекГруппровка 						= Неопределено;
	ИндексВыводимойОбласти 				= 0;	
	СтруктураИспользованныхАналитик    	= Новый Структура;	
	ТзИспользованныхАналитик            = Неопределено;
	
	ГруппыСтрок                         = СтруктураАналитик.Скопировать();
	ГруппыСтрок.Свернуть("ГруппировкаСтроки,УровеньГруппировкиСтроки");
	ГруппыСтрок.Колонки.Добавить("ИмяОбласти");
	ГруппыСтрок.Сортировать("УровеньГруппировкиСтроки");
	ГруппыКолонок                        =  СтруктураАналитик.Скопировать();
	ГруппыКолонок.Свернуть("ГруппировкаКолонки,УровеньГруппировкиКолонки");
	ГруппыКолонок.Колонки.Добавить("ИмяОбласти");
	ГруппыКолонок.Сортировать("УровеньГруппировкиКолонки");	

	НстрСтруктуры 					= ТзСтруктураВыводаГруппировок.Добавить();
	НстрСтруктуры.УидОбласти        = УидОбласти;
	НстрСтруктуры.ТзАналитикСтроки  = ГруппыСтрок;
	НстрСтруктуры.ТзАналитикКолонки = ГруппыКолонок;
	НстрСтруктуры.ТипОбласти       	= "Таблицы";

	
	Для Каждого СтрАналитика Из НстрСтруктуры.ТзАналитикСтроки Цикл
		ТзАналитикСтроки = ЗначениеИзСтрокиВнутр(ОбъектАБ.КэшРаскрываемыхОбластей.НайтиСтроки(Новый Структура("ИмяОбласти",СтрАналитика.ГруппировкаСтроки))[0].НастройкиАналитикРаскрытия);
		
		Если НстрСтруктуры.АналитикиСтрок = Неопределено Тогда
			 НстрСтруктуры.АналитикиСтрок = ТзАналитикСтроки.СкопироватьКолонки();
		КонецЕсли;	
		
		Для Каждого полеАналитики Из ТзАналитикСтроки Цикл
			нСтрока_ = НстрСтруктуры.АналитикиСтрок.Добавить();
			ЗаполнитьЗначенияСвойств(нСтрока_,полеАналитики);
		КонецЦикла;	
	КонецЦикла;	
	
	Для Каждого СтрАналитика Из НстрСтруктуры.ТзАналитикКолонки Цикл
		ТзАналитикКолонки = ЗначениеИзСтрокиВнутр(ОбъектАБ.КэшРаскрываемыхОбластей.НайтиСтроки(Новый Структура("ИмяОбласти",СтрАналитика.ГруппировкаКолонки))[0].НастройкиАналитикРаскрытия);
		
		Если НстрСтруктуры.АналитикиКолонок = Неопределено Тогда
			 НстрСтруктуры.АналитикиКолонок = ТзАналитикКолонки.СкопироватьКолонки();
		КонецЕсли;	
		
		Для Каждого полеАналитики Из ТзАналитикКолонки Цикл
			нСтрока_ = НстрСтруктуры.АналитикиКолонок.Добавить();
			ЗаполнитьЗначенияСвойств(нСтрока_,полеАналитики);
		КонецЦикла;	
	КонецЦикла;	

	ОписаниеСмещенияПоказателй = Новый ТаблицаЗначений;
	ОписаниеСмещенияПоказателй.Колонки.Добавить("ОбластьСтрок");
	ОписаниеСмещенияПоказателй.Колонки.Добавить("ОбластьКолонок");
	ОписаниеСмещенияПоказателй.Колонки.Добавить("СмещениеПоказателейX");
	ОписаниеСмещенияПоказателй.Колонки.Добавить("СмещениеПоказателейY");
	ОписаниеСмещенияПоказателй.Колонки.Добавить("СмещениеФормулX");
	ОписаниеСмещенияПоказателй.Колонки.Добавить("СмещениеФормулY");
    ОписаниеСмещенияПоказателй.Колонки.Добавить("РасшифровкаФормул");
	ОписаниеСмещенияПоказателй.Колонки.Добавить("КоличествоОдинаковыхИмен");
	ОписаниеСмещенияПоказателй.Колонки.Добавить("ЕстьФормулы",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	
	ОписаниеСмещенияФормул = Новый ТаблицаЗначений;
	ОписаниеСмещенияФормул.Колонки.Добавить("ОбластьСтрок");
	ОписаниеСмещенияФормул.Колонки.Добавить("ОбластьКолонок");
	ОписаниеСмещенияФормул.Колонки.Добавить("СмещениеПоказателейX");
	ОписаниеСмещенияФормул.Колонки.Добавить("СмещениеПоказателейY");
    ОписаниеСмещенияФормул.Колонки.Добавить("ИмяФормулы");
	
	
	Для Каждого СтрАналитика Из  СтруктураАналитик Цикл
		
		КоличествоОдинаковыхИмен           = Новый Структура;

		ТзАналитикСтроки = ЗначениеИзСтрокиВнутр(ОбъектАБ.КэшРаскрываемыхОбластей.НайтиСтроки(Новый Структура("ИмяОбласти",СтрАналитика.ГруппировкаСтроки))[0].НастройкиАналитикРаскрытия);
		
		Для Каждого полеАналитики Из ТзАналитикСтроки Цикл
			СтруктураИспользованныхАналитик.Вставить(полеАналитики.АналитикаКод);
		КонецЦикла;	
				
		ТзАналитикКолонки = ЗначениеИзСтрокиВнутр(ОбъектАБ.КэшРаскрываемыхОбластей.НайтиСтроки(Новый Структура("ИмяОбласти",СтрАналитика.ГруппировкаКолонки))[0].НастройкиАналитикРаскрытия);
		
		Для Каждого полеАналитики Из ТзАналитикКолонки Цикл
			СтруктураИспользованныхАналитик.Вставить(полеАналитики.АналитикаКод);
		КонецЦикла;	
		
		ТекущаяОбласть   = ПолеТабличногоДокументаМакет.Область(СтруктураАналитик[ИндексВыводимойОбласти].ИмяОбласти);
							
		ШиринаТекущегоМакета = ПолучитьШиринуМакетКолонокДляВыводаОбласти(ПолеТабличногоДокументаМакет,СтрАналитика.ГруппировкаКолонки,СтрАналитика.УидОбластиКолонок,РаскрываемыеОбластиКолонки);
		ВысотаТекущегоМакета = ПолучитьВысотуМакетКолонокДляВыводаОбласти(ПолеТабличногоДокументаМакет,СтрАналитика.ГруппировкаСтроки,СтрАналитика.УидОбластиСтрок,РаскрываемыеОбластиСтроки);
		
		Верх  = ТекущаяОбласть.Верх;
        Лево  = ТекущаяОбласть.Лево;

		Низ   = ТекущаяОбласть.Верх+ВысотаТекущегоМакета-1;
        Право = ТекущаяОбласть.Лево+ШиринаТекущегоМакета-1;
		
		тДокМакетОбласти                = ПолеТабличногоДокументаМакет.ПолучитьОбласть(Верх,0,Низ,0);	//Нужен "чистый" макет	
				
		//Прорисовка макета группировки по ячейкам
		ОбластиКУдалению = Новый Массив;
		
		нСтрОписаниеСмещенияПоказателй 						= ОписаниеСмещенияПоказателй.Добавить();		
		нСтрОписаниеСмещенияПоказателй.ОбластьСтрок 		= СтрАналитика.ГруппировкаСтроки;
		нСтрОписаниеСмещенияПоказателй.ОбластьКолонок 		= СтрАналитика.ГруппировкаКолонки;
		
		нСтрОписаниеСмещенияФормул 						= ОписаниеСмещенияФормул.Добавить();		
		нСтрОписаниеСмещенияФормул.ОбластьСтрок 		= СтрАналитика.ГруппировкаСтроки;
		нСтрОписаниеСмещенияФормул.ОбластьКолонок 		= СтрАналитика.ГруппировкаКолонки;

		СмещениеПоказателейX = Новый Структура;
		СмещениеПоказателейY = Новый Структура;
        СмещениеФормулX 	 = Новый Структура;
		СмещениеФормулY 	 = Новый Структура;
		
		РасшифровкаФормул    = Новый Структура;
		
		КоличествоОдинаковыхИмен           = Новый Структура;
		
		Для ИндС = Верх По Низ Цикл	
			Для ИндК =  Лево По Право Цикл
				
				ТекОбл 			= ПолеТабличногоДокументаМакет.Область(ИндС,ИндК,ИндС,ИндК);
																						
				Если ТипЗнч(ТекОбл.Расшифровка) = Тип("Структура") Тогда
					Если ТекОбл.Расшифровка.Свойство("Ссылка") Тогда
						
						тПоказатель  =  ТзСвойствПоказателей.Найти(ТекОбл.Расшифровка.Ссылка,"Ссылка");
						СтруктураСвойствПоказателя  = ПолучитьСвойстваПоказателя(ТекОбл.Расшифровка,тПоказатель);
						тУидГруппыОтборов           = СтруктураИменКэшей[ТекОбл.Имя];

						МассивУидовГруппОтборов.Вставить("Гр_"+тУидГруппыОтборов,тУидГруппыОтборов);
						КодПоляПоказателя               =  СокрП(тПоказатель.ВидОтчетаКод)+"_"+СокрП(тПоказатель.ПоказательКод)+"_"+тУидГруппыОтборов;
						ОтображатьСуммуВДопВалюте       = ?(ТекОбл.Расшифровка.Свойство("ОтображатьСуммуВДопВалюте"),"ЗначениеВалюта","");
						Если   ЗначениеЗаполнено(ОтображатьСуммуВДопВалюте)  Тогда
							КодПоляПоказателя = КодПоляПоказателя+"_Вал";
						КонецЕсли;	
						КэшУникальныхКодовПоказателей.Вставить(КодПоляПоказателя,СтруктураСвойствПоказателя);		
						нПоказатели 					= тзПоказателейОбластей.Добавить();
						нПоказатели.ИмяОбласти		 	= ОбластьРаскрытия.Имя;
						нПоказатели.Показатель          = ТекОбл.Расшифровка.Ссылка;
						нПоказатели.ВидОтчета           = тПоказатель.ВидОтчета;
						нПоказатели.КлючВерсииОтборов   = тУидГруппыОтборов;	 	
						нПоказатели.КодПоляПоказателя   = КодПоляПоказателя;
						
						ИмяОбластиДляВыводаСУид        =  СокрП(тПоказатель.ВидОтчетаКод)+"_"+СокрП(тПоказатель.ПоказательКод)+"_"+тУидГруппыОтборов+?(ТекОбл.Расшифровка.Свойство("ОтображатьСуммуВДопВалюте"),"_Вал","");
						
						СтруктураПараметровЯчейки = Новый Структура;
						СтруктураПараметровЯчейки.Вставить("ТекОбл",ТекОбл);;
						СтруктураПараметровЯчейки.Вставить("СтруктураИспользованныхАналитик",СтруктураИспользованныхАналитик);
						СтруктураПараметровЯчейки.Вставить("СтруктураСвойствПоказателя",СтруктураСвойствПоказателя);
						СтруктураПараметровЯчейки.Вставить("тПоказатель",тПоказатель);						
						СтруктураПараметровЯчейки.Вставить("ТипОбласти",ТипОбласти);
						
						ВыводитьЗначение 				= ПроверитьВыводЗначенияПоПоказателю(СтруктураПараметровЯчейки);
						
						Если ВыводитьЗначение Тогда
							Если КоличествоОдинаковыхИмен.Свойство(ИмяОбластиДляВыводаСУид) Тогда	
								ИндексИмени = КоличествоОдинаковыхИмен[ИмяОбластиДляВыводаСУид]+1;
								КоличествоОдинаковыхИмен[ИмяОбластиДляВыводаСУид] = ИндексИмени;
							Иначе	
								ИндексИмени  = 1;
								КоличествоОдинаковыхИмен.Вставить(ИмяОбластиДляВыводаСУид,1);
							КонецЕсли;
						КонецЕсли;
						
						тОбластьМакетаДляВывода 	= тДокМакетОбласти.Область((ИндС-Верх)+1,ИндК,(ИндС-Верх)+1,ИндК);		
						тОбластьМакетаДляВыводаК 	= тДокМакетОбласти.Область(ИндС,(ИндК-Лево)+1,ИндС,(ИндК-Лево)+1);
		
						нПоказательОбласти 						=  ОбъектАБ.ПоказателиМакетовРаскрытий.Добавить();
						нПоказательОбласти.ТипМакета   			=  "Таблица";
						нПоказательОбласти.Показатель   		=  ТекОбл.Расшифровка.Ссылка;
						нПоказательОбласти.УидГруппыОтборов   	=  тУидГруппыОтборов;
						нПоказательОбласти.ИмяМакетаСтрок   	=  СтрАналитика.ГруппировкаСтроки;
						нПоказательОбласти.ИмяМакетаКолонок   	=  СтрАналитика.ГруппировкаКолонки;
						нПоказательОбласти.СмещениеХ            =  тОбластьМакетаДляВыводаК.Лево-1;
                        нПоказательОбласти.СмещениеY            =  тОбластьМакетаДляВывода.Верх-1;
						
						Если тПоказатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
														
							тОбластьМакетаДляВывода.СодержитЗначение = Истина;
							ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьМакетаДляВывода,0,,5);
														
							тОбластьМакетаДляВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
							
						ИначеЕсли тПоказатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Строка Тогда
							
							тОбластьМакетаДляВывода.СодержитЗначение = Истина;
							ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьМакетаДляВывода, "");
							
							тОбластьМакетаДляВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
							
						ИначеЕсли тПоказатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда
							
							тОбластьМакетаДляВывода.СодержитЗначение = Истина;
							ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьМакетаДляВывода, Дата(1,1,1));
							
							тОбластьМакетаДляВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
							
						ИначеЕсли тПоказатель.ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда
							
							тОбластьМакетаДляВывода.СодержитЗначение = Истина;
							ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьМакетаДляВывода, Ложь);
							
							тОбластьМакетаДляВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
							
						Иначе
														
							тОбластьМакетаДляВывода.СодержитЗначение = Истина;
							ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьМакетаДляВывода, Неопределено);
														
							тОбластьМакетаДляВывода.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;
							
						КонецЕсли;
						
						тОбластьМакетаДляВывода.Имя 			= ИмяОбластиДляВыводаСУид+"_"+ИндексИмени;
						
						СтруктураРасшифровки                    = Новый Структура;                                                           
						СтруктураРасшифровки.Вставить("Ссылка"	,ТекОбл.Расшифровка.Ссылка);
						СтруктураРасшифровки.Вставить("УИД"		,тУидГруппыОтборов);
						
						Если ТекОбл.Расшифровка.Свойство("ОтображатьСуммуВДопВалюте") Тогда
							СтруктураРасшифровки.Вставить("ОтображатьСуммуВДопВалюте"		,Истина);
						КонецЕсли;	

						
						тОбластьМакетаДляВывода.Расшифровка 	= СтруктураРасшифровки;
						
						СтруктураАналитикРаскрытияПоказателей.Вставить(ТекОбл.Имя, ПолучитьМассивИзСтруктуры(СтруктураИспользованныхАналитик));

						тОбластьМакетаДляВыводаК  = тДокМакетОбласти.Область(ИндС,(ИндК-Лево)+1,ИндС,(ИндК-Лево)+1);
								
						СмещениеПоказателейX.Вставить(ИмяОбластиДляВыводаСУид,тОбластьМакетаДляВыводаК.Лево-1);
						Если ВыводитьЗначение Тогда
							СмещениеПоказателейY.Вставить(ИмяОбластиДляВыводаСУид, тОбластьМакетаДляВывода.Верх-1);
						КонецЕсли;

					ИначеЕсли ТекОбл.Расшифровка.Свойство("НастройкиАналитикРаскрытия") Тогда	
						
						тОбластьМакетаДляВывода = тДокМакетОбласти.Область((ИндС-Верх)+1,ИндК,(ИндС-Верх)+1,ИндК);
                        тОбластьМакетаДляВывода.Картинка  		= Неопределено;
						тОбластьМакетаДляВывода.Расшифровка     = Неопределено;
						
					ИначеЕсли ТекОбл.Расшифровка.Свойство("ТекстФормулы") Тогда	
						
						тОперанды                                           	= ЗначениеИзСтрокиВнутр(ТекОбл.Расшифровка.РасшифровкаФормулы);
						
						нСтрОписаниеСмещенияПоказателй.ЕстьФормулы 				= ИСТИНА;
							
						РасшифровкаФормулы = Новый Структура;
							
						тОбластьМакетаДляВывода 	= тДокМакетОбласти.Область((ИндС-Верх)+1,ИндК,(ИндС-Верх)+1,ИндК);
						тОбластьМакетаДляВыводаК  	= тДокМакетОбласти.Область(ИндС,(ИндК-Лево)+1,ИндС,(ИндК-Лево)+1);
						
						СмещениеФормулX.Вставить(ТекОбл.Имя,тОбластьМакетаДляВыводаК.Лево-1);
						СмещениеФормулY.Вставить(ТекОбл.Имя, тОбластьМакетаДляВывода.Верх-1);
					
						Для Каждого тОперанд Из тОперанды Цикл
							тПоказатель  										=  ТзСвойствПоказателей.Найти(тОперанд.Показатель,"Ссылка");		
							ТекУИД                                              =  ТабОперандов.Найти(тОперанд.ИмяВФормуле,"ИмяВФормуле").УидГруппыОтборов;
							ИмяОбластиДляВыводаСУид       						=  СокрП(тПоказатель.ВидОтчетаКод)+"_"+СокрП(тПоказатель.ПоказательКод)+"_"+ТекУИД;
							тОбластьМакетаДляВывода 							=  тДокМакетОбласти.Область((ИндС-Верх)+1,ИндК,(ИндС-Верх)+1,ИндК); 
							ТекстФормулыЯчейки            						=  тОбластьМакетаДляВывода.Расшифровка.ТекстФормулы;
							ТекстФормулыПриведенный 							=  СтрЗаменить(ТекстФормулыЯчейки,"["+тОперанд.ИмяВФормуле+"]","КэшОперандов."+ИмяОбластиДляВыводаСУид);
							тОбластьМакетаДляВывода.Расшифровка				 	=  Новый Структура("ТекстФормулы",ТекстФормулыПриведенный);
														
							тОбластьМакетаДляВывода.СодержитЗначение = Истина;
							ВставитьЗначениеВОбластьТабличногоДокумента(тОбластьМакетаДляВывода, 0,,5);;
														
							тОбластьМакетаДляВывода.ГоризонтальноеПоложение 	=  ГоризонтальноеПоложение.Право;		
					
							КодПоляПоказателя               = СокрП(тПоказатель.ВидОтчетаКод)+"_"+СокрП(тПоказатель.ПоказательКод)+"_"+ТекУИД;
                            СтруктураСвойствПоказателя  	= ПолучитьСвойстваПоказателя(ТекОбл.Расшифровка,тПоказатель);
							
							КэшУникальныхКодовПоказателей.Вставить(КодПоляПоказателя,СтруктураСвойствПоказателя);
														
							МассивУидовГруппОтборов.Вставить("Гр_"+ТекУИД,ТекУИД);	
							
							нПоказатели 					= тзПоказателейОбластей.Добавить();
							нПоказатели.ИмяОбласти		 	= ОбластьРаскрытия.Имя;
							нПоказатели.Показатель          = тПоказатель.Ссылка;
							нПоказатели.ВидОтчета           = тПоказатель.ВидОтчета;
							нПоказатели.КлючВерсииОтборов   = ТекУИД;
							нПоказатели.КодПоляПоказателя   = КодПоляПоказателя;
	
							Если НЕ КоличествоОдинаковыхИмен.Свойство(ИмяОбластиДляВыводаСУид) Тогда // не было такого показателя
								КоличествоОдинаковыхИмен.Вставить(ИмяОбластиДляВыводаСУид,-1);
							КонецЕсли;
							
							РасшифровкаФормулы.Вставить(КодПоляПоказателя,0);
							
							СтруктураАналитикРаскрытияПоказателей.Вставить(ТекОбл.Имя, ПолучитьМассивИзСтруктуры(СтруктураИспользованныхАналитик));
							
							Если НЕ СмещениеПоказателейX.Свойство(ИмяОбластиДляВыводаСУид) Тогда
								СмещениеПоказателейX.Вставить(ИмяОбластиДляВыводаСУид,-1);
							КонецЕсли;
							
						КонецЦикла;	
						
						нПоказательОбласти 						=  ОбъектАБ.ПоказателиМакетовРаскрытий.Добавить();
						нПоказательОбласти.ТипМакета   			=  "Таблица";
						нПоказательОбласти.Формула   			=  ТекОбл.Имя;
						нПоказательОбласти.УидГруппыОтборов   	=  тУидГруппыОтборов;
						нПоказательОбласти.ИмяМакетаСтрок   	=  СтрАналитика.ГруппировкаСтроки;
						нПоказательОбласти.ИмяМакетаКолонок   	=  СтрАналитика.ГруппировкаКолонки;
						нПоказательОбласти.СмещениеХ            =  тОбластьМакетаДляВыводаК.Лево-1;
						нПоказательОбласти.СмещениеY            =  тОбластьМакетаДляВывода.Верх-1;

						РасшифровкаФормул.Вставить(ТекОбл.Имя,ТекстФормулыПриведенный);
						
						тОбластьМакетаДляВывода.Расшифровка.Вставить("УидФормулы",ТекОбл.Имя);

						
					КонецЕсли;
					
				ИначеЕсли СтрНайти(ТекОбл.Текст,"[")>0 И СтрНайти(ТекОбл.Текст,"]")>0  Тогда		
					
					ТекОбластьТекст   			= ТекОбл.Текст;					
					ТзПараметровВыражения 		= ОбработатьСтрокуШаблонаЗаголовкаАналитики(ТекОбластьТекст,ТзАналитикСтроки);
					тОбластьМакетаДляВывода 	= тДокМакетОбласти.Область((ИндС-Верх)+1,ИндК,(ИндС-Верх)+1,ИндК);;
					тОбластьМакетаДляВывода.Имя = "Пар_"+тОбластьМакетаДляВывода.Имя;
					
					ВыражениеВМакете            = "";
					
					тОбластьМакетаДляВывода 							=  тДокМакетОбласти.Область((ИндС-Верх)+1,ИндК,(ИндС-Верх)+1,ИндК); 
					
					Для Каждого стрПараметр Из ТзПараметровВыражения Цикл		
						
						Если стрПараметр.ТипОбласти = "Параметр" Тогда	
							
							ПозицияПервойТочки  = СтрНайти(стрПараметр.ТекстОбласти,".");
							Если ПозицияПервойТочки>0 Тогда
								ПутьКДанным 			= Лев(стрПараметр.ТекстОбласти,ПозицияПервойТочки-1);
								ВыражениеПоля      	= Сред(стрПараметр.ТекстОбласти,ПозицияПервойТочки+1,СтрДлина(стрПараметр.ТекстОбласти));
							Иначе	
								ПутьКДанным 		= стрПараметр.ТекстОбласти;
								ВыражениеПоля      = "";
							КонецЕсли;	
							
							ИмяПоляВзапросе                                     =  СтрЗАменить(стрПараметр.ТекстОбласти,".","");
										
							ТекПоле                                             =  ТзПараметровОбластей.НайтиСтроки(Новый Структура("ИмяПоляВзапросе,ИмяМакета",ИмяПоляВЗапросе,СтрАналитика.ИмяОбласти));		
							
							Если  ТекПоле.Количество() = 0 Тогда
								нТзПараметровОбластей 								= ТзПараметровОбластей.Добавить();
								ИмяОбластейВмакете 									= Новый Массив;
							Иначе	
								нТзПараметровОбластей 								= ТекПоле[0];
								ИмяОбластейВмакете                                  = нТзПараметровОбластей.ИмяОбластиВмакете;
							КонецЕсли;	
							
							нТзПараметровОбластей.ИмяВМакете    				= стрПараметр.ТекстОбласти;	
							нТзПараметровОбластей.ВыражениеПоля   				= ВыражениеПоля;
							нТзПараметровОбластей.ПутьКДанным   				= ПутьКДанным;
							нТзПараметровОбластей.ТипПараметра  				= "Группировка";
							нТзПараметровОбластей.ИмяПоляВзапросе    			= ИмяПоляВзапросе;
							нТзПараметровОбластей.ИмяОбластиВмакете             = тОбластьМакетаДляВывода.Имя;
							нТзПараметровОбластей.ИмяМакета             		= СтрАналитика.ИмяОбласти;
							нТзПараметровОбластей.ВыбранВМакете   				= Истина;

							нТзПараметровОбластей.ВыражениеПоля   				= ВыражениеПоля;
							нТзПараметровОбластей.ПутьКДанным   				= ПутьКДанным;
							нТзПараметровОбластей.ТипПараметра  				= "Группировка";
							нТзПараметровОбластей.ИмяПоляВзапросе    			= СтрЗАменить(стрПараметр.ТекстОбласти,".","");
							
							Если ИмяОбластейВмакете.Найти(тОбластьМакетаДляВывода.Имя) = Неопределено Тогда
								ИмяОбластейВмакете.Добавить(тОбластьМакетаДляВывода.Имя);
							КонецЕсли;
							
							нТзПараметровОбластей.ИмяОбластиВмакете             = ИмяОбластейВмакете;
							нТзПараметровОбластей.ИмяМакета             		= СтрАналитика.ИмяОбласти;
							нТзПараметровОбластей.УровеньВгруппировке           = ИндексВыводимойОбласти+1;
							
							ВыражениеВМакете = ВыражениеВМакете+"["+стрПараметр.ТекстОбласти+"]";
														
						ИначеЕсли СтрНайти(стрПараметр.ТекстОбласти,"Параметр") Тогда  //Параметр вида отчета
							
						Иначе	
							ВыражениеВМакете = ВыражениеВМакете+стрПараметр.ТекстОбласти;
						КонецЕсли;			
							
					КонецЦикла;									
					
					тОбластьМакетаДляВывода.СодержитЗначение = Ложь;
					тОбластьМакетаДляВывода.Текст = ВыражениеВМакете;
										
				КонецЕсли;		
			КонецЦикла;	
			
			нСтрОписаниеСмещенияПоказателй.СмещениеПоказателейX 	= Новый ФиксированнаяСтруктура(СмещениеПоказателейX);
            нСтрОписаниеСмещенияПоказателй.СмещениеПоказателейY 	= Новый ФиксированнаяСтруктура(СмещениеПоказателейY);
			нСтрОписаниеСмещенияПоказателй.СмещениеФормулX 			= Новый ФиксированнаяСтруктура(СмещениеФормулX);
            нСтрОписаниеСмещенияПоказателй.СмещениеФормулY 			= Новый ФиксированнаяСтруктура(СмещениеФормулY);
			нСтрОписаниеСмещенияПоказателй.РасшифровкаФормул 		= Новый ФиксированнаяСтруктура(РасшифровкаФормул);
			нСтрОписаниеСмещенияПоказателй.КоличествоОдинаковыхИмен = Новый ФиксированнаяСтруктура(КоличествоОдинаковыхИмен);
			
		КонецЦикла;	
		
		ИндексВыводимойОбласти = ИндексВыводимойОбласти+1;
		
	КонецЦикла;
	
	НстрСтруктуры.ОписаниеСмещенияПоказателй = ОписаниеСмещенияПоказателй.Скопировать();
	
КонецПроцедуры	

Функция ПолучитьТекстЗапросаВыводаИтоговТаблицы(ПоказателиТекущегоЗапроса,ТзАналитик,СтруктураВыводаТекущейОбласти,Уид_Области,ТзПараметровОбластей,КэшУникальныхКодовПоказателей,ИндексЗапроса,УидОбласти)
	
	ТекстИтоговогоЗапроса 	= "";
	СтрокаПолейЗапросаИтог  = "";
	СтрокаПолейЗапроса	    = "";
	СтрокаПолейЗапросаСгруппированные  = "";
		
	Для Каждого тПоказательЗапроса Из  ПоказателиТекущегоЗапроса Цикл	
		
		СтрПолеКлюч 		= тПоказательЗапроса.КодПоляПоказателя;
		СтрПолеЗначение    = КэшУникальныхКодовПоказателей[СтрПолеКлюч];
		
		НачалоКодаПоказателя  	= СтрНайти(СтрПолеКлюч,"_MES_");
		КодБезПрефикса         = Прав(СтрПолеКлюч,СтрДлина(СтрПолеКлюч)-НачалоКодаПоказателя-4);
		КодБезПрефикса         = СтрЗаменить(КодБезПрефикса,"_UID_","");
		Если СтрПолеЗначение.Свойство("ЗначениеВалюта") Тогда
			КодБезПрефикса         = СтрЗаменить(КодБезПрефикса,"_Вал","");
			СтрокаПолейЗапроса 	= СтрокаПолейЗапроса +"
			|	ВЫБОР КОГДА  тмПоказателиРаскрытия.ИмяОбластиДляВывода = """+СтрЗаменить(СтрПолеКлюч,"_Вал","") +""" ТОГДА тмПоказателиРаскрытия.ЗначениеВалюта ИНАЧЕ NULL КОНЕЦ  КАК "+СтрПолеКлюч+",";	
		ИначеЕсли СтрПолеЗначение.ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда	 
			СтрокаПолейЗапроса 	= СтрокаПолейЗапроса +"
			|	ВЫБОР КОГДА   тмПоказателиРаскрытия.ИмяОбластиДляВывода = """+СтрПолеКлюч +""" ТОГДА тмПоказателиРаскрытия.Значение ИНАЧЕ NULL КОНЕЦ  КАК "+СтрПолеКлюч+",";			 
		Иначе 
			СтрокаПолейЗапроса 	= СтрокаПолейЗапроса +"
			|	ВЫБОР КОГДА  тмПоказателиРаскрытия.ИмяОбластиДляВывода = """+СтрПолеКлюч +""" ТОГДА тмПоказателиРаскрытия.ЗначениеНеЧисло ИНАЧЕ NULL КОНЕЦ  КАК "+СтрПолеКлюч+",";			 
		КонецЕсли; 	 
		
		Если СтрПолеЗначение.ПоказательВидИтога = Перечисления.ВидыИтоговПоказателя.Максимум Тогда
			СтрокаПолейЗапросаИтог 	= СтрокаПолейЗапросаИтог +"
			|	МАКСИМУМ("+СтрПолеКлюч+"),";		 
		ИначеЕсли СтрПолеЗначение.ПоказательВидИтога = Перечисления.ВидыИтоговПоказателя.Минимум Тогда
			СтрокаПолейЗапросаИтог 	= СтрокаПолейЗапросаИтог +"
			|	МИНИМУМ("+СтрПолеКлюч+") ,";			 
		ИначеЕсли НЕ СтрПолеЗначение.ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
			СтрокаПолейЗапросаИтог 	= СтрокаПолейЗапросаИтог +"
			|	МАКСИМУМ("+СтрПолеКлюч+") ,";				 
		Иначе 			
			СтрокаПолейЗапросаИтог 	= СтрокаПолейЗапросаИтог +"
			|	СУММА("+СтрПолеКлюч+") ,";		 			 
		КонецЕсли;
		
		СтрокаПолейЗапросаСгруппированные = СтрокаПолейЗапросаСгруппированные+"
		|	МАКСИМУМ(тмПоказателиРаскрытия."+СтрПолеКлюч+") КАК "+СтрПолеКлюч+" ,";
		
	КонецЦикла;	
	
	ТекстАналитик = "";		
	ТекстИтогов   = "";
	ТекстСортировок = "";
	
	ВсегоГруппировок =  СтруктураВыводаТекущейОбласти.Количество();                                
	тИндекс          =  1;
	
	СтруктураИтогов = Новый Структура;
				
	ТзПараметровОбластей_ = ТзПараметровОбластей.Скопировать(,"ИмяПоляВзапросе,ПутьКДанным");
	ТзПараметровОбластей_.Свернуть("ИмяПоляВзапросе,ПутьКДанным");
	
	Для Каждого СтрУровень Из  ТзАналитик Цикл	
				
		ТекстАналитик = ТекстАналитик+"
		|тмПоказателиРаскрытия."+СтрУровень.АналитикаКод+",";		
		ТекстИтогов = ТекстИтогов+"	,"+СтрУровень.АналитикаКод;	
		
	КонецЦикла;

	
	СтрокаПолейЗапросаИтог = ЛЕВ(СтрокаПолейЗапросаИтог,СтрДлина(СтрокаПолейЗапросаИтог)-1);	
	ТекстСортировок = ЛЕВ(ТекстСортировок,СтрДлина(ТекстСортировок)-1);
	
	ТекстИтоговогоЗапроса =ТекстИтоговогоЗапроса+"  	
	|;
	|///////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	| "+ТекстАналитик+"
	| "+СтрокаПолейЗапроса+"
	|	тмПоказателиРаскрытия.Уид_Области
	|ИЗ
	|	втДанныеДляТаблиц КАК тмПоказателиРаскрытия
	|ИТОГИ"+СтрокаПолейЗапросаИтог+"
	|ПО
	|	Уид_Области
	|";	
		
	ТекстИтоговогоЗапроса = ТекстИтоговогоЗапроса+ТекстИтогов;
	
	ТекстИтоговогоЗапроса = ТекстИтоговогоЗапроса+"
	|;
	|/////////////////////////////////////////////
	|УНИЧТОЖИТЬ втДанныеДляТаблиц";

	
	Возврат ТекстИтоговогоЗапроса;
	
КонецФункции

Функция ДополнитьЗапросИтогамиПоИерархическимСправочникам(ТзАналитик,ТзПараметровОбластей,СтруктураВыводаТекущейОбласти) 
	
	
	ТекстИтоговогоЗапросаИерархия = "";
	
	Для Каждого СтрУровень Из  ТзАналитик Цикл	
		
		Если СтрУровень.ИерархииАналитики = ТипГруппировкиКомпоновкиДанных.Иерархия Тогда	
			
			ТекстИтоговогоЗапроса 	= "";
			ТекстПодЗапросаИерархия = "";
			СтрокаПолейЗапросаИтог  = "";
			СтрокаПолейЗапроса	    = "";
			СтрокаПолейЗапросаСгруппированные  = "";
			ТекстАналитик = "";
			ТекстАналитикИтог = "";
			
			Для Каждого Аналитика Из  ТзАналитик Цикл	
				
				ТекстАналитикИтог = ТекстАналитикИтог+"
				|тмПоказателиРаскрытия."+Аналитика.АналитикаКод+",";	
				
				Если СтрУровень.АналитикаКод = Аналитика.АналитикаКод Тогда
					ТекстАналитик = ТекстАналитик+"
					|тмПоказателиРаскрытия."+Аналитика.АналитикаКод+".Родитель КАК "+Аналитика.АналитикаКод+" ,";		
					
				Иначе	
					ТекстАналитик = ТекстАналитик+"
					|тмПоказателиРаскрытия."+Аналитика.АналитикаКод+",";		
					
				КонецЕсли;	
				
			КонецЦикла;

			
			ТекстИтоговогоЗапросаИерархия =ТекстИтоговогоЗапросаИерархия+"  	
			|;
			|/////////////////////////////////////////////////////////// 
			|ВЫБРАТЬ 
			| "+ТекстАналитик+"
			| "+СтрокаПолейЗапроса+"
			| 	тмПоказателиРаскрытия.Значение,
			| 	тмПоказателиРаскрытия.ЗначениеНеЧисло,
			|	тмПоказателиРаскрытия.Уид_Области
			|ПОМЕСТИТЬ втДанныеДляТаблиц_Иерархия_"+СтрУровень.АналитикаКод+"
			|ИЗ
			|	"+"втДанныеДляТаблиц_Иерархия_"+СтрУровень.АналитикаКод+"_Ур_1 КАК тмПоказателиРаскрытия";	
           			
			
			Для УровеньРодителя = 1 По 5 Цикл //Просчитаем итоги по иерархии на 20 уровней
				
				Если УровеньРодителя = 1 Тогда
					 ИмяТаблицы = "втДанныеДляТаблиц";
				Иначе	
					 ИмяТаблицы = "втДанныеДляТаблиц_Иерархия_"+СтрУровень.АналитикаКод+"_Ур_"+Строка(УровеньРодителя-1);
				КонецЕсли;	
				
				ТекстПодЗапросаИерархия =ТекстПодЗапросаИерархия+"  	
				|;
				|///////////////////////////////////////////////////////////
				|ВЫБРАТЬ 
				| "+ТекстАналитик+"
				| "+СтрокаПолейЗапроса+"
				| 	тмПоказателиРаскрытия.Значение,
				| 	тмПоказателиРаскрытия.ЗначениеНеЧисло,
				|	тмПоказателиРаскрытия.Уид_Области
				|ПОМЕСТИТЬ втДанныеДляТаблиц_Иерархия_"+СтрУровень.АналитикаКод+"_Ур_"+Строка(УровеньРодителя)+"
				|ИЗ
				|	"+ИмяТаблицы+" КАК тмПоказателиРаскрытия";	
				
				
				Если  УровеньРодителя > 1 Тогда
					ТекстИтоговогоЗапросаИерархия =ТекстИтоговогоЗапросаИерархия+"  	
					|
					|ОБЪЕДИНИТЬ ВСЕ 
					|ВЫБРАТЬ 
					| "+ТекстАналитикИтог+"
					| "+СтрокаПолейЗапроса+"
					| 	тмПоказателиРаскрытия.Значение,
					| 	тмПоказателиРаскрытия.ЗначениеНеЧисло,
					|	тмПоказателиРаскрытия.Уид_Области
					|ИЗ
					|	втДанныеДляТаблиц_Иерархия_"+СтрУровень.АналитикаКод+"_Ур_"+Строка(УровеньРодителя)+" КАК тмПоказателиРаскрытия";
				КонецЕсли;
				
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;

	Возврат ТекстПодЗапросаИерархия+ТекстИтоговогоЗапросаИерархия;
	
КонецФункции	
	
Процедура ПолучитьТекстЗначенийПоказателейТаблицы(ТекстШаблонаЗапроса,СтрГруппы,ИндексРегистра,ОписаниеТекущейОбласти,АналитикиРаскрытия,глТзАналитик,ГруппаПоказателей,ИндексЗапроса,ТзПараметровЗапроса,ОбъектАБ)
	
	УидГруппы = СтрГруппы.УидГруппыОтборов;
	РаскрываемаяОбласть_УидГруппыОтборов = ОписаниеТекущейОбласти.УидГруппыОтборов;
	
	ТекстАналитик = "";
	ТекстДополнительногоСоединения = "";	
	ТекстДополнительногоОтбора = "ГДЕ тзПоказатели.Показатель В (&Пар_"+УидГруппы+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0")+"_Показатели) ";
		
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("глТзАналитик",глТзАналитик);
	СтруктураПараметров.Вставить("АналитикиРаскрытия",АналитикиРаскрытия);
	СтруктураПараметров.Вставить("ГруппаПоказателей",ГруппаПоказателей);
	СтруктураПараметров.Вставить("ТзПараметровЗапроса",ТзПараметровЗапроса);
	СтруктураПараметров.Вставить("УидГруппы",УидГруппы);
	СтруктураПараметров.Вставить("ИндексЗапроса",ИндексЗапроса);
	СтруктураПараметров.Вставить("ОбъектАБ",ОбъектАБ);
	
	СтруктураИндексовАналитик = Новый Структура;
	
	СформироватьТекстДополнительныхПолейЗапроса(СтруктураПараметров,ТекстАналитик,ТекстДополнительногоСоединения,Истина,СтруктураИндексовАналитик);
	
	ТекстАналитик = СтрЗаменить(ТекстАналитик,"ТзПоказатели","тмПоказателиРаскрытия");
	
	Если СтрНайти(ТекстАналитик,"тмПоказателиРаскрытия.ПериодОтчета")>0 Тогда
		
		тРасшифровкаОтбораПериодаОперанда = СтруктураПараметров.ОбъектАБ.РасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("УидГруппыОтборов,ПолеКод,Отбор",УИДГруппы,"ПериодС","Период начала со сдвигом"));
		СдвигПоПериодуОперанда = ?(тРасшифровкаОтбораПериодаОперанда.Количество() = 0,0,ЗначениеИзСтрокиВнутр(тРасшифровкаОтбораПериодаОперанда[0].ЗначениеОтбораСтрока)); 
		
		тРасшифровкаОтбораПериодаРаскрытия = СтруктураПараметров.ОбъектАБ.НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов,ПолеКод,Отбор",ОписаниеТекущейОбласти.ИмяОбластиКолонок,"ПериодС","Период начала со сдвигом"));
		СдвигПоПериодуРаскрытия = ?(тРасшифровкаОтбораПериодаРаскрытия.Количество() = 0,0,ЗначениеИзСтрокиВнутр(тРасшифровкаОтбораПериодаРаскрытия[0].ЗначениеОтбораСтрока));
		
		СдвигПоПериоду 			= СдвигПоПериодуОперанда - СдвигПоПериодуРаскрытия;

		ТекстШаблонаПериоды     = "";
		ШаблонПоляПериода       = "";
		
		Если СдвигПоПериоду = 0 Тогда
			//ТекстАналитик = ТекстАналитик+"тмПоказателиРаскрытия.ПериодОтчета.ДатаНачала КАК ПериодДатаНачала,";	
			ШаблонПоляПериода = "тмПоказателиРаскрытия.ПериодОтчета";

		Иначе				
			ТекстШаблонаПериоды = "	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Периоды КАК Периоды
			|	ПО тмПоказателиРаскрытия.ПериодОтчета.ДатаНачала 			= ДобавитьКДате(Периоды.ДатаНачала,СЕКУНДА,"+СдвигПоПериоду+")
			|		И Периоды.Периодичность 		= &Периодичность
			|		И Периоды.Произвольный 			= Ложь
			|		И Периоды.ПометкаУдаления 		= Ложь";
			
			ШаблонПоляПериода = "Периоды.Ссылка КАК ПериодОтчета";
			ТекстАналитик = СтрЗаменить(ТекстАналитик,"тмПоказателиРаскрытия.ПериодОтчета",ШаблонПоляПериода);
		КонецЕсли;
	КонецЕсли;
	
	ТзАналитик = ЗаполнитьТаблицуОтборовДопАналитик(УидГруппы,,ОбъектАБ);
		
	СтруктураПараметров.Вставить("глТзАналитик",ТзАналитик);
	
	Если Не ЗначениеЗаполнено(ТекстШаблонаЗапроса) Тогда
		
		ТекстШаблонаЗапроса = ТекстШаблонаЗапроса+"
		|ВЫБРАТЬ
		|
		| тмПоказателиРаскрытия.Показатель,
		| тмПоказателиРаскрытия.ПоказательКод,
		| &&АналитикаРаскрытия,
		|"+""""+УидГруппы+""""+" КАК УидГруппыОтборов,
		|"+""""+РаскрываемаяОбласть_УидГруппыОтборов+""""+ " КАК Уид_Области,"+"
		| тмПоказателиРаскрытия.ИмяОбластиДляВывода,
		| тмПоказателиРаскрытия.Значение,
		| тмПоказателиРаскрытия.ЗначениеНеЧисло,
		| тмПоказателиРаскрытия.ЗначениеВалюта,
		| тмПоказателиРаскрытия.ПоказательКод+"+""""+УидГруппы+""""+" КАК ИдентификаторПоказателя
		| ПОМЕСТИТЬ втДанныеДляТаблиц
		|ИЗ
		| тмПоказателиРаскрытия КАК тмПоказателиРаскрытия 
		| //ТекстШаблонаПериоды 
		|	ГДЕ тмПоказателиРаскрытия.УидГруппыОтборов = "+""""+УидГруппы+""""+"  		
		|   И тмПоказателиРаскрытия.Показатель В (&Пар_"+УидГруппы+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0")+"_Показатели)
		|
		|";	
	Иначе		
		ТекстШаблонаЗапроса = ТекстШаблонаЗапроса+"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|	
		|ВЫБРАТЬ
		|
		| тмПоказателиРаскрытия.Показатель,
		| тмПоказателиРаскрытия.ПоказательКод,
		| &&АналитикаРаскрытия,
		|"+""""+УидГруппы+""""+" КАК УидГруппыОтборов,
		|"+""""+РаскрываемаяОбласть_УидГруппыОтборов+""""+ " КАК Уид_Области,"+"
		| тмПоказателиРаскрытия.ИмяОбластиДляВывода,
		| тмПоказателиРаскрытия.Значение,
		| тмПоказателиРаскрытия.ЗначениеНеЧисло,
		| тмПоказателиРаскрытия.ЗначениеВалюта,
		| тмПоказателиРаскрытия.ПоказательКод+"+""""+УидГруппы+""""+" КАК ИдентификаторПоказателя
		|ИЗ
		| тмПоказателиРаскрытия КАК тмПоказателиРаскрытия 
		| //ТекстШаблонаПериоды 		
		|	ГДЕ тмПоказателиРаскрытия.УидГруппыОтборов = "+""""+УидГруппы+""""+"  		
		|   И тмПоказателиРаскрытия.Показатель В (&Пар_"+УидГруппы+"_ИндексЗапроса_"+Формат(ИндексЗапроса,"ЧГ=0")+"_Показатели)
		|
		|" ;	
	КонецЕсли;
			
	ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"&&АналитикаРаскрытия,",ТекстАналитик);
	ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"//ТекстШаблонаПериоды",ТекстШаблонаПериоды);
	//ТекстШаблонаЗапроса = СтрЗаменить(ТекстШаблонаЗапроса,"тмПоказателиРаскрытия.ПериодОтчета",ШаблонПоляПериода);

					
КонецПроцедуры	

Функция ПолучитьШиринуМакетКолонокДляВыводаОбласти(тМакет,ИмяМакета,ИмяМакетаГруппы,РаскрываемыеОбластиКолонки)
	
	ШиринаМакета = 0;
		
	//определили все вложенные макеты.
	тОбластьГруппа       = РаскрываемыеОбластиКолонки.Найти(ИмяМакетаГруппы,"ИмяОбласти");
	тРаскрываемыеОбласти = РаскрываемыеОбластиКолонки.Скопировать(Новый Структура("Право",тОбластьГруппа.Право));
	тРаскрываемыеОбласти.Сортировать("Лево");	
	
	Для Инд = 0 По тРаскрываемыеОбласти.Количество()-1 Цикл
		
		Если тРаскрываемыеОбласти[Инд].ИмяОбласти = ИмяМакета Тогда  //Нашли текущий макет
			
			Если Инд = тРаскрываемыеОбласти.Количество()-1 Тогда   //Это последний макет колонок, его ширина вычисляется как право-лево+1
				ШиринаМакета = тРаскрываемыеОбласти[Инд].Право -  тРаскрываемыеОбласти[Инд].Лево+1; 
			Иначе	
				СледжующийМакетЛево = тРаскрываемыеОбласти[Инд+1].Лево;
				ШиринаМакета =   СледжующийМакетЛево - тРаскрываемыеОбласти[Инд].Лево;   //Ширина текущего макета = лево первого вложенного макета - лево текущео макета
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат ШиринаМакета;
	
КонецФункции

Функция ПолучитьВысотуМакетКолонокДляВыводаОбласти(тМакет,ИмяМакета,ИмяМакетаГруппы,РаскрываемыеОбластиСтроки)
	
	ВысотаМакета = 0;
				
	//определили все вложенные макеты.
	тОбластьГруппа       = РаскрываемыеОбластиСтроки.Найти(ИмяМакетаГруппы,"ИмяОбласти");
	тРаскрываемыеОбласти = РаскрываемыеОбластиСтроки.Скопировать(Новый Структура("Низ",тОбластьГруппа.Низ));
	тРаскрываемыеОбласти.Сортировать("Верх");	
	
	Для Инд = 0 По тРаскрываемыеОбласти.Количество()-1 Цикл
		
		Если тРаскрываемыеОбласти[Инд].ИмяОбласти = ИмяМакета Тогда  //Нашли текущий макет
			
			Если Инд = тРаскрываемыеОбласти.Количество()-1 Тогда   //Это последний макет колонок, его высота вычисляется как низ-верх+1
				ВысотаМакета = тРаскрываемыеОбласти[Инд].Низ -  тРаскрываемыеОбласти[Инд].Верх+1; 
			Иначе	
				СледжующийМакетВерх = тРаскрываемыеОбласти[Инд+1].Верх;
				ВысотаМакета =   СледжующийМакетВерх - тРаскрываемыеОбласти[Инд].Верх;   //Высота текущего макета = Верх первого вложенного макета - верх текущео макета
			КонецЕсли;	
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Возврат ВысотаМакета;
	
КонецФункции

Процедура ПолучитьОписаниеСхемыКДВыводаТаблицы(СтруктураПараметров);
	
	
	ПоказателиТекущегоЗапроса 		= СтруктураПараметров.ТаблицаПоказателиТекущейОбласти;
	ТзАналитик                		= СтруктураПараметров.ТзАналитик;
	СтруктураВыводаТекущейОбласти   = СтруктураПараметров.СтруктураВыводаТекущейОбласти;
	Уид_Области                     = СтруктураПараметров.ИмяОбласти;
	ТзПараметровОбластей            = СтруктураПараметров.тПараметрыОбластей;
	КэшУникальныхКодовПоказателей   = СтруктураПараметров.КэшУникальныхКодовПоказателей;
	СтрокаВывода                    = СтруктураПараметров.СтрокаВывода;
	ПрефиксЗапроса                  = СтруктураПараметров.ПрефиксЗапроса;
	
	Если ПоказателиТекущегоЗапроса.Количество() = 0 Тогда
		 Возврат;
	КонецЕсли;	
	
	ТекстИтоговогоЗапроса 				= "";
	СтрокаПолейЗапроса	    			= "";
	СтрокаПолейЗапросаСгруппированные  	= "";
	ТекстАналитик 						= "";		
	ТекстАналитикТипизиованные 			= "";
	СтруктураИменПолейСКДСтроки  		=  Новый Структура;
	СтруктураИменПолейСКДКолонки  		=  Новый Структура;
	СтруктураИменРесурсовСКД    		=  Новый Массив;
	
	СхемаСКД 								= Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных 							= СхемаСКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя 						= "ИсточникДанных";
	ИсточникДанных.ТипИсточникаДанных 		= "Local";
	
	ТекущийНаборДанных 						= СхемаСКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	ТекущийНаборДанных.Имя 					= "ОсновнойНабор";
	ТекущийНаборДанных.Запрос  				= "";
	ТекущийНаборДанных.ИсточникДанных 		= "ИсточникДанных";		
		
	НастройкиПоУмолчанию 					= СхемаСКД.НастройкиПоУмолчанию;
	НастройкиПоУмолчанию.ПараметрыВывода.УстановитьЗначениеПараметра("ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
    НастройкиПоУмолчанию.ПараметрыВывода.УстановитьЗначениеПараметра("ВертикальноеРасположениеОбщихИтогов"	, РасположениеИтоговКомпоновкиДанных.Нет);
	НастройкиПоУмолчанию.ПараметрыВывода.УстановитьЗначениеПараметра("РасположениеПолейГруппировки"			, РасположениеПолейГруппировкиКомпоновкиДанных.Отдельно);
    	
	ТаблицаКомпоновкиДанных                 = НастройкиПоУмолчанию.Структура.Добавить(Тип("ТаблицаКомпоновкиДанных"));
	
	
	Для Каждого тПоказательЗапроса Из  ПоказателиТекущегоЗапроса Цикл	
		
		СтрПолеКлюч 		= тПоказательЗапроса.КодПоляПоказателя;
		СтрПолеЗначение    = КэшУникальныхКодовПоказателей[СтрПолеКлюч];
		
		НачалоКодаПоказателя  	= СтрНайти(СтрПолеКлюч,"_MES_");
		КодБезПрефикса         = Прав(СтрПолеКлюч,СтрДлина(СтрПолеКлюч)-НачалоКодаПоказателя-4);
		КодБезПрефикса         = СтрЗаменить(КодБезПрефикса,"_UID_","");
		Если СтрПолеЗначение.Свойство("ЗначениеВалюта") Тогда
			КодБезПрефикса         = СтрЗаменить(КодБезПрефикса,"_Вал","");
			СтрокаПолейЗапроса 	= СтрокаПолейЗапроса +"
			|	ВЫБОР КОГДА  тмПоказателиРаскрытия.ИмяОбластиДляВывода = """+СтрЗаменить(СтрПолеКлюч,"_Вал","") +""" ТОГДА тмПоказателиРаскрытия.ЗначениеВалюта ИНАЧЕ NULL КОНЕЦ  КАК "+СтрПолеКлюч+",";	
		ИначеЕсли СтрПолеЗначение.ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда	 
			СтрокаПолейЗапроса 	= СтрокаПолейЗапроса +"
			|	ВЫБОР КОГДА   тмПоказателиРаскрытия.ИмяОбластиДляВывода = """+СтрПолеКлюч +""" ТОГДА тмПоказателиРаскрытия.Значение ИНАЧЕ NULL КОНЕЦ  КАК "+СтрПолеКлюч+",";			 
		Иначе 
			СтрокаПолейЗапроса 	= СтрокаПолейЗапроса +"
			|	ВЫБОР КОГДА  тмПоказателиРаскрытия.ИмяОбластиДляВывода = """+СтрПолеКлюч +""" ТОГДА тмПоказателиРаскрытия.ЗначениеНеЧисло ИНАЧЕ NULL КОНЕЦ  КАК "+СтрПолеКлюч+",";			 
		КонецЕсли; 	 
		
		Если СтрПолеЗначение.ПоказательВидИтога = Перечисления.ВидыИтоговПоказателя.Максимум Тогда	  
			ПолеРесурса             = СхемаСКД.ПоляИтога.Добавить();
			ПолеРесурса.ПутьКДанным = СтрПолеКлюч;
			ПолеРесурса.Выражение   = "МАКСИМУМ(" + СтрПолеКлюч + ")";	 
		ИначеЕсли СтрПолеЗначение.ПоказательВидИтога = Перечисления.ВидыИтоговПоказателя.Минимум Тогда		 
			ПолеРесурса             = СхемаСКД.ПоляИтога.Добавить();
			ПолеРесурса.ПутьКДанным = СтрПолеКлюч;
			ПолеРесурса.Выражение   = "МИНИМУМ(" + СтрПолеКлюч + ")";	 
		ИначеЕсли СтрПолеЗначение.ПоказательВидИтога = Перечисления.ВидыИтоговПоказателя.НеРассчитывается Тогда 	 
			ПолеРесурса             = СхемаСКД.ПоляИтога.Добавить();
			ПолеРесурса.ПутьКДанным = СтрПолеКлюч;
			ПолеРесурса.Выражение   = "МАКСИМУМ(" + СтрПолеКлюч + ")";			 
		ИначеЕсли НЕ СтрПолеЗначение.ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда	  
			ПолеРесурса             = СхемаСКД.ПоляИтога.Добавить();
			ПолеРесурса.ПутьКДанным = СтрПолеКлюч;
			ПолеРесурса.Выражение   = "МАКСИМУМ(" + СтрПолеКлюч + ")";	 
		Иначе 				 			  
			ПолеРесурса             = СхемаСКД.ПоляИтога.Добавить();
			ПолеРесурса.ПутьКДанным = СтрПолеКлюч;
			ПолеРесурса.Выражение   = "СУММА(" + СтрПолеКлюч + ")";
		КонецЕсли;
		
		СтруктураИменРесурсовСКД.Добавить(СтрПолеКлюч);
		
		СтрокаПолейЗапросаСгруппированные = СтрокаПолейЗапросаСгруппированные+"
		|	МАКСИМУМ(тмПоказателиРаскрытия."+СтрПолеКлюч+") КАК "+СтрПолеКлюч+" ,";
		
	КонецЦикла;	
	
	ТекстАналитик = "";		
			
	//Добавляем колонки группировок
	Для Каждого АналитикаСтроки Из СтрокаВывода.АналитикиСтрок Цикл
		
		Если НастройкиПоУмолчанию.Структура[0].Строки.Количество() = 0 Тогда
			Группировка = НастройкиПоУмолчанию.Структура[0].Строки.Добавить();
		Иначе	
			Группировка = Группировка.Структура.Добавить();
		КонецЕсли;	
		
		Группировка.ПараметрыВывода.УстановитьЗначениеПараметра("РасположениеРеквизитов"				, РасположениеРеквизитовКомпоновкиДанных.Отдельно);
		Группировка.ПараметрыВывода.УстановитьЗначениеПараметра("РасположениеГруппировки"				, РасположениеГруппировкиКомпоновкиДанных.Начало);

		нПолеГруппировки 			= Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		нПолеГруппировки.Поле		= Новый ПолеКомпоновкиДанных(АналитикаСтроки.АналитикаКод);		
		
		Если АналитикаСтроки.АналитикаКод = "ПериодОтчета" И  СтрокаВывода.КэшНастроекПериодов.Количество() = 1 Тогда
			тСвойстваПериодов = СтрокаВывода.КэшНастроекПериодов[0];
			Если тСвойстваПериодов.ВыводитьИтогГод
				ИЛИ  тСвойстваПериодов.ВыводитьИтогПолугодие
				ИЛИ  тСвойстваПериодов.ВыводитьИтогКвартал
				ИЛИ  тСвойстваПериодов.ВыводитьИтогМесяц
				ИЛИ  тСвойстваПериодов.ВыводитьИтогДекада
				ИЛИ  тСвойстваПериодов.ВыводитьИтогНеделя
				ИЛИ  тСвойстваПериодов.ВыводитьИтогДень Тогда		
				нПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			КонецЕсли;	
		КонецЕсли;
		
		тНастройкаИерархииПоля = СтрокаВывода.КэшНастроекИерархий.Найти(АналитикаСтроки.АналитикаКод,"КодАналитики");
		Если Не тНастройкаИерархииПоля = Неопределено Тогда
			нПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;		
		КонецЕсли;	
		
		ВыбранноеПолеГрКомпоновкиДанных 				= Группировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
		ВыбранноеПолеГрКомпоновкиДанных.Поле 			= Новый ПолеКомпоновкиДанных(АналитикаСтроки.АналитикаКод);
		ВыбранноеПолеГрКомпоновкиДанных.Использование 	= Истина;
		
		СтруктураИменПолейСКДСтроки.Вставить(АналитикаСтроки.АналитикаКод);
				
		//Добавляем поля- ресурсы
		Для Каждого ПолеРесурс Из СтруктураИменРесурсовСКД Цикл
			ВыбранноеПолеГрКомпоновкиДанных 				= Группировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
			ВыбранноеПолеГрКомпоновкиДанных.Поле 			= Новый ПолеКомпоновкиДанных(ПолеРесурс);
			ВыбранноеПолеГрКомпоновкиДанных.Использование = Истина;
		КонецЦикла;
		
		ТипАналитикиВЗапоросе = СтрЗаменить(АналитикаСтроки.АналитикаТипСтрока,"Ссылка","");
		
		Если СтрНайти(ТипАналитикиВЗапоросе,"|")>0 Тогда	//Составной тип не выражаем
			ТекстАналитик = ТекстАналитик+"
			|тмПоказателиРаскрытия."+АналитикаСтроки.АналитикаКод+" КАК "+АналитикаСтроки.АналитикаКод+",";		
		Иначе   
			ТекстАналитик = ТекстАналитик+"
			|ВЫРАЗИТЬ(тмПоказателиРаскрытия."+АналитикаСтроки.АналитикаКод+" КАК "+ТипАналитикиВЗапоросе+") КАК "+АналитикаСтроки.АналитикаКод+",";		
		КонецЕсли;	

		
	КонецЦикла;
	
	//Добавляем строки группировок
	Для Каждого АналитикаСтроки Из СтрокаВывода.АналитикиКолонок Цикл
		
		Если НастройкиПоУмолчанию.Структура[0].Колонки.Количество() = 0 Тогда
			Группировка = НастройкиПоУмолчанию.Структура[0].Колонки.Добавить();
		Иначе	
			Группировка = Группировка.Структура.Добавить();
		КонецЕсли;	
		
		Группировка.ПараметрыВывода.УстановитьЗначениеПараметра("РасположениеРеквизитов"				, РасположениеРеквизитовКомпоновкиДанных.Отдельно);
		Группировка.ПараметрыВывода.УстановитьЗначениеПараметра("РасположениеГруппировки"				, РасположениеГруппировкиКомпоновкиДанных.Начало);

		
		нПолеГруппировки 			= Группировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		нПолеГруппировки.Поле		= Новый ПолеКомпоновкиДанных(АналитикаСтроки.АналитикаКод);		
		
		Если АналитикаСтроки.АналитикаКод = "ПериодОтчета" И  СтрокаВывода.КэшНастроекПериодов.Количество() = 1 Тогда
			тСвойстваПериодов = СтрокаВывода.КэшНастроекПериодов[0];
			Если тСвойстваПериодов.ВыводитьИтогГод
				ИЛИ  тСвойстваПериодов.ВыводитьИтогПолугодие
				ИЛИ  тСвойстваПериодов.ВыводитьИтогКвартал
				ИЛИ  тСвойстваПериодов.ВыводитьИтогМесяц
				ИЛИ  тСвойстваПериодов.ВыводитьИтогДекада
				ИЛИ  тСвойстваПериодов.ВыводитьИтогНеделя
				ИЛИ  тСвойстваПериодов.ВыводитьИтогДень Тогда		
				нПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;
			КонецЕсли;	
		КонецЕсли;
		
		тНастройкаИерархииПоля = СтрокаВывода.КэшНастроекИерархий.Найти(АналитикаСтроки.АналитикаКод,"КодАналитики");
		Если Не тНастройкаИерархииПоля = Неопределено Тогда
			нПолеГруппировки.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Иерархия;		
		КонецЕсли;	
		
		ВыбранноеПолеГрКомпоновкиДанных 				= Группировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
		ВыбранноеПолеГрКомпоновкиДанных.Поле 			= Новый ПолеКомпоновкиДанных(АналитикаСтроки.АналитикаКод);
		ВыбранноеПолеГрКомпоновкиДанных.Использование 	= Истина;
		
		СтруктураИменПолейСКДКолонки.Вставить(АналитикаСтроки.АналитикаКод);
				
		//Добавляем поля- ресурсы
		Для Каждого ПолеРесурс Из СтруктураИменРесурсовСКД Цикл
			ВыбранноеПолеГрКомпоновкиДанных 				= Группировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));			
			ВыбранноеПолеГрКомпоновкиДанных.Поле 			= Новый ПолеКомпоновкиДанных(ПолеРесурс);
			ВыбранноеПолеГрКомпоновкиДанных.Использование = Истина;
		КонецЦикла;

		ТипАналитикиВЗапоросе = СтрЗаменить(АналитикаСтроки.АналитикаТипСтрока,"Ссылка","");
		
		Если СтрНайти(ТипАналитикиВЗапоросе,"|")>0 Тогда	//Составной тип не выражаем
			ТекстАналитик = ТекстАналитик+"
			|тмПоказателиРаскрытия."+АналитикаСтроки.АналитикаКод+" КАК "+АналитикаСтроки.АналитикаКод+",";		
		Иначе   
			ТекстАналитик = ТекстАналитик+"
			|ВЫРАЗИТЬ(тмПоказателиРаскрытия."+АналитикаСтроки.АналитикаКод+" КАК "+ТипАналитикиВЗапоросе+") КАК "+АналитикаСтроки.АналитикаКод+",";		
		КонецЕсли;		
		
	КонецЦикла;

	
	ТекстИтоговогоЗапроса =ТекстИтоговогоЗапроса+"  	
	|;
	|///////////////////////////////////////////////////////////
	|ВЫБРАТЬ 
	| "+ТекстАналитик+"
	| "+СтрокаПолейЗапроса+"
	|	тмПоказателиРаскрытия.Уид_Области
	|ИЗ
	|	втДанныеДляТаблиц КАК тмПоказателиРаскрытия
	|";	
		
	ТекстИтоговогоЗапроса = ТекстИтоговогоЗапроса+"
	|;
	|/////////////////////////////////////////////
	|УНИЧТОЖИТЬ втДанныеДляТаблиц";
	
	ТекущийНаборДанных.Запрос  =  ПрефиксЗапроса + ТекстИтоговогоЗапроса;
	
	КомпоновщикМакета	=	Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки 	= 	Новый ДанныеРасшифровкиКомпоновкиДанных;
	МакетКомпоновки		=   КомпоновщикМакета.Выполнить(СхемаСКД,СхемаСКД.НастройкиПоУмолчанию,ДанныеРасшифровки);
	
	СтруктураИменПолейСКД                   = Новый Структура;
	СтруктураИменПолейСКД.Вставить("СтруктураИменРесурсовСКД",СтруктураИменРесурсовСКД);
	СтруктураИменПолейСКД.Вставить("СтруктураИменПолейСКДСтроки",СтруктураИменПолейСКДСтроки);
	СтруктураИменПолейСКД.Вставить("СтруктураИменПолейСКДКолонки",СтруктураИменПолейСКДКолонки);
	
	СтрокаВывода.СКДДляВыводаОбласти 		=  СхемаСКД;
	СтрокаВывода.СтруктураИменПолейСКД      =  СтруктураИменПолейСКД;
	СтрокаВывода.МакетКомпоновки      		=  МакетКомпоновки;
    СтрокаВывода.ДанныеРасшифровки      	=  ДанныеРасшифровки;

	
КонецПроцедуры

#КонецОбласти


#Область ГенерацияМакетовРаскрытий

Функция ОбластьВходитВТаблицу(ИндексСтроки,ИндексКолонки,ТипОбласти,ОбъектАБ,ПолеТабличногоДокументаМакет,тСоставОбластейРаскрытия = Неопределено,ИмяОбласти = "")
	
	Если ТипОбласти = "Колонки" Тогда	
		тОбласть =  тСоставОбластейРаскрытия.НайтиСтроки(Новый Структура("ИмяОбласти,ТипОбласти",ИмяОбласти,"Строки"));
		Если тОбласть.Количество()>0 Тогда
			  Возврат Истина;
		КонецЕсли;		
	КонецЕсли;	
	
	Если ТипОбласти = "Строки" Тогда	
		тОбласть =  тСоставОбластейРаскрытия.НайтиСтроки(Новый Структура("ИмяОбласти,ТипОбласти",ИмяОбласти,"Колонки"));
		Если тОбласть.Количество()>0 Тогда
			  Возврат Истина;
		КонецЕсли;	
	КонецЕсли;	
	
	Возврат Ложь;
	
КонецФункции	
	
Функция ОбработатьСтрокуШаблонаЗаголовкаАналитики(ИсходнаяСтрока,ДоступныеПоля)
	
	ТзВозврата = Новый ТаблицаЗначений;
	ТзВозврата.Колонки.Добавить("ТекстОбласти");
	ТзВозврата.Колонки.Добавить("ТипОбласти");
	
	Пока СтрНайти(ИсходнаяСтрока,"[")>0 Цикл		
		ПозицияНачалаПараметра 			= СтрНайти(ИсходнаяСтрока,"["); 
		ПозицияОкончанияПараметра       = СтрНайти(ИсходнаяСтрока,"]"); 
		ТекстДоПараметра                = Лев(ИсходнаяСтрока,ПозицияНачалаПараметра-1);
		Параметр 						= Сред(ИсходнаяСтрока,ПозицияНачалаПараметра+1,ПозицияОкончанияПараметра-ПозицияНачалаПараметра-1);
		
		нСтрока = ТзВозврата.Добавить();
		нСтрока.ТекстОбласти = ТекстДоПараметра;
		нСтрока.ТипОбласти = "Строка";
		
		ПараметрТочка 	= СтрНайти(Параметр,".");
		
		ПараметрДоТочки = ?(ПараметрТочка=0,Параметр,Лев(Параметр,ПараметрТочка-1));
		
		кПараметр = ДоступныеПоля.НайтиСтроки(Новый Структура("АналитикаПредставление",СокрЛП(ПараметрДоТочки)));
		
		Если кПараметр.Количество() = 0 Тогда
			нСтрока = ТзВозврата.Добавить();
			нСтрока.ТекстОбласти = Параметр;
			нСтрока.ТипОбласти = "Строка";
		Иначе	
			нСтрока = ТзВозврата.Добавить();
			нСтрока.ТекстОбласти = СтрЗАменить(Параметр,кПараметр[0].АналитикаПредставление,кПараметр[0].АналитикаКод);
			нСтрока.ТипОбласти = "Параметр";
		КонецЕсли;	
		
		ИсходнаяСтрока =  Прав(ИсходнаяСтрока,СтрДлина(ИсходнаяСтрока)-ПозицияОкончанияПараметра);	
	КонецЦикла;	
	
	нСтрока = ТзВозврата.Добавить();
	нСтрока.ТекстОбласти = ИсходнаяСтрока;
	нСтрока.ТипОбласти = "Строка";
		
	Возврат ТзВозврата;
	
КонецФункции	

Функция ПолучитьСвойстваПоказателя(Расшифровка,тПоказатель) 
	
	СтрукткраДопСвойств = Новый Структура;
	
	СтрукткраДопСвойств.Вставить("ПоказательСсылка"			,тПоказатель.Ссылка);
	СтрукткраДопСвойств.Вставить("ВидОтчетаСсылка"			,тПоказатель.ВидОтчета);
	СтрукткраДопСвойств.Вставить("ПоказательТипЗначения"	,тПоказатель.ТипЗначения);
	СтрукткраДопСвойств.Вставить("ПоказательВидИтога"		,тПоказатель.ВидИтога);
	СтрукткраДопСвойств.Вставить("ПоказательВидИтогаПериод"	,тПоказатель.ВидИтогаПериод);
	
	Если Расшифровка.Свойство("ОтображатьСуммуВДопВалюте") Тогда
		СтрукткраДопСвойств.Вставить("ЗначениеВалюта",Истина)
	КонецЕсли;		
	
	Возврат  СтрукткраДопСвойств;
	
КонецФункции	

Функция ПроверитьВыводЗначенияПоПоказателю(СтруктураПараметров)
	
	СтруктураСвойствПоказателя = СтруктураПараметров.СтруктураСвойствПоказателя;
	СкрватьВыводЗначения = Ложь;
	
	//Если итог не задан явно для строки интерпретируем как отсутствие итога
	Если СтруктураСвойствПоказателя.ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Строка
		И (СтруктураПараметров.ТипОбласти = "Колонки" Или СтруктураПараметров.ТипОбласти = "Строки") Тогда
		СкрватьВыводЗначения = Истина;
	ИначеЕсли СтруктураСвойствПоказателя.ПоказательВидИтога = Перечисления.ВидыИтоговПоказателя.НеРассчитывается
		И СтруктураПараметров.ТипОбласти = "Колонки" Тогда
		СкрватьВыводЗначения = Истина;
	ИначеЕсли СтруктураСвойствПоказателя.ПоказательВидИтогаПериод = Перечисления.ВидыИтоговПоказателяПоПериоду.НеРассчитывать
		И СтруктураПараметров.ТипОбласти = "Строки" Тогда
		СкрватьВыводЗначения = Истина;
	КонецЕсли;	
	
	Если НЕ СкрватьВыводЗначения Тогда
		Возврат Истина;
	КонецЕсли;
	
	ПолнаяСтруктураАналитик       =  АналитическийБланкУХСервер.ПолучитьПолнуюСтруктуруАналитик(СтруктураПараметров.тПоказатель);
	
	СтруктураРаскрываемыхАналитик =  Новый Структура(Новый ФиксированнаяСтруктура(СтруктураПараметров.СтруктураИспользованныхАналитик));
	
	СтруктураАгрегированныхАналитик = Новый Структура;
	СтруктураАгрегированныхАналитик.Вставить("ПериодОтчета");
	СтруктураНеАгрегированныхАналитик = Новый Структура;
	//Вычислим аналитики агрегаты...
	Если СтруктураПараметров.ТекОбл.Расшифровка.Свойство("РасшифровкаГруппОтборов") Тогда
		ОтбираемыеАналитики = СтруктураПараметров.ТекОбл.Расшифровка.РасшифровкаГруппОтборов;
		Для Каждого Стр Из ОтбираемыеАналитики Цикл
			
			ЗанчениеОтбора = АналитическийБланкГенерацияМакетаУХСервер.ПрочитатьСтрокуОтборов(Стр);
			
			Если Стр.Ключ = "ПериодПо" И ЗанчениеОтбора.Отбор = "Период начала отчета" И НЕ ОтбираемыеАналитики.Свойство("ПериодС")  Тогда	
				СтруктураАгрегированныхАналитик.Удалить("ПериодОтчета");
				Продолжить
			КонецЕсли;	
			
			Если Стр.Ключ = "ПериодС" И ЗанчениеОтбора.Отбор = "Период окончания отчета" И НЕ ОтбираемыеАналитики.Свойство("ПериодПо")  Тогда	
				СтруктураАгрегированныхАналитик.Удалить("ПериодОтчета");
				Продолжить;
			КонецЕсли;	
						
			Если Стр.Ключ = "ПериодПо" И ЗанчениеОтбора.Отбор = "Период начала со сдвигом" ИЛИ  ЗанчениеОтбора.Отбор = "Период окончания со сдвигом"   Тогда		
				Если ОтбираемыеАналитики.Свойство("ПериодС") И ОтбираемыеАналитики.ПериодС = СтрЗаменить(Стр.Значение,"ПериодПо","ПериодС") Тогда	
					СтруктураАгрегированныхАналитик.Удалить("ПериодОтчета");
					Продолжить
				КонецЕсли;
			КонецЕсли;	
			
			Если Стр.Ключ = "ПериодС" И ЗанчениеОтбора.Отбор = "Период начала со сдвигом" ИЛИ  ЗанчениеОтбора.Отбор = "Период окончания со сдвигом"   Тогда		
				Если ОтбираемыеАналитики.Свойство("ПериодПо") И ОтбираемыеАналитики.ПериодПо = СтрЗаменить(Стр.Значение,"ПериодС","ПериодПо") Тогда	
					СтруктураАгрегированныхАналитик.Удалить("ПериодОтчета");
					Продолжить
				КонецЕсли;
			КонецЕсли;	

			Если НЕ ЗанчениеОтбора.Отбор = "Равно" Тогда 
				СтруктураАгрегированныхАналитик.Вставить(Стр.Ключ);
			Иначе	
				СтруктураНеАгрегированныхАналитик.Вставить(Стр.Ключ);
			КонецЕсли;	 
			
		КонецЦикла;		
	КонецЕсли;
		
	
	Для Каждого рАналитика Из ПолнаяСтруктураАналитик Цикл	
		
		Если рАналитика.Ключ = "АналитикаВалюта" Тогда
			 Если   СтруктураРаскрываемыхАналитик.Свойство(рАналитика.Значение) Тогда
				    Продолжить;
			 КонецЕсли;
		КонецЕсли;	
		
		// Эта аналитика для текущей области не раскрывается, проверим является ли она агрегатом
		Если  НЕ СтруктураРаскрываемыхАналитик.Свойство(рАналитика.Ключ) Тогда  
			Если рАналитика.Ключ = "ПериодОтчета" ИЛИ рАналитика.Ключ = "Организация" ИЛИ рАналитика.Ключ = "Проект" ИЛИ  рАналитика.Ключ = "Сценарий"  Тогда   //Ключевые аналтики
				Если СтруктураАгрегированныхАналитик.Свойство(рАналитика.Ключ) Тогда
					Возврат Ложь;
				КонецЕсли;	
			Иначе	
				Если НЕ СтруктураНеАгрегированныхАналитик.Свойство(рАналитика.Ключ) Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;			
		КонецЕсли;			
		
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьОписаниеПоляСКД(ИмяПоля,СинонимПоля,ТипДанных,МакетСкд) Экспорт
	
	НовоеПоле = МакетСкд.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));	
	НовоеПоле.Поле = ИмяПоля;
	НовоеПоле.Заголовок = СинонимПоля;
	НовоеПоле.ПутьКДанным = ИмяПоля;
	
	МассивТипов = Новый Массив;
	МассивПриведенныхТипов = Новый Массив();
	
	МассивТипов=СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТипДанных, "|");
	Для Каждого Эл Из МассивТипов Цикл	
		ПриведенныйТип = Тип(Эл);         
		МассивПриведенныхТипов.Добавить(ПриведенныйТип);	
	КонецЦикла;
	
	НовоеПоле.ТипЗначения = Новый ОписаниеТипов(МассивПриведенныхТипов);		
	
КонецПроцедуры


#КонецОбласти


#Область ЗапросыПолученияДанныхОперандов

Процедура ПолучитьКэшПоказателей(МассивПоказателей,ТзАналитикИсходная,КэшПоказателей,КэшАналитик) 
	
	ТзАналитик = ТзАналитикИсходная.Скопировать();
	ТзАналитик.Свернуть("АналитикаКод");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПоказателиОтчетов.Ссылка КАК Ссылка,
	               |	ПоказателиОтчетов.ГруппаРаскрытия КАК ГруппаРаскрытия,
	               |	ВЫБОР
	               |		КОГДА ПоказателиОтчетов.ГруппаРаскрытия = ЗНАЧЕНИЕ(Справочник.ГруппыРаскрытия.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 0
	               |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 1
	               |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 2
	               |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 3
	               |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 4
	               |					КОГДА ПоказателиОтчетов.Владелец.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 5
	               |					ИНАЧЕ 6
	               |				КОНЕЦ
	               |		КОГДА НЕ ПоказателиОтчетов.Владелец.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |				И ПоказателиОтчетов.Владелец.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 1
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 2
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 3
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 4
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 5
	               |					ИНАЧЕ 6
	               |				КОНЕЦ
	               |		КОГДА НЕ ПоказателиОтчетов.Владелец.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |				И ПоказателиОтчетов.Владелец.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 2
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 3
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 4
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 5
	               |					ИНАЧЕ 6
	               |				КОНЕЦ
	               |		КОГДА НЕ ПоказателиОтчетов.Владелец.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |				И ПоказателиОтчетов.Владелец.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 3
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 4
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 5
	               |					ИНАЧЕ 6
	               |				КОНЕЦ
	               |		КОГДА НЕ ПоказателиОтчетов.Владелец.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |				И ПоказателиОтчетов.Владелец.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 4
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 5
	               |					ИНАЧЕ 6
	               |				КОНЕЦ
	               |		КОГДА НЕ ПоказателиОтчетов.Владелец.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |				И ПоказателиОтчетов.Владелец.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА ВЫБОР
	               |					КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |						ТОГДА 5
	               |					ИНАЧЕ 6
	               |				КОНЕЦ
	               |		КОГДА НЕ ПоказателиОтчетов.Владелец.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |			ТОГДА 6
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики1 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |					ТОГДА 0
	               |				КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики2 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |					ТОГДА 1
	               |				КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |					ТОГДА 2
	               |				КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |					ТОГДА 3
	               |				КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |					ТОГДА 4
	               |				КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6 = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |					ТОГДА 5
	               |				ИНАЧЕ 6
	               |			КОНЕЦ
	               |	КОНЕЦ КАК ГруппаРаскрытияЧислоАналитик,
	               |	ПоказателиОтчетов.Строка КАК СтрокаОтчета,
	               |	ПоказателиОтчетов.ВидИтога КАК ВидИтога,
	               |	ВЫБОР
	               |		КОГДА ПоказателиОтчетов.ТипЗначения = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.ТипыЗначенийПоказателейОтчетов.Число)
	               |			ТОГДА ИСТИНА
	               |		ИНАЧЕ ЛОЖЬ
	               |	КОНЕЦ КАК ТипЗначенияЧисло,
	               |	ВЫБОР
	               |		КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитикиВалютаДт ЕСТЬ NULL
	               |			ТОГДА ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
	               |		ИНАЧЕ ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитикиВалютаДт
	               |	КОНЕЦ КАК АналитикаВалюта
	               |ПОМЕСТИТЬ втАналитикиПоказателей
	               |ИЗ
	               |	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	               |ГДЕ
	               |	ПоказателиОтчетов.Ссылка В(&МассивПоказателей)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	втАналитикиПоказателей.ГруппаРаскрытияЧислоАналитик КАК ГруппаРаскрытияЧислоАналитик,
	               |	втАналитикиПоказателей.ТипЗначенияЧисло КАК ТипЗначенияЧисло,
	               |	втАналитикиПоказателей.АналитикаВалюта КАК АналитикаВалюта
	               |ИЗ
	               |	втАналитикиПоказателей КАК втАналитикиПоказателей";
	
	СхемаЗапросаКэшАналитик = Новый СхемаЗапроса;
	СхемаЗапросаКэшАналитик.УстановитьТекстЗапроса(Запрос.Текст);
	
	Для Каждого Аналитика Из ТзАналитик Цикл
		
		Нпакет = СхемаЗапросаКэшАналитик.ПакетЗапросов[0];
		нОператор = Нпакет.Операторы[0];
		//Указываем выбираемые поля
		нОператор.ВыбираемыеПоля.Добавить("ВЫБОР КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики1.Код = &ВидАналитики_"+Аналитика.АналитикаКод+" ИЛИ ПоказателиОтчетов.Владелец.ВидАналитики1.Код = &ВидАналитики_"+Аналитика.АналитикаКод+" ТОГДА 1 ИНАЧЕ
		| ВЫБОР КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики2.Код = &ВидАналитики_"+Аналитика.АналитикаКод+" ИЛИ ПоказателиОтчетов.Владелец.ВидАналитики2.Код = &ВидАналитики_"+Аналитика.АналитикаКод+"  ТОГДА 2 ИНАЧЕ
		| ВЫБОР КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики3.Код = &ВидАналитики_"+Аналитика.АналитикаКод+" ИЛИ ПоказателиОтчетов.Владелец.ВидАналитики3.Код = &ВидАналитики_"+Аналитика.АналитикаКод+" ТОГДА 3 ИНАЧЕ
		| ВЫБОР КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики4.Код = &ВидАналитики_"+Аналитика.АналитикаКод+" ИЛИ ПоказателиОтчетов.Владелец.ВидАналитики4.Код = &ВидАналитики_"+Аналитика.АналитикаКод+" ТОГДА 4 ИНАЧЕ
		| ВЫБОР КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики5.Код = &ВидАналитики_"+Аналитика.АналитикаКод+" ИЛИ ПоказателиОтчетов.Владелец.ВидАналитики5.Код = &ВидАналитики_"+Аналитика.АналитикаКод+" ТОГДА 5 ИНАЧЕ
		| ВЫБОР КОГДА ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики6.Код = &ВидАналитики_"+Аналитика.АналитикаКод+" ИЛИ ПоказателиОтчетов.Владелец.ВидАналитики6.Код = &ВидАналитики_"+Аналитика.АналитикаКод+" ТОГДА 6 ИНАЧЕ
		| 0 КОНЕЦ КОНЕЦ КОНЕЦ КОНЕЦ КОНЕЦ КОНЕЦ");
		
		//Указываем псевдонимы для выбранных полей
		Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = "ВидАналитики_"+Аналитика.АналитикаКод;
		
		Нпакет.Колонки[Нпакет.Колонки.Количество()-1].Псевдоним = "ВидАналитики_"+Аналитика.АналитикаКод;
		Нпакет = СхемаЗапросаКэшАналитик.ПакетЗапросов[1];
		нОператор = Нпакет.Операторы[0];
		нОператор.ВыбираемыеПоля.Добавить("втАналитикиПоказателей.ВидАналитики_"+Аналитика.АналитикаКод);
		
		
		Запрос.Параметры.Вставить("ВидАналитики_"+Аналитика.АналитикаКод,Аналитика.АналитикаКод);		
	КонецЦикла; 	
	
	Запрос.Текст = СхемаЗапросаКэшАналитик.ПолучитьТекстЗапроса();	
	Запрос.Параметры.Вставить("МассивПоказателей",МассивПоказателей);			   
	
	КэшПоказателейПакет = Запрос.ВыполнитьПакетСПромежуточнымиДанными();	
	КэшПоказателей 		=  КэшПоказателейПакет[0].Выгрузить();	
	КэшАналитик   	    =  КэшПоказателейПакет[1].Выгрузить();	
		
КонецПроцедуры	

Процедура ПолучитьТаблицыТекущегоЭкземпляраОтчета(РабочийОбъект) Экспорт
	
	СтруктураПараметров = Новый Структура;                                               
	СтруктураПараметров.Вставить("Валюта",РабочийОбъект.ОсновнаяВалюта);
	СтруктураПараметров.Вставить("ВидОтчета",РабочийОбъект.ВидОтчета);	
	СтруктураПараметров.Вставить("Сценарий",РабочийОбъект.Сценарий);
		
	МассивПериодов=  ПериодыУХ.ПолучитьПодчиненныеПериоды(РабочийОбъект.ПериодОтчета,РабочийОбъект.ПериодОкончания,РабочийОбъект.ПериодОтчета.Периодичность);
	СтруктураПараметров.Вставить("ПериодОтчета",МассивПериодов);	
	СтруктураПараметров.Вставить("Организация",РабочийОбъект.Организация);	
	
	Для Инд=1 По РабочийОбъект.ЧислоДопАналитик Цикл	
		Если ЗначениеЗаполнено(РабочийОбъект["Аналитика" + Инд]) Тогда	
			СтруктураПараметров.Вставить("Аналитика"+Инд,РабочийОбъект["Аналитика" + Инд]);	
		КонецЕсли;	
	КонецЦикла;
		
	РаскрываемыеАналитики = Новый Структура;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		РаскрываемыеАналитики.Вставить("Аналитика"+Инд);
	КонецЦикла;	
			
	мПоказателиРаскрытия = СводнаяТаблицаУХ.ПолучитьЗначениеПоказателей(СтруктураПараметров,РаскрываемыеАналитики);	
	мПоказатели			 = СводнаяТаблицаУХ.ПолучитьЗначениеПоказателей(СтруктураПараметров);

	мПоказателиРаскрытия.Колонки.ПоказательОтчета.Имя = "Показатель";
	мПоказатели.Колонки.ПоказательОтчета.Имя = "Ссылка";

	РабочийОбъект.Вставить("мПоказателиРаскрытия",мПоказателиРаскрытия);
	РабочийОбъект.Вставить("мПоказатели"		 ,мПоказатели);

	
КонецПроцедуры
	
#КонецОбласти


Функция ПолучитьПериодПоСдвигу(ДатаНачала,ОтборС,Периодичность) Экспорт
	
	ЗначениеОтбораС = ?(ЗначениеЗаполнено(ОтборС.ЗначениеОтбора),Число(ОтборС.ЗначениеОтбора),0);
	
	нПериод = ОбщегоНазначенияУХ.ДобавитьИнтервал(ДатаНачала,Периодичность,ЗначениеОтбораС);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ
	|	Периоды.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ
	|	Периоды.ПометкаУдаления 		= ЛОЖЬ
	|	И Периоды.Периодичность 		= &Периодичность
	|	И Периоды.Произвольный 			= ЛОЖЬ
	|	И Периоды.ПометкаУдаления 		= ЛОЖЬ
	|	И Периоды.ДатаНачала 			= &ДатаНачала";
	
	Запрос.УстановитьПараметр("Периодичность"	,Периодичность);
	Запрос.УстановитьПараметр("ДатаНачала"		,нПериод);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл																												   
		Возврат Выборка.Ссылка;	
	КонецЦикла;

	Возврат Справочники.Периоды.ПустаяСсылка();
		
КонецФункции

Функция ПолучитьДоступныеПериодыНачалаПоСценарию(Сценарий) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УправлениеПериодомСценария.Ссылка КАК Ссылка,
	|	УправлениеПериодомСценария.ПериодСценария КАК ПериодСценария
	|ИЗ
	|	Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	|ГДЕ
	|	УправлениеПериодомСценария.Сценарий = &Сценарий
	|	И УправлениеПериодомСценария.ПометкаУдаления = Ложь";
	
	Запрос.УстановитьПараметр("Сценарий",Сценарий);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПериодСценария");
	
	Возврат Результат;
	
КонецФункции
   
Функция ПолучитьДоступныеПериодыОкончанияПоСценарию(Сценарий,ПериодОтчета) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УправлениеПериодомСценария.Ссылка КАК Ссылка,
	|	УправлениеПериодомСценария.ПериодСценарияОкончание КАК ПериодСценарияОкончание
	|ИЗ
	|	Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	|ГДЕ
	|	УправлениеПериодомСценария.Сценарий = &Сценарий
	|	И УправлениеПериодомСценария.ПометкаУдаления = ЛОЖЬ
	|	И УправлениеПериодомСценария.ПериодСценария = &ПериодСценария";
	
	Запрос.УстановитьПараметр("Сценарий",Сценарий);
	Запрос.УстановитьПараметр("ПериодСценария",ПериодОтчета);
	
	Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПериодСценарияОкончание");
	
	Возврат Результат;
	
КонецФункции	
  
Функция ПолучитьКэшАналитикПоказателей(Показатели,ВидОтчета=Неопределено) Экспорт
	
	//Заполняются все аналитики всех групп раскрытия текущего вида отчета
	Если ВидОтчета=Неопределено Тогда
		ВидОтчета = СводнаяТаблицаУХ.ПолучитьВидыОтчетовПоПоказателям(Показатели);		 
	КонецЕсли;	 
	
	ТекстАналитикФинальный 		= "";
	ТекстКодовАналитикФинальный = "";
    ТекстАналитикГр 			= "";
	ТекстАналитикВо 			= "";
	ТекстАналитикГрКод          = "";
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		ТекстАналитикФинальный = ТекстАналитикФинальный+"
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос2.ВидАналитики"+Инд+" <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА ВложенныйЗапрос2.ВидАналитики"+Инд+"
		|		ИНАЧЕ ВложенныйЗапрос1.ВидАналитики"+Инд+"
		|	КОНЕЦ КАК ВидАналитики"+Инд+",";
		
		ТекстКодовАналитикФинальный = ТекстКодовАналитикФинальный+"
		|	ВЫБОР
		|		КОГДА ВложенныйЗапрос2.ВидАналитики"+Инд+" <> ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка)
		|			ТОГДА ВложенныйЗапрос2.ВидАналитики"+Инд+".Код
		|		ИНАЧЕ ВложенныйЗапрос1.ВидАналитики"+Инд+"Код
		|	КОНЕЦ КАК ВидАналитики"+Инд+"Код,";

		ТекстАналитикГр = ТекстАналитикГр+"
		|	ГруппыРаскрытия.ВидАналитики"+Инд+" КАК ВидАналитики"+Инд+",";

		ТекстАналитикГрКод = ТекстАналитикГрКод+"
		|	ГруппыРаскрытия.ВидАналитики"+Инд+".Код КАК ВидАналитики"+Инд+"Код,";

		ТекстАналитикВо = ТекстАналитикВо+"
		|	ВидыОтчетов.ВидАналитики"+Инд+" КАК ВидАналитики"+Инд+",";
		
	КонецЦикла;	 
	 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ"+ТекстАналитикФинальный+"
				   |	ВложенныйЗапрос.ПоказательОтчетаСсылка КАК Показатель,
	               |	ВложенныйЗапрос.ПоказательОтчетаГруппаРаскрытия КАК ГруппаРаскрытия,"+ТекстКодовАналитикФинальный+"
	               |	ВложенныйЗапрос.СтрокаОтчета КАК Строка,
	               |	ВложенныйЗапрос1.ВидАналитикиВалютаДт КАК ВидАналитикиВалюта,
	               |	ВложенныйЗапрос1.ВидАналитикиВалютаДтКод КАК ВидАналитикиВалютаКод,
	               |	ВложенныйЗапрос1.АналитикаЭтапПроекта КАК АналитикаЭтапПроекта
	               |ИЗ
	               |	(ВЫБРАТЬ
	               |		ПоказателиОтчетов.Ссылка КАК ПоказательОтчетаСсылка,
	               |		ПоказателиОтчетов.ГруппаРаскрытия КАК ПоказательОтчетаГруппаРаскрытия,
	               |		ПоказателиОтчетов.Строка КАК СтрокаОтчета
	               |	ИЗ
	               |		Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	               |	ГДЕ
	               |		ПоказателиОтчетов.Ссылка В (&Показатели)) КАК ВложенныйЗапрос
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ"+ТекстАналитикГр+ТекстАналитикГрКод+"
				   |			ГруппыРаскрытия.Ссылка КАК Ссылка,
				   |			ГруппыРаскрытия.ВидАналитикиВалютаДт КАК ВидАналитикиВалютаДт,
	               |			ГруппыРаскрытия.ВидАналитикиВалютаДт.Код КАК ВидАналитикиВалютаДтКод,
	               |			ГруппыРаскрытия.АналитикаЭтапПроекта КАК АналитикаЭтапПроекта
	               |		ИЗ
	               |			Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия
	               |		ГДЕ
	               |			ГруппыРаскрытия.Владелец В (&ВидОтчета)) КАК ВложенныйЗапрос1
	               |		ПО ВложенныйЗапрос.ПоказательОтчетаГруппаРаскрытия = ВложенныйЗапрос1.Ссылка
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ"+ТекстАналитикВо+"
				   |			ВидыОтчетов.Ссылка КАК Ссылка
	               |		ИЗ
	               |			Справочник.ВидыОтчетов КАК ВидыОтчетов
	               |		ГДЕ
	               |			ВидыОтчетов.Ссылка В (&ВидОтчета)) КАК ВложенныйЗапрос2
	               |		ПО ВложенныйЗапрос.СтрокаОтчета.Владелец = ВложенныйЗапрос2.Ссылка";
	
	Запрос.УстановитьПараметр("Показатели"	,Показатели);	
	Запрос.УстановитьПараметр("ВидОтчета"	,ВидОтчета);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
	
КонецФункции

Процедура ЗаписатьЗначениеВПоказатель(ТабИзмененныхДанных,мПоказателиРаскрытия = Неопределено,Значение,СписокАналитик,КэшАналитикПоказателей,ФлагОшибки=Ложь,ЕдиницаИзмерения) Экспорт 
	
	СтруктураОтбораЭкземпляра 			= Новый Структура;
    ФлОшибки 							= Ложь;
	АналитикаПоказатель 				= Неопределено;
	ОтображатьСуммыВДопВалютах  		= Ложь;
	
	Если СписокАналитик.ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда	
		Попытка
						
			Если СокрЛП(Значение) = "" ИЛИ Значение = Неопределено Тогда 
				Значение = 0 
			КонецЕсли;
						
			Если ТипЗнч(Значение) = Тип("Число") Тогда
				ЗначениеЧисло = Значение;
			Иначе	 
				Если ОбщегоНазначенияКлиентСерверУХ.ЭтоЧисло(СтрЗаменить(Значение," ","")) тогда     			
					ЗначениеЧисло = Число(СтрЗаменить(Значение," ",""));
				Иначе
					ОбщегоНазначенияУх.СообщитьОбОшибке( Нстр("ru = 'Некорректное значение'", ОбщегоНазначения.КодОсновногоЯзыка() ));
					ФлагОшибки = Истина;
					Возврат;
				КонецЕсли;
				
			КонецЕсли;							
		Исключение                                                                                                
			ОбщегоНазначенияУх.СообщитьОбОшибке(Нстр("ru = 'Некорректное значение'", ОбщегоНазначения.КодОсновногоЯзыка()));
			ФлагОшибки = Истина;
			Возврат;
		КонецПопытки;
				
	ИначеЕсли СписокАналитик.ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда	
		
		Если ВРЕГ(Значение) = "ИСТИНА" ИЛИ ВРЕГ(Значение) = "TRUE" ИЛИ   Значение = "1" ИЛИ Значение = 1 ИЛИ ВРЕГ(Значение) = "ДА" Тогда
			ЗначениеНЕЧисло = Истина;	 	
		ИначеЕсли ВРЕГ(Значение) = "ЛОЖЬ" ИЛИ ВРЕГ(Значение) = "FALSE" ИЛИ   Значение = "0" ИЛИ Значение = 0 ИЛИ ВРЕГ(Значение) = "НЕТ" Тогда
			ЗначениеНЕЧисло = Ложь;	 
		ИначеЕсли Значение = Неопределено ИЛИ СокрЛП(Значение) = "" Тогда
			ЗначениеНЕЧисло = Неопределено;	 
		Иначе	 
			ОбщегоНазначенияУх.СообщитьОбОшибке(Нстр("ru = 'Некорректное значение булево'", ОбщегоНазначения.КодОсновногоЯзыка()));
			ФлагОшибки = Истина;
			Возврат;	
		КонецЕсли;		
	ИначеЕсли СписокАналитик.ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда	
		Попытка
			ЗначениеНЕЧисло  	= ОбщегоНазначенияУХ.ВыполнитьПреобразованиеТипов(Значение,"Строка","Дата");
		Исключение
			ОбщегоНазначенияУх.СообщитьОбОшибке(Нстр("ru = 'Некорректное значение даты'", ОбщегоНазначения.КодОсновногоЯзыка()));
			ФлагОшибки = Истина;
			Возврат;
		КонецПопытки;
				
	Иначе 	
		ЗначениеНЕЧисло = Значение;	
	КонецЕсли;	
	
	Если СписокАналитик.Свойство("ПоказательСсылка") Тогда
		АналитикаПоказатель = СписокАналитик.ПоказательСсылка;	
	Иначе
		АналитикаПоказатель = СписокАналитик.ПоказательОтчета;	
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	Если СписокАналитик.Свойство("Проект") Тогда
		СтруктураПоиска.Вставить("Проект",СписокАналитик.Проект);
	КонецЕсли;
	СтруктураПоиска.Вставить("Сценарий",СписокАналитик.Сценарий);
	
	Если СписокАналитик.Свойство("ПериодОтчета") Тогда
		 СтруктураПоиска.Вставить("ПериодОтчета",СписокАналитик.ПериодОтчета);
	Иначе	
		 СтруктураПоиска.Вставить("ПериодОтчета",Справочники.Периоды.ПустаяСсылка());
	КонецЕсли;	
	
	Если СписокАналитик.Свойство("Организация") Тогда
		 СтруктураПоиска.Вставить("Организация",СписокАналитик.Организация);
	Иначе	
		 СтруктураПоиска.Вставить("Организация",Справочники.Организации.ПустаяСсылка());
	КонецЕсли;	
	
	СтруктураПоиска.Вставить("ПоказательОтчета",АналитикаПоказатель);
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		СтруктураПоиска.Вставить("Аналитика"+Строка(Инд),Неопределено);
	КонецЦикла;	
	
	СтруктураПоиска.Вставить("АналитикаВалюта",Справочники.Валюты.ПустаяСсылка());
	
	ГруппаПоказателя = КэшАналитикПоказателей.Найти(АналитикаПоказатель,"Показатель");
	Для ИндА=1 По ПараметрыСЕанса.ЧислоДопАналитик Цикл 
		Если НЕ ЗначениеЗаполнено(ГруппаПоказателя["ВидАналитики"+Строка(ИндА)+"Код"]) Тогда 
			Прервать;
		КонецЕсли;
		Если СписокАналитик.Свойство(ГруппаПоказателя["ВидАналитики"+Строка(ИндА)+"Код"]) Тогда
			СтруктураПоиска.Вставить( "Аналитика"+ИндА, СписокАналитик[СокрЛП(ГруппаПоказателя["ВидАналитики"+Строка(ИндА)+"Код"])]);	
		КонецЕсли;
	КонецЦикла;		
	
	Если СписокАналитик.Свойство("АналитикаВалюта") Тогда
		 СтруктураПоиска.Вставить("АналитикаВалюта",?(СписокАналитик["АналитикаВалюта"]=Неопределено,Справочники.Валюты.ПустаяСсылка(),СписокАналитик["АналитикаВалюта"]));
	КонецЕсли;	
	
	ЭтоВалютнаяСумма = Ложь;
	Если СписокАналитик.Свойство("ВалютнаяСумма") ИЛИ СписокАналитик.Свойство("ОтображатьСуммуВДопВалюте") Тогда
		 ЭтоВалютнаяСумма = Истина;
	КонецЕсли;		
	
	
	Если НЕ  мПоказателиРаскрытия = Неопределено Тогда
		СтруктураПоиска_мПоказателей = Новый Структура;
		Для Каждого ИндексПоиска Из мПоказателиРаскрытия.Индексы[0] Цикл
			Если ИндексПоиска = "Показатель" Тогда
				СтруктураПоиска_мПоказателей.Вставить(ИндексПоиска,АналитикаПоказатель);	
			ИначеЕсли ИндексПоиска = "УидГруппыОтборов" И СписокАналитик.Свойство(ИндексПоиска) Тогда
				СтруктураПоиска_мПоказателей.Вставить(ИндексПоиска,СписокАналитик.УидГруппыОтборов);	
			ИначеЕсли СтруктураПоиска.Свойство(ИндексПоиска) Тогда	
				СтруктураПоиска_мПоказателей.Вставить(ИндексПоиска,СтруктураПоиска[ИндексПоиска]);
			Иначе	
				СтруктураПоиска_мПоказателей.Вставить(ИндексПоиска,Неопределено);
			КонецЕсли;
		КонецЦикла;	
		
		ТекСтрока = мПоказателиРаскрытия.НайтиСтроки(СтруктураПоиска_мПоказателей);
		Если ТекСтрока.Количество() = 0 Тогда
			Нстр = мПоказателиРаскрытия.Добавить();
			ЗаполнитьЗначенияСвойств(Нстр,СтруктураПоиска_мПоказателей);
		Иначе	
			Нстр = ТекСтрока[0];
		КонецЕсли;	
		Нстр.ПоказательКод =  СписокАналитик.ПоказательКод;
		
	КонецЕсли;
	
	Если ФлагОшибки Тогда
		 Возврат;
	КонецЕсли;	
			
	НайденныеСтроки = ТабИзмененныхДанных.НайтиСтроки(СтруктураПоиска);
	Если  НайденныеСтроки.Количество() = 0 Тогда
		НП = ТабИзмененныхДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НП,СтруктураПоиска);
	Иначе	
		НП = НайденныеСтроки[0];
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ГруппаПоказателя.ГруппаРаскрытия) Тогда
		НП.СинтетическоеЗначение = Истина;
	КонецЕсли;	
	
	Если ЭтоВалютнаяСумма Тогда
		НП.ЗначениеВалюта = ЗначениеЧисло;
	ИначеЕсли СписокАналитик.ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда	
		НП.Значение = ЗначениеЧисло;
	Иначе	
		НП.ЗначениеНечисловое = ЗначениеНЕЧисло;
	КонецЕсли;	
	
	Если НЕ  мПоказателиРаскрытия = Неопределено Тогда	
		
		Нстр.ЗначениеВалюта = 0;
		
		Если  СписокАналитик.ПоказательТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда	
			Если ЗначениеЧисло = 0 Тогда
				мПоказателиРаскрытия.Удалить(Нстр);
			Иначе	
				Если ЭтоВалютнаяСумма Тогда Нстр.ЗначениеВалюта =  ЗначениеЧисло Иначе Нстр.Значение =  ЗначениеЧисло КонецЕсли;
			КонецЕсли;	
		Иначе 	
			Если Не ЗначениеЗаполнено(ЗначениеНЕЧисло) Тогда
				мПоказателиРаскрытия.Удалить(Нстр);
			Иначе	
				Нстр.ЗначениеНеЧисло =  ЗначениеНЕЧисло;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьПредставлениеПериодаСервер(Периодичность,ПериодНачала,ПериодОкончания) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПериодНачала) Тогда	
		Возврат "";			
	КонецЕсли;	
	
	ТекстПериодичность = Нстр("ru=' (периодичность:'",ОбщегоНазначения.КодОсновногоЯзыка());
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда			
		Если ПериодНачала = ПериодОкончания Тогда
			ПредставлениеПериода = ПериодНачала.Наименование +ТекстПериодичность+Нрег(Периодичность)+")";
		Иначе	
			ПредставлениеПериода = СтрЗаменить(ПериодНачала.Наименование,"г.","") +" - "+СтрЗаменить(ПериодОкончания.Наименование,"г.","")+" гг"+ТекстПериодичность+Нрег(Периодичность)+")";
		КонецЕсли;	
	ИначеЕсли Периодичность = Перечисления.Периодичность.ДевятьМесяцев Тогда	
		
		Если ПериодНачала = ПериодОкончания Тогда
			ПредставлениеПериода = ПериодНачала.Наименование+ТекстПериодичность+Нрег(Периодичность)+")";
		Иначе	
			ПредставлениеПериода = ПредставлениеПериода(ПериодНачала.ДатаНачала,КонецДня(ПериодОкончания.ДатаОкончания))+ТекстПериодичность+Нрег(Периодичность)+")";
		КонецЕсли;		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда	
		
		Если ПериодНачала = ПериодОкончания Тогда
			ПредставлениеПериода = ПериодНачала.Наименование+ТекстПериодичность+Нрег(Периодичность)+")";
		Иначе	
			ПредставлениеПериода = ПредставлениеПериода(ПериодНачала.ДатаНачала,КонецДня(ПериодОкончания.ДатаОкончания))+ТекстПериодичность+Нрег(Периодичность)+")";
		КонецЕсли;	
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда		
		Если ПериодНачала = ПериодОкончания Тогда
			ПредставлениеПериода = ПериодНачала.Наименование+ТекстПериодичность+Нрег(Периодичность)+")";
		Иначе	
			ПредставлениеПериода = ПредставлениеПериода(ПериодНачала.ДатаНачала,КонецКвартала(ПериодОкончания.ДатаОкончания))+ТекстПериодичность+Нрег(Периодичность)+")";
		КонецЕсли;		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда		
		Если ПериодНачала = ПериодОкончания Тогда
			ПредставлениеПериода = ПериодНачала.Наименование+ТекстПериодичность+Нрег(Периодичность)+")";
		Иначе	
			ПредставлениеПериода = ПредставлениеПериода(ПериодНачала.ДатаНачала,КонецМесяца(ПериодОкончания.ДатаОкончания))+ТекстПериодичность+Нрег(Периодичность)+")";
		КонецЕсли;		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда		
		Если ПериодНачала = ПериодОкончания Тогда
			ПредставлениеПериода = ПериодНачала.Наименование+ТекстПериодичность+Нрег(Периодичность)+")";
		Иначе	
			ПредставлениеПериода = ПредставлениеПериода(ПериодНачала.ДатаНачала,КонецДня(ПериодОкончания.ДатаОкончания))+ТекстПериодичность+Нрег(Периодичность)+")";
		КонецЕсли;		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда		
		Если ПериодНачала = ПериодОкончания Тогда
			ПредставлениеПериода = ПериодНачала.Наименование+ТекстПериодичность+Нрег(Периодичность)+")";
		Иначе	
			ПредставлениеПериода = ПредставлениеПериода(ПериодНачала.ДатаНачала,КонецДня(ПериодОкончания.ДатаОкончания))+ТекстПериодичность+Нрег(Периодичность)+")";	
		КонецЕсли;	                                                
	КонецЕсли;	
	
	Возврат ПредставлениеПериода;
	
КонецФункции

Процедура ЗаписатьКомментарийВПоказатель(ТабИзмененныхДанных,мПоказателиРаскрытия = Неопределено,ТекстКомментария,СписокАналитик,КэшАналитикПоказателей,ФлагОшибки=Ложь) Экспорт 
	
	СтруктураОтбораЭкземпляра 			= Новый Структура;
    ФлОшибки 							= Ложь;
	АналитикаПоказатель 				= Неопределено;
	ОтображатьСуммыВДопВалютах  		= Ложь;
	
	Если СписокАналитик.Свойство("ПоказательСсылка") Тогда
		АналитикаПоказатель = СписокАналитик.ПоказательСсылка;	
	Иначе
		АналитикаПоказатель = СписокАналитик.ПоказательОтчета;	
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	Если СписокАналитик.Свойство("Проект") Тогда
		СтруктураПоиска.Вставить("Проект",СписокАналитик.Проект);
	КонецЕсли;
	СтруктураПоиска.Вставить("Сценарий",СписокАналитик.Сценарий);
	СтруктураПоиска.Вставить("ПериодОтчета",СписокАналитик.ПериодОтчета);
	СтруктураПоиска.Вставить("Организация",СписокАналитик.Организация);
	СтруктураПоиска.Вставить("ПоказательОтчета",АналитикаПоказатель);
			
	ГруппаПоказателя = КэшАналитикПоказателей.НайтиСтроки(Новый Структура("Показатель",АналитикаПоказатель))[0];
	Для ИндА=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл 
		Если НЕ ЗначениеЗаполнено(ГруппаПоказателя["ВидАналитики"+Строка(ИндА)+"Код"]) Тогда 
			Прервать;
		КонецЕсли;
		Если СписокАналитик.Свойство(ГруппаПоказателя["ВидАналитики"+Строка(ИндА)+"Код"]) Тогда
			СтруктураПоиска.Вставить( "Аналитика"+ИндА, СписокАналитик[ГруппаПоказателя["ВидАналитики"+Строка(ИндА)+"Код"]]);	
		КонецЕсли;
	КонецЦикла;		
	
	Если СписокАналитик.Свойство("АналитикаВалюта") И ЗначениеЗаполнено(СписокАналитик.АналитикаВалюта) Тогда
		СтруктураПоиска.Вставить("АналитикаВалюта", СписокАналитик.АналитикаВалюта);
	КонецЕсли;
	
	Если НЕ  мПоказателиРаскрытия = Неопределено Тогда
		СтруктураПоиска_мПоказателей = Новый Структура;
		Для Каждого ИндексПоиска Из мПоказателиРаскрытия.Индексы[0] Цикл
			Если ИндексПоиска = "Показатель" Тогда
				СтруктураПоиска_мПоказателей.Вставить(ИндексПоиска,АналитикаПоказатель);	
			ИначеЕсли ИндексПоиска = "УидГруппыОтборов" И СписокАналитик.Свойство(ИндексПоиска) Тогда
				СтруктураПоиска_мПоказателей.Вставить(ИндексПоиска,СписокАналитик.УидГруппыОтборов);	
			ИначеЕсли СтруктураПоиска.Свойство(ИндексПоиска) Тогда	
				СтруктураПоиска_мПоказателей.Вставить(ИндексПоиска,СтруктураПоиска[ИндексПоиска]);
			КонецЕсли;
		КонецЦикла;	
		
		ТекСтрока = мПоказателиРаскрытия.НайтиСтроки(СтруктураПоиска_мПоказателей);
		Если ТекСтрока.Количество() = 0 Тогда
			Нстр = мПоказателиРаскрытия.Добавить();
			ЗаполнитьЗначенияСвойств(Нстр,СтруктураПоиска_мПоказателей);
		Иначе	
			Нстр = ТекСтрока[0];
		КонецЕсли;	
		Нстр.ПоказательКод =  СписокАналитик.ПоказательКод;
		
	КонецЕсли;
	
	Если ФлагОшибки Тогда
		 Возврат;
	КонецЕсли;	
			
	НайденныеСтроки = ТабИзмененныхДанных.НайтиСтроки(СтруктураПоиска);
	Если  НайденныеСтроки.Количество() = 0 Тогда
		НП = ТабИзмененныхДанных.Добавить();
		ЗаполнитьЗначенияСвойств(НП,СтруктураПоиска);
	Иначе	
		НП = НайденныеСтроки[0];
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ГруппаПоказателя.ГруппаРаскрытия) Тогда
		НП.СинтетическоеЗначение = Истина;
	КонецЕсли;	
	
	Если ОтображатьСуммыВДопВалютах Тогда
		Если Найти(СписокАналитик.КодРесурса,"_ЗначениеВалюта")>0 Тогда
			НП.ТекстКомментария = ТекстКомментария;
		ИначеЕсли СписокАналитик.ПоказательТипЗнчения = Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда	
			НП.ТекстКомментария = ТекстКомментария;
		Иначе	
			НП.ТекстКомментария = ТекстКомментария;
		КонецЕсли;	
	Иначе	
		НП.ТекстКомментария = ТекстКомментария;
	КонецЕсли;
	
	Если НЕ  мПоказателиРаскрытия = Неопределено Тогда	
		Нстр.Значение =  НП.ТекстКомментария;	
	КонецЕсли;

КонецПроцедуры

Процедура ОчиститьДанныеТекущегоЭкземпляраОтчета(ВидОтчета,Сценарий,Периоды,Организация,Проект,ДопОтборы,ЛогИзмененныхДанныхАдрес,ИдентификаторСеанса) Экспорт
					
	Если ЗначениеЗаполнено(логИзмененныхДанныхАдрес) Тогда
		логИзмененныхПоказателей = ПолучитьИзВременногоХранилища(логИзмененныхДанныхАдрес);		
	Иначе	
		логИзмененныхПоказателей = Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать().ТаблицаИзмененныхПоказателей.ВыгрузитьКолонки();		
		СтрокаИндексов = "Сценарий,ПериодОтчета,Организация,Проект,ПоказательОтчета,АналитикаВалюта";
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			СтрокаИндексов = СтрокаИндексов+",Аналитика"+Инд;
		КонецЦикла;
		логИзмененныхПоказателей.Индексы.Добавить(СтрокаИндексов);
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	СтруктураПараметров.Вставить("ВидОтчета",ВидОтчета);
	СтруктураПараметров.Вставить("Сценарий",Сценарий);
	СтруктураПараметров.Вставить("Организация",Организация);
	СтруктураПараметров.Вставить("ПериодОтчета",Периоды);
	
	Если ЗначениеЗаполнено(Проект) Тогда
		СтруктураПараметров.Вставить("Проект",Проект);
	КонецЕсли;	
	
	Для Каждого ДопОтбор Из ДопОтборы Цикл 
		СтруктураПараметров.Вставить(ДопОтбор.Ключ,ДопОтбор.Значение);
	КонецЦикла;
	
	РаскрываемыеАналитики = Новый Структура;
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		РаскрываемыеАналитики.Вставить("Аналитика"+Инд);
	КонецЦикла;	

	РаскрываемыеАналитики.Вставить("АналитикаВалюта");
	
	СтруктураДопПараметров  = Новый Структура;
	СтруктураДопПараметров.Вставить("ИдентификаторСеанса",ИдентификаторСеанса);
	СтруктураДопПараметров.Вставить("РежимОчистки",Истина);
	
	Результат = СводнаяТаблицаУХ.ПолучитьЗначениеПоказателей(СтруктураПараметров,РаскрываемыеАналитики,СтруктураДопПараметров);
	
	зОбъект = Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
	зОбъект.ТаблицаИзмененныхПоказателей.Загрузить(Результат);
	
	ЛогИзмененныхДанныхАдрес = ПоместитьВоВременноеХранилище(зОбъект.ТаблицаИзмененныхПоказателей.Выгрузить(),Новый УникальныйИдентификатор);
		
КонецПроцедуры	

Процедура ОбработатьИзменениеКлючейВерсии(Ссылка,мКопируемыйДокумент,СтруктураТекущихКлючевыхРеквизитов) Экспорт
		
	Если ЗначениеЗаполнено(мКопируемыйДокумент) Тогда
		ИсточникКопирования = мКопируемыйДокумент;
	Иначе	
		ИсточникКопирования = Ссылка;
	КонецЕсли;	
	
	//1. Получаем текущие данные
	СтруктураПараметров = Новый Структура;
	
	Периоды=  ПериодыУХ.ПолучитьПодчиненныеПериоды(ИсточникКопирования.ПериодОтчета,ИсточникКопирования.ПериодОкончания,ИсточникКопирования.ПериодОтчета.Периодичность);
	
	СтруктураПараметров.Вставить("ВидОтчета",ИсточникКопирования.ВидОтчета);
	СтруктураПараметров.Вставить("Сценарий",ИсточникКопирования.Сценарий);
	СтруктураПараметров.Вставить("Организация",ИсточникКопирования.Организация);
	СтруктураПараметров.Вставить("ПериодОтчета",Периоды);
	СтруктураПараметров.Вставить("Проект",ИсточникКопирования.Проект);
	СтруктураПараметров.Вставить("Валюта",ИсточникКопирования.ОсновнаяВалюта);  //Получаем версии источника в осовной валюте источника
	
	СчетчикАналитик = 0;
	
	Для ИндАналитики =1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Если ЗначениеЗаполнено(ИсточникКопирования.ВидОтчета["ВидАналитики"+ИндАналитики]) Тогда
			 СчетчикАналитик = СчетчикАналитик+1;
		КонецЕсли;	
		
		Если ЗначениеЗаполнено(Ссылка["Аналитика"+ИндАналитики]) Тогда
			СтруктураПараметров.Вставить(ИсточникКопирования.ВидОтчета["ВидАналитики"+ИндАналитики].Код,ИсточникКопирования["Аналитика"+ИндАналитики]);	
		КонецЕсли;		
	Конеццикла;	
		
	РаскрываемыеАналитики = Новый Структура;
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		РаскрываемыеАналитики.Вставить("Аналитика"+Инд);
	КонецЦикла;	
		
	РаскрываемыеАналитики.Вставить("АналитикаВалюта");
	
	тРезультат = СводнаяТаблицаУХ.ПолучитьЗначениеПоказателей(СтруктураПараметров,РаскрываемыеАналитики);
	ТаблицаИзмененныхПоказателей = тРезультат.СкопироватьКолонки();
	
	Если  НЕ ЗначениеЗаполнено(мКопируемыйДокумент)  Тогда
		//2.Очищаем старые версии экземпляра
		СписокИспользуемыхВерсий=Новый СписокЗначений;
		
		Запрос=Новый Запрос;
		Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВерсииЗначенийПоказателей.Владелец КАК ОписаниеВерсий
		|ИЗ
		|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
		|ГДЕ
		|	ВерсииЗначенийПоказателей.ЭкземплярОтчета = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Пока Результат.Следующий() Цикл
			Попытка
				ОбъектОписаниеВерсий = Результат.ОписаниеВерсий.ПолучитьОбъект();
				ОбъектОписаниеВерсий.БезусловноеУдаление = Истина;
				ОбъектОписаниеВерсий.Удалить();
			Исключение
				Возврат;
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
	
	//Смотрим, было ли изменение периода.
	Если СтруктураТекущихКлючевыхРеквизитов.ПериодОтчета<>ИсточникКопирования.ПериодОтчета Тогда
		 СдвигПоПериоду  = ОбщегоНазначенияУХ.РассчитатьКоличествоПериодов(ИсточникКопирования.ПериодОтчета.ДатаНачала,СтруктураТекущихКлючевыхРеквизитов.ПериодОтчета.ДатаНачала,ИсточникКопирования.ПериодОтчета.Периодичность);
	Иначе	 
		 СдвигПоПериоду = 0;
	КонецЕсли;	
	
	Для Каждого Стр Из тРезультат Цикл
		
		нСтр =  ТаблицаИзмененныхПоказателей.Добавить();
		ЗаполнитьЗначенияСвойств(нСтр,Стр);
		нСтр.Сценарий 		=  СтруктураТекущихКлючевыхРеквизитов.Сценарий;
		нСтр.Организация 	=  СтруктураТекущихКлючевыхРеквизитов.Организация;
        нСтр.Проект 		=  СтруктураТекущихКлючевыхРеквизитов.Проект;
		Если СдвигПоПериоду<>0 Тогда
			 нСтр.ПериодОтчета = ОбщегоНазначенияУХ.глОтносительныйПериод(нСтр.ПериодОтчета,СдвигПоПериоду);
		КонецЕсли;	
		
		Если СчетчикАналитик>0 Тогда
			Для ИндАналитикиВо =  1 По СчетчикАналитик Цикл
				нСтр["Аналитика"+ИндАналитикиВо] = СтруктураТекущихКлючевыхРеквизитов["Аналитика"+ИндАналитикиВо];
			КонецЦикла;	
		КонецЕсли;
				
	КонецЦикла;	

	
	ТзДанныеПриемника = ТаблицаИзмененныхПоказателей.Скопировать();
	ТзДанныеПриемника.Свернуть("Организация,Сценарий,ПериодОтчета");
	
	ЗаписьПоказателяСРасчетомЗависимыхОбъект = Обработки.ЗаписьПоказателяСРасчетомЗависимых.Создать();
	ЗаписьПоказателяСРасчетомЗависимыхОбъект.ВидОтчета = Ссылка.ВидОтчета;
	ЗаписьПоказателяСРасчетомЗависимыхОбъект.РассчитыватьЗависимые = Константы.АвтоматическийПересчетЗависимыхПоказателей.Получить();
	ЗаписьПоказателяСРасчетомЗависимыхОбъект.ВалютаОтображения = Константы.ВалютаРасчетаПоказателейПроекта.Получить();
	ЗаписьПоказателяСРасчетомЗависимыхОбъект.Регистратор = Ссылка;
	
	ЗаписьПоказателяСРасчетомЗависимыхОбъект.ТаблицаИзмененныхПоказателей.Загрузить(ТаблицаИзмененныхПоказателей);
	
	СводнаяТаблицаУХ.ЗаполнитьВалютыПоРегламенту(ЗаписьПоказателяСРасчетомЗависимыхОбъект,ТзДанныеПриемника);
	
	ЗаписьПоказателяСРасчетомЗависимыхОбъект.ЗаписатьЗначенияТаблицыПоказателей();
				
КонецПроцедуры	

Процедура УдалитьПромежуточныеВерсии(Параметры, АдресХранилища, АдресХранилищаДополнительный) ЭКспорт
	
	  Обработки.ЗаписьПоказателяСРасчетомЗависимых.ЧистоваяЗаписьДанных(Параметры.ВидОтчета,Параметры.УникальныйИдентификатор);
	
  КонецПроцедуры	
  
Процедура ВыполнитьРеструктуризациюБланков(Ссылка,АдресПараметровРеструктуризации) Экспорт
	
	Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ВидыОтчетов") Тогда
		
		  Запрос = Новый Запрос;
		  Запрос.Текст = "ВЫБРАТЬ
		  |	ПоказателиОтчетов.Ссылка КАК ПоказательОтчета
		  |ИЗ
		  |	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		  |ГДЕ
		  |	ПоказателиОтчетов.Владелец = &Владелец
		  |	И ПоказателиОтчетов.ПометкаУдаления = ЛОЖЬ";
		  
		  Запрос.УстановитьПараметр("Владелец",Ссылка);
		  
		  Результат = Запрос.Выполнить().Выгрузить();
		  		  
		  оРеструктуризация = Обработки.РестуктуризацияБланковВО.Создать();
		  оРеструктуризация.ИзмененныеПоказатели.Загрузить(Результат);
		  оРеструктуризация.ВыполнитьРеструктуризациюБланков();
		  
	 ИначеЕсли  ТипЗнч(Ссылка) = Тип("СправочникСсылка.ГруппыРаскрытия") Тогда	  
		  
		  ПараметрыРеструктуризации = ПолучитьИзВременногоХранилища(АдресПараметровРеструктуризации);
		 
		  Запрос = Новый Запрос;
		  Запрос.Текст = "ВЫБРАТЬ
		  |	ПоказателиОтчетов.Ссылка КАК ПоказательОтчета
		  |ИЗ
		  |	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		  |ГДЕ
		  |	ПоказателиОтчетов.ГруппаРаскрытия В (&СписокГрупп)
		  |	И ПоказателиОтчетов.ПометкаУдаления = ЛОЖЬ";
		  
		  Запрос.УстановитьПараметр("СписокГрупп",ПараметрыРеструктуризации.ИзменениеРаскрытия.ВыгрузитьКолонку("ЭлементСтруктуры"));
		  
		  Результат = Запрос.Выполнить().Выгрузить();
		  		  
		  оРеструктуризация = Обработки.РестуктуризацияБланковВО.Создать();
		  оРеструктуризация.ИзмененныеПоказатели.Загрузить(Результат);
		  оРеструктуризация.ВыполнитьРеструктуризациюБланков();

	  ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПоказателиОтчетов") Тогда	  
		  
		  оРеструктуризация = Обработки.РестуктуризацияБланковВО.Создать();
		  Нстр = оРеструктуризация.ИзмененныеПоказатели.Добавить();
		  Нстр.ПоказательОтчета = Ссылка;
		  оРеструктуризация.ВыполнитьРеструктуризациюБланков();

	  ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.СтрокиОтчетов") Тогда			  
		  
		  ПараметрыРеструктуризации = ПолучитьИзВременногоХранилища(АдресПараметровРеструктуризации);
		 
		  Запрос = Новый Запрос;
		  Запрос.Текст = "ВЫБРАТЬ
		  |	ПоказателиОтчетов.Ссылка КАК ПоказательОтчета
		  |ИЗ
		  |	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		  |ГДЕ
		  |	ПоказателиОтчетов.Строка = &тСтрока
		  |	И ПоказателиОтчетов.ПометкаУдаления = ЛОЖЬ";
		  
		  Запрос.УстановитьПараметр("тСтрока",Ссылка);
		  
		  Результат = Запрос.Выполнить().Выгрузить();
		  		  
		  оРеструктуризация = Обработки.РестуктуризацияБланковВО.Создать();
		  оРеструктуризация.ИзмененныеПоказатели.Загрузить(Результат);
		  оРеструктуризация.ВыполнитьРеструктуризациюБланков();

	  ИначеЕсли ТипЗнч(Ссылка) = Тип("ОбработкаОбъект.НастройкаСтруктурыОтчета")  Тогда	  
		  
		  
		 ПараметрыРеструктуризации = ПолучитьИзВременногоХранилища(АдресПараметровРеструктуризации);
  
		  Запрос = Новый Запрос;
		  Запрос.Текст = "ВЫБРАТЬ
		  |	ПоказателиОтчетов.Ссылка КАК ПоказательОтчета
		  |ИЗ
		  |	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		  |ГДЕ
		  |	ПоказателиОтчетов.Строка В (&Строки)
		  |	И ПоказателиОтчетов.ПометкаУдаления = ЛОЖЬ";
		  
		  Запрос.УстановитьПараметр("Строки",ПараметрыРеструктуризации.ИзменяемыеСтроки);
		  
		  Результат = Запрос.Выполнить().Выгрузить();
		  		  
		  оРеструктуризация = Обработки.РестуктуризацияБланковВО.Создать();
		  оРеструктуризация.ИзмененныеПоказатели.Загрузить(Результат);
		  оРеструктуризация.ВыполнитьРеструктуризациюБланков();
 
		  
	  КонецЕсли;	
	
КонецПроцедуры	  

Процедура ДополнитьПараметрыОбластейПолямиПорядка(тПараметрыОбластей,ТзАналитик)
	
	Для Каждого СтрАналитика Из ТзАналитик Цикл		
		Если СтрАналитика.Владелец().Колонки.Найти("АналитикаСортировкаСКД") = Неопределено 
			ИЛИ СтрАналитика.АналитикаСортировкаСКД = Неопределено Тогда
			
			ИмяПоляВЗапросе                                     	=  СтрЗАменить(СтрАналитика.АналитикаСортировка,".","");	
			
			ТекПоле                                             	=  тПараметрыОбластей.НайтиСтроки(Новый Структура("ИмяПоляВзапросе",ИмяПоляВЗапросе));
			Если  ТекПоле.Количество() = 0 Тогда
				нТзПараметровОбластей 								= тПараметрыОбластей.Добавить();
			Иначе	
				нТзПараметровОбластей 								= ТекПоле[0];
			КонецЕсли;	
			нТзПараметровОбластей.ИмяВМакете    				= СтрАналитика.АналитикаСортировка;
			нТзПараметровОбластей.ПутьКДанным   				= СтрАналитика.АналитикаКод;
			нТзПараметровОбластей.ВыражениеПоля    				= СтрЗаменить(СтрАналитика.АналитикаСортировка,СтрАналитика.АналитикаКод+".","");
			нТзПараметровОбластей.ТипПараметра  				= "Группировка";
			нТзПараметровОбластей.ЭтоСортировка  				= Истина;
			нТзПараметровОбластей.ВыбранВМакете  				= Истина;
			нТзПараметровОбластей.ИмяПоляВзапросе    			= ИмяПоляВЗапросе;	
		Иначе	
			Для Каждого ЭлементСортировки Из СтрАналитика.АналитикаСортировкаСКД.Элементы Цикл
				
				ИмяПоляВЗапросе  = СтрЗАменить(ЭлементСортировки.Поле,".","");
				ТекПоле                                             	=  тПараметрыОбластей.НайтиСтроки(Новый Структура("ИмяПоляВзапросе",ИмяПоляВЗапросе));
				Если  ТекПоле.Количество() = 0 Тогда
					нТзПараметровОбластей 								= тПараметрыОбластей.Добавить();
				Иначе	
					нТзПараметровОбластей 								= ТекПоле[0];
				КонецЕсли;	
				нТзПараметровОбластей.ИмяВМакете    				= Строка(ЭлементСортировки.Поле);
				нТзПараметровОбластей.ПутьКДанным   				= СтрАналитика.АналитикаКод;
				нТзПараметровОбластей.ВыражениеПоля    				= СтрЗаменить(ЭлементСортировки.Поле,СтрАналитика.АналитикаКод+".","");
				нТзПараметровОбластей.ТипПараметра  				= "Группировка";
				нТзПараметровОбластей.ЭтоСортировка  				= Истина;
				нТзПараметровОбластей.ВыбранВМакете  				= Истина;
				нТзПараметровОбластей.ИмяПоляВзапросе    			= ИмяПоляВЗапросе;	
				нТзПараметровОбластей.ПорядокСортировки             = ЭлементСортировки.ТипУпорядочивания;
			КонецЦикла;	
			
		КонецЕсли;
		
	КонецЦикла;		
	
КонецПроцедуры	

#Область РаботаСМакетомИмпорта

Процедура ЗаполнитьШаблонМакетаДляВыгрузки(Шаблон, ИсходныйМакет, БланкОтчета, Периодичность = Неопределено, КоличествоПериодов = Неопределено, ВыгрузкаМакетаДляEXCEL = Ложь, ОбъектРасчета = Неопределено) Экспорт
	
	Шаблон = ПолучитьШаблонМакетаДляВыгрузки(ИсходныйМакет,БланкОтчета,Периодичность,КоличествоПериодов,ВыгрузкаМакетаДляEXCEL,ОбъектРасчета );
	
КонецПроцедуры

Функция ПолучитьШаблонМакетаДляВыгрузки(ИсходныйМакет,БланкОтчета,Периодичность=Неопределено,КоличествоПериодов=Неопределено,ВыгрузкаМакетаДляEXCEL = Ложь,ОбъектРасчета = Неопределено) Экспорт
	
	ПолеТабличногоДокументаМакет = Новый ТабличныйДокумент;
	
	Если ОбъектРасчета = Неопределено Тогда 
		
		ПериодС = Справочники.Периоды.ПустаяСсылка();
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Периоды.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Периоды КАК Периоды
		|ГДЕ
		|	Периоды.ПометкаУдаления = ЛОЖЬ
		|	И Периоды.Произвольный = ЛОЖЬ
		|	И Периоды.Периодичность = &Периодичность
		|	И Периоды.ДатаНачала = &ДатаНачала";
		
		Запрос.УстановитьПараметр("Периодичность",Периодичность);
		Запрос.УстановитьПараметр("ДатаНачала",НачалоГода(ТекущаяДата()));
		
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			ПериодС = Выборка.Ссылка;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ПериодС) Тогда
			ПериодПо = ПериодыУХ.ПолучитьПериодПоСдвигу(ПериодС.ДатаНачала, КоличествоПериодов - 1, Периодичность);
		КонецЕсли;	
		
	Иначе
		
		ПериодС  = ОбъектРасчета.ПериодОтчета;
		ПериодПо = ОбъектРасчета.ПериодОкончания;
		
	КонецЕсли;
	
	Если Не БланкОтчета.РежимБланка = 2 Тогда
		
		СтрокаШаблона = Нстр("ru = 'Бланк отчета %1 не предназначен для импорта данных текущего экземпляра отчета. Выберите многопериодный бланк'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		Если ЗначениеЗаполнено(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Строка(БланкОтчета)));
		КонецЕсли;
	
		Возврат Неопределено;	
	КонецЕсли;	
	
	Если  БланкОтчета.БланкДляОтображения Тогда
		
		СтрокаШаблона = Нстр("ru = 'Бланк отчета %1 предназначен только для отображения данных. Необходимо использовать бланк с назначением для импорта и отображения'", ОбщегоНазначения.КодОсновногоЯзыка());
		
		Если ЗначениеЗаполнено(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Строка(БланкОтчета)));
		КонецЕсли;
		
		Возврат Неопределено;	
	КонецЕсли;	

	ДополнительныеНастройки = Новый КомпоновщикНастроекКомпоновкиДанных;
	СтруктураПараметров     = Новый Структура;
	СтруктураПараметров.Вставить("ПолеТабличногоДокументаМакет",ПолеТабличногоДокументаМакет);
	СтруктураПараметров.Вставить("ОбновитьДанные",Истина);
	СтруктураПараметров.Вставить("ДополнительныеНастройки",ДополнительныеНастройки); 
	
	ОтчетАБ = Обработки.АналитическийБланк.Создать();
	ОтчетАБ.Бланк 			 			= БланкОтчета;
	ОтчетАБ.ПериодОтчета				= ПериодС;
	ОтчетАБ.ПериодОтчетаОкончание 		= ПериодПо;		
	ОтчетАБ.ПолучитьРезультирующийМакет(СтруктураПараметров); 
	

	мПоказателиРаскрытия = ПолучитьИзВременногоХранилища(ОтчетАБ.мПоказателиРаскрытияАдрес);	
	Показатели =           ПолучитьИзВременногоХранилища(ОтчетАБ.тзПоказателиАдрес);
	
	ТекстАналитик = "";
	Для Инд =1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		ТекстАналитик = ТекстАналитик+"
		|	ПоказателиОтчетов.ГруппаРаскрытия.ВидАналитики"+Инд+" КАК ВидАналитики"+Инд+","
	КонецЦикла;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ"+ТекстАналитик+"
				   |	ПоказателиОтчетов.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	               |ГДЕ
	               |	ПоказателиОтчетов.Ссылка В(&Ссылка)";
	
	Запрос.УстановитьПараметр("Ссылка",Показатели.ВыгрузитьКолонку("Показатель"));
	
	РезультатГруппыРаскрытия = Запрос.Выполнить().Выгрузить();
	
	тПоказатели 			=  ПолучитьИзВременногоХранилища(ОтчетАБ.ТзСвойстваПоказателейАдрес);
	ТзСвойстваПоказателей   =  тПоказатели;
	
	Для Каждого Область Из ИсходныйМакет.Области Цикл
		
		Если Область.Лево = 0 Или Область.Верх = 0 Тогда
			 Продолжить;
		КонецЕсли;	
			
		Если ТипЗнч(Область.Расшифровка) = Тип("Структура") И Область.Расшифровка.Свойство("Ссылка") Тогда
			
			тПоказатель = тПоказатели.Найти(Область.Расшифровка.Ссылка,"Ссылка");
			
			нСтрокаМпоказателей = мПоказателиРаскрытия.Добавить();
			нСтрокаМпоказателей.Показатель =  Область.Расшифровка.Ссылка;
			нСтрокаМпоказателей.ПериодОтчета =  ПериодС;
			нСтрокаМпоказателей.ПоказательКод =  СокрЛП(тПоказатель.ПоказательКод);
			нСтрокаМпоказателей.УидГруппыОтборов = Область.Расшифровка.Уид;
			
			Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
				Если  НЕ мПоказателиРаскрытия.Колонки.Найти("Аналитика"+Инд) = Неопределено Тогда
					ТекГруппа 		= РезультатГруппыРаскрытия.НайтиСтроки(Новый Структура("Ссылка",нСтрокаМпоказателей.Показатель))[0];
					ТекАналитика    = ТекГруппа["ВидАналитики"+Инд];
					Если ЗначениеЗаполнено(ТекАналитика) Тогда 
						нСтрокаМпоказателей["Аналитика"+Инд] = ТекАналитика.ТипЗначения.ПривестиЗначение();
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;
			
			Если  НЕ мПоказателиРаскрытия.Колонки.Найти("АналитикаВалюта") = Неопределено Тогда
				нСтрокаМпоказателей["АналитикаВалюта"] = Справочники.Валюты.ПустаяСсылка();
			КонецЕсли;	
			
			нСтрокаМпоказателей.Значение =  0;
			нСтрокаМпоказателей.ЗначениеВалюта =  0;
			
		КонецЕсли;	
	КонецЦикла;	
	
	СтруктураПараметров     = Новый Структура;
	СтруктураПараметров.Вставить("ПолеТабличногоДокументаМакет",ПолеТабличногоДокументаМакет);
	СтруктураПараметров.Вставить("ОбновитьДанные",Ложь);
	СтруктураПараметров.Вставить("ДополнительныеНастройки",ОтчетАБ.СТ_ДополнительныеНастройки_Объект); 
	
	ОтчетАБ.мДанныеАдрес 					= ПоместитьВоВременноеХранилище(мПоказателиРаскрытия,Новый УникальныйИдентификатор);
	ОтчетАБ.мПоказателиРаскрытияАдрес   	= ПоместитьВоВременноеХранилище(мПоказателиРаскрытия,Новый УникальныйИдентификатор);
	ОтчетАБ.ПолучитьРезультирующийМакет(СтруктураПараметров); 

	ТабДокЭталон = Новый ТабличныйДокумент;
	ТабДокЭталон.Вывести(ИсходныйМакет);
	
	Обработки.АналитическийБланк.УдалитьСлужебныеОбласти(ТабДокЭталон);

	ОбластьМакетаСтрок =  ТабДокЭталон.Область("ОбластьМакетаСтрок");
	ОбластьИсточник = ТабДокЭталон.Область(0,1,0,ОбластьМакетаСтрок.Право);
	ОбластьПриемник = ПолеТабличногоДокументаМакет.Область(0,1,0,ОбластьМакетаСтрок.Право);
	ПолеТабличногоДокументаМакет.ВставитьОбласть(ОбластьИсточник,ОбластьПриемник,ТипСмещенияТабличногоДокумента.БезСмещения);
	
	Для ИндСтроки = 1 по  ПолеТабличногоДокументаМакет.ВысотаТаблицы Цикл	
		Для ИндКолонки = 1 по  ПолеТабличногоДокументаМакет.ШиринаТаблицы Цикл	
			тЯчейка =  ПолеТабличногоДокументаМакет.Область(ИндСтроки,ИндКолонки,ИндСтроки,ИндКолонки);	
			Если  ТипЗнч(тЯчейка.Расшифровка)=Тип("Структура") И тЯчейка.Расшифровка.Свойство("Ссылка") И тЯчейка.Текст = "0" Тогда  	
				тЯчейка.СодержитЗначение=Ложь;
				тЯчейка.Текст = "";
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;				
					
	Если НЕ ВыгрузкаМакетаДляEXCEL Тогда 
		//Форматируем области показателей из скд в структуру расшифровки			
		ВидОтчета       = БланкОтчета.Владелец;
		СтруктураОбъекта = Новый Структура;
		СтруктураОбъекта.Вставить("ПериодОтчета",ОбъектРасчета.ПериодОтчета);
		СтруктураОбъекта.Вставить("ПериодОкончания",ОбъектРасчета.ПериодОкончания);
		СтруктураОбъекта.Вставить("Сценарий",ОбъектРасчета.Сценарий);
		СтруктураОбъекта.Вставить("Организация",ОбъектРасчета.Организация);
		СтруктураОбъекта.Вставить("Проект",ОбъектРасчета.Проект);
		СтруктураОбъекта.Вставить("ВидОтчета",ОбъектРасчета.ВидОтчета);
		
		РаскрываемыеАналитики = Новый Структура;
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			СтруктураОбъекта.Вставить("Аналитика"+Инд,ОбъектРасчета["Аналитика"+Инд]);
		КонецЦикла;	
		
		ОтчетАБ.ПериодОтчета			= ОбъектРасчета.ПериодОтчета;
		ОтчетАБ.ПериодОтчетаОкончание 	= ОбъектРасчета.ПериодОкончания;	
		ОтчетАБ.Организация             = ОбъектРасчета.Организация;
		ОтчетАБ.Сценарий                = ОбъектРасчета.Сценарий;
		ОтчетАБ.Проект   	            = ОбъектРасчета.Проект;
		
		Для ИндСтроки = 1 по  ПолеТабличногоДокументаМакет.ВысотаТаблицы Цикл	
			Для ИндКолонки = 1 по  ПолеТабличногоДокументаМакет.ШиринаТаблицы Цикл	
				тЯчейка =  ПолеТабличногоДокументаМакет.Область(ИндСтроки,ИндКолонки,ИндСтроки,ИндКолонки);	
				Если  ТипЗнч(тЯчейка.Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") ИЛИ ТипЗнч(тЯчейка.Расшифровка)=Тип("Структура") Тогда  	
					ИмяОбласти = тЯчейка.Имя;
					СтруктураНезаполненыхАналитик 	= Новый Структура;
					СтруктураОтбираемыхАналитик 	= Новый Структура;
					СтруктураРасшифровки 			= ПолучитьСтруктуруРасшифровки(ПолеТабличногоДокументаМакет,СтруктураОбъекта,ОтчетАБ,ИмяОбласти,тЯчейка.Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик,ТзСвойстваПоказателей);	
					Если ТипЗнч(тЯчейка.Расшифровка)=Тип("Структура") И тЯчейка.Расшифровка.Свойство("Ссылка") Тогда
						тЯчейка.Расшифровка             = Новый ФиксированнаяСтруктура(СтруктураРасшифровки);
					ИначеЕсли ТипЗнч(тЯчейка.Расшифровка)=Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда	
						тЯчейка.Расшифровка             = Новый ФиксированнаяСтруктура(СтруктураРасшифровки);
					КонецЕсли;	
				ИначеЕсли Лев(тЯчейка.Имя,7)="Строка_" Тогда	
					СтруктураРасшифровки 			= Новый Структура;	
					КодСтроки = Прав(тЯчейка.Имя,СтрДлина(тЯчейка.Имя)-7);
					ТекущаяСтрока =                 Справочники.СтрокиОтчетов.НайтиПоКоду(КодСтроки,,,ВидОтчета);
					СтруктураРасшифровки.Вставить("СтрокаОтчета",ТекущаяСтрока);
					СтруктураРасшифровки.Вставить("СтрокаОтчетаНаименование",ТекущаяСтрока.Наименование);
					тЯчейка.Расшифровка             = Новый ФиксированнаяСтруктура(СтруктураРасшифровки);	
				ИначеЕсли СтрНайти(тЯчейка.Текст,"[")>0 И СтрНайти(тЯчейка.Текст,"]")>0	Тогда
					Если  ЗначениеЗаполнено(ТекущаяСтрока) Тогда
						тГруппаРаскрытия 		= ТекущаяСтрока.ГруппаРаскрытия;
						ПозицияПервойТочки  	= СтрНайти(тЯчейка.Текст,".");
						КодАналитики 	 		= Сред(тЯчейка.Текст,2,ПозицияПервойТочки-2);
						РеквизитСинхронизации   = Сред(тЯчейка.Текст,ПозицияПервойТочки+1,(СтрДлина(тЯчейка.Текст)-1)-ПозицияПервойТочки);
						Для ИндАналитики  = 1 по ПараметрыСеанса.ЧислоДопАналитик Цикл
							Если ЗначениеЗАполнено(тГруппаРаскрытия["ВидАналитики"+ИндАналитики]) И тГруппаРаскрытия["ВидАналитики"+ИндАналитики].Наименование = КодАналитики Тогда
								СтруктураРасшифровки 			= Новый Структура;	
								СтруктураРасшифровки.Вставить("ТекущаяАналитика","Аналитика"+ИндАналитики);
								СтруктураРасшифровки.Вставить("ТекущаяАналитикассылка",тГруппаРаскрытия["ВидАналитики"+ИндАналитики]);
								СтруктураРасшифровки.Вставить("ТекущаяАналитикаКлюч",РеквизитСинхронизации);	
								тЯчейка.Расшифровка             = Новый ФиксированнаяСтруктура(СтруктураРасшифровки);
								
								тЯчейка.СодержитЗначение 		= Ложь;
								тЯчейка.Текст                   = "Аналитика"+ИндАналитики+"_"+РеквизитСинхронизации;
																
							КонецЕсли;
							Если  КодАналитики = "Валюты" И тГруппаРаскрытия.Валютная Тогда
								СтруктураРасшифровки 			= Новый Структура;	
								СтруктураРасшифровки.Вставить("ТекущаяАналитика","АналитикаВалюта");
								СтруктураРасшифровки.Вставить("ТекущаяАналитикассылка",тГруппаРаскрытия.ВидАналитикиВалютаДт);
								СтруктураРасшифровки.Вставить("ТекущаяАналитикаКлюч",РеквизитСинхронизации);	
								тЯчейка.Расшифровка             = Новый ФиксированнаяСтруктура(СтруктураРасшифровки);
								
								тЯчейка.СодержитЗначение 		= Ложь;
								тЯчейка.Текст                   = "АналитикаВалюта"+"_"+РеквизитСинхронизации;
																
							КонецЕсли;
						КонецЦикла;	
					КонецЕсли;	
				КонецЕсли;		
			КонецЦикла;		
		КонецЦикла;			
	КонецЕсли;
	
	Возврат ПолеТабличногоДокументаМакет;

	
КонецФункции	

#КонецОбласти


#Область РаботаСРасшифровкойТаблицы

Функция ПолучитьСтруктуруРасшифровки(ПолеТабличногоДокументаМакет,Объект,ОбъектАналитческогоБланка,ОбластьИмя,Расшифровка,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик,ТзСвойстваПоказателей) Экспорт
		
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда 		
		СтруктураРасшифровки = Новый Структура;
		
		Если Расшифровка.Свойство("ТекстФормулы") Тогда	
			СтруктураРасшифровки.Вставить("ТекстФормулы",Расшифровка.ТекстФормулы);
		ИначеЕсли  Расшифровка.Свойство("Ссылка") Тогда	
								
			тПоказатель = Неопределено;
			ПолучитьСвойстваПоказателяСтруктура(ТзСвойстваПоказателей,Расшифровка,СтруктураРасшифровки,тПоказатель);

			тОбласть = ПолеТабличногоДокументаМакет.Область(ОбластьИмя);
			
			//Строки
			ОбластьРасшифровкиСтроки  =  ПолеТабличногоДокументаМакет.Область(тОбласть.Верх,1,тОбласть.Низ,1);
			Если  НЕ ОбластьРасшифровкиСтроки.Расшифровка = Неопределено Тогда
				Для Каждого рСтроки Из ОбластьРасшифровкиСтроки.Расшифровка Цикл
					Если НЕ рСтроки.Значение = Неопределено Тогда
						СтруктураРасшифровки.Вставить(рСтроки.Ключ,рСтроки.Значение);
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;	
			
			//Колонки
			ОбластьРасшифровкиКолонки =  ПолеТабличногоДокументаМакет.Область(1,тОбласть.Лево,1,тОбласть.Право);
			Если  НЕ ОбластьРасшифровкиКолонки.Расшифровка = Неопределено Тогда
				Для Каждого рКолонки Из ОбластьРасшифровкиКолонки.Расшифровка Цикл
					Если НЕ рКолонки.Значение = Неопределено Тогда
						СтруктураРасшифровки.Вставить(рКолонки.Ключ,рКолонки.Значение); 
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;	

			Если Объект.Свойство("БыстрыеОтборы") Тогда
				Для Каждого тБыстрыйОтбор Из Объект.БыстрыеОтборы Цикл
					СтруктураРасшифровки.Вставить(тБыстрыйОтбор.КодПоля,Объект[тБыстрыйОтбор.КодПоля]);
				КонецЦикла;
			КонецЕсли;		
			
			
			РасшифровкаГруппОтборов = ОбъектАналитческогоБланка.РасшифровкаГруппОтборов;
			
			СтруктураРасшифровки.Вставить("НеМасштабируется",тПоказатель.НеМасштабируется);
			ПолучитьСтруктуруРасшифровкиБезКонтекста(Объект,СтруктураРасшифровки,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик,РасшифровкаГруппОтборов,тПоказатель);
			
		КонецЕсли;
		
		Возврат СтруктураРасшифровки;
						
	Иначе	
		Возврат Неопределено;	
	КонецЕсли;	
	
КонецФункции

Процедура ПолучитьСтруктуруРасшифровкиБезКонтекста(Объект,СтруктураРасшифровки,СтруктураНезаполненыхАналитик,СтруктураОтбираемыхАналитик,РасшифровкаГруппОтборов,тПоказатель) Экспорт
		
	Если ТипЗнч(СтруктураРасшифровки) = Тип("Структура")  Тогда   		
		
		ВычислитьТекущиеЗначенияРасшифровки(Объект,РасшифровкаГруппОтборов,СтруктураРасшифровки,СтруктураРасшифровки.УидГруппыОтборов);		
		
		Если СтруктураРасшифровки.Свойство("ПоказательСсылка") Тогда
			
			ПолнаяСтруктураАналитик = ПолучитьПолнуюСтруктуруАналитик(тПоказатель);	
			
			Для Каждого нАналитика Из ПолнаяСтруктураАналитик Цикл
				
				Если нАналитика.Ключ = "АналитикаВалюта" Тогда
					Если НЕ СтруктураРасшифровки.Свойство(нАналитика.Значение) Тогда
						СтруктураНезаполненыхАналитик.Вставить("АналитикаВалюта");
					Иначе	
						СтруктураОтбираемыхАналитик.Вставить("АналитикаВалюта",СтруктураРасшифровки[нАналитика.Значение]);
						СтруктураРасшифровки.Вставить("АналитикаВалюта",СтруктураРасшифровки[нАналитика.Значение]);
					КонецЕсли;	
					Продолжить;
				КонецЕсли;	
				
				Если НЕ  СтруктураРасшифровки.Свойство(нАналитика.Ключ) Тогда
					СтруктураНезаполненыхАналитик.Вставить(нАналитика.Ключ);
				Иначе	
					СтруктураОтбираемыхАналитик.Вставить(нАналитика.Ключ,СтруктураРасшифровки[нАналитика.Ключ]);
				КонецЕсли;	
			КонецЦикла;		
			Если СтруктураРасшифровки.Свойство("СтруктураГруппыСтроки") Тогда
				 АналитикиГруппы = СтрРазделить(СтруктураРасшифровки.СтруктураГруппыСтроки,"|");
				 Для Каждого Аналитика Из АналитикиГруппы Цикл
					 Если ЗначениеЗаполнено(Аналитика) Тогда
						  СтруктураНезаполненыхАналитик.Вставить(Аналитика);
						  
					 КонецЕсли;	 
				 КонецЦикла;	 
			КонецЕсли;	
			Если СтруктураРасшифровки.Свойство("СтруктураГруппыКолонки") Тогда
				 АналитикиГруппы = СтрРазделить(СтруктураРасшифровки.СтруктураГруппыКолонки,"|");
				 Для Каждого Аналитика Из АналитикиГруппы Цикл
					 Если ЗначениеЗаполнено(Аналитика) Тогда
						  СтруктураНезаполненыхАналитик.Вставить(Аналитика);
					 КонецЕсли;	 
				 КонецЦикла;	 
			КонецЕсли;	
			
		КонецЕсли;			
				
	КонецЕсли;	
	
КонецПроцедуры

Процедура ВычислитьТекущиеЗначенияРасшифровки(Объект,РасшифровкаГруппОтборов,СтруктураРасшифровки,УидГруппыОтборов)
		
	тГруппаОтборов = РасшифровкаГруппОтборов.НайтиСтроки(Новый Структура("УидГруппыОтборов",УидГруппыОтборов));
	
	ПериодС = Неопределено;
	ПериодПо= Неопределено;
	
	Для Каждого СтрОтбор Из тГруппаОтборов Цикл
		Если  СтрОтбор.Отбор  = "Период начала отчета" 			Тогда 
			СтруктураРасшифровки.Вставить(СтрОтбор.ПолеКод,Объект.ПериодОтчета);	
			Если СтрОтбор.ПолеКод = "ПериодС" Тогда
				ПериодС = Объект.ПериодОтчета;
			ИначеЕсли СтрОтбор.ПолеКод = "ПериодПо" Тогда
				ПериодПо = Объект.ПериодОтчета;
			КонецЕсли;	
		ИначеЕсли СтрОтбор.Отбор  = "Период окончания отчета" 	Тогда
			СтруктураРасшифровки.Вставить(СтрОтбор.ПолеКод,Объект.ПериодОкончания);
			Если СтрОтбор.ПолеКод = "ПериодС" Тогда
				ПериодС = Объект.ПериодОкончания;
			ИначеЕсли СтрОтбор.ПолеКод = "ПериодПо" Тогда
				ПериодПо = Объект.ПериодОкончания;
			КонецЕсли;	
		ИначеЕсли СтрОтбор.Отбор  = "Сценарий отчета"   		Тогда
			СтруктураРасшифровки.Вставить(СтрОтбор.ПолеКод,Объект.Сценарий);
			
		ИначеЕсли СтрОтбор.Отбор  = "Организация отчета"  Тогда
			Если ТипЗнч(Объект.Организация) = Тип("СправочникСсылка.Организации") Тогда
				 СтруктураРасшифровки.Вставить(СтрОтбор.ПолеКод,Объект.Организация);
			ИначеЕсли ТипЗнч(Объект.Организация) = Тип("СписокЗначений") Тогда
				 ЗначениеОтбора  = Объект.Организация;
			КонецЕсли;
			
		ИначеЕсли СтрОтбор.Отбор  = "Проект отчета"  Тогда
			
			Если ТипЗнч(Объект.Проект) = Тип("СправочникСсылка.Проекты") Тогда
				 СтруктураРасшифровки.Вставить(СтрОтбор.ПолеКод,Объект.Проект);	
			ИначеЕсли ТипЗнч(Объект.Проект) = Тип("СписокЗначений") Тогда
				 ЗначениеОтбора  = Объект.Проект;
			КонецЕсли;
			
		ИначеЕсли  СтрОтбор.Отбор  = "В списке" ИЛИ СтрОтбор.Отбор  = "В группе" ИЛИ СтрОтбор.Отбор  = "В группе из списка" Тогда
			ЗначениеОтбора =  ЗначениеИзСтрокиВнутр(СтрОтбор.ЗначениеОтбораСтрока);	
			Если СтрОтбор.ПолеКод = "ПериодС" Тогда
				ПериодС = ЗначениеОтбора;
				СтруктураРасшифровки.Вставить(СтрОтбор.ПолеКод,ЗначениеОтбора);		
			ИначеЕсли СтрОтбор.ПолеКод = "ПериодПо" Тогда
				ПериодПо = ЗначениеОтбора;
				СтруктураРасшифровки.Вставить(СтрОтбор.ПолеКод,ЗначениеОтбора);			
			КонецЕсли;				
		ИначеЕсли СтрОтбор.Отбор  = "Равно" Тогда	
			  ЗначениеОтбора =  ЗначениеИзСтрокиВнутр(СтрОтбор.ЗначениеОтбораСтрока);
			  СтруктураРасшифровки.Вставить(СтрОтбор.ПолеКод,ЗначениеОтбора);
		ИначеЕсли СтрОтбор.Отбор  = "Не в списке" ИЛИ  СтрОтбор.Отбор  = "Не равно" Тогда
			//ПолучитьИсключающийСписок
		ИначеЕсли СтрОтбор.Отбор  = "Период начала со сдвигом" 	Тогда	
			МассивПериодов = АналитическийБланкУХСервер.ПолучитьПериодПоСдвигу(Объект.ПериодОтчета.ДатаНачала,СтрОтбор,Объект.ПериодОтчета.Периодичность);
            СтруктураРасшифровки.Вставить(СтрОтбор.ПолеКод,МассивПериодов);	
			Если СтрОтбор.ПолеКод = "ПериодС" Тогда
				ПериодС = МассивПериодов;
			ИначеЕсли СтрОтбор.ПолеКод = "ПериодПо" Тогда
				ПериодПо = МассивПериодов;
			КонецЕсли;	
			//Если СтруктураРасшифровки.Свойство("ПериодОтчета") Тогда
			//	СтруктураРасшифровки.ПериодОтчета =  АналитическийБланкУХСервер.ПолучитьПериодПоСдвигу(СтруктураРасшифровки.ПериодОтчета.ДатаНачала,СтрОтбор,Объект.ПериодОтчета.Периодичность);
			//КонецЕсли;	
			
		ИначеЕсли СтрОтбор.Отбор  = "Период окончания со сдвигом" 	Тогда	
			МассивПериодов = АналитическийБланкУХСервер.ПолучитьПериодПоСдвигу(Объект.ПериодОкончания.ДатаНачала,СтрОтбор,Объект.ПериодОтчета.Периодичность);	
			СтруктураРасшифровки.Вставить(СтрОтбор.ПолеКод,МассивПериодов);
			Если СтрОтбор.ПолеКод = "ПериодС" Тогда
				ПериодС = МассивПериодов;
			ИначеЕсли СтрОтбор.ПолеКод = "ПериодПо" Тогда
				ПериодПо = МассивПериодов;
			КонецЕсли;
		КонецЕсли;		
	КонецЦикла;	
	
	Если Не СтруктураРасшифровки.Свойство("ПериодОтчета") Тогда
		
		Если СтруктураРасшифровки.Свойство("ПериодС") И СтруктураРасшифровки.Свойство("ПериодПо") Тогда		
			Если ТипЗнч(ПериодС) = Тип("Массив") И ПериодС.Количество()=1 Тогда
				ПериодС = ПериодС[0];
			КонецЕсли;	
			Если ТипЗнч(ПериодПо) = Тип("Массив") И ПериодПо.Количество()=1 Тогда
				ПериодПо = ПериодПо[0];
			КонецЕсли;	
			
			Если ПериодС = ПериодПо И ТипЗнч(ПериодС) = Тип("СправочникСсылка.Периоды") Тогда
				 СтруктураРасшифровки.Вставить("ПериодОтчета",ПериодС);
			КонецЕсли;			
		КонецЕсли;	
	
	КонецЕсли;
	
	//Заполним расшифровку аналитиками вида отчета, если есть.
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл		
		Если Объект.Свойство("Аналитика"+Инд) И ЗначениеЗаполнено(Объект["Аналитика"+Инд]) Тогда
		    КодАналитики = Объект.ВидОтчета["ВидАналитики"+Инд].Код;		
			Если НЕ СтруктураРасшифровки.Свойство(КодАналитики) Тогда
				 СтруктураРасшифровки.Вставить(КодАналитики,Объект["Аналитика"+Инд]);
			КонецЕсли;			
		Иначе
			Прервать;
		КонецЕсли;	
	КонецЦикла;	
	
КонецПроцедуры	

Функция ПолучитьПолнуюСтруктуруАналитик(тПоказатель) Экспорт 
		
	СтруктураАналитик = Новый Структура;
	СтруктураАналитик.Вставить("ПериодОтчета");
    СтруктураАналитик.Вставить("Организация");
	СтруктураАналитик.Вставить("Сценарий");
	
	Если тПоказатель.РазделениеПоПроектам Тогда
		СтруктураАналитик.Вставить("Проект");
	КонецЕсли;
	
	ГруппаРаскрытия = тПоказатель.ГруппаРаскрытия;
	Если  ЗначениеЗАполнено(ГруппаРаскрытия) Тогда	
		
		Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
			Если  ЗначениеЗАполнено(тПоказатель["ГруппаРаскрытияВидАналитики"+Инд]) Тогда
				СтруктураАналитик.Вставить(тПоказатель["ГруппаРаскрытияВидАналитики"+Инд+"Код"]);
			КонецЕсли;	
		КонецЦикла;
		
		Если  ЗначениеЗаполнено(тПоказатель.АналитикаВалюта) Тогда
			 СтруктураАналитик.Вставить("АналитикаВалюта",ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.СправочникВалюты.Код);
		КонецЕсли;		
	КонецЕсли;	
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если  ЗначениеЗАполнено(тПоказатель["ВОВидАналитики"+Инд]) Тогда
			СтруктураАналитик.Вставить(тПоказатель["ВОВидАналитики"+Инд+"Код"]);
		КонецЕсли;	
	КонецЦикла;
	
		
	Возврат СтруктураАналитик;	
	
КонецФункции

Процедура ПолучитьСвойстваПоказателяСтруктура(ТзСвойстваПоказателей,Расшифровка,СтруктураРасшифровки,тПоказатель) Экспорт
	
	тПоказатель =  ТзСвойстваПоказателей.Найти(Расшифровка.Ссылка,"Ссылка");
	
	СтруктураРасшифровки.Вставить("ПоказательСсылка"		,Расшифровка.Ссылка);
	СтруктураРасшифровки.Вставить("УидГруппыОтборов"		,Расшифровка.Уид);
	СтруктураРасшифровки.Вставить("ПоказательКод"			,СокрЛП(тПоказатель.ПоказательКод));
	СтруктураРасшифровки.Вставить("ВидОтчета"				,тПоказатель.ВидОтчета);
	СтруктураРасшифровки.Вставить("ПоказательТипЗначения"	,тПоказатель.ТипЗначения);
	
	Если Расшифровка.Свойство("ОтображатьСуммуВДопВалюте") Тогда
		 СтруктураРасшифровки.Вставить("ОтображатьСуммуВДопВалюте"	,Истина);
	КонецЕсли;	

	
КонецПроцедуры


#КонецОбласти

Процедура ВставитьЗначениеВОбластьТабличногоДокумента(ОбластьТабличногоДокумента, ЗначениеЯчейки = Неопределено, ФорматЯчейки = Неопределено, ТочностьЧисла = 0, СоставДаты = неопределено) Экспорт
			
	Если ТипЗнч(ЗначениеЯчейки) = Тип("Число") тогда
		ОбластьТабличногоДокумента.ТипЗначения = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18, ТочностьЧисла);
		
	ИначеЕсли ТипЗнч(ЗначениеЯчейки) = Тип("Дата") тогда
		
		Если СоставДаты = неопределено тогда
			ОбластьТабличногоДокумента.ТипЗначения = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата);
		Иначе
			ОбластьТабличногоДокумента.ТипЗначения = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(СоставДаты);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЗначениеЯчейки) = Тип("Булево") тогда
		ОбластьТабличногоДокумента.ТипЗначения = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево();
		
	ИначеЕсли ТипЗнч(ЗначениеЯчейки) = Тип("Строка") тогда
		ОбластьТабличногоДокумента.ТипЗначения = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255);
		
	Иначе
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(ЗначениеЯчейки));
		
		ОбластьТабличногоДокумента.ТипЗначения = Новый ОписаниеТипов(МассивТипов);	
	КонецЕсли;
		
	Если Не ЗначениеЗаполнено(ОбластьТабличногоДокумента.Формат) Тогда
		Если ФорматЯчейки = Неопределено Тогда 
			ОбластьТабличногоДокумента.Формат = "ЧН=0;ЧГ=3,0;ДФ=dd.MM.yyyy ;БЛ=; БИ=Да";
		Иначе
			ОбластьТабличногоДокумента.Формат = ФорматЯчейки;
		КонецЕсли;
	КонецЕсли;	
	
	ОбластьТабличногоДокумента.Значение = ЗначениеЯчейки;
	
КонецПроцедуры

Функция ПолучитьЗначениеОбластиТабличногоДокумента(ОбластьТабличногоДокумента) Экспорт
	
	Если ОбластьТабличногоДокумента.СодержитЗначение тогда
		Возврат ОбластьТабличногоДокумента.Значение;
	Иначе
		Возврат ОбластьТабличногоДокумента.Текст;
	КонецЕсли;
	
КонецФункции

Процедура ВернутьИмяФормыАналитическогоБланка(ИмяФормы) Экспорт
	
	 ИмяФормы = "Обработка.АналитическийБланк.Форма.ФормаОтчета";
	
КонецПроцедуры	

Процедура  СкопироватьНастройкиБланка(Выборка_Ссылка, НовЭл_Ссылка) Экспорт 
	
	ОбъектАБ = Обработки.АналитическийБланк.Создать();
	
	Отказ = Ложь;
	
	ПолеТабличногоДокументаМакет = Новый ТабличныйДокумент;
	МакетДляВыводаПоказателей = Новый ТабличныйДокумент;
	
	Обработки.АналитическийБланк.ПрочитатьНастройкиАналитическогоБланка(ПолеТабличногоДокументаМакет, Выборка_Ссылка, ОбъектАБ);
	Справочники.БланкиОтчетов.СохранитьМакетМногопериодногоБланка(НовЭл_Ссылка, ПолеТабличногоДокументаМакет, ОбъектАБ, Новый УникальныйИдентификатор, Отказ, МакетДляВыводаПоказателей);
		
КонецПроцедуры	

Процедура РазобратьДанныеБуфера(ДанныеБуфера,МассивСтрок,МассивЗначений) Экспорт
		
	МассивСтрок = СтроковыеФункцииКлиентСерверУХ.РазложитьСтрокуВМассивПодстрок(ДанныеБуфера,Символ(13));	
	Для Каждого Стр Из МассивСтрок Цикл
		
		МассивЗначенийСтрокиТипизированный = Новый Массив();
		
		Если Лев(Стр,1) = Символ(10) Тогда
			МассивЗначенийСтроки =  СтроковыеФункцииКлиентСерверУХ.РазложитьСтрокуВМассивПодстрок(Прав(Стр,СтрДлина(Стр)-1),"	");
			
			Для Каждого ЗначениеМассива Из МассивЗначенийСтроки Цикл	
				Если ОбщегоНазначенияКлиентСерверУХ.ЭтоЧисло(ЗначениеМассива) тогда
					МассивЗначенийСтрокиТипизированный.Добавить(ЗначениеМассива);
				КонецЕсли;
			КонецЦикла;
			
		Иначе
			МассивЗначенийСтроки =  СтроковыеФункцииКлиентСерверУХ.РазложитьСтрокуВМассивПодстрок(Стр,"	");
			
			Для Каждого ЗначениеМассива Из МассивЗначенийСтроки Цикл	
				Если ОбщегоНазначенияКлиентСерверУХ.ЭтоЧисло(ЗначениеМассива) тогда
					МассивЗначенийСтрокиТипизированный.Добавить(ЗначениеМассива);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		МассивЗначений.Добавить(МассивЗначенийСтрокиТипизированный);
				
	КонецЦикла;
		 		
КонецПроцедуры


