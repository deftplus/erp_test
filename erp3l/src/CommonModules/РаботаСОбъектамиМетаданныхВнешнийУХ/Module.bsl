Функция ПримитивныеXMLТипыБазы(База, Кэш = Неопределено) Экспорт
	
	Если Кэш <> Неопределено Тогда
		Результат = РаботаСОбъектамиМетаданныхУХ.ПараметрИзКэша(Кэш, "ПримитивныеXMLТипы");
	Иначе
		Результат = Новый Структура;
		Результат.Вставить("ТипБулево", ПолучитьXMLTypeOf(База, Истина));
		Результат.Вставить("ТипЧисло", ПолучитьXMLTypeOf(База, 1));
		Результат.Вставить("ТипСтрока", ПолучитьXMLTypeOf(База, ""));
		Результат.Вставить("ТипДата", ПолучитьXMLTypeOf(База, Дата(1, 1, 1)));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

Функция ПолучитьXMLTypeOf(База, Значение) Экспорт
	
	Если РаботаСОбъектамиМетаданныхУХ.ЭтоТекущаяИБ(База) Тогда			
		Возврат XMLTypeOf(Значение);		
	Иначе		
		Возврат База.XMLTypeOf(Значение);		
	КонецЕсли;
	
КонецФункции // ПолучитьXMLTypeOf() 

Функция ПолучитьXMLType(База, Тип) Экспорт
	
	Если РаботаСОбъектамиМетаданныхУХ.ЭтоТекущаяИБ(База) Тогда			
		Возврат XMLType(Тип);			
	Иначе	
		Возврат База.XMLType(Тип);		
	КонецЕсли;
	
КонецФункции // ПолучитьXMLType()

Функция СравнитьЗначения(База,Значение1,Значение2) Экспорт
	
	ОбъектСравнение=База.NewObject("СравнениеЗначений");
	
	Возврат ОбъектСравнение.Сравнить(Значение1,Значение2)=0;
	
КонецФункции // СравнитьЗначения()

Функция ПолучитьFromXMLType(База,Тип) Экспорт
	
	Если РаботаСОбъектамиМетаданныхУХ.ЭтоТекущаяИБ(База) Тогда
		
		Возврат FromXMLType(Тип);

	Иначе
		
		Возврат База.FromXMLType(Тип);
		
	КонецЕсли;	
	
КонецФункции // ПолучитьFromXMLType()

Функция ПолучитьXMLString(База,Значение) Экспорт
	
	Если РаботаСОбъектамиМетаданныхУХ.ЭтоТекущаяИБ(База) Тогда
		
		Возврат XMLString(Значение);

	Иначе
		
		Возврат База.XMLString(Значение);
		
	КонецЕсли;	
	
КонецФункции // ПолучитьXMLString()

Функция ПолучитьXMLValue(База,Тип,СтрокаXML) Экспорт
	
	Если РаботаСОбъектамиМетаданныхУХ.ЭтоТекущаяИБ(База) Тогда
		
		Возврат XMLValue(Тип,СтрокаXML);

	Иначе
		
		Возврат База.XMLValue(Тип,СтрокаXML);
		
	КонецЕсли;	
	
КонецФункции // ПолучитьXMLString()

Функция ПолучитьЗначениеЗаполнено(База,Значение) Экспорт
	
	Если РаботаСОбъектамиМетаданныхУХ.ЭтоТекущаяИБ(База) Тогда
		
		Возврат ЗначениеЗаполнено(Значение);

	Иначе
		
		Возврат База.ЗначениеЗаполнено(Значение);
		
	КонецЕсли;	
	
КонецФункции // ПолучитьЗначениеЗаполнено() 

Процедура ПолучитьЗаполнитьЗначенияСвойств(База,Приемник,Источник) Экспорт
	
	Если РаботаСОбъектамиМетаданныхУХ.ЭтоТекущаяИБ(База) Тогда
		
		ЗаполнитьЗначенияСвойств(Приемник,Источник);

	Иначе
		
		База.ЗаполнитьЗначенияСвойств(Приемник,Источник);
		
	КонецЕсли;	
	
КонецПроцедуры // ПолучитьЗаполнитьЗначенияСвойств()

Функция ПолучитьString(База,Значение) Экспорт
	
	Если РаботаСОбъектамиМетаданныхУХ.ЭтоТекущаяИБ(База) Тогда
		
		Возврат String(Значение);

	Иначе
		
		Возврат База.String(Значение);
		
	КонецЕсли;
	
КонецФункции // ПолучитьString()

Функция МетаданныеНайтиПоТипу(База, Тип, Кэш = Неопределено) Экспорт
	
	Результат = Неопределено;
	Ресурс = "МетаданныеНайтиПоТипу";
	Если РаботаСОбъектамиМетаданныхУХ.ПолучитьЗначениеИзКэша(Кэш, Ресурс, Тип, Результат) Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если РаботаСОбъектамиМетаданныхУХ.ЭтоТекущаяИБ(База) Тогда		
		Результат = Метаданные.НайтиПоТипу(Тип);
	Иначе		
		Результат = База.MetaData.НайтиПоТипу(Тип);		
	КонецЕсли;
	
	РаботаСОбъектамиМетаданныхУХ.СохранитьЗначениеВКэш(Кэш, Ресурс, Тип, Результат);
	
	Возврат Результат;
	
КонецФункции // МетаданныеНайтиПоТипу()

Функция МетаданныеНайтиПоПолномуИмени(База,ПолноеИмя) Экспорт
	
	Если РаботаСОбъектамиМетаданныхУХ.ЭтоТекущаяИБ(База) Тогда
		
		Возврат Метаданные.НайтиПоПолномуИмени(ПолноеИмя);

	Иначе
		
		Возврат База.MetaData.НайтиПоПолномуИмени(ПолноеИмя);
		
	КонецЕсли;	
	
КонецФункции // МетаданныеНайтиПоПолномуИмени()

Функция ПолучитьОбъектИнтеграции(ИмяОбъекта,ТекСоединениеВИБ=Неопределено) Экспорт
	
	Перем Результат;
	
	Выполнить ("Результат="+?(ТекСоединениеВИБ=Неопределено,"","ТекСоединениеВИБ.")+ИмяОбъекта);
	
	Возврат Результат;
		
КонецФункции // ПолучитьОбъектИнтеграции() 

Функция ПримитивныйТип(Тип) Экспорт
	
	Возврат (Тип = Тип("Строка") ИЛИ Тип = Тип("Дата") ИЛИ Тип = Тип("Булево") ИЛИ Тип = Тип("Число"));	
	
КонецФункции

Функция ВернутьИндексВМассиве(МассивДанные, Элемент) Экспорт 
	
	Если МассивДанные = Неопределено Тогда
		Возврат -1;
	КонецЕсли;
	
	Для ИндексЭлемента = 0 По МассивДанные.ВГраница() Цикл
		
		Если  (МассивДанные[ИндексЭлемента] = Элемент) Тогда
			Возврат ИндексЭлемента;
		КонецЕсли;	
		
	КонецЦикла;
	
	// не нашли элемент
	Возврат -1;
	
КонецФункции

// Служебная функция, определяющая примитивность переданного типа
//
Функция ПримитивныйТипСтрока(СтрокаТип) Экспорт
	
	Возврат (СтрокаТип = "Строка"
		ИЛИ СтрНачинаетсяС(СтрокаТип,"Строка(")
		ИЛИ СтрокаТип = "Дата"
		ИЛИ СтрНачинаетсяС(СтрокаТип,"Дата(")
		ИЛИ СтрокаТип = "Число"
		ИЛИ СтрНачинаетсяС(СтрокаТип,"Число(")
		ИЛИ СтрокаТип = "Булево");
	
	КонецФункции
	
Функция ПолучитьНаименованиеСсылочногоТипаБД(База, Тип) Экспорт
	
	Если ТипЗнч(Тип)=Тип("Строка") Тогда // Передано полное имя объекта метаданных
		
		Если (СтрНачинаетсяС(Тип, "Справочник") ИЛИ СтрНачинаетсяС(Тип, "Catalog")) Тогда
			Возврат "Справочник";
		ИначеЕсли (СтрНачинаетсяС(Тип,"Перечисление") ИЛИ СтрНачинаетсяС(Тип,"Enum")) Тогда
			Возврат "Перечисление";
		ИначеЕсли (СтрНачинаетсяС(Тип, "Документ") ИЛИ СтрНачинаетсяС(Тип, "Document")) Тогда
			Возврат "Документ";
		ИначеЕсли (СтрНачинаетсяС(Тип, "ПланСчетов") ИЛИ СтрНачинаетсяС(Тип, "ChartOfAccounts")) Тогда
			Возврат "ПланСчетов";
		ИначеЕсли (СтрНачинаетсяС(Тип, "ПланВидовХарактеристик") ИЛИ СтрНачинаетсяС(Тип, "ChartOfCharacteristicTypes")) Тогда
			Возврат "ПланВидовХарактеристик";
		Иначе
			Возврат "НеПоддерживается";
		КонецЕсли;
		
	Иначе // Передан тип 	
		
		Если ТипЗнч(Тип)=Тип("Тип") Тогда // Работаем с объектом текущей ИБ
			
			Попытка
				Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
					Возврат "Справочник";
				ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
					Возврат "Перечисление";
				ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
					Возврат "Документ";
				ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип) Тогда
					Возврат "ПланСчетов";
				ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип) Тогда
					Возврат "ПланВидовХарактеристик";
				Иначе
					Возврат "НеПоддерживается";
				КонецЕсли;
			Исключение
				Возврат "НеПоддерживается";
			КонецПопытки;
			
		Иначе
			
			Попытка
				Если База.Catalogs.AllRefsType().ContainsType(Тип) Тогда
					Возврат "Справочник";
				ИначеЕсли База.Enums.AllRefsType().ContainsType(Тип) Тогда
					Возврат "Перечисление";
				ИначеЕсли База.Documents.AllRefsType().ContainsType(Тип) Тогда
					Возврат "Документ";
				ИначеЕсли База.ChartsOfAccounts.AllRefsType().ContainsType(Тип) Тогда
					Возврат "ПланСчетов";
				ИначеЕсли База.ChartsOfCharacteristicTypes.AllRefsType().ContainsType(Тип) Тогда
					Возврат "ПланВидовХарактеристик";
				Иначе
					Возврат "НеПоддерживается";
				КонецЕсли;
			Исключение
				Возврат "НеПоддерживается";
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьМассивИменОбъектов8x(ТипОбъектаМетаданных,ТекСоединениеВИБ) Экспорт
	
	Если ТипОбъектаМетаданных="ChartsOfAccounts" Тогда
		
		Возврат ПолучитьМассивСтруктурПлановСчетовБД(ТекСоединениеВИБ);
		
	Иначе
		
		МассивИмен=Новый Массив;
		
		Для Каждого ОбъектМетаданных ИЗ ТекСоединениеВИБ.MetaData[ТипОбъектаМетаданных] Цикл
			
			МассивИмен.Добавить(ОбъектМетаданных.Name);
			
		КонецЦикла;
		
		Возврат МассивИмен;
		
	КонецЕсли;
		
КонецФункции // ПолучитьМассивИменОбъектов8x()

Функция ПолучитьМассивСтруктурПлановСчетовБД(ТекСоединениеВИБ)
	
	МассивСтруктур=Новый Массив;
	
	Для Каждого ПланСчетов ИЗ ТекСоединениеВИБ.MetaData.ChartsOfAccounts Цикл
		
		Если НЕ ПланСчетов.Реквизиты.Найти("ПланСчетов")=Неопределено Тогда
			
			Запрос=ТекСоединениеВИБ.NewObject("Запрос");
			Запрос.Текст="ВЫБРАТЬ
			|	ПланыСчетовМеждународногоУчета.Наименование КАК Наименование
			|ИЗ
			|	Справочник.ПланыСчетовМеждународногоУчета КАК ПланыСчетовМеждународногоУчета";
			
			Результат=Запрос.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл 
				
				МассивСтруктур.Добавить(Новый Структура("ПланСчетовМетаданные,ПланСчетовБД",ПланСчетов.Name,Результат.Наименование));
				
			КонецЦикла;
			
		ИначеЕсли НЕ ПланСчетов.Реквизиты.Найти("ПланСчетовБД")=Неопределено Тогда
			
			Запрос=ТекСоединениеВИБ.NewObject("Запрос");
			Запрос.Текст="ВЫБРАТЬ
			             |	ПланыСчетовБД.Наименование КАК Наименование
			             |ИЗ
			             |	Справочник.ПланыСчетовБД КАК ПланыСчетовБД
			             |ГДЕ
			             |	ПланыСчетовБД.Владелец = ЗНАЧЕНИЕ(Справочник.ТипыБазДанных.ТекущаяИБ)
			             |	И ПланыСчетовБД.ПланСчетовМетаданные = &ПланСчетовМетаданные";
			
			Запрос.УстановитьПараметр("ПланСчетовМетаданные",ПланСчетов.Name);
			
			Результат=Запрос.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл 
				
				МассивСтруктур.Добавить(Новый Структура("ПланСчетовМетаданные,ПланСчетовБД",ПланСчетов.Name,Результат.Наименование));
				
			КонецЦикла;
			
		Иначе
			
			МассивСтруктур.Добавить(Новый Структура("ПланСчетовМетаданные,ПланСчетовБД",ПланСчетов.Name,Неопределено));
			
		КонецЕсли;
		
	КонецЦикла; 
	
	Возврат МассивСтруктур;
				
КонецФункции // ПолучитьМассивСтруктурПлановСчетовБД() 

#Область Справочники

Функция ОписаниеОбщихРеквизитов(ТекСоединениеВИБ, МетаданныеИБ, Кэш)
	
	ОписаниеОбщихРеквизитов = Новый Соответствие;
	ОтображатьОшибкуПроверкаЗаполнения = ТекСоединениеВИБ.FillChecking.ShowError;
	НеИспользоватьОбщиеРеквизиты = МетаданныеИБ.ObjectProperties.CommonAttributeUse.DontUse;
	АвтоИспользованиеОбщихРеквизитоы = МетаданныеИБ.ObjectProperties.CommonAttributeUse.Auto;
	ИспользоватьОбщиеРеквизиты = МетаданныеИБ.ObjectProperties.CommonAttributeAutoUse.Use;
	
	Для каждого Реквизит Из МетаданныеИБ.CommonAttributes Цикл
		
		Если Реквизит.Имя = "ОбластьДанныхОсновныеДанные" 
			ИЛИ Реквизит.Имя="ОбластьДанныхВспомогательныеДанные"
			ИЛИ Реквизит.Имя="DataAreaMainData" 
			ИЛИ Реквизит.Имя="DataAreaAuxiliaryData" Тогда
			
			Продолжить;	
			
		КонецЕсли;
		
		АвтоИспользование = (Реквизит.AutoUse = ИспользоватьОбщиеРеквизиты);
		
		Для каждого ЭлементСостава Из Реквизит.Состав Цикл
			
			Если ЭлементСостава.Use = НеИспользоватьОбщиеРеквизиты Тогда
				Продолжить;				
			ИначеЕсли НЕ АвтоИспользование И (ЭлементСостава.Use = АвтоИспользованиеОбщихРеквизитоы) Тогда 
				Продолжить;
			КонецЕсли;
			
			ОбъектМетаданных = ЭлементСостава.Метаданные;
			Если ОписаниеОбщихРеквизитов[ОбъектМетаданных] = Неопределено Тогда
				 ОписаниеОбщихРеквизитов.Вставить(ОбъектМетаданных, Новый Массив);
			КонецЕсли;	 
			
			ОписаниеТипаРеквизита = ОписаниеТипаДанных(ТекСоединениеВИБ, Реквизит.Type, Кэш);
			
			СтруктураРеквизита = Новый Структура;
			СтруктураРеквизита.Вставить("Имя", Реквизит.Name);
			СтруктураРеквизита.Вставить("Синоним", Реквизит.Synonym);
			СтруктураРеквизита.Вставить("ТипДанных", ОписаниеТипаРеквизита.ТипДанных);
			СтруктураРеквизита.Вставить("ОписаниеПримитивногоТипа", ОписаниеТипаРеквизита.ОписаниеПримитивногоТипа);
			СтруктураРеквизита.Вставить("ОбщийРеквизит", Истина);
			СтруктураРеквизита.Вставить("Использование", "ДляЭлемента");
			СтруктураРеквизита.Вставить("Обязательный", Реквизит.ПроверкаЗаполнения = ОтображатьОшибкуПроверкаЗаполнения);
			
			ОписаниеОбщихРеквизитов[ОбъектМетаданных].Добавить(СтруктураРеквизита);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ОписаниеОбщихРеквизитов;
	
КонецФункции

Функция ДобавитьОписаниеОбщихРеквизитовСправочника(ШаблонОписания, СправочникБД, МетаданныеИБ, База, Кэш)
	
	 Если Кэш <> Неопределено Тогда
		
		Ресурс = "ОписаниеОбщихРеквизитов";
		ОписаниеОбщихРеквизитов = РаботаСОбъектамиМетаданныхУХ.ПараметрИзКэша(Кэш, Ресурс);
		Если ОписаниеОбщихРеквизитов = Неопределено Тогда
			ОписаниеОбщихРеквизитов = ОписаниеОбщихРеквизитов(База, МетаданныеИБ, Кэш);			
			РаботаСОбъектамиМетаданныхУХ.СохранитьПараметрВКэш(Кэш, Ресурс, ОписаниеОбщихРеквизитов);
		КонецЕсли;
		
		МассивОбщихРеквизитов = ОписаниеОбщихРеквизитов[СправочникБД];
		Если МассивОбщихРеквизитов <> Неопределено Тогда
			Для каждого СтруктураРеквизита Из МассивОбщихРеквизитов Цикл
				СтрокаРеквизитов = ШаблонОписания.Реквизиты.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаРеквизитов, СтруктураРеквизита);
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		
		ОтображатьОшибкуПроверкаЗаполнения = База.FillChecking.ShowError;
		НеИспользоватьОбщиеРеквизиты = МетаданныеИБ.ObjectProperties.CommonAttributeUse.DontUse;
		АвтоИспользованиеОбщихРеквизиты = МетаданныеИБ.ObjectProperties.CommonAttributeUse.Auto;
		ИспользоватьОбщиеРеквизиты = МетаданныеИБ.ObjectProperties.CommonAttributeAutoUse.Use;
	
		Для каждого Реквизит Из МетаданныеИБ.CommonAttributes Цикл
			
			Если Реквизит.Имя = "ОбластьДанныхОсновныеДанные" 
			ИЛИ Реквизит.Имя="ОбластьДанныхВспомогательныеДанные"
			ИЛИ Реквизит.Имя="DataAreaMainData" 
			ИЛИ Реквизит.Имя="DataAreaAuxiliaryData" Тогда
			
			Продолжить;	
			
		КонецЕсли;

			
			ИспользованиеРеквизита = Реквизит.Content.Find(СправочникБД);
			АвтоИспользование = (Реквизит.AutoUse = ИспользоватьОбщиеРеквизиты);
			
			Если ИспользованиеРеквизита.Use = НеИспользоватьОбщиеРеквизиты Тогда
				Продолжить;				
			ИначеЕсли НЕ АвтоИспользование И (ИспользованиеРеквизита.Use = АвтоИспользованиеОбщихРеквизиты) Тогда 
				Продолжить;
			КонецЕсли;
			
			ПримитивныйТип = ПолучитьОписаниеПримитивногоТипаИзБД(База, Реквизит.Type);
			
			СтрокаРеквизитов = ШаблонОписания.Реквизиты.Добавить();
			СтрокаРеквизитов.Имя=Реквизит.Name;
			СтрокаРеквизитов.Синоним=Реквизит.Synonym;
			СтрокаРеквизитов.ТипДанных = ПолучитьСтрокуТиповДанныхБД(База,Реквизит.Type);		
			Если НЕ ПримитивныйТип=Неопределено Тогда		
				СтрокаРеквизитов.ОписаниеПримитивногоТипа = ПолучитьСтрокуПримитивныхТипов(ПримитивныйТип);	
			КонецЕсли;
			
			СтрокаРеквизитов.ОбщийРеквизит = Истина;		
			СтрокаРеквизитов.Использование = "ДляЭлемента";	
			СтрокаРеквизитов.Обязательный = (Реквизит.ПроверкаЗаполнения = ОтображатьОшибкуПроверкаЗаполнения);
			
		КонецЦикла;
	
	КонецЕсли;

КонецФункции

Функция СтруктураОписанияСправочника8х(ШаблонОписания, ТекСоединениеВИБ, Кэш = Неопределено) Экспорт
		
	МетаданныеИБ=ТекСоединениеВИБ.MetaData;
	
	Если МетаданныеИБ.Catalogs.Найти(ШаблонОписания.ИмяОбъектаМетаданных) <> Неопределено Тогда
		
		СправочникБД = МетаданныеИБ.Catalogs[ШаблонОписания.ИмяОбъектаМетаданных];
		
	Иначе	
		
		ШаблонОписания.Вставить("ТекстОшибки",СтрШаблон(Нстр("ru = 'Для справочника %1 не найдено соответствие в метаданных'"), 
			ШаблонОписания.ИмяОбъектаМетаданных));			
		Возврат ШаблонОписания;
		
	КонецЕсли;
	
	ПеречислениеПроверкаЗаполнения=ТекСоединениеВИБ.FillChecking;
	
	ШаблонОписания.Синоним=СправочникБД.Presentation();
	ШаблонОписания.ИерархическийСправочник=СправочникБД.Hierarchical;
	
	Если ШаблонОписания.ИерархическийСправочник Тогда
		
		Если СправочникБД.HierarchyType=МетаданныеИБ.ObjectProperties.HierarchyType.HierarchyFoldersAndItems Тогда			
			ШаблонОписания.ВидИерархии="ИерархияГруппИЭлементов";			
		Иначе			
			ШаблонОписания.ВидИерархии="ИерархияЭлементов";		
		КонецЕсли;		
	КонецЕсли;
	
	СтрокаРеквизитов = ШаблонОписания.Реквизиты.Добавить(); // Добавим ссылку
	СтрокаРеквизитов.Имя = "Ссылка";
	СтрокаРеквизитов.Синоним = "Ссылка";
	СтрокаРеквизитов.ТипДанных = "УникальныйИдентификатор";	
	СтрокаРеквизитов.Использование = "ДляГруппыИЭлемента";
	
	// Отдельно добавим код и наименование.
	Если СправочникБД.CodeLength <> 0 Тогда
		
		ТипКода = ?(СправочникБД.CodeType = МетаданныеИБ.ObjectProperties.CatalogCodeType.String, "Строка", "Число");
		
		СтрокаРеквизитов = ШаблонОписания.Реквизиты.Добавить(); 
		СтрокаРеквизитов.Имя="Код";
		
		СтрРеквизит=СправочникБД.StandardAttributes["Код"];
		СтрокаРеквизитов.Синоним=?(ЗначениеЗаполнено(СтрРеквизит.Синоним),СтрРеквизит.Синоним,"Код");
		
		СтрокаРеквизитов.ТипДанных = ТипКода;
		СтрокаРеквизитов.ОписаниеПримитивногоТипа=ТипКода+"("+СправочникБД.CodeLength+")";		
		СтрокаРеквизитов.Использование="ДляГруппыИЭлемента";
		
	КонецЕсли;
	
	Если СправочникБД.DescriptionLength <> 0 Тогда
		
		СтрокаРеквизитов = ШаблонОписания.Реквизиты.Добавить(); 
		СтрокаРеквизитов.Имя="Наименование";
		
		СтрРеквизит=СправочникБД.StandardAttributes["Наименование"];
		СтрокаРеквизитов.Синоним=?(ЗначениеЗаполнено(СтрРеквизит.Синоним),СтрРеквизит.Синоним,"Наименование");
		
		СтрокаРеквизитов.ТипДанных = "Строка";
		СтрокаРеквизитов.ОписаниеПримитивногоТипа="Строка"+"("+СправочникБД.DescriptionLength+")";
				
		СтрокаРеквизитов.Использование="ДляГруппыИЭлемента";
		
		СтрокаРеквизитов.Обязательный=(СправочникБД.СтандартныеРеквизиты["Наименование"].ПроверкаЗаполнения=ПеречислениеПроверкаЗаполнения.ShowError);				   
		
	КонецЕсли;
	
	Для Каждого Реквизит Из СправочникБД.Attributes Цикл
		
		ОписаниеТипаРеквизита = ОписаниеТипаДанных(ТекСоединениеВИБ, Реквизит.Type, Кэш);
		
		СтрокаРеквизитов = ШаблонОписания.Реквизиты.Добавить();
		СтрокаРеквизитов.Имя = Реквизит.Name;
		СтрокаРеквизитов.Синоним = Реквизит.Synonym;
		СтрокаРеквизитов.ТипДанных = ОписаниеТипаРеквизита.ТипДанных;
		СтрокаРеквизитов.ОписаниеПримитивногоТипа = ОписаниеТипаРеквизита.ОписаниеПримитивногоТипа;
						
		Если ШаблонОписания.ИерархическийСправочник Тогда
			
			Если Реквизит.Use = МетаданныеИБ.ObjectProperties.AttributeUse.ForFolder Тогда
				
				СтрокаРеквизитов.Использование = "ДляГруппы";
				
			ИначеЕсли Реквизит.Use = МетаданныеИБ.ObjectProperties.AttributeUse.ForItem Тогда
				
				СтрокаРеквизитов.Использование = "ДляЭлемента";
				
			Иначе
				
				СтрокаРеквизитов.Использование = "ДляГруппыИЭлемента";
				
			КонецЕсли;
			
		Иначе
			
			СтрокаРеквизитов.Использование = "ДляЭлемента";
			
		КонецЕсли;
		
		СтрокаРеквизитов.Обязательный = (Реквизит.ПроверкаЗаполнения = ПеречислениеПроверкаЗаполнения.ShowError);
		
	КонецЦикла;
	
	ДобавитьОписаниеОбщихРеквизитовСправочника(ШаблонОписания, СправочникБД, МетаданныеИБ, ТекСоединениеВИБ, Кэш);
			
	Если СправочникБД.Owners.Count()>0 Тогда
		
		Для Каждого ТекВладелец ИЗ СправочникБД.Owners Цикл 
			
			СтрТипЗначения = ПолучитьРабочееПредставлениеТипа(ТекВладелец.FullName());
			
			СтрокаВладелец                           = ШаблонОписания.Владельцы.Добавить();
			СтрокаВладелец.Имя           			 = ТекВладелец.Name;
			СтрокаВладелец.Синоним           		 = ТекВладелец.Synonym;
			СтрокаВладелец.ТипДанных	             = СтрТипЗначения;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПолучитьПредопределенныеНаборыСвойств("Справочник",ШаблонОписания,МетаданныеИБ,ТекСоединениеВИБ,Кэш);
	
	Возврат ШаблонОписания;
	
КонецФункции // СтруктураОписанияСправочника8х() 

Процедура ПолучитьПредопределенныеНаборыСвойств(ТипОбъектаМетаданных,ШаблонОписания,МетаданныеИБ,ТекСоединениеВИБ,Кэш=Неопределено)
	
	Если МетаданныеИБ.Catalogs.Найти("НаборыДополнительныхРеквизитовИСведений")=Неопределено
		ИЛИ ИдентификацияПродуктаУХКлиентСервер.ВерсияУправлениеХолдингом()="3.1" Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НаборСвойств=Неопределено;
	ИмяНабора=ТипОбъектаМетаданных+"_"+ШаблонОписания.ИмяОбъектаМетаданных;
	
	Попытка
		
		НаборСвойств= ТекСоединениеВИБ.Catalogs["НаборыДополнительныхРеквизитовИСведений"][ИмяНабора];
		
	Исключение
		
		Запрос=ТекСоединениеВИБ.NewObject("Запрос");
		Запрос.Текст="ВЫБРАТЬ
		|	НаборыДополнительныхРеквизитовИСведений.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
		|ГДЕ
		|	НаборыДополнительныхРеквизитовИСведений.ИмяПредопределенногоНабора = &ИмяНабора";
		
		Запрос.УстановитьПараметр("ИмяНабора",ИмяНабора);
		
		Результат=Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			НаборСвойств=Результат.Ссылка;
			
		КонецЕсли;
		
	КонецПопытки;
	
	Если НаборСвойств=Неопределено Тогда
		
		Возврат;
		
	КонецЕсли;
	
	НоваяСтрока=ШаблонОписания.НаборыРеквизитовИСведений.Добавить();
	НоваяСтрока.Набор=ИмяНабора;
	НоваяСтрока.Предопределенный=Истина;
	
	Запрос=ТекСоединениеВИБ.NewObject("Запрос");
	Запрос.Текст="ВЫБРАТЬ
	|	НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения.(
	|		Свойство.Имя КАК Имя,
	|		Свойство.Наименование КАК Наименование,
	|		Свойство.ТипЗначения КАК ТипЗначения,
	|		ПометкаУдаления КАК ПометкаУдаления
	|	) КАК ДополнительныеСведения,
	|	НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты.(
	|		Свойство.Имя КАК Имя,
	|		Свойство.Наименование КАК Наименование,
	|		Свойство.ТипЗначения КАК ТипЗначения,
	|		ПометкаУдаления КАК ПометкаУдаления,
	|		Свойство.ЗаполнятьОбязательно КАК ЗаполнятьОбязательно
	|	) КАК ДополнительныеРеквизиты
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК НаборыДополнительныхРеквизитовИСведений
	|ГДЕ
	|	НаборыДополнительныхРеквизитовИСведений.Ссылка = &НаборСвойств";
	
	Запрос.УстановитьПараметр("НаборСвойств",НаборСвойств);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		ДополнительныеРеквизиты	= Результат.ДополнительныеРеквизиты.Выгрузить();
		ДополнительныеСведения	= Результат.ДополнительныеСведения.Выгрузить();
		
		Для Каждого Строка ИЗ ДополнительныеРеквизиты Цикл
			
			НоваяСтрока=ШаблонОписания.ДополнительныеРеквизиты.Добавить();
			НоваяСтрока.Имя=Строка.Имя;
			НоваяСтрока.Синоним=Строка.Наименование;
			НоваяСтрока.Обязательный=Строка.ЗаполнятьОбязательно;
			НоваяСтрока.ПометкаУдаления=Строка.ПометкаУдаления;
			НоваяСтрока.Набор=ИмяНабора;
			
			ОписаниеТипаРеквизита = ОписаниеТипаДанных(ТекСоединениеВИБ, Строка.ТипЗначения, Кэш);
			
			НоваяСтрока.ТипДанных = ОписаниеТипаРеквизита.ТипДанных;
			НоваяСтрока.ОписаниеПримитивногоТипа = ОписаниеТипаРеквизита.ОписаниеПримитивногоТипа;
			
		КонецЦикла;
		
		Для Каждого Строка ИЗ ДополнительныеСведения Цикл
			
			НоваяСтрока=ШаблонОписания.ДополнительныеСведения.Добавить();
			НоваяСтрока.Имя=Строка.Имя;
			НоваяСтрока.Синоним=Строка.Наименование;
			НоваяСтрока.ПометкаУдаления=Строка.ПометкаУдаления;
			НоваяСтрока.Набор=ИмяНабора;
			
			ОписаниеТипаРеквизита = ОписаниеТипаДанных(ТекСоединениеВИБ, Строка.ТипЗначения, Кэш);
			
			НоваяСтрока.ТипДанных = ОписаниеТипаРеквизита.ТипДанных;
			НоваяСтрока.ОписаниеПримитивногоТипа = ОписаниеТипаРеквизита.ОписаниеПримитивногоТипа;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ПолучитьПредопределенныеНаборыСвойств() 


#КонецОбласти

#Область ТабличныеЧасти

Функция ОписаниеТипаДанных(ТекСоединениеВИБ, ОписаниеТипа, Кэш = Неопределено)
	
	Результат = Неопределено;
	Ресурс = "ОписаниеТипаДанных";
	Если РаботаСОбъектамиМетаданныхУХ.ПолучитьЗначениеИзКэша(Кэш, Ресурс, ОписаниеТипа, Результат) Тогда
		Возврат Результат;
	КонецЕсли;

	Результат = Новый Структура("ТипДанных, ОписаниеПримитивногоТипа");
	Результат.ТипДанных = ПолучитьСтрокуТиповДанныхБД(ТекСоединениеВИБ, ОписаниеТипа, Кэш);
	
	ПримитивныйТип = ПолучитьОписаниеПримитивногоТипаИзБД(ТекСоединениеВИБ, ОписаниеТипа, Кэш);
	Если ПримитивныйТип <> Неопределено Тогда	
		Результат.ОписаниеПримитивногоТипа = ПолучитьСтрокуПримитивныхТипов(ПримитивныйТип);	
	КонецЕсли;

	РаботаСОбъектамиМетаданныхУХ.СохранитьЗначениеВКэш(Кэш, Ресурс, ОписаниеТипа, Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьМассивСтруктурТабличныхЧастей1CПредприятие8х(ДанныеОбъектаВладельцаТЧ, ТекСоединениеВИБ, Кэш = Неопределено) Экспорт
	
	МассивТЧ = Новый Массив;
	
	МетаданныеВладельцаТЧ = ТекСоединениеВИБ.Metadata[ДанныеОбъектаВладельцаТЧ.ТипОбъектаМетаданных][ДанныеОбъектаВладельцаТЧ.ИмяОбъектаМетаданных];
	
	Для Каждого МетаданныеТабличнаяЧасть Из МетаданныеВладельцаТЧ.ТабличныеЧасти Цикл
		
		РеквизитыТЧ = Новый Массив;		
		СтруктураТЧ = Новый Структура("Имя,Представление,Реквизиты", МетаданныеТабличнаяЧасть.Имя, МетаданныеТабличнаяЧасть.Синоним, РеквизитыТЧ);
		МассивТЧ.Добавить(СтруктураТЧ);
		
		РеквизитыТЧ.Добавить(
			Новый Структура("Имя, Представление, Тип, ОписаниеПримитивногоТипа", 
							"Ссылка", "Ссылка", "УникальныйИдентификатор", ""));
	
		Для Каждого МетаданыеРеквизит Из МетаданныеТабличнаяЧасть.Реквизиты Цикл
			
			ОписаниеТипаДанных = ОписаниеТипаДанных(ТекСоединениеВИБ, МетаданыеРеквизит.Тип, Кэш);
			
			РеквизитыТЧ.Добавить(Новый Структура(
				"Имя, Представление, Тип, ОписаниеПримитивногоТипа", 
				МетаданыеРеквизит.Имя, 
				МетаданыеРеквизит.Синоним, 
				ОписаниеТипаДанных.ТипДанных,
				ОписаниеТипаДанных.ОписаниеПримитивногоТипа));		
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат МассивТЧ;
	
КонецФункции

#КонецОбласти

#Область Документы

Функция СтруктураОписанияДокумента8х(ШаблонОписания, ТекСоединениеВИБ, Кэш = Неопределено) Экспорт
		
	МетаданныеИБ=ТекСоединениеВИБ.Metadata;
	
	Если МетаданныеИБ.Documents.Найти(ШаблонОписания.ИмяОбъектаМетаданных)<>Неопределено Тогда
		
		ДокументБД = МетаданныеИБ.Documents[ШаблонОписания.ИмяОбъектаМетаданных];
		
	Иначе	
		
		ШаблонОписания.Вставить("ТекстОшибки",СтрШаблон(Нстр("ru = 'Для документа %1 не найдено соответствие в метаданных'"), 
			ШаблонОписания.ИмяОбъектаМетаданных));			
		Возврат ШаблонОписания;
		
	КонецЕсли;
	
	ШаблонОписания.Синоним=ДокументБД.Presentation();
	
	СтрокаРеквизитов = ШаблонОписания.Реквизиты.Добавить(); // Добавим ссылку
	СтрокаРеквизитов.Имя = "Ссылка";
	СтрокаРеквизитов.Синоним = "Ссылка";
	СтрокаРеквизитов.ТипДанных = "УникальныйИдентификатор";
	
	ТипКода = ?(ДокументБД.NumberType = МетаданныеИБ.ObjectProperties.DocumentNumberType.String, "Строка", "Число");
	СтрокаРеквизитов = ШаблонОписания.Реквизиты.Добавить(); // Добавим синхронизацию по коду;;
	СтрокаРеквизитов.Имя="Номер";
	СтрокаРеквизитов.Синоним="Номер";
	СтрокаРеквизитов.ТипДанных = ТипКода;
	СтрокаРеквизитов.ОписаниеПримитивногоТипа=ТипКода+"("+ДокументБД.NumberLength+")";
	
	СтрокаРеквизитов = ШаблонОписания.Реквизиты.Добавить(); // Добавим синхронизацию по коду;;
	СтрокаРеквизитов.Имя="Дата";
	СтрокаРеквизитов.Синоним="Дата";
	СтрокаРеквизитов.ТипДанных = "Дата";
	СтрокаРеквизитов.ОписаниеПримитивногоТипа="Дата"+"("+ЧастиДаты.ДатаВремя+")";
		
	Для Каждого Реквизит Из ДокументБД.Attributes Цикл
		
		ОписаниеТипаДанных = ОписаниеТипаДанных(ТекСоединениеВИБ, Реквизит.Type, Кэш);
		
		СтрокаРеквизитов = ШаблонОписания.Реквизиты.Добавить();
		СтрокаРеквизитов.Имя = Реквизит.Name;
		СтрокаРеквизитов.Синоним = Реквизит.Synonym;
		СтрокаРеквизитов.ТипДанных = ОписаниеТипаДанных.ТипДанных;
		СтрокаРеквизитов.ОписаниеПримитивногоТипа = ОписаниеТипаДанных.ОписаниеПримитивногоТипа;
				
	КонецЦикла;
		
	Возврат ШаблонОписания;
	
КонецФункции // СтруктураОписанияДокумента8х()

#КонецОбласти

#Область ПланыВидовХарактеристик

Функция СтруктураОписанияПланаВидовХарактеристик8х(ШаблонОписания, ТекСоединениеВИБ, Кэш = Неопределено) Экспорт
		
	МетаданныеИБ=ТекСоединениеВИБ.Metadata;
	
	Если МетаданныеИБ.ChartsOfCharacteristicTypes.Найти(ШаблонОписания.ИмяОбъектаМетаданных)<>Неопределено Тогда
		
		ПланВидовХарактеристикБД = МетаданныеИБ.ChartsOfCharacteristicTypes[ШаблонОписания.ИмяОбъектаМетаданных];
		
	Иначе	
		
		ШаблонОписания.Вставить("ТекстОшибки",СтрШаблон(Нстр("ru = 'Для плана видов характеристик %1 не найдено соответствие в метаданных'"), 
			ШаблонОписания.ИмяОбъектаМетаданных));			
		Возврат ШаблонОписания;
		
	КонецЕсли;
	
	ШаблонОписания.Синоним=ПланВидовХарактеристикБД.Presentation();
	
	Синоним=ПланВидовХарактеристикБД.Presentation();
	ШаблонОписания.ИерархическийСправочник=ПланВидовХарактеристикБД.Hierarchical;
		
	СтрокаРеквизитов = ШаблонОписания.Реквизиты.Добавить(); // Добавим ссылку
	СтрокаРеквизитов.Имя = "Ссылка";
	СтрокаРеквизитов.Синоним = "Ссылка";
	СтрокаРеквизитов.ТипДанных = "УникальныйИдентификатор";
	
	СтрокаРеквизитов.Использование = "ДляГруппыИЭлемента";
	
	// Отдельно добавим код и наименование.
	Если ПланВидовХарактеристикБД.CodeLength <> 0 Тогда
		
		СтрокаРеквизитов = ШаблонОписания.Реквизиты.Добавить(); // Добавим синхронизацию по коду;;
		СтрокаРеквизитов.Имя="Код";
		СтрокаРеквизитов.Синоним="Код";
		СтрокаРеквизитов.ТипДанных = "Строка";
		СтрокаРеквизитов.ОписаниеПримитивногоТипа="Строка("+ПланВидовХарактеристикБД.CodeLength+")";
				
		СтрокаРеквизитов.Использование="ДляГруппыИЭлемента";
		
	КонецЕсли;
	
	Если ПланВидовХарактеристикБД.DescriptionLength <> 0 Тогда
		
		СтрокаРеквизитов = ШаблонОписания.Реквизиты.Добавить(); // Добавим синхронизацию по коду;;
		СтрокаРеквизитов.Имя="Наименование";
		СтрокаРеквизитов.Синоним="Наименование";
		СтрокаРеквизитов.ТипДанных = "Строка";
		СтрокаРеквизитов.ОписаниеПримитивногоТипа="Строка("+ПланВидовХарактеристикБД.DescriptionLength+")";
				
		СтрокаРеквизитов.Использование="ДляГруппыИЭлемента";
			
	КонецЕсли;
	
	Для Каждого Реквизит Из ПланВидовХарактеристикБД.Attributes Цикл
		
		ОписаниеТипаРеквизита = ОписаниеТипаДанных(ТекСоединениеВИБ, Реквизит.Type, Кэш);
		
		СтрокаРеквизитов = ШаблонОписания.Реквизиты.Добавить();
		СтрокаРеквизитов.Имя = Реквизит.Name;
		СтрокаРеквизитов.Синоним = Реквизит.Synonym;
		СтрокаРеквизитов.ТипДанных = ОписаниеТипаРеквизита.ТипДанных;
		СтрокаРеквизитов.ОписаниеПримитивногоТипа = ОписаниеТипаРеквизита.ОписаниеПримитивногоТипа;
				
		Если ШаблонОписания.ИерархическийСправочник Тогда
			
			Если Реквизит.Use = МетаданныеИБ.ObjectProperties.AttributeUse.ForFolder Тогда
				
				СтрокаРеквизитов.Использование = "ДляГруппы";
				
			ИначеЕсли Реквизит.Use = МетаданныеИБ.ObjectProperties.AttributeUse.ForItem Тогда
				
				СтрокаРеквизитов.Использование = "ДляЭлемента";
				
			Иначе
				
				СтрокаРеквизитов.Использование = "ДляГруппыИЭлемента";
				
			КонецЕсли;
			
		Иначе
			
			СтрокаРеквизитов.Использование="ДляЭлемента";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого Реквизит Из МетаданныеИБ.CommonAttributes Цикл
		
		Если Реквизит.Имя = "ОбластьДанныхОсновныеДанные" 
			ИЛИ Реквизит.Имя="ОбластьДанныхВспомогательныеДанные"
			ИЛИ Реквизит.Имя="DataAreaMainData" 
			ИЛИ Реквизит.Имя="DataAreaAuxiliaryData" Тогда
			
			Продолжить;	
			
		КонецЕсли;
		
		ИспользованиеРеквизита = Реквизит.Content.Find(ПланВидовХарактеристикБД);
		АвтоИспользование = (Реквизит.AutoUse = МетаданныеИБ.ObjectProperties.CommonAttributeAutoUse.Use);
		
		Если ИспользованиеРеквизита.Use = МетаданныеИБ.ObjectProperties.CommonAttributeUse.DontUse Тогда
			Продолжить;				
		ИначеЕсли НЕ АвтоИспользование И (ИспользованиеРеквизита.Use = МетаданныеИБ.ObjectProperties.CommonAttributeUse.Auto) Тогда 
			Продолжить;
		КонецЕсли;
		
		ОписаниеТипаРеквизита = ОписаниеТипаДанных(ТекСоединениеВИБ, Реквизит.Type, Кэш);
					
		СтрокаРеквизитов = ШаблонОписания.Реквизиты.Добавить();
		СтрокаРеквизитов.Имя = Реквизит.Name;
		СтрокаРеквизитов.Синоним = Реквизит.Synonym;
		СтрокаРеквизитов.ТипДанных = ОписаниеТипаРеквизита.ТипДанных;
		СтрокаРеквизитов.ОписаниеПримитивногоТипа = ОписаниеТипаРеквизита.ОписаниеПримитивногоТипа;
					
		СтрокаРеквизитов.ОбщийРеквизит = Истина;
		
		СтрокаРеквизитов.Использование="ДляЭлемента";
		
	КонецЦикла;
	
	ШаблонОписания.ТипЗначения = ПолучитьСтрокуТиповДанныхБД(ТекСоединениеВИБ, ПланВидовХарактеристикБД.Type, Кэш);

	ПолучитьПредопределенныеНаборыСвойств("ПланВидовХарактеристик",ШаблонОписания,МетаданныеИБ,ТекСоединениеВИБ,Кэш);
	
	Возврат ШаблонОписания;
	
КонецФункции // СтруктураОписанияДокумента8х()

#КонецОбласти

#Область Перечисления

Функция СтруктураОписанияПеречисления8х(ШаблонОписания, ТекСоединениеВИБ) Экспорт
		
	МетаданныеИБ=ТекСоединениеВИБ.MetaData;
	
	Если МетаданныеИБ.Enums.Найти(ШаблонОписания.ИмяОбъектаМетаданных)<>Неопределено Тогда
		
		СправочникБД = МетаданныеИБ.Enums[ШаблонОписания.ИмяОбъектаМетаданных];
		
	Иначе	
		
		ШаблонОписания.Вставить("ТекстОшибки",СтрШаблон(Нстр("ru = 'Для перечисления %1 не найдено соответствие в метаданных'"), 
			ШаблонОписания.ИмяОбъектаМетаданных));			
		Возврат ШаблонОписания;
		
	КонецЕсли;
	
	ШаблонОписания.Синоним=СправочникБД.Синоним;
	
	Для Каждого СтрПеречисление ИЗ СправочникБД.ЗначенияПеречисления Цикл
		
		НоваяСтрока=ШаблонОписания.Реквизиты.Добавить();
		
		НоваяСтрока.Имя=СтрПеречисление.Имя;
		НоваяСтрока.Синоним=СтрПеречисление.Синоним;
		
	КонецЦикла;
	
	Возврат ШаблонОписания;
	
КонецФункции // СтруктураОписанияПеречисления8х()

#КонецОбласти

#Область РегистрыНакопления

Функция СтруктураОписанияРегистраНакопления8х(ШаблонОписания, ТекСоединениеВИБ, Кэш = Неопределено) Экспорт
		
	МетаданныеИБ=ТекСоединениеВИБ.MetaData;
	
	Если МетаданныеИБ.AccumulationRegisters.Найти(ШаблонОписания.ИмяОбъектаМетаданных)<>Неопределено Тогда
		
		РегистрБД = МетаданныеИБ.AccumulationRegisters[ШаблонОписания.ИмяОбъектаМетаданных];
		
	Иначе	
		
		ШаблонОписания.Вставить("ТекстОшибки",СтрШаблон(Нстр("ru = 'Для регистра накопления %1 не найдено соответствие в метаданных'"), 
			ШаблонОписания.ИмяОбъектаМетаданных));			
		Возврат ШаблонОписания;
		
	КонецЕсли;
	
	ШаблонОписания.Синоним=РегистрБД.Синоним;
	ШаблонОписания.ВидРегистра = ?(РегистрБД.RegisterType = МетаданныеИБ.ObjectProperties.AccumulationRegisterType.Balance
														, "Остатки", "Обороты");
	Для Каждого Ресурс ИЗ РегистрБД.Ресурсы Цикл
		
		НоваяСтрока=ШаблонОписания.Ресурсы.Добавить();
		НоваяСтрока.Имя=Ресурс.Имя;
		НоваяСтрока.Синоним=Ресурс.Синоним;
		
	КонецЦикла;
	
	Для Каждого Измерение Из РегистрБД.Dimensions Цикл
		
		СтрокаПоказателей                 = ШаблонОписания.Измерения.Добавить();
		СтрокаПоказателей.Имя	          = Измерение.Name;
		СтрокаПоказателей.Синоним		  = Измерение.Synonym;
		
		СтрокаПоказателей.ТипДанных = ПолучитьСтрокуТиповДанныхБД(ТекСоединениеВИБ, Измерение.Type, Кэш);
		
	КонецЦикла;
	
	Для Каждого Реквизит ИЗ РегистрБД.Attributes Цикл
		
		СтрокаРеквизит=ШаблонОписания.Реквизиты.Добавить();
		СтрокаРеквизит.Имя	        = Реквизит.Name;
		СтрокаРеквизит.Синоним		= Реквизит.Synonym;
		СтрокаРеквизит.ТипДанных 	= ПолучитьСтрокуТиповДанныхБД(ТекСоединениеВИБ, Реквизит.Type, Кэш);
		
	КонецЦикла;
	
	ШаблонОписания.Регистраторы = ПолучитьСтрокуТиповДанныхБД(ТекСоединениеВИБ, 
		РегистрБД.СтандартныеРеквизиты.Регистратор.Type, Кэш);
	
	Возврат ШаблонОписания;
	
КонецФункции // СтруктураОписанияРегистраНакопления8х()

#КонецОбласти

#Область РегистрыБухгалтерии

Функция СтруктураОписанияРегистраБухгалтерии8х(ШаблонОписания, ТекСоединениеВИБ, Кэш = Неопределено) Экспорт
		
	МетаданныеИБ=ТекСоединениеВИБ.MetaData;
	
	Если МетаданныеИБ.AccountingRegisters.Найти(ШаблонОписания.ИмяОбъектаМетаданных)<>Неопределено Тогда
		
		РегистрБД = МетаданныеИБ.AccountingRegisters[ШаблонОписания.ИмяОбъектаМетаданных];
		
	Иначе	
		
		ШаблонОписания.Вставить("ТекстОшибки",СтрШаблон(Нстр("ru = 'Для регистра бухгалтерии %1 не найдено соответствие в метаданных'"), 
			ШаблонОписания.ИмяОбъектаМетаданных));			
		Возврат ШаблонОписания;
		
	КонецЕсли;
	
	ШаблонОписания.Синоним=РегистрБД.Синоним;
	ШаблонОписания.Корреспонденция=РегистрБД.Correspondence;
	ШаблонОписания.Вставить("ИмяПланаСчетов",РегистрБД.ChartOfAccounts.Name);
	
	Для Каждого Ресурс ИЗ РегистрБД.Ресурсы Цикл
		
		НоваяСтрока=ШаблонОписания.Ресурсы.Добавить();
		НоваяСтрока.Имя=Ресурс.Имя;
		НоваяСтрока.Синоним=Ресурс.Синоним;
		НоваяСтрока.Балансовый=Ресурс.Балансовый;
		
		Если НЕ Ресурс.AccountingFlag=Неопределено Тогда
			НоваяСтрока.ПризнакУчета=Ресурс.AccountingFlag.Name;
		КонецЕсли;
		
		Если НЕ Ресурс.ExtDimensionAccountingFlag=Неопределено Тогда
			НоваяСтрока.ПризнакУчетаСубконто=Ресурс.ExtDimensionAccountingFlag.Name;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Измерение Из РегистрБД.Dimensions Цикл
		
		СтрокаПоказателей                 = ШаблонОписания.Измерения.Добавить();
		СтрокаПоказателей.Имя	          = Измерение.Name;
		СтрокаПоказателей.Синоним		  = Измерение.Synonym;
		СтрокаПоказателей.Балансовый	  = Измерение.Balance;
		
		Если НЕ Измерение.AccountingFlag=Неопределено Тогда	
			СтрокаПоказателей.ПризнакУчета	  = Измерение.AccountingFlag.Name;
		КонецЕсли;
		
		СтрокаПоказателей.ТипДанных = ПолучитьСтрокуТиповДанныхБД(ТекСоединениеВИБ, Измерение.Type, Кэш);
		
	КонецЦикла;
	
	Для Каждого Реквизит ИЗ РегистрБД.Attributes Цикл
		
		СтрокаРеквизит=ШаблонОписания.Реквизиты.Добавить();
		СтрокаРеквизит.Имя	        = Реквизит.Name;
		СтрокаРеквизит.Синоним		= Реквизит.Synonym;
		СтрокаРеквизит.ТипДанных 	= ПолучитьСтрокуТиповДанныхБД(ТекСоединениеВИБ, Реквизит.Type, Кэш);
		
	КонецЦикла;
	
	ШаблонОписания.Регистраторы = ПолучитьСтрокуТиповДанныхБД(ТекСоединениеВИБ, 
		РегистрБД.СтандартныеРеквизиты.Регистратор.Тип, Кэш);
	
	Возврат ШаблонОписания;
	
КонецФункции // СтруктураОписанияРегистраБухгалтерии8х()

#КонецОбласти

#Область ПланыСчетов

Функция СтруктураОписанияПланаСчетов8х(ШаблонОписания, ТекСоединениеВИБ, Кэш = Неопределено) Экспорт
		
	МетаданныеИБ=ТекСоединениеВИБ.MetaData;
	
	Если МетаданныеИБ.ChartsOfAccounts.Найти(ШаблонОписания.ИмяОбъектаМетаданных)<>Неопределено Тогда
		
		ПланСчетовБД = МетаданныеИБ.ChartsOfAccounts[ШаблонОписания.ИмяОбъектаМетаданных];
		
	Иначе	
		
		ШаблонОписания.Вставить("ТекстОшибки",СтрШаблон(Нстр("ru = 'Для плана счетов %1 не найдено соответствие в метаданных'"), 
			ШаблонОписания.ИмяОбъектаМетаданных));			
		Возврат ШаблонОписания;
		
	КонецЕсли;
	
	ПризнакиУчета="";
	ПризнакиУчетаСубконто="";
	ШаблонОписания.ПланСчетовМетаданные=ПланСчетовБД.Name;
	ШаблонОписания.Вставить("ПланСчетовБД",ПланСчетовБД);
	
	Для Каждого ПризнакУчета ИЗ ПланСчетовБД.ПризнакиУчета Цикл
		
		ПризнакиУчета=ПризнакиУчета+";"+ПризнакУчета.Имя;
		
	КонецЦикла;
	
	Для Каждого ПризнакУчетаСубконто ИЗ ПланСчетовБД.ПризнакиУчетаСубконто Цикл
		
		ПризнакиУчетаСубконто=ПризнакиУчетаСубконто+";"+ПризнакУчетаСубконто.Имя;
		
	КонецЦикла;
	
	ШаблонОписания.ПризнакиУчета=Сред(ПризнакиУчета,2);
	ШаблонОписания.ПризнакиУчетаСубконто=Сред(ПризнакиУчетаСубконто,2);
	
	ШаблонОписания.МаксимальноеКоличествоСубконто=ПланСчетовБД.МаксКоличествоСубконто;
	ШаблонОписания.ДлинаКода=ПланСчетовБД.ДлинаКода;
	
	Если НЕ ПланСчетовБД.ВидыСубконто=Неопределено Тогда 
		
		ШаблонОписания.ВидыСубконто=ПланСчетовБД.ВидыСубконто.Имя;
		
	КонецЕсли;
	
	Для Каждого Реквизит Из ПланСчетовБД.Attributes Цикл
		
		ОписаниеТипаРеквизита = ОписаниеТипаДанных(ТекСоединениеВИБ, Реквизит.Type, Кэш);
		
		СтрокаРеквизитов = ШаблонОписания.Реквизиты.Добавить();
		СтрокаРеквизитов.Имя = Реквизит.Name;
		СтрокаРеквизитов.Синоним = Реквизит.Synonym;
		СтрокаРеквизитов.ТипДанных = ОписаниеТипаРеквизита.ТипДанных;
		СтрокаРеквизитов.ОписаниеПримитивногоТипа = ОписаниеТипаРеквизита.ОписаниеПримитивногоТипа;
						
	КонецЦикла;
	
	///////// Заполняем таблицу счетов
	
	МассивПризнаковУчета = ?(ПустаяСтрока(ШаблонОписания.ПризнакиУчета), 
		Новый Массив, СтрРазделить(ШаблонОписания.ПризнакиУчета, ";", Истина));
		
	МассивПризнаковУчетаСубконто=?(ПустаяСтрока(ШаблонОписания.ПризнакиУчетаСубконто),
		Новый Массив, СтрРазделить(ШаблонОписания.ПризнакиУчетаСубконто, ";", Истина));
	
	МассивРеквизитовДляМСФО=Новый Массив;
	МассивРеквизитовДляМСФО.Добавить("РазделПланаСчетов");
	МассивРеквизитовДляМСФО.Добавить("ВидКурса");
	МассивРеквизитовДляМСФО.Добавить("ПересчитыватьВалютнуюСумму");
	МассивРеквизитовДляМСФО.Добавить("ВидОтложенногоНалога");
	МассивРеквизитовДляМСФО.Добавить("Наименование1");
	МассивРеквизитовДляМСФО.Добавить("Наименование2");
	
	ТекстЗапроса="ВЫБРАТЬ ПланСчетов_МД.Код КАК Код, 
	|ПланСчетов_МД.Наименование КАК Наименование,
	|ПланСчетов_МД.ПометкаУдаления КАК ПометкаУдаления,
	|ПланСчетов_МД.Родитель.Код КАК Родитель,";
	
	Для Каждого СтрРеквизит ИЗ МассивРеквизитовДляМСФО Цикл
		
		Если НЕ ПланСчетовБД.Реквизиты.Найти(СтрРеквизит)=Неопределено Тогда
			
			ТекстЗапроса=ТекстЗапроса+"
			|ПланСчетов_МД."+СтрРеквизит+",";
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПланСчетовБД.Реквизиты.Найти("ЗапретитьИспользоватьВПроводках")=Неопределено Тогда
		
		ТекстЗапроса=ТекстЗапроса+"
		|ПланСчетов_МД.ЗапретитьИспользоватьВПроводках,";
		
	КонецЕсли;
	
	Если ШаблонОписания.ТекущаяИБ Тогда
		
		Запрос = Новый Запрос;
		ТекстЗапроса=ТекстЗапроса+"
		|ПланСчетов_МД.Ссылка КАК СчетСсылка,
		|ПланСчетов_МД.Ссылка.Родитель КАК РодительСсылка,";
		
		Если НЕ ПланСчетовБД.Реквизиты.Найти("СчетИсточник")=Неопределено Тогда
			
			ТекстЗапроса=ТекстЗапроса+"
			|ПланСчетов_МД.СчетИсточник КАК СчетИсточник,";
			
		КонецЕсли;
		
	Иначе
		
		Запрос = ТекСоединениеВИБ.NewObject("Запрос");
		
	КонецЕсли;
	
	Для Каждого ПризнакУчета ИЗ МассивПризнаковУчета Цикл
		ТекстЗапроса=ТекстЗапроса+"
		|ПланСчетов_МД."+ПризнакУчета+",";
	КонецЦикла;
	
	ТекстЗапроса=ТекстЗапроса+"	
	|ВЫБОР
	|КОГДА ПланСчетов_МД.Вид = ЗНАЧЕНИЕ(ВидСчета.Активный)
	|	ТОГДА 1
	|КОГДА ПланСчетов_МД.Вид = ЗНАЧЕНИЕ(ВидСчета.Пассивный)
	|	ТОГДА 2
	|ИНАЧЕ 3
	|КОНЕЦ КАК Активность,";
	
	Если НЕ ПланСчетовБД.ExtDimensionTypes=Неопределено Тогда
		
		ТекстЗапроса=ТекстЗапроса+"
		| ПланСчетов_МД.ВидыСубконто.(
		|   НомерСтроки КАК Номер,
		|	ВидСубконто.Представление КАК ВидСубконто,";
		
		Если ШаблонОписания.ТекущаяИБ Тогда
			ТекстЗапроса=ТекстЗапроса+"
			|	ВидСубконто.Ссылка КАК ВидСубконтоСсылка,";
		КонецЕсли;
		
		ТекстЗапроса=ТекстЗапроса+"
		|   ТолькоОбороты КАК ТолькоОбороты,";
		
		Для Каждого ПризнакУчетаСубконто ИЗ МассивПризнаковУчетаСубконто Цикл
			
			Если Не ПустаяСтрока(ПризнакУчетаСубконто) Тогда
				
				ТекстЗапроса=ТекстЗапроса+"
				|"+ПризнакУчетаСубконто+" КАК "+ПризнакУчетаСубконто+",";
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстЗапроса=ТекстЗапроса+"
		|ВидСубконто.ТипЗначения КАК ТипЗначения	
		|   ) КАК ВидыСубконто,";
		
	КонецЕсли;
	
	ТекстЗапроса=ТекстЗапроса+"
	|ПланСчетов_МД.Забалансовый КАК Забалансовый
	| ИЗ ПланСчетов." + ШаблонОписания.ИмяОбъектаМетаданных + " КАК ПланСчетов_МД";
	
	Если НЕ ПланСчетовБД.Реквизиты.Найти("ПланСчетов")=Неопределено Тогда
		
		ТекстЗапроса=ТекстЗапроса+"
		|ГДЕ ПланСчетов_МД.ПланСчетов.Наименование=&Наименование";
		Запрос.SetParameter("Наименование",ШаблонОписания.ПланСчетовНаименование);
		
	ИначеЕсли НЕ ПланСчетовБД.Реквизиты.Найти("ПланСчетовБД")=Неопределено Тогда
		
		ТекстЗапроса=ТекстЗапроса+"
		|ГДЕ ПланСчетов_МД.ПланСчетовБД.Наименование=&Наименование";
		Запрос.SetParameter("Наименование",ШаблонОписания.ПланСчетовНаименование);
		
	КонецЕсли;
			
	ТекстЗапроса=ТекстЗапроса+"
	| УПОРЯДОЧИТЬ ПО ПланСчетов_МД.Код";
	
	Запрос.Текст=ТекстЗапроса;
	
	ТаблицаБД = Запрос.Execute().Unload();
	
	Для Каждого СтрокаБД Из ТаблицаБД Цикл
		
		СтрокаПланаСчетов               = ШаблонОписания.мПланСчетов.Добавить();
		
		ЗаполнитьЗначенияСвойств(СтрокаПланаСчетов,СтрокаБД,,"Код");
		СтрокаПланаСчетов.Код=СокрЛП(СтрокаБД.Код);
		
		Если СтрокаБД.Активность=1 Тогда
			СтрокаПланаСчетов.ВидСтрока="Активный";
		ИначеЕсли СтрокаБД.Активность=2 Тогда
			СтрокаПланаСчетов.ВидСтрока="Пассивный";
		ИначеЕсли СтрокаБД.Активность=3 Тогда
			СтрокаПланаСчетов.ВидСтрока="АктивноПассивный";
		КонецЕсли;
		
		ПризнакиУчетаСчета="";
		
		Для Каждого ПризнакУчета ИЗ МассивПризнаковУчета Цикл
			
			Если СтрокаБД[ПризнакУчета]=Истина Тогда
				
				ПризнакиУчетаСчета=ПризнакиУчетаСчета+";"+ПризнакУчета;
				
			КонецЕсли;
			
		КонецЦикла;
		
		СтрокаПланаСчетов.ПризнакиУчета=Сред(ПризнакиУчетаСчета,2);
		ТекТаблицаСубконто=ШаблонОписания.ТаблицаСубконто.СкопироватьКолонки();
		
		Если НЕ ПланСчетовБД.ExtDimensionTypes=Неопределено Тогда
			
			ВидыСубконтоБД = СтрокаБД.ВидыСубконто.Скопировать();
			ВидыСубконтоБД.Сортировать("Номер Возр");
			
			Для Каждого СтрВидСубконто ИЗ ВидыСубконтоБД Цикл
				
				НоваяСтрока=ТекТаблицаСубконто.Добавить();
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрВидСубконто);					
				ТекПризнакиУчетаСубконто="";
				
				Для Каждого ПризнакУчетаСубконто ИЗ МассивПризнаковУчетаСубконто Цикл
					
					Если СтрВидСубконто[ПризнакУчетаСубконто]=Истина Тогда
						
						Если ПризнакУчетаСубконто="ТолькоСальдо" Тогда
							
							НоваяСтрока.ТолькоСальдо=Истина;
							
						Иначе								
							
							ТекПризнакиУчетаСубконто=ТекПризнакиУчетаСубконто+";"+ПризнакУчетаСубконто;
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
				НоваяСтрока.ПризнакиУчетаСубконто=Сред(ТекПризнакиУчетаСубконто,2);
				НоваяСтрока.ТипДанных = ПолучитьСтрокуТиповДанныхБД(ТекСоединениеВИБ, СтрВидСубконто.ТипЗначения, Кэш);
				
			КонецЦикла;
			
			СтрокаПланаСчетов.ВидыСубконто=ТекТаблицаСубконто;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ШаблонОписания;
	
КонецФункции // СтруктураОписанияПланаСчетов8х()

#КонецОбласти

#Область РегистрыСведений

Функция СтруктураОписанияРегистраСведений8х(ШаблонОписания, ТекСоединениеВИБ, Кэш = Неопределено) Экспорт
		
	МетаданныеИБ=ТекСоединениеВИБ.MetaData;
	
	Если МетаданныеИБ.InformationRegisters.Найти(ШаблонОписания.ИмяОбъектаМетаданных)<>Неопределено Тогда
		
		РегистрБД = МетаданныеИБ.InformationRegisters[ШаблонОписания.ИмяОбъектаМетаданных];
		
	Иначе	
		
		ШаблонОписания.Вставить("ТекстОшибки",СтрШаблон(Нстр("ru = 'Для регистра сведений %1 не найдено соответствие в метаданных'"), 
			ШаблонОписания.ИмяОбъектаМетаданных));			
		Возврат ШаблонОписания;
		
	КонецЕсли;
	
	ШаблонОписания.Синоним=РегистрБД.Синоним;
	Если РегистрБД.InformationRegisterPeriodicity=МетаданныеИБ.ObjectProperties.InformationRegisterPeriodicity.Year Тогда
		ШаблонОписания.Периодический=Истина;
		ШаблонОписания.Периодичность="В пределах года.";
	ИначеЕсли РегистрБД.InformationRegisterPeriodicity=МетаданныеИБ.ObjectProperties.InformationRegisterPeriodicity.Day Тогда
		ШаблонОписания.Периодический=Истина;
		ШаблонОписания.Периодичность="В пределах дня.";
	ИначеЕсли РегистрБД.InformationRegisterPeriodicity=МетаданныеИБ.ObjectProperties.InformationRegisterPeriodicity.Quarter Тогда
		ШаблонОписания.Периодический=Истина;
		ШаблонОписания.Периодичность="В пределах квартала.";
	ИначеЕсли РегистрБД.InformationRegisterPeriodicity=МетаданныеИБ.ObjectProperties.InformationRegisterPeriodicity.Month Тогда
		ШаблонОписания.Периодический=Истина;
		ШаблонОписания.Периодичность="В пределах месяца.";
	ИначеЕсли РегистрБД.InformationRegisterPeriodicity=МетаданныеИБ.ObjectProperties.InformationRegisterPeriodicity.RecorderPosition Тогда
		ШаблонОписания.Периодический=Истина;
		ШаблонОписания.Периодичность="По позиции регистратора.";
	ИначеЕсли РегистрБД.InformationRegisterPeriodicity=МетаданныеИБ.ObjectProperties.InformationRegisterPeriodicity.Second Тогда
		ШаблонОписания.Периодический=Истина;
		ШаблонОписания.Периодичность="В пределах одной секунды.";
	ИначеЕсли РегистрБД.InformationRegisterPeriodicity=МетаданныеИБ.ObjectProperties.InformationRegisterPeriodicity.Nonperiodical Тогда
		ШаблонОписания.Периодический=Ложь;
		ШаблонОписания.Периодичность="";
	КонецЕсли;
	
	Для Каждого Ресурс ИЗ РегистрБД.Ресурсы Цикл
		
		ОписаниеТипаРесурса = ОписаниеТипаДанных(ТекСоединениеВИБ, Ресурс.Type, Кэш);
		
		НоваяСтрока = ШаблонОписания.Ресурсы.Добавить();
		НоваяСтрока.Имя = Ресурс.Имя;
		НоваяСтрока.Синоним = Ресурс.Синоним;
		НоваяСтрока.ТипДанных = ОписаниеТипаРесурса.ТипДанных;
		НоваяСтрока.ОписаниеПримитивногоТипа = ОписаниеТипаРесурса.ОписаниеПримитивногоТипа;
			
	КонецЦикла;
	
	Для Каждого Измерение Из РегистрБД.Dimensions Цикл
		
		ОписаниеТипаИзмерение = ОписаниеТипаДанных(ТекСоединениеВИБ, Измерение.Type, Кэш);
		
		СтрокаПоказателей                 = ШаблонОписания.Измерения.Добавить();
		СтрокаПоказателей.Имя	          = Измерение.Name;
		СтрокаПоказателей.Синоним		  = Измерение.Synonym;
		СтрокаПоказателей.ТипДанных 	  = ОписаниеТипаИзмерение.ТипДанных;
		СтрокаПоказателей.ОписаниеПримитивногоТипа = ОписаниеТипаИзмерение.ОписаниеПримитивногоТипа;
				
	КонецЦикла;
	
	Для Каждого Реквизит ИЗ РегистрБД.Attributes Цикл
		
		ОписаниеТипаРеквизита = ОписаниеТипаДанных(ТекСоединениеВИБ, Реквизит.Type, Кэш);
		
		СтрокаРеквизит = ШаблонОписания.Реквизиты.Добавить();
		СтрокаРеквизит.Имя	        = Реквизит.Name;
		СтрокаРеквизит.Синоним		= Реквизит.Synonym;
		СтрокаРеквизит.ТипДанных 	= ОписаниеТипаРеквизита.ТипДанных;
		СтрокаРеквизит.ОписаниеПримитивногоТипа = ОписаниеТипаРеквизита.ОписаниеПримитивногоТипа;
		
	КонецЦикла;
	
	Если РегистрБД.WriteMode=МетаданныеИБ.ObjectProperties.RegisterWriteMode.RecorderSubordinate Тогда
		
		ШаблонОписания.Регистраторы = ПолучитьСтрокуТиповДанныхБД(ТекСоединениеВИБ, РегистрБД.СтандартныеРеквизиты.Регистратор.Тип, Кэш);
		
	КонецЕсли;
	
	Возврат ШаблонОписания;
	
КонецФункции // СтруктураОписанияРегистраНакопления8х()

#КонецОбласти

Функция ПолучитьОписаниеПримитивногоТипаИзБД(База, ОписаниеТиповБД, Кэш = Неопределено) Экспорт
	
	Если ТипЗнч(ОписаниеТиповБД) = Тип("ОписаниеТипов") Тогда // Используются данные текущей ИБ		
		Возврат ОписаниеТиповБД;		
	КонецЕсли;
	
	Результат = Неопределено;
	Ресурс = "ПолучитьОписаниеПримитивногоТипаИзБД";
	Если РаботаСОбъектамиМетаданныхУХ.ПолучитьЗначениеИзКэша(Кэш, Ресурс, ОписаниеТиповБД, Результат) Тогда
		 Возврат Результат;
	КонецЕсли;
	
	ПримитивныеXMLТипы = ПримитивныеXMLТипыБазы(База, Кэш);
		
	МассивТипов  = Новый Массив;
	Для Каждого Тип Из ОписаниеТиповБД.Типы() Цикл
		
		XMLType = ПолучитьXMLType(База, Тип);
		СтрокаТипа = СтрокаПримитивногоТипа(XMLType, ПримитивныеXMLТипы);
		Если ЗначениеЗаполнено(СтрокаТипа) Тогда
			МассивТипов.Добавить(Тип(СтрокаТипа));
		КонецЕсли;
				
	КонецЦикла;
	
	Если МассивТипов.Количество() > 0 Тогда
		
		ТК_Числа = Новый КвалификаторыЧисла(ОписаниеТиповБД.NumberQualifiers.Digits, 
		ОписаниеТиповБД.NumberQualifiers.FractionDigits, 
		?(ОписаниеТиповБД.NumberQualifiers.AllowedSign = База.AllowedSign.Any, ДопустимыйЗнак.Любой, ДопустимыйЗнак.Неотрицательный));
		
		ТК_Строки = Новый КвалификаторыСтроки(ОписаниеТиповБД.StringQualifiers.Length, 
		?(ОписаниеТиповБД.StringQualifiers.AllowedLength = База.AllowedLength.Variable, 
		ДопустимаяДлина.Переменная, 
		ДопустимаяДлина.Фиксированная));
		
		COM_DateFractions = ОписаниеТиповБД.DateQualifiers.DateFractions;
		
		Если COM_DateFractions = База.DateFractions.Date Тогда
			ДатаЧасть = ЧастиДаты.Дата;
		ИначеЕсли COM_DateFractions = База.DateFractions.Time Тогда
			ДатаЧасть = ЧастиДаты.Время;
		Иначе
			ДатаЧасть = ЧастиДаты.ДатаВремя;
		КонецЕсли;
		
		ТК_Даты  = Новый КвалификаторыДаты(ДатаЧасть);
		
		Результат = Новый ОписаниеТипов(МассивТипов, ТК_Числа, ТК_Строки, ТК_Даты);
		
	Иначе
		
		Результат = Неопределено;
		
	КонецЕсли;

	РаботаСОбъектамиМетаданныхУХ.СохранитьЗначениеВКэш(Кэш, Ресурс, ОписаниеТиповБД, Результат);
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтрокуПримитивныхТипов(ОписаниеТипов, Кэш = Неопределено) Экспорт
	
	СтрокаТип = "";
	ТипСтрока 	= Тип("Строка");
	ТипЧисло 	= Тип("Число");
	ТипБулево 	= Тип("Булево");
	ТипДата 	= Тип("Дата");
	
	Для Каждого Тип ИЗ ОписаниеТипов.Типы() Цикл
		
		Если Тип = ТипСтрока Тогда
			
			ДлинаСтроки = ОписаниеТипов.КвалификаторыСтроки.Длина;
			
			СтрокаТип = СтрокаТип + ";Строка(" + ?(ДлинаСтроки = 0, "0", Формат(ДлинаСтроки,"ЧГ=0")) + "," + 
				ОписаниеТипов.КвалификаторыСтроки.ДопустимаяДлина + ")";
			
		ИначеЕсли Тип = ТипЧисло Тогда
			
			СтрокаТип=СтрокаТип + ";Число(" + ОписаниеТипов.КвалификаторыЧисла.Разрядность + "," + 
				ОписаниеТипов.КвалификаторыЧисла.РазрядностьДробнойЧасти + "," + 
				ОписаниеТипов.КвалификаторыЧисла.ДопустимыйЗнак + ")";
			
		ИначеЕсли Тип = ТипБулево Тогда
			
			СтрокаТип = СтрокаТип + ";Булево";
			
		ИначеЕсли Тип = ТипДата Тогда
			
			СтрокаТип = СтрокаТип + ";Дата(" + ОписаниеТипов.КвалификаторыДаты.ЧастиДаты + ")";
			
		КонецЕсли;
		
	КонецЦикла;
				
	СтрокаТип = Сред(СтрокаТип, 2);
	Возврат СтрокаТип;
	
КонецФункции // ПолучитьСтрокуПримитивныхТипов()

Функция ПолучитьСтрокуТиповДанныхБД(ТекСоединениеВИБ, ОписаниеТиповБД, Кэш = Неопределено) Экспорт
	
	Результат = Неопределено;
	Ресурс = "ПолучитьСтрокуТиповДанныхБД";
	Если РаботаСОбъектамиМетаданныхУХ.ПолучитьЗначениеИзКэша(Кэш, Ресурс, ОписаниеТиповБД, Результат) Тогда
		Возврат Результат;
	КонецЕсли;
	
	МассивТиповВИБ = ОписаниеТиповБД.Types();
	СтрокаТипов="";
	СтрокаПримитивныхТипов="";
	
	Если МассивТиповВИБ.Количество()>1 Тогда
		
		ПримитивныйТип = ПолучитьОписаниеПримитивногоТипаИзБД(ТекСоединениеВИБ, ОписаниеТиповБД, Кэш);
		
		Если ПримитивныйТип <> Неопределено Тогда
			
			СтрокаПримитивныхТипов = ПолучитьСтрокуПримитивныхТипов(ПримитивныйТип);
			
		КонецЕсли;
		
	КонецЕсли;			
	
	Для Каждого Тип ИЗ МассивТиповВИБ Цикл
		
		// Проверим на примитивное значение типа
		
		ПримитивныйТип = ПреобразоватьТИПизВИБ(ТекСоединениеВИБ,Тип,Ложь,Кэш);
		
		Если ПримитивныйТип=Неопределено Тогда 
			
			ОбъектВИБ = МетаданныеНайтиПоТипу(ТекСоединениеВИБ, Тип, Кэш);
			
			Если ОбъектВИБ=Неопределено Тогда
				
				Продолжить;
				
			Иначе
				
				СтрокаТипов=СтрокаТипов+";"+ПолучитьРабочееПредставлениеТипа(ОбъектВИБ.FullName());
								
			КонецЕсли;
			
		ИначеЕсли ПустаяСтрока(СтрокаПримитивныхТипов) Тогда
			
			СтрокаТипов=СтрокаТипов+";"+ПримитивныйТип;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(СтрокаПримитивныхТипов) Тогда
		
		СтрокаТипов=СтрокаТипов+";"+СтрокаПримитивныхТипов;
		
	КонецЕсли;
		
	Результат = Сред(СтрокаТипов,2);
	
	РаботаСОбъектамиМетаданныхУХ.СохранитьЗначениеВКэш(Кэш, Ресурс, ОписаниеТиповБД, Результат);
	
	Возврат Результат;
	
КонецФункции // ПолучитьСтрокуТиповДанныхБД()

Функция СтрокаПримитивногоТипа(XMLType, ПримитивныеXMLТипы)
	
	Если XMLType = ПримитивныеXMLТипы.ТипСтрока Тогда
		
		Возврат "Строка";
		
	ИначеЕсли XMLType = ПримитивныеXMLТипы.ТипЧисло Тогда
		
		Возврат "Число";
		
	ИначеЕсли XMLType = ПримитивныеXMLТипы.ТипДата Тогда
		
		Возврат "Дата";
		
	ИначеЕсли XMLType = ПримитивныеXMLТипы.ТипБулево Тогда
		
		Возврат "Булево";
		
	Иначе	
		Возврат "";
	КонецЕсли;

КонецФункции

Функция ПреобразоватьТИПизВИБ(База, Тип, ВозвращатьТип = Истина, Кэш = Неопределено) Экспорт
	
	ПримитивныеXMLТипы = ПримитивныеXMLТипыБазы(База, Кэш);
	XMLType = ПолучитьXMLType(База, Тип);
	
	СтрокаТипа = СтрокаПримитивногоТипа(XMLType, ПримитивныеXMLТипы);
	Если ЗначениеЗаполнено(СтрокаТипа) Тогда
		Возврат ?(ВозвращатьТип, Тип(СтрокаТипа), СтрокаТипа);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции // ПреобразоватьТИПизВИБ()

Функция ПолучитьРабочееПредставлениеТипа(ПолноеИмяТипа) Экспорт
	
	ДанныеТипа=СтрРазделить(ПолноеИмяТипа,".",Истина);
	
	Если ДанныеТипа[0]="Catalog" Тогда
		
		Возврат "Справочник."+ДанныеТипа[1];
		
	ИначеЕсли ДанныеТипа[0]="Enum" Тогда
		
		Возврат "Перечисление."+ДанныеТипа[1];
		
	ИначеЕсли ДанныеТипа[0]="Document" Тогда
		
		Возврат "Документ."+ДанныеТипа[1];
		
	ИначеЕсли ДанныеТипа[0]="ChartOfAccounts" Тогда
		
		Возврат "ПланСчетов."+ДанныеТипа[1];
		
	ИначеЕсли ДанныеТипа[0]="ChartOfCharacteristicTypes" Тогда
		
		Возврат "ПланВидовХарактеристик."+ДанныеТипа[1];
		
	Иначе
		
		Возврат ПолноеИмяТипа;
		
	КонецЕсли;
	
КонецФункции // ПолучитьРабочееПредставлениеТипа()

Функция ПолучитьОписаниеТиповСтроки(ДлинаСтроки) Экспорт
	
	Массив = Новый Массив; 
	Массив.Добавить(Тип("Строка"));
	КвалификаторСтроки = Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная);
	Возврат Новый ОписаниеТипов(Массив, , КвалификаторСтроки);
	
КонецФункции // ПолучитьОписаниеТиповСтроки()

Функция ВИБ_ПолучитьПустуюСсылкуПоТаблицеАналитики(ТекСоединениеВИБ,ТаблицаАналитикиВИБ) Экспорт
	
	МетаданныеОбъекта = СтрРазделить(ТаблицаАналитикиВИБ, ".");
	ТипОбъектаМетаданных=МетаданныеОбъекта[0];
	ИмяОбъектаМетаданных=МетаданныеОбъекта[1];
	РабочийТипМетаданных=ПолучитьРабочийТипОбъектаМетаданных(ТипОбъектаМетаданных);
	
	Попытка
		
		Возврат ТекСоединениеВИБ[РабочийТипМетаданных][ИмяОбъектаМетаданных].ПустаяСсылка();
		
	Исключение
		
		Возврат Неопределено;
		
	КонецПопытки;
		
КонецФункции // ВИБ_ПолучитьПустуюСсылкуПоТаблицеАналитики()

Функция ПолучитьСсылкуПОСтрокеUUID(База,ТипОбъектаМетаданных,ИмяОбъектаМетаданных,СтрокаUUID) Экспорт
	
	Попытка
		
		ТекUUID=База.NewObject("UUID",СтрЗаменить(СтрокаUUID,"{#@UUID@#}",""));
		РабочийТипМетаданных=ПолучитьРабочийТипОбъектаМетаданных(ТипОбъектаМетаданных);
		
		Возврат База[РабочийТипМетаданных][ИмяОбъектаМетаданных].GetRef(ТекUUID);
				
	Исключение
		
		Возврат Неопределено;
		
	КонецПопытки;
		
КонецФункции // ПолучитьСсылкуПОСтрокеUUID()

Функция ПолучитьСсылкуИзТаблицыПОСтрокеUUID(База, ТаблицаАналитикиВИБ,СтрокаUUID) Экспорт
		
	ДанныеОбъекта = СтрРазделить(ТаблицаАналитикиВИБ, ".");
	
	Возврат ПолучитьСсылкуПОСтрокеUUID(База,ДанныеОбъекта[0],ДанныеОбъекта[1],СтрокаUUID);
					
КонецФункции

// Разбивает строку на несколько строк по указанному разделителю. Разделитель может иметь любую длину.
// В случаях, когда разделителем является строка из одного символа, и не используется параметр СокращатьНепечатаемыеСимволы,
// рекомендуется использовать функцию платформы СтрРазделить.
//
// Параметры:
//  Значение               - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, 
	СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Значение) Тогда 
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	//
	
	Позиция = СтрНайти(Значение, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Значение, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Значение = Сред(Значение, Позиция + СтрДлина(Разделитель));
		Позиция = СтрНайти(Значение, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Значение) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Значение));
		Иначе
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

Функция СтруктураОписанияПроизвольногоЗапроса8х(ТекСоединениеВИБ, ТекстЗапросаМодуля, Кэш = Неопределено) Экспорт

	Попытка
		
		Запрос      	= ТекСоединениеВИБ.NewObject("Запрос");
		Запрос.Text 	= ТекстЗапросаМодуля;
		НовыеПараметры  = Запрос.FindParameters();
		
		МассивПараметров=Новый Массив;
		МассивПолей=Новый Массив;
		
		Для каждого ПараметрЗапроса Из НовыеПараметры Цикл
			
			МассивПараметров.Добавить(Новый Структура("ПолеБД,НаименованиеБД,Измерение,Балансовый,ТекТипЗначения",
			ПараметрЗапроса.Name,
			ПараметрЗапроса.Name,
			Ложь,
			Истина,
			ПолучитьСтрокуТиповДанныхБД(ТекСоединениеВИБ, ПараметрЗапроса.ValueType, Кэш)));
			
		КонецЦикла;
		
		// Определим поля запроса
		ПостроительЗапроса=ТекСоединениеВИБ.NewObject("ПостроительЗапроса");
		ПостроительЗапроса.Text=ТекстЗапросаМодуля;
		
		ПостроительЗапроса.FillSettings();
		
		Для Каждого Поле ИЗ ПостроительЗапроса.SelectedFields Цикл
			
			ПолеЗапроса=ПостроительЗапроса.AvailableFields[Поле.Name];
			
			МассивПолей.Добавить(Новый Структура("ПолеБД,НаименованиеБД,Измерение,Балансовый,ТекТипЗначения",
			ПолеЗапроса.DataPath,
			ПолеЗапроса.Presentation,
			Истина,
			Ложь,
			ПолучитьСтрокуТиповДанныхБД(ТекСоединениеВИБ, ПолеЗапроса.ValueType, Кэш)));
			
			
		КонецЦикла;
		
		Возврат Новый Структура("МассивПараметров,МассивПолей",МассивПараметров,МассивПолей);
		
	Исключение
		
		Возврат Новый Структура("ОписаниеОшибки",ОписаниеОшибки());
		
	КонецПопытки;
	
КонецФункции // СтруктураОписанияПроизвольногоЗапроса8х()

Функция ПолучитьТаблицуИдентификаторовОбъектов8х(ТекСоединениеВИБ,ТаблицаАналитики) Экспорт
	
	ТаблицаСправочниикаВИБ=Новый ТаблицаЗначений;
	ТаблицаСправочниикаВИБ.Колонки.Добавить("ОбъектВнешнейИБ",				ПолучитьОписаниеТиповСтроки(150));
	ТаблицаСправочниикаВИБ.Колонки.Добавить("НаименованиеОбъектаВнешнейИБ",	ПолучитьОписаниеТиповСтроки(255));
	
	Запрос = ТекСоединениеВИБ.NewObject("Запрос");
	Запрос.Текст="ВЫБРАТЬ Ссылка,Наименование ИЗ "+ТаблицаАналитики;
	
	ТаблицаСОМ = Запрос.Execute().Unload();
	
	Для Каждого Строка ИЗ ТаблицаСОМ Цикл
		
		НоваяСтрока=ТаблицаСправочниикаВИБ.Добавить();
		НоваяСтрока.НаименованиеОбъектаВнешнейИБ=Строка.Наименование;
		НоваяСтрока.ОбъектВнешнейИБ=ПолучитьXMLString(ТекСоединениеВИБ,Строка.Ссылка);
		
	КонецЦикла;
	
	Возврат ТаблицаСправочниикаВИБ; 
	
КонецФункции // ПолучитьТаблицуИдентификаторовОбъектов8х() 

#Область Получение_данных_по_запросу

Функция ПодготовитьПроизвольныйЗапросДляПолученияДанных(База, ДанныеДляЗапроса, Кэш = Неопределено)
	
	ОбъектЗапрос = База.NewObject("Запрос");
	УстановитьПараметрыЗапроса(База, ОбъектЗапрос, ДанныеДляЗапроса.ИспользуемыеПараметры, Кэш); 
		
	Возврат ОбъектЗапрос;
	
КонецФункции // ПодготовитьПроизвольныйЗапросДляПолученияДанных()

Процедура УстановитьПараметрыЗапроса(База, ОбъектЗапрос, ИспользуемыеПараметры, Кэш = Неопределено) Экспорт
	
	Для Каждого СтрокаПараметр ИЗ ИспользуемыеПараметры Цикл
		
		ЗначениеСписок=Ложь;
		
		Если ТипЗнч(СтрокаПараметр.ЗначениеПараметра)=Тип("Структура") ИЛИ ТипЗнч(СтрокаПараметр.ЗначениеПараметра)=Тип("Массив") Тогда		
			
			РабЗначениеПараметра=ПолучитьЗначениеПараметраВИБ(База,СтрокаПараметр.ЗначениеПараметра);
			ЗначениеСписок=Истина;
			
		ИначеЕсли СтрокаПараметр.Вычислять Тогда
			
			ЗначениеПараметра="";
			
			Попытка
				Выполнить(СтрокаПараметр.ЗначениеПараметра);
			Исключение
				Продолжить;
			КонецПопытки;
			
			РабЗначениеПараметра=ЗначениеПараметра;
			ЗначениеСписок = ПолучитьXMLTypeOf(База, РабЗначениеПараметра) = 
				ПолучитьXMLTypeOf(База, База.NewObject("СписокЗначений"))
			
		Иначе
			
			РабЗначениеПараметра=СтрокаПараметр.ЗначениеПараметра;
			
		КонецЕсли;
		
		Если ТипЗнч(СтрокаПараметр.ЗначениеПараметра)=Тип("СписокЗначений") Тогда
			
			РабЗначениеПараметра=ПолучитьСписокЗначенийВИБ(База,СтрокаПараметр.ЗначениеПараметра);
			ЗначениеСписок=Истина;
			
		КонецЕсли;
		
		Если ЗначениеСписок Тогда
			
			Если РабЗначениеПараметра.Count()=1 Тогда
				
				ОбъектЗапрос.SetParameter(СтрокаПараметр.ИмяПараметра, РабЗначениеПараметра.Get(0).Value);
				
			Иначе
				
				ОбъектЗапрос.SetParameter(СтрокаПараметр.ИмяПараметра, РабЗначениеПараметра);
				
			КонецЕсли;
			
		Иначе
			
			ОбъектЗапрос.SetParameter(СтрокаПараметр.ИмяПараметра, РабЗначениеПараметра);	
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьПараметрыЗапроса() 

Функция ПодготовитьПостроительЗапросаДляПолученияДанных(База, ДанныеДляЗапроса, Кэш = Неопределено)
	
	ТекстЗапроса		= ДанныеДляЗапроса.ТекстЗапроса;
	ЕстьОбороты 		= СтрНайти(ТекстЗапроса,"&СчетДт")>0 ИЛИ СтрНайти(ТекстЗапроса,"ДвиженияССубконто")>0;
	
	ОбъектЗапрос = База.NewObject("ПостроительЗапроса");
	
	ОбъектЗапрос.Text = ТекстЗапроса;
	ОбъектЗапрос.FillSettings();
	ОбъектЗапрос.SelectedFields.Clear();
	ОбъектЗапрос.Parameters.Clear();	
	ОбъектЗапрос.PresentationAdding=База.PresentationAdditionType.Add;	
	
	// Очистим отбор
	ОтборКоличество = ОбъектЗапрос.Filter.Count();
	Для Н = 1 По ОтборКоличество Цикл
		ОбъектЗапрос.Filter.Delete(ОтборКоличество - Н);
	КонецЦикла;
	
	Для Каждого СтрПоле ИЗ ДанныеДляЗапроса.ИспользуемыеПоля Цикл
		
		ОбъектЗапрос.SelectedFields.Add(СтрПоле.ПутьКДанным,СтрПоле.ИмяПоля);
		
	КонецЦикла;
	
	МассивПараметров=Новый Массив;
	
	ТекЗапрос = ОбъектЗапрос.GetQuery();
	
	Если НЕ ПустаяСтрока(ТекЗапрос.Text) Тогда
		
		ПараметрыЗапроса=ОбъектЗапрос.GetQuery().FindParameters();
		
		Для Каждого Параметр ИЗ ПараметрыЗапроса Цикл
			
			МассивПараметров.Добавить(Параметр.Name);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для Каждого СтрокаПараметр ИЗ ДанныеДляЗапроса.ИспользуемыеПараметры Цикл
		
		ЗначениеСписок=Ложь;
		
		Если ТипЗнч(СтрокаПараметр.ЗначениеПараметра)=Тип("Структура") ИЛИ ТипЗнч(СтрокаПараметр.ЗначениеПараметра)=Тип("Массив") Тогда		
			
			РабЗначениеПараметра=ПолучитьЗначениеПараметраВИБ(База,СтрокаПараметр.ЗначениеПараметра);
			ЗначениеСписок=Истина;
						
		ИначеЕсли СтрокаПараметр.Вычислять Тогда
			
			ЗначениеПараметра="";
			
			Попытка
				Выполнить(СтрокаПараметр.ЗначениеПараметра);
			Исключение
				Продолжить;
			КонецПопытки;
			
			РабЗначениеПараметра=ЗначениеПараметра;
			ЗначениеСписок = ПолучитьXMLTypeOf(База, РабЗначениеПараметра)
				= ПолучитьXMLTypeOf(База, База.NewObject("СписокЗначений"))
			
		Иначе
			
			РабЗначениеПараметра=СтрокаПараметр.ЗначениеПараметра;
			
		КонецЕсли;
		
		Если ТипЗнч(СтрокаПараметр.ЗначениеПараметра)=Тип("СписокЗначений") Тогда
			
			РабЗначениеПараметра=ПолучитьСписокЗначенийВИБ(База,СтрокаПараметр.ЗначениеПараметра);
			ЗначениеСписок=Истина;
			
		КонецЕсли;
		
		Если ЗначениеСписок Тогда
			
			ДобавитьОтборУстановитьПараметрСписокЗначений(База,ОбъектЗапрос,МассивПараметров,СтрокаПараметр,РабЗначениеПараметра);
			
		Иначе
			
			ДобавитьОтборУстановитьПараметрЗначение(База,ОбъектЗапрос,МассивПараметров,СтрокаПараметр,РабЗначениеПараметра);
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат ОбъектЗапрос;
					
КонецФункции // ПодготовитьПостроительЗапросаДляПолученияДанных()

Процедура ДобавитьОтборУстановитьПараметрСписокЗначений(База,ОбъектЗапрос,МассивПараметров,СтрокаПараметр,СписокЗначений)
	
	Если СтрокаПараметр.ИмяПараметра="СчетДт" 
			ИЛИ СтрокаПараметр.ИмяПараметра="СчетКт"
			ИЛИ СтрокаПараметр.ИмяПараметра="Счет"
			ИЛИ СтрокаПараметр.ИмяПараметра="Статья" Тогда
			
			ОбъектЗапрос.Parameters.Insert(СтрокаПараметр.ИмяПараметра, СписокЗначений);

	ИначеЕсли НЕ МассивПараметров.Найти(СтрокаПараметр.ИмяПараметра)=Неопределено Тогда
					
		Если СписокЗначений.Count()=1 Тогда
			
			ОбъектЗапрос.Parameters.Insert(СтрокаПараметр.ИмяПараметра, СписокЗначений.Get(0).Value);
			
		Иначе
			
			ОбъектЗапрос.Parameters.Insert(СтрокаПараметр.ИмяПараметра, СписокЗначений);
			
		КонецЕсли;
		
	ИначеЕсли НЕ МассивПараметров.Найти(СтрокаПараметр.ПолеБД)=Неопределено Тогда
		
		Если СписокЗначений.Count()=1 Тогда
			
			ОбъектЗапрос.Parameters.Insert(СтрокаПараметр.ПолеБД, СписокЗначений.Get(0).Value);
			
		Иначе
			
			ОбъектЗапрос.Parameters.Insert(СтрокаПараметр.ПолеБД, СписокЗначений);
			
		КонецЕсли;
		
	Иначе
		
		Отбор = ОбъектЗапрос.Filter.Add(СтрокаПараметр.ИмяПараметра);
		
		Если ЗначениеЗаполнено(СтрокаПараметр.ВидСравнения) Тогда
			
			Отбор.ComparisonType = База.ComparisonType[СтрокаПараметр.ВидСравнения];
			
			Если СтрокаПараметр.ВидСравнения="Equal" ИЛИ СтрокаПараметр.ВидСравнения="NotEqual" Тогда
				
				Отбор.Value= СписокЗначений.Get(0).Value;
				
			Иначе
				
				Отбор.Value          = СписокЗначений;
				
			КонецЕсли;
			
		Иначе
			
			Отбор.ComparisonType = База.ComparisonType.InList;
			Отбор.Value          = СписокЗначений;
			
		КонецЕсли;
		
		Отбор.Use            = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ДобавитьОтборУстановитьПараметрСписокЗначений()

Процедура ДобавитьОтборУстановитьПараметрЗначение(База,ОбъектЗапрос,МассивПараметров,СтрокаПараметр,РабЗначениеПараметра)
	
	Если НЕ МассивПараметров.Найти(СтрокаПараметр.ИмяПараметра)=Неопределено Тогда
						
		ОбъектЗапрос.Parameters.Insert(СтрокаПараметр.ИмяПараметра, РабЗначениеПараметра);
					
	ИначеЕсли НЕ МассивПараметров.Найти(СтрокаПараметр.ПолеБД)=Неопределено Тогда
						
		ОбъектЗапрос.Parameters.Insert(СтрокаПараметр.ПолеБД, РабЗначениеПараметра);
					
	Иначе
		
		Отбор = ОбъектЗапрос.Filter.Add(СтрокаПараметр.ИмяПараметра);
		
		Если ЗначениеЗаполнено(СтрокаПараметр.ВидСравнения) Тогда
			
			Отбор.ComparisonType = База.ComparisonType[СтрокаПараметр.ВидСравнения];
						
		Иначе
			
			Отбор.ComparisonType = База.ComparisonType.Equal;
			
		КонецЕсли;
		
		Отбор.Value = РабЗначениеПараметра;
		Отбор.Use 	= Истина;
		
	КонецЕсли;
		
КонецПроцедуры // ДобавитьОтборУстановитьПараметрЗначение()
		
Функция ПолучитьСписокЗначенийВИБ(ТекСоединениеВИБ,СписокЗначений) Экспорт
	
	СписокЗначенийВИБ = ТекСоединениеВИБ.NewObject("СписокЗначений");
	
	Для Каждого Элемент ИЗ СписокЗначений Цикл
		
		СписокЗначенийВИБ.Add(Элемент.Значение,Элемент.Представление);
		
	КонецЦикла;
	
	Возврат СписокЗначенийВИБ;
			
КонецФункции // ПолучитьСписокЗначенийВИБ() 

Функция ПолучитьЗначениеПараметраВИБ(ТекСоединениеВИБ,ДанныеПараметра)
	
	СписокЗначенийВИБ = ТекСоединениеВИБ.NewObject("СписокЗначений");
	
	Если ТипЗнч(ДанныеПараметра)=Тип("Массив") Тогда
		
		Для Каждого ДанныеОбъекта ИЗ ДанныеПараметра Цикл
			
			ПолучитьСписокОбъектовВИБ(ТекСоединениеВИБ,ДанныеОбъекта,СписокЗначенийВИБ);
					
		КонецЦикла;
		
	Иначе
		
		ПолучитьСписокОбъектовВИБ(ТекСоединениеВИБ,ДанныеПараметра,СписокЗначенийВИБ);
				
	КонецЕсли;
	
	Возврат СписокЗначенийВИБ;
	
КонецФункции // ПолучитьЗначениеПараметраВИБ()

Процедура ПолучитьСписокОбъектовВИБ(ТекСоединениеВИБ,ДанныеПараметра,СписокЗначенийВИБ)
	
	Перем ТаблицаАналитики;
	
	ДанныеПараметра.Свойство("ТаблицаАналитики",ТаблицаАналитики);
	
	Если ТаблицаАналитики=Неопределено Тогда
		
		СписокЗначенийВИБ.Add(NULL);
		Возврат;
		
	КонецЕсли;	
	
	Для Каждого ОписаниеОбъекта ИЗ ДанныеПараметра.МассивОтбора Цикл
		
		Если ОписаниеОбъекта.Количество()=0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ТекстЗапроса = "ВЫБРАТЬ ТаблицаАналитики.Ссылка ИЗ " + ТаблицаАналитики + " КАК ТаблицаАналитики";	
		ТекстУсловия="";
		ЗначениеПолученоПоСсылке=Ложь;
		
		Для Каждого КлючИЗначение ИЗ ОписаниеОбъекта Цикл
			
			Если КлючИЗначение.Ключ="EmptyRef" Тогда
				
				СписокЗначенийВИБ.Add(ВИБ_ПолучитьПустуюСсылкуПоТаблицеАналитики(ТекСоединениеВИБ,ТаблицаАналитики));
				ЗначениеПолученоПоСсылке=Истина;
				Прервать;
				
			ИначеЕсли КлючИЗначение.Ключ="GUID" 
				ИЛИ (КлючИЗначение.Ключ="Ссылка" И СтрНайти(КлючИЗначение.Значение,"{#@UUID@#}")>0) Тогда
				
				СписокЗначенийВИБ.Add(ПолучитьСсылкуИзТаблицыПОСтрокеUUID(ТекСоединениеВИБ,ТаблицаАналитики,КлючИЗначение.Значение));
				ЗначениеПолученоПоСсылке=Истина;
				Прервать;
				
			Иначе
				
				Если СтрНайти(Врег(КлючИЗначение.Значение),"ЗНАЧЕНИЕ(")>0 Тогда // Получаем перечисление или предопределенный элемент справочника
					
					Если КлючИЗначение.Ключ="EnumRefValue" Тогда
						
						ТекстУсловия = ТекстУсловия + " И ТаблицаАналитики.Ссылка = " + КлючИЗначение.Значение;	
						
					Иначе	
						
						ТекстУсловия = ТекстУсловия + " И ТаблицаАналитики." + СтрЗаменить(КлючИЗначение.Ключ,"vzv",".") + " = " + КлючИЗначение.Значение;
						
					КонецЕсли;
					
				Иначе
					
					ТекстУсловия = ТекстУсловия + " И ТаблицаАналитики." + СтрЗаменить(КлючИЗначение.Ключ,"vzv",".") + " = &" + СтрЗаменить(КлючИЗначение.Ключ,".","");
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеПолученоПоСсылке Тогда;
			
			Продолжить;
			
		КонецЕсли;
		
		Запрос = ТекСоединениеВИБ.NewObject("Запрос");
		
		Для Каждого КлючИЗначение Из ОписаниеОбъекта Цикл
			
			Если НЕ (СтрНайти(Врег(КлючИЗначение.Значение),"ЗНАЧЕНИЕ(")>0) Тогда
				
				Запрос.SetParameter(СтрЗаменить(КлючИЗначение.Ключ,".",""), КлючИЗначение.Значение);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстЗапроса=ТекстЗапроса+?(ТекстУсловия="",""," ГДЕ "+Сред(ТекстУсловия,3));
		
		Запрос.Text  = ТекстЗапроса;
		Выборка      = Запрос.Execute().Choose();
		
		ДобавленоЗначений=0;
		
		Пока Выборка.Next() Цикл
			
			ЗначениеВИБ=Выборка.Get(0);	
			СписокЗначенийВиб.Add(ЗначениеВИБ);
			ДобавленоЗначений=ДобавленоЗначений+1;
			
		КонецЦикла;
		
		Если ДобавленоЗначений=0 Тогда
			
			СписокЗначенийВиб.Add(ВИБ_ПолучитьПустуюСсылкуПоТаблицеАналитики(ТекСоединениеВИБ,ТаблицаАналитики));
						
		КонецЕсли;
				
	КонецЦикла;
		
КонецПроцедуры  // ПолучитьСписокОбъектовВИБ()


Функция ПодготовитьЗапросДляПолученияДанных(База, ДанныеДляЗапроса, Кэш = Неопределено) Экспорт
		
	Если ДанныеДляЗапроса.ПроизвольныйЗапрос Тогда
		Возврат ПодготовитьПроизвольныйЗапросДляПолученияДанных(База, ДанныеДляЗапроса, Кэш);
	Иначе
		Возврат ПодготовитьПостроительЗапросаДляПолученияДанных(База, ДанныеДляЗапроса, Кэш);
	КонецЕсли;
			
КонецФункции // ПодготовитьЗапросДляПолученияДанных() 

Функция ПолучитьРабочуюТаблицуДанных8х(ТекСоединениеВИБ, ДанныеДляЗапроса, Кэш = Неопределено) Экспорт
	
	ОбъектЗапрос = ПодготовитьЗапросДляПолученияДанных(ТекСоединениеВИБ, ДанныеДляЗапроса, Кэш);
	
	Попытка
		
		Если ДанныеДляЗапроса.ПроизвольныйЗапрос Тогда
			ОбъектЗапрос.Text 			= ДанныеДляЗапроса.ТекстЗапроса;
			COMТаблица                  = ОбъектЗапрос.Execute().Unload();
		Иначе
			ОбъектЗапрос.Execute();
			COMТаблица                  = ОбъектЗапрос.Result.Unload();
		КонецЕсли;
		
	Исключение
		
		Возврат ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		
	КонецПопытки;
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ПреобразоватьCOMТаблицуВТаблицуЗначений(ТекСоединениеВИБ, COMТаблица, ТаблицаДанных, Кэш);
	ТекСоединениеВИБ = Неопределено;
	
	Возврат ТаблицаДанных;
		
КонецФункции // ПолучитьРабочуюТаблицуДанных8х()

Процедура ПреобразоватьCOMТаблицуВТаблицуЗначений(База, ТаблицаCOM, ЛокальнаяТаблица, Кэш = Неопределено) Экспорт
	
	ТипКОМБулево 	= ПолучитьXMLTypeOf(База, Истина);
	ТипКОМЧисло 	= ПолучитьXMLTypeOf(База, 0);
	ТипКОМСтрока 	= ПолучитьXMLTypeOf(База, "");
	ТипКОМДата 		= ПолучитьXMLTypeOf(База, Дата(1, 1, 1));
		
	ЕстьСсылочныеТипы=Ложь;
	МассивПримитивныхТипов=Новый Массив;
	МассивСсылочныхТипов=Новый Массив;
	
	Для Инд = 0 По ТаблицаCOM.Columns.Count()-1 Цикл
		
		ОписаниеТипов = Новый ОписаниеТипов;
		КолонкаCOM=ТаблицаCOM.Columns.Get(Инд);
		ИмяКолонки=КолонкаCOM.Name;
				
		ТипКомМассив = КолонкаCOM.ValueType.Types();
		
		Для НомерТипа=0 ПО ТипКомМассив.Count()-1 Цикл
			
			ЭлементМассива=ТипКомМассив.Get(НомерТипа);		
			XMLType = ПолучитьXMLType(База, ЭлементМассива);
			
			Если XMLType=ТипКОМБулево 
				ИЛИ XMLType=ТипКОМЧисло
				ИЛИ XMLType=ТипКОМСтрока
				ИЛИ XMLType=ТипКОМДата Тогда
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если XMLType = ТипКОМБулево Тогда
			ОписаниеТипов = Новый ОписаниеТипов(ОписаниеТипов, "Булево");
			
			МассивПримитивныхТипов.Добавить(ИмяКолонки);
			
		ИначеЕсли XMLType = ТипКОМЧисло Тогда
			COM_Digits              = КолонкаCOM.ValueType.NumberQualifiers.Digits;
			COM_FractionDigits      = КолонкаCOM.ValueType.NumberQualifiers.FractionDigits;
			COM_AllowedSign         = КолонкаCOM.ValueType.NumberQualifiers.AllowedSign;
			ЛюбойЗнак           = База.AllowedSign.Any;
			НеотрицательныйЗнак = База.AllowedSign.Nonnegative;
			Если COM_AllowedSign = ЛюбойЗнак Тогда
				Знак = ДопустимыйЗнак.Любой;
			КонецЕсли;
			Если COM_AllowedSign = НеотрицательныйЗнак Тогда
				Знак = ДопустимыйЗнак.Неотрицательный;
			КонецЕсли;
			Квалификатор = Новый КвалификаторыЧисла(COM_Digits, COM_FractionDigits, Знак);
			ОписаниеТипов = Новый ОписаниеТипов(ОписаниеТипов,"Число",, Квалификатор);
			
			МассивПримитивныхТипов.Добавить(ИмяКолонки);
			
		ИначеЕсли XMLType = ТипКОМСтрока Тогда
			COM_Length = КолонкаCOM.ValueType.StringQualifiers.Length;
			COM_AllowedLength = КолонкаCOM.ValueType.StringQualifiers.AllowedLength;
			ДлинаФиксированная = База.AllowedLength.Variable;
			ДлинаПеременная = База.AllowedLength.Fixed;
			Квалификатор = Новый КвалификаторыСтроки(COM_Length, ДопустимаяДлина.Переменная);
			ОписаниеТипов = Новый ОписаниеТипов(ОписаниеТипов,"Строка",,,Квалификатор);
			
			МассивПримитивныхТипов.Добавить(ИмяКолонки);
			
		ИначеЕсли XMLType = ТипКОМДата Тогда
			COM_DateFractions = КолонкаCOM.ValueType.DateQualifiers.DateFractions;
			ТолькоДата    = База.DateFractions.Date;
			ТолькоВремя   = База.DateFractions.Time;
			ДатаВремя     = База.DateFractions.DateTime;
			Если COM_DateFractions = ТолькоДата Тогда
				ДатаЧасть = ЧастиДаты.Дата;
			КонецЕсли;
			Если COM_DateFractions = ТолькоВремя Тогда
				ДатаЧасть = ЧастиДаты.Время;
			КонецЕсли;
			Если COM_DateFractions = ДатаВремя Тогда
				ДатаЧасть = ЧастиДаты.ДатаВремя;
			КонецЕсли;
			Квалификатор = Новый КвалификаторыДаты(ДатаЧасть);
			ОписаниеТипов = Новый ОписаниеТипов(ОписаниеТипов,"Дата",,,,Квалификатор);
			
			МассивПримитивныхТипов.Добавить(ИмяКолонки);
			
		Иначе // По умолчанию подставляем строку
			
			ЕстьСсылочныеТипы=Истина;
			
			Квалификатор = Новый КвалификаторыСтроки(150, ДопустимаяДлина.Переменная);
			ОписаниеТипов = Новый ОписаниеТипов(ОписаниеТипов,"Строка",,,Квалификатор);
			
			МассивСсылочныхТипов.Добавить(ИмяКолонки);
			
		КонецЕсли;
					
		ЛокальнаяТаблица.Колонки.Добавить(ИмяКолонки,ОписаниеТипов,ИмяКолонки);
		
	КонецЦикла;
	
	СтрокаПримитивных=СтрСоединить(МассивПримитивныхТипов,",");
	
	Для Каждого СтрокаРезультатовCOM Из ТаблицаCOM Цикл
		
		НоваяСтрока = ЛокальнаяТаблица.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРезультатовCOM,СтрокаПримитивных);
		
		Для Каждого Поле ИЗ МассивСсылочныхТипов Цикл
			
			ЗначениеCOM = СтрокаРезультатовCOM[Поле];
			
			ТипДанных = ПолучитьXMLTypeOf(База, ЗначениеCOM);
			
			Если ТипДанных = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТипа = ТипДанных.TypeName;
			
			Если СтрНайти(СтрокаТипа,"EnumRef") > 0 Тогда
				
				НоваяСтрока[Поле] = ПолучитьXMLString(База, ЗначениеCOM);
				
			ИначеЕсли СтрНайти(СтрокаТипа,"DocumentRef")>0 Тогда
				
				МассивПутей=РазложитьСтрокуВМассивПодстрок(Поле,"vzv",Ложь);
				
				СтрРеквизит=МассивПутей[МассивПутей.Количество()-1];
				
				Если СтрРеквизит="Ссылка" Тогда
					
					НоваяСтрока[Поле]=СтрЗаменить(СтрокаТипа,"DocumentRef","Документ");
					
				Иначе
					
					НоваяСтрока[Поле] = ПолучитьXMLString(База,ЗначениеCOM);
					
				КонецЕсли;
				
			ИначеЕсли СтрНайти(СтрокаТипа,"CatalogRef")>0 Тогда
				
				МассивПутей=РазложитьСтрокуВМассивПодстрок(Поле,"vzv",Ложь);
				
				СтрРеквизит=МассивПутей[МассивПутей.Количество()-1];
				
				Если СтрРеквизит="Ссылка" Тогда
					
					НоваяСтрока[Поле]=СтрЗаменить(СтрокаТипа,"CatalogRef","Справочник");
					
				Иначе
					
					НоваяСтрока[Поле] = ПолучитьXMLString(База,ЗначениеCOM);
					
				КонецЕсли;
				
			ИначеЕсли СтрНайти(СтрокаТипа,"ChartOfCharacteristicTypesRef")>0 Тогда
				
				МассивПутей=РазложитьСтрокуВМассивПодстрок(Поле,"vzv",Ложь);
				
				СтрРеквизит=МассивПутей[МассивПутей.Количество()-1];
				
				Если СтрРеквизит="Ссылка" Тогда
					
					НоваяСтрока[Поле]=СтрЗаменить(СтрокаТипа,"ChartOfCharacteristicTypesRef","ПланВидовХарактеристик");
					
				Иначе
					
					НоваяСтрока[Поле] = ПолучитьXMLString(База,ЗначениеCOM);
					
				КонецЕсли;
				
			Иначе
				
				МассивПутей=РазложитьСтрокуВМассивПодстрок(Поле,"vzv",Ложь);
				СтрРеквизит=МассивПутей[МассивПутей.Количество()-1];
				
				Если СтрРеквизит="ЭлементСсылка" ИЛИ СтрРеквизит="Ref" Тогда
					
					НоваяСтрока[Поле] = ПолучитьXMLString(База,ЗначениеCOM);
					
				Иначе
					
					НоваяСтрока[Поле] = ЗначениеCOM;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьДеревоЗначенийДляСправочника8х(База,Параметры) Экспорт
	
	ДеревоЗначений=Новый ДеревоЗначений;
	ДеревоЗначений.Колонки.Добавить("Код");
	ДеревоЗначений.Колонки.Добавить("Наименование");
	ДеревоЗначений.Колонки.Добавить("Ссылка");
	ДеревоЗначений.Колонки.Добавить("ЭтоГруппа");
	ДеревоЗначений.Колонки.Добавить("ПометкаУдаления");
	ДеревоЗначений.Колонки.Добавить("СостояниеОбъекта");

	Если Параметры.Свойство("СтрокаРеквизитов") Тогда
		
		МассивРеквизитов=СтрРазделить(Параметры.СтрокаРеквизитов,",",Ложь);
		
		Для Каждого Реквизит ИЗ МассивРеквизитов Цикл
			
			ДеревоЗначений.Колонки.Добавить(Реквизит);
			
		КонецЦикла;
		
	КонецЕсли;	
	
	РабочийТипМетаданных=ПолучитьРабочийТипОбъектаМетаданных(Параметры.ТипМетаДанных); 
	
	Если РабочийТипМетаданных="Catalogs" ИЛИ РабочийТипМетаданных="ChartsOfCharacteristicTypes" Тогда
		
		СправочникБД     = База.MetaData[РабочийТипМетаданных][Параметры.СправочникБД];
				
		КодНеИспользуется = СправочникБД.ДлинаКода = 0;
		
		Иерархия         = СправочникБД.Hierarchical;
		
		Запрос           = База.NewObject("Запрос");
		Запрос.Text      = " ВЫБРАТЬ";
		
		Если КодНеИспользуется Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|ТипМетаДанных.Наименование КАК Код,";
			
		Иначе
			
			Запрос.Текст=Запрос.Текст+"
			|ТипМетаДанных.Код КАК Код,";
			
		КонецЕсли;
		
		Запрос.Текст=Запрос.Текст+"
			|ТипМетаДанных.Наименование КАК Наименование,
			|ТипМетаДанных.Ссылка КАК Ссылка";
		
		Если Параметры.Свойство("СтрокаРеквизитов") Тогда
			
			МассивРеквизитов=СтрРазделить(Параметры.СтрокаРеквизитов,",",Ложь);
			
			Для Каждого Реквизит ИЗ МассивРеквизитов Цикл
				
				Запрос.Текст=Запрос.Текст+",
				|ПРЕДСТАВЛЕНИЕ(ТипМетаДанных."+Реквизит+") КАК "+Реквизит;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Если Иерархия И СправочникБД.HierarchyType=База.MetaData.ObjectProperties.HierarchyType.HierarchyFoldersAndItems Тогда
			
			Запрос.Текст=Запрос.Текст+",
			|ТипМетаДанных.ЭтоГруппа КАК ЭтоГруппа,
			|ТипМетаДанных.ПометкаУдаления КАК ПометкаУдаления,
			|ВЫБОР КОГДА ТипМетаДанных.ЭтоГруппа Тогда 
			|ВЫБОР Когда ТипМетаДанных.ПометкаУдаления Тогда 1
			|Иначе 0 Конец
			|ИНАЧЕ
			|ВЫБОР КОГДА ТипМетаДанных.ПометкаУдаления Тогда 3
			|ИНАЧЕ 2 Конец КОНЕЦ КАК СостояниеОбъекта";
			
		Иначе
			
			Запрос.Текст=Запрос.Текст+",
			|Ложь КАК ЭтоГруппа,
			|ТипМетаДанных.ПометкаУдаления КАК ПометкаУдаления,
			|ВЫБОР КОГДА ТипМетаДанных.ПометкаУдаления Тогда 3
			|ИНАЧЕ 2 Конец КАК СостояниеОбъекта";
			
		КонецЕсли;
		
		Запрос.Текст=Запрос.Текст+"
		|ИЗ "+ ПолучитьРабочееПредставлениеТипа(СправочникБД.FullName()) + " КАК ТипМетаДанных
		| УПОРЯДОЧИТЬ ПО ТипМетаДанных.Наименование ";
					
		Если Иерархия Тогда 
			
			Запрос.Text      = Запрос.Text + "ИЕРАРХИЯ";
			РезультатЗапроса = Запрос.Execute();
			ЗаполнитьДеревоЗначенийИзСОМТаблицы(База,ДеревоЗначений, РезультатЗапроса,Параметры.УказанаИнформационнаяБаза);
			
		Иначе
			
			РезультатЗапроса = Запрос.Execute();
			ТаблицаСОМ       = РезультатЗапроса.Unload();
			
			Для Каждого СтрокаРезультата ИЗ ТаблицаСОМ Цикл
				
				НоваяСтрока=ДеревоЗначений.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаРезультата);
				
				Если Параметры.УказанаИнформационнаяБаза Тогда
					
					НоваяСтрока.Код="{#@UUID@#}"+ПолучитьXMLString(База,СтрокаРезультата.Ссылка);
					НоваяСтрока.Ссылка=ПолучитьXMLString(База,СтрокаРезультата.Ссылка);
					
				КонецЕсли;
					
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли РабочийТипМетаданных="ChartsOfAccounts" Тогда
		
		ПланСчетовБД     = База.MetaData.ChartsOfAccounts[Параметры.СправочникБД];
		
		Запрос           = База.NewObject("Запрос");
		Запрос.Text      = " ВЫБРАТЬ ТипМетаДанных.Ссылка КАК Ссылка,ТипМетаданных.Наименование КАК Наименование,ТипМетаданных.Код КАК Код ИЗ " 
		+ ПолучитьРабочееПредставлениеТипа(ПланСчетовБД.FullName()) + " КАК ТипМетаДанных
		| УПОРЯДОЧИТЬ ПО ТипМетаДанных.Код Иерархия ";
		
		РезультатЗапроса = Запрос.Execute();
		ЗаполнитьДеревоЗначенийИзСОМТаблицы(База,ДеревоЗначений, РезультатЗапроса,Параметры.УказанаИнформационнаяБаза);
		
	КонецЕсли;
	
	ДанныеСправочника=Новый Структура;
	ДанныеСправочника.Вставить("ДеревоЗначений",ДеревоЗначений);
	ДанныеСправочника.Вставить("КодНеИспользуется",КодНеИспользуется);
	
	Возврат ДанныеСправочника;
		
КонецФункции // ЗаполнитьДеревоЗначенийДляСправочника8х() 

// Вспомогательная процедура, обеспечивающая рекурсивное чтение данных из выборки значений
//
Процедура ЗаполнитьВетвьДерева(База, СтрокаДерева, Выборка,ПолучатьСсылку)
	
	Пока Выборка.Next() Цикл
		
		НоваяСтрока = СтрокаДерева.Строки.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
		
		Если ПолучатьСсылку Тогда
			НоваяСтрока.Код="{#@UUID@#}"+ПолучитьXMLString(База,Выборка.Ссылка);
			НоваяСтрока.Ссылка=ПолучитьXMLString(База,Выборка.Ссылка);
		КонецЕсли;
				
		НоваяВыборка = Выборка.Choose(База.QueryResultIteration.ByGroupsWithHierarchy);
		
		Если НоваяВыборка.Count() > 0 Тогда
			ЗаполнитьВетвьДерева(База, НоваяСтрока,НоваяВыборка,ПолучатьСсылку);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЗаполнитьДеревоЗначенийДляПеречисления8х(База,Параметры) Экспорт
	
	ДеревоЗначений=Новый ДеревоЗначений;
	ДеревоЗначений.Колонки.Добавить("Код");
	ДеревоЗначений.Колонки.Добавить("Наименование");
	
	СправочникБД  = База.MetaData.Enums[Параметры.СправочникБД];
				
	Для Каждого ЭлементПеречисления Из СправочникБД.EnumValues Цикл
		СтрокаЗначений              = ДеревоЗначений.Строки.Добавить();
		СтрокаЗначений.Код          = ПолучитьРабочееПредставлениеТипа(СправочникБД.FullName()) + "." + ЭлементПеречисления.Name;
		СтрокаЗначений.Наименование = ЭлементПеречисления.Presentation();
	КонецЦикла;
		
	ДанныеСправочника=Новый Структура;
	ДанныеСправочника.Вставить("ДеревоЗначений",ДеревоЗначений);
	ДанныеСправочника.Вставить("КодНеИспользуется",Ложь);
		
	Возврат ДанныеСправочника;

КонецФункции // ЗаполнитьДеревоЗначенийДляПеречисления8х()

Функция ПолучитьРабочийТипОбъектаМетаданных(ТипОбъектаМетаДанных) Экспорт
	
	Если ТипОбъектаМетаданных="Справочник" Тогда
		
		Возврат "Catalogs";
		
	ИначеЕсли ТипОбъектаМетаданных="ПланВидовХарактеристик" Тогда
		
		Возврат "ChartsOfCharacteristicTypes";
		
	ИначеЕсли ТипОбъектаМетаданных="Документ" Тогда
		
		Возврат "Documents";
		
	ИначеЕсли ТипОбъектаМетаданных="Перечисление" Тогда
		
		Возврат "Enums";
		
	ИначеЕсли ТипОбъектаМетаданных="ПланСчетов" Тогда
		
		Возврат "ChartsOfAccounts";
		
	Иначе
		
		Возврат ТипОбъектаМетаДанных; 
		
	КонецЕсли;
		
КонецФункции // ВернутьРабочийТипМетаданных( 

// Функция формирует дерево значений на основании полученного результата запроса
// из внешней информационной базы.
Процедура ЗаполнитьДеревоЗначенийИзСОМТаблицы(База, ДеревоЗначений,РезультатЗапроса,ПолучатьСсылку=Ложь)
	
	Выборка      = РезультатЗапроса.Choose(База.QueryResultIteration.ByGroupsWithHierarchy);
	ЗаполнитьВетвьДерева(База, ДеревоЗначений, Выборка,ПолучатьСсылку);
		
КонецПроцедуры // ЗаполнитьДеревоЗначенийИзСОМТаблицы() 
	
#КонецОбласти

Функция ПолучитьОписаниеТиповБулево()
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Булево"));
	Возврат Новый ОписаниеТипов(Массив);
	
КонецФункции // ПолучитьОписаниеТиповБулево()

#Область Загрузка_Элементов_НСИ

Процедура ВИБ_ДобавитьСтрокиПодчиненныхРеквизитов(ТекСоединениеВИБ,
												СтрокаРодитель,
												КодАналитики,
												МассивРеквизитов,
												ИмяРеквизита,
												КэшНайденныхЗначений,
												СтруктураПодчиненныхРеквизитов,
												ПравилаИспользованияПолей,
												КолонкиДанных)
	
	 ТаблицаРеквизитов=Новый ТаблицаЗначений;
	 ТаблицаРеквизитов.Колонки.Добавить("ИмяРеквизита");
	 ТаблицаРеквизитов.Колонки.Добавить("ДанныеРеквизита");
	 ТаблицаРеквизитов.Колонки.Добавить("Использование");
	 ТаблицаРеквизитов.Колонки.Добавить("НеИспользоватьДляСинхронизации",ПолучитьОписаниеТиповБулево());
	 
	 Для Каждого СтрПоле ИЗ МассивРеквизитов Цикл
		 
		 МассивАналитика=СтрокаРодитель.Строки.НайтиСтроки(Новый Структура("КодАналитики,ТаблицаАналитикиВИБ",КодАналитики,СтрПоле.ТаблицаАналитикиВИБ));
		 
		 Если МассивАналитика.Количество()=0 Тогда
			 
			 СтрАналитика=СтрокаРодитель.Строки.Добавить();
			 СтрАналитика.КодАналитики=КодАналитики;
			 СтрАналитика.ТаблицаАналитики=СтрПоле.ТаблицаАналитики;
			 СтрАналитика.ТаблицаАналитикиВИБ=СтрПоле.ТаблицаАналитикиВИБ;
			 СтрАналитика.НастройкаСоответствияРеквизит=СтрПоле.НастройкаСоответствияРеквизит;
			 СтрАналитика.ИмяОбъектаМетаДанных=СтрПоле.АналитикаОперанда;
			 СтрАналитика.НеИспользоватьДляСинхронизации=СтрПоле.НеИспользоватьДляСинхронизации; 
			 
			СтрАналитика.СоздаватьНовые				= СтрПоле.ДанныеОбъекта.СоздаватьПриНеудачномПоискеПриИмпорте; 
			СтрАналитика.ОбновлятьРеквизитыПриИмпорте	= СтрПоле.ДанныеОбъекта.ОбновлятьРеквизитыПриИмпорте;
				 
			СтрАналитика.ИмяРеквизита=ИмяРеквизита;
			 
			 СтрАналитика.ПримитивныеРеквизиты=ТаблицаРеквизитов.СкопироватьКолонки();
			 СтрАналитика.СсылочныеРеквизиты=ТаблицаРеквизитов.СкопироватьКолонки();
			 
		 КонецЕсли;
		 
		 Если НЕ КолонкиДанных.Найти(СтрПоле.Синоним)=Неопределено Тогда
			 
			 МассивПуть = СтрРазделить(СтрПоле.РеквизитАналитики, ".");
			 
			 НоваяСтрока=СтрАналитика.ПримитивныеРеквизиты.Добавить();
			 НоваяСтрока.ИмяРеквизита=МассивПуть[МассивПуть.Количество()-1];
			 НоваяСтрока.ДанныеРеквизита=СтрПоле.Синоним;
			 НоваяСтрока.Использование=СтрПоле.ИспользованиеВИБ;
			 НоваяСтрока.НеИспользоватьДляСинхронизации	= СтрПоле.НеИспользоватьДляСинхронизации;
			 
			 Если ЗначениеЗаполнено(СтрПоле.НастройкаСоответствияРеквизит) Тогда
				 
				 СтрокаСоответствия=СтрПоле.НастройкаСоответствияРеквизит.СоответствиеРеквизитов.Найти(НоваяСтрока.ИмяРеквизита,"РеквизитОбъектаВнешнейИБ");
				 
				 Если НЕ СтрокаСоответствия=Неопределено Тогда
					 
					 НоваяСтрока.НеИспользоватьДляСинхронизации		= СтрокаСоответствия.НеИспользоватьДляСинхронизации;
					 НоваяСтрока.Использование						= СтрокаСоответствия.ИспользованиеВИБ;
					 
				 КонецЕсли;
				 
			 КонецЕсли;
 
			 ВИБ_ДобавитьСтруктуруВКэш(ТекСоединениеВИБ,КэшНайденныхЗначений,СтрПоле.ТаблицаАналитикиВИБ,МассивПуть[МассивПуть.Количество()-1]);
			 
		 КонецЕсли;
		 
	 КонецЦикла;
	
	 Для Каждого СтрРеквизит ИЗ СтруктураПодчиненныхРеквизитов Цикл
		 
		    Если (НЕ СтрРеквизит.Ключ=КодАналитики) И СтрНайти(СтрРеквизит.Ключ,КодАналитики+"vzv")=1 Тогда
			  
			 СтрокаСиноним=ПравилаИспользованияПолей.Найти(СтрРеквизит.Ключ,"КодАналитики");
			 
			 МассивКлюч=РазложитьСтрокуВМассивПодстрок(СтрРеквизит.Ключ,"vzv");
  
			 МассивПуть = СтрРазделить(СтрокаСиноним.РеквизитАналитики, ".");
			 
			 ИмяПодчиненногоРеквизита=МассивПуть[МассивКлюч.Количество()-2];
			 			 
			 Если СтрАналитика.СсылочныеРеквизиты.Найти(ИмяПодчиненногоРеквизита,"ИмяРеквизита")=Неопределено Тогда
				 
				 Если ЗначениеЗаполнено(СтрокаСиноним.НастройкаСоответствияРеквизит) Тогда
					 
					 СтрокаСоответствия=СтрокаСиноним.НастройкаСоответствияРеквизит.СоответствиеРеквизитов.Найти(НоваяСтрока.ИмяРеквизита,"РеквизитОбъектаВнешнейИБ");
					 
					 Если НЕ СтрокаСоответствия=Неопределено Тогда
						 
						 ТекНеИспользоватьДляСинхронизации		= СтрокаСоответствия.НеИспользоватьДляСинхронизации;
						 ТекИспользование						= СтрокаСоответствия.ИспользованиеВИБ;
						 
					 Иначе
						 
						 Продолжить;
						 
					 КонецЕсли;
					 
				 Иначе
					 
					 ТекИспользование=СтрокаСиноним.ИспользованиеВИБ;
					 ТекНеИспользоватьДляСинхронизации=СтрокаСиноним.НеИспользоватьДляСинхронизации;
					 
				 КонецЕсли;
				  
				 НоваяСтрока=СтрАналитика.СсылочныеРеквизиты.Добавить();
				 НоваяСтрока.ИмяРеквизита=ИмяПодчиненногоРеквизита;
				 НоваяСтрока.Использование=ТекИспользование;
				 НоваяСтрока.НеИспользоватьДляСинхронизации=ТекНеИспользоватьДляСинхронизации;
				 
				 Если СтрРеквизит.Значение.Количество()>1 Тогда
					 НоваяСтрока.ДанныеРеквизита=СтрРеквизит.Ключ+"vzvСсылка";
				 КонецЕсли;
				 
				 СтрАналитика.ЕстьСсылочные=Истина;
				 
				 ВИБ_ДобавитьСтруктуруВКэш(ТекСоединениеВИБ,КэшНайденныхЗначений,СтрАналитика.ТаблицаАналитикиВИБ,ИмяПодчиненногоРеквизита);
				 				 
			 КонецЕсли;
			 
			 Для Каждого СтрТаблица ИЗ СтрРеквизит.Значение Цикл
				 
				 МассивРеквизитов=ПравилаИспользованияПолей.НайтиСтроки(Новый Структура("КодАналитики,ТаблицаАналитикиВИБ",СтрРеквизит.Ключ,СтрТаблица));
				 ВИБ_ДобавитьСтрокиПодчиненныхРеквизитов(ТекСоединениеВИБ,СтрАналитика,СтрРеквизит.Ключ,МассивРеквизитов,ИмяПодчиненногоРеквизита,КэшНайденныхЗначений,СтруктураПодчиненныхРеквизитов,ПравилаИспользованияПолей,КолонкиДанных);
				 
			 КонецЦикла;
			 	 
		 КонецЕсли;
		 
	 КонецЦикла;
	 
 КонецПроцедуры // ДобавитьСтрокиПодчиненныхРеквизитов
 
 Процедура ВИБ_ДобавитьСтруктуруВКэш(ТекСоединениеВИБ,КэшНайденныхЗначений,ТаблицаАналитики,ИмяРеквизита)
	
	Если КэшНайденныхЗначений.Получить(ТаблицаАналитики)=Неопределено Тогда
		
		ТабНайденныхЗначений=ТекСоединениеВИБ.NewObject("ТаблицаЗначений");
		ТабНайденныхЗначений.Колонки.Добавить("_Ссылка_");
		
		Если ТаблицаАналитики="Справочник.ПроизвольныйКлассификаторУХ" Тогда
			
			ТабНайденныхЗначений.Колонки.Добавить("ИмяОбъектаМетаданных");
			ТабНайденныхЗначений.Индексы.Добавить("ИмяОбъектаМетаданных");
				
		КонецЕсли;
		
		КэшНайденныхЗначений.Вставить(ТаблицаАналитики,ТабНайденныхЗначений);
		
	КонецЕсли;
	
	Если КэшНайденныхЗначений.Get(ТаблицаАналитики).Колонки.Найти(ИмяРеквизита)=Неопределено Тогда
		КэшНайденныхЗначений.Get(ТаблицаАналитики).Колонки.Добавить(ИмяРеквизита);
		КэшНайденныхЗначений.Get(ТаблицаАналитики).Индексы.Добавить(ИмяРеквизита);	 
	КонецЕсли;
	
КонецПроцедуры // ДобавитьСтруктуруВКэш()

Функция ВИБ_ЗаполнитьАналитикуПоПравилам(ТекСоединениеВИБ, ТаблицаДанных, ПравилаИспользованияПолей, СтруктураКлючевыхРеквизитов, 
	СтруктураПодчиненныхРеквизитов, Знач ТаблицаВИБ=Неопределено, Кэш = Неопределено) Экспорт
			
	Если ТаблицаВИБ=Неопределено Тогда
		
		ТаблицаВИБ=ТаблицаДанных;
		
	КонецЕсли;
		
		
	///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	
	Запрос=ТекСоединениеВИБ.NewObject("Запрос");
	
	ТекстВыбор="";
	ТекстСоединенияТаблица="";
	ТекстСоединенияРеквизиты="";
	ТекстСоединенияКонтрагент="";
	ТекстСоединенияОрганизация="";
	ТекстСоединенияОрганизацияДоговор="";
	
	Аналитика="";
	ТекстСвертка="";
	
	ОписаниеТиповСтрокаНеограниченнойДлиныУХ=ПолучитьОписаниеТиповСтроки(0);
	ОписаниеТиповСтрокаНеограниченнойДлиныВИБ=ВИБ_ПолучитьОписаниеТиповСтроки(ТекСоединениеВИБ,0);
	СоответствиеОбъектовМД=ТекСоединениеВИБ.NewObject("Соответствие");
	
	ТекстИменКолонок = "";
	
	Для Инд = 0 По ТаблицаДанных.Колонки.Количество() - 1 Цикл
		
		ТекстИменКолонок = ТекстИменКолонок + ", " + ТаблицаДанных.Колонки[Инд].Имя;
				
	КонецЦикла;
	
	ТабКолонкиТаблицы=ПравилаИспользованияПолей.Скопировать();
	ТабКолонкиТаблицы.Свернуть("КодАналитики,ТаблицаАналитики,ТаблицаАналитикиВИБ,НастройкаСоответствия");
	
	Если СтруктураКлючевыхРеквизитов=Неопределено Тогда
		СтруктураКлючевыхРеквизитов=Новый Структура;
		СтруктураПодчиненныхРеквизитов=Новый Структура;
	КонецЕсли;
	
	Для Каждого Строка ИЗ ТабКолонкиТаблицы Цикл
		
		Если НЕ ЗначениеЗаполнено(Строка.ТаблицаАналитикиВИБ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(Строка.КодАналитики,"vzv")=0 И (НЕ Строка.КодАналитики="ОбъектДляВыгрузки") Тогда
			
			Если НЕ СтруктураКлючевыхРеквизитов.Свойство(Строка.КодАналитики) Тогда
				
				СтруктураКлючевыхРеквизитов.Вставить(Строка.КодАналитики,Новый Массив);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.ТаблицаАналитикиВИБ) И (НЕ СтрНайти(Строка.ТаблицаАналитики,";")>0) Тогда
				
				Если СтруктураКлючевыхРеквизитов[Строка.КодАналитики].Найти(Строка.ТаблицаАналитикиВИБ)=Неопределено Тогда
					
					СтруктураКлючевыхРеквизитов[Строка.КодАналитики].Добавить(Строка.ТаблицаАналитикиВИБ);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если НЕ СтруктураПодчиненныхРеквизитов.Свойство(Строка.КодАналитики) Тогда
				
				СтруктураПодчиненныхРеквизитов.Вставить(Строка.КодАналитики,Новый Массив);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.ТаблицаАналитикиВИБ) И (НЕ СтрНайти(Строка.ТаблицаАналитики,";")>0) Тогда
				
				Если СтруктураПодчиненныхРеквизитов[Строка.КодАналитики].Найти(Строка.ТаблицаАналитикиВИБ)=Неопределено Тогда
					
					СтруктураПодчиненныхРеквизитов[Строка.КодАналитики].Добавить(Строка.ТаблицаАналитикиВИБ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если НЕ СтруктураПодчиненныхРеквизитов.Свойство(Строка.КодАналитики) Тогда
				
				СтруктураПодчиненныхРеквизитов.Вставить(Строка.КодАналитики,Новый Массив);
				
			КонецЕсли;
			
			Если ЗначениеЗаполнено(Строка.ТаблицаАналитикиВИБ) И (НЕ СтрНайти(Строка.ТаблицаАналитики,";")>0) Тогда
				
				Если СтруктураПодчиненныхРеквизитов[Строка.КодАналитики].Найти(Строка.ТаблицаАналитикиВИБ)=Неопределено Тогда
					
					СтруктураПодчиненныхРеквизитов[Строка.КодАналитики].Добавить(Строка.ТаблицаАналитикиВИБ);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	ТекстПолейАналитики="";
	
	ТабГруппировкиДубли=Новый ТаблицаЗначений;
	ТабГруппировкиДубли.Колонки.Добавить("КодАналитики");
	ТабГруппировкиДубли.Колонки.Добавить("ТаблицаАналитики");
	ТабГруппировкиДубли.Колонки.Добавить("НастройкаСоответствия");
	ТабГруппировкиДубли.Колонки.Добавить("МассивПолей");
			
	Для Каждого КодАналитики ИЗ СтруктураКлючевыхРеквизитов Цикл
			
		Если КодАналитики.Значение.Количество()=0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекТаблицаАналитики=КодАналитики.Значение[0];
		
		Если СтрНайти(ТекТаблицаАналитики,"Перечисление")>0 Тогда
						
			Продолжить;
			
		КонецЕсли;
		
		СтрПолеПравило=ТабКолонкиТаблицы.Найти(КодАналитики.Ключ,"КодАналитики");
		
		НоваяСтрока=ТабГруппировкиДубли.Добавить();
		НоваяСтрока.КодАналитики=КодАналитики.Ключ;
		НоваяСтрока.ТаблицаАналитики=ТекТаблицаАналитики;
		НоваяСтрока.НастройкаСоответствия=СтрПолеПравило.НастройкаСоответствия.Наименование;
		
		МассивПолей=Новый Массив;
		
		ТекстВыбор=ТекстВыбор+"
		|ЕСТЬNULL(Таблица_"+КодАналитики.Ключ+".Ссылка,ЗНАЧЕНИЕ("+ТекТаблицаАналитики+".ПустаяСсылка)) КАК "+КодАналитики.Ключ + ", ";
		
		ТекстПолейАналитики=ТекстПолейАналитики+", ВЫРАЗИТЬ ("+КодАналитики.Ключ+" КАК "+ТекТаблицаАналитики+") КАК "+КодАналитики.Ключ;
		
		ТекстСвертка=ТекстСвертка+","+КодАналитики.Ключ;
		
		ТекстСоединенияТаблица=ТекстСоединенияТаблица+"
		|ЛЕВОЕ СОЕДИНЕНИЕ "+ТекТаблицаАналитики+" КАК Таблица_"+КодАналитики.Ключ+" ПО";
				
		ТекстСоединенияРеквизиты="";
		
		///////////////////////////////////////////////////////////////////////////////////////
		// Проверим на наличие реквизитов составного типа
		
		Для Каждого СтрРеквизит ИЗ СтруктураПодчиненныхРеквизитов Цикл
			
			Если СтрРеквизит.Значение.Количество()=0 ИЛИ (НЕ (СтрРеквизит.Ключ=КодАналитики.Ключ ИЛИ СтрНайти(СтрРеквизит.Ключ,КодАналитики.Ключ+"vzv")=1)) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Если СтрРеквизит.Значение.Количество()=1 Тогда // Работаем с реквизитом одного типа
				
				Если СтрНайти(СтрРеквизит.Значение[0],"Перечисление.")>0 Тогда
					
					Продолжить;
					
				КонецЕсли;
				
				МассивРеквизитов=ПравилаИспользованияПолей.НайтиСтроки(Новый Структура("КодАналитики,ТаблицаАналитикиВИБ,НеИспользоватьДляСинхронизации",СтрРеквизит.Ключ,СтрРеквизит.Значение[0],Ложь));
				
				Для Каждого СтрПоле ИЗ МассивРеквизитов Цикл 
					
					КолонкаДанных=ТаблицаДанных.Колонки.Найти(СтрПоле.Синоним);
					
					Если КолонкаДанных=Неопределено ИЛИ КолонкаДанных.ТипЗначения=ОписаниеТиповСтрокаНеограниченнойДлиныУХ Тогда
						Продолжить;
					КонецЕсли;
										
					ТекстПоляКонсолидации=КодАналитики.Ключ+"."+СтрЗаменить(СтрПоле.РеквизитАналитики,СтрЗаменить(КодАналитики.Ключ,"vzv",".")+".","");
					
					ТекстСоединенияРеквизиты=ТекстСоединенияРеквизиты+" И ВТ."+СтрПоле.Синоним+"=Таблица_"+ТекстПоляКонсолидации;
					
					МассивПолей.Добавить(СтрПоле.Синоним);
					
				КонецЦикла;
				
			Иначе // Обрабатываем реквизиты составного типа
				
				ТекстСоединенияТек="";
				
				Для Каждого ТаблицаАналитики ИЗ СтрРеквизит.Значение Цикл
					
					Если СтрНайти(ТаблицаАналитики,"Перечисление.")>0 Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					ТекстСоединенияСоставной="";
					
					МассивРеквизитов=ПравилаИспользованияПолей.НайтиСтроки(Новый Структура("КодАналитики,ТаблицаАналитикиВИБ,НеИспользоватьДляСинхронизации",СтрРеквизит.Ключ,ТаблицаАналитики,Ложь));
					
					Для Каждого СтрПоле ИЗ МассивРеквизитов Цикл 
						
						КолонкаДанных=ТаблицаДанных.Колонки.Найти(СтрПоле.Синоним);
						
						Если КолонкаДанных=Неопределено ИЛИ КолонкаДанных.ТипЗначения=ОписаниеТиповСтрокаНеограниченнойДлиныУХ Тогда
							Продолжить;
						КонецЕсли;
						
						ДанныеРеквизита=ВИБ_ПолучитьДанныеРеквизитаОбъектаМД(ТекСоединениеВИБ,СтрПоле.ТаблицаАналитикиВИБ,СтрПоле.РеквизитАналитики,СоответствиеОбъектовМД);
						
						Если ДанныеРеквизита.Тип=ОписаниеТиповСтрокаНеограниченнойДлиныВИБ Тогда
							
							Продолжить;
							
						КонецЕсли;
						
						ТекстПоляКонсолидации=КодАналитики.Ключ+"."+СтрЗаменить(СтрПоле.РеквизитАналитики,СтрЗаменить(КодАналитики.Ключ,"vzv",".")+".","");
						
						ТекстСоединенияСоставной=ТекстСоединенияСоставной+" И ВТ."+СтрПоле.Синоним+"=Таблица_"+ТекстПоляКонсолидации;
						
					КонецЦикла;
					
					Если НЕ ПустаяСтрока(ТекстСоединенияСоставной) Тогда
						
						ТекстСоединенияТек=ТекстСоединенияТек+" ИЛИ ("+Сред(ТекстСоединенияСоставной,3)+")";
						
					КонецЕсли;
					
				КонецЦикла;

				Если Не ПустаяСтрока(ТекстСоединенияТек) Тогда
					
					ТекстСоединенияРеквизиты=ТекстСоединенияРеквизиты+" И ("+Сред(ТекстСоединенияТек,5)+")";
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТекстСоединенияТаблица=ТекстСоединенияТаблица+Сред(ТекстСоединенияРеквизиты,3);
		НоваяСтрока.МассивПолей=МассивПолей;
		
	КонецЦикла;
	
	ТекстИменКолонок 		= Сред(ТекстИменКолонок, 2);
			
	ТекстВыбор = "ВЫБРАТЬ ВТ.* " + ?(СтрДлина(ТекстВыбор) > 2,", " + Лев(ТекстВыбор, СтрДлина(ТекстВыбор) - 2), "");
	
	Запрос.МенеджерВременныхТаблиц = ТекСоединениеВИБ.NewObject("МенеджерВременныхТаблиц");
	Запрос.Текст = 
	"ВЫБРАТЬ "+ТекстИменКолонок+"
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|;";
		
	Запрос.Текст = Запрос.Текст + ТекстВыбор + " ПОМЕСТИТЬ РезультатыРасчета
	|ИЗ ВременнаяТаблица КАК ВТ"+ТекстСоединенияТаблица + "
	|;
	|ВЫБРАТЬ " + ТекстИменКолонок +ТекстПолейАналитики+" ИЗ РезультатыРасчета
	|;
	|УНИЧТОЖИТЬ ВременнаяТаблица
	|;
	|УНИЧТОЖИТЬ РезультатыРасчета";
	
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаВИБ);	
	РезЗапроса = Запрос.ВыполнитьПакет();
	
	ТабРезультат    = РезЗапроса.Get(2).Выгрузить();	
	Если НЕ ТабРезультат.Count()=ТаблицаДанных.Количество() Тогда // Некорректная синхронизация с возникновением дублирующихся строк
		
		СоответствиеТаблицДублей = ВИБ_ПолучитьСоответствиеТаблицДублей(ТекСоединениеВИБ, ТабРезультат, ТабГруппировкиДубли, Кэш);
		
		ТекстОшибки = НСтр("ru = 'При синхронизации объектов текущей и внешней информационных баз 
                           |		возникли неоднозначности при синхронизации реквизитов, приводящие к дублированию данных. 
                           |		Синхронизация отменена, детальная информация в полном протоколе.'");
				
		ТабРезультат.Очистить();
		
	КонецЕсли;
		
	СтруктураОтвета=Новый Структура;
	СтруктураОтвета.Вставить("ТаблицаДанных",			ТабРезультат);
	СтруктураОтвета.Вставить("ТекстОшибки",				ТекстОшибки);
	СтруктураОтвета.Вставить("СоответствиеТаблицДублей",СоответствиеТаблицДублей);
	СтруктураОтвета.Вставить("СтруктураКлючевыхРеквизитов",СтруктураКлючевыхРеквизитов);
	СтруктураОтвета.Вставить("СтруктураПодчиненныхРеквизитов",СтруктураПодчиненныхРеквизитов);
	
	Возврат СтруктураОтвета;
	
КонецФункции // ЗаполнитьАналитикуВИБПоПравилам()
Функция ВИБ_ПолучитьДанныеРеквизитаОбъектаМД(ТекСоединениеВИБ,ТаблицаАналитики,ПолеРеквизита,СоответствиеОбъектовМД)
	
	Перем ДанныеРеквизита;
	
	ДанныеОбъектаМД=СоответствиеОбъектовМД.Get(ТаблицаАналитики);
	
	Если ДанныеОбъектаМД=Неопределено Тогда
		
		ДанныеОбъектаМД=ТекСоединениеВИБ.NewObject("Структура");;
		ДанныеОбъектаМД.Вставить("ОбъектМетаданныхВИБ",ВИБ_ПолучитьОбъектМетаданныхПоТаблицеАналитики(ТекСоединениеВИБ,ТаблицаАналитики));
		
	КонецЕсли;
	
	ПутьКРеквизиту = СтрРазделить(ПолеРеквизита, ".");
	ИмяРеквизита=ПутьКРеквизиту[ПутьКРеквизиту.Количество()-1];
	
	ДанныеОбъектаМД.Property(ИмяРеквизита,ДанныеРеквизита);
	
	Если ДанныеРеквизита=Неопределено Тогда
		
		ДанныеРеквизита=ВИБ_ПолучитьРеквизитОбъектаМД(ТекСоединениеВИБ,ИмяРеквизита,ДанныеОбъектаМД.ОбъектМетаданныхВИБ);
		ДанныеОбъектаМД.Вставить("ИмяРеквизита",ДанныеРеквизита);
		
	КонецЕсли;
	
	СоответствиеОбъектовМД.Вставить(ТаблицаАналитики,ДанныеОбъектаМД);
	
	Возврат ДанныеРеквизита;		
	
КонецФункции // ПолучитьДанныеРеквизитаОбъектаМД()

// Служебная функция, предназначенная для получения описания типов строки, заданной длины.
// 
// Параметры:
//  ДлинаСтроки - число, длина строки.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для строки указанной длины.
//
Функция ВИБ_ПолучитьОписаниеТиповСтроки(База,ДлинаСтроки) Экспорт
	
	КвалификаторСтроки = База.NewObject("StringQualifiers",ДлинаСтроки);	
	ОписаниеТипов=База.NewObject("TypeDescription","Строка",КвалификаторСтроки);
	
	Возврат ОписаниеТипов;
	
КонецФункции // ПолучитьОписаниеТиповСтроки()

Функция ВИБ_ПолучитьСоответствиеТаблицДублей(ТекСоединениеВИБ, ТабРезультат, ТабГруппировкиДубли, Кэш = Неопределено) Экспорт
	
	Запрос=ТекСоединениеВИБ.NewObject("Запрос");
	Запрос.МенеджерВременныхТаблиц = ТекСоединениеВИБ.NewObject("МенеджерВременныхТаблиц");
	
	Запрос.Текст="Выбрать * Поместить ТабРезультат ИЗ &ТабРезультат КАК ТабРезультат";
	Запрос.УстановитьПараметр("ТабРезультат",ТабРезультат);
	
	Запрос.Выполнить();
	
	СоответствиеТаблицДублей=Новый Соответствие;
	
	Для Каждого Строка ИЗ ТабГруппировкиДубли Цикл
		
		ТекстВыборка="";
		ТекстГруппировка="";
		
		Для Каждого Поле ИЗ Строка.МассивПолей Цикл
			
			ТекстПоле=Поле;
			ТекстПсевдоним="";
			
			МассивПутей=РазложитьСтрокуВМассивПодстрок(Поле,"vzv");
			
			Для Индекс=1 ПО МассивПутей.Количество()-1 Цикл
				
				ТекстПсевдоним=ТекстПсевдоним+"_"+МассивПутей[Индекс];
				
			КонецЦикла;
				
			ТекстВыборка=ТекстВыборка+",ТабРезультат."+Поле+" КАК "+Сред(ТекстПсевдоним,2);
			ТекстГруппировка=ТекстГруппировка+",ТабРезультат."+Поле;
			
		КонецЦикла;
		
		Запрос.Текст="ВЫБРАТЬ "+Сред(ТекстВыборка,2)+", КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТабРезультат."+Строка.КодАналитики+") КАК КоличествоДублей
		|ИЗ ТабРезультат КАК ТабРезультат
		|СГРУППИРОВАТЬ ПО "+Сред(ТекстГруппировка,2)+"
		|ИМЕЮЩИЕ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТабРезультат."+Строка.КодАналитики+")>1";
		
		Результат=Запрос.Выполнить().Выгрузить();
		
		ТаблицаДанных = Новый ТаблицаЗначений;
		ПреобразоватьCOMТаблицуВТаблицуЗначений(ТекСоединениеВИБ, Результат, ТаблицаДанных, Кэш);
		
		Если Результат.Количество()>0 Тогда
			
			СоответствиеТаблицДублей.Вставить(Строка.НастройкаСоответствия,ТаблицаДанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеТаблицДублей;
			
КонецФункции // ПолучитьСоответствиеТаблицДублей()

Функция ВИБ_ПолучитьОбъектМетаданныхПоТаблицеАналитики(ТекСоединениеВИБ,ТаблицаАналитики)
	
	МассивПоиска = СтрРазделить(ТаблицаАналитики,".");
	
	Если МассивПоиска.Количество()=2 Тогда
		
		ТипОбъектаМетаданных=МассивПоиска[0];
		ИмяОбъектаМетаданных=МассивПоиска[1];
		
		РабочийТипМетаданных=ПолучитьРабочийТипОбъектаМетаданных(ТипОбъектаМетаданных);
		ОбъектМетаданных=ТекСоединениеВИБ.MetaData[РабочийТипМетаданных].Найти(ИмяОбъектаМетаданных);
				
	КонецЕсли;
	
	Возврат ОбъектМетаданных;	
	
КонецФункции // ВИБ_ПолучитьОбъектМетаданныхПоТаблицеАналитики()

Функция ВИБ_ПолучитьРеквизитОбъектаМД(ТекСоединениеВИБ,ИмяРеквизита, ОбъектМД)
	
	Для Каждого Реквизит ИЗ ОбъектМД.Реквизиты Цикл
		
		Если Реквизит.Имя=ИмяРеквизита Тогда
			
			Возврат Реквизит;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Попытка
		
		// Стандартные реквизиты
		Для Каждого Реквизит ИЗ ОбъектМД.СтандартныеРеквизиты Цикл
			
			Если Реквизит.Имя=ИмяРеквизита Тогда
				
				Возврат Реквизит;
				
			КонецЕсли;
			
		КонецЦикла;
		
		//Общие реквизиты
		Для каждого Реквизит Из Метаданные.ОбщиеРеквизиты Цикл
			
			Если НЕ Реквизит.Имя=ИмяРеквизита Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			ИспользованиеРеквизита = Реквизит.Content.Find(ОбъектМД.Имя);
			АвтоИспользование = (Реквизит.AutoUse = Метаданные.ObjectProperties.CommonAttributeAutoUse.Use);
			
			Если ИспользованиеРеквизита.Use = Метаданные.ObjectProperties.CommonAttributeUse.DontUse Тогда
				Продолжить;				
			ИначеЕсли НЕ АвтоИспользование И (ИспользованиеРеквизита.Use = Метаданные.ObjectProperties.CommonAttributeUse.Auto) Тогда 
				Продолжить;
			КонецЕсли;
			
			Возврат Реквизит;
			
		КонецЦикла;
		
	Исключение
		
	КонецПопытки;

	Возврат Неопределено;
	
КонецФункции // ПолучитьРеквизитОбъектаМД()

Функция ВИБ_ЗаполнитьНедостающиеАналитики(ТекСоединениеВИБ,
										ТаблицаИмпорта,
										СтруктураКлючевыхРеквизитов,
										СтруктураПодчиненныхРеквизитов,
										ПравилаИспользованияПолей,
										ОбновлениеДочернихЭлементов=Ложь) Экспорт
										
	МассивОшибок=Новый Массив;
										
	КэшСозданныхОбъектов=ТекСоединениеВИБ.NewObject("ТаблицаЗначений");
	КэшСозданныхОбъектов.Колонки.Добавить("Ссылка");
	КэшСозданныхОбъектов.Индексы.Добавить("Ссылка");
		
	ТабОбъектовДляВыгрузки=Новый ТаблицаЗначений;
	ТабОбъектовДляВыгрузки.Колонки.Добавить("ТаблицаАналитики");
	ТабОбъектовДляВыгрузки.Колонки.Добавить("СтруктураРеквизитов");
	ТабОбъектовДляВыгрузки.Колонки.Добавить("КодАналитики");
	
	//////////////////////////////////////////////////////////////////////////////////////////
	
	// Подготовим соответствие для хранения найденных или созданных элементов справочников
	
	КэшНайденныхЗначений=ТекСоединениеВИБ.NewObject("Соответствие");
			 
	 // Подготовим дерево реквизитов для заполнения
	 
	 ДеревоРеквизитов=Новый ДеревоЗначений;
	 ДеревоРеквизитов.Колонки.Добавить("ИмяРеквизита");
	 ДеревоРеквизитов.Колонки.Добавить("КодАналитики");
	 ДеревоРеквизитов.Колонки.Добавить("ТаблицаАналитики");
	 ДеревоРеквизитов.Колонки.Добавить("ТаблицаАналитикиВИБ");
	 ДеревоРеквизитов.Колонки.Добавить("ПримитивныеРеквизиты");
	 ДеревоРеквизитов.Колонки.Добавить("СсылочныеРеквизиты");
	 ДеревоРеквизитов.Колонки.Добавить("ИмяОбъектаМетаДанных");
	 ДеревоРеквизитов.Колонки.Добавить("СоздаватьНовые",ПолучитьОписаниеТиповБулево());
	 ДеревоРеквизитов.Колонки.Добавить("НеИспользоватьДляСинхронизации",ПолучитьОписаниеТиповБулево());
	 ДеревоРеквизитов.Колонки.Добавить("ОбновлятьРеквизитыПриИмпорте",ПолучитьОписаниеТиповБулево());
	 ДеревоРеквизитов.Колонки.Добавить("ЕстьСсылочные",ПолучитьОписаниеТиповБулево());
	 ДеревоРеквизитов.Колонки.Добавить("НастройкаСоответствияРеквизит");
	 ДеревоРеквизитов.Колонки.Добавить("НастройкаСоответствия");
	 
	 /////////////////////////////////////////////////////////////////////////////////////////////////////
	 
	 ТаблицаРеквизитов=Новый ТаблицаЗначений;
	 ТаблицаРеквизитов.Колонки.Добавить("ИмяРеквизита");
	 ТаблицаРеквизитов.Колонки.Добавить("ДанныеРеквизита");
	 ТаблицаРеквизитов.Колонки.Добавить("Использование");
	 ТаблицаРеквизитов.Колонки.Добавить("НеИспользоватьДляСинхронизации",ПолучитьОписаниеТиповБулево());
	 
	 МассивАналитик=Новый Массив;
	 
	 Для Каждого КодАналитики ИЗ СтруктураКлючевыхРеквизитов Цикл
		 
		 МассивАналитик.Добавить(КодАналитики.Ключ);
		 
		 // Добавим колонки для значений перечислений
		 
		 Если СтрНайти(КодАналитики.Значение[0],"Перечисление.")>0 Тогда
			 	 
			РабочаяКолонка=ТаблицаИмпорта.Колонки.Найти(КодАналитики.Ключ);
			РабочаяКолонка.Имя=КодАналитики.Ключ+"vzv1EnumValue";
						 
			ТаблицаИмпорта.Колонки.Добавить(КодАналитики.Ключ,ВИБ_ПолучитьОписаниеТиповСсылка(ТекСоединениеВИБ,СтрЗаменить(КодАналитики.Значение[0],"Перечисление.","ПеречислениеСсылка.")));
			 
		КонецЕсли;
		 
		 МассивРеквизитов=ПравилаИспользованияПолей.НайтиСтроки(Новый Структура("КодАналитики",КодАналитики.Ключ));
		 
		 Для Каждого СтрПоле ИЗ МассивРеквизитов Цикл
			 
			 Если (СтрПоле.Поле="Ссылка" ИЛИ СтрНайти(СтрПоле.Синоним,"vzvЭлементСсылка")>0) И (НЕ СтрПоле.КодАналитики="ОбъектДляВыгрузки") Тогда
				 Продолжить;
			 КонецЕсли;
			 
			 СтрАналитика=ДеревоРеквизитов.Строки.Найти(КодАналитики.Ключ,"КодАналитики");
			 
			 Если СтрАналитика=Неопределено Тогда
				 
				 СтрАналитика=ДеревоРеквизитов.Строки.Добавить();
				 СтрАналитика.КодАналитики					= КодАналитики.Ключ;
				 СтрАналитика.ТаблицаАналитики				= СтрПоле.ТаблицаАналитики;
				 СтрАналитика.ТаблицаАналитикиВИБ			= СтрПоле.ТаблицаАналитикиВИБ;
				 СтрАналитика.НастройкаСоответствия			= СтрПоле.НастройкаСоответствия;
				 СтрАналитика.НастройкаСоответствияРеквизит	= СтрПоле.НастройкаСоответствияРеквизит;
				 СтрАналитика.ИмяОбъектаМетаДанных			= СтрПоле.АналитикаОперанда;
				 СтрАналитика.НеИспользоватьДляСинхронизации= СтрПоле.НеИспользоватьДляСинхронизации;
				 
				 СтрАналитика.СоздаватьНовые				= СтрПоле.ДанныеОбъекта.СоздаватьПриНеудачномПоискеПриИмпорте; 
				 СтрАналитика.ОбновлятьРеквизитыПриИмпорте	= СтрПоле.ДанныеОбъекта.ОбновлятьРеквизитыПриИмпорте;		 
				 
				 СтрАналитика.ПримитивныеРеквизиты=ТаблицаРеквизитов.СкопироватьКолонки();	 
				 СтрАналитика.СсылочныеРеквизиты=ТаблицаРеквизитов.СкопироватьКолонки();
				 
			 КонецЕсли;
			 
			 Если НЕ ТаблицаИмпорта.Колонки.Найти(СтрПоле.Синоним)=Неопределено Тогда
				 
				 НоваяСтрока=СтрАналитика.ПримитивныеРеквизиты.Добавить();
				 НоваяСтрока.ИмяРеквизита=СтрПоле.РеквизитАналитики;
				 НоваяСтрока.ДанныеРеквизита=СтрПоле.Синоним;
				 НоваяСтрока.Использование=СтрПоле.ИспользованиеВИБ;
				 НоваяСтрока.НеИспользоватьДляСинхронизации	= СтрПоле.НеИспользоватьДляСинхронизации;
				 
				 ВИБ_ДобавитьСтруктуруВКэш(ТекСоединениеВИБ,КэшНайденныхЗначений,СтрПоле.ТаблицаАналитикиВИБ,СтрПоле.РеквизитАналитики);
				 
			 КонецЕсли;
			 
		 КонецЦикла;
		 
		 Для Каждого СтрРеквизит ИЗ СтруктураПодчиненныхРеквизитов Цикл
			 
			  Если (НЕ СтрРеквизит.Ключ=КодАналитики.Ключ) И СтрНайти(СтрРеквизит.Ключ,КодАналитики.Ключ+"vzv")=1 Тогда
				 
				 	СтрокаСиноним=ПравилаИспользованияПолей.Найти(СтрРеквизит.Ключ,"КодАналитики");
				  
				 	МассивПуть = СтрРазделить(СтрокаСиноним.РеквизитАналитики,".");
			 
			 		ИмяРеквизита=МассивПуть[0]; 
							 
				 Если СтрАналитика.СсылочныеРеквизиты.Найти(ИмяРеквизита,"ИмяРеквизита")=Неопределено Тогда
					 
					 НоваяСтрока=СтрАналитика.СсылочныеРеквизиты.Добавить();
					 НоваяСтрока.ИмяРеквизита=ИмяРеквизита;
					 НоваяСтрока.Использование=СтрокаСиноним.ИспользованиеВИБ;
					 НоваяСтрока.НеИспользоватьДляСинхронизации=СтрокаСиноним.НеИспользоватьДляСинхронизации;
					 
					 Если ЗначениеЗаполнено(СтрАналитика.НастройкаСоответствия) Тогда
						 
						 СтрокаСоответствия=СтрАналитика.НастройкаСоответствия.СоответствиеРеквизитов.Найти(НоваяСтрока.ИмяРеквизита,"РеквизитОбъектаВнешнейИБ");
						 
						 Если НЕ СтрокаСоответствия=Неопределено Тогда
							 
							 НоваяСтрока.НеИспользоватьДляСинхронизации		= СтрокаСоответствия.НеИспользоватьДляСинхронизации;
							 НоваяСтрока.Использование						= СтрокаСоответствия.ИспользованиеВИБ;
							 
						 КонецЕсли;
						 
					 КонецЕсли;
					 
					 Если СтрРеквизит.Значение.Количество()>1 Тогда
						 НоваяСтрока.ДанныеРеквизита=СтрРеквизит.Ключ+"vzvСсылка";
					 КонецЕсли;
					 
					 СтрАналитика.ЕстьСсылочные=Истина;
					 
					 ВИБ_ДобавитьСтруктуруВКэш(ТекСоединениеВИБ,КэшНайденныхЗначений,СтрАналитика.ТаблицаАналитикиВИБ,МассивПуть[0]);
					 
					 Для Каждого СтрТаблица ИЗ СтрРеквизит.Значение Цикл
						 
						 МассивРеквизитов=ПравилаИспользованияПолей.НайтиСтроки(Новый Структура("КодАналитики,ТаблицаАналитикиВИБ",СтрРеквизит.Ключ,СтрТаблица));
						 ВИБ_ДобавитьСтрокиПодчиненныхРеквизитов(ТекСоединениеВИБ,СтрАналитика,СтрРеквизит.Ключ,МассивРеквизитов,МассивПуть[0],КэшНайденныхЗначений,СтруктураПодчиненныхРеквизитов,ПравилаИспользованияПолей,ТаблицаИмпорта.Колонки);
						 
					 КонецЦикла;
					 
				 КонецЕсли;
				 
			 КонецЕсли;
			 
		 КонецЦикла;
		 
	 КонецЦикла;	 

	 ///////////////////////////////////////////////////////////////////////////////////////////////
	 // Создадим новые элементы и обновим существующие
	 
	 Для Каждого СтрДанные Из ТаблицаИмпорта Цикл
		 
		 ФлагОшибкиИмпортаТек=Ложь;
		 
		 Для Каждого Аналитика ИЗ СтруктураКлючевыхРеквизитов Цикл
			 
			 ЕстьИерархияГрупп=Ложь;
			 
			 ДанныеРеквизитов=ДеревоРеквизитов.Строки.Найти(Аналитика.Ключ,"КодАналитики");
			 
			 Если СтрНайти(ДанныеРеквизитов.ТаблицаАналитикиВИБ,"Справочник.")>0 Тогда
				 
				 ИмяСправочника=СтрЗаменить(ДанныеРеквизитов.ТаблицаАналитикиВИБ,"Справочник.","");
				 
				 МетаДанныеОбъекта=ТекСоединениеВИБ.MetaData.Catalogs[ИмяСправочника]; 
				 ЕстьИерархияГрупп=(МетаДанныеОбъекта.Иерархический И МетаДанныеОбъекта.ВидИерархии=ТекСоединениеВИБ.MetaData.ObjectProperties.ВидИерархии.ИерархияГруппИЭлементов);
				 
			ИначеЕсли СтрНайти(ДанныеРеквизитов.ТаблицаАналитики,"ПланВидовХарактеристик.")>0 Тогда
				 
				 ИмяСправочника=СтрЗаменить(ДанныеРеквизитов.ТаблицаАналитики,"ПланВидовХарактеристик.","");
				 
				 МетаДанныеОбъекта=ТекСоединениеВИБ.MetaData.ChartsOfCharacteristicTypes[ИмяСправочника]; 
				 ЕстьИерархияГрупп=МетаДанныеОбъекта.Иерархический;
				 
			 КонецЕсли;
			 
			 Если СтрНайти(ДанныеРеквизитов.ТаблицаАналитикиВИБ,"Перечисление.")>0 Тогда
				 
				 ИмяПеречисления=СтрЗаменить(ДанныеРеквизитов.ТаблицаАналитикиВИБ,"Перечисление.","");
				 ТекЗначениеПеречисления=ВИБ_ПолучитьЗначениеПеречисленияПоИмени(ТекСоединениеВИБ,ИмяПеречисления,СтрДанные[Аналитика.Ключ+"vzv1EnumValue"],ДанныеРеквизитов.НастройкаСоответствия);
				 
				 Если ТекЗначениеПеречисления=Неопределено Тогда
					 
					 ФлагОшибкиИмпортаТек=Истина;
					 ТекстСообщения = НСтр("ru = 'При экспорте объекта %КодАналитики% не удалось получить значение перечисления
					 |					 %ТаблицаАналитикиВИБ%: %ДанныеРеквизита%'");
					 ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодАналитики%", Строка(ДанныеРеквизитов.КодАналитики));
					 ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаАналитикиВИБ%", Строка(ДанныеРеквизитов.ТаблицаАналитикиВИБ));
					 ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДанныеРеквизита%", Строка(СтрДанные[ДанныеРеквизитов.ПримитивныеРеквизиты[0].ДанныеРеквизита]));
					 
					 МассивОшибок.Добавить(ТекстСообщения);
					 					 
					 Продолжить;
					 
				 Иначе
					 					 
					 СтрДанные[Аналитика.Ключ]=ТекЗначениеПеречисления;
					 
				 КонецЕсли;			 
				 
			 ИначеЕсли НЕ ПолучитьЗначениеЗаполнено(ТекСоединениеВИБ,СтрДанные[Аналитика.Ключ]) Тогда
				 				 
				 ПустоеЗначениеАналитики = Истина; // Признак того, что импортируется запись с неопределенным значением аналитики.
				 
				 Для Каждого СтрРеквизит Из ДанныеРеквизитов.ПримитивныеРеквизиты Цикл
					 Если ПолучитьЗначениеЗаполнено(ТекСоединениеВИБ,СтрДанные[СтрРеквизит.ДанныеРеквизита]) И (НЕ СтрДанные[СтрРеквизит.ДанныеРеквизита]=Ложь) Тогда
						 ПустоеЗначениеАналитики = Ложь;
						 Прервать;
					 КонецЕсли;
				 КонецЦикла;
				 
				 Если ПустоеЗначениеАналитики Тогда
					 
					 Если СтрНайти(ДанныеРеквизитов.ТаблицаАналитикиВИБ,"Справочник.")>0 Тогда
						 
						 СтрДанные[Аналитика.Ключ] = ТекСоединениеВИБ.Catalogs[СтрЗаменить(ДанныеРеквизитов.ТаблицаАналитикиВИБ,"Справочник.","")].ПустаяСсылка();
						 
					 ИначеЕсли СтрНайти(ДанныеРеквизитов.ТаблицаАналитикиВИБ,"ПланВидовХарактеристик.")>0 Тогда
						 
						 СтрДанные[Аналитика.Ключ] = ТекСоединениеВИБ.ChartsOfCharacteristicTypes[СтрЗаменить(ДанныеРеквизитов.ТаблицаАналитикиВИБ,"ПланВидовХарактеристик.","")].ПустаяСсылка();
						 
					 КонецЕсли;
					 
				 ИначеЕсли ДанныеРеквизитов.СоздаватьНовые Тогда
					 
					 Если НЕ ДанныеРеквизитов.ЕстьСсылочные Тогда
						 
						 СтруктураПоиска=ТекСоединениеВИБ.NewObject("Структура");
						 
						 Для Каждого СтрРеквизит ИЗ ДанныеРеквизитов.ПримитивныеРеквизиты Цикл
							 
							 Если НЕ СтрРеквизит.НеИспользоватьДляСинхронизации=Истина Тогда
								 СтруктураПоиска.Вставить(СтрРеквизит.ИмяРеквизита,СтрДанные[СтрРеквизит.ДанныеРеквизита]);
							 КонецЕсли;
							 
						 КонецЦикла;
						 
						 Если ДанныеРеквизитов.ТаблицаАналитикиВИБ="Справочник.ПроизвольныйКлассификаторУХ" Тогда
							 
							 СтруктураПоиска.Вставить("ИмяОбъектаМетаданных",ДанныеРеквизитов.ИмяОбъектаМетаДанных);
							 
						 КонецЕсли;
						 						 
						 НайденныеСтроки=КэшНайденныхЗначений.Get(ДанныеРеквизитов.ТаблицаАналитикиВИБ).НайтиСтроки(СтруктураПоиска);
						 
						 Если НайденныеСтроки.Количество()>0 Тогда
							 
							 СтрДанные[Аналитика.Ключ]=НайденныеСтроки.Get(0)._Ссылка_;
							 
						 Иначе
							 
							 ЭлементАналитики=ВИБ_ПолучитьЭлементАналитики(СтрДанные,
							 					ДанныеРеквизитов,
												КэшНайденныхЗначений,
												ТекСоединениеВИБ,
												ФлагОшибкиИмпортаТек,
												КэшСозданныхОбъектов,
												ТабОбъектовДляВыгрузки,
												МассивОшибок);
							 
							 Если НЕ ФлагОшибкиИмпортаТек Тогда
								 
								 СтрДанные[Аналитика.Ключ]=ЭлементАналитики;
								 								 
							 КонецЕсли;		
							 
						 КонецЕсли;
						 
					 Иначе
						 
						  ЭлементАналитики=ВИБ_ПолучитьЭлементАналитики(СтрДанные,
							 					ДанныеРеквизитов,
												КэшНайденныхЗначений,
												ТекСоединениеВИБ,
												ФлагОшибкиИмпортаТек,
												КэшСозданныхОбъектов,
												ТабОбъектовДляВыгрузки,
												МассивОшибок);
						 
						 Если НЕ ФлагОшибкиИмпортаТек Тогда
							 
							 СтрДанные[Аналитика.Ключ]=ЭлементАналитики;
							 							 							 
						 КонецЕсли;
						 
					 КонецЕсли;
					 
				 Иначе // если флажок создания при неудачном поиске не взведен...
					 
					 ФлагОшибкиИмпорта=Истина;
					 
					 ТекстСообщения="";
					 ТекстАналитики="";
					 
					 Для Каждого Строка ИЗ ПравилаИспользованияПолей Цикл
						 
						 Если СтрНайти(Строка.Синоним,Аналитика.Ключ)>0 И НЕ Строка.НеИспользоватьДляСинхронизации Тогда
							 
							 ТекстСообщения=ТекстСообщения+(Строка.РеквизитАналитики+" - "+СтрДанные[Строка.Синоним])+Символы.ПС;
							 ТекстАналитики=Строка.ТаблицаАналитики;
							 
						 КонецЕсли;
						 
					 КонецЦикла;
					 
					 ТекстОшибки = НСтр("ru = 'Не удается найти значение аналитики %КлючАналитики% (%ТекстАналитики%).
					 |					 Значения реквизитов аналитики: 
					 |					 %ТекстСообщения%'");
					 ТекстОшибки = СтрЗаменить(ТекстОшибки, "%КлючАналитики%", Строка(Аналитика.Ключ));
					 ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТекстАналитики%", Строка(ТекстАналитики));
					 ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ТекстСообщения%", Строка(ТекстСообщения));
					 
					 МассивОшибок.Добавить(ТекстОшибки);
					 
				 КонецЕсли;
				 
			 ИначеЕсли (ОбновлениеДочернихЭлементов ИЛИ ДанныеРеквизитов.ОбновлятьРеквизитыПриИмпорте) И ПолучитьЗначениеЗаполнено(ТекСоединениеВИБ,СтрДанные[Аналитика.Ключ]) Тогда
				 
				 ЕстьИзменения=Ложь;
				 СтруктураЗаписи=ТекСоединениеВИБ.NewObject("Структура");
				 
				 СтрокаГруппа=ДанныеРеквизитов.ПримитивныеРеквизиты.Найти("ЭтоГруппа","ИмяРеквизита");
				 
				 Если СтрокаГруппа=Неопределено Тогда
					 Если ЕстьИерархияГрупп Тогда
						 ЭтоГруппа=СтрДанные[Аналитика.Ключ].ЭтоГруппа;
					 Иначе	 
						 ЭтоГруппа=Ложь;
					 КонецЕсли;
				 Иначе
					 ЭтоГруппа=СтрДанные[СтрокаГруппа.ДанныеРеквизита];
				 КонецЕсли;
				 
				 ДанныеРеквизитов.СсылочныеРеквизиты.Сортировать("ИмяРеквизита");
				 
				 Владелец=Неопределено;
				 
				 Для ИндексРеквизита=0 ПО ДанныеРеквизитов.СсылочныеРеквизиты.Количество()-1 Цикл
					 
					 СтрРеквизит=ДанныеРеквизитов.СсылочныеРеквизиты[ИндексРеквизита];
					 
					 Если НЕ ВИБ_ПроверитьВозможностьИспользованияРеквизита(СтрРеквизит.Использование,ЭтоГруппа) Тогда
						 Продолжить;
					 КонецЕсли;
					 
					 ЗначениеРеквизита=Неопределено;
					 
					 МассивРеквизитов=ДанныеРеквизитов.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита",СтрРеквизит.ИмяРеквизита));
					 
					 Если МассивРеквизитов.Количество()=1 Тогда 
						 
						 ЗначениеРеквизита=ВИБ_ПолучитьЗначениеПодчиненногоРеквизита(СтрДанные,
						 МассивРеквизитов[0],
						 КэшНайденныхЗначений,
						 ТекСоединениеВИБ,
						 ФлагОшибкиИмпортаТек,
						 КэшСозданныхОбъектов,
						 ТабОбъектовДляВыгрузки,
						 Новый Структура,
						 МассивОшибок,?(СтрРеквизит.ИмяРеквизита="Родитель",Владелец,Неопределено));
						 
					 ИначеЕсли МассивРеквизитов.Количество()>1 Тогда
						 
						 ТаблицаАналитики=СтрДанные[СтрРеквизит.ДанныеРеквизита];
						 
						 Если ПолучитьЗначениеЗаполнено(ТекСоединениеВИБ,ТаблицаАналитики) Тогда
							 
							 МассивРеквизитов=ДанныеРеквизитов.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита,ТаблицаАналитики",СтрРеквизит.ИмяРеквизита,ТаблицаАналитики));
							 
							 Если МассивРеквизитов.Количество()=1 Тогда 
								 
								 ЗначениеРеквизита=ВИБ_ПолучитьЗначениеПодчиненногоРеквизита(СтрДанные,
								 МассивРеквизитов[0],
								 КэшНайденныхЗначений,
								 ТекСоединениеВИБ,
								 ФлагОшибкиИмпортаТек,
								 КэшСозданныхОбъектов,
								 ТабОбъектовДляВыгрузки,
								 Новый Структура,
								 МассивОшибок,?(СтрРеквизит.ИмяРеквизита="Родитель",Владелец,Неопределено));
								 
							 КонецЕсли;
							 
						 КонецЕсли;
						 
					 Иначе
						 
						 Продолжить;
						 
					 КонецЕсли;
					 
					 Если ФлагОшибкиИмпортаТек Тогда
						 
						 Продолжить;
						 
					 Иначе
						 
						 Если ПолучитьЗначениеЗаполнено(ТекСоединениеВИБ,ЗначениеРеквизита)
							 И НЕ СтрДанные[Аналитика.Ключ][СтрРеквизит.ИмяРеквизита]=ЗначениеРеквизита Тогда
							 
							 СтруктураЗаписи.Вставить(СтрРеквизит.ИмяРеквизита,ЗначениеРеквизита);	
							 ЕстьИзменения=Истина;
							 
						 КонецЕсли;
						 
					 КонецЕсли;	
					 
					 Если СтрРеквизит.ИмяРеквизита="Владелец" Тогда
						 
						 Владелец=ЗначениеРеквизита;
						 
					 КонецЕсли;
					 
				 КонецЦикла;		
				 
				 Если НЕ ФлагОшибкиИмпортаТек Тогда
					 
					 Для Каждого СтрПоля ИЗ ДанныеРеквизитов.ПримитивныеРеквизиты Цикл 
						 
						 Если СтрПоля.ИмяРеквизита="ЭтоГруппа" ИЛИ
							 СтрДанные[СтрПоля.ДанныеРеквизита]=Ложь
							 ИЛИ (НЕ (ПолучитьЗначениеЗаполнено(ТекСоединениеВИБ,СтрДанные[СтрПоля.ДанныеРеквизита]) И ВИБ_ПроверитьВозможностьИспользованияРеквизита(СтрПоля.Использование,ЭтоГруппа))) Тогда
							 Продолжить;
						 КонецЕсли;
						 
						 Если НЕ СокрЛП(СтрДанные[Аналитика.Ключ][СтрПоля.ИмяРеквизита])=СокрЛП(СтрДанные[СтрПоля.ДанныеРеквизита]) Тогда
							 
							 СтруктураЗаписи.Вставить(СтрПоля.ИмяРеквизита,СокрЛП(СтрДанные[СтрПоля.ДанныеРеквизита]));
							 ЕстьИзменения=Истина;
							 
						 КонецЕсли;
						 
					 КонецЦикла;
					 					 
					 Если ЕстьИзменения Тогда
						 
						 ТекОбъект = СтрДанные[Аналитика.Ключ].ПолучитьОбъект();
						 
						 Для Каждого Элемент Из СтруктураЗаписи Цикл
							 
							 Попытка
								 
								 ТекОбъект[Элемент.Ключ]=Элемент.Значение;
								 
							 Исключение
								 
							 КонецПопытки;
							 
						 КонецЦикла;
						 
						ТекОбъект.ОбменДанными.Загрузка=Истина;
						 
						 Попытка
							 
							 ТекОбъект.Записать();
							 
						 Исключение
							 
							 ТекстСообщения = НСтр("ru = 'Не удалось обновить данные по элементу справочника %НаименованиеОбъект%'");
							 ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НаименованиеОбъект%", Строка(ТекОбъект.Наименование));
							 
							 МассивОшибок.Добавить(ТекстСообщения);
							 
						 КонецПопытки;
						 
						 ТекОбъект = Неопределено;
						 
					 КонецЕсли;
					 
				 КонецЕсли;
				 
			 КонецЕсли;
			 
		 КонецЦикла;
		 
		 ФлагОшибкиИмпорта=ФлагОшибкиИмпортаТек; 
		 
	 КонецЦикла;
	 
	 ТабОбработанныхОбъектов=Новый ТаблицаЗначений;
	 ТабОбработанныхОбъектов.Колонки.Добавить("ИсходныйОбъектБД");
	 ТабОбработанныхОбъектов.Колонки.Добавить("ОбработанныйОбъектБД");
	 
	 Если МассивАналитик.Количество()=1 И (НЕ ТаблицаИмпорта.Колонки.Найти("ОбъектДляВыгрузки")=Неопределено) Тогда	 
		 
		 Для Каждого Строка ИЗ ТаблицаИмпорта Цикл
			 
			 НоваяСтрока=ТабОбработанныхОбъектов.Добавить();
			 НоваяСтрока.ИсходныйОбъектБД=Строка.ОбъектДляВыгрузки;
			 НоваяСтрока.ОбработанныйОбъектБД=ПолучитьXMLString(ТекСоединениеВИБ,Строка[МассивАналитик[0]]);
			 
		 КонецЦикла;
		 
	 КонецЕсли;
		 
	 СтруктраОтвета=Новый Структура("МассивОшибок,ТабОбъектовДляВыгрузки,ТабОбработанныхОбъектов",МассивОшибок,ТабОбъектовДляВыгрузки,ТабОбработанныхОбъектов);
	 
	 Возврат СтруктраОтвета;
	 	 
 КонецФункции // ВИБ_ЗаполнитьНедостающиеАналитики()

 Функция ВИБ_ЗаполнитьСвязанныеТаблицы(ТекСоединениеВИБ,ТабПравилаДляВыгрузки,СоответствиеНаборов,ДанныеПриемника) Экспорт
	
	МассивОшибок=Новый Массив;
	
	Для Каждого Элемент ИЗ СоответствиеНаборов Цикл
		
		ТаблицаДанных=Элемент.Значение.ТаблицаДанных;
		ТаблицаВИБ=Элемент.Значение.ТаблицаВИБ;
		ОбъектСсылка=ПолучитьСсылкуПОСтрокеUUID(ТекСоединениеВИБ,ДанныеПриемника.ТипОбъектаМетаданных,ДанныеПриемника.ИмяОбъектаМетаданных,Элемент.Ключ);
		
		Если ТаблицаДанных.Количество()>0 Тогда
			
			СтруктураКлючевыхРеквизитов = Новый Структура;
			СтруктураПодчиненныхРеквизитов = Новый Структура;
			
			СтруктураПравила= ВИБ_ЗаполнитьАналитикуПоПравилам(ТекСоединениеВИБ,ТаблицаДанных,ТабПравилаДляВыгрузки,СтруктураКлючевыхРеквизитов,СтруктураПодчиненныхРеквизитов,ТаблицаВИБ);
			
			Если Не ПустаяСтрока(СтруктураПравила.ТекстОшибки) Тогда
				
				Возврат СтруктураПравила;
				
			КонецЕсли;
			
			РезультатЗаполнения=ВИБ_ЗаполнитьНедостающиеАналитики(ТекСоединениеВИБ,
			СтруктураПравила.ТаблицаДанных,
			СтруктураПравила.СтруктураКлючевыхРеквизитов,
			СтруктураПравила.СтруктураПодчиненныхРеквизитов,
			ТабПравилаДляВыгрузки);
			
			Для Каждого Элемент ИЗ РезультатЗаполнения.МассивОшибок Цикл
				
				МассивОшибок.Добавить(Элемент);
				
			КонецЦикла;
			
		Иначе 
			
			СтруктураПравила=Новый Структура("ТаблицаДанных",?(ТаблицаВИБ=Неопределено,ТаблицаДанных,ТаблицаВИБ));
					
		КонецЕсли;																	
										
		Если ДанныеПриемника.ТипОбъектаВИБ="РегистрСведений" Тогда
			
			НаборЗаписей=ТекСоединениеВИБ.РегистрыСведений[ДанныеПриемника.ИмяТаблицы].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор[ДанныеПриемника.ПолеОтбора].Установить(ОбъектСсылка);
			
			НаборЗаписей.Прочитать();
			НаборЗаписей.Очистить();
			
			Для Каждого Строка ИЗ СтруктураПравила.ТаблицаДанных Цикл
				
				НоваяСтрока=НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
				НоваяСтрока[ДанныеПриемника.ПолеОтбора]=ОбъектСсылка;
				
			КонецЦикла;
			
			НаборЗаписей.Записать(Истина);
			
		Иначе
			
			Попытка
				
				РабочийОбъект=ОбъектСсылка.ПолучитьОбъект();
				
				РабочийОбъект[ДанныеПриемника.ИмяТаблицы].Очистить();
				
				Для Каждого Строка ИЗ СтруктураПравила.ТаблицаДанных Цикл
					
					НоваяСтрока=РабочийОбъект[ДанныеПриемника.ИмяТаблицы].Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
					
				КонецЦикла;
				
				РабочийОбъект.ОбменДанными.Загрузка=Истина;
				РабочийОбъект.Записать();
				
			Исключение
				
			КонецПопытки;
			
		КонецЕсли;
														
	КонецЦикла;
	
	Возврат МассивОшибок;
	 
КонецФункции // ВИБ_ЗаполнитьСвязанныеТаблицы() 

 
 Функция ВИБ_ПроверитьВозможностьИспользованияРеквизита(ИспользованиеРеквизита,ЭтоГруппа)
	
	Если Не ЗначениеЗаполнено(ИспользованиеРеквизита) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЭтоГруппа Тогда
		
		Возврат (ИспользованиеРеквизита="ДляГруппы" ИЛИ ИспользованиеРеквизита="ДляГруппыИЭлемента");
		
	Иначе
		
		Возврат (ИспользованиеРеквизита="ДляЭлемента" ИЛИ ИспользованиеРеквизита="ДляГруппыИЭлемента");
		
	КонецЕсли	
	
КонецФункции // ПроверитьВозможностьИспользованияРеквизита()

// Служебная функция, предназначенная для получения описания типов булево,//
// Возвращаемое значение:
//  Объект "ОписаниеТипов"
//
Функция ВИБ_ПолучитьОписаниеТиповБулево(База) Экспорт
	
	ОписаниеТипов=База.NewObject("TypeDescription","Булево");
	
	Возврат ОписаниеТипов;
	
КонецФункции	// ПолучитьОписаниеТиповЧисла()

Функция ВИБ_ПолучитьОписаниеТиповСсылка(База,Описание)
	
	ОписаниеТипов=База.NewObject("TypeDescription",Описание);
	
	Возврат ОписаниеТипов;
	
КонецФункции	// ПолучитьОписаниеТиповЧисла()

Функция ВИБ_ПолучитьЗначениеПеречисленияПоИмени(ТекСоединениеВИБ,ИмяОбъекта,ИмяПеречисления,НастройкаСоответствия=Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИмяПеречисления) Тогда
		
		Попытка
			Возврат ТекСоединениеВИБ.Enums[ИмяОбъекта].ПустаяСсылка();
		Исключение
			Возврат Неопределено;
		КонецПопытки
		
	Иначе
		
		Попытка
			
			Возврат ТекСоединениеВИБ.Enums[ИмяОбъекта][ИмяПеречисления];
			
		Исключение // Возможно, передан синоним
			
			Попытка
				
				Для Каждого СтрПеречисление ИЗ ТекСоединениеВИБ.MetaData.Enums[ИмяОбъекта].ЗначенияПеречисления Цикл
					
					Если СтрПеречисление.Синоним=СокрЛП(ИмяПеречисления) Тогда
						
						Возврат ТекСоединениеВИБ.Enums[ИмяОбъекта][СтрПеречисление.Имя];
						
					КонецЕсли;
					
				КонецЦикла;
				
				Возврат ?(НастройкаСоответствия=Неопределено,ВИБ_ПолучитьПустуюСсылкуПеречисление(ТекСоединениеВИБ,ИмяОбъекта),ВИБ_ПолучитьЗначениеПеречисленияПоНастройке(ТекСоединениеВИБ,ИмяОбъекта,ИмяПеречисления,НастройкаСоответствия));
				
			Исключение
				
				Возврат ?(НастройкаСоответствия=Неопределено,ВИБ_ПолучитьПустуюСсылкуПеречисление(ТекСоединениеВИБ,ИмяОбъекта),ВИБ_ПолучитьЗначениеПеречисленияПоНастройке(ТекСоединениеВИБ,ИмяОбъекта,ИмяПеречисления,НастройкаСоответствия));
				
			КонецПопытки;
			
		КонецПопытки
		
	КонецЕсли;
		
КонецФункции // ВИБ_ПолучитьЗначениеПеречисленияПоИмени()


Функция ВИБ_ПолучитьПустуюСсылкуПеречисление(ТекСоединениеВИБ,ИмяОбъекта)
	
	Попытка
		Возврат ТекСоединениеВИБ.Enums[ИмяОбъекта].ПустаяСсылка();
	Исключение
		Возврат Неопределено;
	КонецПопытки
	
КонецФункции // ВИБ_ПолучитьПустуюСсылкуПеречисление()

Функция ВИБ_ПолучитьЗначениеПеречисленияПоНастройке(ТекСоединениеВИБ,ИмяОбъекта,ИмяПеречисления,НастройкаСоответствия)
	
	СтрокаСоответствия=НастройкаСоответствия.СоответствиеЗначенийПеречислений.Найти(ИмяПеречисления,"ЗначениеТекущейИБ");
	
	Если СтрокаСоответствия=Неопределено Тогда
		
		СтрокаСоответствия=НастройкаСоответствия.СоответствиеЗначенийПеречислений.Найти(ИмяПеречисления,"ПредставлениеТекущейИБ");
		
	КонецЕсли;
	
	Если СтрокаСоответствия=Неопределено Тогда
		
		Возврат ВИБ_ПолучитьПустуюСсылкуПеречисление(ТекСоединениеВИБ,ИмяОбъекта);
		
	Иначе
		
		Попытка
			
			Возврат ТекСоединениеВИБ.Enums[ИмяОбъекта][СтрокаСоответствия.ЗначениеВнешнейИБ];
			
		Исключение
			
			Возврат ВИБ_ПолучитьПустуюСсылкуПеречисление(ТекСоединениеВИБ,ИмяОбъекта);
			
		КонецПопытки;
		
	КонецЕсли;
		
	
КонецФункции // ПолучитьЗначениеПеречисленияПоНастройке()

Функция  ВИБ_ПолучитьЭлементАналитики(СтрДанные,
	ДанныеРеквизитов,
	КэшНайденныхЗначений,
	ТекСоединениеВИБ,
	ФлагОшибкиИмпортаТек,
	КэшСозданныхОбъектов,
	ТабОбъектовДляВыгрузки,
	МассивОшибок)
	
	СтруктураЗаписи=ТекСоединениеВИБ.NewObject("Структура");
	СтруктураПоиска=ТекСоединениеВИБ.NewObject("Структура");
	СтруктураОбновление=ТекСоединениеВИБ.NewObject("Структура");
	
	СтруктураЗначенийРеквизитов=Новый Структура;
	
	СтрокаГруппа=ДанныеРеквизитов.ПримитивныеРеквизиты.Найти("ЭтоГруппа","ИмяРеквизита");
	
	Если СтрокаГруппа=Неопределено Тогда
		ЭтоГруппа=Ложь;
	Иначе
		ЭтоГруппа=СтрДанные[СтрокаГруппа.ДанныеРеквизита];
	КонецЕсли;
	
	Если ДанныеРеквизитов.ЕстьСсылочные Тогда
		
		ДанныеРеквизитов.СсылочныеРеквизиты.Сортировать("ИмяРеквизита");
		
		Владелец=Неопределено;
		
		Для ИндексРеквизита=0 ПО ДанныеРеквизитов.СсылочныеРеквизиты.Количество()-1 Цикл
			
			СтрРеквизит=ДанныеРеквизитов.СсылочныеРеквизиты[ИндексРеквизита];
			
			Если НЕ ВИБ_ПроверитьВозможностьИспользованияРеквизита(СтрРеквизит.Использование,ЭтоГруппа) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеРеквизита=Неопределено;
			
			МассивРеквизитов=ДанныеРеквизитов.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита",СтрРеквизит.ИмяРеквизита));
			
			Если МассивРеквизитов.Количество()=1 Тогда 
				
				ЗначениеРеквизита= ВИБ_ПолучитьЗначениеПодчиненногоРеквизита(СтрДанные,
				МассивРеквизитов[0],
				КэшНайденныхЗначений,
				ТекСоединениеВИБ,
				ФлагОшибкиИмпортаТек,
				КэшСозданныхОбъектов,
				ТабОбъектовДляВыгрузки,
				СтруктураЗначенийРеквизитов,
				МассивОшибок,?(СтрРеквизит.ИмяРеквизита="Родитель",Владелец,Неопределено));
				
			ИначеЕсли МассивРеквизитов.Количество()>1 Тогда
				
				ТаблицаАналитики=СтрДанные[СтрРеквизит.ДанныеРеквизита];
				
				Если ПолучитьЗначениеЗаполнено(ТекСоединениеВИБ,ТаблицаАналитики) Тогда
					
					МассивРеквизитов=ДанныеРеквизитов.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита,ТаблицаАналитики",СтрРеквизит.ИмяРеквизита,ТаблицаАналитики));
					
					Если МассивРеквизитов.Количество()=1 Тогда 
						
						ЗначениеРеквизита= ВИБ_ПолучитьЗначениеПодчиненногоРеквизита(СтрДанные,
						МассивРеквизитов[0],
						КэшНайденныхЗначений,
						ТекСоединениеВИБ,
						ФлагОшибкиИмпортаТек,
						КэшСозданныхОбъектов,
						ТабОбъектовДляВыгрузки,
						СтруктураЗначенийРеквизитов,
						МассивОшибок,?(СтрРеквизит.ИмяРеквизита="Родитель",Владелец,Неопределено));
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Продолжить;
					
			КонецЕсли;			
			
			Если ФлагОшибкиИмпортаТек Тогда
				
				Возврат Неопределено;
				
			Иначе
				
				Если ПолучитьЗначениеЗаполнено(ТекСоединениеВИБ,ЗначениеРеквизита) Тогда
					
					СтруктураЗаписи.Вставить(СтрРеквизит.ИмяРеквизита,ЗначениеРеквизита);	
					СтрСозданный=КэшСозданныхОбъектов.Найти(ЗначениеРеквизита,"Ссылка");
					
					Если (СтрСозданный=Неопределено И (НЕ СтрРеквизит.НеИспользоватьДляСинхронизации)) ИЛИ СтрРеквизит.ИмяРеквизита="Владелец" Тогда
						
						СтруктураПоиска.Вставить(СтрРеквизит.ИмяРеквизита,ЗначениеРеквизита);
						
					КонецЕсли;
					
					СтруктураОбновление.Вставить(СтрРеквизит.ИмяРеквизита,ЗначениеРеквизита);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрРеквизит.ИмяРеквизита="Владелец" Тогда
				
				Владелец=ЗначениеРеквизита;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ФлагОшибкиИмпортаТек Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;										
	
	ЕстьСоответствиеПоКоду = Ложь;
	ЕстьСоответствиеПоНомеру = Ложь;
	
	МетаданныеОбъекта=СтрРазделить(ДанныеРеквизитов.ТаблицаАналитикиВИБ,".");
	ТипОбъектаМетаданных=МетаданныеОбъекта[0];
	ИмяОбъектаМетаданных=МетаданныеОбъекта[1];
				
	Для Каждого СтрПоля ИЗ ДанныеРеквизитов.ПримитивныеРеквизиты Цикл 
		
		Если СтрПоля.ИмяРеквизита="ЭтоГруппа" 
			И ПолучитьЗначениеЗаполнено(ТекСоединениеВИБ,СтрДанные[СтрПоля.ДанныеРеквизита]) 
			И СтрДанные[СтрПоля.ДанныеРеквизита]=Истина Тогда
			СтруктураПоиска.Вставить(СтрПоля.ИмяРеквизита,СтрДанные[СтрПоля.ДанныеРеквизита]);
			СтруктураЗначенийРеквизитов.Вставить(СтрПоля.ДанныеРеквизита,СтрДанные[СтрПоля.ДанныеРеквизита]);
        КонецЕсли;
		
		Если СтрПоля.ИмяРеквизита="ЭтоГруппа"
			ИЛИ СтрДанные[СтрПоля.ДанныеРеквизита]=Ложь
			ИЛИ (НЕ (ПолучитьЗначениеЗаполнено(ТекСоединениеВИБ,СтрДанные[СтрПоля.ДанныеРеквизита]) И ВИБ_ПроверитьВозможностьИспользованияРеквизита(СтрПоля.Использование,ЭтоГруппа))) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрПоля.НеИспользоватьДляСинхронизации Тогда
			СтруктураПоиска.Вставить(СтрПоля.ИмяРеквизита,СтрДанные[СтрПоля.ДанныеРеквизита]);
		КонецЕсли;
		
		СтруктураЗаписи.Вставить(СтрПоля.ИмяРеквизита,СтрДанные[СтрПоля.ДанныеРеквизита]);
		СтруктураОбновление.Вставить(СтрПоля.ИмяРеквизита,СтрДанные[СтрПоля.ДанныеРеквизита]);
		
		Если СтрНайти(ДанныеРеквизитов.ТаблицаАналитики,"Перечисление.")=0 Тогда 
			
			СтруктураЗначенийРеквизитов.Вставить(СтрПоля.ДанныеРеквизита,СтрДанные[СтрПоля.ДанныеРеквизита]);
			
		КонецЕсли;
				
		Если ТипОбъектаМетаданных="Справочник" ИЛИ ТипОбъектаМетаданных="ПланВидовХарактеристик" Тогда
			
			Если НЕ ЕстьСоответствиеПоКоду Тогда
				
				ЕстьСоответствиеПоКоду=(СтрПоля.ИмяРеквизита="Код");
				
			КонецЕсли;
			
		ИначеЕсли ТипОбъектаМетаданных="Документ" Тогда
			
			Если НЕ ЕстьСоответствиеПоНомеру Тогда
				
				ЕстьСоответствиеПоНомеру=(СтрПоля.ИмяРеквизита="Номер");
				
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЦикла;
	
	///////////////////////////////////////////////////////////////////////////////////////
	// Проверим на тип "Перечисление"
	
	Если СтрНайти(ДанныеРеквизитов.ТаблицаАналитикиВИБ,"Перечисление.")>0 Тогда
		
		ИмяПеречисления=СтрЗаменить(ДанныеРеквизитов.ТаблицаАналитикиВИБ,"Перечисление.","");
		ТекЗначениеПеречисления=ВИБ_ПолучитьЗначениеПеречисленияПоИмени(ТекСоединениеВИБ,ИмяПеречисления,СтрДанные[ДанныеРеквизитов.ПримитивныеРеквизиты[0].ДанныеРеквизита],ДанныеРеквизитов.НастройкаСоответствияРеквизит);
		
		Если ТекЗначениеПеречисления=Неопределено Тогда
			
			ФлагОшибкиИмпортаТек=Истина;
			ТекстСообщения = НСтр("ru = 'При экспорте объекта %КодАналитики% не удалось получить значение перечисления
			|			%ТаблицаАналитикиВИБ%: %ДанныеРеквизита%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодАналитики%", Строка(ДанныеРеквизитов.КодАналитики));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаАналитикиВИБ%", Строка(ДанныеРеквизитов.ТаблицаАналитикиВИБ));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДанныеРеквизита%", Строка(СтрДанные[ДанныеРеквизитов.ПримитивныеРеквизиты[0].ДанныеРеквизита]));
			
			МассивОшибок.Добавить(ТекстСообщения);
			
			Возврат Неопределено;
			
		Иначе
									
			Возврат ТекЗначениеПеречисления;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтруктураПоиска.Количество()>0 Тогда
		
		//////////////////////////////////////////////////////////////////////////////////////
		// Проверим наличие объекта по указанным параметрам в кэше
				
		НайденныеСтроки=КэшНайденныхЗначений.Get(ДанныеРеквизитов.ТаблицаАналитикиВИБ).НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество()>0 Тогда
			
			Возврат ВИБ_ОбновитьДанныеОбъекта(НайденныеСтроки.Get(0)._Ссылка_,СтруктураОбновление,ТекСоединениеВИБ,Истина,МассивОшибок);
			
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////////////
		// Проверим наличие объекта по указанным параметрам в БД
		
		НайденноеЗначение=ВИБ_ПолучитьЭлементСправочника(ТекСоединениеВИБ,ДанныеРеквизитов.ТаблицаАналитикиВИБ,СтруктураПоиска);
		
		Если НЕ НайденноеЗначение=Неопределено Тогда
			
			НоваяСтрока=КэшНайденныхЗначений.Get(ДанныеРеквизитов.ТаблицаАналитикиВИБ).Добавить();
			ПолучитьЗаполнитьЗначенияСвойств(ТекСоединениеВИБ,НоваяСтрока,СтруктураПоиска);
			НоваяСтрока._Ссылка_=НайденноеЗначение;
			
			Возврат ВИБ_ОбновитьДанныеОбъекта(НайденноеЗначение,СтруктураОбновление,ТекСоединениеВИБ,Истина,МассивОшибок);
			
		КонецЕсли;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////////
	// Создадим новый объект
	
	ТекстОшибки="";
	
	Попытка
		
		Если ТипОбъектаМетаданных="Справочник" Тогда
			
			Если ЭтоГруппа Тогда
				ЭлСпр = ТекСоединениеВИБ.Catalogs[ИмяОбъектаМетаданных].СоздатьГруппу();
			Иначе
				ЭлСпр = ТекСоединениеВИБ.Catalogs[ИмяОбъектаМетаданных].СоздатьЭлемент();
			КонецЕсли;
			
			Если Не ЕстьСоответствиеПоКоду Тогда
				ЭлСпр.УстановитьНовыйКод();
			КонецЕсли;
			
			ПолучитьЗаполнитьЗначенияСвойств(ТекСоединениеВИБ,ЭлСпр,СтруктураЗаписи);
			
		ИначеЕсли ТипОбъектаМетаданных="ПланВидовХарактеристик" Тогда
			
			Если ЭтоГруппа Тогда
				ЭлСпр = ТекСоединениеВИБ.ChartsOfCharacteristicTypes[ИмяОбъектаМетаданных].СоздатьГруппу();
			Иначе
				ЭлСпр = ТекСоединениеВИБ.ChartsOfCharacteristicTypes[ИмяОбъектаМетаданных].СоздатьЭлемент();
			КонецЕсли;
			
			Если Не ЕстьСоответствиеПоКоду Тогда
				ЭлСпр.УстановитьНовыйКод();
			КонецЕсли;
			
			ПолучитьЗаполнитьЗначенияСвойств(ТекСоединениеВИБ,ЭлСпр,СтруктураЗаписи);
				
		ИначеЕсли ТипОбъектаМетаданных="Документ" Тогда
			
			ЭлСпр=ТекСоединениеВИБ.Documents[ИмяОбъектаМетаданных].СоздатьДокумент();
			
			Если НЕ ЕстьСоответствиеПоНомеру Тогда
				ЭлСпр.УстановитьНовыйНомер();
			КонецЕсли;
			
			ПолучитьЗаполнитьЗначенияСвойств(ТекСоединениеВИБ,ЭлСпр,СтруктураЗаписи);
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		ЭлСпр.ОбменДанными.Загрузка=Истина;
		ЭлСпр.Записать();
		
		НоваяСтрока=КэшНайденныхЗначений.Get(ДанныеРеквизитов.ТаблицаАналитикиВИБ).Добавить();
		ПолучитьЗаполнитьЗначенияСвойств(ТекСоединениеВИБ,НоваяСтрока,ЭлСпр);
		НоваяСтрока._Ссылка_=ЭлСпр.Ссылка;
		
		НоваяСтрока=КэшСозданныхОбъектов.Добавить();
		НоваяСтрока.Ссылка=ЭлСпр.Ссылка;
				
		Возврат ЭлСпр.Ссылка; 
		
	Исключение
		
		ТекстОшибки=ОписаниеОшибки();
		ФлагОшибкиИмпортаТек = Истина;
		
	КонецПопытки;	
	
	Если ФлагОшибкиИмпортаТек Тогда
		
			#Если НЕ ВнешнееСоединение Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось создать объект ВИБ для %КодАналитики% по причине:
				|				
				|				%ТекстОшибки%
				|				
				|				Свойства объекта ИБ:'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодАналитики%", Строка(ДанныеРеквизитов.КодАналитики));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстОшибки%", Строка(ТекстОшибки));

				Для Каждого СтрПоля ИЗ СтруктураЗаписи Цикл
					
					ТекстСообщения = ТекстСообщения + СтрПоля.Ключ;
					ТекстСообщения = ТекстСообщения + " - ";
					ТекстСообщения = ТекстСообщения + ?(ПолучитьЗначениеЗаполнено(ТекСоединениеВИБ,СтрПоля.Значение), СтрПоля.Значение, "???");
					ТекстСообщения = ТекстСообщения + Символы.ПС;
					
				КонецЦикла;
				
				МассивОшибок.Добавить(ТекстСообщения);
				
			#Иначе
				
			#КонецЕсли
		
		Возврат Неопределено;
		
	КонецЕсли;		
	
КонецФункции

Функция ВИБ_ОбновитьДанныеОбъекта(Ссылка,СтруктураОбновления,ТекСоединениеВИБ,ОбновлятьРеквизитыПриИмпорте=Ложь,МассивОшибок)
	
	Если (НЕ ОбновлятьРеквизитыПриИмпорте) ИЛИ СтруктураОбновления.Количество()=0 Тогда
		
		Возврат Ссылка;
		
	Иначе
		
		Попытка
			
			ТекОбъект=Ссылка.ПолучитьОбъект();
			
			ЕстьИзменения=Ложь;
			
			Для Каждого КлючИЗначение ИЗ СтруктураОбновления Цикл
				
				Если НЕ ТекОбъект[КлючИЗначение.Ключ]=КлючИЗначение.Значение Тогда
					
					ЕстьИзменения=Истина;
					ТекОбъект[КлючИЗначение.Ключ]=КлючИЗначение.Значение;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ЕстьИзменения Тогда
				
				ТекОбъект.ОбменДанными.Загрузка=Истина;
				ТекОбъект.Записать();
				
			КонецЕсли;
			
			Возврат ТекОбъект.Ссылка;
			
		Исключение
			
				#Если НЕ ВнешнееСоединение Тогда
			
					ТекстСообщения = НСтр("ru = 'Не удалось обновить реквизиты для  объекта ВИБ по причине:
					|					
					|					%ОписаниеОшибки%
					|					
					|					Свойства объекта ВИБ:'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
					ТекстСообщения = ТекстСообщения + Символы.ПС;
					Для Каждого СтрПоля ИЗ СтруктураОбновления Цикл
						
						ТекстСообщения = ТекстСообщения + СтрПоля.Ключ;
						ТекстСообщения = ТекстСообщения + " - ";
						ТекстСообщения = ТекстСообщения + ?(ЗначениеЗаполнено(СтрПоля.Значение), СтрПоля.Значение, "???");
						ТекстСообщения = ТекстСообщения + Символы.ПС;
						
					КонецЦикла;
					
					МассивОшибок.Добавить(ТекстСообщения);
					
				#Иначе
					
				#КонецЕсли
							
			Возврат Ссылка;
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции // ОбновитьДанныеОбъекта

Функция ВИБ_НеИспользоватьДляСинхронизацииПодчиненный(ИмяРеквизита,НастройкаСоответствияРеквизит,НеИспользоватьДляСинхронизацииТек)
		
	Если (НЕ НеИспользоватьДляСинхронизацииТек) Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если ТипЗнч(НастройкаСоответствияРеквизит)=Тип("Структура") Тогда
		
		СтрокаРеквизит=НастройкаСоответствияРеквизит.СоответствиеРеквизитов.Найти(ИмяРеквизита,"РеквизитОбъектаВнешнейИБ");
		
		Если СтрокаРеквизит=Неопределено Тогда
			
			Возврат НеИспользоватьДляСинхронизацииТек;
			
		Иначе	
			
			Возврат СтрокаРеквизит.НеИспользоватьДляСинхронизации;
			
		КонецЕсли;
		
	Иначе
		
		Возврат НеИспользоватьДляСинхронизацииТек;
		
	КонецЕсли;
		
КонецФункции // НеИспользоватьДляСинхронизацииПодчиненный()


Функция ВИБ_ПолучитьЗначениеПодчиненногоРеквизита(СтрДанные,
	ДанныеРеквизитов,
	КэшНайденныхЗначений,
	ТекСоединениеВИБ,
	ФлагОшибкиИмпортаТек,
	КэшСозданныхОбъектов,
	ТабОбъектовДляВыгрузки,
	СтруктураЗначенийРеквизитов,
	МассивОшибок,Владелец=Неопределено);
	
	СтруктураЗаписи=ТекСоединениеВИБ.NewObject("Структура");
	СтруктураПоиска=ТекСоединениеВИБ.NewObject("Структура");
	СтруктураОбновление=ТекСоединениеВИБ.NewObject("Структура");
	
	СтрокаGUID=ДанныеРеквизитов.ПримитивныеРеквизиты.Найти("Ref","ИмяРеквизита");
	
	Если НЕ СтрокаGUID=Неопределено Тогда
		
		Возврат ВИБ_ПолучитьОбъектВнешнейИБПоGUIDТекущей(ДанныеРеквизитов,КэшНайденныхЗначений,ТекСоединениеВИБ,СтрДанные[СтрокаGUID.ДанныеРеквизита],МассивОшибок)
		
	КонецЕсли;
	
	СтрокаГруппа=ДанныеРеквизитов.ПримитивныеРеквизиты.Найти("ЭтоГруппа","ИмяРеквизита");
	
	Если СтрокаГруппа=Неопределено Тогда
		ЭтоГруппа=Ложь;
	Иначе
		ЭтоГруппа=СтрДанные[СтрокаГруппа.ДанныеРеквизита];
	КонецЕсли;
	
	Если ДанныеРеквизитов.ЕстьСсылочные Тогда
		
		ДанныеРеквизитов.СсылочныеРеквизиты.Сортировать("ИмяРеквизита");
		
		ВладелецПодчиненные=Неопределено;
		
		Для ИндексРеквизита=0 ПО ДанныеРеквизитов.СсылочныеРеквизиты.Количество()-1 Цикл
			
			СтрРеквизит=ДанныеРеквизитов.СсылочныеРеквизиты[ИндексРеквизита];
			
			Если НЕ ВИБ_ПроверитьВозможностьИспользованияРеквизита(СтрРеквизит.Использование,ЭтоГруппа) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеРеквизита=Неопределено;
			
			МассивРеквизитов=ДанныеРеквизитов.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита",СтрРеквизит.ИмяРеквизита));
			
			Если МассивРеквизитов.Количество()=1 Тогда 
				
				ЗначениеРеквизита=ВИБ_ПолучитьЗначениеПодчиненногоРеквизита(СтрДанные,
				МассивРеквизитов[0],
				КэшНайденныхЗначений,
				ТекСоединениеВИБ,
				ФлагОшибкиИмпортаТек,
				КэшСозданныхОбъектов,
				ТабОбъектовДляВыгрузки,
				СтруктураЗначенийРеквизитов,
				МассивОшибок,?(СтрРеквизит.ИмяРеквизита="Родитель",ВладелецПодчиненные,Неопределено));
				
			ИначеЕсли МассивРеквизитов.Количество()>1 Тогда
				
				ТаблицаАналитики=СтрДанные[СтрРеквизит.ДанныеРеквизита];
				
				Если ЗначениеЗаполнено(ТаблицаАналитики) Тогда
					
					МассивРеквизитов=ДанныеРеквизитов.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита,ТаблицаАналитики",СтрРеквизит.ИмяРеквизита,ТаблицаАналитики));
					
					Если МассивРеквизитов.Количество()=1 Тогда 
						
						ЗначениеРеквизита=ВИБ_ПолучитьЗначениеПодчиненногоРеквизита(СтрДанные,
						МассивРеквизитов[0],
						КэшНайденныхЗначений,
						ТекСоединениеВИБ,
						ФлагОшибкиИмпортаТек,
						КэшСозданныхОбъектов,
						ТабОбъектовДляВыгрузки,
						СтруктураЗначенийРеквизитов,
						МассивОшибок,?(СтрРеквизит.ИмяРеквизита="Родитель",ВладелецПодчиненные,Неопределено));
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				
				Продолжить;
				
			КонецЕсли;	
			
			Если ФлагОшибкиИмпортаТек Тогда
				
				Возврат Неопределено;
				
			Иначе
				
				Если ПолучитьЗначениеЗаполнено(ТекСоединениеВИБ,ЗначениеРеквизита) Тогда
					
					СтруктураЗаписи.Вставить(СтрРеквизит.ИмяРеквизита,ЗначениеРеквизита);	
					СтрСозданный=КэшСозданныхОбъектов.Найти(ЗначениеРеквизита,"Ссылка");
					
					Если (СтрСозданный=Неопределено И (НЕ СтрРеквизит.НеИспользоватьДляСинхронизации)) ИЛИ СтрРеквизит.ИмяРеквизита="Владелец" Тогда
						
						СтруктураПоиска.Вставить(СтрРеквизит.ИмяРеквизита,ЗначениеРеквизита);
						
					КонецЕсли;
					
					СтруктураОбновление.Вставить(СтрРеквизит.ИмяРеквизита,ЗначениеРеквизита);
										
				КонецЕсли;
				
			КонецЕсли;
			
			Если СтрРеквизит.ИмяРеквизита="Владелец" Тогда
				
				ВладелецПодчиненный=ЗначениеРеквизита;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ФлагОшибкиИмпортаТек Тогда
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	ЕстьСоответствиеПоКоду = Ложь;
	ЕстьСоответствиеПоНомеру = Ложь;
	
	МетаданныеОбъекта=СтрРазделить(ДанныеРеквизитов.ТаблицаАналитикиВИБ,".");
	ТипОбъектаМетаданных=МетаданныеОбъекта[0];
	ИмяОбъектаМетаданных=МетаданныеОбъекта[1];
	
	ПризнакГруппы=Неопределено;
				
	Для Каждого СтрПоля ИЗ ДанныеРеквизитов.ПримитивныеРеквизиты Цикл 
		
		Если СтрПоля.ИмяРеквизита="ЭтоГруппа" 
			И ПолучитьЗначениеЗаполнено(ТекСоединениеВИБ,СтрДанные[СтрПоля.ДанныеРеквизита]) 
			И СтрДанные[СтрПоля.ДанныеРеквизита]=Истина Тогда
			
			ПризнакГруппы=СтрДанные[СтрПоля.ДанныеРеквизита];
			
			//СтруктураПоиска.Вставить(СтрПоля.ИмяРеквизита,СтрДанные[СтрПоля.ДанныеРеквизита]);
			СтруктураЗначенийРеквизитов.Вставить(СтрПоля.ДанныеРеквизита,СтрДанные[СтрПоля.ДанныеРеквизита]);
        КонецЕсли;
		
		Если СтрПоля.ИмяРеквизита="ЭтоГруппа"
			ИЛИ СтрДанные[СтрПоля.ДанныеРеквизита]=Ложь
			ИЛИ (НЕ (ПолучитьЗначениеЗаполнено(ТекСоединениеВИБ,СтрДанные[СтрПоля.ДанныеРеквизита]) И ВИБ_ПроверитьВозможностьИспользованияРеквизита(СтрПоля.Использование,ЭтоГруппа))) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ВИБ_НеИспользоватьДляСинхронизацииПодчиненный(СтрПоля.ИмяРеквизита,ДанныеРеквизитов.НастройкаСоответствияРеквизит,СтрПоля.НеИспользоватьДляСинхронизации) Тогда
			
			СтруктураПоиска.Вставить(СтрПоля.ИмяРеквизита,СтрДанные[СтрПоля.ДанныеРеквизита]);
			
		КонецЕсли;
		
		СтруктураЗаписи.Вставить(СтрПоля.ИмяРеквизита,СтрДанные[СтрПоля.ДанныеРеквизита]);
		СтруктураОбновление.Вставить(СтрПоля.ИмяРеквизита,СтрДанные[СтрПоля.ДанныеРеквизита]);
		
		Если СтрНайти(ДанныеРеквизитов.ТаблицаАналитики,"Перечисление.")=0 Тогда 
			
			СтруктураЗначенийРеквизитов.Вставить(СтрПоля.ДанныеРеквизита,СтрДанные[СтрПоля.ДанныеРеквизита]);
			
		КонецЕсли;
		
		Если ТипОбъектаМетаданных="Справочник" ИЛИ ТипОбъектаМетаданных="ПланВидовХарактеристик" Тогда
			
			Если НЕ ЕстьСоответствиеПоКоду Тогда
				
				ЕстьСоответствиеПоКоду=(СтрПоля.ИмяРеквизита="Код");
				
			КонецЕсли;
			
		ИначеЕсли ТипОбъектаМетаданных="Документ" Тогда
			
			Если НЕ ЕстьСоответствиеПоНомеру Тогда
				
				ЕстьСоответствиеПоНомеру=(СтрПоля.ИмяРеквизита="Номер");
				
			КонецЕсли;
			
		КонецЕсли;		
		
	КонецЦикла;
	
	///////////////////////////////////////////////////////////////////////////////////////
	// Проверим на тип "Перечисление"
	
	Если СтрНайти(ДанныеРеквизитов.ТаблицаАналитикиВИБ,"Перечисление.")>0 Тогда
		
		ИмяПеречисления=СтрЗаменить(ДанныеРеквизитов.ТаблицаАналитикиВИБ,"Перечисление.","");
		
		ТекЗначениеПеречисления=ВИБ_ПолучитьЗначениеПеречисленияПоИмени(ТекСоединениеВИБ,ИмяПеречисления,СтрДанные[ДанныеРеквизитов.ПримитивныеРеквизиты[0].ДанныеРеквизита],ДанныеРеквизитов.НастройкаСоответствияРеквизит);
		
		Если ТекЗначениеПеречисления=Неопределено Тогда
			
			ФлагОшибкиИмпортаТек=Истина;
			
			ТекстСообщения = НСтр("ru = 'При экспорте объекта %КодАналитики% не удалось получить значение перечисления
			|			%ТаблицаАналитикиВИБ%: %ДанныеРеквизита%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодАналитики%", Строка(ДанныеРеквизитов.КодАналитики));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаАналитикиВИБ%", Строка(ДанныеРеквизитов.ТаблицаАналитикиВИБ));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДанныеРеквизита%", Строка(СтрДанные[ДанныеРеквизитов.ПримитивныеРеквизиты[0].ДанныеРеквизита]));
			
			МассивОшибок.Добавить(ТекстСообщения);
			
			Возврат Неопределено;
			
		Иначе
							
			Возврат ТекЗначениеПеречисления;
			
		КонецЕсли;
		
	КонецЕсли;

	Если СтруктураПоиска.Количество()>0 Тогда
		
		Если НЕ ПризнакГруппы=Неопределено Тогда
			
			СтруктураПоиска.Вставить("ЭтоГруппа",ПризнакГруппы);
			
		КонецЕсли;
		
		Если НЕ Владелец=Неопределено Тогда
			
			СтруктураПоиска.Вставить("Владелец",Владелец);
            СтруктураЗаписи.Вставить("Владелец",Владелец);
			
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////////////
		// Проверим наличие объекта по указанным параметрам в кэше
		
		НайденныеСтроки=КэшНайденныхЗначений.Get(ДанныеРеквизитов.ТаблицаАналитикиВИБ).НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество()>0 Тогда
			
			Возврат ВИБ_ОбновитьДанныеОбъекта(НайденныеСтроки.Get(0)._Ссылка_,СтруктураОбновление,ТекСоединениеВИБ,Истина,МассивОшибок);
			
		КонецЕсли;
		
		//////////////////////////////////////////////////////////////////////////////////////
		// Проверим наличие объекта по указанным параметрам в БД
		
		НайденноеЗначение=ВИБ_ПолучитьЭлементСправочника(ТекСоединениеВИБ,ДанныеРеквизитов.ТаблицаАналитикиВИБ,СтруктураПоиска);
		
		Если НЕ НайденноеЗначение=Неопределено Тогда
			
			НоваяСтрока=КэшНайденныхЗначений.Get(ДанныеРеквизитов.ТаблицаАналитикиВИБ).Добавить();
			ПолучитьЗаполнитьЗначенияСвойств(ТекСоединениеВИБ,НоваяСтрока,СтруктураПоиска);
			НоваяСтрока._Ссылка_=НайденноеЗначение;
			
			Возврат ВИБ_ОбновитьДанныеОбъекта(НайденноеЗначение,СтруктураОбновление,ТекСоединениеВИБ,Истина,МассивОшибок);
			
		КонецЕсли;
		
	КонецЕсли;
	
	///////////////////////////////////////////////////////////////////////////////////////
	// Создадим новый объект
	
	ТекстОшибки="";
	
	// Проверим на заполненность хотя бы одного реквизита
	
	ПустойЭлемент=Истина;
	
	Для Каждого Реквизит ИЗ СтруктураЗаписи Цикл
		
		Если ПолучитьЗначениеЗаполнено(ТекСоединениеВИБ,Реквизит.Значение) Тогда
			
			ПустойЭлемент=Ложь;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
		
	Если ПустойЭлемент Тогда
		
		Возврат ВИБ_ПолучитьПустуюСсылкуПоТаблицеАналитики(ТекСоединениеВИБ,ДанныеРеквизитов.ТаблицаАналитикиВИБ);
		
	ИначеЕсли НЕ ДанныеРеквизитов.СоздаватьНовые Тогда
		
		ТекстСообщения = НСтр("ru = 'Не удалось получить объект коллекции %ТаблицаАналитикиВИБ% с реквизитами:
		|       '");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаАналитикиВИБ%", Строка(ДанныеРеквизитов.ТаблицаАналитикиВИБ));
		
		Для Каждого СтрПоля ИЗ СтруктураЗаписи Цикл
			
			ТекстСообщения = ТекстСообщения + СтрПоля.Ключ;
			ТекстСообщения = ТекстСообщения + " - ";
			ТекстСообщения = ТекстСообщения + ?(ПолучитьЗначениеЗаполнено(ТекСоединениеВИБ,СтрПоля.Значение), СтрПоля.Значение, "???"); 
			ТекстСообщения = ТекстСообщения + Символы.ПС;
			
		КонецЦикла;
		
		ТекстСообщения = ТекстСообщения + НСтр("ru = '
                                               |Не установлен флаг ""Создавать при неудачном поиске при экспорте"".'");
		
		МассивОшибок.Добавить(ТекстСообщения);
		
		ФлагОшибкиИмпортаТек = Истина;
		
		Возврат ВИБ_ПолучитьПустуюСсылкуПоТаблицеАналитики(ТекСоединениеВИБ,ДанныеРеквизитов.ТаблицаАналитикиВИБ);
				
	КонецЕсли;	
				
	Попытка
			
		Если ТипОбъектаМетаданных="Справочник" Тогда
			
			Если ЭтоГруппа Тогда
				ЭлСпр = ТекСоединениеВИБ.Catalogs[ИмяОбъектаМетаданных].СоздатьГруппу();
			Иначе
				ЭлСпр = ТекСоединениеВИБ.Catalogs[ИмяОбъектаМетаданных].СоздатьЭлемент();
			КонецЕсли;
			
			Если Не ЕстьСоответствиеПоКоду Тогда
				ЭлСпр.УстановитьНовыйКод();
			КонецЕсли;
			
			ПолучитьЗаполнитьЗначенияСвойств(ТекСоединениеВИБ,ЭлСпр,СтруктураЗаписи);
			
		ИначеЕсли ТипОбъектаМетаданных="ПланВидовХарактеристик" Тогда
			
			Если ЭтоГруппа Тогда
				ЭлСпр = ТекСоединениеВИБ.ChartsOfCharacteristicTypes[ИмяОбъектаМетаданных].СоздатьГруппу();
			Иначе
				ЭлСпр = ТекСоединениеВИБ.ChartsOfCharacteristicTypes[ИмяОбъектаМетаданных].СоздатьЭлемент();
			КонецЕсли;
			
			Если Не ЕстьСоответствиеПоКоду Тогда
				ЭлСпр.УстановитьНовыйКод();
			КонецЕсли;
			
			ПолучитьЗаполнитьЗначенияСвойств(ТекСоединениеВИБ,ЭлСпр,СтруктураЗаписи);
				
		ИначеЕсли ТипОбъектаМетаданных="Документ" Тогда
			
			ЭлСпр=ТекСоединениеВИБ.Documents[ИмяОбъектаМетаданных].СоздатьДокумент();
			
			Если НЕ ЕстьСоответствиеПоНомеру Тогда
				ЭлСпр.УстановитьНовыйНомер();
			КонецЕсли;
			
			ПолучитьЗаполнитьЗначенияСвойств(ТекСоединениеВИБ,ЭлСпр,СтруктураЗаписи);
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
		ЭлСпр.ОбменДанными.Загрузка=Истина;
		ЭлСпр.Записать();
		
		НоваяСтрока=КэшНайденныхЗначений.Get(ДанныеРеквизитов.ТаблицаАналитикиВИБ).Добавить();
		ПолучитьЗаполнитьЗначенияСвойств(ТекСоединениеВИБ,НоваяСтрока,СтруктураЗаписи);
		НоваяСтрока._Ссылка_=ЭлСпр.Ссылка;
		
		СтрСозданных=КэшСозданныхОбъектов.Добавить();
		СтрСозданных.Ссылка=ЭлСпр.Ссылка;
		
		СтрокаВыгрузка=ТабОбъектовДляВыгрузки.Добавить();
		СтрокаВыгрузка.ТаблицаАналитики		= ДанныеРеквизитов.ТаблицаАналитики;
		СтрокаВыгрузка.КодАналитики			= ДанныеРеквизитов.КодАналитики;
		СтрокаВыгрузка.СтруктураРеквизитов	= СкопироватьУниверсальнуюКоллекцию(СтруктураЗначенийРеквизитов);
		
		Возврат ЭлСпр.Ссылка; 
		
	Исключение
		
		ТекстОшибки=ОписаниеОшибки();
		ФлагОшибкиИмпортаТек = Истина;
		
	КонецПопытки;	
	
	Если ФлагОшибкиИмпортаТек Тогда
		
			#Если НЕ ВнешнееСоединение Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось создать объект ВИБ для %КодАналитики% по причине:
				|				
				|				%ТекстОшибки%
				|				
				|				Свойства объекта ВИБ:'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодАналитики%", Строка(ДанныеРеквизитов.КодАналитики));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТекстОшибки%", Строка(ТекстОшибки));
				
				Для Каждого СтрПоля ИЗ СтруктураЗаписи Цикл
					
					ТекстСообщения = ТекстСообщения + СтрПоля.Ключ;
					ТекстСообщения = ТекстСообщения + " - ";
					ТекстСообщения = ТекстСообщения + ?(ПолучитьЗначениеЗаполнено(ТекСоединениеВИБ,СтрПоля.Значение), СтрПоля.Значение, "???");
					ТекстСообщения = ТекстСообщения + Символы.ПС;
					
				КонецЦикла;
				
				МассивОшибок.Добавить(ТекстСообщения);
				
			#Иначе
				
			#КонецЕсли
		
		Возврат Неопределено;
		
	КонецЕсли;			
	
КонецФункции // ПолучитьЗначениеПодчиненногоРеквизита()
Функция ВИБ_ПолучитьЭлементСправочника(ТекСоединениеВИБ,ТаблицаАналитики,СтруктураПараметров)
	
	Если СтруктураПараметров.Количество()=0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос=ТекСоединениеВИБ.NewObject("Запрос");
	Запрос.Текст="ВЫБРАТЬ
	|РабочаяТаблица.Ссылка
	|ИЗ "+ТаблицаАналитики+" КАК РабочаяТаблица";
	
	ТекстУсловие="";
	
	Для Каждого СтрПараметр ИЗ СтруктураПараметров Цикл
		
		Если ПримитивныйТип(ТипЗнч(СтрПараметр.Значение)) Тогда
			
			ТекстУсловие=ТекстУсловие+" И РабочаяТаблица."+СтрПараметр.Ключ+"=&"+СтрПараметр.Ключ;
			
		Иначе
			
			ТекстУсловие=ТекстУсловие+" И (РабочаяТаблица."+СтрПараметр.Ключ+"=&"+СтрПараметр.Ключ+" ИЛИ РабочаяТаблица."+СтрПараметр.Ключ+"=ЗНАЧЕНИЕ("+СтрПараметр.Значение.Метаданные().ПолноеИмя()+".ПустаяСсылка))";
			
		КонецЕсли;
		
		Запрос.УстановитьПараметр(СтрПараметр.Ключ,СтрПараметр.Значение);
		
	КонецЦикла;
	
	Запрос.Текст=Запрос.Текст+"
	|ГДЕ "+Сред(ТекстУсловие,3);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		Возврат Результат.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции // ПолучитьЭлементСправочника

// Создает копию переданного массива, структуры или соответствия
//
// Параметры:
//  КоллекцияИсходная: тип Массив, Структура, Соответствие - исходная коллекция
// Возвращаемое значение:
//  КоллекцияКопия:  тип Массив, Структура, Соответствие - копия исходной коллекции
//
Функция СкопироватьУниверсальнуюКоллекцию(КоллекцияИсходная) Экспорт
	
	Если ТипЗнч(КоллекцияИсходная)=Тип("Массив") Тогда
		
		КоллекцияКопия=Новый Массив;
		
		Для Каждого Элемент Из КоллекцияИсходная Цикл
			
			КоллекцияКопия.Добавить(Элемент);
			
		КонецЦикла;
		
		Возврат КоллекцияКопия;
		
	ИначеЕсли ТипЗнч(КоллекцияИсходная)=Тип("Структура") Тогда
		
		КоллекцияКопия=Новый Структура;
		
		Для Каждого Элемент Из КоллекцияИсходная Цикл
			
			КоллекцияКопия.Вставить(Элемент.Ключ,Элемент.Значение);
			
		КонецЦикла;
		
		Возврат КоллекцияКопия; 
		
	ИначеЕсли ТипЗнч(КоллекцияИсходная)=Тип("Соответствие") Тогда
		
		КоллекцияКопия=Новый Соответствие;
		
		Для Каждого Элемент Из КоллекцияИсходная Цикл
			
			КоллекцияКопия.Вставить(Элемент.Ключ,Элемент.Значение);
			
		КонецЦикла;
		
		Возврат КоллекцияКопия;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // СкопироватьУниверсальнуюКоллекцию()

Функция ВИБ_ПолучитьОбъектВнешнейИБПоGUIDТекущей(ДанныеРеквизитов,КэшНайденныхЗначений,ТекСоединениеВИБ,ОбъектТекущейИБ,МассивОшибок)
		
	Если ПустаяСтрока(ОбъектТекущейИБ) Тогда
		
		Возврат ВИБ_ПолучитьПустуюСсылкуПоТаблицеАналитики(ТекСоединениеВИБ,ДанныеРеквизитов.ТаблицаАналитикиВИБ);
		
	КонецЕсли;
	
	СтруктураПоиска=ТекСоединениеВИБ.NewObject("Структура");
	СтруктураПоиска.Вставить("Ref",ОбъектТекущейИБ);
	
	НайденныеСтроки=КэшНайденныхЗначений.Get(ДанныеРеквизитов.ТаблицаАналитикиВИБ).НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеСтроки.Количество()>0 Тогда
		
		Возврат НайденныеСтроки.Get(0)._Ссылка_;
		
	КонецЕсли;
	
	МетаданныеОбъектаВИБ=СтрРазделить(ДанныеРеквизитов.ТаблицаАналитикиВИБ,".");
	ТипОбъектаМетаданныхВИБ=МетаданныеОбъектаВИБ[0];
	ИмяОбъектаМетаданныхВИБ=МетаданныеОбъектаВИБ[1];
	
	МетаданныеОбъектаТек=СтрРазделить(ДанныеРеквизитов.ТаблицаАналитики,".");
	ТипОбъектаМетаданныхТек=МетаданныеОбъектаТек[0];
	ИмяОбъектаМетаданныхТек=МетаданныеОбъектаТек[1];
	
	СтрокаСоответствия=ДанныеРеквизитов.НастройкаСоответствияРеквизит.СоответствиеОбъектовРоGUID.Найти(ОбъектТекущейИБ,"GUIDОбъектаТекущейИБ");
	
	Если Не СтрокаСоответствия=Неопределено Тогда
		
		ОбъектВнешнейИБ=ПолучитьСсылкуПОСтрокеUUID(ТекСоединениеВИБ,СтрокаСоответствия.ТипОбъектаВнешнейИБ,СтрокаСоответствия.ИмяОбъектаВнешейИБ,СтрокаСоответствия.GUIDОбъектаВнещнейИБ);
		
	Иначе
		
		ТекстСообщения = НСтр("ru = 'При заполнении реквизита %КодАналитики%
		|			не удалось определить элемент %ТаблицаАналитикиВИБ% по идентификатору объекта текущей ИБ: %ОбъектТекущейИБ%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%КодАналитики%", Строка(СтрЗаменить(ДанныеРеквизитов.КодАналитики,"vzv",".")));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ТаблицаАналитикиВИБ%", Строка(ДанныеРеквизитов.ТаблицаАналитикиВИБ));
			
		ТекстСообщения=ТекстСообщения+": "+"#"+ИмяОбъектаМетаданныхТек+"."+ОбъектТекущейИБ+"#";

		МассивОшибок.Добавить(ТекстСообщения);
		ОбъектВнешнейИБ=ВИБ_ПолучитьПустуюСсылкуПоТаблицеАналитики(ТекСоединениеВИБ,ДанныеРеквизитов.ТаблицаАналитикиВИБ);
		
	КонецЕсли;
	
	НоваяСтрока=КэшНайденныхЗначений.Get(ДанныеРеквизитов.ТаблицаАналитикиВИБ).Добавить();
	НоваяСтрока.Ref=ОбъектТекущейИБ;
	НоваяСтрока._Ссылка_=ОбъектВнешнейИБ;
	
	Возврат ОбъектВнешнейИБ;	
	
КонецФункции // ВИБ_ПолучитьОбъектВнешнейИБПоGUIDТекуще

#КонецОбласти