
#Область ДокументыИнвестиций

Процедура УправлениеФормой(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ДанныеВидимости = ИнвестицииВызовСервера.ПолучитьДанныеУправленияФормой(Объект.Организация, Объект.ОбъектИнвестирования);
	
	ВедетсяУчет = ДанныеВидимости.ВедетсяУчет И Объект.РегламентированныйУчет И Объект.НалоговыйУчет;
		
	Элементы.Контрагент.АвтоОтметкаНезаполненного			= ВедетсяУчет;
	Элементы.ДоговорКонтрагента.АвтоОтметкаНезаполненного	= ВедетсяУчет;
	
	Если Не ВедетсяУчет Тогда
		Элементы.Контрагент.ОтметкаНезаполненного			= Ложь;
		Элементы.ДоговорКонтрагента.ОтметкаНезаполненного	= Ложь;	
	КонецЕсли;
		
	Элементы.ГруппаСчетаУчета.Видимость	= ВедетсяУчет;
	Элементы.ВалютаДокумента.Видимость 	= ВедетсяУчет;
	
	//Элементы.ГруппаКонтроль.Видимость 	= РасчетыПоКорпоративнымНалогам.ОпределитьУсловияВидимостиИДвиженияПоСамостоятельнумуКонтролю(Объект);
	Элементы.ОбоснованиеКонтроля.Видимость = Объект.СамостоятельноеПризнаниеКонтроляНадИК;
		
	Если ВедетсяУчет Тогда
	
		Элементы.СчетРасчетов.ПараметрыВыбора = ДанныеВидимости.ПараметрыВыбораПоля;
		Элементы.СчетУчета.ПараметрыВыбора = ДанныеВидимости.ПараметрыВыбораПоля;
		
		МСФОКлиентСерверУХ.ОбновитьСубконтоСчета(Форма, "СчетРасчетов");
		МСФОКлиентСерверУХ.ОбновитьСубконтоСчета(Форма, "СчетУчета");
		
		Если Форма.КэшируемыеЗначения.ВыбытиеИнвестиций Тогда
			МСФОКлиентСерверУХ.ОбновитьСубконтоСчета(Форма, "СчетДохода");
			МСФОКлиентСерверУХ.ОбновитьСубконтоСчета(Форма, "СчетРасхода");			
		КонецЕсли;
		
	КонецЕсли;
	
    Элементы.ГруппаКоличество.Видимость = ДанныеВидимости.ФормаУчастияВКапиталеАкции;
	
	Элементы.РегламентированныйУчет.Доступность = Объект.НалоговыйУчет;
	Если Элементы.ОтражениеВУчете.СписокВыбора.Количество() <> 1 Тогда
		Элементы.ДекорацияСценарий.Видимость = Объект.НалоговыйУчет ИЛИ Объект.МСФОУчет;
		Элементы.Сценарий.Видимость = НЕ Элементы.ДекорацияСценарий.Видимость;
	КонецЕсли;
	
	Элементы.ЭффективнаяДоля.Видимость = Истина;
	Если Объект.НалоговыйУчет И Объект.МСФОУчет И Форма.КэшируемыеЗначения.СценарийМСФО <> Форма.КэшируемыеЗначения.СценарийКИК Тогда
		Элементы.ДекорацияСценарий.Заголовок = "Сценарий: """ + Форма.КэшируемыеЗначения.СценарийМСФО + """ и """ + Форма.КэшируемыеЗначения.СценарийКИК + """";
		Элементы.ЭффективнаяДоля.Видимость = Ложь;
	ИначеЕсли Объект.НалоговыйУчет И Объект.МСФОУчет Тогда
		Элементы.ДекорацияСценарий.Заголовок = "Сценарий: """ + Форма.КэшируемыеЗначения.СценарийМСФО + """";
	ИначеЕсли Объект.МСФОУчет Тогда
		Элементы.ДекорацияСценарий.Заголовок = "Сценарий: """ + Форма.КэшируемыеЗначения.СценарийМСФО + """";
	ИначеЕсли Объект.НалоговыйУчет Тогда
		Элементы.ДекорацияСценарий.Заголовок = "Сценарий: """ + Форма.КэшируемыеЗначения.СценарийКИК + """";
	КонецЕсли;
	Элементы.ОбоснованиеКонтроля.ТолькоПросмотр = Объект.СамостоятельноеПризнаниеКонтроляНадИК;
	
КонецПроцедуры

Процедура ЗаполнитьДокумент(Объект, СтруктураДействий, КэшируемыеЗначения) Экспорт 
	
	Если Не КэшируемыеЗначения.Свойство("СценарийКИК") Тогда
		КэшируемыеЗначения.Вставить("СценарийКИК", ОбщегоНазначенияУХ.ПолучитьЗначениеКонстанты("СценарийОтчетностиКИК"))
	КонецЕсли;
	
	Если Не КэшируемыеЗначения.Свойство("СценарийМСФО") Тогда
		КэшируемыеЗначения.Вставить("СценарийМСФО", ОбщегоНазначенияУХ.ПолучитьЗначениеКонстанты("СценарийМСФО"))
	КонецЕсли;
	
	Если СтруктураДействий.Свойство("РассчитатьОтношениеКГруппе") 
		Или СтруктураДействий.Свойство("ЗаполнитьЭффективнуюДолю") Тогда
										
		ЭффективнаяДоля = РегламентыВызовСервера.ПолучитьЭффективнуюДолю(
											ПолучитьСценарийДокумента(Объект, КэшируемыеЗначения),
											Объект.Дата,
											Объект.Ссылка,
											Объект.Организация,
											Объект.ОбъектИнвестирования
										);
										
		КэшируемыеЗначения.Вставить("ЭффективнаяДоля", ЭффективнаяДоля);
		
	КонецЕсли;
	
	ЗаполнитьВалютуДокумента(		Объект, СтруктураДействий, КэшируемыеЗначения);
	ЗаполнитьЭффективнуюДолю(		Объект, СтруктураДействий, КэшируемыеЗначения);
	РассчитатьОтношениеКГруппе(		Объект, СтруктураДействий, КэшируемыеЗначения);
	ЗаполнитьСчетаДокумента(		Объект, СтруктураДействий, КэшируемыеЗначения);
	ЗаполнитьБалансовуюСтоимость(	Объект, СтруктураДействий, КэшируемыеЗначения);
		
КонецПроцедуры

Процедура УстановитьНезаполненноеЗначение(Параметр, Значение, УстановитьЗначение = Ложь)

	Если УстановитьЗначение Или ((Параметр <> Значение) И ЗначениеЗаполнено(Значение)) Тогда
		Параметр = Значение;
	КонецЕсли;

КонецПроцедуры

#Если Сервер Тогда
Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт 

	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если Не Объект.РегламентированныйУчет Или Не ВстраиваниеУХВызовСервера.ЕстьУчетнаяПолитика(Объект.Организация, Объект.Дата) Тогда
		
		МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
		МассивНепроверяемыхРеквизитов.Добавить("ДоговорКонтрагента");
		МассивНепроверяемыхРеквизитов.Добавить("ВалютаДокумента");
		МассивНепроверяемыхРеквизитов.Добавить("СчетРасчетов");
		МассивНепроверяемыхРеквизитов.Добавить("СчетУчета");
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры
#КонецЕсли

Процедура ПроверитьНалоговоеРезидентство(Реквизиты, Отказ) Экспорт
	
	Если Реквизиты.ОшибкаНалоговыйРезидент = "" Тогда
		Возврат;
	КонецЕсли;	
	
	Отказ = Истина;
	
	ЗаголовокОшибки = СтрШаблон("Ошибка проведения документа <%1>: ", Реквизиты.Ссылка);
		
	Если СтрНайти(Реквизиты.ОшибкаНалоговыйРезидент, "Организация") > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЗаголовокОшибки + "организация не является налоговым резидентом");
	КонецЕсли;		
	
	Если СтрНайти(Реквизиты.ОшибкаНалоговыйРезидент, "ОбъектИнвестирования") > 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ЗаголовокОшибки + "объект инвестирования не является налоговым резидентом");
	КонецЕсли;		
	
КонецПроцедуры

Функция СформироватьСписокСценариев(Реквизиты) Экспорт 
	СписокСценариев = Новый Массив;
	Если НЕ (Реквизиты.МСФОУчет ИЛИ Реквизиты.НалоговыйУчет) Тогда
		СписокСценариев.Добавить(Реквизиты.Сценарий);
	КонецЕсли;
	Если Реквизиты.НалоговыйУчет И СписокСценариев.Найти(Реквизиты.СценарийКИК) = Неопределено Тогда
		СписокСценариев.Добавить(Реквизиты.СценарийКИК);
	КонецЕсли;
	Если Реквизиты.МСФОУчет И СписокСценариев.Найти(Реквизиты.СценарийМСФО) = Неопределено Тогда
		СписокСценариев.Добавить(Реквизиты.СценарийМСФО);
	КонецЕсли;
	Возврат СписокСценариев;
КонецФункции

Функция ПолучитьКлючевыеСубконтоИнвестиций(ВключитьЦБ = Ложь) Экспорт

	КлючевыеСубконто = Новый Соответствие;	
	КлючевыеСубконто.Вставить(Тип("СправочникСсылка.Контрагенты"), 			"КонтрагентИнвестиция");
	КлючевыеСубконто.Вставить(Тип("СправочникСсылка.Организации"),			"ОрганизацияИнвестор");
	КлючевыеСубконто.Вставить(Тип("СправочникСсылка.ДоговорыКонтрагентов"),	"ДоговорыКонтрагентов");
	
	Если ВключитьЦБ Тогда
		КлючевыеСубконто.Вставить(Тип("СправочникСсылка.ЦенныеБумаги"),	"ЦенныеБумаги");
	КонецЕсли;
	
	Возврат КлючевыеСубконто;

КонецФункции

#КонецОбласти

#Область ДействияЗаполнения

Процедура ЗаполнитьВалютуДокумента(Объект, СтруктураДействий, КэшируемыеЗначения) Экспорт
	
	Перем КонтекстДействия;
	
	Если Не СтруктураДействий.Свойство("ЗаполнитьВалютуДокумента", КонтекстДействия) Тогда
		Возврат;
	КонецЕсли;		
	
	Если КонтекстДействия.ЗаполнитьВалютуИзДоговора И Не Объект.ДоговорКонтрагента.Пустая() Тогда		
		Объект.ВалютаДокумента = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	ИначеЕсли Объект.ВалютаДокумента.Пустая() И Не Объект.Организация.Пустая() Тогда
		Объект.ВалютаДокумента = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Объект.Организация, "ФункциональнаяВалюта");
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьЭффективнуюДолю(Объект, СтруктураДействий, КэшируемыеЗначения) Экспорт

	Перем КонтекстДействия;
	
	Если Не СтруктураДействий.Свойство("ЗаполнитьЭффективнуюДолю", КонтекстДействия) Тогда
		Возврат;
	КонецЕсли;		
	
	КонтекстДействия.ЭффективнаяДоля = КэшируемыеЗначения.ЭффективнаяДоля;
										
КонецПроцедуры

Функция РассчитатьОтношениеКГруппе(Объект, СтруктураДействий, КэшируемыеЗначения)

	Перем ОтношенияКГруппе;
	
	Если Не СтруктураДействий.Свойство("РассчитатьОтношениеКГруппе") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ Объект.МСФОУчет Тогда
		Возврат Ложь;
	КонецЕсли;

	КэшируемыеЗначения.Свойство("ОтношенияКГруппе",	ОтношенияКГруппе);
	
	Объект.ОтношениеКГруппе = РегламентыКлиентСервер.ПолучитьОтношениеКГруппеПоДоле(
									КэшируемыеЗначения.ЭффективнаяДоля + Объект.ПрямаяДоля * ?(КэшируемыеЗначения.ВыбытиеИнвестиций, -1, 1), 
									ОтношенияКГруппе
								);
	
	Если Не КэшируемыеЗначения.Свойство("ОтношенияКГруппе") Тогда
		КэшируемыеЗначения.Вставить("ОтношенияКГруппе", ОтношенияКГруппе);
	КонецЕсли;

КонецФункции

Процедура ЗаполнитьСчетаДокумента(Объект, СтруктураДействий, КэшируемыеЗначения)

	Если Не СтруктураДействий.Свойство("ЗаполнитьСчетаДокумента") Тогда
		Возврат;		
	КонецЕсли;
	
	Если Не Объект.РегламентированныйУчет Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОрганизации = ИнвестицииВызовСервера.ПолучитьДанныеЗаполненияСчетовУчета(Объект.Организация, Объект.ОбъектИнвестирования);
	
	Если ПараметрыОрганизации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИзмененОбъектИнвестирования = КэшируемыеЗначения.Свойство("ИзмененОбъектИнвестирования") И (КэшируемыеЗначения.ИзмененОбъектИнвестирования = Истина);
	
	УстановитьНезаполненноеЗначение(Объект.СчетРасчетов, ПараметрыОрганизации.СчетРасчетов);	
	УстановитьНезаполненноеЗначение(Объект.СчетУчета, ПараметрыОрганизации.СчетУчета, ИзмененОбъектИнвестирования);
	
	Если КэшируемыеЗначения.ВыбытиеИнвестиций Тогда
		
		УстановитьНезаполненноеЗначение(Объект.СчетДохода, ПараметрыОрганизации.СчетДохода);
		УстановитьНезаполненноеЗначение(Объект.СчетРасхода, ПараметрыОрганизации.СчетРасхода);
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьБалансовуюСтоимость(Объект, СтруктураДействий, КэшируемыеЗначения) Экспорт
	
	Если Не СтруктураДействий.Свойство("ЗаполнитьБалансовуюСтоимость") Тогда
		Возврат;		
	КонецЕсли;
	
	Если (Не Объект.РегламентированныйУчет) Или Объект.Организация.Пустая() Или Объект.СчетУчета.Пустая() Или Объект.ОбъектИнвестирования.Пустая() Тогда
		Объект.БалансоваяСтоимость = 0;
	Иначе	
		Объект.БалансоваяСтоимость = ИнвестицииВызовСервера.ПолучитьБалансовуюСтоимость(Объект.Организация, Объект.Дата, Объект.Ссылка, Объект.СчетУчета, Объект.ОбъектИнвестирования)	
	КонецЕсли;
	
КонецПроцедуры

Функция ЯвляетсяПАО(Организация, Знач ОрганизацияКодОКОПФ = Неопределено) Экспорт

	Если ОрганизацияКодОКОПФ = Неопределено Тогда
		ОрганизацияКодОКОПФ = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Организация, "КодОКОПФ");
	КонецЕсли;
	
	Возврат ОрганизацияКодОКОПФ = "12247";

КонецФункции

Функция ПолучитьСценарийДокумента(Объект, КэшируемыеЗначения = Неопределено) Экспорт
	СценарийМСФО = Неопределено;
	СценарийКИК = Неопределено;
	
	Если КэшируемыеЗначения <> Неопределено Тогда
		Если НЕ КэшируемыеЗначения.Свойство("СценарийМСФО", СценарийМСФО) Тогда
			СценарийМСФО = ОбщегоНазначенияУХ.ПолучитьЗначениеКонстанты("СценарийМСФО");
		КонецЕсли;
		Если НЕ КэшируемыеЗначения.Свойство("СценарийКИК", СценарийКИК) Тогда
			СценарийКИК = ОбщегоНазначенияУХ.ПолучитьЗначениеКонстанты("СценарийОтчетностиКИК");
		КонецЕсли;
	Иначе
		СценарийМСФО = ОбщегоНазначенияУХ.ПолучитьЗначениеКонстанты("СценарийМСФО");
		СценарийКИК = ОбщегоНазначенияУХ.ПолучитьЗначениеКонстанты("СценарийОтчетностиКИК");
	КонецЕсли;
	
	Если Объект.НалоговыйУчет И Объект.МСФОУчет Тогда
		Возврат СценарийМСФО;
	ИначеЕсли Объект.МСФОУчет Тогда
		Возврат СценарийМСФО;
	ИначеЕсли Объект.НалоговыйУчет Тогда
		Возврат СценарийКИК;
	Иначе
		Возврат Объект.Сценарий;
	КонецЕсли;
КонецФункции

#КонецОбласти
