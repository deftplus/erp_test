////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы Кафка-Коннектор.
//
/////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область СведенияОБиблиотекеИлиКонфигурации

// Определяет список модулей библиотек и конфигурации, которые предоставляют
// основные сведения о себе: имя, версия, список обработчиков обновления
// а также зависимости от других библиотек.
//
// Состав обязательных процедур такого модуля см. в общем модуле ОбновлениеИнформационнойБазыБСП
// (область ПрограммныйИнтерфейс).
// При этом сам модуль Библиотеки стандартных подсистем ОбновлениеИнформационнойБазыБСП
// не требуется явно добавлять в массив МодулиПодсистем.
//
// Параметры:
//  МодулиПодсистем - Массив - имена серверных общих модулей библиотек и конфигурации.
//                             Например: "ОбновлениеИнформационнойБазыБРО" - библиотека,
//                                       "ОбновлениеИнформационнойБазыБП"  - конфигурация.
//                    
Процедура ПриДобавленииПодсистем(МодулиПодсистем) Экспорт
	
	МодулиПодсистем.Добавить("СП_ОбновлениеИнформационнойБазыКафКон");
	
КонецПроцедуры

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
//
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                  Обработчики обновления таких библотек должны быть вызваны ранее
//                                  обработчиков обновления данной библиотеки.
//                                  При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                  порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                  в процедуре ПриДобавленииПодсистем общего модуля ПодсистемыКонфигурацииПереопределяемый.
//   РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт

	Описание.Имя    = "KafkaConnector";
	Описание.Версия = "1.0.0.0";

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - описание полей
//                                  см. в процедуре ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.0.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_0_0_0";
//  Обработчик.РежимВыполнения     = "Монопольно";
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.0.0";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыКафКон.НачальноеЗаполнениеИБ";
	Обработчик.НачальноеЗаполнение = Истина;

КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт

КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
//
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет вывена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
	Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	ТаблицаИзменений = ПолучитьТаблицуИзмененийМеждуВерсиями(ПредыдущаяВерсия, ТекущаяВерсия);
	
	ХранилищеОбщихНастроек.Сохранить(
		"ТаблицаИзмененийКафкаКоннектор",
		"ТаблицаИзмененийКафкаКоннектор",
		ТаблицаИзменений,
		,
		ИмяПользователя()
	);
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
	ТаблицаИзменений = 
		ХранилищеОбщихНастроек.Загрузить(
			"ТаблицаИзмененийКафкаКоннектор", 
			"ТаблицаИзмененийКафкаКоннектор",
			,
			ИмяПользователя()
		);
	
	Если ТаблицаИзменений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МакетКафКон = ПолучитьОбщийМакет("СП_ОписаниеИзмененийСистемыКафКон");
	Если Макет.ВысотаТаблицы = 1 Тогда
		НормализоватьМакетОписанияИзменений(Макет, МакетКафКон);
	КонецЕсли;
	
	Для Каждого СтрокаИзменения Из ТаблицаИзменений Цикл
		Номер = СтрЗаменить(СтрокаИзменения.Версия, ".", "_");
		Макет.Вывести(МакетКафКон.ПолучитьОбласть("Отступ"));
		Макет.Вывести(МакетКафКон.ПолучитьОбласть("Шапка" + Номер));
		Макет.НачатьГруппуСтрок("Версия" + Номер);
		Макет.Вывести(МакетКафКон.ПолучитьОбласть("Версия" + Номер));
		Макет.ЗакончитьГруппуСтрок();
	КонецЦикла;
	
	ХранилищеОбщихНастроек.Удалить(
		"ТаблицаИзмененийКафкаКоннектор",
		"ТаблицаИзмененийКафкаКоннектор",
		ИмяПользователя()
	);
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных,
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется,
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
 
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации.
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт

КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура -
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь,
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода.
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации,
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина.
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
			Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеКафкаКоннектор

// Выполняет начальное заполнение объектов Кафка-Коннектор.
// 
// В некоторых случаях при встраивании подсистемы в старые конфигурации
// не всегда создаются предопределенные элементы плана видов характеристик.
// Данная процедура создает предопределенные элементы программно.
//
Процедура НачальноеЗаполнениеИБ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыКонфигурации.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.СП_ПараметрыКонфигурации КАК ПараметрыКонфигурации";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		
		ТаблицаПредопределенных = ПланыВидовХарактеристик.СП_ПараметрыКонфигурации.ПолучитьТаблицуПредопределенныхЭлементов();
		
		Для Каждого Строка Из ТаблицаПредопределенных Цикл
			
			Элемент = ПланыВидовХарактеристик.СП_ПараметрыКонфигурации.СоздатьЭлемент();
			ЗаполнитьЗначенияСвойств(Элемент, Строка);
			Элемент.ОбменДанными.Загрузка = Истина;
			
			Попытка
				Элемент.Записать();
				
			Исключение
				ШаблонОшибки = "Не удалось записать предопределенный элемент: %1
								|По причине: %2";
				
				ТекстДанных = СтрШаблон("%1 (%2)", Строка.Наименование, Элемент.ИмяПредопределенныхДанных);
				ТекстКомментария = СтрШаблон(ШаблонОшибки, ТекстДанных, ОписаниеОшибки());
				
				ЗаписьЖурналаРегистрации(
					"КафкаКоннектор",
					УровеньЖурналаРегистрации.Ошибка,
					,
					ТекстДанных,
					ТекстКомментария
				);
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОписаниеИзмененийКафкаКоннектор

// Получает таблицу изменений между версиями Кафка-Коннектор.
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - таблица выводимой информации между версиями.
//
Функция ПолучитьТаблицуИзмененийМеждуВерсиями(ПредыдущаяВерсия, ТекущаяВерсия)
	
	ТаблицаИзменений = Новый ТаблицаЗначений;
	ТаблицаИзменений.Колонки.Добавить("Версия");
	ТаблицаИзменений.Колонки.Добавить("ВесВерсии");
	
	РазрядыТекущейВерсии = СтрРазделить(ТекущаяВерсия, ".");
	ВесТекущейВерсии = ВесВерсииИзМассиваСтрок(РазрядыТекущейВерсии);
	
	РазрядыПредыдущейВерсии = СтрРазделить(ПредыдущаяВерсия, ".");
	ВесПредыдущейВерсии = ВесВерсииИзМассиваСтрок(РазрядыПредыдущейВерсии);
	
	МакетОписаниеОбновлений = Метаданные.ОбщиеМакеты.Найти("СП_ОписаниеИзмененийСистемыКафКон");
	Если МакетОписаниеОбновлений <> Неопределено Тогда
		
		ПредикатВерсии = "Версия";
		ПредикатШапки = "Шапка";
		Макет = ПолучитьОбщийМакет(МакетОписаниеОбновлений);
		
		Для каждого Область Из Макет.Области Цикл
			
			Если СтрНайти(Область.Имя, ПредикатВерсии) = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ВерсияВФорматеОписания = Сред(Область.Имя, СтрДлина(ПредикатВерсии) + 1);
			Если Макет.Области.Найти(ПредикатШапки + ВерсияВФорматеОписания) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			РазрядыВерсииСтроками = СтрРазделить(ВерсияВФорматеОписания, "_");
			Если РазрядыВерсииСтроками.Количество() <> 4 Тогда
				Продолжить;
			КонецЕсли;
			
			ВесВерсии = ВесВерсииИзМассиваСтрок(РазрядыВерсииСтроками);
			
			Версия = ""
				+ Число(РазрядыВерсииСтроками[0]) + "."
				+ Число(РазрядыВерсииСтроками[1]) + "."
				+ Число(РазрядыВерсииСтроками[2]) + "."
				+ Число(РазрядыВерсииСтроками[3]);
			
			Если ВесВерсии > ВесПредыдущейВерсии И ВесВерсии <= ВесТекущейВерсии Тогда
				СтрокаИзменений = ТаблицаИзменений.Добавить();
				СтрокаИзменений.Версия = Версия;
				СтрокаИзменений.ВесВерсии = ВесВерсии;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаИзменений.Сортировать("ВесВерсии Убыв");
	
	Возврат ТаблицаИзменений;
	
КонецФункции

// Вычисляет вес версии конфигурации по разрядам массива.
//
Функция ВесВерсииИзМассиваСтрок(РазрядыВерсииСтроками)
	
	Возврат 0
		+ Число(РазрядыВерсииСтроками[0]) * 1000000000
		+ Число(РазрядыВерсииСтроками[1]) * 1000000
		+ Число(РазрядыВерсииСтроками[2]) * 1000
		+ Число(РазрядыВерсииСтроками[3]);
	
КонецФункции

// Приводит макет вывода описания изменений к правильному формату.
// 
// Если не было обновления основной конфигурации, макет описания изменений состоит из одной ячейки. 
// Для корректного вывода информации об обновлении Кафка-Коннектор нужно привести передаваемый макет
// к стандартному виду.
// 
Процедура НормализоватьМакетОписанияИзменений(Макет, МакетКафКон)
	
	ОбластьОтступ = МакетКафКон.ПолучитьОбласть("Отступ");
	ШиринаПервойКолонки = ОбластьОтступ.Область("R1C1:R1C1").ШиринаКолонки;
	ШиринаВторойКолонки = ОбластьОтступ.Область("R1C2:R1C2").ШиринаКолонки;
	
	ТекстОбласти = Макет.Область("R1C1:R1C1").Текст;
	Макет.Область("R1C1:R1C1").Текст = "";
	Макет.Область("R1C1:R1C1").ШиринаКолонки = ШиринаПервойКолонки;
	Макет.Область("R1C2:R1C2").Текст = ТекстОбласти;
	Макет.Область("R1C2:R1C2").ШиринаКолонки = ШиринаВторойКолонки;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти