// МОДУЛЬ ПОДДЕРЖКИ СОГЛАСОВАНИЯ ОТЧЕТА.

Функция ПолучитьИсполнителяСУчетомЗамещения(Пользователь) Экспорт
	
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	Заместители.ЗамещаемыйПользователь
		|ИЗ
		|	РегистрСведений.Заместители КАК Заместители
		|ГДЕ
		|	Заместители.Заместитель = &Заместитель";
		
		Запрос.УстановитьПараметр("Заместитель",Пользователь );
		
		Заместители = Запрос.Выполнить().Выгрузить();
				
		Если Заместители.Количество()=0 Тогда 
			
			Возврат Пользователь;
			
		Иначе
			
			Возврат ПолучитьИсполнителяСУчетомЗамещения(Заместители[0].ЗамещаемыйПользователь);
			
		КонецЕсли;
		
КонецФункции

Функция ПолучитьТипСогласуемогоОбъекта(Ссылка) Экспорт
	РезультатФункции = Неопределено;
	Если ТипЗнч(Ссылка)=Тип("СправочникСсылка.РеестрыСогласуемыхОбъектов") Тогда
		
		РезультатФункции = Ссылка.ТипОбъектаСогласования;
		
	Иначе
		Если Ссылка <> Неопределено Тогда
			ИмяОбъекта=Ссылка.Метаданные().ПолноеИмя();	
			
			Если СтрНайти(ИмяОбъекта,"Справочник")>0 Тогда
				
				РезультатФункции =  Справочники.СправочникиБД.НайтиПоНаименованию(СтрЗаменить(ИмяОбъекта,"Справочник.",""),Истина,,Справочники.ТипыБазДанных.ТекущаяИБ);
				
			ИначеЕсли СтрНайти(ИмяОбъекта,"Документ")>0 Тогда
				
				РезультатФункции =  Справочники.ДокументыБД.НайтиПоНаименованию(СтрЗаменить(ИмяОбъекта,"Документ.",""),Истина,,Справочники.ТипыБазДанных.ТекущаяИБ);
				
			Иначе
				
				РезультатФункции =  Неопределено;
				
			КонецЕсли;
		Иначе
			РезультатФункции =  Неопределено;
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции // ПолучитьТипСогласуемогоОбъекта() 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ПЕРЕХОДА.
//

Процедура ПровестиАнализПереходов(ТаблицаПереходов, ЭтапыМаршрута, ИсходныйЭтап)
	
	ТекущиеЭтапы = ТаблицаПереходов.НайтиСтроки(Новый Структура("ЭтапСогласованияИсточник", ИсходныйЭтап));
	Для Каждого Элемент Из ТекущиеЭтапы Цикл
		ЭтапПриемник = Элемент.ЭтапСогласованияПриемник;
		ЭтапыМаршрута.Добавить(ЭтапПриемник);
		ПровестиАнализПереходов(ТаблицаПереходов, ЭтапыМаршрута, ЭтапПриемник);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМассивИерархии(ОрганизационнаяЕдиница, Сценарий, Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизационнаяЕдиница", ОрганизационнаяЕдиница);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("ПериодСценария", Период);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.ОрганизационнаяЕдиница
	|ИЗ
	|	Справочник.ВерсииРегламентовПодготовкиОтчетности.СтруктураГруппы КАК ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	|		ПО ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.Ссылка = УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры
	|ГДЕ
	|	УправлениеПериодомСценария.Сценарий = &Сценарий
	|	И УправлениеПериодомСценария.ПериодСценария = &ПериодСценария
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&ОрганизационнаяЕдиница";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОрганизационнаяЕдиница");
	
КонецФункции

Функция ПолучитьМассивИерархии_ПоВерсииОрганизационнойСтруктуры(ОрганизационнаяЕдиница, ВерсияРегламентовПодготовкиОтчетности) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОрганизационнаяЕдиница", ОрганизационнаяЕдиница);
	Запрос.УстановитьПараметр("Ссылка", ВерсияРегламентовПодготовкиОтчетности);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.ОрганизационнаяЕдиница
	|ИЗ
	|	Справочник.ВерсииРегламентовПодготовкиОтчетности.СтруктураГруппы КАК ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы
	|ГДЕ
	|	ВерсииРегламентовПодготовкиОтчетностиСтруктураГруппы.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	&ОрганизационнаяЕдиница";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ОрганизационнаяЕдиница");
	
КонецФункции

Процедура ПодготовитьСтруктуруЛимитов(СтруктураЛимитов, Документ)
	
		
	Если СтруктураЛимитов = Неопределено Тогда
		
		ОстатокДСКонтроль              = Неопределено;
		ОстатокДСИсполнение            = 0;
		
		ОстатокПланДДСКонтроль         = Неопределено;
		ОстатокПланДДСИсполнение       = 0;
		
		ОстатокВзаиморасчетыКонтроль   = Неопределено;
		ОстатокВзаиморасчетыИсполнение = 0;
		
		Лимиты = УправлениеДенежнымиСредствамиУХ.ПолучитьИсполнениеЛимитовПоЗаявке(Документ);
		
		Если Лимиты.Свойство("ЛимитыОстатковДС") И Лимиты.ЛимитыОстатковДС.Количество() > 0 Тогда
			
			ТС = Лимиты.ЛимитыОстатковДС[0];
			ОстатокДСКонтроль   = ТС.ЛимитОстаткаМин;
			ОстатокДСИсполнение = ТС.СуммаРазмещения + ТС.СуммаДокумента;
			
		КонецЕсли;
		
		Если Лимиты.Свойство("ЛимитыВзаиморасчеты") И Лимиты.ЛимитыВзаиморасчеты.Количество() > 0 Тогда
			
			ТС = Лимиты.ЛимитыВзаиморасчеты[0];
			ОстатокВзаиморасчетыКонтроль   = ТС.СуммаВзаиморасчетовКонтроль;
			ОстатокВзаиморасчетыИсполнение = ТС.СуммаВзаиморасчетовИсполнение + ТС.СуммаПлатежа;
			
		КонецЕсли;
		
		Если Лимиты.Свойство("ЛимитыПланДДС") И Лимиты.ЛимитыПланДДС.Количество() > 0 Тогда
			
			ТС = Лимиты.ЛимитыПланДДС[0];
			ОстатокПланДДСКонтроль   = ТС.СуммаКонтрольОборот;
			ОстатокПланДДСИсполнение = ТС.СуммаИСполнениеОборот + ТС.СуммаИсполненияТекущая;
			
		КонецЕсли;
		
		СтруктураЛимитов = Новый Структура("ЛимитыОстатковДС, ЛимитыВзаиморасчеты, ЛимитыПланДДС"
										   , Новый Структура("Исполнение, Контроль", ОстатокДСИсполнение, ОстатокДСКонтроль)
										   , Новый Структура("Исполнение, Контроль", ОстатокВзаиморасчетыИсполнение, ОстатокВзаиморасчетыКонтроль)
										   , Новый Структура("Исполнение, Контроль", ОстатокПланДДСИсполнение, ОстатокПланДДСКонтроль));
		
	КонецЕсли;
	
КонецПроцедуры

Функция ВернутьПостроительЗапроса(Объект)
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	
	Если ТипЗнч(Объект) = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
		
		ПостроительЗапроса.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
		|ГДЕ
		|	НастраиваемыйОтчет.Ссылка = &ЭкземплярОтчета
		|{ГДЕ
		|	НастраиваемыйОтчет.Организация.*,
		|	НастраиваемыйОтчет.Аналитика1.*,
		|	НастраиваемыйОтчет.Аналитика2.*,
		|	НастраиваемыйОтчет.Аналитика3.*,
		|	НастраиваемыйОтчет.Аналитика4.*,
		|	НастраиваемыйОтчет.Аналитика5.*,
		|	НастраиваемыйОтчет.Аналитика6.*,
		|	НастраиваемыйОтчет.ВидОтчета.*}";
		
		ПостроительЗапроса.Параметры.Вставить("ЭкземплярОтчета", Объект);
		
	ИначеЕсли  ТипЗнч(Объект) = Тип("ДокументСсылка.ЗаявкаНаИзменениеНСИ") Тогда  //Отдельно заявки на НСИ
		
		ПостроительЗапроса.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЗаявкаНаИзменениеНСИ.Ссылка
		|ИЗ
		|	Документ.ЗаявкаНаИзменениеНСИ КАК ЗаявкаНаИзменениеНСИ
		|ГДЕ
		|	ЗаявкаНаИзменениеНСИ.Ссылка = &Заявка
		|{ГДЕ
		|	ЗаявкаНаИзменениеНСИ.ВидОперации.*,
		|	ЗаявкаНаИзменениеНСИ.ИзменяемыйОбъект.*}";
		
		ПостроительЗапроса.Параметры.Вставить("Заявка", Объект);
	
		
		
	ИначеЕсли  Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Объект)) Тогда //Любой другой  справочник	
		
		ИмяОбъекта = Объект.Метаданные().Имя;
		ПостроительЗапроса.Текст =  
		 "ВЫБРАТЬ ПЕРВЫЕ 1
		|	СправочникОбъект.Ссылка
		|ИЗ
		|	Справочник."+ИмяОбъекта+" КАК СправочникОбъект
		|ГДЕ
		|	СправочникОбъект.Ссылка = &Заявка
		|{ГДЕ
		|	СправочникОбъект.Ссылка.*}";

		ПостроительЗапроса.Параметры.Вставить("Заявка", Объект);

		
	КонецЕсли;
	
	Возврат ПостроительЗапроса;
	
	
КонецФункции

Функция ПолучитьМассивАналитик(ЭкземплярОтчета)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "";

	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Запрос.Текст = Запрос.Текст + "
		|, ВидАналитики" + Инд;
	КонецЦикла;
	
	Запрос.Текст = "ВЫБРАТЬ " + Сред(Запрос.Текст, 3) + " ИЗ Справочник.ВидыОтчетов КАК ВидыОтчетов
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НастраиваемыйОтчет КАК НАстраиваемыйОтчет
	|ПО ВидыОтчетов.Ссылка = НастраиваемыйОтчет.ВидОтчета
	| И НастраиваемыйОтчет.Ссылка = &ЭкземплярОтчета";
	
	Запрос.УстановитьПараметр("ЭкземплярОтчета", ЭкземплярОтчета);
	МассивАналитик = Новый Массив;
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Если ЗначениеЗаполнено(Выборка["ВидАналитики" + Инд]) Тогда
			МассивАналитик.Добавить(Выборка["ВидАналитики" + Инд]);
		Иначе
			Возврат МассивАналитик;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивАналитик;
	
КонецФункции

Функция ПроверитьОтборПоПостроителюЗапроса(ПостроительЗапроса, Документ, ИмяПоля, Строка)
	
	Если ПостроительЗапроса = Неопределено Тогда
		ПостроительЗапроса = ВернутьПостроительЗапроса(Документ);
	КонецЕсли;
	ПостроительЗапроса.Отбор.Сбросить();
	Отбор = ПостроительЗапроса.Отбор.Найти(ИмяПоля);
	
	Если Отбор = Неопределено Тогда
		Отбор = ПостроительЗапроса.Отбор.Добавить(ИмяПоля);
	КонецЕсли;
	
	Отбор.ВидСравнения = Строка.Значение;
	Отбор.Значение = Строка.ЗначениеОтбора;
	Отбор.Использование = Истина;
	
	Возврат НЕ ПостроительЗапроса.Результат.Пустой();
	
КонецФункции

Функция СравнитьЧислаПоВидуСравнения(ТекВидСравнения, ПервоеЧисло, ВтороеЧисло) Экспорт
	
	Если ТекВидСравнения = ВидСравнения.Равно Тогда
		Возврат ПервоеЧисло = ВтороеЧисло;
	ИначеЕсли ТекВидСравнения = ВидСравнения.НеРавно Тогда
		Возврат ПервоеЧисло <> ВтороеЧисло;
	ИначеЕсли ТекВидСравнения = ВидСравнения.Больше Тогда
		Возврат ПервоеЧисло > ВтороеЧисло;
	ИначеЕсли ТекВидСравнения = ВидСравнения.БольшеИлиРавно Тогда
		Возврат ПервоеЧисло >= ВтороеЧисло;
	ИначеЕсли ТекВидСравнения = ВидСравнения.Меньше Тогда
		Возврат ПервоеЧисло < ВтороеЧисло;
	ИначеЕсли ТекВидСравнения = ВидСравнения.МеньшеИлиРавно Тогда
		Возврат ПервоеЧисло <= ВтороеЧисло;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ПроверкаУсловияПерехода(ПостроительЗапроса, МассивВидовАналитик,  Строка, Документ, СтруктураЛимитов)
	
	//77777
	Если Строка.УсловиеДействие = Перечисления.УсловияЭтапа.Организация Тогда
		
		Возврат ПроверитьОтборПоПостроителюЗапроса(ПостроительЗапроса, Документ, "Организация", Строка);
		
	ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.Контрагент Тогда
		
		Возврат ПроверитьОтборПоПостроителюЗапроса(ПостроительЗапроса, Документ, "Контрагент", Строка);
		
	ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.Договор Тогда
		
		Возврат ПроверитьОтборПоПостроителюЗапроса(ПостроительЗапроса, Документ, "ДоговорКонтрагента", Строка);
		
	ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.НСИВидЗаявки Тогда
		
		Возврат ПроверитьОтборПоПостроителюЗапроса(ПостроительЗапроса, Документ, "ВидОперации", Строка);
	
		
	ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.СтатьяДДС Тогда
		
		Возврат ПроверитьОтборПоПостроителюЗапроса(ПостроительЗапроса, Документ, "СтатьяДвиженияДенежныхСредств", Строка);
		
	ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.СуммаПлатежа Тогда
		
		Возврат СравнитьЧислаПоВидуСравнения(Строка.Значение, Документ.СуммаДокумента, Строка.ЗначениеОтбора);
		
	ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.ВидОтчета Тогда
		
		Если ПостроительЗапроса = Неопределено Тогда
			ПостроительЗапроса = ВернутьПостроительЗапроса(Документ);
		КонецЕсли;
		
		ПостроительЗапроса.Отбор.Сбросить();
		Отбор = ПостроительЗапроса.Отбор.Найти("ВидОтчета");
		Если Отбор = Неопределено Тогда
			Отбор = ПостроительЗапроса.Отбор.Добавить("ВидОтчета");
		КонецЕсли;
		Отбор.Значение     = Строка.ЗначениеОтбора;
		Отбор.ВидСравнения = Строка.Значение;
		Отбор.Использование = Истина;
		
		Возврат НЕ ПостроительЗапроса.Результат.Пустой();
		
	ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.Исполнитель Тогда
		
		ТекПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
		Если Строка.Значение = ВидСравнения.Равно Тогда
			Возврат Строка.Значение = ТекПользователь;
		ИначеЕсли Строка.Значение = ВидСравнения.НеРавно Тогда
			Возврат Строка.Значение <> ТекПользователь;
		ИначеЕсли Строка.Значение = ВидСравнения.ВСписке Тогда
			Возврат Строка.Значение.НайтиПоЗначению(ТекПользователь) <> Неопределено;
		ИначеЕсли Строка.Значение = ВидСравнения.НеРавно Тогда
			Возврат Строка.Значение.НайтиПоЗначению(ТекПользователь) = Неопределено;
		Иначе
			ВОзврат Истина;
		КонецЕсли;
		
	ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.ПриоритетЗаявки Тогда
		
		Возврат ПроверитьОтборПоПостроителюЗапроса(ПостроительЗапроса, Документ, "Приоритет", Строка);
		
	ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.Взаиморасчеты Тогда
		
		ПодготовитьСтруктуруЛимитов(СтруктураЛимитов, Документ);
		Если НЕ СтруктураЛимитов.Свойство("ЛимитыВзаиморасчеты") Тогда
			Возврат Истина;
		Иначе
			ТС = СтруктураЛимитов.ЛимитыВзаиморасчеты;
		КонецЕсли;
		
		Если ТС.Контроль = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если Строка.Значение  = Перечисления.ВидСравненияЛимитовЗаявок.АбсолютноеПревышениеЛимитаНа Тогда
			Возврат ТС.Исполнение - ТС.Контроль >= Строка.ЗначениеОтбора;
		ИначеЕсли Строка.Значение  = Перечисления.ВидСравненияЛимитовЗаявок.ОтносительноеПревышениеЛимитаНа Тогда
			Возврат ТС.Исполнение - ТС.Контроль >= Строка.ЗначениеОтбора * ТС.Контроль / 100;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.ОстаткиДС Тогда
		
		ПодготовитьСтруктуруЛимитов(СтруктураЛимитов, Документ);
		
		Если НЕ СтруктураЛимитов.Свойство("ЛимитыОстатковДС") Тогда
			Возврат Истина;
		Иначе
			ТС = СтруктураЛимитов.ЛимитыОстатковДС;
		КонецЕсли;
		
		Если ТС.Контроль = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если Строка.Значение  = Перечисления.ВидСравненияЛимитовЗаявок.АбсолютноеПревышениеЛимитаНа Тогда
			Возврат ТС.Исполнение - ТС.Контроль >= Строка.ЗначениеОтбора;
		ИначеЕсли Строка.Значение  = Перечисления.ВидСравненияЛимитовЗаявок.ОтносительноеПревышениеЛимитаНа Тогда
			Возврат ТС.Исполнение - ТС.Контроль >= Строка.ЗначениеОтбора * ТС.Контроль / 100;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
		
	ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.ПланыДДС Тогда
		
		ПодготовитьСтруктуруЛимитов(СтруктураЛимитов, Документ);
		
		Если НЕ СтруктураЛимитов.Свойство("ЛимитыПланДДС") Тогда
			Возврат Истина;
		Иначе
			ТС = СтруктураЛимитов.ЛимитыПланДДС;
		КонецЕсли;
		
		Если ТС.Контроль = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если Строка.Значение  = Перечисления.ВидСравненияЛимитовЗаявок.АбсолютноеПревышениеЛимитаНа Тогда
			Возврат ТС.Исполнение - ТС.Контроль >= Строка.ЗначениеОтбора;
		ИначеЕсли Строка.Значение  = Перечисления.ВидСравненияЛимитовЗаявок.ОтносительноеПревышениеЛимитаНа Тогда
			Возврат ТС.Исполнение - ТС.Контроль >= Строка.ЗначениеОтбора * ТС.Контроль / 100;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
		
	ИначеЕсли Строка.УсловиеДействие = Перечисления.УсловияЭтапа.ПараметрическоеУсловие Тогда
		
		Возврат РассчитатьПараметрическиеУсловия(Строка.ЗначениеОтбора, Документ);
		
	ИначеЕсли  ТипЗнч(Документ) = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
		
		Если МассивВидовАналитик = Неопределено Тогда
			МассивВидовАналитик = ПолучитьМассивАналитик(Документ);
		КонецЕсли;
		
		Индекс = МассивВидовАналитик.Найти(Строка.УсловиеДействие);
		
		Если Индекс = Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
		
		Если ПостроительЗапроса = Неопределено Тогда
			ПостроительЗапроса = ВернутьПостроительЗапроса(Документ);
		КонецЕсли;
		ПостроительЗапроса.Отбор.Сбросить();
		ИмяАналитики = "Аналитика" + Строка(Индекс + 1);
		Отбор = ПостроительЗапроса.Отбор.Найти(ИмяАналитики);
		Если Отбор = Неопределено Тогда
			Отбор = ПостроительЗапроса.Отбор.ДОбавить(ИмяАналитики);
		КонецЕсли;
		
		Отбор.Значение      = Строка.ЗначениеОтбора;
		Отбор.ВидСравнения  = Строка.Значение;
		Отбор.Использование = Истина;
		
		Возврат НЕ ПостроительЗапроса.Результат.Пустой();
		
	ИначеЕсли  ТипЗнч(Документ) = Тип("ДокументСсылка.ЗаявкаНаИзменениеНСИ") Тогда
	
		   Возврат ПроверитьОтборПоПостроителюЗапроса(ПостроительЗапроса, Документ,  "ИзменяемыйОбъект."+Строка.УсловиеДействие, Строка);
		   
	Иначе	   
		
		    Возврат ПроверитьОтборПоПостроителюЗапроса(ПостроительЗапроса, Документ,   "Ссылка."+Строка.УсловиеДействие, Строка);
		  
	КонецЕсли;
	
КонецФункции

Функция ЕстьСуперПользователь(Знач Организация) Экспорт
	
	МассивОрганизаций = Новый Массив;
	МассивОрганизаций.Добавить(Неопределено);
	МассивОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
	МассивОрганизаций.Добавить(Организация);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.РольСуперПользователь КАК РольСуперПользователь
	|		ПО ОтветственныеОрганизаций.Роль = РольСуперПользователь.Значение
	|ГДЕ
	|	ОтветственныеОрганизаций.Организация В(&Организации)
	|	И ОтветственныеОрганизаций.Пользователь = &Пользователь";
	
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("Организации" , МассивОрганизаций);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

Функция ОпределитьДокументСогласованияДляЭтапаСогласования(МаршрутСогласования, ЭтапСогласования, ПроцессРодительВход = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЭкземплярПроцесса.Ссылка КАК Ссылка,
	|	ЭкземплярПроцесса.ПроцессРодитель КАК ПроцессРодитель
	|ИЗ
	|	Документ.ЭкземплярПроцесса КАК ЭкземплярПроцесса
	|ГДЕ
	|	ЭкземплярПроцесса.ШаблонПроцесса = &ШаблонПроцесса
	|	И ЭкземплярПроцесса.ЭтапРодитель = &ЭтапРодитель
	|	И ВЫБОР
	|			КОГДА &ПроцессРодитель = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЭкземплярПроцесса.ПроцессРодитель = &ПроцессРодитель
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭкземплярПроцесса.Дата УБЫВ";
	Запрос.УстановитьПараметр("ПроцессРодитель", ПроцессРодительВход);
	Запрос.УстановитьПараметр("ШаблонПроцесса", МаршрутСогласования);
	Запрос.УстановитьПараметр("ЭтапРодитель", ЭтапСогласования);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура УдалитьЗаписиВРегистреСостояний(Ссылка) Экспорт
	
	ТекущееСостояние = УправлениеПроцессамиСогласованияУХ.ВернутьТекущееСостояние(Ссылка);
	
	НаборЗаписей = РегистрыСведений.РегистрСостоянийОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Значение      = Ссылка;
	НаборЗаписей.Отбор.Объект.Использование = Истина;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// Возвращает количество незавершённых задач по согласованию для пользователя ПользовательВход.
Функция ПолучитьКоличествоЗадачПользователяПоСогласованию(ПользовательВход) Экспорт
	РезультатФункции = 0;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Ответственный,
		|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Задача
		|ИЗ
		|	РегистрСведений.ОтложеннаяОбработкаЭтаповПроцессов.СрезПоследних КАК ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних
		|ГДЕ
		|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Ответственный = &Ответственный
		|	И ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Выполнено = ЛОЖЬ
		|	И ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ДокументПроцесса <> ЗНАЧЕНИЕ(Документ.ЭкземплярПроцесса.Пустаяссылка)";
	Запрос.УстановитьПараметр("Ответственный", ПользовательВход);
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	РезультатФункции = Выгрузка.Количество();
	Возврат РезультатФункции;
КонецФункции

// Удаляет заместителя ЗаместительВход пользователя ЗамещаемыйВход. Возвращает
// успешность операции.
Функция УдалитьЗаместителя(ЗамещаемыйВход, ЗаместительВход) Экспорт
	// Инициализация.
	НачатьТранзакцию();
	ЕстьОшибка = Ложь;
	РезультатФункции = Ложь;
	Попытка
		// Удаление из регистра.
		НаборЗаписей = РегистрыСведений.Заместители.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЗамещаемыйПользователь.Установить(ЗамещаемыйВход);
		НаборЗаписей.Отбор.Заместитель.Установить(ЗаместительВход);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать();
		// Отправка уведомления.
		ВидСобытияУдалениеЗаместителя = Справочники.ВидыСобытийОповещений.УдаленЗаместитель;
		МодульУправленияОповещениямиУХ.ОповеститьПользователей(ВидСобытияУдалениеЗаместителя, , ЗамещаемыйВход, ЗаместительВход);
	Исключение
		ЕстьОшибка = Истина;
		ТекстСообщения = НСтр("ru = 'При удалении заместителя %Заместитель% пользователя %Замещаемый% возникли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Заместитель%", ЗаместительВход);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Замещаемый%", ЗамещаемыйВход);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
	// Завершение транзакции и вывод результата.
	Если ЕстьОшибка Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
		РезультатФункции = Истина;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// По ссылке на объект СсылкаВход вовзращает список значений, содержащих задачи,
// подлежащих к выполнению пользователем ПользовательВход по этапу с типом ТипЭтапаВход. 
// Когда пользователь ПользовательВход не задан - будет использован текущий. Когда не
// задан тип этапа - будет использован тип Обработка
Функция ПолучитьСписокЗадачЭтапаСТипомПоОбъекту(СсылкаВход, ТипЭтапаВход = Неопределено, ПользовательВход = Неопределено) Экспорт
	РезультатФункции = Новый СписокЗначений;
	Если ПользовательВход = Неопределено Тогда
		Ответственный = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	Иначе
		Ответственный = ПользовательВход;
	КонецЕсли;
	Если ТипЭтапаВход = Неопределено Тогда
		ТипЭтапаРабочий = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Обработка;
	Иначе
		ТипЭтапаРабочий = ТипЭтапаВход;
	КонецЕсли;
	СписокУтверждающих = Новый СписокЗначений();
	СписокУтверждающих.Добавить(Ответственный);
	МодульУправленияПроцессамиУХ.ПолучитьЗамещаемых(Ответственный, СписокУтверждающих);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Задача КАК Задача,
		|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Выполнено КАК Выполнено,
		|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Ответственный КАК Ответственный,
		|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ЭтапПроцесса КАК ЭтапПроцесса,
		|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ВидДействия КАК ВидДействия
		|ИЗ
		|	РегистрСведений.ОтложеннаяОбработкаЭтаповПроцессов.СрезПоследних КАК ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних
		|ГДЕ
		|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ВидДействия = &ВидДействия
		|	И ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ЭтапПроцесса.ТипЭтапа = &ТипЭтапа
		|	И ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Ответственный В(&Ответственный)
		|	И ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Выполнено = &Выполнено
		|	И ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ДокументПроцесса.КлючевойОбъектПроцесса В(&КлючевойОбъектПроцесса)";
	Запрос.УстановитьПараметр("ВидДействия", Перечисления.СобытияОтложеннойОбработкиПроцессов.ОбработкаЭтапаСогласования);
	Запрос.УстановитьПараметр("КлючевойОбъектПроцесса", СсылкаВход);
	Запрос.УстановитьПараметр("Выполнено", Ложь);
	Запрос.УстановитьПараметр("Ответственный", СписокУтверждающих);
	Запрос.УстановитьПараметр("ТипЭтапа", ТипЭтапаРабочий);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатФункции.Добавить(ВыборкаДетальныеЗаписи.Задача);
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Определяет выполняется ли этап с типом этапа ТипЭтапаВход для объекта СсылкаВход.
Функция ТребуетсяВыполнениеЭтапаСТипом(СсылкаВход, ТипЭтапаВход) Экспорт
	РезультатФункции = Ложь;
	ТаблицаЭтапов = МодульУправленияПроцессамиУХ.ЭтапыСогласованияДляТекущегоПользователя(СсылкаВход);
	Для каждого ТекТаблицаЭтапов Из ТаблицаЭтапов Цикл
		ТекЭтап = ТекТаблицаЭтапов.ЭтапПроцесса;
		Если ЗначениеЗаполнено(ТекЭтап) Тогда
			Если ТекЭтап.ТипЭтапа = ТипЭтапаВход Тогда
				РезультатФункции = Истина;
				Прервать;			// Значение найдено. Вернём его.
			Иначе
				// Выполняем поиск далее.
			КонецЕсли;	
		Иначе
			// Этап не задан. Пропускаем строку.
		КонецЕсли;	
	КонецЦикла;	
	Возврат РезультатФункции;
КонецФункции

// Возвращает массив, содержащий невыполненные задачи по связанному объекту СвязанныйОбъектВход,
// этапу ЭтапВход и выполняемые пользователем ПользовательВход. Каждый из переданных параметров отбора
// может быть как одиночным, так и коллекцией.
Функция ПолучитьНевыполненныеЗадачиПользователяПоЭтапам(ПользовательВход, ЭтапВход, СвязанныйОбъектВход) Экспорт
	РезультатФункции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Задача
		|ИЗ
		|	РегистрСведений.ОтложеннаяОбработкаЭтаповПроцессов.СрезПоследних КАК ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних
		|ГДЕ
		|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ЭтапПроцесса В(&ЭтапПроцесса)
		|	И ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Ответственный В(&Ответственный)
		|	И ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ДокументПроцесса.КлючевойОбъектПроцесса В(&СвязанныйОбъект)
		|	И ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Выполнено = ЛОЖЬ
		|	И ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ВремяЗавершенияЗадания = &ПустаяДата
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВизаДополнительныхСогласующих.Задача
		|ИЗ
		|	РегистрСведений.ВизаДополнительныхСогласующих КАК ВизаДополнительныхСогласующих
		|ГДЕ
		|	ВизаДополнительныхСогласующих.ЭтапПроцесса В(&ЭтапПроцесса)
		|	И ВизаДополнительныхСогласующих.ЭкземплярПроцесса.КлючевойОбъектПроцесса В(&СвязанныйОбъект)
		|	И ВизаДополнительныхСогласующих.Согласующий В(&Ответственный)
		|	И ВизаДополнительныхСогласующих.АрхивнаяЗапись = ЛОЖЬ";
	Запрос.УстановитьПараметр("СвязанныйОбъект", СвязанныйОбъектВход);
	Запрос.УстановитьПараметр("Ответственный", ПользовательВход);
	Запрос.УстановитьПараметр("ЭтапПроцесса", ЭтапВход);
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатФункции.Добавить(ВыборкаДетальныеЗаписи.Задача);
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАСЧЕТА ПАРАМЕТРИЧЕСКИХ УСЛОВИЙ.
//

Функция РассчитатьПараметрическиеУсловия(Условие, ЭкземплярОтчета) Экспорт
	
	// Готовим исходные данные для расчета контрольных соотношений
	
	СтруктураОтвета = ПодготовитьДанныеПараметрическихУсловий(Условие, ЭкземплярОтчета.ВидОтчета);
	
	// Готовим таблицы данных по параметрически настроенным операндам	
	
	ПодготовитьТаблицуЗначенийОперандовПУ(СтруктураОтвета, ЭкземплярОтчета);
	
	// Рассчитаем показатели
	мЗначенияОперандов = СтруктураОтвета.мЗначенияОперандов;
	СтруктураРасчета = Новый Структура;
	
	Для Каждого Запись Из мЗначенияОперандов Цикл
		СтруктураРасчета.Вставить("_" + Запись.КодОперанда, Запись.Значение);
	КонецЦикла;
	
	мКонтрольныеСоотношения = УправлениеОтчетамиУХ.ПолучитьФормулыРасчета(Условие, Условие);
	Если мКонтрольныеСоотношения.Количество() > 0 Тогда
		ИсходныйТекстПроцедуры = мКонтрольныеСоотношения[0].Процедура;
	Иначе
		ИсходныйТекстПроцедуры = "";
	КонецЕсли;
	
	ТекстПроцедуры = СтрЗаменить(СтрЗаменить(ИсходныйТекстПроцедуры, "[", "СтруктураРасчета._"), "]", "");
	Попытка
		РезультатПроверки = Вычислить(ТекстПроцедуры);
	Исключение
		
		СтрокаШаблона = НСтр("ru = 'Ошибка при расчете параметрического условия ""%1""'");
		
		Если ЗначениеЗаполнено(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Условие));
		КонецЕсли;
		
	КонецПопытки;
	
	Возврат ?(ТипЗнч(РезультатПроверки) = Тип("Булево"), РезультатПроверки, Ложь);

	
КонецФункции

Функция ПодготовитьДанныеПараметрическихУсловий(Условие, ВидОтчета)
	
	
	
	// Подготовим таблицу для записи значений операндов
	
	мЗначенияОперандов=Новый ТаблицаЗначений;
	мЗначенияОперандов.Колонки.Добавить("КодОперанда");
	мЗначенияОперандов.Колонки.Добавить("Значение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
	
	ДанныеОперандов=УправлениеОтчетамиУХ.ПолучитьДанныеОперандовДляРасчета(Истина,
									Условие);
	
	СтруктураОтвета = Новый Структура("мОперанды, мЗначенияОперандов, мТабПоказателиЗапросы, мСоответствиеОперандовИПоказателейОтбора, мТаблицаВидовАналитикВидаОтчета"
									  , ДанныеОперандов.мОперанды
									  , мЗначенияОперандов
									  , ДанныеОперандов.мТабПоказателиЗапросы
									  , ДанныеОперандов.мСоответствиеОперандовИПоказателейОтбора
									  , ОбщегоНазначенияУХ.ЗаполнитьВидыАналитик(ВидОтчета));
	Возврат СтруктураОтвета;
	
КонецФункции

Процедура ПодготовитьТаблицуЗначенийОперандовПУ(СтруктураОтвета, ЭкземплярОтчета)
	
	мОперанды             = СтруктураОтвета.мОперанды;
	мЗначенияОперандов    = СтруктураОтвета.мЗначенияОперандов;
	мТабПоказателиЗапросы = СтруктураОтвета.мТабПоказателиЗапросы;
	
	ПостроительЗапросаВнутр=Новый ПостроительЗапроса; // Построитель запроса к регистру "ЗначенияПоказателей";
	ПостроительЗапросаВнутр.ДобавлениеПредставлений=ТипДобавленияПредставлений.НеДобавлять;
	
	мЗначенияОперандов.Очистить();
	КонтекстОтчета = Новый Структура("Организация, ПериодОтчета, Сценарий, ВидОтчета, ОсновнаяВалюта, Аналитика1, Аналитика2, Аналитика3, Аналитика4, Аналитика5, Аналитика6,  АнализЧувствительности"
									, ЭкземплярОтчета.Организация
									, ЭкземплярОтчета.ПериодОтчета
									, ЭкземплярОтчета.Сценарий
									, ЭкземплярОтчета.ВидОтчета
									, ЭкземплярОтчета.ОсновнаяВалюта
									, ЭкземплярОтчета.Аналитика1
									, ЭкземплярОтчета.Аналитика2
									, ЭкземплярОтчета.Аналитика3
									, ЭкземплярОтчета.Аналитика4
									, ЭкземплярОтчета.Аналитика5
									, ЭкземплярОтчета.Аналитика6
									, Ложь);
	
	Для Каждого СтрЗапрос ИЗ мТабПоказателиЗапросы Цикл
		
		Если ТипЗнч(СтрЗапрос.ТаблицаОперандов)=Тип("ТаблицаЗначений") Тогда // Формируем построитель запроса для списка показателей
			
			Если СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета Тогда
				
				ПолучитьДанныеВнутр(КонтекстОтчета, СтрЗапрос, СтруктураОтвета);
				
			ИначеЕсли СтрЗапрос.СпособПолучения=Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПараметрическаяНастройка Тогда	
				
				ПолучитьДанныеВнутрПараметрический(ПостроительЗапросаВнутр,СтрЗапрос, СтруктураОтвета, ЭкземплярОтчета);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

	
КонецПроцедуры

Процедура НастроитьПостроительВнутрПоказатель(ПостроительЗапросаВнутр,СтрЗапрос, ЭкземплярОтчета, СтруктураОтвета) Экспорт
	
		//////////// Настраиваем построитель запроса ////////////////////
		
		ПостроительЗапросаВнутр.Текст="ВЫБРАТЬ
		|	СУММА(ЗначенияПоказателейОтчетов.ЗначениеЧисло) КАК Значение
		|{ВЫБРАТЬ
		|	ЗначенияПоказателейОтчетов.Версия.Организация.* КАК Организация,
		|	ЗначенияПоказателейОтчетов.Версия.Проект.* КАК Проект,
		|	ЗначенияПоказателейОтчетов.Версия.Регистратор.* КАК Регистратор,
		|	ЗначенияПоказателейОтчетов.Версия.ПериодОтчета.* КАК ПериодОтчета,
		|	ЗначенияПоказателейОтчетов.Показатель.*,
		|	ЗначенияПоказателейОтчетов.Версия.Сценарий.* КАК Сценарий,
		|	ЗначенияПоказателейОтчетов.Аналитика1.*,
		|	ЗначенияПоказателейОтчетов.Аналитика2.*,
		|	ЗначенияПоказателейОтчетов.Аналитика3.*,
		|	ЗначенияПоказателейОтчетов.Аналитика4.*,
		|	ЗначенияПоказателейОтчетов.Аналитика5.*,
		|	ЗначенияПоказателейОтчетов.Аналитика6.*,
		|	ЗначенияПоказателейОтчетов.ИтоговоеЗначение,
		|	ЗначенияПоказателейОтчетов.Версия.Валюта.*}
		|ИЗ
		|	РегистрСведений.ЗначенияПоказателейОтчетов КАК ЗначенияПоказателейОтчетов
		|{ГДЕ
		|	ЗначенияПоказателейОтчетов.Версия.Организация.* КАК Организация,
		|	ЗначенияПоказателейОтчетов.Версия.Проект.* КАК Проект,
		|	ЗначенияПоказателейОтчетов.Версия.Регистратор.* КАК Регистратор,
		|	ЗначенияПоказателейОтчетов.Версия.ПериодОтчета.* КАК ПериодОтчета,
		|	ЗначенияПоказателейОтчетов.Показатель.*,
		|	ЗначенияПоказателейОтчетов.Версия.Сценарий.* КАК Сценарий,
		|	ЗначенияПоказателейОтчетов.Аналитика1.*,
		|	ЗначенияПоказателейОтчетов.Аналитика2.*,
		|	ЗначенияПоказателейОтчетов.Аналитика3.*,
		|	ЗначенияПоказателейОтчетов.Аналитика4.*,
		|	ЗначенияПоказателейОтчетов.Аналитика5.*,
		|	ЗначенияПоказателейОтчетов.Аналитика6.*,
		|	ЗначенияПоказателейОтчетов.Версия.Валюта.* КАК Валюта,
		|	ЗначенияПоказателейОтчетов.Версия.*,
		|	ЗначенияПоказателейОтчетов.ИтоговоеЗначение,
		|	ЗначенияПоказателейОтчетов.Версия.Активность КАК Активность}";
		
	ПостроительЗапросаВнутр.ЗаполнитьНастройки();
	ПостроительЗапросаВнутр.ВыбранныеПоля.Очистить();
	
	// Добавляем выбранные поля 
	Поле=ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("Показатель","Показатель");
	Поле=ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("Значение","Значение");
	Поле=ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("ИтоговоеЗначение","ИтогПоПоказателю");
	
	// Очистим отбор
	ОтборКоличество = ПостроительЗапросаВнутр.Отбор.Количество();
	
	Для Н = 1 По ОтборКоличество Цикл
		ПостроительЗапросаВнутр.Отбор.Удалить(ОтборКоличество - Н);
	КонецЦикла;

	// Формируем список показателей для отбора и список необходимых аналитик
	
	ПоказателиОтбор=Новый СписокЗначений;
	СписокАналитик=Новый СписокЗначений;
	
	Для Каждого Операнд ИЗ СтрЗапрос.ТаблицаОперандов Цикл
		
		Если ПоказателиОтбор.НайтиПоЗначению(Операнд.ПоказательОтбор)=Неопределено Тогда
			
			ПоказателиОтбор.Добавить(Операнд.ПоказательОтбор);
			
		КонецЕсли;
		
		Если НЕ СтрЗапрос.ТаблицаОперандов.Колонки.Найти("ПравилаИспользованияПолейЗапроса")=Неопределено Тогда
			
			ПравилаИспользованияПолей=Операнд.ПравилаИспользованияПолейЗапроса;		
			
			Для Каждого СтрокаПравило ИЗ ПравилаИспользованияПолей Цикл
				Если ПостроительЗапросаВнутр.ВыбранныеПоля.Найти(СтрокаПравило.Поле) = Неопределено Тогда
					Поле=ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить(СтрокаПравило.Поле,СтрокаПравило.Поле);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;	
			
	// Добавляем отборы
	ОтборПоказатель=ПостроительЗапросаВнутр.Отбор.Добавить("Показатель");
	ОтборПоказатель.ВидСравнения=ВидСравнения.ВСписке;
	ОтборПоказатель.Значение=ПоказателиОтбор;
	ОтборПоказатель.Использование=Истина;
	
	ТекПравилаВычисленияПараметров=СтрЗапрос.ПравилаВычисленияПараметров.Скопировать();
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ИзКонтекста",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ЗначениеИзКонтекста");
	
	Для Каждого Параметр ИЗ ТекПравилаВычисленияПараметров Цикл
		
		Если Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется Тогда
			
			Продолжить;
			
		КонецЕсли;
					
		ОтборПараметр=ПостроительЗапросаВнутр.Отбор.Добавить(Параметр.ИмяПараметра);
					
		ОтборПараметр.Использование=Истина;
		
		СвойстваОтбора = ПолучитьСвойстваПараметра(Параметр, ЭкземплярОтчета, СтруктураОтвета);
		
		ОтборПараметр.ВидСравнения=СвойстваОтбора.ВидСравнения;
		ОтборПараметр.Значение=СвойстваОтбора.Значение;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ПолучитьДанныеВнутр(ДанныеОтчета, СтрЗапрос, СтруктураОтвета)
		
	мСоответствиеОперандовИПоказателейОтбора = СтруктураОтвета.мСоответствиеОперандовИПоказателейОтбора;
	мЗначенияОперандов                       = СтруктураОтвета.мЗначенияОперандов;	
	
	/////////// Получаем и обрабатываем результаты //////////////////////
		
	ТабРезультат=УправлениеОтчетамиУХ.ПолучитьТаблицуПоИсточникуВнутрПоказатель(ДанныеОтчета, СтрЗапрос);
	ТабРезультат.Индексы.Добавить("Показатель");
	
	Для Каждого Операнд ИЗ СтрЗапрос.ТаблицаОперандов Цикл
		
		// Выделим из общей таблицы данные, относящиеся к операнду
		
		СтрСвертки="КодОперанда";
		СтруктураПолей=Новый Структура;
				
		ПоказательОтбор=мСоответствиеОперандовИПоказателейОтбора.Получить(Операнд.Код);
		
		СтруктураОтбора=Новый Структура("Показатель",ПоказательОтбор);
		
		СтрокиОперанда=ТабРезультат.НайтиСтроки(СтруктураОтбора);
		
		ЕстьИтог  = Ложь;
		ИтогСумма = 0;
		
		Для Каждого Строка ИЗ СтрокиОперанда Цикл
			
			Если Строка.ИтогПоПоказателю Тогда
				
				Если ЕстьИтог Тогда
					
					СтрИтог=мЗначенияОперандов.Найти(Операнд.Код,"КодОперанда");
					СтрИтог.Значение=СтрИтог.Значение+Строка.Значение;
					
				Иначе
					
					ЕстьИтог=Истина;
					НоваяСтрока=мЗначенияОперандов.Добавить();
					НоваяСтрока.КодОперанда=Операнд.Код;
					НоваяСтрока.Значение=Строка.Значение;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ИтогСумма = ИтогСумма + Строка.Значение;
			
		КонецЦикла;
		
		Если НЕ ЕстьИтог И СтрокиОперанда.Количество() > 0 Тогда
			НоваяСтрока=мЗначенияОперандов.Добавить();
			НоваяСтрока.КодОперанда=Операнд.Код;
			НоваяСтрока.Значение    = ИтогСумма;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПолучитьДанныеВнутрПараметрический(ПостроительЗапросаВнутр,СтрЗапрос, СтруктураОтвета, ЭкземплярОтчета) Экспорт
	
	//////////// Настраиваем построитель запроса ////////////////////
	
	мЗначенияОперандов = СтруктураОтвета.мЗначенияОперандов;
	//////////// Настраиваем построитель запроса ////////////////////
		
	ПостроительЗапросаВнутр.Текст=СтрЗапрос.ТекстЗапроса;

	ПостроительЗапросаВнутр.ЗаполнитьНастройки();
	
	// Очистим отбор
	ОтборКоличество = ПостроительЗапросаВнутр.Отбор.Количество();
	
	Для Н = 1 По ОтборКоличество Цикл
		ПостроительЗапросаВнутр.Отбор.Удалить(ОтборКоличество - Н);
	КонецЦикла;
	
	НастройкиОперанда=СтрЗапрос.ТаблицаОперандов[0].Значение.НастройкиОперанда.Получить();
	
	Если ТипЗнч(НастройкиОперанда)=Тип("Структура") И НастройкиОперанда.Свойство("ОтборПостроителя") Тогда
			
		Для Каждого ЭлементОтбора ИЗ НастройкиОперанда.ОтборПостроителя Цикл
			
			НовыйОтбор=ПостроительЗапросаВнутр.Отбор.Добавить(ЭлементОтбора.ПутьКДанным,ЭлементОтбора.Имя,ЭлементОтбора.Представление);
			НовыйОтбор.ВидСравнения=ЭлементОтбора.ВидСравнения;
			НовыйОтбор.Значение=ЭлементОтбора.Значение;
			НовыйОтбор.ЗначениеС=ЭлементОтбора.ЗначениеС;
			НовыйОтбор.ЗначениеПо=ЭлементОтбора.ЗначениеПо;
			НовыйОтбор.Использование=ЭлементОтбора.Использование;	
						
		КонецЦикла
			
	КонецЕсли;
		
	ТекПравилаВычисленияПараметров=СтрЗапрос.ПравилаВычисленияПараметров.Скопировать();
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ИзКонтекста",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТекПравилаВычисленияПараметров.Колонки.Добавить("ЗначениеИзКонтекста");
	
	Для Каждого Параметр ИЗ ТекПравилаВычисленияПараметров Цикл
		
		Если Параметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеИспользуется 
			ИЛИ УправлениеОтчетамиУХ.ПроверитьНаличиеОтбора(ПостроительЗапросаВнутр,Параметр.ИмяПараметра) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ОтборПараметр=ПостроительЗапросаВнутр.Отбор.Добавить(Параметр.ИмяПараметра);
		
		ОтборПараметр.Использование=Истина;
		
		СвойстваОтбора=ПолучитьСвойстваПараметра(Параметр, ЭкземплярОтчета, СтруктураОтвета);
		
		ОтборПараметр.ВидСравнения=СвойстваОтбора.ВидСравнения;
		ОтборПараметр.Значение=СвойстваОтбора.Значение;
		
	КонецЦикла;
	
		
	ПостроительЗапросаВнутр.ВыбранныеПоля.Очистить();	
	Поле=ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("Значение","Значение");
	Поле=ПостроительЗапросаВнутр.ВыбранныеПоля.Добавить("ИтоговоеЗначение","ИтогПоПоказателю");

	
	ПостроительЗапросаВнутр.Выполнить();
	ТабРезультат=ПостроительЗапросаВнутр.Результат.Выгрузить();
	
	КодОперанда   = СтрЗапрос.ТаблицаОперандов[0].Значение.Код;
	ОперандСсылка = СтрЗапрос.ТаблицаОперандов[0].Значение.Ссылка;
	
	ЕстьИтог  = Ложь;
	ИтогСумма = 0;
	
	Для Каждого Строка ИЗ ТабРезультат Цикл
		
		Если Строка.ИтогПоПоказателю Тогда
			
			Если ЕстьИтог Тогда
				
				СтрИтог=мЗначенияОперандов.Найти(КодОперанда,"КодОперанда");
				СтрИтог.Значение=СтрИтог.Значение+Строка.Значение;
				
			Иначе
					
				ЕстьИтог=Истина;
				
				СтрДанные=мЗначенияОперандов.Добавить();
				СтрДанные.Значение      = Строка.Значение;
				СтрДанные.КодОперанда   = КодОперанда;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ИтогСумма = ИтогСумма + Строка.Значение;
		
	КонецЦикла;
	
	Если НЕ ЕстьИтог И ТабРезультат.Количество() > 0 Тогда
		
		СтрДанные=мЗначенияОперандов.Добавить();
		СтрДанные.Значение      = ИтогСумма;
		СтрДанные.КодОперанда   = КодОперанда;
		
	КонецЕсли;	
	
КонецПроцедуры // ПолучитьДанныеВнутрПараметрическийКонтр()

// Вычисляет значение параметра операнда в зависимости от способа его вычисления
//
Функция ПолучитьСвойстваПараметра(СтрокаПараметр, ЭкземплярОтчета, СтруктураОтвета) Экспорт
	
	Перем ЗначениеПараметра;
	
	СвойстваПараметра=Новый Структура("ВидСравнения,Значение");
	
	// Контекстные значения реквизитов отчета.
	ПериодОтчета = ЭкземплярОтчета.ПериодОтчета;
	Организация  = ЭкземплярОтчета.Организация;
	
	мТаблицаВидовАналитикВидаОтчета = СтруктураОтвета.мТаблицаВидовАналитикВидаОтчета;
	
	Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ВалютаОтчета Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение = ЭкземплярОтчета.ОсновнаяВалюта;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ОрганизацияОтчета Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=ЭкземплярОтчета.Организация;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПроектОтчета Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=ЭкземплярОтчета.Проект;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПроектОтчетаИерархия Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.ВИерархии;
		СвойстваПараметра.Значение=ЭкземплярОтчета.Проект;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчета Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=ПериодОтчета;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ВышестоящийПериод Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=ОбщегоНазначенияУХ.ПолучитьВышестоящийПериод(ПериодОтчета,СтрокаПараметр.УточнениеСпособаОпределения);
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СценарийОтчета Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=ЭкземплярОтчета.Сценарий;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчета Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=КонецДня(ПериодОтчета.ДатаОкончания);
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчета Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=ПериодОтчета.ДатаНачала;
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаВышестоящегоПериода Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.ПолучитьВышестоящийПериод(ПериодОтчета,СтрокаПараметр.УточнениеСпособаОпределения);
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=НачалоДня(ОтнПериод.ДатаНачала);
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериодОтчетаСоСдвигом Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=ОбщегоНазначенияУХ.глОтносительныйПериод(ПериодОтчета, СтрокаПараметр.УточнениеСпособаОпределения);
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаПериодаОтчетаСоСдвигом Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.глОтносительныйПериод(ПериодОтчета, СтрокаПараметр.УточнениеСпособаОпределения);
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=КонецДня(ОтнПериод.ДатаОкончания);
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаВышестоящегоПериода Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.ПолучитьВышестоящийПериод(ПериодОтчета,СтрокаПараметр.УточнениеСпособаОпределения);
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=КонецДня(ОтнПериод.ДатаОкончания);
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
	
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаПериодаОтчетаСоСдвигом Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.глОтносительныйПериод(ПериодОтчета, СтрокаПараметр.УточнениеСпособаОпределения);
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=ОтнПериод.ДатаНачала;
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГода Тогда
				
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=НачалоГода(ПериодОтчета.ДатаНачала);
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГода Тогда
				
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=КонецГода(ПериодОтчета.ДатаОкончания);
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.АналогичныйПериодПредыдущегоГода Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.глАналогичныйПериод(ЭкземплярОтчета.ПериодОтчета, -1);
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=ОтнПериод;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.АналогичныйПериодГодаСоСдвигом Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.глАналогичныйПериод(ПериодОтчета, СтрокаПараметр.УточнениеСпособаОпределения);
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=ОтнПериод;
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаНачалаГодаСоСдвигом Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.глАналогичныйПериод(ПериодОтчета, СтрокаПараметр.УточнениеСпособаОпределения);
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=НачалоГода(ОтнПериод.ДатаНачала);
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ДатаКонцаГодаСоСдвигом Тогда
		
		ОтнПериод=ОбщегоНазначенияУХ.глАналогичныйПериод(ПериодОтчета, СтрокаПараметр.УточнениеСпособаОпределения);
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=КонецГода(ОтнПериод.ДатаНачала);
		СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
		
		СтрокаПараметр.ИзКонтекста=Истина;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
	
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Булево
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Дата
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Строка
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.Число
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФиксированноеЗначение Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
		СвойстваПараметра.Значение=СтрокаПараметр.УточнениеСпособаОпределения;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеРавноФиксированномуЗначению Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.НеРавно;
		СвойстваПараметра.Значение=СтрокаПараметр.УточнениеСпособаОпределения;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокФиксированныхЗначений
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.СписокПоИерархии Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.ВСпискеПоИерархии;
		СвойстваПараметра.Значение=СтрокаПараметр.УточнениеСпособаОпределения;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеФиксированныхЗначений
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеВСпискеПоИерархии Тогда
		
		СвойстваПараметра.ВидСравнения=ВидСравнения.НеВСпискеПоИерархии;
		СвойстваПараметра.Значение=СтрокаПараметр.УточнениеСпособаОпределения;
		СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеЗначение
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеСписокЗначений Тогда
		
		Попытка
			
			ИсходныйТекстПараметра   = СтрокаПараметр.ТекстМодуля;
			ТекстВычисленияПараметра = ИсходныйТекстПараметра;
	
			Выполнить(ТекстВычисленияПараметра);
			
			СвойстваПараметра.ВидСравнения=?(СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ФункцияНаВстроенномЯзыкеСписокЗначений,ВидСравнения.ВСписке,ВидСравнения.Равно); 
			СвойстваПараметра.Значение=ЗначениеПараметра;
			
			СтрокаПараметр.ИзКонтекста=Истина;
			СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
			
		Исключение
			
			СтрокаШаблона = НСтр("ru = 'Во время исполнения процедуры вычисления параметра %1
				|произошла следующая критическая ошибка:'");
			
			Если ЗначениеЗаполнено(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, СокрЛП(СтрокаПараметр.ПредставлениеПараметра)) + Символы.ПС + ОписаниеОшибки(),,, СтатусСообщения.Важное);
			КонецЕсли;
			
		КонецПопытки;
		
	ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериметрОтчета
		ИЛИ СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда
		
		СпособПериодОтчета = Неопределено;
		
		Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериметрОтчета Тогда
			СпособПериодОтчета = Истина;
			СвойстваПараметра.ВидСравнения = ВидСравнения.ВСписке;
		ИначеЕсли СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов.ПериметрОтчета Тогда
			СпособПериодОтчета = Ложь;
			СвойстваПараметра.ВидСравнения = ВидСравнения.НеВСписке;		
		КонецЕсли;
		
		ТипыОрганизаций=Новый СписокЗначений;
		ТипыОрганизаций.Добавить(Перечисления.ТипыОрганизационныхЕдиниц.Консолидирующая);
		ТипыОрганизаций.Добавить(Перечисления.ТипыОрганизационныхЕдиниц.Обычная);
		
		Если СпособПериодОтчета = Ложь Тогда
			// Элиминирующие организации также исключаем
			ТипыОрганизаций.Добавить(Перечисления.ТипыОрганизационныхЕдиниц.Элиминирующая);			
		КонецЕсли;
				
		ВладелецПериметра = СтрокаПараметр.УточнениеСпособаОпределения;
		
		Если ТипЗнч(ВладелецПериметра)=Тип("Структура") Тогда
			
			// Отбор из ВИБ по организациям периметра			
			КонсолидирующаяОрганизация = ВладелецПериметра.МассивОтбора[0]._ЗначениеКонсолидации.Значение;			
			Если Не ЗначениеЗаполнено(КонсолидирующаяОрганизация) Тогда
				КонсолидирующаяОрганизация=Организация;
			КонецЕсли;
			
			МассивПериметр = ОбщегоНазначенияУХ.глСоставПериметра(ЭкземплярОтчета,,,,,,, ТипыОрганизаций, КонсолидирующаяОрганизация);
			
			СписокПериметр = Новый СписокЗначений;			
			СписокПериметр.ЗагрузитьЗначения(МассивПериметр);
			
			Если СпособПериодОтчета = Ложь Тогда 
				// Добавим в список организацию - владельца периметра
				СписокПериметр.Добавить(КонсолидирующаяОрганизация);				
			КонецЕсли;
			
			МассивПериметр=Новый Массив;
			
			// Сформируем массив отбора по составу периметра.
			Для Каждого ТекЭлемент ИЗ СписокПериметр Цикл
				
				СтруктураЭлемент=Новый Структура;
				СтруктураЭлемент.Вставить("_ЗначениеКонсолидации", ТекЭлемент);
				
				Если ВладелецПериметра.Свойство("СписокЭлементов") Тогда
					
					Для Каждого РеквизитСоответствия ИЗ ВладелецПериметра.СписокЭлементов Цикл
						
						СтруктураЭлемент.Вставить(РеквизитСоответствия.РеквизитОбъектаВнешнейИБ, 
													ТекЭлемент.Значение[РеквизитСоответствия.РеквизитОбъектаКонсолидации]);
						
					КонецЦикла;
					
				Иначе
					
					Для Каждого РеквизитСоответствия ИЗ ВладелецПериметра.МассивОтбора[0] Цикл     
						
						Если РеквизитСоответствия.Ключ="_ЗначениеКонсолидации" Тогда        
							Продолжить;       
						КонецЕсли;      
						
						СтруктураЭлемент.Вставить(РеквизитСоответствия.Ключ, ТекЭлемент.Значение[РеквизитСоответствия.Ключ]);
						
					КонецЦикла;
					
				КонецЕсли;
				
				МассивПериметр.Добавить(СтруктураЭлемент);
				
			КонецЦикла;
			
			ВладелецПериметра.Вставить("МассивОтбора",МассивПериметр);
			СтрокаПараметр.УточнениеСпособаОпределения=Новый ХранилищеЗначения(ВладелецПериметра, Новый СжатиеДанных());
			
		Иначе
			
			КонсолидирующаяОрганизация = ?(ЗначениеЗаполнено(ВладелецПериметра), ВладелецПериметра, Неопределено);
			ТекСоставПериметра = ОбщегоНазначенияУХ.глСоставПериметра(ЭкземплярОтчета, ,,,,,, ТипыОрганизаций, КонсолидирующаяОрганизация);
			
			СвойстваПараметра.Значение     = Новый СписокЗначений; // Функция СоставПериметра() возвращает массив организаций. Преобразуем к СЗ.
			
			Для Каждого ЭлементМассива Из ТекСоставПериметра Цикл
				СвойстваПараметра.Значение.Добавить(ЭлементМассива);
			КонецЦикла;
			
			Если СтрокаПараметр.СпособВычисленияПараметра = Перечисления.СпособыВычисленияПараметровОперандов.НеПериметрОтчета Тогда 
				// Добавим в список организацию - владельца периметра
				СвойстваПараметра.Значение.Добавить(?(ЗначениеЗаполнено(ВладелецПериметра), ВладелецПериметра, Организация));				
			КонецЕсли;
						
			СтрокаПараметр.ЗначениеДляПроверки = СвойстваПараметра.Значение;
			СтрокаПараметр.ЗначениеИзКонтекста = СвойстваПараметра.Значение;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Если СтрокаПараметр.СпособВычисленияПараметра=Перечисления.СпособыВычисленияПараметровОперандов["Аналитика"+Инд]
			И (НЕ мТаблицаВидовАналитикВидаОтчета.Найти("Аналитика"+Инд,"КодАналитики")=Неопределено) Тогда
			
			СвойстваПараметра.ВидСравнения=ВидСравнения.Равно;
			СвойстваПараметра.Значение=ЭкземплярОтчета["Аналитика"+Инд];
			
			СтрокаПараметр.ЗначениеДляПроверки=СвойстваПараметра.Значение;
			СтрокаПараметр.ЗначениеИзКонтекста=СвойстваПараметра.Значение;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат СвойстваПараметра;
	
КонецФункции // ПолучитьСвойстваПараметра()

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ЭКСПОРТНЫЕ ПРОЦЕДУРЫ.
//

Функция СоставПериметра(
			ЭкземплярОтчета, 
			локСценарий = Неопределено, 
			локПериодОтчета = Неопределено, 
			локОрганизация = Неопределено, 
			локМетодКонсолидации = Неопределено, 
			локМинПолнаяДоляВладения = 0, 
			локМаксПолнаяДоляВладения = 100, 
			локТипыОрганизаций = Неопределено, 
			ВладелецПериметра = Неопределено) Экспорт

	Возврат УправлениеРабочимиПроцессамиУХ.ПолучитьСоставПериметраКонсолидации(
													?(локСценарий = Неопределено, ЭкземплярОтчета.Сценарий, локСценарий), 
													?(локПериодОтчета = Неопределено, ЭкземплярОтчета.ПериодОтчета, локПериодОтчета),
													?(локОрганизация = Неопределено, ЭкземплярОтчета.Организация, локОрганизация),
													локМетодКонсолидации,
													локМинПолнаяДоляВладения, 
													локМаксПолнаяДоляВладения,
													локТипыОрганизаций,
													ВладелецПериметра)
												.ВыгрузитьКолонку("ИндивидуальнаяОрганизация");

КонецФункции

Функция ИмяСостоянияОбъекта(Состояние) Экспорт
	Если НЕ ЗначениеЗаполнено(Состояние) Тогда
		Возврат "";
	КонецЕсли;
	
	Если Состояние.Метаданные().Имя = "СостоянияСогласования" Тогда
		Если Состояние = Перечисления.СостоянияСогласования.Утверждена Тогда
			Возврат "Утвержден";
		ИначеЕсли Состояние = Перечисления.СостоянияСогласования.Отклонена Тогда
			Возврат "Отклонен";
		КонецЕсли;
	КонецЕсли;
	
	ПеречислениеСостояний=Перечисления[Состояние.Метаданные().Имя];
	МетаданныеПеречисления = Состояние.Метаданные();
	
	МетаданныеЗначения = МетаданныеПеречисления.ЗначенияПеречисления.Получить(ПеречислениеСостояний.Индекс(Состояние));
	
	Возврат МетаданныеЗначения.Имя;
КонецФункции

Функция ПолучитьСостояниеПоИмени(Состояние, ИмяСостояния)Экспорт
	Если Состояние.Метаданные().Имя = "СостоянияСогласования" Тогда
		Если ИмяСостояния = "Утвержден" Тогда
			Возврат Перечисления.СостоянияСогласования.Утверждена;
		ИначеЕсли ИмяСостояния = "Отклонен" Тогда
			Возврат Перечисления.СостоянияСогласования.Отклонена;
		КонецЕсли;
	КонецЕсли;
	
	ПеречислениеСостояний=Перечисления[Состояние.Метаданные().Имя];
	
	Если ИмяСостояния = "" Тогда
		Возврат "";
	КонецЕсли;
	
	Возврат ПеречислениеСостояний[ИмяСостояния];
КонецФункции

Процедура СформироватьЛинейныеСвязи(ИмяКолонкиЭтапа, ТаблицаСвязей) Экспорт
	
	Если ТаблицаСвязей.Количество() < 2 Тогда
		#Если Клиент Тогда
			ПоказатьПредупреждение(, НСтр("ru = 'Для формирования маршрута выделите не менее двух этапов согласования.'"));
		#Иначе
			ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Для формирования маршрута выделите не менее двух этапов согласования.'"));
		#КонецЕсли
		Возврат;
	КонецЕсли;
	
	ОбъектПредшественник = Неопределено;
	ТЕкОбъект            = Неопределено;
	
	Для Инд = 0 По ТаблицаСвязей.Количество() - 2 Цикл
		
		ТекОбъект = ТаблицаСвязей[Инд][ИмяКолонкиЭтапа].ПолучитьОбъект();
		ТекОбъект.УстановитьЛинейныйПереход(ТаблицаСвязей[Инд + 1][ИмяКолонкиЭтапа]);
		ТекОбъект = Неопределено;
		//Если ОбъектПредшественник = Неопределено Тогда
		//	ОбъектПредшественник = Строка[ИмяКолонкиЭтапа].ПолучитьОбъект();
		//	Если ОбъектПредшественник.ЭтапыПредшественники.Количество() > 0 Тогда
		//		#Если Клиент Тогда
		//			Если Вопрос("Очистить этапы предшественники первого этапа согласования?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		//				ОбъектПредшественник.ЭтапыПредшественники.Очистить();
		//				ОбъектПредшественник.Записать();
		//			КонецЕсли;
		//		#Иначе
		//			ОбъектПредшественник.ЭтапыПредшественники.Очистить();
		//			ОбъектПредшественник.Записать();
		//		#КонецЕсли
		//	КонецЕсли;
		//Иначе
		//	ТекОбъект = Строка[ИмяКолонкиЭтапа].ПолучитьОбъект();
		//	ТекОбъект.ЭтапыПредшественники.Очистить();
		//	ТекОбъект.ЭтапыПредшественники.Добавить().Этап = ОБъектПредшественник.Ссылка;
		//	ТекОБъект.Записать();
		//	ОбъектПредшественник.УстановитьЛинейныйПереход(ТекОбъект.Ссылка);
		//	ОбъектПредшественник.Записать();
		//	ОбъектПредшественник = Текобъект;
		//КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возращает таблицу с информацией по основному и дополнительному согласованию.
Функция ПолучитьТаблицуДополнительногоСогласования(СписокЗадачВход, ПользовательВход) Экспорт
	РезультатФункции = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Задача,
	|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Ответственный,
	|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ДокументПроцесса,
	|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ЭтапПроцесса,
	|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Выполнено
	|ПОМЕСТИТЬ ВТ_ЭтапыПроцессов
	|ИЗ
	|	РегистрСведений.ОтложеннаяОбработкаЭтаповПроцессов.СрезПоследних(
	|			,
	|			ВидДействия В (&ВидДействия)
	|				И Ответственный В (&Ответственный)
	|				И Задача В (&Задача)) КАК ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ЭтапыПроцессов.ЭтапПроцесса,
	|	ВТ_ЭтапыПроцессов.ДокументПроцесса,
	|	ВТ_ЭтапыПроцессов.Ответственный
	|ИЗ
	|	ВТ_ЭтапыПроцессов КАК ВТ_ЭтапыПроцессов
	|ГДЕ
	|	ВТ_ЭтапыПроцессов.Выполнено = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВизаДополнительныхСогласующих.ЭтапПроцесса,
	|	ВизаДополнительныхСогласующих.ЭкземплярПроцесса,
	|	ВизаДополнительныхСогласующих.Согласующий
	|ИЗ
	|	РегистрСведений.ВизаДополнительныхСогласующих КАК ВизаДополнительныхСогласующих
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ЭтапыПроцессов КАК ВТ_ЭтапыПроцессов
	|		ПО ВизаДополнительныхСогласующих.ЭкземплярПроцесса = ВТ_ЭтапыПроцессов.ДокументПроцесса
	|			И ВизаДополнительныхСогласующих.ЭтапПроцесса = ВТ_ЭтапыПроцессов.ЭтапПроцесса
	|ГДЕ
	|	ВизаДополнительныхСогласующих.АрхивнаяЗапись = ЛОЖЬ";
	Запрос.УстановитьПараметр("Задача", СписокЗадачВход);
	СписокОтветственных = Новый СписокЗначений;
	МодульУправленияПроцессамиУХ.ПолучитьЗамещаемых(ПользовательВход, СписокОтветственных);
	СписокОтветственных.Добавить(ПользовательВход);
	Запрос.УстановитьПараметр("Ответственный", СписокОтветственных);
	СписокВидДействия = Новый СписокЗначений;
	СписокВидДействия.Добавить(Перечисления.СобытияОтложеннойОбработкиПроцессов.ОбработкаЭтапаСогласования);
	СписокВидДействия.Добавить(Перечисления.СобытияОтложеннойОбработкиПроцессов.ДополнительноеСогласованиеЭтапа);
	Запрос.УстановитьПараметр("ВидДействия", СписокВидДействия);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
КонецФункции

// Возвращает структуру, содержащую документ процесса и этап, по задаче и пользователю.
Функция ПолучитьСтруктуруСогласованияСтроки(ЗадачаВход, ПользовательВход) Экспорт
	// Инициализация.
	ПустойДокументПроцесса  = Документы.ЭкземплярПроцесса.ПустаяСсылка();
	ПустойЭтап = Справочники.ЭтапыУниверсальныхПроцессов.ПустаяСсылка();
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ДокументПроцесса", ПустойДокументПроцесса);
	РезультатФункции.Вставить("ЭтапПроцесса", ПустойЭтап);
	// Получение таблицы согласования и её свёртка.
	Выгрузка = ПолучитьТаблицуДополнительногоСогласования(ЗадачаВход, ПользовательВход);
	Свертка = Выгрузка.Скопировать();
	Свертка.Свернуть("ДокументПроцесса, ЭтапПроцесса");
	// Анализ таблицы согласования и вывод результата.
	Если Свертка.Количество() = 1 Тогда
		// Необходимые данные удалось получить однозначно. Выведем их.
		ПерваяСтрокаВыгрузки = Свертка[0];
		РезультатФункции.Вставить("ДокументПроцесса", ПерваяСтрокаВыгрузки.ДокументПроцесса);
		РезультатФункции.Вставить("ЭтапПроцесса", ПерваяСтрокаВыгрузки.ЭтапПроцесса);
	Иначе
		// Не удалось определить данные для передачи. Вернём пустые значения.
		РезультатФункции.Вставить("ДокументПроцесса", ПустойДокументПроцесса);
		РезультатФункции.Вставить("ЭтапПроцесса", ПустойЭтап);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Рекурсивная процедура. Добавляет в СписокЭтапов этапы перехода на ветвях дерева
// ДеревоПереходовВход. Параметр ГлубинаРекурсии защищает от бесконечной рекурсии.
Процедура ДополнитьСписокЭтаповУсловногоПерехода(ДеревоПереходовВход, СписокЭтапов, ГлубинаРекурсии = 0)
	Если ГлубинаРекурсии > 10000 Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось развернуть дерево переходов для этапа условного перехода.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат;
	КонецЕсли;
	СтрокиПереходов = ДеревоПереходовВход.Строки;
	Для Каждого ТекСтрокиПереходов Из СтрокиПереходов Цикл
		ЗначениеУсловия = ТекСтрокиПереходов.Значение;
		Если ЗначениеЗаполнено(ЗначениеУсловия) Тогда
			Если ТипЗнч(ЗначениеУсловия) = Тип("СправочникСсылка.ЭтапыУниверсальныхПроцессов") Тогда
				СписокЭтапов.Добавить(ЗначениеУсловия);
			Иначе
				// Нет данных об этапе, не добавляем.
			КонецЕсли;
		Иначе
			// Пустой этап. Не добавляем в список выбора.
		КонецЕсли;  
		ДополнитьСписокЭтаповУсловногоПерехода(ТекСтрокиПереходов, СписокЭтапов, ГлубинаРекурсии + 1);
	КонецЦикла;
КонецПроцедуры

// Возвращает список значений этапов, из которых будет выбирать пользователь для 
// этапа ручного перехода ЭтапВход.
Функция ПолучитьЭтапыВыбораРучногоПерехода(ЭтапВход) Экспорт
	РезультатФункции = Новый СписокЗначений;
	Если ТипЗнч(ЭтапВход) = Тип("СправочникОбъект.ЭтапыУниверсальныхПроцессов") Тогда
		ЭтапРабочий = ЭтапВход.Ссылка;
	Иначе
		ЭтапРабочий = ЭтапВход;
	КонецЕсли;
	Если ЗначениеЗаполнено(ЭтапРабочий) Тогда
		Если ЭтапРабочий.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.РучнойПереход Тогда
			ХранилищеПереходов = ЭтапРабочий.УсловияСогласования;
			ДеревоПереходов = ХранилищеПереходов.Получить();
			Если ТипЗнч(ДеревоПереходов) = Тип("ДеревоЗначений") Тогда
				СтрокиПереходов = ДеревоПереходов.Строки;
				Для Каждого ТекСтрокиПереходов Из СтрокиПереходов Цикл
					Если ЗначениеЗаполнено(ТекСтрокиПереходов.Значение) Тогда
						РезультатФункции.Добавить(ТекСтрокиПереходов.Значение);
					Иначе
						// Пустой этап. Не добавляем в список выбора.
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ДеревоПереходов = Неопределено Тогда
				// Пустое дерево. Оставляем список пустым.
			Иначе
				ТекстСообщения = НСтр("ru = 'Неизвестный вариант этапов перехода. Заполнение списка этапов для перехода по выбору %ЭтапРучногоПерехода% не удалось.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЭтапРучногоПерехода%", Строка(ЭтапРабочий));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецЕсли;
		ИначеЕсли ЭтапРабочий.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.УсловныйПереход Тогда
			ХранилищеПереходов = ЭтапРабочий.УсловияСогласования;
			ДеревоПереходов = ХранилищеПереходов.Получить();
			ДополнитьСписокЭтаповУсловногоПерехода(ДеревоПереходов, РезультатФункции);
		Иначе	
			ТекстСообщения = НСтр("ru = 'Неизвестный вариант перехода: %Этап%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(ЭтапРабочий));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	Иначе
		// Нет этапа ручного перехода. Невозможно получить этапы для выбора.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции	// ПолучитьЭтапыВыбораРучногоПерехода

// Выполняет пост-обработку установки статуса СтатусВход для программы закупок ПрограммаЗакупокВход.
Процедура ОбработатьУстановкуСтатусаПрограммыЗакупок(ПрограммаЗакупокВход, СтатусВход)
	// Переведём статус подчинённых строк.
	РазмещенныеСтатусы = Новый Массив;
	РазмещенныеСтатусы.Добавить(Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Выгружен);
	РазмещенныеСтатусы.Добавить(Перечисления.СтатусыВыгружаемыхОбъектовЕИС.ОшибкиВыгрузки);
	РазмещенныеСтатусы.Добавить(Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Размещен);
	Если РазмещенныеСтатусы.Найти(СтатусВход) <> Неопределено Тогда
		Документы.ПрограммаЗакупок.ПеревестиПодчиненныеСтрокиПрограммыВНовоеСостояние(ПрограммаЗакупокВход, СтатусВход);
	Иначе
		// Не изменяем статус в противном случае.
	КонецЕсли;
КонецПроцедуры		// ОбработатьУстановкуСтатусаПрограммыЗакупок()

Процедура ОбработатьУстановкуСтатусаОбъекта(НаборЗаписей, Отказ = Ложь) Экспорт
	
	Для Каждого СтрЗапись Из НаборЗаписей Цикл
		ТекОбъект = СтрЗапись.Объект;
		ТекСостояние = СтрЗапись.СостояниеОбъекта; 
		Если ТипЗнч(ТекОбъект) = Тип("ДокументСсылка.РакурсДанных")  Тогда
			// Ракурс.
			НаборЗаписейПериоды = РегистрыСведений.СтатусыПериодовСценариев.СоздатьНаборЗаписей();
			НаборЗаписейПериоды.Отбор.Сценарии.Установить(ТекОбъект.Сценарий);
			НаборЗаписейПериоды.Отбор.Периоды.Установить(ТекОбъект.ПериодОтчета);
			НаборЗаписейПериоды.Прочитать();
			ДокументУОП = НаборЗаписейПериоды[0].УправлениеПериодомСценария;
			Если ДокументУОП.ПериодЗакрыт Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось обработать изменение состояния документа %ДокументСсылка% по причине: Период %Период% по сценраию %Сценарий% закрыт '");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументСсылка%", Строка(ТекОбъект));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%", ТекОбъект.ПериодОтчета);
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сценарий%", ТекОбъект.Сценарий);
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, Отказ, , СтатусСообщения.ОченьВажное);
				Отказ = Истина;	
				Возврат;
			КонецЕсли;		
			
			СводнаяТаблицаУХ.УстановитьСтатусОбласти(ТекОбъект, ТекСостояние);
			
		ИначеЕсли ТипЗнч(ТекОбъект) = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда   
			// Экземпляр отчета.
			Если  ТекОбъект.ВидОтчета.ОбъектДляСогласованияЗначений = Перечисления.ОбъектыСогласованияЗначенийПоказателейОтчетов.ЭкземплярОтчета Тогда
				НаборЗаписейПериоды = РегистрыСведений.СтатусыПериодовСценариев.СоздатьНаборЗаписей();
				НаборЗаписейПериоды.Отбор.Сценарии.Установить(ТекОбъект.Сценарий);
				НаборЗаписейПериоды.Отбор.Периоды.Установить(ТекОбъект.ПериодОтчета);
				НаборЗаписейПериоды.Прочитать();
				ПериодЗакрыт = Ложь;
				Если НаборЗаписейПериоды.Количество() > 0 Тогда
					ДокументУОП = НаборЗаписейПериоды[0].УправлениеПериодомСценария;
					ПериодЗакрыт = ДокументУОП.ПериодЗакрыт;
				Иначе
					ПериодЗакрыт = Ложь;			// Документа нет - считаем период незакрытым.
				КонецЕсли;
				Если ПериодЗакрыт Тогда
					ТекстСообщения = НСтр("ru = 'Не удалось обработать изменение состояния документа %ДокументСсылка% по причине: Период %Период% по сценарию %Сценарий% закрыт '");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументСсылка%", Строка(ТекОбъект));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%", ТекОбъект.ПериодОтчета);
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сценарий%", ТекОбъект.Сценарий);
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, Отказ, , СтатусСообщения.ОченьВажное);
					Отказ = Истина;	
					Возврат;
				КонецЕсли;		
				СводнаяТаблицаУХ.УстановитьСтатусЭкземпляра(ТекОбъект, ТекСостояние);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекОбъект) = Тип("ДокументСсылка.ЗаявкаНаИзменениеНСИ") Тогда  
			// Заявка на НСИ.
			Если ТекСостояние = Перечисления.СостоянияСогласования.Отклонена  Тогда
				ОбъектЗаявки = ТекОбъект.ПолучитьОбъект();
				ОбъектЗаявки.ВыполнитьДействияПоОбъекту(Отказ, Истина);
			ИначеЕсли ТекСостояние = Перечисления.СостоянияСогласования.Утверждена Тогда
				ОбъектЗаявки = ТекОбъект.ПолучитьОбъект();
				ОбъектЗаявки.ВыполнитьДействияПоОбъекту(Отказ, Ложь);
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекОбъект) = Тип("ДокументСсылка.ПрограммаЗакупок") Тогда
			// Программа закупок.
			ОбработатьУстановкуСтатусаПрограммыЗакупок(ТекОбъект, ТекСостояние);
		ИначеЕсли ТипЗнч(ТекОбъект) = Тип("СправочникСсылка.ЗакупочныеПроцедуры") Тогда
			// Закупочная процедура.
			// - Добавим напоминание ОфициальноеОбъявлениеЗакупки.
			Если ТекСостояние = Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Утвержден Тогда
				ВидСобытияНачалоПодготовкиЗакупки = Справочники.ВидыСобытийОповещений.Напоминание_ОфициальноеОбъявлениеЗакупки;
				СтруктураНастроек = МодульУправленияОповещениямиУХ.ПолучитьНастройкиОповещенийПоВидуСобытия(ВидСобытияНачалоПодготовкиЗакупки);
				СтруктураДопПараметры = Новый Структура;
				Получатель = ТекОбъект.Ответственный;
				ДатаОповещения = ТекОбъект.ДатаОфициальногоОбъявленияЗакупки;
				СтруктураНапоминание = МодульУправленияОповещениямиУХ.СоздатьСтруктуруНапоминанияПоУмолчанию(СтруктураНастроек, Получатель, ДатаОповещения, ТекОбъект);
				СтруктураНапоминание.Вставить("ДопПараметры", СтруктураДопПараметры);
				МодульУправленияОповещениямиУХ.ДобавитьНапоминаниеПользователяСЗадачей(СтруктураНапоминание);
			Иначе
				// Не добавляем напоминание.
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекОбъект) = Тип("ДокументСсылка.СтрокаПланаЗакупок") Тогда
			// Строка плана закупок.
			Если ТекСостояние = Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Утвержден Тогда
				ВидСобытияНачалоПодготовкиЗакупки = Справочники.ВидыСобытийОповещений.Напоминание_НачалоПодготовкиЗакупки;
				СтруктураНастроек = МодульУправленияОповещениямиУХ.ПолучитьНастройкиОповещенийПоВидуСобытия(ВидСобытияНачалоПодготовкиЗакупки);
				СтруктураДопПараметры = Новый Структура;
				Получатель = ТекОбъект.Ответственный;
				ДатаОповещения = ТекОбъект.ДатаНачалаПодготовкиЗакупки;
				СтруктураНапоминание = МодульУправленияОповещениямиУХ.СоздатьСтруктуруНапоминанияПоУмолчанию(СтруктураНастроек, Получатель, ДатаОповещения, ТекОбъект);
				СтруктураНапоминание.Вставить("ДопПараметры", СтруктураДопПараметры);
				МодульУправленияОповещениямиУХ.ДобавитьНапоминаниеПользователяСЗадачей(СтруктураНапоминание);
			Иначе
				// Не добавляем напоминание.
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекОбъект) = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
			// Заявка на оплату.
			СоответствиеСтатусов = МодульУправленияПроцессамиУХ.ПолучитьСоответствиеСостоянийОбъекта(ТекОбъект);
			СостоянияРаспроведения = Новый Массив;			
			СостоянияРаспроведения.Добавить(СоответствиеСтатусов["Черновик"]);
			СостоянияРаспроведения.Добавить(СоответствиеСтатусов["Отклонен"]);			
			ОтменятьПроведение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, 
				"ОтменятьПроведение", Истина);
			
			Если СостоянияРаспроведения.Найти(ТекСостояние) <> Неопределено Тогда
				Если ТекОбъект.Проведен И ОтменятьПроведение Тогда
					// при отмене проведения заявки также устанавливается статус - черновик
					// чтобы два раза не отменять заявку проверям свойство ОтменятьПроведение
					ДокументОбъект = ТекОбъект.ПолучитьОбъект();
					ДокументОбъект.ДополнительныеСвойства.Вставить("НеИзменятьСостояниеПриОтменеПроведения", Истина);
					ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					// Документ уже распроведен.
				КонецЕсли;
			Иначе
				Если НЕ ТекОбъект.Проведен Тогда
					ДокументОбъект = ТекОбъект.ПолучитьОбъект();
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					// Документ уже проведен.
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекОбъект) = Тип("ДокументСсылка.ОперативныйПлан") Тогда
			
			СостоянияРаспроведения = Новый Массив;
			СостоянияРаспроведения.Добавить(Перечисления.СостоянияСогласования.Черновик);
			СостоянияРаспроведения.Добавить(Перечисления.СостоянияСогласования.Возвращена);
			ОтменятьПроведение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(НаборЗаписей.ДополнительныеСвойства, 
				"ОтменятьПроведение", Истина);
						
			Если СостоянияРаспроведения.Найти(ТекСостояние) <> Неопределено Тогда
				Если ТекОбъект.Проведен И ОтменятьПроведение Тогда
					// при отмене проведения заявки также устанавливается статус - черновик
					// чтобы два раза не отменять заявку проверям свойство ОтменятьПроведение
					ДокументОбъект = ТекОбъект.ПолучитьОбъект();
					ДокументОбъект.ДополнительныеСвойства.Вставить("ТекущееСостояниеСогласования", ТекСостояние);
					ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				Иначе
					// Документ уже распроведен.
				КонецЕсли;
			Иначе
				Если НЕ ТекОбъект.Проведен Тогда
					ДокументОбъект = ТекОбъект.ПолучитьОбъект();
					ДокументОбъект.ДополнительныеСвойства.Вставить("ТекущееСостояниеСогласования", ТекСостояние);
					ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Иначе
					// Документ уже проведен.
				КонецЕсли;
					
			КонецЕсли;
		Иначе
			// Прочие варианты объектов.
			РезультатВыполнения = УправлениеПроцессамиСогласованияУхПереопределяемый.ОбработатьИзменениеСостоянияОбъекта(ТекОбъект, ТекСостояние);
			Если НЕ РезультатВыполнения Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось обработать изменение состояния %Состояние% для объекта %ДокументСсылка%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументСсылка%", Строка(ТекОбъект));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Состояние%", Строка(ТекСостояние));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, Отказ, , СтатусСообщения.ОченьВажное);
				Отказ = Истина;	
			Иначе
				// Изменение состояния выполнено успешно. Ничего не делаем.
			КонецЕсли;
		КонецЕсли;	 
		
	КонецЦикла;
		 
 КонецПроцедуры	

 // Добавляет группу элементов с именем НаименованиеГруппыВход и заголовком ЗаголовокВход
 // формы в родительскую группу ГруппаРодительВход.
Функция ДобавитьГруппуЭлементов(ЭлементыВход, НаименованиеГруппыВход, ГруппаРодительВход, ГруппировкаВход = Неопределено, ЗаголовокВход = "", ОтображатьЗаголовокВход = Ложь, ВидГруппыВход = Неопределено, ГоризонтальноеПоложение)
	
	НовыйЭлемент = ЭлементыВход.Вставить(НаименованиеГруппыВход, Тип("ГруппаФормы"), ГруппаРодительВход);
	
	Если ВидГруппыВход = Неопределено Тогда
		
		НовыйЭлемент.Вид								 = ВидГруппыФормы.ОбычнаяГруппа;
		НовыйЭлемент.ОтображатьЗаголовок				 = ОтображатьЗаголовокВход;
		НовыйЭлемент.Заголовок							 = ЗаголовокВход;
		НовыйЭлемент.Объединенная						 = Истина;
		НовыйЭлемент.Отображение						 = ОтображениеОбычнойГруппы.Нет;
		
		Если ГруппаРодительВход = Неопределено Тогда
			НовыйЭлемент.Группировка					 = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Иначе	
			НовыйЭлемент.Группировка					 = ГруппировкаВход;
		КонецЕсли;
		
		НовыйЭлемент.ВертикальноеПоложениеПодчиненных	 = ВертикальноеПоложениеЭлемента.Центр;
		
	Иначе
		НовыйЭлемент.Вид								 = ВидГруппыВход;
	КонецЕсли;
		
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовыйЭлемент, "ГоризонтальноеПоложение") тогда
		НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложение;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовыйЭлемент, "ГоризонтальноеПоложениеВГруппе") тогда
		НовыйЭлемент.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложение;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовыйЭлемент, "ГоризонтальноеПоложениеПодчиненных") тогда
		НовыйЭлемент.ГоризонтальноеПоложениеПодчиненных = ГоризонтальноеПоложение;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовыйЭлемент, "Группировка") тогда
		НовыйЭлемент.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	КонецЕсли;
	
	НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
	//НовыйЭлемент.Видимость = Истина;
	
	
	//Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(НовыйЭлемент, "РазрешитьИзменениеСостава") тогда
	//	НовыйЭлемент.РазрешитьИзменениеСостава = Ложь;
	//КонецЕсли;
	
	Возврат НовыйЭлемент;
	
КонецФункции		// ДобавитьГруппуЭлементов()

// Добавляет на форму с элементами ЭлементыВход в группу ГруппаРодительВход элемент декорацию-картинку 
// с именем элемента НаименованиеЭлементаВход и содержащейся картинкой КартинкаВход.
Функция ДобавитьДекорациюКартинка(ЭлементыВход, НаименованиеЭлементаВход, ГруппаРодительВход, КартинкаВход, ГоризонтальноеПоложениеВход = Неопределено)
	НовыйЭлемент = ЭлементыВход.Вставить(НаименованиеЭлементаВход, Тип("ДекорацияФормы"), ГруппаРодительВход);
	НовыйЭлемент.Вид = ВидДекорацииФормы.Картинка;
	НовыйЭлемент.Картинка = КартинкаВход;
	Если ГоризонтальноеПоложениеВход <> Неопределено Тогда
		НовыйЭлемент.ГоризонтальноеПоложениеВГруппе  = ГоризонтальноеПоложениеВход;
	Иначе	
		// Не изменяем выравнивание.
	КонецЕсли;
	Возврат НовыйЭлемент;
КонецФункции		// ДобавитьДекорациюКартинка()

// Добавляет на форму с элементами ЭлементыВход команду с именем ИмяКомандыВход
// в группу элементов ГруппаРодительВход.
Функция ДобавитьЭлементКоманды(ЭлементыВход, ИмяЭлементаВход, ИмяКомандыВход, ГруппаРодительВход)
	НовыйЭлемент = ЭлементыВход.Добавить(ИмяЭлементаВход, Тип("КнопкаФормы"), ГруппаРодительВход);
	НовыйЭлемент.ИмяКоманды = ИмяКомандыВход;
	НовыйЭлемент.Отображение = ОтображениеКнопки.Картинка;
	НовыйЭлемент.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
	НовыйЭлемент.ГоризонтальноеПоложениеВГруппе = ГоризонтальноеПоложениеЭлемента.Право;
	
	Возврат НовыйЭлемент; 
КонецФункции		// ДобавитьЭлементКоманды()

// Добавляет на форму команду с именем ИмяКомандыВход.
Функция ДобавитьКомандуФормы(ИмяКомандыВход, ФормаВход, НаименованиеКартинки = "", ЗаголовокКомандыВход = "")
	НоваяКоманда = ФормаВход.Команды.Добавить(ИмяКомандыВход);
	Если НаименованиеКартинки <> "" Тогда
		НоваяКоманда.Картинка = БиблиотекаКартинок[НаименованиеКартинки];
	Иначе
		// Картинка не указана.
	КонецЕсли;	
	НоваяКоманда.Заголовок = ЗаголовокКомандыВход;
	НоваяКоманда.Подсказка = ЗаголовокКомандыВход;
	Возврат ИмяКомандыВход;
КонецФункции		// ДобавитьКомандуФормы()

// Возвращает форму, на которой размещена группа элементов ГруппаВход.
Функция ПолучитьФормуГруппыЭлементов(ГруппаВход)
	РезультатФункции = ГруппаВход;
	Пока ТипЗнч(РезультатФункции) = Тип("ГруппаФормы") Цикл
		РезультатФункции = РезультатФункции.Родитель;
	КонецЦикла;	
	Если ТипЗнч(РезультатФункции) <> Тип("УправляемаяФорма") Тогда
		РезультатФункции = Неопределено;
	Иначе
		// Результат получен корректно. Вернём его.
	КонецЕсли;	
	Возврат РезультатФункции;
КонецФункции		// ПолучитьФормуГруппыЭлементов()

// Создаёт новый реквизит формы с префиксом ПрефиксВход, идентифкатором ИдентификаторВход,
// заголовком ЗаголовокРеквизита и с типом ОписаниеТиповВход, добавляет его в массив МассивДобавленияВход.
// Возвращает наименование реквизита.
Функция ДобавитьРеквизитФормы(НаименованиеНовогоРеквизитаВход, ОписаниеТиповВход, МассивДобавленияВход, ЗаголовокРеквизитаВход = "", ФормаВход = Неопределено)
	МожноДобавлять = Истина;	
	Если ФормаВход = Неопределено Тогда
		МожноДобавлять = Истина;
	Иначе
		УжеЕстьРеквизит = ОбщегоназначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаВход, НаименованиеНовогоРеквизитаВход);
		МожноДобавлять = НЕ УжеЕстьРеквизит;
	КонецЕсли;
	Если МожноДобавлять Тогда
		НовыйРеквизитФормы = Новый РеквизитФормы(НаименованиеНовогоРеквизитаВход, ОписаниеТиповВход, "", ЗаголовокРеквизитаВход);
		МассивДобавленияВход.Добавить(НовыйРеквизитФормы);
	Иначе
		// Не требуетя добавление реквизита.
	КонецЕсли;
	Возврат НаименованиеНовогоРеквизитаВход;
КонецФункции		// ДобавитьРеквизитФормы()

// Размещает на форме в группе ГруппаРодительВход элемент с префиксом ПрефиксВход,
// идентификатором ИдентификаторПоказателяВход, заголовком ЗаголовокВход и типом
// элемента формы ТипЭлементаВход. По умолчанию заголовок скрыт. Подключает его к 
// реквизиту НаименованиеРеквизитаВход. Возвращает новый элемент формы.
Функция ДобавитьЭлементФормы(ЭлементыВход, НаименованиеЭлементаВход, ГруппаРодительВход, НаименованиеРеквизитаВход, ТипЭлементаВход = Неопределено, ЗаголовокВход = "")
	Если ТипЭлементаВход = Неопределено Тогда
		ТипЭлементаРабочий = Тип("ПолеФормы");
	Иначе	
		ТипЭлементаРабочий = ТипЭлементаВход;
	КонецЕсли;
	НовыйЭлемент = ЭлементыВход.Добавить(НаименованиеЭлементаВход, ТипЭлементаРабочий, ГруппаРодительВход);
	НовыйЭлемент.ПутьКДанным	 = НаименованиеРеквизитаВход;
	НовыйЭлемент.Заголовок		 = ЗаголовокВход;
	Возврат НовыйЭлемент;
КонецФункции		// ДобавитьЭлементФормы()

// Возвращает описание типов для добавления на форму реквизита Согласующий.
Функция ПолучитьОписаниеТиповРеквизитСогласующий()
	РезультатФункции = Новый ОписаниеТипов;
	МассивТиповСогласующий = Новый Массив;
	МассивТиповСогласующий.Добавить(Тип("СправочникСсылка.ШаблоныУниверсальныхПроцессов"));
	МассивТиповСогласующий.Добавить(Тип("СправочникСсылка.РолиКонтактныхЛиц"));
	МассивТиповСогласующий.Добавить(Тип("СправочникСсылка.Пользователи"));
	МассивТиповСогласующий.Добавить(Тип("Строка"));
	ПараметрыСтроки = Новый КвалификаторыСтроки(150);
	РезультатФункции = Новый ОписаниеТипов(МассивТиповСогласующий, , ПараметрыСтроки);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьОписаниеТиповРеквизитСогласующий()

// Возвращает описание типов для добавления на форму реквизита Статус объекта.
Функция ПолучитьОписаниеТиповРеквизитСтатусОбъекта(ФормаЭлементаВход)
	РезультатФункции = Новый ОписаниеТипов;
	МассивТиповСтатусОбъекта = Новый Массив;
	СсылкаОбъектФормы = ФормаЭлементаВход.Объект.Ссылка;
	СправочникСогласуемогоОбъекта = ПолучитьТипСогласуемогоОбъекта(СсылкаОбъектФормы);
	Если СправочникСогласуемогоОбъекта <> Неопределено Тогда
		РеквизитСостояния = СправочникСогласуемогоОбъекта.РеквизитСостояния;
		СтрокаРеквизита = Строка(РеквизитСостояния);
		Если СокрЛП(СтрокаРеквизита) <> "" Тогда
			Если Метаданные.Перечисления.Найти(СтрокаРеквизита) <> Неопределено Тогда
				МассивТиповСтатусОбъекта.Добавить(Тип("ПеречислениеСсылка." + СтрокаРеквизита));		
				РезультатФункции = Новый ОписаниеТипов(МассивТиповСтатусОбъекта);
			Иначе
				ТекстСообщения = НСтр("ru = 'Не найдено перечисление %Перечисление%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Перечисление%", СтрокаРеквизита);
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				РезультатФункции = Новый ОписаниеТипов;
			КонецЕсли;
		Иначе
			Если ТипЗнч(СправочникСогласуемогоОбъекта) = Тип("СправочникСсылка.СправочникиБД") Тогда
				ТекстСообщения = НСтр("ru = 'В справочнике ""Справочнике текущей информационной базы"" не завершена настройка согласования для справочника ""%СправочникСогласуемого%"": не задан реквизит ""Тип реквизита состояния"".'");
			ИначеЕсли ТипЗнч(СправочникСогласуемогоОбъекта) = Тип("СправочникСсылка.ДокументыБД") Тогда
				ТекстСообщения = НСтр("ru = 'В справочнике ""Документы текущей информационной базы"" не завершена настройка согласования для документа ""%СправочникСогласуемого%"": не задан реквизит ""Тип реквизита состояния"".'");
			Иначе
				ТекстСообщения = НСтр("ru = 'В справочнике ""Объекты текущей информационной базы"" не завершена настройка согласования для объекта ""%СправочникСогласуемого%"": не задан реквизит ""Тип реквизита состояния"".'");
			КонецЕсли;
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СправочникСогласуемого%", Строка(СправочникСогласуемогоОбъекта));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			РезультатФункции = Новый ОписаниеТипов;
		КонецЕсли;
	Иначе
		ЭтоРеестрСогласуемыхОбъектов = (ТипЗнч(СсылкаОбъектФормы) = Тип("СправочникСсылка.РеестрыСогласуемыхОбъектов"));
		Если (НЕ ЗначениеЗаполнено(СсылкаОбъектФормы)) И (ЭтоРеестрСогласуемыхОбъектов) Тогда
			// Новый реестр согласования. Тип согласуемого объекта будет определён позже.
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось получить тип согласуемого объекта для %Ссылка%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Строка(ФормаЭлементаВход.Объект.Ссылка));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
		РезультатФункции = Новый ОписаниеТипов;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьОписаниеТиповРеквизитСтатусОбъекта()

// Возвращает описание типов для добавления на форму реквизита Состояния процесса.
Функция ПолучитьОписаниеТиповРеквизитСостоянияПроцесса()
	РезультатФункции = Новый ОписаниеТипов;
	МассивТиповСостоянияПроцесса = Новый Массив;
	МассивТиповСостоянияПроцесса.Добавить(Тип("ПеречислениеСсылка.СостоянияПроцесса"));
	РезультатФункции = Новый ОписаниеТипов(МассивТиповСостоянияПроцесса);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьОписаниеТиповРеквизитСостоянияПроцесса()

// Возвращает описание типов для добавления на форму реквизита ОбработчикиИзмененияОрганизации.
Функция ПолучитьОписаниеТиповТаблицаЗначений()
	РезультатФункции = Новый ОписаниеТипов;
	МассивТиповТаблицаЗначений = Новый Массив;
	МассивТиповТаблицаЗначений.Добавить(Тип("ТаблицаЗначений"));
	РезультатФункции = Новый ОписаниеТипов(МассивТиповТаблицаЗначений);
	Возврат РезультатФункции;
КонецФункции		// ПолучитьОписаниеТиповРеквизитСостоянияПроцесса()

// Добавляет в таблицу формы РодительскаяТаблицаВход колонку с наименованием НаименованиеНовогоРеквизитаВход и типом ОписаниеТиповКолонкиВход.
Функция ДобавитьРеквизитКолонкаТаблицыЗначений(НаименованиеНовогоРеквизитаВход, ОписаниеТиповКолонкиВход, РодительскаяТаблицаВход, МассивДобавления)
	НовыйРеквизитКолонка = Новый РеквизитФормы(НаименованиеНовогоРеквизитаВход, ОписаниеТиповКолонкиВход, РодительскаяТаблицаВход);
	МассивДобавления.Добавить(НовыйРеквизитКолонка);	
	Возврат НаименованиеНовогоРеквизитаВход;
КонецФункции		// ДобавитьРеквизитКолонка()

// Добавляет на форму ФормаВход реквизиты согласования 
// (Согласующий, СтатусОбъект, СостояниеЗаявки). Возвращает
// структуру, содержащую имена добавленных объектов.
Функция ДобавитьНаФормуРеквизитыСогласования(ФормаВход) Экспорт
	// Инициализация.
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("РеквизитСогласующий", "");
	РезультатФункции.Вставить("РеквизитСтатусОбъекта", "");
	РезультатФункции.Вставить("РеквизитСостояниеЗаявки", "");
	РезультатФункции.Вставить("ТаблицаОбработчиковПриИзмененииОрганизации", "");
	МассивДобавления = Новый Массив;
	ОписаниеТиповСогласующий	 = ПолучитьОписаниеТиповРеквизитСогласующий();
	ОписаниеТиповСтатусОбъекта	 = ПолучитьОписаниеТиповРеквизитСтатусОбъекта(ФормаВход);
	ОписаниеСостоянияПроцесса	 = ПолучитьОписаниеТиповРеквизитСостоянияПроцесса();
	ОписаниеТаблицаЗначений		 = ПолучитьОписаниеТиповТаблицаЗначений();
	ОписаниеСтрока				 = ОбщегоНазначения.ОписаниеТипаСтрока(200);
	// Добавление реквизитов.
	РеквизитСогласующий		 = ДобавитьРеквизитФормы("Согласующий", ОписаниеТиповСогласующий, МассивДобавления, НСтр("ru = 'Согласующий'"), ФормаВход);
	РеквизитСтатусОбъекта	 = ДобавитьРеквизитФормы("СтатусОбъекта", ОписаниеТиповСтатусОбъекта, МассивДобавления, НСтр("ru = 'Статус объекта'"), ФормаВход);
	РеквизитСостояниеЗаявки	 = ДобавитьРеквизитФормы("СостояниеЗаявки", ОписаниеСостоянияПроцесса, МассивДобавления, , ФормаВход);
	РеквизитТаблицаОбработчиковОрганизации	 = ДобавитьРеквизитФормы("ОбработчикиИзмененияОрганизации", ОписаниеТаблицаЗначений, МассивДобавления, , ФормаВход);
	РеквизитКолонкаИмяРеквизита				 = ДобавитьРеквизитКолонкаТаблицыЗначений("ИмяРеквизита", ОписаниеСтрока, РеквизитТаблицаОбработчиковОрганизации, МассивДобавления);
	РеквизитКолонкаИмяОбработчика			 = ДобавитьРеквизитКолонкаТаблицыЗначений("ИмяОбработчика", ОписаниеСтрока, РеквизитТаблицаОбработчиковОрганизации, МассивДобавления);
	ФормаВход.ИзменитьРеквизиты(МассивДобавления);
	// Возврат итоговой структуры.
	РезультатФункции.Вставить("РеквизитСогласующий", РеквизитСогласующий);
	РезультатФункции.Вставить("РеквизитСтатусОбъекта", РеквизитСтатусОбъекта);
	РезультатФункции.Вставить("РеквизитСостояниеЗаявки", РеквизитСостояниеЗаявки);
	РезультатФункции.Вставить("ТаблицаОбработчиковПриИзмененииОрганизации", РеквизитТаблицаОбработчиковОрганизации);
	Возврат РезультатФункции;
КонецФункции

// Выводит в группу РодительскаяГруппаВход элементов формы ЭлементыВход панель универсального согласования.
Процедура НарисоватьПанельСогласования(ЭлементыВход, РодительскаяГруппаВход) Экспорт
	
	// Инициализация.
	УстановитьПривилегированныйРежим(Истина);
	ФормаЭлемента = ПолучитьФормуГруппыЭлементов(РодительскаяГруппаВход);
			
	// Добавление реквизитов.
	СтруктураНовыхРеквизитов = ДобавитьНаФормуРеквизитыСогласования(ФормаЭлемента);
	РеквизитСогласующий		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНовыхРеквизитов, "РеквизитСогласующий", "");
	РеквизитСтатусОбъекта	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНовыхРеквизитов, "РеквизитСтатусОбъекта", "");
	РеквизитСостояниеЗаявки	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНовыхРеквизитов, "РеквизитСостояниеЗаявки", "");
	// Добавление команд на форму.
	ИмяКомандыПринятьКСогласованию	 = ДобавитьКомандуФормы("ПринятьКСогласованию", ФормаЭлемента, "СтартБизнесПроцесса", НСтр("ru = 'На согласование'"));
	ИмяКомандыИсторияСогласования	 = ДобавитьКомандуФормы("ИсторияСогласования", ФормаЭлемента, "ИсторияВыгрузок", НСтр("ru = 'История согласования'"));
	ИмяКомандыСогласоватьДокумент	 = ДобавитьКомандуФормы("СогласоватьДокумент", ФормаЭлемента, "ВизированиеОтчетов", НСтр("ru = 'Согласовать'"));
	ИмяКомандыОтменитьСогласование	 = ДобавитьКомандуФормы("ОтменитьСогласование", ФормаЭлемента, "ОтменитьВизированиеОтчетов", НСтр("ru = 'Отменить согласование'"));
	ИмяКомандыМаршрутСогласования	 = ДобавитьКомандуФормы("МаршрутСогласования", ФормаЭлемента, "СхемаПроцесса", НСтр("ru = 'Ход согласования'"));
	
	ДобавлятьВложенияСогласования = Истина;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаЭлемента, "Объект") тогда
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ФормаЭлемента.Объект, "Ссылка") тогда
			ДобавлятьВложенияСогласования = (ТипЗнч(ФормаЭлемента.Объект.Ссылка) <> Тип("ДокументСсылка.НастраиваемыйОтчет"));
		КонецЕсли;
	КонецЕсли;
	
	Если ДобавлятьВложенияСогласования Тогда
		ИмяКомандыВложенияСогласования = ДобавитьКомандуФормы("ВложенияСогласования", ФормаЭлемента, "Телеграм16х16", НСтр("ru = 'Вложения в Telegram'"));
	КонецЕсли;
	// Добавление элементов.
	
	ГруппировкаГоризонтальная = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ГоризонтальноеПоложениеЛево = ГоризонтальноеПоложениеЭлемента.Лево;
	ГоризонтальноеПоложениеПраво = ГоризонтальноеПоложениеЭлемента.Право;
	
 	ГруппаСтатусыСогласования = ДобавитьГруппуЭлементов(ЭлементыВход, "ГруппаСтатусыСогласования", РодительскаяГруппаВход, ГруппировкаГоризонтальная,,,, ГоризонтальноеПоложениеЛево);
	
	ГруппаСтатусыСогласованияЛево = ДобавитьГруппуЭлементов(ЭлементыВход, "ГруппаСтатусыСогласованияЛево", ГруппаСтатусыСогласования, ГруппировкаГоризонтальная,,,, ГоризонтальноеПоложениеЛево);
	ГруппаСтатусыСогласованияПраво = ДобавитьГруппуЭлементов(ЭлементыВход, "ГруппаСтатусыСогласованияПраво", ГруппаСтатусыСогласования, ГруппировкаГоризонтальная,,,, ГоризонтальноеПоложениеПраво);
	
	КартинкаСтатуса = ДобавитьДекорациюКартинка(ЭлементыВход, "КартинкаСтатуса", ГруппаСтатусыСогласованияЛево, БиблиотекаКартинок.ПометкаНовостиФлагСиний, ГоризонтальноеПоложениеЛево);
	ДобавитьЭлементФормы(ЭлементыВход, "СтатусОбъекта", ГруппаСтатусыСогласованияЛево, РеквизитСтатусОбъекта,, "Статус");
	
	ГруппировкаВерикальная = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	ГруппаСостояние	= ДобавитьГруппуЭлементов(ЭлементыВход, "ГруппаСостояниеСогласованияУХ", ГруппаСтатусыСогласованияПраво, ГруппировкаГоризонтальная,,,, ГоризонтальноеПоложениеПраво); 
	СтраницыМаршрутаСогласования = ДобавитьГруппуЭлементов(ЭлементыВход, "Группа_ОбработкаМаршрутаСогласования", ГруппаСтатусыСогласованияПраво, ГруппировкаГоризонтальная,,, ВидГруппыФормы.Страницы, ГоризонтальноеПоложениеПраво);
	СтраницыМаршрутаСогласования.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	
	// -Страница Маршрут не запущен.
	СтраницаМаршрутНеЗапущен = ДобавитьГруппуЭлементов(ЭлементыВход, "МаршрутСогласованияНеЗапущен", СтраницыМаршрутаСогласования, ГруппировкаГоризонтальная,,, ВидГруппыФормы.Страница, ГоризонтальноеПоложениеПраво);
	СтраницаМаршрутНеЗапущен.РастягиватьПоГоризонтали = Истина;
				
	ПринятьКСогласованию = ДобавитьЭлементКоманды(ЭлементыВход, "ПринятьКСогласованию", ИмяКомандыПринятьКСогласованию, СтраницаМаршрутНеЗапущен);
	ПринятьКСогласованию.Отображение = ОтображениеКнопки.КартинкаИТекст;
	
	ГруппаМаршрутНеЗапущен = ДобавитьГруппуЭлементов(ЭлементыВход, "КоманднаяПанельСтраницаМаршрутНеЗапущен", СтраницаМаршрутНеЗапущен, ГруппировкаГоризонтальная,,,, ГоризонтальноеПоложениеПраво);
	
	// -Страница Маршрут запущен.
	СтраницаМаршрутЗапущен = ДобавитьГруппуЭлементов(ЭлементыВход, "МаршрутСогласованияЗапущен", СтраницыМаршрутаСогласования, ГруппировкаВерикальная,,, ВидГруппыФормы.Страница, ГоризонтальноеПоложениеПраво); 	
	СтраницаМаршрутЗапущен.РастягиватьПоГоризонтали = Истина;
		
	ГруппаСогласования = ДобавитьГруппуЭлементов(ЭлементыВход, "ГруппаСогласования", СтраницаМаршрутЗапущен, ГруппировкаГоризонтальная,,,, ГоризонтальноеПоложениеПраво);
	
	СогласоватьДокумент	= ДобавитьЭлементКоманды(ЭлементыВход, "СогласоватьДокумент", ИмяКомандыСогласоватьДокумент, ГруппаСогласования);
	ОтменитьСогласование = ДобавитьЭлементКоманды(ЭлементыВход, "ОтменитьСогласование", ИмяКомандыОтменитьСогласование, ГруппаСогласования);	
	МаршрутСогласования	 = ДобавитьЭлементКоманды(ЭлементыВход, "МаршрутСогласования", ИмяКомандыМаршрутСогласования, ГруппаСогласования);
	
	// -Страница Нет маршрута.
	СтраницаНетМаршрута = ДобавитьГруппуЭлементов(ЭлементыВход, "НетМаршрутаСогласования", СтраницыМаршрутаСогласования, ГруппировкаГоризонтальная,,, ВидГруппыФормы.Страница, ГоризонтальноеПоложениеПраво); 	
	СтраницаНетМаршрута.РастягиватьПоГоризонтали = Истина;
	 	
	ПринятьКСогласованию1 = ДобавитьЭлементКоманды(ЭлементыВход, "ПринятьКСогласованию1", ИмяКомандыПринятьКСогласованию, СтраницаНетМаршрута);		
	ПринятьКСогласованию1.Отображение = ОтображениеКнопки.КартинкаИТекст;
	
	ГруппаНетМаршрута = ДобавитьГруппуЭлементов(ЭлементыВход, "КоманднаяПанельСтраницаНетМаршрута", СтраницаНетМаршрута, ГруппировкаГоризонтальная,,,, ГоризонтальноеПоложениеПраво);
		
	// -Страница Нет маршрута в обработке.
	СтраницаНетМаршрутаВОбработке = ДобавитьГруппуЭлементов(ЭлементыВход, "НетМаршрутаСогласованияВОбработке", СтраницыМаршрутаСогласования, ГруппировкаГоризонтальная,,, ВидГруппыФормы.Страница, ГоризонтальноеПоложениеПраво); 	
	СтраницаНетМаршрутаВОбработке.РастягиватьПоГоризонтали = Истина;
	
	ОтменитьСогласование1 = ДобавитьЭлементКоманды(ЭлементыВход, "ОтменитьСогласование1", ИмяКомандыОтменитьСогласование, СтраницаНетМаршрутаВОбработке);	
	СогласоватьДокумент1 = ДобавитьЭлементКоманды(ЭлементыВход, "СогласоватьДокумент1", ИмяКомандыСогласоватьДокумент, СтраницаНетМаршрутаВОбработке);
		
	ИсторияСогласования	 = ДобавитьЭлементКоманды(ЭлементыВход, "ИсторияСогласования", ИмяКомандыИсторияСогласования, ГруппаСтатусыСогласованияПраво);
	
	// Элементы состояния.
	Если ТипЗнч(ФормаЭлемента.Объект.Ссылка) = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
	 	ДобавитьЭлементФормы(ЭлементыВход, "Инициатор", ГруппаСтатусыСогласованияПраво, "Инициатор", , НСтр("ru = 'Исполнитель'"));
		ЭлементыВход.Инициатор.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
	КонецЕсли;
	
	ДобавитьЭлементФормы(ЭлементыВход, "СостояниеЗаявки", ГруппаСостояние, РеквизитСостояниеЗаявки);
	ЭлементыВход.СостояниеЗаявки.Видимость = Ложь;
	
	// Настройка элементов.
	ГруппаСтатусыСогласования.ЦветФона = ЦветаСтиля.ЦветФонаФормы;
						
	МестоРасположения = Неопределено;
	МассивИменПервыхГрупп = Новый Массив;
		
	МассивИменПервыхГрупп.Добавить("ДатаНомер");
	МассивИменПервыхГрупп.Добавить("ГруппаДатаНомер");
	МассивИменПервыхГрупп.Добавить("ГруппаНомерДата");
	МассивИменПервыхГрупп.Добавить("ГруппаНомераИДаты");
	МассивИменПервыхГрупп.Добавить("ГруппаНаименованиеКод");
	МассивИменПервыхГрупп.Добавить("ГруппаКодДата");
	МассивИменПервыхГрупп.Добавить("Страницы");
	МассивИменПервыхГрупп.Добавить("ГруппаСтраницы");
	МассивИменПервыхГрупп.Добавить("ГруппаОсновная");
	МассивИменПервыхГрупп.Добавить("ГруппаОбъектСогласования");
	МассивИменПервыхГрупп.Добавить("ГруппаШапка");
	МассивИменПервыхГрупп.Добавить("ГруппаШапкаДокумента");
	МассивИменПервыхГрупп.Добавить("ОсновнаяПанель");
	МассивИменПервыхГрупп.Добавить("ГруппаОсновныеРеквизиты");
	
	Для Каждого ИмяПервойГруппы Из МассивИменПервыхГрупп Цикл
		МестоРасположения = ЭлементыВход.Найти(ИмяПервойГруппы);
		Если МестоРасположения <> неопределено тогда
			Если МестоРасположения.Родитель = РодительскаяГруппаВход тогда
				Прервать;
			Иначе
				МестоРасположения = Неопределено;
			КонецЕсли
		КонецЕсли;
	КонецЦикла;
		
	Если МестоРасположения <> Неопределено тогда
		ЭлементыВход.Переместить(ГруппаСтатусыСогласования, РодительскаяГруппаВход, МестоРасположения);
	КонецЕсли;
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры	
 
#Область СостояниеЭкземпляров

Процедура УстановитьСостояниеСогласованияПослеПроверки(ЭкземплярОбъект, ПроверкаПройдена = Истина) Экспорт

	Если ПроверкаПройдена Тогда
		ИзменитьСостояниеСогласованияОбъекта(ЭкземплярОбъект, ПолучитьСостояниеСогласованияПослеПроверки(ЭкземплярОбъект.Состояние));
	Иначе
		//
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьСостояниеСогласованияПослеЗаполнения(ЭкземплярОбъект, ОбъектЗаполненБезОшибок = Истина) Экспорт

	Если ОбъектЗаполненБезОшибок Тогда
		ИзменитьСостояниеСогласованияОбъекта(ЭкземплярОбъект, ПолучитьСостояниеСогласованияПослеЗаполнения(ЭкземплярОбъект.Состояние));
	Иначе
		//		
	КонецЕсли;

КонецПроцедуры

Функция ПолучитьСостояниеСогласованияПослеПроверки(ТекущееСостояниеСогласования) Экспорт

	Если ТекущееСостояниеСогласования <> Перечисления.СостоянияОтчетов.Утвержден Тогда
		
		Возврат Перечисления.СостоянияОтчетов.Подготовлен;
		
	Иначе
		
		Возврат ТекущееСостояниеСогласования;
		
	КонецЕсли;

КонецФункции

Функция ПолучитьСостояниеСогласованияПослеЗаполнения(ТекущееСостояниеСогласования) Экспорт

	Если ТекущееСостояниеСогласования = Перечисления.СостоянияОтчетов.Запланирован Тогда
		
		Возврат Перечисления.СостоянияОтчетов.Выполняется;
				
	Иначе
		
		Возврат ТекущееСостояниеСогласования;
		
	КонецЕсли;

КонецФункции

Процедура ИзменитьСостояниеСогласованияОбъекта(Объект, НовоеСостояние) Экспорт

	Если Объект.Состояние <> НовоеСостояние Тогда
	
		УправлениеПроцессамиСогласованияУХ.ПеревестиЗаявкуВПроизвольноеСостояние(Объект.Ссылка, НовоеСостояние);
	
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСостояниеОбъектаИзФормы(Объект, ФормаИсточник) Экспорт

	Объект.ДополнительныеСвойства.Вставить("СостояниеСогласованияДоИзменения", ФормаИсточник.СостояниеСогласованияДоИзменения);
	Объект.Состояние = ФормаИсточник.СостояниеСогласования;

КонецПроцедуры

Процедура ЗаполнитьОтчетИзменитьСостояние(Отчет, СпособЗаполнения = Неопределено, ВыполнитьПроверку = Ложь) Экспорт
	
	Если (СпособЗаполнения <> Неопределено) И Отчет.ЗаполнитьОтчет(СпособЗаполнения) Тогда		
		
		ИзменитьСостояниеСогласованияОбъекта(Отчет, ПолучитьСостояниеСогласованияПослеЗаполнения(Отчет.Состояние));
		
	Иначе
		
		Отчет.Состояние = Перечисления.СостоянияОтчетов.Запланирован;
		Отчет.ДополнительныеСвойства.Вставить("СостояниеСогласования", Отчет.Состояние);
		
	КонецЕсли;
	
	Если ВыполнитьПроверку Тогда
	
		Если Отчет.Проверить() Тогда
			
		КонецЕсли;	
	
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьСостоянияСогласования(Объект) Экспорт

	Перем СостояниеСогласования, СостояниеСогласованияДоИзменения;
	
	Если Объект.СостояниеДоИзменения <> Неопределено Тогда 
		//было установлено ранее
	ИначеЕсли Объект.ДополнительныеСвойства.Свойство("СостояниеСогласованияДоИзменения", СостояниеСогласованияДоИзменения) Тогда	
		Объект.СостояниеДоИзменения = СостояниеСогласованияДоИзменения;		
	Иначе		
		Объект.СостояниеДоИзменения = УправлениеПроцессамиСогласованияУХ.ВернутьТекущееСостояние(Объект.Ссылка);
	КонецЕсли;
	
	Если Объект.Состояние <> Неопределено Тогда 
		//было установлено ранее
	ИначеЕсли Объект.ДополнительныеСвойства.Свойство("СостояниеСогласования", СостояниеСогласования) Тогда
		
		//объект изменен, вернем новое состояние
		
		Если ТипЗнч(СостояниеСогласования) = Тип("Структура") Тогда
			Объект.Состояние = СостояниеСогласования.Состояние;
		Иначе
			Объект.Состояние = СостояниеСогласования;
		КонецЕсли;
		
	Иначе
		
		Объект.Состояние = Объект.СостояниеДоИзменения;
		
	КонецЕсли;
	
КонецПроцедуры
 
#КонецОбласти

#Область ДополнительныеСогласующие

// Добавляет дополнительное согласование из пользователей из МассивСогласующихВход
// по процессу ЭкземплярПроцессаВход на этап ЭтапПроцессаВход от имени основного согласующего
// ДобавившийПользователь. Возвращает успешность выполнения.
Функция ДобавитьДополнительныхСогласующих(МассивСогласующихВход, ЭкземплярПроцессаВход, ЭтапПроцессаВход, ДобавившийПользователь = Неопределено) Экспорт
	// Инициализация.
	РезультатФункции = Истина;
	ТекМассивСогласующихВход = Справочники.Пользователи.ПустаяСсылка();
	ЕстьОшибки = Ложь;
	ТекПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	НачатьТранзакцию();
	Попытка
		// Получим массив уже добавленных пользователей.
		ТаблицаДопСогласования = ПолучитьТаблицуДопСогласующихПоЭтапу(ЭкземплярПроцессаВход, ЭтапПроцессаВход);
		Если ТаблицаДопСогласования.Количество() > 0 Тогда
			МассивДобавленныхСогласующих = ТаблицаДопСогласования.ВыгрузитьКолонку("Согласующий");
		Иначе
			МассивДобавленныхСогласующих = Новый Массив;
		КонецЕсли;
		// Добавим новых пользователей.
		ВидДействияДопСогласование = Перечисления.СобытияОтложеннойОбработкиПроцессов.ДополнительноеСогласованиеЭтапа;
		Для Каждого ТекМассивСогласующихВход Из МассивСогласующихВход Цикл
			Если ЗначениеЗаполнено(ТекМассивСогласующихВход) Тогда
				Если МассивДобавленныхСогласующих.Найти(ТекМассивСогласующихВход) = Неопределено Тогда		// Согласующего ещё нет. Добавим его.
					ТаблицаЭтапыПользователя = МодульУправленияПроцессамиУХ.ЭтапыСогласованияДляПользователя(ЭкземплярПроцессаВход.КлючевойОбъектПроцесса, ТекМассивСогласующихВход, Ложь);
					МассивЭтапыПользователя = ТаблицаЭтапыПользователя.ВыгрузитьКолонку("ЭтапПроцесса");
					Если МассивЭтапыПользователя.Найти(ЭтапПроцессаВход) = Неопределено Тогда
						// Добавим задачу по доп согласующим.
						элЗадачи = Справочники.Задачи.СоздатьЭлемент();
						элЗадачи.СвязанныйОбъект = ЭкземплярПроцессаВход.КлючевойОбъектПроцесса;
						элЗадачи.Записать();
						МодульРегламентныхЗаданийУХ.СоздатьЗадачу(элЗадачи, ТекМассивСогласующихВход, ЭкземплярПроцессаВход, ЭтапПроцессаВход, ВидДействияДопСогласование);
						// Создадим запись в регистре доп согласующих.
						МенеджерЗаписи = РегистрыСведений.ВизаДополнительныхСогласующих.СоздатьМенеджерЗаписи();
						МенеджерЗаписи.ЭкземплярПроцесса = ЭкземплярПроцессаВход;
						МенеджерЗаписи.ЭтапПроцесса = ЭтапПроцессаВход;
						МенеджерЗаписи.Согласующий = ТекМассивСогласующихВход;
						МенеджерЗаписи.АрхивнаяЗапись = Ложь;
						МенеджерЗаписи.Виза = Ложь;
						МенеджерЗаписи.Комментарий = "";
						МенеджерЗаписи.Задача = элЗадачи.Ссылка;
						Если ДобавившийПользователь = Неопределено Тогда
							МенеджерЗаписи.ДобавившийПользователь = Справочники.Пользователи.ПустаяСсылка();
						Иначе
							МенеджерЗаписи.ДобавившийПользователь = ДобавившийПользователь;
						КонецЕсли;
						МенеджерЗаписи.Записать();
						// Создадим оповещение.
						ВидСобытияДобавленСогласующий = Справочники.ВидыСобытийОповещений.ДобавленДополнительныйСогласующий;
						ИсточникСсылка = ЭкземплярПроцессаВход.КлючевойОбъектПроцесса;
						МассивРассылки = Новый Массив;
						ДопПараметры = Новый Структура;
						ДопПараметры.Вставить("ДобавленныйПользователь", ТекМассивСогласующихВход);
						МодульУправленияОповещениямиУХ.ОповеститьПользователей(ВидСобытияДобавленСогласующий, , ИсточникСсылка, МассивРассылки, ДопПараметры);
						// Добавим запись в историю согласования.
						ТекстЛога = НСтр("ru = 'Добавлен дополнительный согласующий %Согласующий%'");
						ТекстЛога = СтрЗаменить(ТекстЛога, "%Согласующий%", Строка(ТекМассивСогласующихВход));
						ВидОповещенияДобавленСогласующий = Перечисления.ВидыОповещенийПользователейУХ.ДобавленДополнительныйСогласующий;
						МодульУправленияПроцессамиУХ.ДобавитьЗаписьВЛогПроцесса(ЭкземплярПроцессаВход, ЭтапПроцессаВход, ТекПользователь, ТекстЛога, ВидОповещенияДобавленСогласующий);
					Иначе
						ТекстОшибки = НСтр("ru = 'Основной согласующий %Согласующий% уже присутствует на данном этапе. Добавление отменено.'");
						ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Согласующий%", ТекМассивСогласующихВход);
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
						ЕстьОшибки = Истина;
					КонецЕсли;
				Иначе
					ТекстОшибки = НСтр("ru = 'Дополнительный согласующий %Согласующий% уже присутствует на данном этапе. Добавление отменено.'");
					ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Согласующий%", ТекМассивСогласующихВход);
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
					ЕстьОшибки = Истина;
				КонецЕсли;
			Иначе
				Продолжить;			// Пустой согласующий. Пропускаем.
			КонецЕсли;
		КонецЦикла;      	
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось добавить согласующего %НовыйСогласующий% в этап %Этап% : %ОписаниеОшибки%. Добавление отменено.'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НовыйСогласующий%", ТекМассивСогласующихВход);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Этап%", ЭтапПроцессаВход);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
		ЕстьОшибки = Истина;
	КонецПопытки;
	// Завершение транзакции.
	Если ЕстьОшибки Тогда
		ОтменитьТранзакцию();
	Иначе
		ЗафиксироватьТранзакцию();
	КонецЕсли;
	РезультатФункции = НЕ ЕстьОшибки;
	Возврат РезультатФункции;
КонецФункции

// Удаляет из этапа ЭтапПроцессаВход согласования ЭтапПроцессаВход дополнительных согласующих
// в массиве МассивСогласующихВход.
Функция УдалитьДополнительныхСогласующих(МассивСогласующихВход, ЭкземплярПроцессаВход, ЭтапПроцессаВход, ОрганизацияВход = Неопределено) Экспорт
	// Инициализация.
	РезультатФункции = Истина;
	ТекПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	Если ЗначениеЗаполнено(ЭкземплярПроцессаВход) И ЗначениеЗаполнено(ЭтапПроцессаВход) Тогда
		ТекМассивСогласующихВход = Справочники.Пользователи.ПустаяСсылка();
		ЕстьОшибки = Ложь;
		НачатьТранзакцию();
		Попытка
			// Проверим, что нет уже согласовавших пользователей.
			ТаблицаДопСогласования = ПолучитьТаблицуДопСогласующихПоЭтапу(ЭкземплярПроцессаВход, ЭтапПроцессаВход);
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("АрхивнаяЗапись", Истина);
			НайденныеСтрокиСогласовавших = ТаблицаДопСогласования.НайтиСтроки(СтруктураОтбора);
			МассивУжеСогласовавших = Новый Массив;
			Для Каждого ТекНайденныеСтрокиСогласовавших Из НайденныеСтрокиСогласовавших Цикл
				МассивУжеСогласовавших.Добавить(ТекНайденныеСтрокиСогласовавших.Согласующий);
			КонецЦикла;
			// Удалим пользователей.
			Для Каждого ТекМассивСогласующихВход Из МассивСогласующихВход Цикл
				Если ЗначениеЗаполнено(ТекМассивСогласующихВход) Тогда
					Если МассивУжеСогласовавших.Найти(ТекМассивСогласующихВход) = Неопределено Тогда
						// Создадим запись в регистре доп согласующих.
						Набор = РегистрыСведений.ВизаДополнительныхСогласующих.СоздатьНаборЗаписей();
						Набор.Отбор.ЭкземплярПроцесса.Установить(ЭкземплярПроцессаВход);
						Набор.Отбор.ЭтапПроцесса.Установить(ЭтапПроцессаВход);
						Набор.Отбор.Согласующий.Установить(ТекМассивСогласующихВход);
						Набор.Прочитать();
						Выгрузка = Набор.Выгрузить();
						Набор.Очистить();
						Набор.Записать();
						// Очистим задачи по набору.
						Для Каждого ТекВыгрузка Из Выгрузка Цикл
							Если ЗначениеЗаполнено(ТекВыгрузка.Задача) Тогда
								МодульРегламентныхЗаданийУХ.СброситьЗадачу(ТекВыгрузка.Задача);
							Иначе
								// Пустая задача. Не нужно сбрасывать.
							КонецЕсли;
						КонецЦикла;
						// Отправим оповещение пользователю.
						ВидСобытияУдаленСогласующий = Справочники.ВидыСобытийОповещений.УдаленДополнительныйСогласующий;
						ИсточникСсылка = ЭкземплярПроцессаВход.КлючевойОбъектПроцесса;
						МассивРассылки = Новый Массив;
						МассивРассылки.Добавить(ТекМассивСогласующихВход);
						МодульУправленияОповещениямиУХ.ОповеститьПользователей(ВидСобытияУдаленСогласующий, , ИсточникСсылка, МассивРассылки);
						// Добавим запись в историю согласования.
						ТекстЛога = НСтр("ru = 'Удален дополнительный согласующий %Согласующий%'");
						ТекстЛога = СтрЗаменить(ТекстЛога, "%Согласующий%", Строка(ТекМассивСогласующихВход));
						ВидОповещенияУдаленСогласующий = Перечисления.ВидыОповещенийПользователейУХ.УдаленДополнительныйСогласующий;
						МодульУправленияПроцессамиУХ.ДобавитьЗаписьВЛогПроцесса(ЭкземплярПроцессаВход, ЭтапПроцессаВход, ТекПользователь, ТекстЛога, ВидОповещенияУдаленСогласующий);
						// Возможно, согласование на этом этапе завершилось. В таком случае перейдём на следующие.
						ТекЗавершеноОсновноеСогласование = МодульУправленияПроцессамиУХ.ЗавершеноОсновноеСогласование(ЭкземплярПроцессаВход, ЭтапПроцессаВход);
						ТекЗавершеноДополнительноеСогласование = НЕ ЕстьАктивноеДопСогласованиеПоЭтапу(ЭкземплярПроцессаВход, ЭтапПроцессаВход);
						Если ТекЗавершеноОсновноеСогласование И ТекЗавершеноДополнительноеСогласование Тогда	
							МодульУправленияПроцессамиУХ.ПерейтиНаСледующиеЭтапы(ЭкземплярПроцессаВход, ОрганизацияВход, ЭтапПроцессаВход);
						Иначе
							// Не выполняем переход.
						КонецЕсли;
					Иначе
						ТекстОшибки = НСтр("ru = 'Согласующий %Согласующий% уже поставил визу на данном этапе. Удаление отменено.'");
						ТекстОшибки = СтрЗаменить(ТекстОшибки, "%Согласующий%", ТекМассивСогласующихВход);
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
						ЕстьОшибки = Истина;
					КонецЕсли;
				Иначе
					Продолжить;			// Пустой согласующий. Пропускаем.
				КонецЕсли;
			КонецЦикла;      	
		Исключение
			ТекстОшибки = НСтр("ru = 'Не удалось удалить согласующего %Согласующий% : %ОписаниеОшибки%. Удаление отменено.'");
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%НовыйСогласующий%", ТекМассивСогласующихВход);
			ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
			ЕстьОшибки = Истина;
		КонецПопытки;
		// Завершение транзакции.
		Если ЕстьОшибки Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	Иначе
		ТекстОшибки = НСтр("ru = 'Не заполнены необходимые параметры. Удаление отменено.'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
		ЕстьОшибки = Истина;
	КонецЕсли;
	РезультатФункции = НЕ ЕстьОшибки;
	Возврат РезультатФункции;
КонецФункции

// Возвращает массив активных задач по доп согласованию для переданных параметров.
Функция НайтиЗадачиДопСогласования(СогласующийВход, ЭкземплярПроцессаВход, ЭтапПроцессаВход) Экспорт
	РезультатФункции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОтложеннаяОбработкаЭтаповПроцессов.Задача
		|ИЗ
		|	РегистрСведений.ОтложеннаяОбработкаЭтаповПроцессов КАК ОтложеннаяОбработкаЭтаповПроцессов
		|ГДЕ
		|	ОтложеннаяОбработкаЭтаповПроцессов.ДокументПроцесса = &ДокументПроцесса
		|	И ОтложеннаяОбработкаЭтаповПроцессов.ВидДействия = &ВидДействия
		|	И ОтложеннаяОбработкаЭтаповПроцессов.ЭтапПроцесса = &ЭтапПроцесса
		|	И ОтложеннаяОбработкаЭтаповПроцессов.Ответственный = &Ответственный
		|	И ОтложеннаяОбработкаЭтаповПроцессов.Выполнено = ЛОЖЬ";
	Запрос.УстановитьПараметр("ВидДействия", Перечисления.СобытияОтложеннойОбработкиПроцессов.ДополнительноеСогласованиеЭтапа);
	Запрос.УстановитьПараметр("ДокументПроцесса", ЭкземплярПроцессаВход);
	Запрос.УстановитьПараметр("Ответственный", СогласующийВход);
	Запрос.УстановитьПараметр("ЭтапПроцесса", ЭтапПроцессаВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатФункции.Добавить(ВыборкаДетальныеЗаписи.Задача);
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

// Устанавливает визирование по доп согласованию по указанным парметрам в значение ВизаВход. Возвращает 
// успешность выполнения.
Функция ПоставитьДопВизу(СогласующийВход, ЭкземплярПроцессаВход, ЭтапПроцессаВход, ВизаВход, КомментарийВход = "", Организация = Неопределено, ЭтоЗамещениеВход = Ложь) Экспорт
	РезультатФункции = Истина;
	НачатьТранзакцию();
	ЕстьОшибки = Ложь;
	Попытка
		// Запишем выполнение в регистр доп согласования.
		НаборЗаписей = РегистрыСведений.ВизаДополнительныхСогласующих.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЭкземплярПроцесса.Установить(ЭкземплярПроцессаВход);
		НаборЗаписей.Отбор.ЭтапПроцесса.Установить(ЭтапПроцессаВход);
		НаборЗаписей.Отбор.Согласующий.Установить(СогласующийВход);
		НаборЗаписей.Прочитать();
		Для Каждого ТекНаборЗаписей Из НаборЗаписей Цикл
			ТекНаборЗаписей.АрхивнаяЗапись	 = Истина;
			ТекНаборЗаписей.Виза			 = ВизаВход;
			ТекНаборЗаписей.Комментарий		 = КомментарийВход;
		КонецЦикла;
		НаборЗаписей.Записать();
		// Выполним задачи по доп согласованию.
		МассивЗадачДопСогласования = НайтиЗадачиДопСогласования(СогласующийВход, ЭкземплярПроцессаВход, ЭтапПроцессаВход);
		Для Каждого ТекМассивЗадачДопСогласования Из МассивЗадачДопСогласования Цикл
			МодульРегламентныхЗаданийУХ.ВыполнитьЗадачу(ТекМассивЗадачДопСогласования, КомментарийВход);	
		КонецЦикла;
		// Добавим запись в лог.
		Если ВизаВход Тогда
			ВидОповещенияПользователя = Перечисления.ВидыОповещенийПользователейУХ.ЭтапСогласован;
		Иначе	
			ВидОповещенияПользователя = Перечисления.ВидыОповещенийПользователейУХ.ОтклонениеОтчета;
		КонецЕсли;
		КомментарийСистемы = МодульУправленияПроцессамиУХ.ПолучитьКомментарийСистемыЗамещаемого(СогласующийВход);
		Если ЭтоЗамещениеВход Тогда
			// Установим лог от имени текущего пользователя.
			ТекПользователь = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
			МодульУправленияПроцессамиУХ.ДобавитьЗаписьВЛогПроцесса(ЭкземплярПроцессаВход, ЭтапПроцессаВход, ТекПользователь, КомментарийВход, ВидОповещенияПользователя, КомментарийСистемы);
		Иначе	
			МодульУправленияПроцессамиУХ.ДобавитьЗаписьВЛогПроцесса(ЭкземплярПроцессаВход, ЭтапПроцессаВход, СогласующийВход, КомментарийВход, ВидОповещенияПользователя, КомментарийСистемы);
		КонецЕсли;
		// Выполним переход по этапам.
		ТекЗавершеноОсновноеСогласование = МодульУправленияПроцессамиУХ.ЗавершеноОсновноеСогласование(ЭкземплярПроцессаВход, ЭтапПроцессаВход);
		ТекЗавершеноДополнительноеСогласование = НЕ ЕстьАктивноеДопСогласованиеПоЭтапу(ЭкземплярПроцессаВход, ЭтапПроцессаВход);
		Если ТекЗавершеноОсновноеСогласование И ТекЗавершеноДополнительноеСогласование И ВизаВход Тогда	
			МодульУправленияПроцессамиУХ.ПерейтиНаСледующиеЭтапы(ЭкземплярПроцессаВход, Организация, ЭтапПроцессаВход);
		Иначе
			// Не выполняем переход.
		КонецЕсли;
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось установить визу согласующего %Согласующий% в этап %Этап% : %ОписаниеОшибки%'");
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "Согласующий%", СогласующийВход);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "Этап%", ЭтапПроцессаВход);
		ТекстОшибки = СтрЗаменить(ТекстОшибки, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки);
		ЕстьОшибки = Истина;
		РезультатФункции = Ложь;
	КонецПопытки;
	// Обработаем транзакцию.
	Если НЕ ЕстьОшибки Тогда
		ЗафиксироватьТранзакцию();
	Иначе
		ОтменитьТранзакцию();
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

// Возвращает таблицу значений, содержащую согласоование дополнительными согласующими по этапу
// ЭтапВход и экземпляру ЭкземплярПроцессаВход
Функция ПолучитьТаблицуДопСогласующихПоЭтапу(ЭкземплярПроцессаВход, ЭтапВход) Экспорт
	РезультатФункции = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВизаДополнительныхСогласующих.Согласующий КАК Согласующий,
		|	ВизаДополнительныхСогласующих.АрхивнаяЗапись КАК АрхивнаяЗапись,
		|	ВизаДополнительныхСогласующих.Виза,
		|	ВизаДополнительныхСогласующих.Комментарий,
		|	ВизаДополнительныхСогласующих.ДобавившийПользователь,
		|	ВизаДополнительныхСогласующих.Задача
		|ИЗ
		|	РегистрСведений.ВизаДополнительныхСогласующих КАК ВизаДополнительныхСогласующих
		|ГДЕ
		|	ВизаДополнительныхСогласующих.ЭтапПроцесса = &ЭтапПроцесса
		|	И ВизаДополнительныхСогласующих.ЭкземплярПроцесса = &ЭкземплярПроцесса
		|
		|УПОРЯДОЧИТЬ ПО
		|	АрхивнаяЗапись,
		|	Согласующий";
	Запрос.УстановитьПараметр("ЭкземплярПроцесса", ЭкземплярПроцессаВход);
	Запрос.УстановитьПараметр("ЭтапПроцесса", ЭтапВход);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
КонецФункции

// Определяет наличие незавершенного дополнительного согласования
// по задаче ЗадачаВход.
Функция ЕстьАктивноеДопСогласованиеПоЗадаче(ЗадачаВход) Экспорт
	РезультатФункции = Ложь;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВизаДополнительныхСогласующих.ЭкземплярПроцесса,
		|	ВизаДополнительныхСогласующих.ЭтапПроцесса,
		|	ВизаДополнительныхСогласующих.Согласующий,
		|	ВизаДополнительныхСогласующих.АрхивнаяЗапись,
		|	ВизаДополнительныхСогласующих.Виза,
		|	ВизаДополнительныхСогласующих.Комментарий,
		|	ВизаДополнительныхСогласующих.Задача,
		|	ВизаДополнительныхСогласующих.ДобавившийПользователь
		|ИЗ
		|	РегистрСведений.ВизаДополнительныхСогласующих КАК ВизаДополнительныхСогласующих
		|ГДЕ
		|	ВизаДополнительныхСогласующих.АрхивнаяЗапись = ЛОЖЬ
		|	И ВизаДополнительныхСогласующих.Задача = &Задача";
	Запрос.УстановитьПараметр("Задача", ЗадачаВход);
	РезультатЗапроса = Запрос.Выполнить();
	РезультатФункции = НЕ РезультатЗапроса.Пустой();
	Возврат РезультатФункции;
КонецФункции

// Возвращает наличие незаконченного доп согласования по этапу ЭтапВход и экземпляру 
// процесса ЭкземплярПроцессаВход.
Функция ЕстьАктивноеДопСогласованиеПоЭтапу(ЭкземплярПроцессаВход, ЭтапВход) Экспорт
	РезультатФункциии = Ложь;
	РезультатДопСогласующие = ПолучитьТаблицуДопСогласующихПоЭтапу(ЭкземплярПроцессаВход, ЭтапВход);
	Для Каждого ТекРезультатДопСогласующие Из РезультатДопСогласующие Цикл
		Если НЕ ТекРезультатДопСогласующие.АрхивнаяЗапись Тогда
			РезультатФункциии = Истина;
			Прервать;						// Найдено значение. Завершаем поиск.
		Иначе
			Продолжить;						// Выполняем поиск далее.
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункциии;
КонецФункции

// Определяет, является ли задача ЗадачаВход пользователя ПользовательВход 
// задачей дополнительного согласования. Когда ПользовательВход не задан - 
// берётся текущий пользователь
Функция ЭтоЗадачаДопСогласования(ЗадачаВход, ПользовательВход = Неопределено) Экспорт
	Если ПользовательВход = Неопределено Тогда
		ПользовательПараметр = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	Иначе
		ПользовательПараметр = ПользовательВход;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Период,
		|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ВидДействия,
		|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ДокументПроцесса,
		|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ЭтапПроцесса,
		|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Ответственный,
		|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ТипКлючевогоОбъекта,
		|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Выполнено,
		|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Задача,
		|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ВремяСобытия,
		|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.КлючевойОбъект,
		|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ВремяНачалаЗадания,
		|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ВремяЗавершенияЗадания,
		|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ТекстКомментария
		|ИЗ
		|	РегистрСведений.ОтложеннаяОбработкаЭтаповПроцессов.СрезПоследних КАК ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних
		|ГДЕ
		|	ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Задача = &Задача
		|	И ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.ВидДействия = &ВидДействия
		|	И ОтложеннаяОбработкаЭтаповПроцессовСрезПоследних.Ответственный = &Ответственный";
	Запрос.УстановитьПараметр("ВидДействия", Перечисления.СобытияОтложеннойОбработкиПроцессов.ДополнительноеСогласованиеЭтапа);
	Запрос.УстановитьПараметр("Задача", ЗадачаВход);
	Запрос.УстановитьПараметр("Ответственный", ПользовательПараметр);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	РезультатФункции = НЕ РезультатЗапроса.Пустой();
	Возврат РезультатФункции;
КонецФункции

// Утверждает этап по дополнительному согласованию для переданных параметров.
Функция УтвердитьЭтапДополнительногоСогласования(СогласующийВход, ЭкземплярПроцессаВход, ЭтапПроцессаВход, КомментарийВход = "", Организация = Неопределено, ЭтоЗамещениеВход = Ложь) Экспорт
	РезультатФункции = Ложь;
	Попытка
		КомментарийДополненный = МодульУправленияПроцессамиУХ.ДополнитьКомментарийЗамещающего(ЭкземплярПроцессаВход, ЭтапПроцессаВход, СогласующийВход, КомментарийВход);
		РезультатФункции = ПоставитьДопВизу(СогласующийВход, ЭкземплярПроцессаВход, ЭтапПроцессаВход, Истина, КомментарийДополненный, Организация, ЭтоЗамещениеВход);
	Исключение
		ТекстСообщения = НСтр("ru = 'Во время утверждения дополнительного соглаования возникли ошибки: %ОписаниеОшибки%'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Ложь;
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции

// Возвращает текстовое представление статуса доп слогласования.
Функция ПредставлениеСтатусаДопСогласования(АрхивнаяЗаписьВход, ВизаВход) Экспорт
	РезультатФункции = "";
	Если НЕ АрхивнаяЗаписьВход Тогда
		РезультатФункции = НСтр("ru = 'На согласовании'");
	Иначе
		Если ВизаВход Тогда
			РезультатФункции = НСтр("ru = 'Согласовано'");
		Иначе
			РезультатФункции = НСтр("ru = 'Отклонено'");
		КонецЕсли;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПредставлениеСтатусаДопСогласования()

// Записывает в справочник СправочникиБД/ДокументыБД для объекта НаименованиеОбъектаВход
// поле разделения по организации ЗначениеРеквизитаОрганизацияВход, поле разделения
// по проекту ЗначениеРеквизитаПроектВход. Когда поле ЭтоСправочникВход - Истина,
// будет поиск по справочникам, иначе по документа. Когда наименования полей пустые,
// их перезапись не будет осуществляться.
Процедура ЗаполнитьРеквизитыСогласованияОбъектаБД(ЭтоСправочникВход, НаименованиеОбъектаВход, ЗначениеРеквизитаОрганизацияВход = "", ЗначениеРеквизитаПроектВход = "") Экспорт
	// Поиск целевого объекта.
	Если ЭтоСправочникВход Тогда
		НайденныйОбъект = Справочники.СправочникиБД.НайтиПоНаименованию(НаименованиеОбъектаВход);
	Иначе	
		НайденныйОбъект = Справочники.ДокументыБД.НайтиПоНаименованию(НаименованиеОбъектаВход);
	КонецЕсли;
	Если НайденныйОбъект <> Неопределено Тогда
		Попытка
			// Запись реквизита разделения по Организации.
			Если (НЕ ЗначениеЗаполнено(НайденныйОбъект.РеквизитРазделенияПоОрганизациям)) И (ЗначениеРеквизитаОрганизацияВход <> "") Тогда
				ОбъектРедактирования = НайденныйОбъект.ПолучитьОбъект();
				ОбъектРедактирования.РеквизитРазделенияПоОрганизациям = ЗначениеРеквизитаОрганизацияВход;
				ОбъектРедактирования.Записать();
			Иначе
				// Уже есть значение, либо его не нужно заполнять.
			КонецЕсли;
			// Запись реквизита разделения по Проекту.
			Если (НЕ ЗначениеЗаполнено(НайденныйОбъект.РеквизитРазделенияПоПроектам)) И (ЗначениеРеквизитаПроектВход <> "") Тогда
				ОбъектРедактирования = НайденныйОбъект.ПолучитьОбъект();
				ОбъектРедактирования.РеквизитРазделенияПоПроектам = ЗначениеРеквизитаПроектВход;
				ОбъектРедактирования.Записать();
			Иначе
				// Уже есть значение, либо его не нужно заполнять.
			КонецЕсли;
		Исключение
			ТекстСообщения = НСтр("ru = 'Во время изменения реквизитов разделения согласования для объекта %ОбъектСогласования% возникли ошибки: %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбъектСогласования%", Строка(НайденныйОбъект));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецПопытки;
	Иначе
		// Объект не найден не осуществляем перезапись.
	КонецЕсли;
КонецПроцедуры

#КонецОбласти