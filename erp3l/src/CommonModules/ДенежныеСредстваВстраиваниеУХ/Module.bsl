////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции для взаимодействия с учетным ядром в части 
// управления денежными средствами 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Устанавливает состоянии документов планирования из процедуры ПриЗаписи документов РКО, ПКО, СБДС и ПБДС
// В параметре всегда приходит объект
Процедура ЗаписатьСостояниеИспользованныхПлатежныхПозиций(Объект, ИспользованныеПозиции) экспорт
	
	Если Объект.Проведен Тогда
		УстановитьСостояниеИсполненияДокументаПланирования(Объект, ИспользованныеПозиции);
	Иначе
		ОтменитьСостояниеНаИсполнении(Объект, ИспользованныеПозиции);
	Конецесли;
	
КонецПроцедуры

Функция ПолучитьТекстЗапроса_ОтменитьСостояниеНаИсполнении() Экспорт
	ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ПлатежноеПоручениеРасшифровкаПлатежаБюджетирование.ДокументПланирования КАК ДокументПланирования,
	               |	ПлатежноеПоручениеРасшифровкаПлатежаБюджетирование.ИдентификаторПозиции КАК ИдентификаторПозиции,
	               |	СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения КАК СостояниеИсполнения,
	               |	ЗаявкиВРеестрахПлатежей.РеестрПлатежей КАК РеестрПлатежей
	               |ИЗ
	               |	Документ.ПлатежноеПоручение.РасшифровкаПлатежа КАК ПлатежноеПоручениеРасшифровкаПлатежаБюджетирование
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполненияДокументовПланированияСрезПоследних
	               |		ПО ПлатежноеПоручениеРасшифровкаПлатежаБюджетирование.ДокументПланирования = СостоянияИсполненияДокументовПланированияСрезПоследних.ДокументПланирования
	               |			И ПлатежноеПоручениеРасшифровкаПлатежаБюджетирование.ИдентификаторПозиции = СостоянияИсполненияДокументовПланированияСрезПоследних.ИдентификаторПозиции
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаявкиВРеестрахПлатежей КАК ЗаявкиВРеестрахПлатежей
	               |		ПО ПлатежноеПоручениеРасшифровкаПлатежаБюджетирование.ДокументПланирования = ЗаявкиВРеестрахПлатежей.ЗаявкаНаОперацию
	               |			И ПлатежноеПоручениеРасшифровкаПлатежаБюджетирование.ИдентификаторПозиции = ЗаявкиВРеестрахПлатежей.ИдентификаторПозиции
	               |ГДЕ
	               |	ПлатежноеПоручениеРасшифровкаПлатежаБюджетирование.Ссылка = &Ссылка
	               |	И ПлатежноеПоручениеРасшифровкаПлатежаБюджетирование.ДокументПланирования ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	               |	И СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.НаИсполнении)";
	Возврат ТекстЗапроса;
КонецФункции

Функция ПолучитьТекстЗапроса_ОтменитьСостояниеНаИсполненииОФД() Экспорт
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств.ДокументПланирования КАК ДокументПланирования
	|ПОМЕСТИТЬ ВТ_ПозицииКИзменению
	|ИЗ
	|	Документ.ОтражениеФактическихДанныхБюджетирования.БюджетДвиженияДенежныхСредств КАК ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств
	|ГДЕ
	|	ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств.Ссылка = &Ссылка
	|				И (ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств.ДокументПланирования ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	|			ИЛИ ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств.ДокументПланирования ССЫЛКА Документ.ОжидаемоеПоступлениеДенежныхСредств)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ПозицииКИзменению.ДокументПланирования КАК ДокументПланирования,
	|	ВТ_ПозицииКИзменению.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения КАК СостояниеИсполнения,
	|	ЗаявкиВРеестрахПлатежей.РеестрПлатежей КАК РеестрПлатежей,
	|	СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.Ссылка КАК ПлатежноеПоручение
	|ИЗ
	|	ВТ_ПозицииКИзменению КАК ВТ_ПозицииКИзменению
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполненияДокументовПланированияСрезПоследних
	|		ПО ВТ_ПозицииКИзменению.ДокументПланирования = СостоянияИсполненияДокументовПланированияСрезПоследних.ДокументПланирования
	|			И ВТ_ПозицииКИзменению.ИдентификаторПозиции = СостоянияИсполненияДокументовПланированияСрезПоследних.ИдентификаторПозиции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаявкиВРеестрахПлатежей КАК ЗаявкиВРеестрахПлатежей
	|		ПО ВТ_ПозицииКИзменению.ДокументПланирования = ЗаявкиВРеестрахПлатежей.ЗаявкаНаОперацию
	|			И ВТ_ПозицииКИзменению.ИдентификаторПозиции = ЗаявкиВРеестрахПлатежей.ИдентификаторПозиции
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа
	|		ПО ВТ_ПозицииКИзменению.ДокументПланирования = СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.ДокументПланирования
	|			И ВТ_ПозицииКИзменению.ИдентификаторПозиции = СписаниеБезналичныхДенежныхСредствРасшифровкаПлатежа.ИдентификаторПозиции
	|ГДЕ
	|	СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.Исполнена)";
	Возврат ТекстЗапроса;
КонецФункции

Процедура ЗаполнитьДополнительныеРеквизитыПлатежногоПорученияПоПрогнозу(Источник, АвтоЗначенияРеквизитов) Экспорт
	
КонецПроцедуры

Функция ПолучитьТекстЗапросаВалютныхОпераций() Экспорт
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка КАК Ссылка,
	               |	""1"" КАК ПризнакПлатежа,
	               |	NULL КАК ВидВалютнойОперации
	               |ИЗ
	               |	Документ.ПоступлениеНаРасчетныйСчет.РасшифровкаПлатежа КАК ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа
	               |ГДЕ
	               |	ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Проведен
	               |	И НАЧАЛОПЕРИОДА(ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.Дата, ДЕНЬ) = &Дата
	               |	И ПоступлениеНаРасчетныйСчетРасшифровкаПлатежа.Ссылка.СчетОрганизации = &СчетОрганизации
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка,
	               |	""2"",
	               |	ЕСТЬNULL(ВЫРАЗИТЬ(СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.ДокументОснование КАК Документ.ПлатежноеПоручение).ВидВалютнойОперации, ЗНАЧЕНИЕ(Справочник.КодыВалютныхОпераций.ПустаяСсылка))
	               |ИЗ
	               |	Документ.СписаниеСРасчетногоСчета.РасшифровкаПлатежа КАК СписаниеСРасчетногоСчетаРасшифровкаПлатежа
	               |ГДЕ
	               |	СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Проведен
	               |	И НАЧАЛОПЕРИОДА(СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.Дата, ДЕНЬ) = &Дата
	               |	И СписаниеСРасчетногоСчетаРасшифровкаПлатежа.Ссылка.СчетОрганизации = &СчетОрганизации
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ПлатежноеПоручение.Ссылка,
	               |	""2"",
	               |	ПлатежноеПоручение.ВидВалютнойОперации
	               |ИЗ
	               |	Документ.ПлатежноеПоручение КАК ПлатежноеПоручение
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияБанковскихДокументов КАК СостоянияБанковскихДокументов
	               |		ПО ПлатежноеПоручение.Ссылка = СостоянияБанковскихДокументов.СсылкаНаОбъект
	               |ГДЕ
	               |	ПлатежноеПоручение.Проведен
	               |	И НАЧАЛОПЕРИОДА(ПлатежноеПоручение.Дата, ДЕНЬ) = &Дата
	               |	И ПлатежноеПоручение.СчетОрганизации = &СчетОрганизации
	               |	И НЕ СостоянияБанковскихДокументов.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияБанковскихДокументов.Оплачено)";
	Возврат ТекстЗапроса;
КонецФункции

Функция ПолучитьПлатежноеПоручениеПоПлатежнойПозиции(ДокументПланированияВход, ИдентификаторПозицииВход) Экспорт
	РезультатФункции = Документы.СписаниеБезналичныхДенежныхСредств.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ДокументРасшифровкаПлатежа.Ссылка,
		|	ДокументРасшифровкаПлатежа.ДокументПланирования,
		|	ДокументРасшифровкаПлатежа.ИдентификаторПозиции
		|ИЗ
		|	Документ.СписаниеБезналичныхДенежныхСредств.РасшифровкаПлатежа КАК ДокументРасшифровкаПлатежа
		|ГДЕ
		|	ДокументРасшифровкаПлатежа.Ссылка.ПометкаУдаления = ЛОЖЬ
		|	И ДокументРасшифровкаПлатежа.ДокументПланирования = &ДокументПланирования
		|	И ДокументРасшифровкаПлатежа.ИдентификаторПозиции = &ИдентификаторПозиции";
	Запрос.УстановитьПараметр("ДокументПланирования", ДокументПланированияВход);
	Запрос.УстановитьПараметр("ИдентификаторПозиции", ИдентификаторПозицииВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		РезультатФункции = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

Функция ОбъектыСПредопределеннымиПравиламиГенерации(УчитыватьНастройкиФункциональныхОпций = Истина) Экспорт
	
	Результат = Новый Массив;
	
	АлгоритмыЗаполнения = ЗаполнениеОФДПовтИсп.АлгоритмыЗаполнения(УчитыватьНастройкиФункциональныхОпций);
	Для Каждого КлючЗначение Из АлгоритмыЗаполнения Цикл
		Результат.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	//Если (НЕ УчитыватьНастройкиФункциональныхОпций) ИЛИ (ПолучитьФункциональнуюОпцию("АвтоматическиФормироватьОФДПоДокументамДДС")) Тогда
	//	
	//	Результат.Добавить("Документ.ПоступлениеБезналичныхДенежныхСредств");
	//	Результат.Добавить("Документ.СписаниеБезналичныхДенежныхСредств");
	//	Результат.Добавить("Документ.ПриходныйКассовыйОрдер");
	//	Результат.Добавить("Документ.РасходныйКассовыйОрдер");
	//КонецЕсли;
	//
	//Если (НЕ УчитыватьНастройкиФункциональныхОпций) ИЛИ (ПолучитьФункциональнуюОпцию("АвтоматическиФормироватьОФДПоДокументамПТУРТУ")) Тогда
	//	Результат.Добавить("Документ.ПриобретениеТоваровУслуг");
	//	Результат.Добавить("Документ.РеализацияТоваровУслуг");
	//	Результат.Добавить("Документ.ВозвратТоваровПоставщику");
	//	Результат.Добавить("Документ.ВозвратТоваровОтКлиента");
	//	
	//КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает банковский счет контрагента по счету организации
//
// Параметры:
//  СчетОрганизации	 - 	СправочникСсылка.БанковскиеСчета - банковский счет организации
// 
// Возвращаемое значение:
//  СправочникСсылка.БанковскиеСчета - банковский счет контрагента, соответствующий указанному счету организации.
//		Если счет не найден, возвращается пустая ссылка.
//
Функция БанковскийСчетКонтрагента(СчетОрганизации) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БанковскиеСчета.Ссылка
	|ИЗ
	|	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчета
	|ГДЕ
	|	БанковскиеСчета.СчетОрганизации = &СчетОрганизации";
	Запрос.УстановитьПараметр("СчетОрганизации", СчетОрганизации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Создаёт банковский счёт-копию для счёта СчетИсточникВход и устанавливает
// новому счёту владельцем элемент НовыйВладелецВход. Возвращает ссылку на созданный
// счёт.
Функция СоздатьКопиюСчетаДляВладельца(СчетИсточникВход, НовыйВладелецВход) Экспорт
	РезультатФункции = Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
	Попытка
		НовыйСчет = Справочники.БанковскиеСчетаКонтрагентов.СоздатьЭлемент();
		СтрокаЗаполнения = "АдресБанка, АдресБанкаДляРасчетов, АдресБанкаДляРасчетовМеждународный, 
		|АдресБанкаМеждународный, БИКБанка, БИКБанкаДляРасчетов, Банк, БанкДляРасчетов,
		|ВалютаДенежныхСредств, ГородБанка, ГородБанкаДляРасчетов, ГородБанкаДляРасчетовМеждународный,
		|ГородБанкаМеждународный, ГосударственныйКонтракт, Закрыт, ИностранныйБанк, КоррСчетБанка, 
		|КоррСчетБанкаДляРасчетов, Наименование, НаименованиеБанка, НаименованиеБанкаДляРасчетов, 
		|НаименованиеБанкаДляРасчетовМеждународное, НаименованиеБанкаМеждународное, НомерСчета, 
		|ОтдельныйСчетГОЗ, ПометкаУдаления, РучноеИзменениеРеквизитовБанка, 
		|РучноеИзменениеРеквизитовБанкаДляРасчетов, СВИФТБанка, СВИФТБанкаДляРасчетов, 
		|СтранаБанка, СтранаБанкаДляРасчетов, СчетВБанкеДляРасчетов, ТекстКорреспондента, 
		|ТекстНазначения, ТелефоныБанка, ТелефоныБанкаДляРасчетов";
		ЗаполнитьЗначенияСвойств(НовыйСчет, СчетИсточникВход, СтрокаЗаполнения);
		НовыйСчет.Владелец = НовыйВладелецВход;		
		НовыйСчет.СчетОрганизации = СчетИсточникВход;
		НовыйСчет.Записать();
		РезультатФункции = НовыйСчет.Ссылка;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось создать аналогичный для %СчетИсточник% банковский счёт для владельца %Владелец% по причине: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%СчетИсточник%", Строка(СчетИсточникВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Владелец%", Строка(НовыйВладелецВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции =  Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка();
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции


Функция ТекстЗапросаТаблицыЗаявокНаРазмещение(ОрганизацияЗаполнена, АвтоматическаяГенерация) Экспорт
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	БанковскиеСчета.Ссылка КАК Ссылка,
	        |	БанковскиеСчета.ЛимитОстаткаМакс КАК ЛимитОстаткаМакс
	        |ПОМЕСТИТЬ ВТ_БанковскиеСчета
	        |ИЗ
	        |	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	        |ГДЕ
	        |	БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации
	        |	И БанковскиеСчета.ИнструментРазмещенияСвободныхОстатков <> ЗНАЧЕНИЕ(Перечисление.ИнструментыРазмещенияОстатков.НеИспользовать)
	        |	И &ОтборПоОрганизации
	        |	И &УсловиеАвтоматическойГенерации
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	ДенежныеСредстваОстатки.БанковскийСчет КАК БанковскийСчетКасса,
	        |	ДенежныеСредстваОстатки.СуммаОстаток КАК СуммаОстаток
	        |ПОМЕСТИТЬ ВТ_ТаблицаОстатков
	        |ИЗ
	        |	РегистрНакопления.ДенежныеСредстваБезналичные.Остатки(
	        |			&ДатаОстатков,
	        |			БанковскийСчет В
	        |				(ВЫБРАТЬ
	        |					ВТ_БанковскиеСчета.Ссылка
	        |				ИЗ
	        |					ВТ_БанковскиеСчета КАК ВТ_БанковскиеСчета)) КАК ДенежныеСредстваОстатки
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	РазмещениеЗаявок.БанковскийСчетКасса,
	        |	ВЫБОР
	        |		КОГДА РазмещениеЗаявок.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
	        |			ТОГДА РазмещениеЗаявок.Сумма
	        |		ИНАЧЕ -РазмещениеЗаявок.Сумма
	        |	КОНЕЦ
	        |ИЗ
	        |	РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполненияДокументовПланированияСрезПоследних
	        |		ПО РазмещениеЗаявок.ИдентификаторПозиции = СостоянияИсполненияДокументовПланированияСрезПоследних.ИдентификаторПозиции
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_БанковскиеСчета КАК ВТ_БанковскиеСчета
	        |		ПО РазмещениеЗаявок.БанковскийСчетКасса = ВТ_БанковскиеСчета.Ссылка
	        |ГДЕ
	        |	РазмещениеЗаявок.ДатаИсполнения <= &ДатаОстатков
	        |	И НЕ ЕСТЬNULL(СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения, ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.НеОбработана)) В (ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.Отложена), ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.Исполнена))
	        |	И РазмещениеЗаявок.ЗаявкаНаОперацию.Проведен
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	ВТ_БанковскиеСчета.Ссылка,
	        |	-ВТ_БанковскиеСчета.ЛимитОстаткаМакс
	        |ИЗ
	        |	ВТ_БанковскиеСчета КАК ВТ_БанковскиеСчета
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ_ТаблицаОстатков.БанковскийСчетКасса КАК БанковскийСчетКасса,
	        |	СУММА(ВТ_ТаблицаОстатков.СуммаОстаток) КАК СуммаОстаток
	        |ПОМЕСТИТЬ ВТ_СуммыПеревода
	        |ИЗ
	        |	ВТ_ТаблицаОстатков КАК ВТ_ТаблицаОстатков
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВТ_ТаблицаОстатков.БанковскийСчетКасса
	        |
	        |ИМЕЮЩИЕ
	        |	СУММА(ВТ_ТаблицаОстатков.СуммаОстаток) > 0
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	ВТ_СуммыПеревода.БанковскийСчетКасса КАК БанковскийСчетКасса,
	        |	ВТ_СуммыПеревода.СуммаОстаток КАК СуммаОстаток,
	        |	МАКСИМУМ(ЕСТЬNULL(ПулыЛиквидностиДоговорыОрганизаций.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))) КАК Договор
	        |ПОМЕСТИТЬ ВТ_ДоговорыПулинга
	        |ИЗ
	        |	ВТ_СуммыПеревода КАК ВТ_СуммыПеревода
	        |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПулыЛиквидности.УчастникиПула КАК ПулыЛиквидностиДоговорыОрганизаций
	        |		ПО ВТ_СуммыПеревода.БанковскийСчетКасса.Владелец = ПулыЛиквидностиДоговорыОрганизаций.Организация
	        |			И ВТ_СуммыПеревода.БанковскийСчетКасса.ПулЛиквидности = ПулыЛиквидностиДоговорыОрганизаций.Ссылка
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВТ_СуммыПеревода.БанковскийСчетКасса,
	        |	ВТ_СуммыПеревода.СуммаОстаток
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	        |	ВТ_ДоговорыПулинга.БанковскийСчетКасса КАК БанковскийСчетКасса,
	        |	ВТ_ДоговорыПулинга.БанковскийСчетКасса.Владелец КАК Организация,
	        |	ВТ_ДоговорыПулинга.БанковскийСчетКасса.ВалютаДенежныхСредств КАК ВалютаДокумента,
	        |	ВТ_ДоговорыПулинга.СуммаОстаток КАК СуммаДокумента,
	        |	ЕСТЬNULL(ВТ_ДоговорыПулинга.Договор.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
	        |	ВТ_ДоговорыПулинга.Договор КАК ДоговорКонтрагента,
	        |	ЕСТЬNULL(ВТ_ДоговорыПулинга.Договор.БанковскийСчетКонтрагента, ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаКонтрагентов.ПустаяСсылка)) КАК СчетКонтрагента,
	        |	ИСТИНА КАК Формировать,
	        |	ЕСТЬNULL(ВТ_ДоговорыПулинга.Договор.ОсновнойЦФО, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)) КАК ЦФО,
	        |	ЕСТЬNULL(ВТ_ДоговорыПулинга.БанковскийСчетКасса.ПулЛиквидности.СтатьяДДС, ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)) КАК СтатьяДвиженияДенежныхСредств,
	        |	ЕСТЬNULL(ВТ_ДоговорыПулинга.БанковскийСчетКасса.ПулЛиквидности, ЗНАЧЕНИЕ(Справочник.ПулыЛиквидности.ПустаяСсылка)) КАК ПулЛиквидности,
	        |	ЕСТЬNULL(ВТ_ДоговорыПулинга.БанковскийСчетКасса.ПулЛиквидности.МастерСчет, ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)) КАК МастерСчет
	        |ИЗ
	        |	ВТ_ДоговорыПулинга КАК ВТ_ДоговорыПулинга
	        |ГДЕ
	        |	ВТ_ДоговорыПулинга.БанковскийСчетКасса.ИнструментРазмещенияСвободныхОстатков = ЗНАЧЕНИЕ(Перечисление.ИнструментыРазмещенияОстатков.КэшПулинг)
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	ВТ_СуммыПеревода.БанковскийСчетКасса,
	        |	ВТ_СуммыПеревода.БанковскийСчетКасса.Владелец,
	        |	ВТ_СуммыПеревода.БанковскийСчетКасса.ВалютаДенежныхСредств,
	        |	ВТ_СуммыПеревода.СуммаОстаток * БанковскиеСчетаУправлениеСвободнымиОстатками.ДоляПеречисления / 100,
	        |	БанковскиеСчетаУправлениеСвободнымиОстатками.Контрагент,
	        |	БанковскиеСчетаУправлениеСвободнымиОстатками.ДоговорКонтрагента,
	        |	БанковскиеСчетаУправлениеСвободнымиОстатками.СчетКонтрагента,
	        |	ИСТИНА,
	        |	БанковскиеСчетаУправлениеСвободнымиОстатками.ДоговорКонтрагента.ОсновнойЦФО,
	        |	ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка),
	        |	ВТ_СуммыПеревода.БанковскийСчетКасса.ПулЛиквидности,
	        |	ВТ_СуммыПеревода.БанковскийСчетКасса.ПулЛиквидности.МастерСчет
	        |ИЗ
	        |	ВТ_СуммыПеревода КАК ВТ_СуммыПеревода
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаОрганизаций.УправлениеСвободнымиОстатками КАК БанковскиеСчетаУправлениеСвободнымиОстатками
	        |		ПО ВТ_СуммыПеревода.БанковскийСчетКасса = БанковскиеСчетаУправлениеСвободнымиОстатками.Ссылка";
	
	Если ОрганизацияЗаполнена Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ОтборПоОрганизации", "БанковскиеСчета.Владелец = &Организация");
	КонецЕсли;
	
	Если АвтоматическаяГенерация Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеАвтоматическойГенерации", "БанковскиеСчета.АвтоматическиПереводитьИзлишки");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
КонецФункции

Функция ПолучитьБанковскийСчетКассуПоУмолчанию(Владелец, Валюта, ПлатежныйИнструмент) Экспорт
	
	Если ПлатежныйИнструмент = Перечисления.ФормыОплаты.Безналичная Тогда
		ПустоеЗначение = ДенежныеСредстваВстраиваниеУХКлиентСервер.ПолучитьПустойБанковскийСчет();
	ИначеЕсли ПлатежныйИнструмент = Перечисления.ФормыОплаты.Наличная Тогда
		ПустоеЗначение = ДенежныеСредстваВстраиваниеУХКлиентСервер.ПолучитьПустуюКассу();
	Иначе
		ПустоеЗначение = Неопределено;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	БанковскиеСчетаПоУмолчанию.БанковскийСчет
	|ИЗ
	|	РегистрСведений.БанковскиеСчетаПоУмолчанию КАК БанковскиеСчетаПоУмолчанию
	|ГДЕ
	|	БанковскиеСчетаПоУмолчанию.Владелец = &Владелец
	|	И БанковскиеСчетаПоУмолчанию.Валюта = &Валюта
	|	И БанковскиеСчетаПоУмолчанию.ПлатежныйИнструмент = &ПлатежныйИнструмент" ;
	
	Запрос.УстановитьПараметр("Владелец", Владелец);
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("ПлатежныйИнструмент", ПлатежныйИнструмент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.БанковскийСчет;
	Иначе
		Возврат ПустоеЗначение;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСписокСчетовУчастниковПулаЛиквидности(УчастникиПула, Знач ОбъектСсылка, Знач Валюта) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТЗ_ДоговорыОрганизаций.Организация КАК Справочник.Организации) КАК Организация,
	|	ВЫРАЗИТЬ(ТЗ_ДоговорыОрганизаций.Договор КАК Справочник.ДоговорыКонтрагентов) КАК Договор
	|ПОМЕСТИТЬ ТЗ_ДоговорыОрганизаций
	|ИЗ
	|	&ТЗ_ДоговорыОрганизаций КАК ТЗ_ДоговорыОрганизаций
	|ГДЕ
	|	ТЗ_ДоговорыОрганизаций.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	БанковскиеСчета.Ссылка КАК СчетОрганизации,
	|	БанковскиеСчета.Владелец КАК Организация,
	|	БанковскиеСчета.ПулЛиквидности = &Ссылка
	|		И БанковскиеСчета.ПулЛиквидности <> ЗНАЧЕНИЕ(Справочник.ПулыЛиквидности.ПустаяСсылка) КАК ВходитВПул,
	|	БанковскиеСчета.АвтоматическиПереводитьИзлишки КАК ПереводитьАвтоматически,
	|	БанковскиеСчета.ЛимитОстаткаМакс КАК МаксимальныйОстаток,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ БанковскиеСчетаКонтрагентов.Ссылка) <> 1 КАК ЕстьОшибкиСчетОрганизации
	|ПОМЕСТИТЬ ВТ_БанковскиеСчета
	|ИЗ
	|	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
	|		ПО БанковскиеСчета.Ссылка = БанковскиеСчетаКонтрагентов.СчетОрганизации
	|ГДЕ
	|	НЕ БанковскиеСчета.ПометкаУдаления
	|	И БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации
	|	И БанковскиеСчета.ВалютаДенежныхСредств = &ВалютаДенежныхСредств
	|
	|СГРУППИРОВАТЬ ПО
	|	БанковскиеСчета.Ссылка,
	|	БанковскиеСчета.Владелец,
	|	БанковскиеСчета.АвтоматическиПереводитьИзлишки,
	|	БанковскиеСчета.ЛимитОстаткаМакс,
	|	БанковскиеСчета.ПулЛиквидности = &Ссылка
	|		И БанковскиеСчета.ПулЛиквидности <> ЗНАЧЕНИЕ(Справочник.ПулыЛиквидности.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация,
	|	ТЗ_ДоговорыОрганизаций.Договор,
	|	НЕ ТЗ_ДоговорыОрганизаций.Организация ЕСТЬ NULL КАК ВходитВПул,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Контрагенты.Ссылка) <> 1 КАК ЕстьОшибкиОрганизация,
	|	ЕСТЬNULL(ТЗ_ДоговорыОрганизаций.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|		И КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СвязанныеДоговоры.СвязанныйДоговор) <> 1 КАК ЕстьОшибкиДоговор,
	|	КОЛИЧЕСТВО(ВТ_БанковскиеСчета.СчетОрганизации) КАК КоличествоСчетов
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
	|		ПО Организации.Ссылка = Контрагенты.ОрганизационнаяЕдиница
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТЗ_ДоговорыОрганизаций КАК ТЗ_ДоговорыОрганизаций
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязанныеДоговоры КАК СвязанныеДоговоры
	|			ПО ТЗ_ДоговорыОрганизаций.Договор = СвязанныеДоговоры.БазовыйДоговор
	|				И (СвязанныеДоговоры.ВидСвязи = ЗНАЧЕНИЕ(Справочник.ВидыСвязейОбъектов.ВнутригрупповойДоговор))
	|		ПО (ТЗ_ДоговорыОрганизаций.Организация = Организации.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_БанковскиеСчета КАК ВТ_БанковскиеСчета
	|		ПО (ВТ_БанковскиеСчета.Организация = Организации.Ссылка)
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления
	|	И (Организации.ИспользоватьВРегламентированномУчете
	|			ИЛИ Организации.ИностранныйНалоговыйРезидент)
	|
	|СГРУППИРОВАТЬ ПО
	|	Организации.Ссылка,
	|	ТЗ_ДоговорыОрганизаций.Договор,
	|	НЕ ТЗ_ДоговорыОрганизаций.Организация ЕСТЬ NULL
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ВТ_БанковскиеСчета.СчетОрганизации) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_БанковскиеСчета.СчетОрганизации,
	|	ВТ_БанковскиеСчета.Организация,
	|	ВТ_БанковскиеСчета.ВходитВПул,
	|	ВТ_БанковскиеСчета.ПереводитьАвтоматически,
	|	ВТ_БанковскиеСчета.МаксимальныйОстаток,
	|	ВТ_БанковскиеСчета.ЕстьОшибкиСчетОрганизации
	|ИЗ
	|	ВТ_БанковскиеСчета КАК ВТ_БанковскиеСчета";
	
	Запрос.УстановитьПараметр("ТЗ_ДоговорыОрганизаций", УчастникиПула);
	Запрос.УстановитьПараметр("Ссылка", ОбъектСсылка);
	Запрос.УстановитьПараметр("ВалютаДенежныхСредств", Валюта);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ИндексТаблицыСчета = РезультатЗапроса.Количество() - 1;
	ИндексТаблицыУчастники = РезультатЗапроса.Количество() - 2;
	
	Выгрузка = РезультатЗапроса[ИндексТаблицыУчастники].Выгрузить();
	Для Каждого ТекВыгрузка Из Выгрузка Цикл
		НоваяСтрока = УчастникиПула.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекВыгрузка);
	КонецЦикла;	

	Возврат РезультатЗапроса[ИндексТаблицыСчета].Выгрузить();
КонецФункции

Процедура ЗаполнитьЗаявкуНаРасходованиеПоПервичномуДокументу(Знач ДанныеЗаполнения, Объект, ДополнительныеСвойства) Экспорт
	
	
КонецПроцедуры

Процедура ЗаполнитьОжидаемоеПоступлениеДенежныхСредствПоПервичномуДокументу(Знач ДанныеЗаполнения, Объект, ДополнительныеСвойства) Экспорт
	
КонецПроцедуры

Процедура ЗаполнитьЗаявкаНаРасходПоПервичномуДокументу(Знач ДанныеЗаполнения, Объект, ДополнительныеСвойства) Экспорт
	
КонецПроцедуры

Процедура ЗаполнитьПланируемыйДоходПоПервичномуДокументу(Знач ДанныеЗаполнения, Объект, ДополнительныеСвойства) Экспорт
	
КонецПроцедуры

Функция ТекстЗапросаПодъемаДанныхПлатежныйКалендарьУХ() Экспорт
	
	Возврат "ВЫБРАТЬ
	        |	РазмещениеЗаявок.ЗаявкаНаОперацию КАК Инструмент,
	        |	РазмещениеЗаявок.БанковскийСчетКасса КАК БанковскийСчет,
	        |	РазмещениеЗаявок.ВалютаОплаты КАК Валюта,
	        |	РазмещениеЗаявок.БанковскийСчетКасса.Банк КАК Банк,
	        |	ВЫБОР
	        |		КОГДА РазмещениеЗаявок.ДатаИсполнения < &НачалоПериодаОтбора
	        |			ТОГДА ДОБАВИТЬКДАТЕ(&НачалоПериодаОтбора, ДЕНЬ, -1)
	        |		ИНАЧЕ РазмещениеЗаявок.ДатаИсполнения
	        |	КОНЕЦ КАК Дата,
	        |	ВЫБОР
	        |		КОГДА РазмещениеЗаявок.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
	        |			ТОГДА РазмещениеЗаявок.Сумма
	        |		ИНАЧЕ -РазмещениеЗаявок.Сумма
	        |	КОНЕЦ КАК Сумма,
	        |	РазмещениеЗаявок.Организация КАК Организация,
	        |	РазмещениеЗаявок.БанковскийСчетКасса.ПулЛиквидности КАК ПулЛиквидности,
	        |	РазмещениеЗаявок.Приоритет КАК Приоритет,
	        |	ВЫБОР
	        |		КОГДА РазмещениеЗаявок.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
	        |			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыПлатежногоКалендаря.ПоступлениеСредств)
	        |		КОГДА РазмещениеЗаявок.ЗаявкаНаОперацию.БезакцептноеСписание
	        |				ИЛИ ЕСТЬNULL(СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения, ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.НеОбработана)) <> ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.НеОбработана)
	        |			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыПлатежногоКалендаря.НеуправляемоеСписаниеСредств)
	        |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыПлатежногоКалендаря.СписаниеСредств)
	        |	КОНЕЦ КАК РазделПлатежногоКалендаря,
	        |	РазмещениеЗаявок.ЗаявкаНаОперацию.КрайняяДата КАК КрайняяДата,
	        |	РазмещениеЗаявок.ЗаявкаНаОперацию.ФиксированныйСчетОрганизации КАК ФиксированныйБанковскийСчет,
	        |	РазмещениеЗаявок.ИдентификаторПозиции КАК ИдентификаторЗаписи,
	        |	ВЫБОР
	        |		КОГДА РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта = ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Утверждена)
	        |			ТОГДА ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхПлатежногоКалендаря.ЗаявкиУтвержденные)
	        |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхПлатежногоКалендаря.ЗаявкиНеутвержденные)
	        |	КОНЕЦ КАК ИсточникДанных,
	        |	СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения КАК СостояниеИсполнения
	        |ПОМЕСТИТЬ ВТ_ВходныеДанные
	        |ИЗ
	        |	РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполненияДокументовПланированияСрезПоследних
	        |		ПО РазмещениеЗаявок.ИдентификаторПозиции = СостоянияИсполненияДокументовПланированияСрезПоследних.ИдентификаторПозиции
	        |			И РазмещениеЗаявок.ЗаявкаНаОперацию = СостоянияИсполненияДокументовПланированияСрезПоследних.ДокументПланирования
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних КАК РегистрСостоянийОбъектовСрезПоследних
	        |		ПО (РегистрСостоянийОбъектовСрезПоследних.Объект = РазмещениеЗаявок.ЗаявкаНаОперацию)
	        |ГДЕ
	        |	РазмещениеЗаявок.ЗаявкаНаОперацию.Проведен
			|	И РазмещениеЗаявок.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
	        |	И РазмещениеЗаявок.ДатаИсполнения МЕЖДУ ВЫБОР
	        |			КОГДА РазмещениеЗаявок.ЗаявкаНаОперацию ССЫЛКА Документ.ОжидаемоеПоступлениеДенежныхСредств
	        |				ТОГДА &НачалоПериодаОтбора
	        |			ИНАЧЕ ДОБАВИТЬКДАТЕ(&НачалоПериодаОтбора, ДЕНЬ, -&ГлубинаОтображенияПросроченныхПлатежей)
	        |		КОНЕЦ И &ОкончаниеПериодаОтбора
	        |	И РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта В (ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Утверждена), ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.НаУтверждении))
	        |	И НЕ ЕСТЬNULL(СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения, ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.НеОбработана)) В (ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.Отложена), ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.Исполнена))
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	NULL,
	        |	ЕСТЬNULL(БанковскиеСчета.Ссылка, ДенежныеСредстваОстатки.БанковскийСчет),
	        |	ЕСТЬNULL(БанковскиеСчета.ВалютаДенежныхСредств, ДенежныеСредстваОстатки.БанковскийСчет.ВалютаДенежныхСредств),
	        |	ЕСТЬNULL(БанковскиеСчета.Банк, ДенежныеСредстваОстатки.БанковскийСчет.Банк),
	        |	ДОБАВИТЬКДАТЕ(&НачалоПериодаОтбора, ДЕНЬ, -1),
	        |	ЕСТЬNULL(ДенежныеСредстваОстатки.СуммаОстаток, 0),
	        |	ЕСТЬNULL(БанковскиеСчета.Владелец, ДенежныеСредстваОстатки.Организация),
	        |	ЕСТЬNULL(БанковскиеСчета.ПулЛиквидности, ДенежныеСредстваОстатки.БанковскийСчет.ПулЛиквидности),
	        |	NULL,
	        |	ЗНАЧЕНИЕ(Перечисление.РазделыПлатежногоКалендаря.ВходящийОстаток),
	        |	ДАТАВРЕМЯ(1, 1, 1),
	        |	NULL,
	        |	NULL,
	        |	NULL,
	        |	NULL
	        |ИЗ
	        |	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваБезналичные.Остатки(КОНЕЦПЕРИОДА(&НачалоПериодаОтбора, ДЕНЬ), ) КАК ДенежныеСредстваОстатки
	        |		ПО (ДенежныеСредстваОстатки.БанковскийСчет = БанковскиеСчета.Ссылка)
	        |ГДЕ
	        |	БанковскиеСчета.Владелец ССЫЛКА Справочник.Организации
	        |	И НЕ БанковскиеСчета.ПометкаУдаления
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	""Операционные планы"",
	        |	ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка),
	        |	ОперативныйПланПоБюджетамОбороты.Валюта,
	        |	ЗНАЧЕНИЕ(Справочник.КлассификаторБанков.ПустаяСсылка),
	        |	ВЫБОР
	        |		КОГДА ОперативныйПланПоБюджетамОбороты.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
	        |			ТОГДА ВЫБОР
	        |					КОГДА ОперативныйПланПоБюджетамОбороты.ПериодОтчета.ДатаНачала < &ДатаТактическогоПланирования
	        |						ТОГДА &ДатаТактическогоПланирования
	        |					ИНАЧЕ ОперативныйПланПоБюджетамОбороты.ПериодОтчета.ДатаНачала
	        |				КОНЕЦ
	        |		ИНАЧЕ ОперативныйПланПоБюджетамОбороты.ПериодОтчета.ДатаОкончания
	        |	КОНЕЦ,
	        |	ВЫБОР
	        |		КОГДА ОперативныйПланПоБюджетамОбороты.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
	        |			ТОГДА ОперативныйПланПоБюджетамОбороты.ЗарезервированоОборот - ОперативныйПланПоБюджетамОбороты.ЗаявленоОборот
	        |		ИНАЧЕ -(ОперативныйПланПоБюджетамОбороты.ЗарезервированоОборот - ОперативныйПланПоБюджетамОбороты.ЗаявленоОборот)
	        |	КОНЕЦ,
	        |	ОперативныйПланПоБюджетамОбороты.Организация,
	        |	ЗНАЧЕНИЕ(Справочник.ПулыЛиквидности.ПустаяСсылка),
	        |	NULL,
	        |	ВЫБОР
	        |		КОГДА ОперативныйПланПоБюджетамОбороты.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
	        |			ТОГДА ЗНАЧЕНИЕ(Перечисление.РазделыПлатежногоКалендаря.НеуправляемоеПоступлениеСредств)
	        |		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.РазделыПлатежногоКалендаря.НеуправляемоеСписаниеСредств)
	        |	КОНЕЦ,
	        |	NULL,
	        |	NULL,
	        |	NULL,
			|	ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхПлатежногоКалендаря.РезервУтвержденный),
	        |	NULL
	        |ИЗ
	        |	РегистрНакопления.ОперативныйПланПоБюджетам.Обороты(
	        |			,
	        |			,
	        |			Период,
	        |			Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств)
	        |				И ДокументПланирования ССЫЛКА Документ.ОперативныйПлан
	        |				И ПериодОтчета.ДатаНачала <= &ОкончаниеПериодаОтбора
	        |				И ПериодОтчета.ДатаОкончания >= &ДатаТактическогоПланирования) КАК ОперативныйПланПоБюджетамОбороты
	        |ГДЕ
	        |	ОперативныйПланПоБюджетамОбороты.ЗарезервированоОборот - ОперативныйПланПоБюджетамОбороты.ЗаявленоОборот > 0
	        |
	        |ОБЪЕДИНИТЬ ВСЕ
	        |
	        |ВЫБРАТЬ
	        |	ВТ_ДанныеБюджетирования.Инструмент,
	        |	ВТ_ДанныеБюджетирования.БанковскийСчет,
	        |	ВТ_ДанныеБюджетирования.Валюта,
	        |	ВТ_ДанныеБюджетирования.Банк,
	        |	ВТ_ДанныеБюджетирования.Дата,
	        |	ВЫБОР
	        |		КОГДА ВТ_ДанныеБюджетирования.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
	        |			ТОГДА ВТ_ДанныеБюджетирования.Сумма
	        |		ИНАЧЕ -ВТ_ДанныеБюджетирования.Сумма
	        |	КОНЕЦ,
	        |	ВТ_ДанныеБюджетирования.Организация,
	        |	ВТ_ДанныеБюджетирования.ПулЛиквидности,
	        |	NULL,
	        |	ВТ_ДанныеБюджетирования.РазделПлатежногоКалендаря,
	        |	NULL,
	        |	NULL,
	        |	NULL,
	        |	ВТ_ДанныеБюджетирования.ИсточникДанных,
	        |	NULL
	        |ИЗ
	        |	ВТ_ДанныеБюджетирования КАК ВТ_ДанныеБюджетирования
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ЗНАЧЕНИЕ(Справочник.СохраненныеВерсииПлатежногоКалендаря.ПустаяСсылка) КАК ВерсияПлатежногоКалендаря,
	        |	&Пользователь КАК Пользователь,
	        |	ИСТИНА КАК Активна,
	        |	ВТ_ВходныеДанные.Инструмент КАК Инструмент,
	        |	ВТ_ВходныеДанные.БанковскийСчет КАК БанковскийСчет,
	        |	ВТ_ВходныеДанные.Валюта КАК Валюта,
	        |	ВТ_ВходныеДанные.Банк КАК Банк,
	        |	ВТ_ВходныеДанные.Дата КАК Дата,
	        |	СУММА(ВТ_ВходныеДанные.Сумма) КАК Сумма,
	        |	ВТ_ВходныеДанные.Организация КАК Организация,
	        |	ВТ_ВходныеДанные.Приоритет КАК Приоритет,
	        |	ВТ_ВходныеДанные.РазделПлатежногоКалендаря КАК РазделПлатежногоКалендаря,
	        |	ВТ_ВходныеДанные.КрайняяДата КАК КрайняяДата,
	        |	ВТ_ВходныеДанные.ИсточникДанных КАК ИсточникДанных,
	        |	ВТ_ВходныеДанные.ИдентификаторЗаписи КАК ИдентификаторЗаписи,
	        |	ВТ_ВходныеДанные.ФиксированныйБанковскийСчет КАК ФиксированныйБанковскийСчет,
	        |	ВТ_ВходныеДанные.ПулЛиквидности КАК ПулЛиквидности
	        |ИЗ
	        |	ВТ_ВходныеДанные КАК ВТ_ВходныеДанные
	        |
	        |СГРУППИРОВАТЬ ПО
	        |	ВТ_ВходныеДанные.Инструмент,
	        |	ВТ_ВходныеДанные.БанковскийСчет,
	        |	ВТ_ВходныеДанные.Валюта,
	        |	ВТ_ВходныеДанные.Банк,
	        |	ВТ_ВходныеДанные.Дата,
	        |	ВТ_ВходныеДанные.Организация,
	        |	ВТ_ВходныеДанные.Приоритет,
	        |	ВТ_ВходныеДанные.РазделПлатежногоКалендаря,
	        |	ВТ_ВходныеДанные.КрайняяДата,
	        |	ВТ_ВходныеДанные.ИсточникДанных,
	        |	ВТ_ВходныеДанные.ИдентификаторЗаписи,
	        |	ВТ_ВходныеДанные.ФиксированныйБанковскийСчет,
	        |	ВТ_ВходныеДанные.ПулЛиквидности";
	
КонецФункции

Функция ПолучитьТекстЗапросаПлановыхКурсовПлатежногоКалендаря(ПериодичностьОперативногоПланирования) Экспорт
	
	ТекстЗапроса = 
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
	        |	ВЫБОР
	        |		КОГДА ДанныеПроизводственногоКалендаря.Дата > &ГоризонтТактическогоПланирования
	        |				И &ГоризонтТактическогоПланирования <> ДАТАВРЕМЯ(1, 1, 1)
	        |			ТОГДА НАЧАЛОПЕРИОДА(ДанныеПроизводственногоКалендаря.Дата, МЕСЯЦ)
	        |		КОГДА ДанныеПроизводственногоКалендаря.Дата > &ГоризонтОперативногоПланирования
	        |				И &ГоризонтОперативногоПланирования <> ДАТАВРЕМЯ(1, 1, 1)
	        |			ТОГДА ДОБАВИТЬКДАТЕ(&ГоризонтОперативногоПланирования, ДЕНЬ, 1)
	        |		ИНАЧЕ ДанныеПроизводственногоКалендаря.Дата
	        |	КОНЕЦ КАК ДатаКалендарь
	        |ПОМЕСТИТЬ ВТ_ДатыЗаПериод
	        |ИЗ
	        |	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
	        |ГДЕ
	        |	ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь = &ПроизводственныйКалендарь
	        |	И ДанныеПроизводственногоКалендаря.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоПериодаОтбора, ДЕНЬ) И &ОкончаниеПериодаОтбора
	        |	И ДанныеПроизводственногоКалендаря.ВидДня В (ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Рабочий), ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный))
	        |
	        |ОБЪЕДИНИТЬ
	        |
	        |ВЫБРАТЬ
	        |	НАЧАЛОПЕРИОДА(&НачалоПериодаОтбора, ДЕНЬ)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	        |	БанковскиеСчета.ВалютаДенежныхСредств КАК ВалютаДенежныхСредств
	        |ПОМЕСТИТЬ ВТ_ВалютыСчетов
	        |ИЗ
	        |	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчета
	        |
	        |ОБЪЕДИНИТЬ
	        |
	        |ВЫБРАТЬ
	        |	&ВалютаОтображения
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	КурсыВалют.Период КАК Период,
	        |	КурсыВалют.Валюта КАК Валюта,
	        |	КурсыВалют.Курс КАК Курс,
	        |	КурсыВалют.Кратность КАК Кратность
	        |ПОМЕСТИТЬ ВТ_КурсыПериода
	        |ИЗ
	        |	РегистрСведений.КурсыВалют КАК КурсыВалют
	        |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВалютыСчетов КАК ВТ_ВалютыСчетов
	        |		ПО КурсыВалют.Валюта = ВТ_ВалютыСчетов.ВалютаДенежныхСредств
	        |ГДЕ
	        |	КурсыВалют.Период МЕЖДУ &НачалоПериодаОтбора И &ОкончаниеПериодаОтбора
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ЕСТЬNULL(ВТ_КурсыПериода.Период, &НачалоПериодаОтбора) КАК Период,
	        |	ЕСТЬNULL(ВТ_КурсыПериода.Валюта, КурсыВалютСрезПоследних.Валюта) КАК Валюта,
	        |	ЕСТЬNULL(ВТ_КурсыПериода.Курс, КурсыВалютСрезПоследних.Курс) КАК Курс,
	        |	ЕСТЬNULL(ВТ_КурсыПериода.Кратность, КурсыВалютСрезПоследних.Кратность) КАК Кратность
	        |ПОМЕСТИТЬ ВТ_ЗаданныеКурсы
	        |ИЗ
	        |	ВТ_КурсыПериода КАК ВТ_КурсыПериода
	        |		ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&НачалоПериодаОтбора, ) КАК КурсыВалютСрезПоследних
	        |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ВалютыСчетов КАК ВТ_ВалютыСчетов
	        |			ПО КурсыВалютСрезПоследних.Валюта = ВТ_ВалютыСчетов.ВалютаДенежныхСредств
	        |		ПО ВТ_КурсыПериода.Валюта = КурсыВалютСрезПоследних.Валюта
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ_ДатыЗаПериод.ДатаКалендарь КАК Период,
	        |	ЕСТЬNULL(ВТ_ЗаданныеКурсы.Валюта, &ПустаяВалюта) КАК Валюта,
	        |	ЕСТЬNULL(ВТ_ЗаданныеКурсы.Курс, 0) КАК Курс,
	        |	ЕСТЬNULL(ВТ_ЗаданныеКурсы.Кратность, 1) КАК Кратность
	        |ПОМЕСТИТЬ ВТ_ЗагруженныеКурсы
	        |ИЗ
	        |	ВТ_ДатыЗаПериод КАК ВТ_ДатыЗаПериод
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗаданныеКурсы КАК ВТ_ЗаданныеКурсы
	        |		ПО (ВТ_ЗаданныеКурсы.Период = ВТ_ДатыЗаПериод.ДатаКалендарь)
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ТабПлановыеКурсы.Период КАК Период,
	        |	ТабПлановыеКурсы.Валюта КАК Валюта,
	        |	ТабПлановыеКурсы.Курс КАК Курс,
	        |	ТабПлановыеКурсы.Кратность КАК Кратность
	        |ПОМЕСТИТЬ ВТ_ПлановыеКурсы
	        |ИЗ
	        |	&ТабПлановыеКурсы КАК ТабПлановыеКурсы
	        |;
	        |
	        |////////////////////////////////////////////////////////////////////////////////
	        |ВЫБРАТЬ
	        |	ВТ_ЗагруженныеКурсы.Период КАК Период,
	        |	ВТ_ЗагруженныеКурсы.Валюта КАК Валюта,
	        |	ЕСТЬNULL(ВТ_ПлановыеКурсы.Курс, ВТ_ЗагруженныеКурсы.Курс) КАК Курс,
	        |	ЕСТЬNULL(ВТ_ПлановыеКурсы.Кратность, ВТ_ЗагруженныеКурсы.Кратность) КАК Кратность
	        |ИЗ
	        |	ВТ_ЗагруженныеКурсы КАК ВТ_ЗагруженныеКурсы
	        |		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПлановыеКурсы КАК ВТ_ПлановыеКурсы
	        |		ПО ВТ_ЗагруженныеКурсы.Период = ВТ_ПлановыеКурсы.Период
	        |			И ВТ_ЗагруженныеКурсы.Валюта = ВТ_ПлановыеКурсы.Валюта";
	
	
	СтрПериодичность = Отчеты.ПлатежныйКалендарьУХ.ПериодичностьВЗапросе(ПериодичностьОперативногоПланирования, "МЕСЯЦ");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "МЕСЯЦ", СтрПериодичность);
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Определяет наличие расшифровки платежа в документе ДДС ОбъектВход.
Функция ЕстьРасшифровкаПлатежаДокументаДДС(ОбъектВход) Экспорт
	РезультатФункции = Ложь;			// Т.к. везде берём строчку из расшифровки.
	Возврат РезультатФункции;
КонецФункции		// ЕстьРасшифровкаПлатежаДокументаДДС()

// Используется: спр.ВидыОперацийБюджетирование
Процедура НастроитьЭлементыВидовОперацийДвиженияДС(ЭлементБезНал, ЭлементНал, ПриходРасход) экспорт
	
	
	// Безнал
	ЭлементБезнал.РежимВыбораИзСписка = Истина;
	ЭлементБезнал.СписокВыбора.Очистить();
	
	// Элемент нал не используется
	ЭлементНал.Видимость = Ложь;
	ЭлементНал.РежимВыбораИзСписка = Ложь;
	ЭлементНал.СписокВыбора.Очистить();
	
	//
	ХО = Перечисления.ХозяйственныеОперации;
	Если ПриходРасход = Перечисления.ВидыДвиженийПриходРасход.Расход Тогда
		
		//
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ВозвратДенежныхСредствВДругуюОрганизацию, "Возврат в другую организацию");
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ВозвратОплатыКлиенту);
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ВыдачаЗаймов, "Выдача займа контрагенту");
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ВыдачаЗаймаСотруднику, "Выдача займа сотруднику");
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ВыдачаДенежныхСредствПодотчетнику, "Выдача подотчетнику");
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ВыплатаЗарплаты);
		ЭлементБезНал.СписокВыбора.Добавить(ХО.КонвертацияВалюты);
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ОплатаДенежныхСредствВДругуюОрганизацию, "Оплата в другую организацию");
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ОплатаАрендодателю);
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ОплатаПоКредитам);
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ОплатаПоставщику);
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ВнутренняяПередачаДенежныхСредств, "Передача между организацией и филиалом");
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ПеречислениеВБюджет);
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ПеречислениеНаДепозиты);
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ПеречислениеТаможне);
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ПрочаяВыдачаДенежныхСредств, "Прочий расход");
		
		// РаспоряжениеНаПеремещениеДенежныхСредств
		ЭлементБезНал.СписокВыбора.Добавить(ХО.СдачаДенежныхСредствВБанк);
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ИнкассацияДенежныхСредствВБанк);
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ВыдачаДенежныхСредствВДругуюКассу);
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ПеречислениеДенежныхСредствНаДругойСчет);
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ПоступлениеДенежныхСредствИзБанка);
		ЭлементБезНал.СписокВыбора.Добавить(ХО.СнятиеНаличныхДенежныхСредств);
		
		//
		ДенежныеСредстваСервер.УстановитьВидимостьОперацийПередачиМеждуОрганизациями(ЭлементБезНал);
		ДенежныеСредстваСервер.УстановитьВидимостьОперацийВнутреннейПередачи(ЭлементБезНал);
		ДенежныеСредстваСервер.УстановитьВидимостьОперацииПрочаяВыдачаДенежныхСредств(ЭлементБезНал);
		ДенежныеСредстваСервер.УстановитьВидимостьОперацийПоДоговорамКредитовИДепозитов(ЭлементБезНал);
		ДенежныеСредстваСервер.УстановитьВидимостьОперацииОплатаАрендодателю(ЭлементБезНал);
		ДенежныеСредстваСервер.УстановитьВидимостьОперацийЗаймамСотрудникам(ЭлементБезНал);
		
	ИначеЕсли ПриходРасход = Перечисления.ВидыДвиженийПриходРасход.Приход Тогда
		
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ВозвратНеперечисленнойЗарплатыПоЗарплатномуПроекту, "Возврат зарплаты по зарплатному проекту");
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ВозвратНеперечисленныхДС, "Возврат неперечисленной зарплаты на лицевые счета");
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ВозвратДенежныхСредствОтДругойОрганизации, "Возврат от другой организации");
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ВозвратДенежныхСредствОтПодотчетника, "Возврат от подотчетника");
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ВозвратДенежныхСредствОтПоставщика, "Возврат от поставщика");
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ПоступлениеДенежныхСредствИзКассыНаРасчетныйСчет, "Инкассация в банк");
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ИнкассацияДенежныхСредствИзБанка, "Инкассация из банка");
		ЭлементБезНал.СписокВыбора.Добавить(ХО.КонвертацияВалюты);
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ВнутренняяПередачаДенежныхСредств, "Передача между организацией и филиалом");
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ПоступлениеДенежныхСредствПоЗаймамВыданным, "Погашение займа контрагентом");
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ПогашениеЗаймаСотрудником, "Погашение займа сотрудником");
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ПоступлениеОплатыПоПлатежнойКарте, "Поступление оплаты по эквайрингу");
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ПоступлениеДенежныхСредствИзБанка, "Поступление из банка");
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ПоступлениеДенежныхСредствИзДругойКассы, "Поступление из другой кассы");
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ПоступлениеДенежныхСредствИзКассыККМ, "Поступление из кассы ККМ");
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ПоступлениеДенежныхСредствИзДругойОрганизации, "Поступление от другой организации");
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ПоступлениеДенежныхСредствПоДепозитам, "Поступление по депозитам");
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ПоступлениеДенежныхСредствПоКредитам, "Поступление по кредитам и займам полученным");
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ПоступлениеДенежныхСредствСДругогоСчета, "Поступление с другого счета");
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ПоступлениеОплатыОтКлиента);
		ЭлементБезНал.СписокВыбора.Добавить(ХО.ПрочееПоступлениеДенежныхСредств, "Прочее поступление");
		
		//
		ДенежныеСредстваСервер.УстановитьВидимостьОперацийПередачиМеждуОрганизациями(ЭлементБезНал);
		ДенежныеСредстваСервер.УстановитьВидимостьОперацийВнутреннейПередачи(ЭлементБезНал);
		ДенежныеСредстваСервер.УстановитьВидимостьОперацийПоДоговорамКредитовИДепозитов(ЭлементБезНал);
		ДенежныеСредстваСервер.УстановитьВидимостьОперацииПрочееПоступлениеДенежныхСредств(ЭлементБезНал);
		ДенежныеСредстваСервер.УстановитьВидимостьОперацииКонвертацияВалютыНаличные(ЭлементБезНал);
		ДенежныеСредстваСервер.УстановитьВидимостьОперацийПередачиМеждуКассами(ЭлементБезНал);
		ДенежныеСредстваСервер.УстановитьВидимостьОперацийСКассамиККМ(ЭлементБезНал);
		ДенежныеСредстваСервер.УстановитьВидимостьОперацийЗаймамСотрудникам(ЭлементБезНал);
		
	КонецЕсли;
	
КонецПроцедуры

// Используется: спр.ВидыОперацийБюджетирование
Процедура ВидыОперацийБюджетирование_ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) экспорт
	
	МассивНепроверяемыхРеквизитов.Добавить("ВидОперацииДвиженияДСНаличные");
	
КонецПроцедуры

// Используется в общей форме ERP ВыборДокументаРасчетов.
// Добавляет в переданную структуру РезультатВыбора Статью движения денежных средств, ее аналитики, ЦФО и проект
Процедура ДобавитьАналитикиДДСОбъектаРасчетов(РезультатВыбора, ОбъектРасчетов) экспорт
	
	ДоступныеРеквизиты = ОбъектРасчетов.Метаданные().Реквизиты;
	ТипОбъектаРасчетов = ТипЗнч(ОбъектРасчетов);
	
	СтруктураРеквизитов = Новый Структура;
	Если ТипОбъектаРасчетов = Тип("СправочникСсылка.ДоговорыКонтрагентов")
		ИЛИ ТипОбъектаРасчетов = Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
		
		СтруктураРеквизитов.Вставить("СтатьяДвиженияДенежныхСредств", "СтатьяДвиженияДенежныхСредств");
		СтруктураРеквизитов.Вставить("Аналитика1",	"АналитикаБДДС1");
		СтруктураРеквизитов.Вставить("Аналитика2",	"АналитикаБДДС2");
		СтруктураРеквизитов.Вставить("Аналитика3",	"АналитикаБДДС3");
		СтруктураРеквизитов.Вставить("ЦФО",			"ОсновнойЦФО");
		СтруктураРеквизитов.Вставить("Проект",		"ОсновнойПроект");
		
	ИначеЕсли ДоступныеРеквизиты.Найти("Договор") <> Неопределено Тогда
		СтруктураРеквизитов.Вставить("СтатьяДвиженияДенежныхСредств", "Договор.СтатьяДвиженияДенежныхСредств");
		СтруктураРеквизитов.Вставить("Аналитика1",	"Договор.АналитикаБДДС1");
		СтруктураРеквизитов.Вставить("Аналитика2",	"Договор.АналитикаБДДС2");
		СтруктураРеквизитов.Вставить("Аналитика3",	"Договор.АналитикаБДДС3");
		СтруктураРеквизитов.Вставить("ЦФО",			"Договор.ОсновнойЦФО");
		СтруктураРеквизитов.Вставить("Проект",		"Договор.ОсновнойПроект");
	КонецЕсли;
	
	Если СтруктураРеквизитов.Количество() Тогда
		УстановитьПривилегированныйРежим(Истина);
		ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектРасчетов, СтруктураРеквизитов);
		УстановитьПривилегированныйРежим(Ложь);
		
		Для каждого КлючЗначение Из Значенияреквизитов Цикл
			РезультатВыбора.Вставить(КлючЗначение.Ключ, КлючЗначение.Значение);
		КонецЦикла; 
		
	КонецЕсли;
	
	//Если Не ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) И ЗначениеЗаполнено(ХозяйственнаяОперация) Тогда
	//	СтатьяДвиженияДенежныхСредств =
	//		Справочники.СтатьиДвиженияДенежныхСредств.СтатьяДвиженияДенежныхСредствПоХозяйственнойОперации(ХозяйственнаяОперация);
	//КонецЕсли;
	
КонецПроцедуры

Функция ТекстЗапросаСписокВыбораКонтрагента() Экспорт	
	РезультатФункции = "ВЫБРАТЬ
	|	Контрагенты.Ссылка

	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	НЕ Контрагенты.ПометкаУдаления
	|	И Контрагенты.ОрганизационнаяЕдиница <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";

	Возврат РезультатФункции;
КонецФункции		// ТекстЗапросаСписокВыбораКонтрагента()

// Заполняет счета в версии соглашения ВерсияПриемникИзм по встречному соглашению ВерсияИсточникВход.
Процедура ЗаполнитьВнутригрупповыеСчетаПоВерсииСоглашения(ВерсияИсточникВход, ВерсияПриемникИзм) Экспорт
	ВерсияПриемникИзм.БанковскийСчет = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВерсияИсточникВход.БанковскийСчетКонтрагента, "СчетОрганизации");
	ВерсияПриемникИзм.БанковскийСчетКонтрагента = УправлениеДенежнымиСредствамиУХ.БанковскийСчетКонтрагента(ВерсияИсточникВход.БанковскийСчет);
КонецПроцедуры		// ЗаполнитьВнутригрупповыеСчетаПоДоговору()

// Возвращает банковский счет/кассу документа основания обязательства
Функция ПолучитьБанковскийСчетКассаОснованияОбязательства(ОснованиеОбязательства) экспорт
	
	Результат = неопределено;
	
	ОМ = ДенежныеСредстваВстраиваниеУХКлиентСервер;
	
	//
	Если ЗначениеЗаполнено(ОснованиеОбязательства) Тогда
		Если ОМ.ЭтоСчетНаОплатуПокупателюКлиенту(ОснованиеОбязательства) Тогда
			Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеОбязательства, "БанковскийСчет");
		ИначеЕсли ОМ.ЭтоДокументРеализации(ОснованиеОбязательства) Тогда
			Результат = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОснованиеОбязательства, "БанковскийСчетОрганизации");
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Область ERP_ЗаполнениеНаОснованииЗаявкиНаРасходованиеДС

// Процедуры из ERP.ОМ.ДенежныеСредстваСервер

#КонецОбласти 

// Получает по текстовому представлению объекта ПредставлениеОбъектаВход ссылку на справочник БД
// текущей информационной базы.
Функция ПреобразоватьПредставлениеОбъектаВСправочникБд(ПредставлениеОбъектаВход) Экспорт
	РезультатФункции = Справочники.ДокументыБД.ПустаяСсылка();
	ТекИБ = Справочники.ТипыБазДанных.ТекущаяИБ;
	Если Лев(СокрЛП(ПредставлениеОбъектаВход), 9) = "Документ." Тогда
		ИмяДокумента = Прав(ПредставлениеОбъектаВход, СтрДлина(ПредставлениеОбъектаВход) - 9);
		РезультатФункции = Справочники.ДокументыБД.НайтиПоНаименованию(ИмяДокумента, , , ТекИБ);
	ИначеЕсли Лев(СокрЛП(ПредставлениеОбъектаВход), 11) = "Справочник." Тогда
		ИмяДокумента = Прав(ПредставлениеОбъектаВход, СтрДлина(ПредставлениеОбъектаВход) - 11);
		РезультатФункции = Справочники.СправочникиБД.НайтиПоНаименованию(ИмяДокумента, , , ТекИБ);
	Иначе
		РезультатФункции = Справочники.ДокументыБД.ПустаяСсылка();
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПреобразоватьПредставлениеОбъектаВСправочникБд()

// Возвращает текст запроса для заполнения таблицы заявок обработки Генерация платежных поручений.
Функция ПолучитьТекстЗапросаТаблицаЗаявкиКИсполнению() Экспорт
	
	РезультатФункции = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РазмещениеЗаявок.ЗаявкаНаОперацию КАК ЗаявкаНаОперацию,
	|	РазмещениеЗаявок.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	РазмещениеЗаявок.БанковскийСчетКасса КАК СчетОрганизации,
	|	РазмещениеЗаявок.ДатаИсполнения КАК Дата,
	|	РазмещениеЗаявок.Сумма КАК СуммаДокумента,
	|	РазмещениеЗаявок.Контрагент КАК Контрагент,
	|	РазмещениеЗаявок.Организация КАК Организация,
	|	ЕСТЬNULL(РазмещениеЗаявок.ДоговорКонтрагента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорКонтрагента,
	|	РазмещениеЗаявок.ВалютаОплаты КАК Валюта,
	|	ИСТИНА КАК Создавать
	|ИЗ
	|	РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполненияДокументовПланированияСрезПоследних
	|		ПО (СостоянияИсполненияДокументовПланированияСрезПоследних.ИдентификаторПозиции = РазмещениеЗаявок.ИдентификаторПозиции)
	|			И (СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.НеОбработана))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних КАК РегистрСостоянийОбъектовСрезПоследних
	|		ПО РазмещениеЗаявок.ЗаявкаНаОперацию = РегистрСостоянийОбъектовСрезПоследних.Объект
	|			И (РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта = ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Утверждена))
	|ГДЕ
	|	РазмещениеЗаявок.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
	|	И РазмещениеЗаявок.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
	|	И РазмещениеЗаявок.ДатаИсполнения МЕЖДУ &ДатаНачало И &ДатаОкончание
	|	И РазмещениеЗаявок.Проведен
	|	И НЕ РазмещениеЗаявок.БезакцептноеСписание
	|	И РазмещениеЗаявок.ВидОперацииУХ <> ЗНАЧЕНИЕ(Справочник.ВидыОперацийУХ.СнятиеНаличныхВКассу)";
	
	Возврат РезультатФункции;
	
КонецФункции		// ПолучитьТекстЗапросаТаблицаЗаявкиКИсполнению()

// Возвращает текст запроса для заполнения таблицы заявок обработки Генерация платежных поручений
// по реестру платежей.
Функция ПолучитьТекстЗапросаТаблицаЗаявкиИзРеестраПлатежей() Экспорт
	
	РезультатФункции = 
	"ВЫБРАТЬ
	|	РазмещениеЗаявок.ЗаявкаНаОперацию КАК ЗаявкаНаОперацию,
	|	РазмещениеЗаявок.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	РазмещениеЗаявок.БанковскийСчетКасса КАК СчетОрганизации,
	|	РазмещениеЗаявок.ДатаИсполнения КАК Дата,
	|	РазмещениеЗаявок.Сумма КАК СуммаДокумента,
	|	РазмещениеЗаявок.Контрагент КАК Контрагент,
	|	РазмещениеЗаявок.Организация КАК Организация,
	|	РазмещениеЗаявок.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РазмещениеЗаявок.ВалютаОплаты КАК Валюта,
	|	ИСТИНА КАК Создавать
	|ИЗ
	|	РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполненияДокументовПланированияСрезПоследних
	|		ПО (СостоянияИсполненияДокументовПланированияСрезПоследних.ИдентификаторПозиции = РазмещениеЗаявок.ИдентификаторПозиции)
	|			И (СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.ВключенаВРеестрПлатежей))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗаявкиВРеестрахПлатежей КАК ЗаявкиВРеестрахПлатежей
	|		ПО РазмещениеЗаявок.ЗаявкаНаОперацию = ЗаявкиВРеестрахПлатежей.ЗаявкаНаОперацию
	|			И РазмещениеЗаявок.ИдентификаторПозиции = ЗаявкиВРеестрахПлатежей.ИдентификаторПозиции
	|			И (ЗаявкиВРеестрахПлатежей.РеестрПлатежей = &РеестрПлатежей)
	|ГДЕ
	|	РазмещениеЗаявок.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
	|	И РазмещениеЗаявок.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
	|	И РазмещениеЗаявок.Проведен
	|	И НЕ РазмещениеЗаявок.БезакцептноеСписание
	|	И РазмещениеЗаявок.ВидОперацииУХ <> ЗНАЧЕНИЕ(Справочник.ВидыОперацийУХ.СнятиеНаличныхВКассу)";
	
	Возврат РезультатФункции;
	
КонецФункции		// ПолучитьТекстЗапросаТаблицаЗаявкиИзРеестраПлатежей() 

// Возвращает текст запроса для заполнения таблицы заявок обработки Генерация кассовых ордеров.
Функция ПолучитьТекстЗапросаТаблицаКассовыеОрдера() Экспорт
	РезультатФункции = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РазмещениеЗаявок.ЗаявкаНаОперацию КАК ЗаявкаНаОперацию,
	|	РазмещениеЗаявок.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	РазмещениеЗаявок.БанковскийСчетКасса КАК Касса,
	|	РазмещениеЗаявок.ДатаИсполнения КАК Дата,
	|	ВЫБОР
	|		КОГДА РазмещениеЗаявок.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
	|			ТОГДА РазмещениеЗаявок.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаПриход,
	|	ВЫБОР
	|		КОГДА РазмещениеЗаявок.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.РАсход)
	|			ТОГДА РазмещениеЗаявок.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРасход,
	|	РазмещениеЗаявок.Контрагент КАК Контрагент,
	|	РазмещениеЗаявок.Организация КАК Организация,
	|	ЕСТЬNULL(РазмещениеЗаявок.ДоговорКонтрагента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК ДоговорКонтрагента,
	|	РазмещениеЗаявок.ВалютаОплаты КАК Валюта,
	|	ИСТИНА КАК СоздаватьКассовыеОрдера
	|ИЗ
	|	РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполненияДокументовПланированияСрезПоследних
	|		ПО РазмещениеЗаявок.ЗаявкаНаОперацию = СостоянияИсполненияДокументовПланированияСрезПоследних.ДокументПланирования
	|			И РазмещениеЗаявок.ИдентификаторПозиции = СостоянияИсполненияДокументовПланированияСрезПоследних.ИдентификаторПозиции
	|			И (СостоянияИсполненияДокументовПланированияСрезПоследних.СостояниеИсполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.НеОбработана))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних КАК РегистрСостоянийОбъектовСрезПоследних
	|		ПО РазмещениеЗаявок.ЗаявкаНаОперацию = РегистрСостоянийОбъектовСрезПоследних.Объект
	|			И (РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта = ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Утверждена))
	|ГДЕ
	|	РазмещениеЗаявок.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
	|	И РазмещениеЗаявок.ДатаИсполнения МЕЖДУ &ДатаНачало И &ДатаОкончание
	|	И РазмещениеЗаявок.Проведен";
	Возврат РезультатФункции;
КонецФункции		// ПолучитьТекстЗапросаТаблицаКассовыеОрдера()

// Формирует документы Приходных и Расходных кассовых ордеров и возвращает соответствие созданных 
// к исходным документам.
Функция СоздатьКассовыеОрдераПоВыгрузке(ДокументыКВыгрузкеВход) Экспорт
	РезультатФункции = Новый Соответствие;
	Для Каждого ТекДокумент Из ДокументыКВыгрузкеВход Цикл
		Попытка
			Если ТекДокумент.СуммаПриход > 0 Тогда
				СоздаваемыйДокумент = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
			Иначе
				СоздаваемыйДокумент = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
			КонецЕсли;
			
			МассивОснование = Новый Массив;
			МассивОснование.Добавить(ТекДокумент.ЗаявкаНаОперацию);
			СтруктураЗаполнения = Новый Структура;
			СтруктураЗаполнения.Вставить("Касса",									 ТекДокумент.Касса);
			СтруктураЗаполнения.Вставить("БанковскийСчетКасса",						 ТекДокумент.Касса);
			СтруктураЗаполнения.Вставить("ДокументОснование",						 МассивОснование);
			СтруктураЗаполнения.Вставить("ИдентификаторПозиции",					 ТекДокумент.ИдентификаторПозиции);
			СтруктураЗаполнения.Вставить("НесколькоЗаявокНаРасходованиеСредств",	 Ложь);
			СтруктураЗаполнения.Вставить("Сумма",									 ТекДокумент.СуммаРасход);
			СоздаваемыйДокумент.Заполнить(СтруктураЗаполнения);
			СоздаваемыйДокумент.Дата = Мин(ТекДокумент.Дата, ТекущаяДатаСеанса());			// Если заявка просрочена - берём текущую дату.
			СоздаваемыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			
			РезультатФункции.Вставить(ТекДокумент, СоздаваемыйДокумент.Ссылка);
		Исключение
			ТекстСообщения = НСтр("ru = 'При создании документа на основании заявки %Заявка% произошли ошибки: %ОписаниеОшибки%. Документ пропущен'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Заявка%", Строка(ТекДокумент.ЗаявкаНаОперацию));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецПопытки
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		// СоздатьКассовыеОрдераПоВыгрузке()

// Формирует документы СписаниеБезналичныхСредств по массиву исходных документов ДокументыКВыгрузкеВход.
Функция СоздатьСписаниеБезналичныхСредствПоВыгрузке(ДокументыКВыгрузкеВход, ГенерацияПоРееструПлатежейВход) Экспорт
	РезультатФункции = Новый Массив;
	Для Каждого ТекДокумент Из ДокументыКВыгрузкеВход Цикл
		Попытка
			СоздаваемыйДокумент = Документы.СписаниеБезналичныхДенежныхСредств.СоздатьДокумент();
			Если ГенерацияПоРееструПлатежейВход Тогда
				СоздаваемыйДокумент.ДополнительныеСвойства.Вставить("ВызовИзРеестраПлатежей", Истина);
			КонецЕсли; 
			МассивОснование = Новый Массив;
			МассивОснование.Добавить(ТекДокумент.ЗаявкаНаОперацию);
			СтруктураЗаполнения = Новый Структура;
			СтруктураЗаполнения.Вставить("БанковскийСчетКасса",						 ТекДокумент.СчетОрганизации);
			СтруктураЗаполнения.Вставить("ДокументОснование",						 МассивОснование);
			СтруктураЗаполнения.Вставить("ИдентификаторПозиции",					 ТекДокумент.ИдентификаторПозиции);
			СтруктураЗаполнения.Вставить("НесколькоЗаявокНаРасходованиеСредств",	 Ложь);
			СтруктураЗаполнения.Вставить("Сумма",									 ТекДокумент.СуммаДокумента);
			СоздаваемыйДокумент.Заполнить(СтруктураЗаполнения);
			СоздаваемыйДокумент.Дата = Мин(ТекДокумент.Дата, ТекущаяДатаСеанса());			// Если заявка просрочена - берём текущую дату.
			СоздаваемыйДокумент.Записать(РежимЗаписиДокумента.Проведение);
			РезультатФункции.Добавить(СоздаваемыйДокумент.Ссылка);
		Исключение
			ТекстСообщения = НСтр("ru = 'При создании документа на основании заявки %Заявка% произошли ошибки: %ОписаниеОшибки%. Документ пропущен'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Заявка%", Строка(ТекДокумент.ЗаявкаНаОперацию));
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		КонецПопытки
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		// СоздатьСписаниеБезнаоичныхСредствПоВыгрузке()

#Область ЗаполнениеНаОснованииЗаявкиНаРасходованиеДС


#КонецОбласти 

Функция ПредставлениеДатыПлатежногоКалендаря(Дата, ДатаНачалаПериода, ГоризонтОперативногоПланирования, ПериодичностьОперативногоПланирования, Знач ФорматДатыПоДням = Неопределено) Экспорт
	
		Если НЕ ЗначениеЗаполнено(ФорматДатыПоДням) Тогда
		ФорматДатыПоДням = Нстр("ru = 'ДФ=''dd.MM.yy, ддд'''");
	КонецЕсли;
	
	Если Дата > ГоризонтОперативногоПланирования Тогда
		КодОсновногоЯзыка = ОбщегоНазначения.КодОсновногоЯзыка();
		ДатаНачала = ОбщегоНазначенияУХ.ДатаНачалаПериода(Дата, ПериодичностьОперативногоПланирования);
		ДатаОкончания = КонецДня(ОбщегоНазначенияУХ.ДатаКонцаПериода(Дата, ПериодичностьОперативногоПланирования));
		ПредставлениеДаты = ПредставлениеПериода(ДатаНачала, ДатаОкончания, "Л=" + КодОсновногоЯзыка);
	ИначеЕсли Дата >= ДатаНачалаПериода Тогда
		ПредставлениеДаты = Формат(Дата, ФорматДатыПоДням);
	Иначе
		ПредставлениеДаты = Нстр("ru = 'Входящий остаток'");
	КонецЕсли;
		
	Возврат ПредставлениеДаты;
	
КонецФункции	

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ОтменитьСостояниеНаИсполнении(Объект, ИспользованныеПозиции)
	
	ДопустимыеСостояния = Новый Массив;
	ДопустимыеСостояния.Добавить(Перечисления.СостоянияИсполненияЗаявки.Исполнена);
	
	//
	ТипОбъекта = ТипЗнч(Объект.Ссылка);
	
	// 
	ЭтоСписание = ТипОбъекта = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств");
	Если ЭтоСписание Тогда
		ДопустимыеСостояния.Добавить(Перечисления.СостоянияИсполненияЗаявки.НаИсполнении);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
		ДопустимыеСостояния.Добавить(Перечисления.СостоянияИсполненияЗаявки.НаИсполнении);
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
	Иначе
		Возврат;
	КонецЕсли;
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДопустимыеСостояния", ДопустимыеСостояния);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТ_ИспользованныеПозиции.ДокументПланирования КАК ДокументПланирования,
	|	ВТ_ИспользованныеПозиции.ИдентификаторПозиции КАК ИдентификаторПозиции
	|ПОМЕСТИТЬ ВТ_ИспользованныеПозиции
	|ИЗ
	|	&ИспользованныеПозиции КАК ВТ_ИспользованныеПозиции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияИсполнения.ДокументПланирования КАК ДокументПланирования,
	|	СостоянияИсполнения.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	СостоянияИсполнения.СостояниеИсполнения КАК СостояниеИсполнения,
	|	ЗаявкиВРеестрахПлатежей.РеестрПлатежей КАК РеестрПлатежей
	|ИЗ
	|	ВТ_ИспользованныеПозиции КАК ВТ_ИспользованныеПозиции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполнения
	|		ПО ВТ_ИспользованныеПозиции.ДокументПланирования = СостоянияИсполнения.ДокументПланирования
	|			И ВТ_ИспользованныеПозиции.ИдентификаторПозиции = СостоянияИсполнения.ИдентификаторПозиции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаявкиВРеестрахПлатежей КАК ЗаявкиВРеестрахПлатежей
	|		ПО ВТ_ИспользованныеПозиции.ДокументПланирования = ЗаявкиВРеестрахПлатежей.ЗаявкаНаОперацию
	|			И ВТ_ИспользованныеПозиции.ИдентификаторПозиции = ЗаявкиВРеестрахПлатежей.ИдентификаторПозиции
	|ГДЕ
	|	СостоянияИсполнения.СостояниеИсполнения В (&ДопустимыеСостояния)";
	Запрос.УстановитьПараметр("ИспользованныеПозиции", ИспользованныеПозиции);
	Запрос.УстановитьПараметр("ДопустимыеСостояния", ДопустимыеСостояния);
	
	Период = ТекущаяДатаСеанса();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если ЭтоСписание И ЗначениеЗаполнено(Выборка.РеестрПлатежей) Тогда
			НовоеСостояниеРазмещения = Перечисления.СостоянияИсполненияЗаявки.ВключенаВРеестрПлатежей;
		Иначе
			НовоеСостояниеРазмещения = Перечисления.СостоянияИсполненияЗаявки.НеОбработана;
		КонецЕсли;
		
		УправлениеДенежнымиСредствамиУХ.УстановитьСостояниеИсполненияДокумента(
			Выборка.ДокументПланирования, Выборка.ИдентификаторПозиции, НовоеСостояниеРазмещения, Период,, Объект.Ссылка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСостояниеИсполненияДокументаПланирования(Объект, ИспользованныеПозиции)
	
	//
	ТипОбъекта = ТипЗнч(Объект.Ссылка);
	
	// Вычисляем новое состояние документа
	НовоеСостояниеРазмещения = Перечисления.СостоянияИсполненияЗаявки.Исполнена;
	Если ТипОбъекта = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") 
		ИЛИ ТипОбъекта = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") Тогда
		Если НЕ Объект.ПроведеноБанком Тогда
			НовоеСостояниеРазмещения = Перечисления.СостоянияИсполненияЗаявки.НаИсполнении;
		КонецЕсли;
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
	ИначеЕсли ТипОбъекта = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НовоеСостояниеРазмещения", НовоеСостояниеРазмещения);
	
	//
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВТ_ИспользованныеПозиции.ДокументПланирования КАК ДокументПланирования,
	|	ВТ_ИспользованныеПозиции.ИдентификаторПозиции КАК ИдентификаторПозиции
	|ПОМЕСТИТЬ ВТ_ИспользованныеПозиции
	|ИЗ
	|	&ИспользованныеПозиции КАК ВТ_ИспользованныеПозиции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияИсполнения.ДокументПланирования КАК ДокументПланирования,
	|	СостоянияИсполнения.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	СостоянияИсполнения.СостояниеИсполнения КАК СостояниеИсполнения
	|ИЗ
	|	ВТ_ИспользованныеПозиции КАК ВТ_ИспользованныеПозиции
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполнения
	|		ПО ВТ_ИспользованныеПозиции.ДокументПланирования = СостоянияИсполнения.ДокументПланирования
	|			И ВТ_ИспользованныеПозиции.ИдентификаторПозиции = СостоянияИсполнения.ИдентификаторПозиции
	|ГДЕ
	|	СостоянияИсполнения.СостояниеИсполнения <> &НовоеСостояниеРазмещения";
	Запрос.УстановитьПараметр("ИспользованныеПозиции", ИспользованныеПозиции);
	
	//
	Период = ТекущаяДатаСеанса();
	
	//
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		УправлениеДенежнымиСредствамиУХ.УстановитьСостояниеИсполненияДокумента(Выборка.ДокументПланирования, Выборка.ИдентификаторПозиции, НовоеСостояниеРазмещения, Период,, Объект.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти
