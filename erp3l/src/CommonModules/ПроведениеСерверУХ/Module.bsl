
#Область ПрограммныйИнтерфейс

#Область ПодготовкаИЗаписьДвиженийДокумента

// Процедура инициализирует общие структуры, используемые при проведении документов.
//  Вызывается из модуля документов при проведении.
//
// Параметры:
//  ДокументСсылка			 - ДокументСсылка - ссылка на документ
//  ДополнительныеСвойства	 - Структура - дополнительные свойства документа-объекта
//  РежимПроведения			 - РежимПроведенияДокумента - режим проведения
//
Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойства, РежимПроведения = Неопределено) Экспорт

	// В структуре "ДополнительныеСвойства" создаются свойства с ключами "ТаблицыДляДвижений", "ДляПроведения".

	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
	ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);

	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
	ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
	
	// Структура, содержащая ключ с именем "МенеджерВременныхТаблиц", в значении которого хранится менеджер временных таблиц.
	// Содержит для каждой временной таблицы ключ (имя временной таблицы) и значение (признак наличия записей во временной таблице).
	ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	ДополнительныеСвойства.ДляПроведения.Вставить("РежимПроведения",           РежимПроведения);
	ДополнительныеСвойства.ДляПроведения.Вставить("МетаданныеДокумента",       ДокументСсылка.Метаданные());
	ДополнительныеСвойства.ДляПроведения.Вставить("Ссылка",                    ДокументСсылка);

КонецПроцедуры

// Выполняет закрытие менеджера временных таблиц в структуре дополнительных свойств документа, используемых 
// при проведении.
//
// Параметры:
//	ДополнительныеСвойства - Структура - структура с дополнительными свойствами документа, используемыми
//		при проведении.
//
Процедура ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства) Экспорт
	
	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();
	
КонецПроцедуры

// Функция формирует массив имен регистров, по которым документ имеет движения.
//  Вызывается при подготовке записей к регистрации движений.
//
// Параметры:
//  Регистратор					 - ДокументСсылка	 - ссылка на документ, для которого формируется список регистров
//  Движения					 - КоллекцияДвижений - движения документа
//  МассивИсключаемыхРегистров	 - Массив			 - исключаемые регистры
// 
// Возвращаемое значение:
//  Массив - массив имен регистров, по которым документ имеет движения.
//
Функция ПолучитьМассивИспользуемыхРегистров(Регистратор, Движения, МассивИсключаемыхРегистров = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);

	Результат = Новый Массив;
	МаксимумТаблицВЗапросе = 256;

	СчетчикТаблиц   = 0;
	СчетчикДвижений = 0;

	ВсегоДвижений = Движения.Количество();
	ТекстЗапроса  = "";
	Для Каждого Движение Из Движения Цикл

		СчетчикДвижений = СчетчикДвижений + 1;

		ПропуститьРегистр = МассивИсключаемыхРегистров <> Неопределено
							И МассивИсключаемыхРегистров.Найти(Движение.Имя) <> Неопределено;

		Если Не ПропуститьРегистр Тогда

			Если СчетчикТаблиц > 0 Тогда

				ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|";

			КонецЕсли;

			СчетчикТаблиц = СчетчикТаблиц + 1;

			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|""" + Движение.Имя + """ КАК ИмяРегистра
			|
			|ИЗ " + Движение.ПолноеИмя() + "
			|
			|ГДЕ Регистратор = &Регистратор
			|";

		КонецЕсли;

		Если СчетчикТаблиц = МаксимумТаблицВЗапросе Или СчетчикДвижений = ВсегоДвижений Тогда

			Запрос.Текст  = ТекстЗапроса;
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;

			Если Результат.Количество() = 0 Тогда

				Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");

			Иначе

				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Результат.Добавить(Выборка.ИмяРегистра);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Процедура выполняет пордготовку наборов записей документа к записи движений.
//  1. Очищает наборы записей от "старых записей" (ситуация возможна только в толстом клиенте)
//  2. Взводит флаг записи у наборов, по которым документ имеет движения
//  Вызывается из модуля документов при проведении.
//
// Параметры:
//  Объект	 - ДокументОбъект - наборы записей которого нудно подготовить
//  ЭтоНовый - Булево - признак нового документа
//
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект, ЭтоНовый = Ложь) Экспорт
	Перем ЭтоНовыйДокумент, МетаданныеДвижения;
	
	Для Каждого НаборЗаписей Из Объект.Движения Цикл

		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;

	КонецЦикла;
	
	Если НЕ Объект.ДополнительныеСвойства.Свойство("ЭтоНовый", ЭтоНовыйДокумент) Тогда
		ЭтоНовыйДокумент = ЭтоНовый;
	КонецЕсли;
	
	Если НЕ ЭтоНовыйДокумент Тогда

		// Регистры, движения по которым формируются не из модуля менеджера документа.
		ИсключаемыеРегистры = Новый Массив;
		
		// Регистры, движения по которым формируются не из модуля менеджера документа,
		// но должны удаляться при отмене проведения документа.
		Если Объект.ДополнительныеСвойства.Свойство("РежимЗаписи")
		 И НЕ Объект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			
		КонецЕсли;
		
		Если Объект.ДополнительныеСвойства.Свойство("ДляПроведения")
		 И Объект.ДополнительныеСвойства.ДляПроведения.Свойство("МетаданныеДокумента") Тогда
			МетаданныеДвижения = Объект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Движения;
		Иначе
			МетаданныеДвижения = Объект.Метаданные().Движения;
		КонецЕсли;
		
		МассивИменРегистров = ПолучитьМассивИспользуемыхРегистров(
			Объект.Ссылка,
			МетаданныеДвижения,
			ИсключаемыеРегистры);

		Для Каждого ИмяРегистра Из МассивИменРегистров Цикл
			Объект.Движения[ИмяРегистра].Записывать = Истина;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Процедура записывает движения документа. Дополнительно происходит копирование параметров
//  в модули наборов записей для выполнения регистрации изменений в движениях.
//  Процедура вызывается из модуля документов при проведении.
//
// Параметры:
//  Объект	 - ДокументОбъект - объект, для которого нужно записать движения
//
Процедура ЗаписатьНаборыЗаписей(Объект) Экспорт
	Перем РегистрыДляКонтроля, РассчитыватьИзменения;

	Для Каждого Движение Из Объект.Движения Цикл
		
		Движение.ДополнительныеСвойства.Вставить("ЭтоНовый", Объект.ДополнительныеСвойства.ЭтоНовый);
		Движение.ДополнительныеСвойства.Вставить("РежимЗаписи", Объект.ДополнительныеСвойства.РежимЗаписи);
		Движение.ДополнительныеСвойства.Вставить("ДатаРегистратора", Объект.Дата);
		
	КонецЦикла;
	
	// Регистры, для которых будут рассчитаны таблицы изменений движений.
	Если Объект.ДополнительныеСвойства.ДляПроведения.Свойство("РегистрыДляКонтроля", РегистрыДляКонтроля) Тогда
		
		// Установка флага регистрации изменений в наборе записей.
		Если НЕ Объект.ДополнительныеСвойства.Свойство("РассчитыватьИзменения", РассчитыватьИзменения) Тогда
			РассчитыватьИзменения = Истина;
		КонецЕсли;
		
		Для Каждого НаборЗаписей Из РегистрыДляКонтроля Цикл
			Если НаборЗаписей.Записывать Тогда

				// Установка флага регистрации изменений в наборе записей.
				НаборЗаписей.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", РассчитыватьИзменения);
				НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоНовый", Объект.ДополнительныеСвойства.ЭтоНовый);

				// Структура для передачи данных в модули наборов записей.
				НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", 
						Новый Структура("СтруктураВременныеТаблицы", Объект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы));

			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	//Для отработки случаев, когда документ перестает делать движения по регистру (при изменении вида операции). Очистим оффлайновые регистры.
	Если Объект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение И Не Объект.ДополнительныеСвойства.ЭтоНовый Тогда
				
	КонецЕсли;

	Объект.Движения.Записать();

КонецПроцедуры

// Процедура переписывает строки таблицы в указанные движения документа
//
// Параметры:
//	Таблица  - ТаблицаЗначений   - Таблица, строки которой должны быть помещены в движения документа,
//	Движения - КоллекцияДвижений - Элемент коллекции движений документа, набор записей регистра,
//	Отказ    - Булево            - Признак отказа выполнения транзакции.
//
Процедура ОтразитьДвижения(Таблица, Движения, Отказ) Экспорт
	
	Если Отказ Или Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Движения.Записывать = Истина;
	Движения.Загрузить(Таблица);
	
КонецПроцедуры

// Процедура компонует текст запроса, выполняет запрос и выгружает результаты запроса в таблицы.
//
// Параметры:
//  Запрос					 - Запрос	 - запрос, параметры которого предварительно установлены.
//  ТекстыЗапроса			 - СписокЗначений	 - в списке перечислены тексты запросов и их имена.
//  Таблицы					 - Структура		 - структура в которую будут помещены полученные таблицы для движений.
//  ДобавитьРазделитель		 - Булево			 - Истина, если нужно добавить разделитель ";" между запросами.
//  ДобавлятьСловоТаблица	 - Булево			 - Истина, если к имени таблицы движений нужно вначало добавить слово "Таблица".
//  ТолькоОтмеченные		 - Булево			 - признак пропуска инициализации таблицы движения.
//
Процедура ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, Таблицы, ДобавитьРазделитель = Ложь, ДобавлятьСловоТаблица = Истина, ТолькоОтмеченные = Ложь) Экспорт
	
	ТаблицыЗапроса = ОбщегоНазначенияУХ.ВыгрузитьРезультатыЗапроса(Запрос, ТекстыЗапроса,, ДобавитьРазделитель);
	
	// Помещение результатов запроса в таблицы
	Для Каждого ТекстЗапроса из ТекстыЗапроса Цикл

		ИмяТаблицы = ТекстЗапроса.Представление;

		Если Не ПустаяСтрока(ИмяТаблицы) И (Не ТолькоОтмеченные Или ТекстЗапроса.Пометка) Тогда

			Если ДобавлятьСловоТаблица Тогда
				// Таблицы для проведения должны начинаться с "Таблица"
				Если НЕ СтрНачинаетсяС(ИмяТаблицы, "Таблица") Тогда
					ИмяТаблицы = "Таблица" + ИмяТаблицы;
				КонецЕсли;
			КонецЕсли;
			
			Таблицы.Вставить(ИмяТаблицы, ТаблицыЗапроса[ТекстЗапроса.Представление]);

		КонецЕсли;

	КонецЦикла;

КонецПроцедуры

// Проверяет наличие текста запроса для формирования указанной таблицы
//
// Параметры:
//  ИмяТаблицы		 - Строка		 - имя таблицы
//  ТекстыЗапроса	 - СписокЗначений	 - список значений, значениями которого являются блоки запроса,
//  	синонимами - имена таблиц в которые необходимо поместить
//  	результат выполнения каждого отдельного блока запроса.
// 
// Возвращаемое значение:
//  Булево - Истина, если текст запроса есть.
//
Функция ЕстьТаблицаЗапроса(ИмяТаблицы, ТекстыЗапроса) Экспорт

	Если ТекстыЗапроса = Неопределено Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Для каждого ТекстЗапроса Из ТекстыЗапроса Цикл
		Если НРег(ТекстЗапроса.Представление) = НРег(ИмяТаблицы) Тогда
			Возврат Истина;
		КонецЕсли; 
	КонецЦикла; 
	
	Возврат Ложь;

КонецФункции

Процедура ОбработкаУдаленияПроведения(ДокументОбъект, Отказ = Неопределено) Экспорт
	
	ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументОбъект.Ссылка, ДокументОбъект.ДополнительныеСвойства);	
	ПодготовитьНаборыЗаписейКРегистрацииДвижений(ДокументОбъект);
	ВстраиваниеУХ.СформироватьСписокРегистровДляКонтроля(ДокументОбъект);	
	ЗаписатьНаборыЗаписей(ДокументОбъект);	
	ВыполнитьКонтрольРезультатовПроведения(ДокументОбъект, Отказ);	
	ОчиститьДополнительныеСвойстваДляПроведения(ДокументОбъект.ДополнительныеСвойства);
	
	//При ТУ - проводки, а при ТК - ТК, их нужно очистить
	Если ДокументОбъект.Движения.Найти("МСФО") <> Неопределено Тогда 
		МСФОВызовСервераУХ.ОчиститьДвиженияТК(ДокументОбъект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения_ЗаписьИКонтроль(ДокументОбъект, Отказ = Неопределено) Экспорт

	ВстраиваниеУХ.СформироватьСписокРегистровДляКонтроля(ДокументОбъект);	
	ЗаписатьНаборыЗаписей(ДокументОбъект);	
	ВыполнитьКонтрольРезультатовПроведения(ДокументОбъект, Отказ);	
	ОчиститьДополнительныеСвойстваДляПроведения(ДокументОбъект.ДополнительныеСвойства);

КонецПроцедуры

Процедура ПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения) Экспорт

	ДокументОбъект.ДополнительныеСвойства.Вставить("ЭтоНовый", ДокументОбъект.ЭтоНовый());
	ДокументОбъект.ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	ДокументОбъект.ДополнительныеСвойства.Вставить("РежимПроведения", РежимПроведения);

КонецПроцедуры

Процедура ОбработкаПроведения(ДокументОбъект, Отказ, РежимПроведения) Экспорт

	ДополнительныеСвойства = ДокументОбъект.ДополнительныеСвойства;
	
	ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументОбъект.Ссылка, ДополнительныеСвойства, РежимПроведения);
	ИмяДокумента = ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Имя;
	Документы[ИмяДокумента].ПодготовитьПараметрыПроведения(ДополнительныеСвойства, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПодготовитьНаборыЗаписейКРегистрацииДвижений(ДокументОбъект);	
	ЗагрузитьТаблицыДвижений(ДополнительныеСвойства, ДокументОбъект.Движения);	
	ОбработкаПроведения_ЗаписьИКонтроль(ДокументОбъект, Отказ);

КонецПроцедуры


#КонецОбласти

#Область ПроцедурыКонтроляДвиженийДокументовПоРегистрам

// Процедура выполняет контроль результатов проведения.
//  Процедура вызывается из модуля документов при проведении.
//
// Параметры:
//  Объект	 - ДокументОбъект - документ для контроля
//  Отказ	 - булево - признак отказа от записи
//
Процедура ВыполнитьКонтрольРезультатовПроведения(Объект, Отказ) Экспорт 

	ТипОбъекта = ТипЗнч(Объект);
	ДляПроведения = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
						Объект.ДополнительныеСвойства, "ДляПроведения", Объект.ДополнительныеСвойства);
	
	РегистрыСКонтролемДвижений = Новый Массив;
	РегистрыСКонтролемДвижений.Добавить("ДвижениеИнвестиций");
	
	Для Каждого РегистрСКонтролем Из РегистрыСКонтролемДвижений Цикл
		Если Объект.Движения.Найти(РегистрСКонтролем) <> Неопределено Тогда
			Реквизиты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДляПроведения, "Реквизиты");
			Если Реквизиты = Неопределено Тогда
				Реквизиты = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Объект.ДополнительныеСвойства, "Реквизиты");
				Если Реквизиты = Неопределено Тогда
				    Продолжить;
				КонецЕсли;				
			КонецЕсли;
			РегистрыНакопления[РегистрСКонтролем].ПроверитьПроведение(Реквизиты, Отказ);
		КонецЕсли;
	КонецЦикла;
	
	// 
	Если ДляПроведения = ЛОЖЬ
		Или ТипЗнч(ДляПроведения) <> Тип("Структура")
		Или ДляПроведения.Свойство("РегистрыДляКонтроля") = ЛОЖЬ Тогда
		Возврат ;
	КонецЕсли;
	
	// Стандартный контроль результатов проведения
	Если ЗначениеЗаполнено(ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполнения) Тогда 
		Возврат;
	КонецЕсли;
	
	ЕстьРегистрыСКонтролемИзменений = Ложь;
	
	Если ДляПроведения.РегистрыДляКонтроля.Количество() > 0 Тогда
		ЕстьРегистрыСКонтролемИзменений = Истина;
	Иначе
		Для Каждого ДвигаемыйРегистр Из Объект.Движения Цикл
			Если ДвигаемыйРегистр.ДополнительныеСвойства.Свойство("РассчитыватьИзменения")
				И ДвигаемыйРегистр.ДополнительныеСвойства.РассчитыватьИзменения Тогда
					ЕстьРегистрыСКонтролемИзменений = Истина;
					Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ЕстьРегистрыСКонтролемИзменений Тогда
		Возврат;
	КонецЕсли;
	
	ПакетЗапросов   = Новый Запрос;
	ДанныеТаблиц    = Объект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы;
	ПакетЗапросов.МенеджерВременныхТаблиц = ДанныеТаблиц.МенеджерВременныхТаблиц;
	МассивКонтролей = Новый Массив;
	ТекстЗапроса    = "";

	ДополнитьМассивКонтролей(МассивКонтролей, Объект, ПакетЗапросов, ТекстЗапроса, ДанныеТаблиц);
	
	Если МассивКонтролей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПакетЗапросов.Текст = ТекстЗапроса;
	МассивРезультатов = ПакетЗапросов.ВыполнитьПакет();
	
	Итератор = -1;
	Для Каждого Результат Из МассивРезультатов Цикл

		Итератор = Итератор + 1;
		Если Результат.Пустой() Тогда
			Продолжить;
		КонецЕсли;

		ИмяКонтроля = МассивКонтролей[Итератор];

		СообщитьОбОшибкахКонтроляПроведения(ИмяКонтроля, Объект, Отказ, Результат);
		
	КонецЦикла;
	
	Если Отказ Тогда

		Если Объект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			ТекстСообщения = НСтр("ru = 'Проведение не выполнено %ПредставлениеОбъекта%'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Отмена проведения не выполнена %ПредставлениеОбъекта%'");
		КонецЕсли;

		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеОбъекта%", Строка(Объект));
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект);

	КонецЕсли;
	
КонецПроцедуры

// Функция вызывается из модулей наборов записей для проверки необходимости
//  контроля изменений движений в регистре.
//
// Параметры:
//  ДополнительныеСвойстваНабораЗаписей	 - Структура - дополнительные свойства набора записей.
// 
// Возвращаемое значение:
//  Булево, Истина - признак необходимости выполнения контроля изменений движений в регистре.
//
Функция РассчитыватьИзменения(ДополнительныеСвойстваНабораЗаписей) Экспорт
	Перем РассчитыватьИзменения;

	Возврат Не ЗначениеЗаполнено(ПараметрыСеанса.ПараметрыОбработчикаОбновления.РежимВыполнения) 
		И ДополнительныеСвойстваНабораЗаписей.Свойство("РассчитыватьИзменения", РассчитыватьИзменения)
		И РассчитыватьИзменения;

КонецФункции

// Заполняет значение режима проведения документа.
//
// Параметры:
//  ДокументОбъект	 - ДокументОбъект			 - экземпляр объекта определенного документа.
//  РежимЗаписи		 - РежимЗаписиДокумента		 - значение режима, в котором осуществляется запись документа.
//  РежимПроведения	 - РежимПроведенияДокумента	 - значение режима, в котором осуществляется проведение документа.
//
Процедура УстановитьРежимПроведения(ДокументОбъект, РежимЗаписи, РежимПроведения) Экспорт

	Если ДокументОбъект.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ГрупповоеПерепроведениеДокументов

// Процедура дополняет список документов, исключаемых из группового перепроведения безусловно
//
// Параметры:
//  Результат	 - Структура - Структура, ключи которой - имена исключаемых документов.
//
Процедура ДополнитьИсключаемыеИзПерепроведенияДокументыБезусловно(Результат) Экспорт

	Результат.Вставить("АккредитацияПоставщика");
	Результат.Вставить("АкцептПротестПереводногоВекселя");
	Результат.Вставить("ВалютныйСвоп");
	Результат.Вставить("ВводВНАВЭксплуатациюМСФО");
	Результат.Вставить("ВводНачальныхОстатковВНАМСФО");
	Результат.Вставить("ВводСведенийВНАМСФО");
	Результат.Вставить("ВводСведенийОФинансовыхИнструментах");
	Результат.Вставить("ВводСобытийВНАМСФО");
	Результат.Вставить("ВерсияГрафикаЦеннойБумаги");
	Результат.Вставить("ВерсияСоглашенияАккредитив");
	Результат.Вставить("ВерсияСоглашенияБанковскаяГарантия");
	Результат.Вставить("ВерсияСоглашенияВалютноПроцентныйСвоп");
	Результат.Вставить("ВерсияСоглашенияВалютныйСвоп");
	Результат.Вставить("ВерсияСоглашенияВалютныйФорвард");
	Результат.Вставить("ВерсияСоглашенияДепозит");
	Результат.Вставить("ВерсияСоглашенияКоммерческийДоговор");
	Результат.Вставить("ВерсияСоглашенияКредит");
	Результат.Вставить("ВосстановлениеВНАИзРасходов");
	Результат.Вставить("ВыбытиеВНАМСФО");
	Результат.Вставить("ВыбытиеВекселей");
	Результат.Вставить("ВыбытиеИнвестиций");
	Результат.Вставить("ВыкупЦеннойБумаги");
	Результат.Вставить("ВыпускЦеннойБумаги");
	Результат.Вставить("ВыработкаВНА");
	Результат.Вставить("ГрафикИсполненияЗаказа");
	Результат.Вставить("ЗаявкаНаРасходованиеДенежныхСредств");
	Результат.Вставить("ОжидаемоеПоступлениеДенежныхСредств");
	Результат.Вставить("ЗаявкаНаРасход");
	Результат.Вставить("ПланируемыйДоход");
	Результат.Вставить("ИзменениеПараметровВНАМСФО");
	Результат.Вставить("КвалификацияПоставщика");
	Результат.Вставить("КонсолидационныеПоправки");
	Результат.Вставить("КорректировкаНачальныхОстатков");
	Результат.Вставить("КредитныйЛимит");
	Результат.Вставить("ЛишениеАккредитации");
	Результат.Вставить("МодернизацияВНАМСФО");
	Результат.Вставить("НастраиваемыйОтчет");
	Результат.Вставить("НачислениеАмортизацииВНАМСФО");
	Результат.Вставить("НачислениеОперацийМСФО");
	Результат.Вставить("ОбесценениеВНАМСФО");
	Результат.Вставить("ОтзывАккредитации");
	Результат.Вставить("ОтражениеФактическихДанныхБюджетирования");
	Результат.Вставить("ПараметрыЦеннойБумагиВексель");
	Результат.Вставить("ПереоценкаВНАМСФО");
	Результат.Вставить("ПереоценкаВалютныхАктивовОбязательств");
	Результат.Вставить("ПереоценкаФинансовыхИнструментов");
	Результат.Вставить("ПлатежноеПоручение");
	Результат.Вставить("ПоступлениеВНАМСФО");
	Результат.Вставить("ПоступлениеВекселя");
	Результат.Вставить("ПоступлениеИнвестиций");
	Результат.Вставить("ПризнаниеРасходовПоАмортизацииНСБУ");
	Результат.Вставить("ПризнаниеРасходовФинансовыхИнструментов");
	Результат.Вставить("ПриобретениеЦеннойБумаги");
	Результат.Вставить("ПродажаЦеннойБумаги");
	Результат.Вставить("РакурсДанных");
	Результат.Вставить("РасчетОтложенныхНалогов");
	Результат.Вставить("РасчетСебестоимости");
	Результат.Вставить("РасчетФинансовогоРезультата");
	Результат.Вставить("удалитьРегистрацияОстатковДЗО");
	Результат.Вставить("РегламентнаяОперацияПериодаВНАМСФО");
	Результат.Вставить("РегламентнаяОперацияПериодаПоФинансовымИнструментамМСФО");
	Результат.Вставить("РеестрПлатежей");
	Результат.Вставить("РеестрУступленныхДенежныхТребований");
	Результат.Вставить("ОперативныйПлан");
	Результат.Вставить("РезервыПоДЗИАвансамВыданным");
	Результат.Вставить("РезервыПоЗапасам");
	Результат.Вставить("РезервыПоПретензиям");
	Результат.Вставить("РеклассОтложенныхНалогов");
	Результат.Вставить("РеформацияБаланса");
	Результат.Вставить("СведенияОВалютныхОперациях");
	Результат.Вставить("СправкаОВалютныхОперациях");
	Результат.Вставить("СправкаОПодтверждающихДокументах");
	Результат.Вставить("Трансляция");
	Результат.Вставить("ТрансформационнаяКорректировка");
	Результат.Вставить("УстановкаКлассовКонтрагентов");
	Результат.Вставить("УстановкаКредитныхРейтингов");
	Результат.Вставить("УстановкаОбщихТребованийКПоставщикам");
	Результат.Вставить("УстановкаТребованийКвалификацииКНоменклатуреПоставщиков");
	
КонецПроцедуры

// Процедура дополняет список документов, исключаемых из группового перепроведения
// в зависимости от некоторого условия
//
// Параметры:
//  Результат	 - Структура - Структура, ключи которой - имена исключаемых документов.
//
Процедура ДополнитьИсключаемыеИзПерепроведенияДокументыОпционально(Результат) Экспорт
	
КонецПроцедуры
	
#КонецОбласти

#Область НаборыЗаписей

// Процедура выполняет подготовку наборов записей документа к проведению документа.
// 1. Очищает наборы записей от "старых записей" (ситуация возможна только в толстом клиенте)
// 2. Взводит флаг записи у наборов, по которым документ имел движения при прошлом проведении
// 3. Устанавливает активность наборам записей документов с установленным флагом ручной корректировки
// 4. Записывает пустые наборы, если дата ранее проведенного документа была сдвинута вперед
// Вызывается из модуля документа при проведении.
//
Процедура ПодготовитьНаборыЗаписейКПроведению(Объект, ВыборочноОчищатьРегистры = Истина) Экспорт
	
	Для каждого НаборЗаписей Из Объект.Движения Цикл
		
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
			НаборЗаписей.Записывать = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет подготовку наборов записей документа к отмене проведения документа.
// 1. Взводит флаг записи у наборов, по которым документ имел движения при прошлом проведении
// 2. Снимает активность у наборов записей документов с установленным флагом ручной корректировки
// Вызывается из модуля документа при отмене проведения.
//
Процедура ПодготовитьНаборыЗаписейКОтменеПроведения(Объект) Экспорт
	
	МетаданныеОбъекта = Объект.Метаданные();
	
	МассивИменРегистров = ПолучитьМассивИспользуемыхРегистров(
		Объект.Ссылка, 
		МетаданныеОбъекта.Движения);

	Для каждого ИмяРегистра Из МассивИменРегистров Цикл
		Объект.Движения[ИмяРегистра].Записывать = Истина;
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область ФункцииУчетнойСистемы

Функция ПолучитьСтруктуруИзРезультатаЗапроса(РезультатЗапроса) Экспорт

	СтруктураПараметров = Новый Структура;

	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	Для каждого КолонкаРезультата Из РезультатЗапроса.Колонки Цикл
		СтруктураПараметров.Вставить(КолонкаРезультата.Имя, Выборка[КолонкаРезультата.Имя]);
	КонецЦикла;

    Возврат СтруктураПараметров;

КонецФункции

// Функция СтрокаТаблицыЗначенийВСтруктуру создает
// структуру со свойствами, как колонки таблицы
// значений передаваемой строки
// и устанавливает этим свойствам значения
// из строки таблицы значений
// 
// Параметры:
//  СтрокаТаблицыЗначений - СтрокаТаблицыЗначений
//
// ВозвращаемоеЗначение:
//  Структура
//
Функция СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыЗначений) Экспорт
	
	Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицыЗначений);
	
КонецФункции

#КонецОбласти

#Область Проведение

//Для отладки следует вызывать //ДополнитьТаблицамиИзПакетаЗапросов(ПараметрыПроведения, Запрос, НомераТаблиц, "", Истина)
Функция ДополнитьТаблицамиИзПакетаЗапросов(ПараметрыПроведения, Запрос, НомераТаблиц, ИсключаемыеПрефиксы = "вт,Уничтожить", Отладка = Ложь) Экспорт
		
	Если Отладка Тогда
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		РезультатПакет = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Иначе	
		РезультатПакет = Запрос.ВыполнитьПакет();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсключаемыеПрефиксы) Тогда
		ПрефиксыИскл = Новый Структура(ИсключаемыеПрефиксы);
	Иначе 
		ПрефиксыИскл = Новый Структура;
	КонецЕсли;
		
	Для Каждого НомерТаблицы Из НомераТаблиц Цикл		
		
		ПропуститьТаблицу = Ложь;
		Для каждого ТекПрефикс Из ПрефиксыИскл Цикл		
			Если СтрНачинаетсяС(НомерТаблицы.Ключ, ТекПрефикс.Ключ) Тогда			
				ПропуститьТаблицу = Истина;
				Продолжить; // сработал префикс исключения
			КонецЕсли;		
		КонецЦикла;
		
		Если ПропуститьТаблицу Тогда
			Продолжить;
		КонецЕсли;
		
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, РезультатПакет[НомерТаблицы.Значение].Выгрузить());
		
	КонецЦикла;

	Возврат ПараметрыПроведения;
		
КонецФункции

Процедура ОтразитьДвиженияПоТаблицам(СтруктураТаблицы, Движения, Отказ) Экспорт 

	Для каждого ЭлементТаблица Из СтруктураТаблицы Цикл
		
		ДвиженияПриемник = Движения.Найти(ЭлементТаблица.Ключ);
		Если ДвиженияПриемник = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ОтразитьДвижения(ЭлементТаблица.Значение, ДвиженияПриемник, Отказ)	
		
	КонецЦикла;
	
КонецПроцедуры

// Загружает ТаблицыДляДвижений в наборы записей регистров движений документа.
//
// Параметры:
//	ДополнительныеСвойства - Структура - структура с дополнительными свойствами документа, используемыми при проведении.
//		в структуре обязательно должен быть ключ "ТаблицыДляДвижений" содержащий массив таблиц значений 
//		предназначенные для загрузки в наборы записей;
//	Движения - КоллекцияДвижений - коллекция движений документа.
//
Процедура ЗагрузитьТаблицыДвижений(ДополнительныеСвойства, Движения) Экспорт
	
	Если НЕ ДополнительныеСвойства.Свойство("ТаблицыДляДвижений") Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицыДляДвижений = ДополнительныеСвойства.ТаблицыДляДвижений;
	Для Каждого Таблица Из ТаблицыДляДвижений Цикл
		
		ИмяРегистра = Таблица.Ключ;
		Если ВРег(Лев(ИмяРегистра,7))= "ТАБЛИЦА" Тогда
			ИмяРегистра = Прав(ИмяРегистра, СтрДлина(ИмяРегистра)-7);
		КонецЕсли;
		
		Если Таблица.Значение.Количество() > 0 И Движения.Найти(ИмяРегистра) <> Неопределено Тогда
			Движения[ИмяРегистра].Записывать = Истина;
			Движения[ИмяРегистра].Загрузить(Таблица.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Определяет необходимость подготовить таблицу для формирования движений
//
// Параметры:
//  ИмяРегистра	- Строка - имя регистра. Например "ТоварыНаСкладах"
//  Регистры	- Строка, Структура, Неопределено - список регистров, разделенных запятой, или структура, в ключах которой - имена регистров
//													Если неопределено - то всегда возвращается ИСТИНА.
// 
// Возвращаемое значение:
//   - Булево - Истина, если требуется инициализировать указанную таблицу.
//
Функция ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Экспорт

	Если ЗначениеЗаполнено(Регистры) Тогда
		
		Если ТипЗнч(Регистры) = Тип("Строка") Тогда
			МассивРегистров = Новый Структура(Регистры);
		Иначе
			МассивРегистров = Регистры;
		КонецЕсли;
		
		Если НЕ МассивРегистров.Свойство(ИмяРегистра) Тогда
			Возврат Ложь;
		КонецЕсли; 
		
	КонецЕсли; 
	
	Возврат Истина;

КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция проверяет наличие изменений в таблице регистра.
//
Функция ЕстьИзмененияВТаблице(СтруктураДанных, Ключ) Экспорт

	Перем ЕстьИзменения;
	
	Если СтруктураДанных.Свойство(Ключ, ЕстьИзменения) Тогда
		
		Если ТипЗнч(ЕстьИзменения) = Тип("Булево") Тогда
			Возврат ЕстьИзменения;
		Иначе
			Возврат ЕстьИзменения.ЕстьЗаписиВТаблице;
		КонецЕсли;
		
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Процедура ДополнитьМассивКонтролей(МассивКонтролей, Объект, ПакетЗапросов, ТекстЗапроса, ДанныеТаблиц)
	
	Если ТипЗнч(Объект) = Тип("ДокументОбъект.ОперативныйПлан") Тогда
		
		Если Объект.ВидОперации = Перечисления.ВидыОперацийОперативныйПлан.Планирование Тогда
			ДобавитьКонтрольИсходныхОперацийБюджетов(МассивКонтролей, Объект, ПакетЗапросов, ТекстЗапроса);
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийОперативныйПлан.ВводЛимитов Тогда
			// Проверка бюджетов
			ДобавитьКонтрольИсходныхБюджетов(МассивКонтролей, Объект, ПакетЗапросов, ТекстЗапроса);
		ИначеЕсли Объект.ВидОперации = Перечисления.ВидыОперацийОперативныйПлан.Резервирование Тогда
			// Проверка резервов
			ДобавитьКонтрольИсходныхРезервов(МассивКонтролей, Объект, ПакетЗапросов, ТекстЗапроса);
		КонецЕсли;
		
	Иначе
		
		Если ЕстьИзмененияВТаблице(ДанныеТаблиц,"ДвиженияЛимитыПоБюджетамИзменение") Тогда
			КонтрольЛимитовУХ.ПолучитьВТ_ТекущиеЛимиты(ПакетЗапросов, Объект.Дата);
			КонтрольЛимитовУХ.ДобавитьКонтролиЛимитов(МассивКонтролей, ТекстЗапроса);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДобавитьКонтрольИсходныхОперацийБюджетов(МассивКонтролей, Объект, Запрос, ТекстЗапроса)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Запрос1.Предназначение КАК Предназначение,
	|	Запрос1.Раздел КАК Раздел,
	|	Запрос1.ПериодОтчета КАК ПериодОтчета,
	|	Запрос1.АналитикаСтруктуры КАК АналитикаСтруктуры,
	|	Запрос1.АналитикаСтатейБюджетов КАК АналитикаСтатейБюджетов,
	|	Запрос1.АналитикаПартнеров КАК АналитикаПартнеров,
	|	Запрос1.АналитикаПотребностей КАК АналитикаПотребностей,
	|	Запрос1.АналитикаНоменклатуры КАК АналитикаНоменклатуры,
	|	Запрос1.Валюта КАК Валюта,
	|	Запрос1.ДокументПланирования КАК ДокументПланирования,
	|	СУММА(Запрос1.Количество) КАК Количество,
	|	СУММА(Запрос1.Сумма) КАК Сумма
	|ПОМЕСТИТЬ ВТ_ПланируемыеОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОперативныйПланДвиженияОперации.Ссылка.Предназначение КАК Предназначение,
	|		ОперативныйПланДвиженияОперации.Ссылка.ВидОперации КАК Раздел,
	|		ОперативныйПланДвиженияОперации.Период КАК ПериодОтчета,
	|		ОперативныйПланДвиженияОперации.АналитикаСтруктуры КАК АналитикаСтруктуры,
	|		ОперативныйПланДвиженияОперации.АналитикаСтатейБюджетов КАК АналитикаСтатейБюджетов,
	|		ОперативныйПланДвиженияОперации.АналитикаПартнеров КАК АналитикаПартнеров,
	|		ОперативныйПланДвиженияОперации.АналитикаПотребностей КАК АналитикаПотребностей,
	|		ОперативныйПланДвиженияОперации.АналитикаНоменклатуры КАК АналитикаНоменклатуры,
	|		ОперативныйПланДвиженияОперации.Валюта КАК Валюта,
	|		ОперативныйПланДвиженияОперации.Ссылка.ДокументПланирования КАК ДокументПланирования,
	|		ОперативныйПланДвиженияОперации.Сумма КАК Сумма,
	|		ОперативныйПланДвиженияОперации.Количество КАК Количество
	|	ИЗ
	|		Документ.ОперативныйПлан.ДвиженияОперации КАК ОперативныйПланДвиженияОперации
	|	ГДЕ
	|		ОперативныйПланДвиженияОперации.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОперативныйПланДвиженияОперацииИсходные.Предназначение,
	|		ОперативныйПланДвиженияОперацииИсходные.Ссылка.ВидОперации,
	|		ОперативныйПланДвиженияОперацииИсходные.Период,
	|		ОперативныйПланДвиженияОперацииИсходные.АналитикаСтруктуры,
	|		ОперативныйПланДвиженияОперацииИсходные.АналитикаСтатейБюджетов,
	|		ОперативныйПланДвиженияОперацииИсходные.АналитикаПартнеров,
	|		ОперативныйПланДвиженияОперацииИсходные.АналитикаПотребностей,
	|		ОперативныйПланДвиженияОперацииИсходные.АналитикаНоменклатуры,
	|		ОперативныйПланДвиженияОперацииИсходные.Валюта,
	|		ОперативныйПланДвиженияОперацииИсходные.ДокументПланирования,
	|		0,
	|		0
	|	ИЗ
	|		Документ.ОперативныйПлан.ДвиженияОперацииИсходные КАК ОперативныйПланДвиженияОперацииИсходные
	|	ГДЕ
	|		ОперативныйПланДвиженияОперацииИсходные.Ссылка = &Ссылка) КАК Запрос1
	|
	|СГРУППИРОВАТЬ ПО
	|	Запрос1.Предназначение,
	|	Запрос1.Раздел,
	|	Запрос1.ПериодОтчета,
	|	Запрос1.АналитикаСтруктуры,
	|	Запрос1.АналитикаСтатейБюджетов,
	|	Запрос1.АналитикаПартнеров,
	|	Запрос1.АналитикаПотребностей,
	|	Запрос1.АналитикаНоменклатуры,
	|	Запрос1.Валюта,
	|	Запрос1.ДокументПланирования";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Выполнить();
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	МассивКонтролей.Добавить(Врег("КонтрольИсходныхОперацийБюджетов"));
	
	ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		  |	Запрос1.Предназначение КАК Предназначение,
		  |	Запрос1.Раздел КАК Раздел,
		  |	Запрос1.ДокументПланирования КАК ДокументПланирования,
		  |	Запрос1.ПериодОтчета КАК ПериодОтчета,
		  |	Запрос1.АналитикаСтруктуры КАК АналитикаСтруктуры,
		  |	Запрос1.АналитикаСтатейБюджетов КАК АналитикаСтатейБюджетов,
		  |	Запрос1.АналитикаПартнеров КАК АналитикаПартнеров,
		  |	Запрос1.АналитикаПотребностей КАК АналитикаПотребностей,
		  |	Запрос1.АналитикаНоменклатуры КАК АналитикаНоменклатуры,
		  |	Запрос1.Валюта КАК Валюта,
		  |	СУММА(Запрос1.Количество) КАК Количество,
		  |	СУММА(Запрос1.Сумма) КАК Сумма
		  |ИЗ
		  |	(ВЫБРАТЬ
		  |		ОперацииБюджетовОбороты.Предназначение КАК Предназначение,
		  |		ОперацииБюджетовОбороты.Раздел КАК Раздел,
		  |		ОперацииБюджетовОбороты.ДокументПланирования КАК ДокументПланирования,
		  |		ОперацииБюджетовОбороты.ПериодОтчета КАК ПериодОтчета,
		  |		ОперацииБюджетовОбороты.АналитикаСтруктуры КАК АналитикаСтруктуры,
		  |		ОперацииБюджетовОбороты.АналитикаСтатейБюджетов КАК АналитикаСтатейБюджетов,
		  |		ОперацииБюджетовОбороты.АналитикаПартнеров КАК АналитикаПартнеров,
		  |		ОперацииБюджетовОбороты.АналитикаПотребностей КАК АналитикаПотребностей,
		  |		ОперацииБюджетовОбороты.АналитикаНоменклатуры КАК АналитикаНоменклатуры,
		  |		ОперацииБюджетовОбороты.Валюта КАК Валюта,
		  |		ОперацииБюджетовОбороты.КоличествоОборот КАК Количество,
		  |		ОперацииБюджетовОбороты.СуммаОборот КАК Сумма
		  |	ИЗ
		  |		РегистрНакопления.ОперацииБюджетов.Обороты(
		  |				,
		  |				,
		  |				,
		  |				(Раздел, Предназначение, ПериодОтчета, ДокументПланирования, Валюта, АналитикаСтруктуры, АналитикаСтатейБюджетов, АналитикаПотребностей, АналитикаПартнеров, АналитикаНоменклатуры) В
		  |					(ВЫБРАТЬ
		  |						ВТ_ПланируемыеОстатки.Раздел КАК Раздел,
		  |						ВТ_ПланируемыеОстатки.Предназначение КАК Предназначение,
		  |						ВТ_ПланируемыеОстатки.ПериодОтчета КАК ПериодОтчета,
		  |						ВТ_ПланируемыеОстатки.ДокументПланирования КАК ДокументПланирования,
		  |						ВТ_ПланируемыеОстатки.Валюта КАК Валюта,
		  |						ВТ_ПланируемыеОстатки.АналитикаСтруктуры КАК АналитикаСтруктуры,
		  |						ВТ_ПланируемыеОстатки.АналитикаСтатейБюджетов КАК АналитикаСтатейБюджетов,
		  |						ВТ_ПланируемыеОстатки.АналитикаПотребностей КАК АналитикаПотребностей,
		  |						ВТ_ПланируемыеОстатки.АналитикаПартнеров КАК АналитикаПартнеров,
		  |						ВТ_ПланируемыеОстатки.АналитикаНоменклатуры КАК АналитикаНоменклатуры
		  |					ИЗ
		  |						ВТ_ПланируемыеОстатки КАК ВТ_ПланируемыеОстатки)) КАК ОперацииБюджетовОбороты
		  |	
		  |	ОБЪЕДИНИТЬ ВСЕ
		  |	
		  |	ВЫБРАТЬ
		  |		ВТ_ПланируемыеОстатки.Предназначение,
		  |		ВТ_ПланируемыеОстатки.Раздел,
		  |		ВТ_ПланируемыеОстатки.ДокументПланирования,
		  |		ВТ_ПланируемыеОстатки.ПериодОтчета,
		  |		ВТ_ПланируемыеОстатки.АналитикаСтруктуры,
		  |		ВТ_ПланируемыеОстатки.АналитикаСтатейБюджетов,
		  |		ВТ_ПланируемыеОстатки.АналитикаПартнеров,
		  |		ВТ_ПланируемыеОстатки.АналитикаПотребностей,
		  |		ВТ_ПланируемыеОстатки.АналитикаНоменклатуры,
		  |		ВТ_ПланируемыеОстатки.Валюта,
		  |		-ВТ_ПланируемыеОстатки.Количество,
		  |		-ВТ_ПланируемыеОстатки.Сумма
		  |	ИЗ
		  |		ВТ_ПланируемыеОстатки КАК ВТ_ПланируемыеОстатки) КАК Запрос1
		  |
		  |СГРУППИРОВАТЬ ПО
		  |	Запрос1.ДокументПланирования,
		  |	Запрос1.АналитикаНоменклатуры,
		  |	Запрос1.ПериодОтчета,
		  |	Запрос1.АналитикаПотребностей,
		  |	Запрос1.АналитикаПартнеров,
		  |	Запрос1.АналитикаСтруктуры,
		  |	Запрос1.Валюта,
		  |	Запрос1.АналитикаСтатейБюджетов,
		  |	Запрос1.Предназначение,
		  |	Запрос1.Раздел
		  |
		  |ИМЕЮЩИЕ
		  |	(СУММА(Запрос1.Количество) <> 0
		  |		ИЛИ СУММА(Запрос1.Сумма) <> 0)" 
		  + ОбщегоНазначенияУХ.ТекстРазделителяЗапросовПакета();
		
КонецФункции

Функция ДобавитьКонтрольИсходныхБюджетов(МассивКонтролей, Объект, Запрос, ТекстЗапроса)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Запрос1.Предназначение КАК Предназначение,
	|	Запрос1.ДокументРезервирования КАК ДокументРезервирования,
	|	Запрос1.ПериодЛимитирования КАК ПериодЛимитирования,
	|	Запрос1.ЦФО КАК ЦФО,
	|	Запрос1.Проект КАК Проект,
	|	Запрос1.СтатьяБюджета КАК СтатьяБюджета,
	|	Запрос1.Аналитика1 КАК Аналитика1,
	|	Запрос1.Аналитика2 КАК Аналитика2,
	|	Запрос1.Аналитика3 КАК Аналитика3,
	|	Запрос1.Аналитика4 КАК Аналитика4,
	|	Запрос1.Аналитика5 КАК Аналитика5,
	|	Запрос1.Аналитика6 КАК Аналитика6,
	|	Запрос1.Валюта КАК Валюта,
	|	Запрос1.ДокументПланирования КАК ДокументПланирования,
	|	СУММА(Запрос1.Лимит) КАК Лимит
	|ПОМЕСТИТЬ ВТ_ПланируемыеЛимиты
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОперативныйПланДвиженияОперации.Ссылка.Предназначение КАК Предназначение,
	|		ЗНАЧЕНИЕ(Документ.ОперативныйПлан.ПустаяСсылка) КАК ДокументРезервирования,
	|		ОперативныйПланДвиженияОперации.Период КАК ПериодЛимитирования,
	|		ОперативныйПланДвиженияОперации.ЦФО КАК ЦФО,
	|		ОперативныйПланДвиженияОперации.Проект КАК Проект,
	|		ОперативныйПланДвиженияОперации.СтатьяБюджета КАК СтатьяБюджета,
	|		ОперативныйПланДвиженияОперации.Аналитика1 КАК Аналитика1,
	|		ОперативныйПланДвиженияОперации.Аналитика2 КАК Аналитика2,
	|		ОперативныйПланДвиженияОперации.Аналитика3 КАК Аналитика3,
	|		ОперативныйПланДвиженияОперации.Аналитика4 КАК Аналитика4,
	|		ОперативныйПланДвиженияОперации.Аналитика5 КАК Аналитика5,
	|		ОперативныйПланДвиженияОперации.Аналитика6 КАК Аналитика6,
	|		ОперативныйПланДвиженияОперации.Валюта КАК Валюта,
	|		НЕОПРЕДЕЛЕНО КАК ДокументПланирования,
	|		ОперативныйПланДвиженияОперации.Сумма КАК Лимит
	|	ИЗ
	|		Документ.ОперативныйПлан.ДвиженияОперации КАК ОперативныйПланДвиженияОперации
	|	ГДЕ
	|		ОперативныйПланДвиженияОперации.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОперативныйПланДвиженияОперацииИсходные.Предназначение,
	|		ОперативныйПланДвиженияОперацииИсходные.ДокументПланирования,
	|		ОперативныйПланДвиженияОперацииИсходные.Период,
	|		ОперативныйПланДвиженияОперацииИсходные.ЦФО,
	|		ОперативныйПланДвиженияОперацииИсходные.Проект,
	|		ОперативныйПланДвиженияОперацииИсходные.СтатьяБюджета,
	|		ОперативныйПланДвиженияОперацииИсходные.Аналитика1,
	|		ОперативныйПланДвиженияОперацииИсходные.Аналитика2,
	|		ОперативныйПланДвиженияОперацииИсходные.Аналитика3,
	|		ОперативныйПланДвиженияОперацииИсходные.Аналитика4,
	|		ОперативныйПланДвиженияОперацииИсходные.Аналитика5,
	|		ОперативныйПланДвиженияОперацииИсходные.Аналитика6,
	|		ОперативныйПланДвиженияОперацииИсходные.Валюта,
	|		НЕОПРЕДЕЛЕНО,
	|		0
	|	ИЗ
	|		Документ.ОперативныйПлан.ДвиженияОперацииИсходные КАК ОперативныйПланДвиженияОперацииИсходные
	|	ГДЕ
	|		ОперативныйПланДвиженияОперацииИсходные.Ссылка = &Ссылка) КАК Запрос1
	|
	|СГРУППИРОВАТЬ ПО
	|	Запрос1.Предназначение,
	|	Запрос1.ДокументРезервирования,
	|	Запрос1.ПериодЛимитирования,
	|	Запрос1.ДокументПланирования,
	|	Запрос1.Аналитика2,
	|	Запрос1.Аналитика1,
	|	Запрос1.Аналитика3,
	|	Запрос1.Аналитика4,
	|	Запрос1.Аналитика5,
	|	Запрос1.Аналитика6,
	|	Запрос1.Валюта,
	|	Запрос1.ЦФО,
	|	Запрос1.Проект,
	|	Запрос1.СтатьяБюджета";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Выполнить();
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	МассивКонтролей.Добавить(Врег("КонтрольИсходныхБюджетов"));
	
	ТекстЗапроса = ТекстЗапроса
		+ "ВЫБРАТЬ
		  |	Запрос1.Предназначение КАК Предназначение,
		  |	Запрос1.ДокументРезервирования КАК ДокументРезервирования,
		  |	Запрос1.ПериодЛимитирования КАК ПериодЛимитирования,
		  |	Запрос1.ЦФО КАК ЦФО,
		  |	Запрос1.Проект КАК Проект,
		  |	Запрос1.СтатьяБюджета КАК СтатьяБюджета,
		  |	Запрос1.Аналитика1 КАК Аналитика1,
		  |	Запрос1.Аналитика2 КАК Аналитика2,
		  |	Запрос1.Аналитика3 КАК Аналитика3,
		  |	Запрос1.Аналитика4 КАК Аналитика4,
		  |	Запрос1.Аналитика5 КАК Аналитика5,
		  |	Запрос1.Аналитика6 КАК Аналитика6,
		  |	Запрос1.Валюта КАК Валюта,
		  |	Запрос1.ДокументПланирования КАК ДокументПланирования,
		  |	СУММА(Запрос1.Лимит) КАК Лимит
		  |ИЗ
		  |	(ВЫБРАТЬ
		  |		ЛимитыПоБюджетам.Предназначение КАК Предназначение,
		  |		ЛимитыПоБюджетам.ДокументРезервирования КАК ДокументРезервирования,
		  |		ЛимитыПоБюджетам.ПериодЛимитирования КАК ПериодЛимитирования,
		  |		ЛимитыПоБюджетам.ЦФО КАК ЦФО,
		  |		ЛимитыПоБюджетам.Проект КАК Проект,
		  |		ЛимитыПоБюджетам.СтатьяБюджета КАК СтатьяБюджета,
		  |		ЛимитыПоБюджетам.Аналитика1 КАК Аналитика1,
		  |		ЛимитыПоБюджетам.Аналитика2 КАК Аналитика2,
		  |		ЛимитыПоБюджетам.Аналитика3 КАК Аналитика3,
		  |		ЛимитыПоБюджетам.Аналитика4 КАК Аналитика4,
		  |		ЛимитыПоБюджетам.Аналитика5 КАК Аналитика5,
		  |		ЛимитыПоБюджетам.Аналитика6 КАК Аналитика6,
		  |		ЛимитыПоБюджетам.Валюта КАК Валюта,
		  |		ЛимитыПоБюджетам.ДокументПланирования КАК ДокументПланирования,
		  |		ЛимитыПоБюджетам.ЛимитОборот + ЛимитыПоБюджетам.КорректировкаОборот КАК Лимит
		  |	ИЗ
		  |		РегистрНакопления.ЛимитыПоБюджетам.Обороты(
		  |				,
		  |				,
		  |				,
		  |				(Предназначение, ДокументРезервирования, ПериодЛимитирования, ЦФО, Проект, СтатьяБюджета, Аналитика1, Аналитика2, Аналитика3, Аналитика4, Аналитика5, Аналитика6, Валюта, ДокументПланирования) В
		  |					(ВЫБРАТЬ
		  |						ВТ_ПланируемыеЛимиты.Предназначение КАК Предназначение,
		  |						ВТ_ПланируемыеЛимиты.ДокументРезервирования КАК ДокументРезервирования,
		  |						ВТ_ПланируемыеЛимиты.ПериодЛимитирования КАК ПериодЛимитирования,
		  |						ВТ_ПланируемыеЛимиты.ЦФО КАК ЦФО,
		  |						ВТ_ПланируемыеЛимиты.Проект КАК Проект,
		  |						ВТ_ПланируемыеЛимиты.СтатьяБюджета КАК СтатьяБюджета,
		  |						ВТ_ПланируемыеЛимиты.Аналитика1 КАК Аналитика1,
		  |						ВТ_ПланируемыеЛимиты.Аналитика2 КАК Аналитика2,
		  |						ВТ_ПланируемыеЛимиты.Аналитика3 КАК Аналитика3,
		  |						ВТ_ПланируемыеЛимиты.Аналитика4 КАК Аналитика4,
		  |						ВТ_ПланируемыеЛимиты.Аналитика5 КАК Аналитика5,
		  |						ВТ_ПланируемыеЛимиты.Аналитика6 КАК Аналитика6,
		  |						ВТ_ПланируемыеЛимиты.Валюта КАК Валюта,
		  |						ВТ_ПланируемыеЛимиты.ДокументПланирования КАК ДокументПланирования
		  |					ИЗ
		  |						ВТ_ПланируемыеЛимиты КАК ВТ_ПланируемыеЛимиты)) КАК ЛимитыПоБюджетам
		  |	
		  |	ОБЪЕДИНИТЬ ВСЕ
		  |	
		  |	ВЫБРАТЬ
		  |		ВТ_ПланируемыеЛимиты.Предназначение,
		  |		ВТ_ПланируемыеЛимиты.ДокументРезервирования,
		  |		ВТ_ПланируемыеЛимиты.ПериодЛимитирования,
		  |		ВТ_ПланируемыеЛимиты.ЦФО,
		  |		ВТ_ПланируемыеЛимиты.Проект,
		  |		ВТ_ПланируемыеЛимиты.СтатьяБюджета,
		  |		ВТ_ПланируемыеЛимиты.Аналитика1,
		  |		ВТ_ПланируемыеЛимиты.Аналитика2,
		  |		ВТ_ПланируемыеЛимиты.Аналитика3,
		  |		ВТ_ПланируемыеЛимиты.Аналитика4,
		  |		ВТ_ПланируемыеЛимиты.Аналитика5,
		  |		ВТ_ПланируемыеЛимиты.Аналитика6,
		  |		ВТ_ПланируемыеЛимиты.Валюта,
		  |		ВТ_ПланируемыеЛимиты.ДокументПланирования,
		  |		-ВТ_ПланируемыеЛимиты.Лимит
		  |	ИЗ
		  |		ВТ_ПланируемыеЛимиты КАК ВТ_ПланируемыеЛимиты) КАК Запрос1
		  |
		  |СГРУППИРОВАТЬ ПО
		  |	Запрос1.Предназначение,
		  |	Запрос1.ДокументРезервирования,
		  |	Запрос1.ПериодЛимитирования,
		  |	Запрос1.ЦФО,
		  |	Запрос1.Проект,
		  |	Запрос1.СтатьяБюджета,
		  |	Запрос1.Аналитика1,
		  |	Запрос1.Аналитика2,
		  |	Запрос1.Аналитика3,
		  |	Запрос1.Аналитика4,
		  |	Запрос1.Аналитика5,
		  |	Запрос1.Аналитика6,
		  |	Запрос1.Валюта,
		  |	Запрос1.ДокументПланирования
		  |
		  |ИМЕЮЩИЕ
		  |	СУММА(Запрос1.Лимит) <> 0" 
		  + ОбщегоНазначенияУХ.ТекстРазделителяЗапросовПакета();
		
КонецФункции
	  
Функция ДобавитьКонтрольИсходныхРезервов(МассивКонтролей, Объект, Запрос, ТекстЗапроса)
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Запрос1.Предназначение КАК Предназначение,
	|	Запрос1.ДокументРезервирования КАК ДокументРезервирования,
	|	Запрос1.ПериодЛимитирования КАК ПериодЛимитирования,
	|	Запрос1.ЦФО КАК ЦФО,
	|	Запрос1.Проект КАК Проект,
	|	Запрос1.СтатьяБюджета КАК СтатьяБюджета,
	|	Запрос1.Аналитика1 КАК Аналитика1,
	|	Запрос1.Аналитика2 КАК Аналитика2,
	|	Запрос1.Аналитика3 КАК Аналитика3,
	|	Запрос1.Аналитика4 КАК Аналитика4,
	|	Запрос1.Аналитика5 КАК Аналитика5,
	|	Запрос1.Аналитика6 КАК Аналитика6,
	|	Запрос1.Валюта КАК Валюта,
	|	СУММА(Запрос1.Зарезервировано) КАК Зарезервировано,
	|	НЕОПРЕДЕЛЕНО КАК ДокументПланирования
	|ПОМЕСТИТЬ ВТ_ПланируемыеРезервы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОперативныйПланДвиженияОперации.Ссылка.Предназначение КАК Предназначение,
	|		ВЫБОР ОперативныйПланДвиженияОперации.Ссылка.РежимВводаДокументаПланирования
	|			КОГДА 0
	|				ТОГДА ОперативныйПланДвиженияОперации.Ссылка
	|			КОГДА 1
	|				ТОГДА ОперативныйПланДвиженияОперации.Ссылка.ДокументПланирования
	|			КОГДА 2
	|				ТОГДА ОперативныйПланДвиженияОперации.Ссылка
	|		КОНЕЦ КАК ДокументРезервирования,
	|		ОперативныйПланДвиженияОперации.Период КАК ПериодЛимитирования,
	|		ОперативныйПланДвиженияОперации.ЦФО КАК ЦФО,
	|		ОперативныйПланДвиженияОперации.Проект КАК Проект,
	|		ОперативныйПланДвиженияОперации.СтатьяБюджета КАК СтатьяБюджета,
	|		ОперативныйПланДвиженияОперации.Аналитика1 КАК Аналитика1,
	|		ОперативныйПланДвиженияОперации.Аналитика2 КАК Аналитика2,
	|		ОперативныйПланДвиженияОперации.Аналитика3 КАК Аналитика3,
	|		ОперативныйПланДвиженияОперации.Аналитика4 КАК Аналитика4,
	|		ОперативныйПланДвиженияОперации.Аналитика5 КАК Аналитика5,
	|		ОперативныйПланДвиженияОперации.Аналитика6 КАК Аналитика6,
	|		ОперативныйПланДвиженияОперации.Валюта КАК Валюта,
	|		ОперативныйПланДвиженияОперации.Сумма КАК Зарезервировано
	|	ИЗ
	|		Документ.ОперативныйПлан.ДвиженияОперации КАК ОперативныйПланДвиженияОперации
	|	ГДЕ
	|		ОперативныйПланДвиженияОперации.Ссылка = &Ссылка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОперативныйПланДвиженияОперацииИсходные.Предназначение,
	|		ОперативныйПланДвиженияОперацииИсходные.Ссылка.ДокументПланирования,
	|		ОперативныйПланДвиженияОперацииИсходные.Период,
	|		ОперативныйПланДвиженияОперацииИсходные.ЦФО,
	|		ОперативныйПланДвиженияОперацииИсходные.Проект,
	|		ОперативныйПланДвиженияОперацииИсходные.СтатьяБюджета,
	|		ОперативныйПланДвиженияОперацииИсходные.Аналитика1,
	|		ОперативныйПланДвиженияОперацииИсходные.Аналитика2,
	|		ОперативныйПланДвиженияОперацииИсходные.Аналитика3,
	|		ОперативныйПланДвиженияОперацииИсходные.Аналитика4,
	|		ОперативныйПланДвиженияОперацииИсходные.Аналитика5,
	|		ОперативныйПланДвиженияОперацииИсходные.Аналитика6,
	|		ОперативныйПланДвиженияОперацииИсходные.Валюта,
	|		0
	|	ИЗ
	|		Документ.ОперативныйПлан.ДвиженияОперацииИсходные КАК ОперативныйПланДвиженияОперацииИсходные
	|	ГДЕ
	|		ОперативныйПланДвиженияОперацииИсходные.Ссылка = &Ссылка
	|		И ОперативныйПланДвиженияОперацииИсходные.Ссылка.РежимВводаДокументаПланирования = 1) КАК Запрос1
	|
	|СГРУППИРОВАТЬ ПО
	|	Запрос1.Предназначение,
	|	Запрос1.ДокументРезервирования,
	|	Запрос1.ПериодЛимитирования,
	|	Запрос1.Аналитика2,
	|	Запрос1.Аналитика1,
	|	Запрос1.Аналитика3,
	|	Запрос1.Аналитика4,
	|	Запрос1.Аналитика5,
	|	Запрос1.Аналитика6,
	|	Запрос1.Валюта,
	|	Запрос1.ЦФО,
	|	Запрос1.Проект,
	|	Запрос1.СтатьяБюджета";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Выполнить();
	
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	МассивКонтролей.Добавить(Врег("КонтрольИсходныхРезервов"));
	
	ТекстЗапроса = ТекстЗапроса + 
	"ВЫБРАТЬ
	|	Запрос1.Предназначение КАК Предназначение,
	|	Запрос1.ДокументРезервирования КАК ДокументРезервирования,
	|	Запрос1.ПериодЛимитирования КАК ПериодЛимитирования,
	|	Запрос1.ЦФО КАК ЦФО,
	|	Запрос1.Проект КАК Проект,
	|	Запрос1.СтатьяБюджета КАК СтатьяБюджета,
	|	Запрос1.Аналитика1 КАК Аналитика1,
	|	Запрос1.Аналитика2 КАК Аналитика2,
	|	Запрос1.Аналитика3 КАК Аналитика3,
	|	Запрос1.Аналитика4 КАК Аналитика4,
	|	Запрос1.Аналитика5 КАК Аналитика5,
	|	Запрос1.Аналитика6 КАК Аналитика6,
	|	Запрос1.Валюта КАК Валюта,
	|	Запрос1.ДокументПланирования КАК ДокументПланирования,
	|	СУММА(Запрос1.Зарезервировано) КАК Зарезервировано
	|ИЗ
	|	(ВЫБРАТЬ
	|		Резервы.Предназначение КАК Предназначение,
	|		Резервы.ДокументРезервирования КАК ДокументРезервирования,
	|		Резервы.ПериодЛимитирования КАК ПериодЛимитирования,
	|		Резервы.ЦФО КАК ЦФО,
	|		Резервы.Проект КАК Проект,
	|		Резервы.СтатьяБюджета КАК СтатьяБюджета,
	|		Резервы.Аналитика1 КАК Аналитика1,
	|		Резервы.Аналитика2 КАК Аналитика2,
	|		Резервы.Аналитика3 КАК Аналитика3,
	|		Резервы.Аналитика4 КАК Аналитика4,
	|		Резервы.Аналитика5 КАК Аналитика5,
	|		Резервы.Аналитика6 КАК Аналитика6,
	|		Резервы.Валюта КАК Валюта,
	|		Резервы.ДокументПланирования КАК ДокументПланирования,
	|		Резервы.ЗарезервированоОборот КАК Зарезервировано
	|	ИЗ
	|		РегистрНакопления.ЛимитыПоБюджетам.Обороты(
	|				,
	|				,
	|				,
	|				(Предназначение, ДокументРезервирования, ПериодЛимитирования, ЦФО, Проект, СтатьяБюджета, Аналитика1, Аналитика2, Аналитика3, Аналитика4, Аналитика5, Аналитика6, Валюта, ДокументПланирования) В
	|					(ВЫБРАТЬ
	|						ВТ_ПланируемыеРезервы.Предназначение КАК Предназначение,
	|						ВТ_ПланируемыеРезервы.ДокументРезервирования КАК ДокументРезервирования,
	|						ВТ_ПланируемыеРезервы.ПериодЛимитирования КАК ПериодЛимитирования,
	|						ВТ_ПланируемыеРезервы.ЦФО КАК ЦФО,
	|						ВТ_ПланируемыеРезервы.Проект КАК Проект,
	|						ВТ_ПланируемыеРезервы.СтатьяБюджета КАК СтатьяБюджета,
	|						ВТ_ПланируемыеРезервы.Аналитика1 КАК Аналитика1,
	|						ВТ_ПланируемыеРезервы.Аналитика2 КАК Аналитика2,
	|						ВТ_ПланируемыеРезервы.Аналитика3 КАК Аналитика3,
	|						ВТ_ПланируемыеРезервы.Аналитика4 КАК Аналитика4,
	|						ВТ_ПланируемыеРезервы.Аналитика5 КАК Аналитика5,
	|						ВТ_ПланируемыеРезервы.Аналитика6 КАК Аналитика6,
	|						ВТ_ПланируемыеРезервы.Валюта КАК Валюта,
	|						ВТ_ПланируемыеРезервы.ДокументПланирования КАК ДокументПланирования
	|					ИЗ
	|						ВТ_ПланируемыеРезервы КАК ВТ_ПланируемыеРезервы)) КАК Резервы
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_ПланируемыеРезервы.Предназначение,
	|		ВТ_ПланируемыеРезервы.ДокументРезервирования,
	|		ВТ_ПланируемыеРезервы.ПериодЛимитирования,
	|		ВТ_ПланируемыеРезервы.ЦФО,
	|		ВТ_ПланируемыеРезервы.Проект,
	|		ВТ_ПланируемыеРезервы.СтатьяБюджета,
	|		ВТ_ПланируемыеРезервы.Аналитика1,
	|		ВТ_ПланируемыеРезервы.Аналитика2,
	|		ВТ_ПланируемыеРезервы.Аналитика3,
	|		ВТ_ПланируемыеРезервы.Аналитика4,
	|		ВТ_ПланируемыеРезервы.Аналитика5,
	|		ВТ_ПланируемыеРезервы.Аналитика6,
	|		ВТ_ПланируемыеРезервы.Валюта,
	|		ВТ_ПланируемыеРезервы.ДокументПланирования,
	|		-ВТ_ПланируемыеРезервы.Зарезервировано
	|	ИЗ
	|		ВТ_ПланируемыеРезервы КАК ВТ_ПланируемыеРезервы) КАК Запрос1
	|
	|СГРУППИРОВАТЬ ПО
	|	Запрос1.Предназначение,
	|	Запрос1.ДокументРезервирования,
	|	Запрос1.ПериодЛимитирования,
	|	Запрос1.ЦФО,
	|	Запрос1.Проект,
	|	Запрос1.СтатьяБюджета,
	|	Запрос1.Аналитика1,
	|	Запрос1.Аналитика2,
	|	Запрос1.Аналитика3,
	|	Запрос1.Аналитика4,
	|	Запрос1.Аналитика5,
	|	Запрос1.Аналитика6,
	|	Запрос1.Валюта,
	|	Запрос1.ДокументПланирования
	|
	|ИМЕЮЩИЕ
	|	СУММА(Запрос1.Зарезервировано) <> 0" 
	+ ОбщегоНазначенияУХ.ТекстРазделителяЗапросовПакета();
		
		
КонецФункции	

Процедура СообщитьОбОшибкахКонтроляПроведения(ИмяКонтроля, Объект, Отказ, Результат) Экспорт
	
	Если ИмяКонтроля = Врег("КонтрольИсходныхОперацийБюджетов") Тогда
		СообщитьОбОшибкахКонтроляИсходныхОперацийБюджетов(Объект, Отказ, Результат);
	ИначеЕсли ИмяКонтроля = Врег("КонтрольИсходныхБюджетов") Тогда
		СообщитьОбОшибкахКонтроляИсходныхБюджетов(Объект, Отказ, Результат);
	ИначеЕсли ИмяКонтроля = Врег("КонтрольИсходныхРезервов") Тогда
		СообщитьОбОшибкахКонтроляИсходныхРезервов(Объект, Отказ, Результат);
	ИначеЕсли ИмяКонтроля = Врег("КонтрольЛимитовПоБюджетам") Тогда
		СообщитьОбОшибкахКонтроляЛимитовПоБюджетам(Объект, Отказ, Результат);
	ИначеЕсли ИмяКонтроля = Врег("КонтрольЛимитовПоРезервам") Тогда
		СообщитьОбОшибкахКонтроляЛимитовПоРезервам(Объект, Отказ, Результат);
	ИначеЕсли ИмяКонтроля = Врег("КонтрольЛимитовКОбеспечению") Тогда
		СообщитьОбОшибкахКонтроляЛимитовКОбеспечению(Объект, Отказ, Результат);
	Иначе
		ВызватьИсключение НСтр("ru = 'Ошибка контроля проведения!'");
	КонецЕсли;
	
КонецПроцедуры


#Область СообщенияОбОшибкахПроведения

Процедура СообщитьОбОшибкахКонтроляИсходныхОперацийБюджетов(Объект, Отказ, РезультатЗапроса)

	ТекстСообщения = НСтр("ru = 'Изменились начальные планы. Необходимо обновить их и проверить правильность планов.'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);
		Прервать;

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахКонтроляИсходныхБюджетов(Объект, Отказ, РезультатЗапроса)

	ТекстСообщения = НСтр("ru = 'Изменились начальные значения лимитов по бюджетам. Необходимо обновить их и проверить правильность планов.'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);
		Прервать;

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахКонтроляИсходныхРезервов(Объект, Отказ, РезультатЗапроса)

	ТекстСообщения = НСтр("ru = 'Изменились начальные значения резервов по бюджетам. Необходимо обновить их и проверить правильность планов.'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);
		Прервать;

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахКонтроляЛимитовПоБюджетам(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'В периоде %ПериодЛимитирования% по статье бюджета ""%СтатьяБюджетаИАналитики%""
		|превышен лимит бюджета ЦФО ""%ЦФОПроект%"" на %Сумма% %Валюта%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%СтатьяБюджетаИАналитики%",
									КонтрольУХ.ПредставлениеСтатьиБюджетаИАналитик(
										Выборка.СтатьяБюджета, Выборка.Аналитика1, Выборка.Аналитика2, Выборка.Аналитика3, Выборка.Аналитика4, Выборка.Аналитика5, Выборка.Аналитика6));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЦФОПроект%",
									КонтрольУХ.ПолучитьПредставлениеЦФО(Выборка.ЦФО, Выборка.Проект));		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПериодЛимитирования%",	Строка(Выборка.ПериодЛимитирования));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%",    			Строка(Выборка.Валюта));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сумма%", 				Строка(-Выборка.Превышение));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахКонтроляЛимитовПоРезервам(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'В периоде %ПериодЛимитирования% по статье бюджета ""%СтатьяБюджетаИАналитики%""
		|по документу резервирования %ДокументРезервирования%
		|превышен лимит для ЦФО ""%ЦФОПроект%"" на %Сумма% %Валюта%'");

	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтрЗаменить(ШаблонСообщения, "%СтатьяБюджетаИАналитики%",
									КонтрольУХ.ПредставлениеСтатьиБюджетаИАналитик(
										Выборка.СтатьяБюджета, Выборка.Аналитика1, Выборка.Аналитика2, Выборка.Аналитика3, Выборка.Аналитика4, Выборка.Аналитика5, Выборка.Аналитика6));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ЦФОПроект%",
									КонтрольУХ.ПолучитьПредставлениеЦФО(Выборка.ЦФО, Выборка.Проект));		
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПериодЛимитирования%",	Строка(Выборка.ПериодЛимитирования));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Валюта%",    			Строка(Выборка.Валюта));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДокументРезервирования%",Строка(Выборка.ДокументРезервирования));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сумма%", 				Строка(-Выборка.Превышение));

		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);

	КонецЦикла;

КонецПроцедуры

Процедура СообщитьОбОшибкахКонтроляЛимитовКОбеспечению(Объект, Отказ, РезультатЗапроса)

	ШаблонСообщения = НСтр("ru = 'По документу планирования %1 превышена сумма ""К обеспечению"" на %2 %3
		|	период лимитирования: %4 
		|	статья бюджета: %5
		|	ЦФО/Проект: %6'");
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ТекстСообщения = СтрШаблон(ШаблонСообщения, 
			Выборка.ДокументПланирования, -Выборка.Превышение, Выборка.Валюта, Выборка.ПериодЛимитирования,
			КонтрольУХ.ПредставлениеСтатьиБюджетаИАналитик(
				Выборка.СтатьяБюджета, Выборка.Аналитика1, Выборка.Аналитика2, Выборка.Аналитика3, Выборка.Аналитика4, Выборка.Аналитика5, Выборка.Аналитика6),
			КонтрольУХ.ПолучитьПредставлениеЦФО(Выборка.ЦФО, Выборка.Проект)
		);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,Объект,,,Отказ);

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

	  

#КонецОбласти



#КонецОбласти
