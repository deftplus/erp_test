
// Формирование пакета для передачи
Функция ПреобразоватьОбъектВjson(СсылкаНаОбъект) Экспорт
	
	Результат = "";
	ТипСсылки = ТипЗнч(СсылкаНаОбъект);
	
	Если ТипСсылки = Тип("СправочникСсылка.Контрагенты") Тогда
		Результат = ВыгрузкаКонтрагента(СсылкаНаОбъект);
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
		Результат = ВыгрузкаСтатьиДДС(СсылкаНаОбъект);
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
		Результат = ВыгрузкаПодразделенияОрганизаций(СсылкаНаОбъект);           
	ИначеЕсли ТипСсылки = Тип("ПланВидовХарактеристикСсылка.СтатьиРасходов") Тогда
		Результат = ВыгрузкаСтатьиРасходов(СсылкаНаОбъект);	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получение объекта 1С из переданного пакета 
//
// Параметры:
//  ТелоСообщения  - <Строка> - JSON строка с данными пакета 
//
// Возвращаемое значение:
//  Структура:
// 		* БылиОшибки - Булево - признак наличия ошибок.
// 		* ТекстОшибки - Строка - полный текст ошибки.
// 		* ЗагруженныеОбъекты - Массив - ссылки на загруженные объекты.
// 		* ИдентификаторСообщения - УникальныйИдентификатор - идентификатор полученного сообщения.
// 		* ДатаОбработки - ДатаВремя - дата завершения обработки сообщения.
// 
Функция ПолучитьОбъектИзJSON(ТелоСообщения) Экспорт
	
	ДанныеСообщения = Новый Структура; 
	
	// в этот массив надо поместить все имена всех реквизитов
	// которые должны быть преобразованы в тип Дата
	РеквизитыТипДата = Новый Массив;
	РеквизитыТипДата.Добавить("date_action");
    
    ОписаниеОшибки = "";
	ДанныеПакета = СП_ОбменДанными.ДанныеИзСтрокиJSON(ТелоСообщения, РеквизитыТипДата, ОписаниеОшибки);
	Если ДанныеПакета.Количество() = 0 Тогда
		ДанныеСообщения.Вставить("БылиОшибки", Истина);
		ДанныеСообщения.Вставить("ТекстОшибки", 
		СтрШаблон("Не удалось прочитать тело JSON сообщения:%1%2%3",
		ОписаниеОшибки, Символы.ПС, ТелоСообщения));
		
		Возврат ДанныеСообщения;
	КонецЕсли;  
	
	Если Не СП_ОбменДанными.ПроверитьСтруктуруПакета(ДанныеПакета) Тогда
		ДанныеСообщения.Вставить("БылиОшибки", Истина);
		ДанныеСообщения.Вставить("ТекстОшибки", 
		СтрШаблон("Не поддерживаемая структура JSON сообщения:%1%2",
		Символы.ПС, ТелоСообщения));
		
		Возврат ДанныеСообщения;    
	КонецЕсли;
	
	ПоддерживаемыеОперации = СП_ОбменДанными.ПоддерживаемыеОперации();
	Действие = Неопределено;
	Если ДанныеПакета.head.Свойство("type_action", Действие) Тогда
		Если ПоддерживаемыеОперации.Найти(Действие) = Неопределено Тогда
			Действие = Неопределено;
		КонецЕсли;        	
	КонецЕсли;
	
	Если Действие = Неопределено Тогда
		ДанныеСообщения.Вставить("БылиОшибки", Истина);
		ДанныеСообщения.Вставить("ТекстОшибки", 
		СтрШаблон("Не поддерживаемая операция в JSON сообщении:%1%2",
		Символы.ПС, ТелоСообщения));
		
		Возврат ДанныеСообщения;            	
		
	КонецЕсли;
	
	МетаданныеОбъекта = МетаданныеПоЗаголовкуПакета(ДанныеПакета);
	Если МетаданныеОбъекта = Неопределено Тогда
		ДанныеСообщения.Вставить("БылиОшибки", Истина);
		ДанныеСообщения.Вставить("ТекстОшибки", 
		СтрШаблон("Не удалось определить объект метаданных из JSON сообщения:%1%2",
		Символы.ПС, ТелоСообщения));
		
		Возврат ДанныеСообщения;    
	КонецЕсли;
	
	// сюда добавляем обработчики загрузка объектов
	// МетаданныеОбъекта - объект метаданных загружаемого объекта
	// ДанныеПакета - структура с данными полученного пакета данных
	// Действие - строка с требуемым действием  
    РезультатЗагрузки = Новый Структура();
    
    РезультатЗагрузки.Вставить("Успешно", Ложь);
    РезультатЗагрузки.Вставить("ТекстОшибки", СтрШаблон("Нет обработчика для %1", МетаданныеОбъекта.ПолноеИмя()));
    
	Если МетаданныеОбъекта = Метаданные.Справочники.СтатьиДвиженияДенежныхСредств Тогда
		РезультатЗагрузки = ЗагрузкаСтатьиДДС(МетаданныеОбъекта, ДанныеПакета, Действие);    
	КонецЕсли;                       
	
	Если РезультатЗагрузки.Успешно Тогда
		ДанныеСообщения.Вставить("ЗагруженныеОбъекты", РезультатЗагрузки.МассивЗагруженныхОбъектов);
		ДанныеСообщения.Вставить("ИдентификаторСообщения", "");
		ДанныеСообщения.Вставить("ДатаОбработки", ТекущаяДатаСеанса());
		ДанныеСообщения.Вставить("ИмяОбъекта", МетаданныеОбъекта.ПолноеИмя());
		ДанныеСообщения.Вставить("БылиОшибки", Ложь);
		
	Иначе
		ДанныеСообщения.Вставить("БылиОшибки", Истина);
		ДанныеСообщения.Вставить("ТекстОшибки", СтрШаблон("%1%2JSON Сообщение: %3",
		РезультатЗагрузки.ТекстОшибки, Символы.ПС, ТелоСообщения));
		
	КонецЕсли;
	
	Возврат ДанныеСообщения;
	
КонецФункции // ПолучитьОбъектИзJSON()

#Область Служебные

Функция МетаданныеПоЗаголовкуПакета(ДанныеПакета)
	
	Результат = Неопределено;
	
	Попытка
		СтруктураЗаголовок = Неопределено;
		Если ДанныеПакета.Свойство("head", СтруктураЗаголовок) Тогда
			МетаданныеОбъекта = Неопределено;
			
			// Тип объекта
			ТипОбъекта = НРег(СтруктураЗаголовок.object_type);
			Если ТипОбъекта = "reference" Тогда
				МетаданныеОбъекта = Метаданные.Справочники;
			ИначеЕсли ТипОбъекта = "document" Тогда
				МетаданныеОбъекта = Метаданные.Документы;
			Иначе
				Возврат Неопределено;
			КонецЕсли;                    
			
			
			// Вид Объекта  
			ВидОбъекта = СтруктураЗаголовок.subtype;
			Если ВидОбъекта = "СтатьиДДС" ИЛИ ВидОбъекта = "СтатьиДвиженияДенежныхСредств" Тогда
				Результат = МетаданныеОбъекта[Метаданные.Справочники.СтатьиДвиженияДенежныхСредств.Имя];
			Иначе
				Результат = МетаданныеОбъекта[ВидОбъекта];
			КонецЕсли;
		КонецЕсли;
	Исключение
		Результат = Неопределено;    
	КонецПопытки;
	
	Возврат Результат;
КонецФункции // МетаданныеПоЗаголовкуПакета()


Функция СтруктураРезультатаЗагрузкиОбъекта()
	
	Результат = Новый Структура;
	Результат.Вставить("Успешно", Ложь);
	Результат.Вставить("ТекстОшибки", ИнформацияОбОшибке()); 
	Результат.Вставить("МассивЗагруженныхОбъектов", Новый Массив);
	Результат.Вставить("СвойстваСообщения", Новый Структура);
	Результат.Вставить("ДанныеОбъекта", Новый Структура);
	
	Возврат Результат;
	
КонецФункции // СтруктурраРезультатаЗагрузкиОбъекта()


Функция СтатусПредопределенногоЭлемента(МетаданныеОбъекта, ИмяПредопределенныхДанных)
	
	Результат = Новый Структура("Ссылка, Статус", Неопределено, "НеСуществует"); 
	
	Попытка
		Результат.Ссылка = ОбщегоНазначения.ПредопределенныйЭлемент(СтрШаблон("%1.%2",
		МетаданныеОбъекта.ПолноеИмя(), ИмяПредопределенныхДанных));
		Если Результат.Ссылка = Неопределено Тогда
			Результат.Статус = "ЕстьВКонфигураторе";
		Иначе    
			Результат.Статус = "ЕстьВБазе";
		КонецЕсли;    
	Исключение
		Результат.Статус = "НеСуществует";
	КонецПопытки;
	
	Возврат Результат;
КонецФункции // СтатусПредопределенногоЭлемента()



// Ищет элемент справочника по ИД или ИмяПредопределенныхДанных.
// Если ИмяПредопределенныхДанных не существует в конфигураторе, то ищет по ИД
Функция НайтиЭлементСправочника(МетаданныеОбъекта, ИдентификаторОбъекта, ИмяПредопределенныхДанных)
	
	
	ИмяМетаданных = МетаданныеОбъекта.Имя;
	Результат = Справочники[ИмяМетаданных].ПустаяСсылка();
	
	Если Не ПустаяСтрока(ИмяПредопределенныхДанных) Тогда
		
		СтатусПредопределенногоЭлемента = СтатусПредопределенногоЭлемента(МетаданныеОбъекта, ИмяПредопределенныхДанных);
		
		Если СтатусПредопределенногоЭлемента.Статус <> "НеСуществует" Тогда
			Если СтатусПредопределенногоЭлемента.Ссылка <> Неопределено Тогда
				Результат = СтатусПредопределенногоЭлемента.Ссылка;    
			КонецЕсли;    
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Попытка        
		УИД = Новый УникальныйИдентификатор(ИдентификаторОбъекта);
		Результат = Справочники[ИмяМетаданных].ПолучитьСсылку(УИД).ПолучитьОбъект().Ссылка;                     
	Исключение
		Результат = Справочники[ИмяМетаданных].ПустаяСсылка();
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции 


Функция ПараметрыОбновленияРеквизитов()
	
	Результат = Новый Структура;
	Результат.Вставить("РежимОбмена", Ложь);
	Результат.Вставить("СоздаватьЕслиНеСуществует", Ложь);
	Результат.Вставить("ОтключитьДатуЗапретаРедактирования", Ложь);
	Результат.Вставить("ОтключитьМеханизмРегистрацииОбъектов", Ложь);
	Результат.Вставить("ИД_Нового", "");
	
	Возврат Результат;
	
КонецФункции // ПараметрыОбновленияРеквизитов()


Процедура ОбновитьРеквизитыОбъекта(Ссылка, ДанныеРеквизитов, ПараметрыОбновления, МетаданныеОбъекта) 
	
	РежимОбмена = ПараметрыОбновления.РежимОбмена;
	ОтключитьДатуЗапретаРедактирования = ПараметрыОбновления.ОтключитьДатуЗапретаРедактирования;   
	СоздаватьЕслиНеСуществует = ПараметрыОбновления.СоздаватьЕслиНеСуществует;
	ОтключитьМеханизмРегистрацииОбъектов = ПараметрыОбновления.ОтключитьМеханизмРегистрацииОбъектов;
	ИД_Нового = ПараметрыОбновления.ИД_Нового;
	
	СсылкаСуществует = ОбщегоНазначения.СсылкаСуществует(Ссылка);
	Если (Не СсылкаСуществует) И (Не СоздаватьЕслиНеСуществует) Тогда		
		Возврат; 
	КонецЕсли;	
	
	ПроверкаДатыЗапретаОтключена = ОтключитьДатуЗапретаРедактирования(ОтключитьДатуЗапретаРедактирования);
	
	НачатьТранзакцию();
	Попытка                                            
		
		Если (Не СсылкаСуществует) И СоздаватьЕслиНеСуществует Тогда    
			Если ОбщегоНазначения.ЭтоСправочник(МетаданныеОбъекта) Тогда
				ЭтоГруппа = Ложь;
				Если ДанныеРеквизитов.Свойство("ЭтоГруппа") Тогда
					ЭтоГруппа = ДанныеРеквизитов.ЭтоГруппа;
				КонецЕсли;                       
				Если ЭтоГруппа Тогда
					СамОбъект = Справочники[МетаданныеОбъекта.Имя].СоздатьГруппу();                    
				Иначе	
					СамОбъект = Справочники[МетаданныеОбъекта.Имя].СоздатьЭлемент();                    
				КонецЕсли;               
				Если Не ПустаяСтрока(ИД_Нового) Тогда
					УИД = Новый УникальныйИдентификатор(ИД_Нового);
					СсылкаНового = Справочники[МетаданныеОбъекта.Имя].ПолучитьСсылку(УИД);
					СамОбъект.УстановитьСсылкуНового(СсылкаНового);
				КонецЕсли;
			Иначе
				ВызватьИсключение СтрШаблон("Обновление реквизитов: Неподдерживаемый вид метаданных %1", МетаданныеОбъекта.ПолноеИмя());
			КонецЕсли;    
		Иначе     
			ИмяОбъекта = ОбщегоНазначения.ИмяТаблицыПоСсылке(Ссылка);
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			СамОбъект = Ссылка.ПолучитьОбъект();            
		КонецЕсли;
		
		СамОбъект.Заблокировать();
		
		ЗаполнитьЗначенияСвойств(СамОбъект, ДанныеРеквизитов);        
		
		Если СамОбъект.ЭтоНовый() И (МетаданныеОбъекта.ДлинаКода > 0) И Не ЗначениеЗаполнено(СамОбъект.Код) Тогда
			СамОбъект.УстановитьНовыйКод();
		КонецЕсли;               
		
		Если РежимОбмена Тогда
			СамОбъект.ОбменДанными.Загрузка = Истина;			
		КонецЕсли;	
		Если ОтключитьМеханизмРегистрацииОбъектов Тогда
			СамОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		КонецЕсли;    
		СамОбъект.Записать();      
		
		Ссылка = СамОбъект.Ссылка;
		
		ЗафиксироватьТранзакцию();
		
		ОтключитьДатуЗапретаРедактирования(ПроверкаДатыЗапретаОтключена);
		
	Исключение
		
		ОтменитьТранзакцию();		
		ОтключитьДатуЗапретаРедактирования(ПроверкаДатыЗапретаОтключена);
		
		ВызватьИсключение;
		
	КонецПопытки;	
	
	
КонецПроцедуры


Функция ОтключитьДатуЗапретаРедактирования(ОтключитьДатуЗапрета = Истина)
	
	СтароеЗначение = Ложь;
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения") Тогда
		МодульДатыЗапретаИзменения = ОбщегоНазначения.ОбщийМодуль("ДатыЗапретаИзменения");
		СтароеЗначение = МодульДатыЗапретаИзменения.ПроверкаДатЗапретаОтключена();
		Если СтароеЗначение <> ОтключитьДатуЗапрета Тогда
			МодульДатыЗапретаИзменения.ОтключитьПроверкуДатЗапрета(ОтключитьДатуЗапрета);
		КонецЕсли;			
	КонецЕсли;		
	
	Возврат СтароеЗначение;
КонецФункции	

#КонецОбласти



#Область Контрагенты

Функция ВыгрузкаКонтрагента(СсылкаНаОбъект)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Контрагенты.Наименование КАК Наименование,
	|	Контрагенты.НаименованиеПолное КАК НаименованиеПолное,
	|	Представление(Контрагенты.ЮридическоеФизическоеЛицо) КАК ЮридическоеФизическоеЛицо,
	|	Контрагенты.СтранаРегистрации.Код КАК СтранаРегистрацииКод,
	|	Контрагенты.ИНН КАК ИНН,
	|	Контрагенты.КПП КАК КПП,
	|	Контрагенты.КодПоОКПО КАК КодПоОКПО,
	|	Контрагенты.ОсновнойБанковскийСчет.НомерСчета КАК ОсновнойБанковскийСчетНомерСчета,
	|	Контрагенты.НалоговыйНомер КАК НалоговыйНомер,
	|	Контрагенты.РегистрационныйНомер КАК РегистрационныйНомер,
	|	Контрагенты.ГосударственныйОрган КАК ГосударственныйОрган,
	|	Контрагенты.СвидетельствоСерияНомер КАК СвидетельствоСерияНомер,
	|	Контрагенты.СвидетельствоДатаВыдачи КАК СвидетельствоДатаВыдачи,
	|	Контрагенты.Самозанятый КАК Самозанятый,
	|	Контрагенты.Комментарий КАК Комментарий,
	|	Т_КодРС.Значение КАК КодРС
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты.ДополнительныеРеквизиты КАК Т_КодРС
	|		ПО (Т_КодРС.Ссылка = Контрагенты.Ссылка
	|				И Т_КодРС.Свойство.Имя = ""КодРС_Контрагенты"")
	|ГДЕ
	|	Контрагенты.Ссылка = &Ссылка
	|");
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	РезультатЗапроса = Запрос.Выполнить(); 
	ДанныеЗаголовка = СП_ОбменДанными.РезультатЗапросаВСтруктуру(РезультатЗапроса);
	
	Возврат СП_ОбменДанными.ДанныеВПакетОбмена(СсылкаНаОбъект, "update", ДанныеЗаголовка);
	
КонецФункции // ВыгрузкаКонтрагента()

#КонецОбласти

#Область СтатьиДвиженияДенежныхСредств

Функция ВыгрузкаСтатьиДДС(СсылкаНаОбъект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиДвиженияДенежныхСредств.Ссылка КАК GUID,
		|	СтатьиДвиженияДенежныхСредств.Код КАК Code,
		|	СтатьиДвиженияДенежныхСредств.Наименование КАК description,
		|	СтатьиДвиженияДенежныхСредств.ПометкаУдаления КАК isDelete,
		|	СтатьиДвиженияДенежныхСредств.ЭтоГруппа КАК isfolder,
		|	СтатьиДвиженияДенежныхСредств.Родитель.ЭтоГруппа КАК isfolderParen,
		|	СтатьиДвиженияДенежныхСредств.Родитель КАК GUIDParent,
		|	СтатьиДвиженияДенежныхСредств.Родитель.Код КАК CodParent,
		|	СтатьиДвиженияДенежныхСредств.Родитель.Наименование КАК NameParent,
		|	СтатьиДвиженияДенежныхСредств.Родитель.ИмяПредопределенныхДанных КАК parent_PredefinedDataName,
		|	СтатьиДвиженияДенежныхСредств.ИмяПредопределенныхДанных КАК PredefinedDataName,
		|	СтатьиДвиженияДенежныхСредств.ВидДвиженияДенежныхСредств КАК type_of_cash_flow
		|ИЗ
		|	Справочник.СтатьиДвиженияДенежныхСредств КАК СтатьиДвиженияДенежныхСредств
		|ГДЕ
		|	СтатьиДвиженияДенежныхСредств.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаголовка = СП_ОбменДанными.РезультатЗапросаВСтруктуру(РезультатЗапроса);
	Если ДанныеЗаголовка.Количество() > 0 Тогда
		
		// код 
		ДанныеЗаголовка.Code = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(ДанныеЗаголовка.Code, Истина, Истина); 
		
		// Родитель
		//ДанныеРодителя = Новый Структура("parent_PredefinedDataName, GUIDParent");
		//ЗаполнитьЗначенияСвойств(ДанныеРодителя, ДанныеЗаголовка);
		//ДанныеЗаголовка.parent = ДанныеРодителя;
		//ДанныеЗаголовка.Удалить("parent_PredefinedDataName");
		//ДанныеЗаголовка.Удалить("GUIDParent");
		
		// ВидДвижения       
		Если ЗначениеЗаполнено(ДанныеЗаголовка.type_of_cash_flow) Тогда
			ДанныеЗаголовка.type_of_cash_flow = СП_ОбменДанными.ПеречислениеВСтроку(
			"Перечисление.ВидыДвиженийДенежныхСредств",
			ДанныеЗаголовка.type_of_cash_flow); 
			
		Иначе
			ДанныеЗаголовка.type_of_cash_flow = "";
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СП_ОбменДанными.ДанныеВПакетОбмена(СсылкаНаОбъект, "update", ДанныеЗаголовка);
	
КонецФункции // ВыгрузкаСтатьиДДС()


Функция ЗагрузкаСтатьиДДС(МетаданныеОбъекта, ДанныеПакета, Действие)
	
	Результат = СтруктураРезультатаЗагрузкиОбъекта();   
	
	Попытка
		
		ДанныеСправочника = Новый Структура;
		
		ДанныеСправочника.Вставить("ИдентификаторОбъекта", ДанныеПакета.caption.guid);
		ДанныеСправочника.Вставить("ИмяПредопределенныхДанных", ДанныеПакета.caption.PredefinedDataName);                       
		ДанныеСправочника.Вставить("Наименование", ДанныеПакета.caption.description);                       
		ДанныеСправочника.Вставить("ЭтоГруппа", ДанныеПакета.caption.isfolder);                       
		Если Не ПустаяСтрока(ДанныеПакета.caption.type_of_cash_flow) Тогда
			ДанныеСправочника.Вставить("ВидДвиженияДенежныхСредств", 
			СП_ОбменДанными.СтрокуВПеречисление(Метаданные.Перечисления.ВидыДвиженийДенежныхСредств.ПолноеИмя(),
			ДанныеПакета.caption.type_of_cash_flow));                       
		КонецЕсли;                
        Если ЗначениеЗаполнено(ДанныеПакета.caption.parent) Тогда
            Если ТипЗнч(ДанныеПакета.caption.parent) = Тип("Строка") Тогда
    			КлючРодителя = ДанныеПакета.caption.parent;
    			ЭтоГУИД = СП_ОбменДанными.ПроверитьСтрокуПоШаблону(КлючРодителя,"[0-9a-fA-F]{8}-([0-9a-fA-F]{4}-){3}[0-9a-fA-F]{12}");
    			Если ЭтоГУИД  Тогда
    				ИдентификаторОбъекта = КлючРодителя;
    				ИмяПредопределенныхДанных = "";
    			Иначе	
    				ИдентификаторОбъекта = "";
    				ИмяПредопределенныхДанных = КлючРодителя;            
    			КонецЕсли;
            Иначе             
  				ИдентификаторОбъекта = ДанныеПакета.caption.parent.parent_GUID;
   				ИмяПредопределенныхДанных = ДанныеПакета.caption.parent.parent_PredefinedDataName;
            КонецЕсли;
            Если Не ПустаяСтрока(ИдентификаторОбъекта) Или Не ПустаяСтрока(ИмяПредопределенныхДанных) Тогда
    			РодительСсылка = НайтиЭлементСправочника(МетаданныеОбъекта, ИдентификаторОбъекта, ИмяПредопределенныхДанных);
    			Если РодительСсылка.Пустая() Тогда
    				ВызватьИсключение "Не найден родитель элемента";
    			КонецЕсли;  
    			ДанныеСправочника.Вставить("Родитель", РодительСсылка);                       
            КонецЕсли;
		КонецЕсли;            
		
		СправочникСсылка = НайтиЭлементСправочника(МетаданныеОбъекта, 
		ДанныеСправочника.ИдентификаторОбъекта, ДанныеСправочника.ИмяПредопределенныхДанных);
		
		// ошибкой будем считать только случай, когда удаляем несуществующий объект 
		// во всех остальных - создаем его
		Если Действие = "delete" Тогда
			Если СправочникСсылка.Пустая() Тогда
				ВызватьИсключение "Удаляемого объекта не существует";
			КонецЕсли;
			СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
			Если Не СправочникОбъект.ПометкаУдаления Тогда
				СправочникОбъект.Заблокировать();		
				СправочникОбъект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;    
		Иначе // "insert", "update"                                                         
			
			ПараметрыОбновления = ПараметрыОбновленияРеквизитов();
			ПараметрыОбновления.СоздаватьЕслиНеСуществует = Истина;
			ПараметрыОбновления.РежимОбмена = Истина; 
			ПараметрыОбновления.ИД_Нового =  ДанныеСправочника.ИдентификаторОбъекта;
			
			// если переданы предопределенные данные, но такого элемента нет в 
			// конфигураторе, то ИмяПредопрделенныхДанных очищаем и создем и ищем его как
			// обычные элемент 
			Если Не ПустаяСтрока(ДанныеСправочника.ИмяПредопределенныхДанных) Тогда 
				Если СтатусПредопределенногоЭлемента(МетаданныеОбъекта, 
					ДанныеСправочника.ИмяПредопределенныхДанных).Статус = "НеСуществует" Тогда
					
					ДанныеСправочника.ИмяПредопределенныхДанных = "";
					
				КонецЕсли;    
			КонецЕсли;    
			
			ОбновитьРеквизитыОбъекта(СправочникСсылка, ДанныеСправочника, ПараметрыОбновления, МетаданныеОбъекта);
			
			Результат.Успешно = Истина;
			Результат.МассивЗагруженныхОбъектов.Добавить(СправочникСсылка);
		КонецЕсли;    
		
	Исключение
		Результат.Успешно = Ложь;
		Результат.ТекстОшибки = СтрШаблон("Ошибка загрузки статьи ДДС. Текст ошибки: %1",
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции // ЗагрузкаСтатьиДДС(ДанныеПакета)()

#КонецОбласти

#Область ПодразделенияОрганизаций

Функция ВыгрузкаПодразделенияОрганизаций(СсылкаНаОбъект)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПодразделенияОрганизаций.Ссылка КАК GUID,
		|	ПодразделенияОрганизаций.Код + ""/"" + ПодразделенияОрганизаций.Владелец.ИНН + ""/"" + ПодразделенияОрганизаций.Владелец.КПП КАК KeyField,
		|	ПодразделенияОрганизаций.Родитель КАК GUIDParent,
		|	ПодразделенияОрганизаций.Родитель.Код КАК CodParent,
		|	ПодразделенияОрганизаций.Родитель.Наименование КАК NameParent,
		|	ЛОЖЬ КАК isfolder,
		|	ЛОЖЬ КАК isfolderParen,
		|	ПодразделенияОрганизаций.Код КАК code,
		|	ПодразделенияОрганизаций.Наименование КАК description,
		|	ПодразделенияОрганизаций.ПометкаУдаления КАК isDelete,
		|	ПодразделенияОрганизаций.ГоловнаяОрганизация КАК HeadOrganization,
		|	ПодразделенияОрганизаций.ГоловнаяОрганизация.ИНН КАК HeadOrganization_INN,
		|	ПодразделенияОрганизаций.РеквизитДопУпорядочивания КАК AdditionalOrderingDetails,
		|	ПодразделенияОрганизаций.РайонныйКоэффициент КАК RegionalCoefficient,
		|	ПодразделенияОрганизаций.ОбособленноеПодразделение КАК SeparateDivision,
		|	ПодразделенияОрганизаций.Сформировано КАК Created,
		|	ПодразделенияОрганизаций.ДатаСоздания КАК DataCreation,
		|	ПодразделенияОрганизаций.Расформировано КАК Decreated,
		|	ПодразделенияОрганизаций.ДатаРасформирования КАК DataDecreation,
		|	ПодразделенияОрганизаций.РеквизитДопУпорядочиванияИерархического КАК AdditionalOrderingDetailsHierarchical,
		|	ПодразделенияОрганизаций.КодОКВЭД КАК CodeOKVED,
		|	ПодразделенияОрганизаций.НаименованиеОКВЭД КАК DescriptionOKVED,
		|	ПодразделенияОрганизаций.ИмеетНомерТерриториальногоОрганаРосстата КАК HasTheRosstatAuthorityTerritorialNumber,
		|	ПодразделенияОрганизаций.НомерТерриториальногоОрганаРосстата КАК RosstatAuthorityTerritorialNumber,
		|	ПодразделенияОрганизаций.ПроцентСевернойНадбавки КАК NorthernAllowancePercentage,
		|	ПодразделенияОрганизаций.КодОрганаФСГС КАК CodeFSGS,
		|	ПодразделенияОрганизаций.КодОКВЭД2 КАК CodeOKVED2,
		|	ПодразделенияОрганизаций.НаименованиеОКВЭД2 КАК DescriptionOKVED2,
		|	ПодразделенияОрганизаций.РайонныйКоэффициентРФ КАК RegionalCoefficientRF,
		|	ПодразделенияОрганизаций.НаименованиеДляЗаписейОТрудовойДеятельности КАК NameForEmploymentRecords,
		|	ПодразделенияОрганизаций.ГрафикРаботыСотрудников.Наименование КАК EmployeeWorkSchedule
		//|	,ПодразделенияОрганизаций.СамостоятельнаяКлассификационнаяЕдиница КАК IndependentClassificationUnit,
		//|	ПодразделенияОрганизаций.РегистрацияВНалоговомОргане КАК TaxAuthorityRegistration,
		//|	ПодразделенияОрганизаций.ПрименяемыйЛьготныйТерриториальныйТариф КАК ApplicablePreferentialTerritorialTariff
		|ИЗ
		|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
		|ГДЕ
		|	ПодразделенияОрганизаций.Ссылка = &Ссылка
		|";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаголовка = СП_ОбменДанными.РезультатЗапросаВСтруктуру(РезультатЗапроса);
	
	Возврат СП_ОбменДанными.ДанныеВПакетОбмена(СсылкаНаОбъект, "update", ДанныеЗаголовка);
	
КонецФункции

#КонецОбласти

#Область ПВХ_СтатьиРасходов

Функция ВыгрузкаСтатьиРасходов(СсылкаНаОбъект)
	
	РодительВерхнегоУровня = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СсылкаНаОбъект);
	Запрос.УстановитьПараметр("ВыгружатьВБухгалтерию", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоРеквизиту("Имя", "ВыгружатьВБухгалтерию"));
	
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
        |	СтатьиРасходов.Ссылка КАК Родитель
		|ИЗ
        |	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
    	|ГДЕ
        |	СтатьиРасходов.Ссылка = &Ссылка
    	|ИТОГИ ПО
        |	Ссылка ТОЛЬКО ИЕРАРХИЯ
		|";
	Выборка = Запрос.Выполнить().Выбрать();
    Выборка.Следующий();
	РодительВерхнегоУровня = ?(Выборка.Родитель = ПланыВидовХарактеристик.СтатьиРасходов.ПустаяСсылка(), СсылкаНаОбъект, Выборка.Родитель);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	СтатьиРасходов.Ссылка КАК GUID,
	               |	СтатьиРасходов.Родитель КАК GUIDParent,
	               |	СтатьиРасходов.Родитель.Код КАК CodParent,
	               |	СтатьиРасходов.Родитель.Наименование КАК NameParent,
	               |	СтатьиРасходов.ЭтоГруппа КАК isfolder,
	               |	СтатьиРасходов.Родитель.ЭтоГруппа КАК isfolderParen,
	               |	СтатьиРасходов.Код КАК Code,
	               |	СтатьиРасходов.Наименование КАК description,
	               |	СтатьиРасходов.ПометкаУдаления КАК isDelete,
	               |	СтатьиРасходов.ВидДеятельностиДляНалоговогоУчетаЗатрат КАК TypeOfActivityForTaxAccountingCosts,
	               |	СтатьиРасходов.ВидПрочихДоходовИРасходов КАК ViewOfOtherIncomeAndExpenses,
	               |	СтатьиРасходов.ПринятиеКНалоговомуУчету КАК AcceptanceOfTaxAccounting,
	               |	СтатьиРасходов.РеквизитДопУпорядочивания КАК AdditionalOrderingDetails,
	               |	СтатьиРасходов.ВидРасходов КАК TypeOfExpenses,
	               |	ЕСТЬNULL(СтатьиРасходовДополнительныеРеквизиты.Значение, ЛОЖЬ) КАК UploadToAccounting
	               |ИЗ
	               |	ПланВидовХарактеристик.СтатьиРасходов КАК СтатьиРасходов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.СтатьиРасходов.ДополнительныеРеквизиты КАК СтатьиРасходовДополнительныеРеквизиты
	               |		ПО (СтатьиРасходовДополнительныеРеквизиты.Ссылка = &РодительВерхнегоУровня)
	               |			И (СтатьиРасходовДополнительныеРеквизиты.Свойство = &ВыгружатьВБухгалтерию)
	               |ГДЕ
	               |	СтатьиРасходов.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("РодительВерхнегоУровня", РодительВерхнегоУровня);
	РезультатЗапроса = Запрос.Выполнить();
	
	ДанныеЗаголовка = СП_ОбменДанными.РезультатЗапросаВСтруктуру(РезультатЗапроса);
	
	Возврат СП_ОбменДанными.ДанныеВПакетОбмена(СсылкаНаОбъект, "update", ДанныеЗаголовка);
	
КонецФункции	

#КонецОбласти

