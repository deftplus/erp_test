
#Область ЗаполнениеГрафика

Функция ЗаполнитьГрафик(ДанныеГрафика, СтруктураДействий) Экспорт
	
	ПодготовитьДанныеГрафика(			ДанныеГрафика);
	ДобавитьЗависимыеДействия(			ДанныеГрафика, СтруктураДействий);	
	ОчиститьГрафик(						ДанныеГрафика, СтруктураДействий);
		
	ЗаполнитьДанныеГрафикаДо(			ДанныеГрафика, СтруктураДействий);
	СкорректироватьГраницыГрафика(		ДанныеГрафика, СтруктураДействий);
	ЗаполнитьСтоимостьОбъектовПоРСП(	ДанныеГрафика, СтруктураДействий);
	
	ЗаполнитьОсновнойДолгПоВНА(			ДанныеГрафика, СтруктураДействий);
	ЗаполнитьОсновнойДолг(				ДанныеГрафика, СтруктураДействий);
	ЗаполнитьУплатуПроцентов(			ДанныеГрафика, СтруктураДействий);	
	ЗаполнитьДопРасходы(				ДанныеГрафика, СтруктураДействий);
	ЗаполнитьАвансы(					ДанныеГрафика, СтруктураДействий);
	ЗаполнитьДенежныеПотоки(			ДанныеГрафика, СтруктураДействий);
	ЗаполнитьОтчетныеДаты(				ДанныеГрафика, СтруктураДействий);	
	
	СвернутьУдалитьПустыеУпорядочить(	ДанныеГрафика, СтруктураДействий);	
	ЗаполнитьЭСП(						ДанныеГрафика, СтруктураДействий);
	ЗаполнитьЧПС(						ДанныеГрафика, СтруктураДействий);
	ТестРеструктуризации(				ДанныеГрафика, СтруктураДействий);
	РассчитатьНачисленияПогашения(		ДанныеГрафика, СтруктураДействий);
	ВыделитьДолгосрочнуюЧасть(			ДанныеГрафика, СтруктураДействий);
	
КонецФункции

#Область ОперацииЗаполненияГрафика

Процедура ПодготовитьДанныеГрафика(ДанныеГрафика)
	
	ПараметрыУчетаФИ = ДанныеГрафика.СтрокаФИ.ПараметрыУчетаФинансовогоИнструментаМСФО;
	
	ДанныеГрафика.Вставить("КэшФИ", 				Новый Структура);
	ДанныеГрафика.Вставить("Лизинг", 				ПараметрыУчетаФИ.ВидОбъектаФинансовогоХарактера.Лизинг);
	ДанныеГрафика.Вставить("ВозвратПоГрафику",		ПараметрыУчетаФИ.ВидОбъектаФинансовогоХарактера.ВозвратПоГрафику);
	ДанныеГрафика.Вставить("ДисконтНаБалансе",		ПараметрыУчетаФИ.ВидОбъектаФинансовогоХарактера.ПорядокУчетаДисконта);
	ДанныеГрафика.Вставить("Задолженность",			ПараметрыУчетаФИ.ВидОбъектаФинансовогоХарактера.Задолженность);
	ДанныеГрафика.Вставить("ПереводВКраткосрочную",	ПараметрыУчетаФИ.ВидОбъектаФинансовогоХарактера.ПереводВКраткосрочную);
	ДанныеГрафика.Вставить("ДатаПризнанияДо",		ДанныеГрафика.СтрокаФИ.ДатаПризнания);
	ДанныеГрафика.Вставить("ДатаОкончанияДо",		ДанныеГрафика.СтрокаФИ.ДатаОкончания);
	ДанныеГрафика.Вставить("ВалютаФИ",				ВалютаФИ(ДанныеГрафика.СтрокаФИ.ФИ));
	ДанныеГрафика.Вставить("ФВ",					ОбщегоНазначенияУХ.ПолучитьЗначенияРеквизитов(ДанныеГрафика.Документ.Организация, "ФункциональнаяВалюта"));
	ДанныеГрафика.Вставить("РассчитыватьДисконт", 	РассчитыватьДисконт(ДанныеГрафика.СтрокаФИ.ПараметрыУчетаФинансовогоИнструментаМСФО.ВидОбъектаФинансовогоХарактера, ДанныеГрафика.ДополнительныеРасходы));
	
	отЧислоТочность2 = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18, 2);
	отЧислоТочность3 = ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18, 3);
	
	ДобавитьНовуюКолонку(ДанныеГрафика.ГрафикМСФО, "ЧислоДнейНачисления", 		отЧислоТочность2);
	ДобавитьНовуюКолонку(ДанныеГрафика.ГрафикМСФО, "ДоляПриДосрочномВозврате", 	отЧислоТочность2);
	ДобавитьНовуюКолонку(ДанныеГрафика.ГрафикМСФО, "ДоляПриПоступлении", 		отЧислоТочность2);
	ДобавитьНовуюКолонку(ДанныеГрафика.ГрафикМСФО, "ОтчетнаяДата");
	ДобавитьНовуюКолонку(ДанныеГрафика.ГрафикМСФО, "ЭСП_ОсновнойДолг_Возврат", 	отЧислоТочность2);
	
	ДобавитьНовуюКолонку(ДанныеГрафика.ГрафикМСФО, "Проценты_ЗадолженностьТочность",		отЧислоТочность3);
	ДобавитьНовуюКолонку(ДанныеГрафика.ГрафикМСФО, "ЭСП_Проценты_ЗадолженностьТочность",	отЧислоТочность3);

КонецПроцедуры

Процедура ДобавитьЗависимыеДействия(ДанныеГрафика, СтруктураДействий)
	
	СтруктураВсеДействия = Новый Структура(
		"ОчиститьГрафик,
		|ЗаполнитьДанныеГрафикаДо,
		|СкорректироватьГраницыГрафика,
		|ЗаполнитьУплатуПроцентов,
		|ЗаполнитьДопРасходы,	
		|ЗаполнитьАвансы,
		|ЗаполнитьДенежныеПотоки,
		|ЗаполнитьОтчетныеДаты,
		|СвернутьУдалитьПустыеУпорядочить,
		|ТестРеструктуризации,
		|ЗаполнитьЭСП,
		|ЗаполнитьЧПС,		
		|РассчитатьНачисленияПогашения,
		|ВыделитьДолгосрочнуюЧасть");
	
	Если ДанныеГрафика.Лизинг Тогда
		СтруктураДействий.Вставить("ЗаполнитьОсновнойДолгПоВНА");
	Иначе 
		СтруктураДействий.Вставить("ЗаполнитьОсновнойДолг");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(СтруктураДействий, СтруктураВсеДействия, Истина);

КонецПроцедуры

Процедура ОчиститьГрафик(ДанныеГрафика, СтруктураДействий)

	Если Не СтруктураДействий.Свойство("ОчиститьГрафик") Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеГрафика.ГрафикМСФО.Очистить();
	
КонецПроцедуры

Процедура ЗаполнитьДанныеГрафикаДо(ДанныеГрафика, СтруктураДействий)
	
	Если Не СтруктураДействий.Свойство("ЗаполнитьДанныеГрафикаДо") Тогда
		Возврат;
	КонецЕсли;

	КэшироватьГрафикДоИзменения(ДанныеГрафика);   
	
	Если ДанныеГрафика.КэшПредыдущегоГрафика.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИменаТЧ = СтрРазделить("ОсновнойДолг,ДополнительныеРасходы,Проценты,АвансовыеПлатежи,ВНА,ГрафикМСФО", ",");
	
	ДатаИзмененияГрафика = Макс(ДанныеГрафика.СтрокаФИ.ДатаПризнания, ДанныеГрафика.Документ.ПериодОтчета.ДатаНачала);
	ОтборФИ = Новый Структура("ФИ", ДанныеГрафика.СтрокаФИ.ФИ);
	
	Для каждого ИмяТЧ Из ИменаТЧ Цикл
		
		//удаляем строки до даты изменения		
		Таб = ДанныеГрафика[ИмяТЧ];
		ЧислоСтрок = Таб.Количество();
		
		Для ОбратныйИндекс = 1 По ЧислоСтрок Цикл
			
			СтрокаТаб = Таб.Получить(ЧислоСтрок - ОбратныйИндекс);
			Если ЭтоДатаПредыдущейВерсии(СтрокаТаб.Дата, ДатаИзмененияГрафика) Тогда
				ДанныеГрафика[ИмяТЧ].Удалить(СтрокаТаб);				
			КонецЕсли;				
			
		КонецЦикла;
		
		//добавляем строки до даты изменения из предыдущей версии
		ИсточникТЧ = ?(ИмяТЧ = "ГрафикМСФО", "ГрафикиМСФО", ИмяТЧ);
		ПредыдущиеДанные = ДанныеГрафика.КэшПредыдущегоГрафика.ВерсияГрафика[ИсточникТЧ].Выгрузить(ОтборФИ);
		Для каждого СтрокаТаб Из ПредыдущиеДанные Цикл
			Если ЭтоДатаПредыдущейВерсии(СтрокаТаб.Дата, ДатаИзмененияГрафика) Тогда
				ЗаполнитьЗначенияСвойств(ДанныеГрафика[ИмяТЧ].Добавить(), СтрокаТаб);			
			КонецЕсли;				
		КонецЦикла;
		
		ДанныеГрафика[ИмяТЧ].Сортировать("Дата Возр");
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СкорректироватьГраницыГрафика(ДанныеГрафика, СтруктураДействий)

	Если Не СтруктураДействий.Свойство("СкорректироватьГраницыГрафика") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоИзменениеГрафика = ДанныеГрафика.КэшПредыдущегоГрафика.Количество() > 0;
	
	ДатаНачалаГрафика 		= ДанныеГрафика.ДатаПризнанияДо;
	ДатаОкончанияГрафика 	= ДанныеГрафика.ДатаОкончанияДо;
	
	ТабДаты = ДанныеГрафика.Проценты.Скопировать(, "Дата");
	Если ДанныеГрафика.Лизинг Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеГрафика.ВНА, ТабДаты);	
	Иначе	
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеГрафика.ОсновнойДолг, ТабДаты);		
	КонецЕсли;
		
	ТабДаты.Сортировать("Дата Возр");
	
	Для каждого СтрокаТаб Из ТабДаты.НайтиСтроки(Новый Структура("Дата", Дата(1, 1, 1))) Цикл
		ТабДаты.Удалить(СтрокаТаб);
	КонецЦикла;
	
	Если ТабДаты.Количество() = 0 Тогда
		Возврат;	
	КонецЕсли;
	
	ДатаНачалаГрафика = ТабДаты[0].Дата;
	ДатаОкончанияГрафика = ТабДаты[ТабДаты.Количество()-1].Дата;
	
	Если Не ЭтоИзменениеГрафика И ДатаНачалаГрафика < ДанныеГрафика.Документ.ПериодОтчета.ДатаНачала Тогда
		
		Сообщение = Нстр("ru = 'Дата начала графика <%1> финансового инструмента <%2> меньше начала периода отчета %3.'");
		Сообщить(СтрШаблон(Сообщение, ДатаНачалаГрафика, ДанныеГрафика.СтрокаФИ.ФИ, ДанныеГрафика.Документ.ПериодОтчета));
		
	КонецЕсли;
	
	Если ЭтоИзменениеГрафика Тогда
		ДанныеГрафика.СтрокаФИ.ДатаПризнания = Макс(ДанныеГрафика.ДатаПризнанияДо, ДанныеГрафика.Документ.ПериодОтчета.ДатаНачала);
	Иначе
		ДанныеГрафика.СтрокаФИ.ДатаПризнания = ДатаНачалаГрафика;
	КонецЕсли;
	
	ДанныеГрафика.СтрокаФИ.ДатаОкончания = ДатаОкончанияГрафика;
			
КонецПроцедуры

Процедура ЗаполнитьСтоимостьОбъектовПоРСП(ДанныеГрафика, СтруктураДействий)

	Если Не СтруктураДействий.Свойство("ЗаполнитьСтоимостьОбъектовПоРСП") Тогда
		Возврат;	
	КонецЕсли;
	
	Если ДанныеГрафика.СтрокаФИ.РыночнаяПроцентнаяСтавкаМСФО = 0 Тогда	
		Сообщить(НСтр("ru = 'Не заполнена рыночная ставка процента'"));	
		Возврат;
	КонецЕсли;
	
	ДанныеГрафика.ВНА.Колонки.Добавить("Доля");//для распределения ИзменениеОД/ЧПС на ВНА
	
	Если ЕстьИзменениеГрафика(ДанныеГрафика) Тогда
		
		ЧПС = ПолучитьЧПСпоМАП(ДанныеГрафика);
		ИзменениеОД = Окр(ЧПС - ДанныеГрафика.КэшПредыдущегоГрафика.Задолженность, 2);
		СтрокиВНА = ПодготовитьСтрокиИзмененияВНА(ДанныеГрафика, ИзменениеОД);//1.СтрокиВНА(Доли = БС ВНА), 2.возвраты(СуммаМСФО=БСВНА) 3.ИзменениеОД(уменьшается на возвраты)
		РаспределитьПропорционально(СтрокиВНА, Макс(ИзменениеОД,-ИзменениеОД), "СуммаМСФО", "Доля");//по модулю, т.к. ВидОперации определяет знак
		
	Иначе	
		
		СтрокиВводВНА = ДанныеГрафика.ВНА.НайтиСтроки(ОтборВводВНА());
		Если СтрокиВводВНА.Количество() = 0 Тогда
			Сообщить(НСтр("ru = 'В табличной части <Объекты лизинга (АФПП)> нет событий ввода ВНА'"));
			Возврат;
		КонецЕсли;
		
		ЧПС = ПолучитьЧПСпоМАП(ДанныеГрафика);			
		ДанныеГрафика.ВНА.ЗаполнитьЗначения(1, "Доля");
		РаспределитьПропорционально(СтрокиВводВНА, ЧПС, "СуммаМСФО", "Доля");
					
	КонецЕсли;
	
	ПересчитатьСтоимостьПоФВ(ДанныеГрафика);// ВНА должны быть по ФВ в учете, после распределения суммы по ВНА оставались в валюте ФИ
	
КонецПроцедуры

Процедура ЗаполнитьОсновнойДолгПоВНА(ДанныеГрафика, СтруктураДействий)

	Если Не СтруктураДействий.Свойство("ЗаполнитьОсновнойДолгПоВНА") Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеГрафика.Лизинг Тогда
		Возврат;
	КонецЕсли;
	
	ЕстьИзменениеГрафика = ЕстьИзменениеГрафика(ДанныеГрафика);
	ДатаИзмененияГрафика = ДанныеГрафика.СтрокаФИ.ДатаПризнания;
	
	ПустойОД = Новый Структура("ОсновнойДолг_Получение, ОсновнойДолг_Возврат, ОсновнойДолг_Задолженность", 0, 0, 0);
	Для каждого СтрокаМСФО Из ДанныеГрафика.ГрафикМСФО Цикл
		Если ЕстьИзменениеГрафика И ЭтоДатаПредыдущейВерсии(СтрокаМСФО.Дата, ДатаИзмененияГрафика, Ложь) Тогда
			Продолжить;		
		КонецЕсли;	
		ЗаполнитьЗначенияСвойств(СтрокаМСФО, ПустойОД);
	КонецЦикла;
	
	АвансыНеОД = 0; //ДанныеГрафика.АвансовыеПлатежи.Скопировать(Новый Структура("ВключенВОсновнойДолг", Ложь)).Итог("СуммаБезНДСВВалюте");
	
	ИтогиВНА = ПодготовитьИтогиВНА(ДанныеГрафика, СтруктураДействий);
	Если ИтогиВНА = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Неопределено;
	
	Для каждого СтрокаВНА Из ДанныеГрафика.ВНА Цикл
				
		Если ЕстьИзменениеГрафика И ЭтоДатаПредыдущейВерсии(СтрокаВНА.Дата, ДатаИзмененияГрафика, Ложь) Тогда
			Продолжить;		
		КонецЕсли;

		Если Не ЗначениеЗаполнено(СтрокаВНА.Дата) Или (СтрокаВНА.СуммаМСФО = 0) Или Не ЗначениеЗаполнено(СтрокаВНА.ВидОперации) Тогда
			Продолжить;
		КонецЕсли;
		
		Если (СтрокаВНА.ВидОперации = ПредопределенноеЗначение("Справочник.ВидыОпераций.ВводВЭксплуатацию"))
			Или (СтрокаВНА.ВидОперации = ПредопределенноеЗначение("Справочник.ВидыОпераций.УвеличениеЛизинга")) Тогда
		
			НоваяСтрока = ДанныеГрафика.ГрафикМСФО.Добавить();
			
			НоваяСтрока.Дата = СтрокаВНА.Дата;
			НоваяСтрока.ОсновнойДолг_Получение = ВВалюту(СтрокаВНА.СуммаМСФО - АвансыНеОД, ДанныеГрафика.ФВ, ДанныеГрафика.ВалютаФИ, СтрокаВНА.Дата);
			
			АвансыНеОД = 0;
			
		ИначеЕсли СтрокаВНА.ВидОперации = ПредопределенноеЗначение("Справочник.ВидыОпераций.УменьшениеЛизинга") Тогда				
			
			НоваяСтрока = ДанныеГрафика.ГрафикМСФО.Добавить();
			НоваяСтрока.Дата = СтрокаВНА.Дата;
			НоваяСтрока.ОсновнойДолг_Возврат = ВВалюту(СтрокаВНА.СуммаМСФО, ДанныеГрафика.ФВ, ДанныеГрафика.ВалютаФИ, СтрокаВНА.Дата);
			
		ИначеЕсли СтрокаВНА.ВидОперации = ПредопределенноеЗначение("Справочник.ВидыОпераций.ВозвратОбъектаЛизинга") Тогда
			
			ИтогВНА = ИтогиВНА.Найти(СтрокаВНА.ВНА, "ВНА");
			НоваяСтрока = ДанныеГрафика.ГрафикМСФО.Добавить();
			НоваяСтрока.Дата = СтрокаВНА.Дата;
			НоваяСтрока.ОсновнойДолг_Возврат = ВВалюту(СтрокаВНА.СуммаМСФО, ДанныеГрафика.ФВ, ДанныеГрафика.ВалютаФИ, СтрокаВНА.Дата);
			Если Не (ЕстьИзменениеГрафика И (СтрокаВНА.Дата = ДатаИзмененияГрафика)) Тогда//в дату изменения Сумма увно
				НоваяСтрока.ДоляПриДосрочномВозврате = ?(ИтогВНА = Неопределено, 1 / ИтогиВНА.Количество(), ИтогВНА.Доля);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НоваяСтрока = Неопределено Тогда // нет новых событий по ВНА - добавим просто дату изменения
		НоваяСтрока = ДанныеГрафика.ГрафикМСФО.Добавить();
		НоваяСтрока.Дата = ДатаИзмененияГрафика;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьОсновнойДолг(ДанныеГрафика, СтруктураДействий)

	Если Не СтруктураДействий.Свойство("ЗаполнитьОсновнойДолг") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеГрафика.Лизинг Тогда
		Возврат;
	КонецЕсли;
			
	ВозвратПоГрафику = ДанныеГрафика.ВозвратПоГрафику;
	
	ОсновнойДолг_Получение = ДанныеГрафика.ОсновнойДолг.Итог("Получение");
	ОсновнойДолг_Возврат = ДанныеГрафика.ОсновнойДолг.Итог("Возврат");
	Проценты_Уплата = ДанныеГрафика.Проценты.Итог("Уплата");
	
	Если (ОсновнойДолг_Получение = 0) 
		Или (ОсновнойДолг_Возврат + Проценты_Уплата = 0) 
		Или (ОсновнойДолг_Получение > (ОсновнойДолг_Возврат + Проценты_Уплата)) Тогда
		
		СтруктураДействий.Очистить();
		ДанныеГрафика.ГрафикМСФО.Очистить();
		
		Возврат;
		
	КонецЕсли;
	
	ЕстьИзменениеГрафика = ЕстьИзменениеГрафика(ДанныеГрафика);
	ДатаИзмененияГрафика = ДанныеГрафика.СтрокаФИ.ДатаПризнания;
	
	Для каждого СтрокаТаб Из ДанныеГрафика.ОсновнойДолг Цикл
		
		Если ЕстьИзменениеГрафика И ЭтоДатаПредыдущейВерсии(СтрокаТаб.Дата, ДатаИзмененияГрафика) Тогда
			Продолжить;		
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТаб.Дата) Тогда
			Продолжить;
		ИначеЕсли (СтрокаТаб.Получение = 0) И (СтрокаТаб.Возврат = 0) Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеГрафика.ГрафикМСФО.Добавить();
		
		НоваяСтрока.Дата 					= СтрокаТаб.Дата;
		НоваяСтрока.ОсновнойДолг_Получение	= СтрокаТаб.Получение;
		НоваяСтрока.НДС 					= СтрокаТаб.НДС;
				
		Если ВозвратПоГрафику Тогда
			НоваяСтрока.ОсновнойДолг_Возврат = СтрокаТаб.Возврат;
			НоваяСтрока.ЭСП_ОсновнойДолг_Возврат = СтрокаТаб.Возврат;
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьУплатуПроцентов(ДанныеГрафика, СтруктураДействий)

	Если Не СтруктураДействий.Свойство("ЗаполнитьУплатуПроцентов") Тогда
		Возврат;
	КонецЕсли;
	
	Лизинг = ДанныеГрафика.Лизинг;
	ДатаНачалаГрафика = ДанныеГрафика.СтрокаФИ.ДатаПризнания;//если ранее - то аванс, или доп.расход списываются 
	
	ЕстьИзменениеГрафика = ЕстьИзменениеГрафика(ДанныеГрафика);
	ДатаИзмененияГрафика = ДанныеГрафика.СтрокаФИ.ДатаПризнания;
	
	Для каждого СтрокаТаб Из ДанныеГрафика.Проценты Цикл
		
		Если ЕстьИзменениеГрафика И ЭтоДатаПредыдущейВерсии(СтрокаТаб.Дата, ДатаИзмененияГрафика) Тогда
			Продолжить;		
		КонецЕсли;

		Если Не ЗначениеЗаполнено(СтрокаТаб.Дата) Тогда
			Продолжить;
		ИначеЕсли (СтрокаТаб.Уплата = 0) И (СтрокаТаб.НДС = 0) И (СтрокаТаб.НеарендныйПлатеж = 0) Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ДанныеГрафика.ГрафикМСФО.Добавить();
		
		Если Лизинг И (СтрокаТаб.Дата < ДатаНачалаГрафика) Тогда
			НоваяСтрока.Дата = ДатаНачалаГрафика;	
		Иначе 
			НоваяСтрока.Дата = СтрокаТаб.Дата;
		КонецЕсли;
		
		НоваяСтрока.Дата 					= СтрокаТаб.Дата;		
		НоваяСтрока.Проценты_Уплата			= СтрокаТаб.Уплата - СтрокаТаб.НеарендныйПлатеж - СтрокаТаб.НДС;
		НоваяСтрока.НеарендныйПлатеж		= СтрокаТаб.НеарендныйПлатеж;
		НоваяСтрока.ПроцентыБУ_Начисление	= СтрокаТаб.Начисление;
		НоваяСтрока.НДС 					= СтрокаТаб.НДС;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДопРасходы(ДанныеГрафика, СтруктураДействий)

	Если Не СтруктураДействий.Свойство("ЗаполнитьДопРасходы") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоЛизинг = ДанныеГрафика.ВНА.Количество() > 0;
	ЭтоДКЗ = ДанныеГрафика.Задолженность;
	
	ДатаНачалаГрафика = ДанныеГрафика.СтрокаФИ.ДатаПризнания;//если ранее - то аванс, или доп.расход списываются 
	
	ЕстьИзменениеГрафика = ЕстьИзменениеГрафика(ДанныеГрафика);
	ДатаИзмененияГрафика = ДанныеГрафика.СтрокаФИ.ДатаПризнания;
	
	Для каждого СтрокаТаб Из ДанныеГрафика.ДополнительныеРасходы Цикл
		
		Если ЕстьИзменениеГрафика И ЭтоДатаПредыдущейВерсии(СтрокаТаб.Дата, ДатаИзмененияГрафика) Тогда
			Продолжить;		
		КонецЕсли;

		Если Не ЗначениеЗаполнено(СтрокаТаб.Дата) Тогда
			Продолжить;
		ИначеЕсли СтрокаТаб.СуммаВВалюте = 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = ДанныеГрафика.ГрафикМСФО.Добавить();
		
		Если ЭтоЛизинг И (СтрокаТаб.Дата < ДатаНачалаГрафика) Тогда
			НоваяСтрока.Дата = ДатаНачалаГрафика;	
		Иначе 
			НоваяСтрока.Дата = СтрокаТаб.Дата;
		КонецЕсли;
								
		Если ЭтоДКЗ Тогда
			НоваяСтрока.ОсновнойДолг_Получение = СтрокаТаб.СуммаВВалюте;
			НоваяСтрока.ОсновнойДолг_Возврат = СтрокаТаб.СуммаВВалюте;
			НоваяСтрока.ЭСП_ОсновнойДолг_Возврат = СтрокаТаб.СуммаВВалюте;
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьАвансы(ДанныеГрафика, СтруктураДействий)

	Если Не СтруктураДействий.Свойство("ЗаполнитьАвансы") Тогда
		Возврат;
	КонецЕсли;
	
	ЭтоЛизинг = ДанныеГрафика.ВНА.Количество() > 0;
	Если не ЭтоЛизинг Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачалаГрафика = ДанныеГрафика.СтрокаФИ.ДатаПризнания;//если ранее - то аванс, или доп.расход списываются 
	
	ЕстьИзменениеГрафика = ЕстьИзменениеГрафика(ДанныеГрафика);
	ДатаИзмененияГрафика = ДанныеГрафика.СтрокаФИ.ДатаПризнания;
	
	Для каждого СтрокаТаб Из ДанныеГрафика.АвансовыеПлатежи Цикл	
		
		Если ЕстьИзменениеГрафика И ЭтоДатаПредыдущейВерсии(СтрокаТаб.Дата, ДатаИзмененияГрафика) Тогда
			Продолжить;		
		КонецЕсли;

		Если Не СтрокаТаб.ВключенВОсновнойДолг Тогда
		    Продолжить;
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаТаб.Дата) Тогда
			Продолжить;
		КонецЕсли;
		
		СуммаАванса = СтрокаТаб.СуммаВВалюте - СтрокаТаб.НДСВВалюте - СтрокаТаб.НеарендныйПлатеж;
		
		Если СуммаАванса = 0 Тогда
			Продолжить;
		КонецЕсли;

		НоваяСтрока = ДанныеГрафика.ГрафикМСФО.Добавить();
		
		Если ЭтоЛизинг И (СтрокаТаб.Дата < ДатаНачалаГрафика) Тогда
			НоваяСтрока.Дата = ДатаНачалаГрафика;	
		Иначе 
			НоваяСтрока.Дата = СтрокаТаб.Дата;
		КонецЕсли;
				
		НоваяСтрока.НеарендныйПлатеж = СтрокаТаб.НеарендныйПлатеж;
		НоваяСтрока.НДС = СтрокаТаб.НДСВВалюте;
				
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьДенежныеПотоки(ДанныеГрафика, СтруктураДействий)

	Если Не СтруктураДействий.Свойство("ЗаполнитьДенежныеПотоки") Тогда
		Возврат;
	КонецЕсли;
	
	ВидФИ = ДанныеГрафика.СтрокаФИ.ПараметрыУчетаФинансовогоИнструментаМСФО.ВидОбъектаФинансовогоХарактера;	
	ЕстьПроценты = Не ВидФИ.Задолженность И ВидФИ.ВозвратПоГрафику Или ВидФИ.Лизинг;
	
	ДенежныеПотоки = УчетФинансовыхИнструментовМСФОСерверУХ.ПолучитьДенежныеПотоки(ДанныеГрафика, 
						ЕстьПроценты, Истина, Истина, Не ВидФИ.Лизинг, ВидФИ.Лизинг, Истина, Ложь);
	
	ЕстьИзменениеГрафика = ЕстьИзменениеГрафика(ДанныеГрафика);
	ДатаИзмененияГрафика = ДанныеГрафика.СтрокаФИ.ДатаПризнания;
	
	Для каждого СтрокаТаб Из ДенежныеПотоки Цикл
		
		Если ЕстьИзменениеГрафика И ЭтоДатаПредыдущейВерсии(СтрокаТаб.Дата, ДатаИзмененияГрафика, Ложь) Тогда
			Продолжить;// в ДП не попадают операции до даты изменения(ДП на саму дату дб включен)
		ИначеЕсли Не ЗначениеЗаполнено(СтрокаТаб.Дата) Тогда 
			Продолжить;			
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(ДанныеГрафика.ГрафикМСФО.Добавить(), СтрокаТаб);
	
	КонецЦикла;
	
	ДанныеГрафика.КэшФИ.Вставить("ДенежныйПоток",	ДенежныеПотоки.ВыгрузитьКолонку("ДенежныйПоток"));
	ДанныеГрафика.КэшФИ.Вставить("Даты", 			ДенежныеПотоки.ВыгрузитьКолонку("Дата"));

КонецПроцедуры

Процедура ЗаполнитьОтчетныеДаты(ДанныеГрафика, СтруктураДействий)

	Если Не СтруктураДействий.Свойство("ЗаполнитьОтчетныеДаты") Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаФИ = ДанныеГрафика.СтрокаФИ;
	
	ПериодичностьОтчетныхДат = ДанныеГрафика.Документ.ПериодОтчета.Периодичность;
	
	ВариантОтображенияГрафика = СтрокаФИ.ПараметрыУчетаФинансовогоИнструментаМСФО.ВариантОтображенияГрафика;
	
	Если ВариантОтображенияГрафика = ПредопределенноеЗначение("Перечисление.ВидДетализацииГрафикаФИ.НаОтчетныеДаты") Тогда		
		Если ПериодичностьОтчетныхДат = Неопределено Тогда
			ПериодичностьОтчетныхДат = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц");
		КонецЕсли;		
	ИначеЕсли ВариантОтображенияГрафика = ПредопределенноеЗначение("Перечисление.ВидДетализацииГрафикаФИ.НаКаждыйДень") Тогда	
		ПериодичностьОтчетныхДат = ПредопределенноеЗначение("Перечисление.Периодичность.День");		
	ИначеЕсли ВариантОтображенияГрафика = ПредопределенноеЗначение("Перечисление.ВидДетализацииГрафикаФИ.НаКонецМесяца") Тогда		
		ПериодичностьОтчетныхДат = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц");		
	Иначе		
		Возврат;	
	КонецЕсли;
	
	ПроверятьДату = Ложь;
	Если ПериодичностьОтчетныхДат = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
		ДатаПромежуточнойОперации = НачалоДня(СтрокаФИ.ДатаПризнания);
	ИначеЕсли ПериодичностьОтчетныхДат = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		ДатаПромежуточнойОперации = НачалоДня(КонецМесяца(СтрокаФИ.ДатаПризнания));
	Иначе //Квартал, Полугодие, Год
		ДатаПромежуточнойОперации = НачалоДня(КонецМесяца(ДобавитьМесяц(НачалоГода(СтрокаФИ.ДатаПризнания), -1)));
		ПроверятьДату = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ДатаПромежуточнойОперации) Тогда
		Возврат;//дата начала пустая - ошибка графика 
	КонецЕсли;
	
	ЕстьИзменениеГрафика = ЕстьИзменениеГрафика(ДанныеГрафика);
	ДатаИзмененияГрафика = ДанныеГрафика.СтрокаФИ.ДатаПризнания;
		
	Пока ДатаПромежуточнойОперации <= СтрокаФИ.ДатаОкончания Цикл
		
		ЭтоДатаПредыдущейВерсии = ЕстьИзменениеГрафика И ЭтоДатаПредыдущейВерсии(ДатаПромежуточнойОперации, ДатаИзмененияГрафика);
		
		Если Не ЭтоДатаПредыдущейВерсии И Не ПроверятьДату Или (ДатаПромежуточнойОперации > СтрокаФИ.ДатаПризнания) Тогда
			
			СтрокаГрафика = ДанныеГрафика.ГрафикМСФО.Добавить();
			СтрокаГрафика.Дата = ДатаПромежуточнойОперации;
			СтрокаГрафика.ОтчетнаяДата = 1;
						
		КонецЕсли;
		
		ДатаПромежуточнойОперации = ПолучитьСледующуюОтчетнуюДату(ДатаПромежуточнойОперации, ПериодичностьОтчетныхДат);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СвернутьУдалитьПустыеУпорядочить(ДанныеГрафика, СтруктураДействий)

	Если Не СтруктураДействий.Свойство("СвернутьУдалитьПустыеУпорядочить") Тогда
		Возврат;
	КонецЕсли;
	
	КолонкиСтрокой = "";
	Для каждого ТекущаяКолонка Из ДанныеГрафика.ГрафикМСФО.Колонки Цикл
		Если (ТекущаяКолонка.Имя = "Дата") Или (ТекущаяКолонка.Имя = "Отступ") Тогда
			Продолжить;
		КонецЕсли;
		КолонкиСтрокой = ?(КолонкиСтрокой = "", "", КолонкиСтрокой + ", ") + ТекущаяКолонка.Имя;
	КонецЦикла;
	
	ДанныеГрафика.ГрафикМСФО.Свернуть("Дата", КолонкиСтрокой);
		
	Если ДанныеГрафика.ГрафикМСФО.Количество() = 0 Тогда
		СтруктураДействий.Очистить();
		Возврат;	
	КонецЕсли;
	
	ДанныеГрафика.ГрафикМСФО.Сортировать("Дата Возр");
	
КонецПроцедуры

Процедура ЗаполнитьЭСП(ДанныеГрафика, СтруктураДействий)
	
	Если Не СтруктураДействий.Свойство("ЗаполнитьЭСП") Тогда
		Возврат;
	КонецЕсли;
	
   	ЭСП	= ФинансоваяМатематикаКлиентСервер.ПолучитьЭффективнуюСтавкуПроцента(ДанныеГрафика.КэшФИ.ДенежныйПоток, ДанныеГрафика.КэшФИ.Даты)*100;
	ДанныеГрафика.СтрокаФИ.ЭффективнаяПроцентнаяСтавкаМСФО = ЭСП;
	
КонецПроцедуры

Процедура ЗаполнитьЧПС(ДанныеГрафика, СтруктураДействий)
	
	Если Не СтруктураДействий.Свойство("ЗаполнитьЧПС") Тогда
		Возврат;
	КонецЕсли;
	
	СтавкаДисконтирования = ДанныеГрафика.СтрокаФИ.ЭффективнаяПроцентнаяСтавкаМСФО;
	
	ВидСтавкиРасчетаПроцентов = ДанныеГрафика.СтрокаФИ.ПараметрыУчетаФинансовогоИнструментаМСФО.ВидОбъектаФинансовогоХарактера.ВидСтавкиРасчетаПроцентов;	
	Если ВидСтавкиРасчетаПроцентов = ПредопределенноеЗначение("Перечисление.ВидыСтавокОбъектовФинансовогоХарактера.СтавкаПоДоговору") Тогда
		
		Если ДанныеГрафика.ДополнительныеРасходы.Количество() = 0 Тогда
			// считаем что ЧПС не изменилась и равно ОД
			ДанныеГрафика.СтрокаФИ.ЧистаяПриведеннаяСтоимостьМСФО = ДанныеГрафика.СтрокаФИ.СуммаОсновнойЗадолженностиНСБУ;
			Возврат;
		КонецЕсли;
	
		СтавкаДисконтирования = ДанныеГрафика.СтрокаФИ.ПроцентнаяСтавкаПоДоговоруНСБУ;
	ИначеЕсли ВидСтавкиРасчетаПроцентов = ПредопределенноеЗначение("Перечисление.ВидыСтавокОбъектовФинансовогоХарактера.РыночнаяСтавка") Тогда
		СтавкаДисконтирования = ДанныеГрафика.СтрокаФИ.РыночнаяПроцентнаяСтавкаМСФО;
	КонецЕсли;
	
	ЧПС = ФинансоваяМатематикаКлиентСервер.ПолучитьЧистуюПриведеннуюСтоимость(СтавкаДисконтирования/100, ДанныеГрафика.КэшФИ.ДенежныйПоток, ДанныеГрафика.КэшФИ.Даты);
	
	Если ДанныеГрафика.ГрафикМСФО.Количество() Тогда
	
		ПерваяСтрока = ДанныеГрафика.ГрафикМСФО[0];
		ДанныеГрафика.СтрокаФИ.ЧистаяПриведеннаяСтоимостьМСФО = ПерваяСтрока.ОсновнойДолг_Получение - ПерваяСтрока.ОсновнойДолг_Возврат + ЧПС;
		
	Иначе 
		
		ДанныеГрафика.СтрокаФИ.ЧистаяПриведеннаяСтоимостьМСФО = ЧПС;	
	
	КонецЕсли;
		
КонецПроцедуры

//Задолженность на дату изменения сравниваем с ЧПС по новому графику, 
//если процент изменения выше порога - сторнируем старый ФИ и признаем новый
Процедура ТестРеструктуризации(ДанныеГрафика, СтруктураДействий)
	
	Если Не СтруктураДействий.Свойство("ТестРеструктуризации") Тогда
		Возврат;
	ИначеЕсли Не ДанныеГрафика.Свойство("КэшПредыдущегоГрафика") Или Не ЗначениеЗаполнено(ДанныеГрафика.КэшПредыдущегоГрафика) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаИзмененияФИ = ДанныеГрафика.СтрокаФИ.ДатаПризнания;
	ДолгНаДатуИзменения = ДанныеГрафика.КэшПредыдущегоГрафика.Задолженность;
			
	НовыйГрафик = ПолучитьНовыйГрафик(ДанныеГрафика, ДатаИзмененияФИ, ДолгНаДатуИзменения);//новый график от даты изменения

	ДанныеГрафика.КэшФИ.Вставить("ДенежныйПоток",	НовыйГрафик.ВыгрузитьКолонку("ДенежныйПоток"));
	ДанныеГрафика.КэшФИ.Вставить("Даты", 			НовыйГрафик.ВыгрузитьКолонку("Дата"));
		
	ЗаполнитьЭСП(ДанныеГрафика, СтруктураДействий);
	ЗаполнитьЧПС(ДанныеГрафика, СтруктураДействий);
		
	Дисконт = ПолучитьЧПС(НовыйГрафик, ПолучитьСтавкуДисконтирования(ДанныеГрафика) / 100);//дисконт = ЧПС по новой части графика(без ДолгНаДатуИзменения)
	ЧПС = ДолгНаДатуИзменения + Дисконт;

	ЗаполнитьРеквизитыРеструктуризации(ДанныеГрафика, ДолгНаДатуИзменения, ЧПС);
	
	Если ДанныеГрафика.СтрокаФИ.ПризнатьНовыйФинансовыйИнструментМСФО Тогда
		
		//график,ЧПС,ЭСП - от даты изменения
		ДанныеГрафика.Вставить("ГрафикМСФО", НовыйГрафик);
		
		ДанныеГрафика.КэшФИ.Вставить("ДенежныйПоток",	ДанныеГрафика.ГрафикМСФО.ВыгрузитьКолонку("ДенежныйПоток"));
		ДанныеГрафика.КэшФИ.Вставить("Даты", 			ДанныеГрафика.ГрафикМСФО.ВыгрузитьКолонку("Дата"));
		
		ЗаполнитьЭСП(ДанныеГрафика, СтруктураДействий);
		ЗаполнитьЧПС(ДанныеГрафика, СтруктураДействий);
		
	Иначе	
		
		//ЧПС,ЭСП - от даты изменения. график - от предыдущей даты начала.
		ЭСП = ФинансоваяМатематикаКлиентСервер.ПолучитьЭффективнуюСтавкуПроцента(НовыйГрафик.ВыгрузитьКолонку("ДенежныйПоток"), НовыйГрафик.ВыгрузитьКолонку("Дата")) * 100;
		ДанныеГрафика.СтрокаФИ.ЧистаяПриведеннаяСтоимостьМСФО = ЧПС;		
		ДанныеГрафика.СтрокаФИ.ЭффективнаяПроцентнаяСтавкаМСФО = ЭСП;
		
	КонецЕсли;
	 	
КонецПроцедуры

Процедура РассчитатьНачисленияПогашения(ДанныеГрафика, СтруктураДействий)

	Если Не СтруктураДействий.Свойство("РассчитатьНачисленияПогашения") Тогда
		Возврат;
	КонецЕсли;
	
	СтавкаДисконтирования = ПолучитьСтавкуДисконтирования(ДанныеГрафика);	
	Если СтавкаДисконтирования < 0 Тогда
		СтруктураДействий.Очистить();
		
		ВидСтавкиРасчетаПроцентов = ДанныеГрафика.СтрокаФИ.ПараметрыУчетаФинансовогоИнструментаМСФО.ВидОбъектаФинансовогоХарактера.ВидСтавкиРасчетаПроцентов;	
		Пояснение = "";
		Если ВидСтавкиРасчетаПроцентов = ПредопределенноеЗначение("Перечисление.ВидыСтавокОбъектовФинансовогоХарактера.ЭффективнаяСтавка") Тогда
			Пояснение = НСтр("ru = ' Приведенная стоимость уплат процентов должна быть больше основного долга.'");
		КонецЕсли;
		ТекстСообщения = НСтр("ru = 'Ставка начисления процентов МСФО (%1) отрицательная.%2 Проценты МСФО не будут начислены.'");
		Сообщить(СтрШаблон(ТекстСообщения, ВидСтавкиРасчетаПроцентов, Пояснение));
		
		Возврат;
	КонецЕсли;
	
	ВозвратПоГрафику 		= ДанныеГрафика.ВозвратПоГрафику;	
	ЭСП 					= ПолучитьЭСП(ДанныеГрафика);	
	ЕстьИзменениеГрафика 	= ЕстьИзменениеГрафика(ДанныеГрафика);
	ДатаИзмененияГрафика 	= ДанныеГрафика.СтрокаФИ.ДатаПризнания;
	ПризнатьНовыйФИ			= ДанныеГрафика.СтрокаФИ.ПризнатьНовыйФинансовыйИнструментМСФО;
	РассчитыватьДисконт 	= ДанныеГрафика.РассчитыватьДисконт;
	
	ЗаполнитьПервуюСтроку(ДанныеГрафика, ВозвратПоГрафику, ЕстьИзменениеГрафика, ДатаИзмененияГрафика);
	ПредыдущаяСтрока = НачальнаяПредыдущаяСтрока(ДанныеГрафика, ВозвратПоГрафику, ЕстьИзменениеГрафика, ДатаИзмененияГрафика);
				
	Для НомерСтроки = 0 По (ДанныеГрафика.ГрафикМСФО.Количество()-1) Цикл
		
		ТекущаяСтрока = ДанныеГрафика.ГрафикМСФО.Получить(НомерСтроки);
		
		Если ЕстьИзменениеГрафика И ЭтоДатаПредыдущейВерсии(ТекущаяСтрока.Дата, ДатаИзмененияГрафика, Ложь) Тогда
			Продолжить;		
		КонецЕсли;
						
		//Пример условия точки останова:ТекущаяСтрока.Дата = ДАТА(2018,1,31)	
		ТекущаяСтрока.ЧислоДнейНачисления = (ТекущаяСтрока.Дата - ПредыдущаяСтрока.Дата) / 86400; //86400 - длина дня в секундах
		
		ДенежныйПоток = ТекущаяСтрока.ДенежныйПоток + ТекущаяСтрока.ОсновнойДолг_Получение;
		
		ПогаситьПроценты(		ТекущаяСтрока, ПредыдущаяСтрока, ДенежныйПоток, ВозвратПоГрафику, СтавкаДисконтирования);
		ПогаситьОсновнойДолг(	ТекущаяСтрока, ПредыдущаяСтрока, ДенежныйПоток, ВозвратПоГрафику);
													
		Если РассчитыватьДисконт Тогда
			
			Если ЭСП <> 0 Тогда
				
				ДенежныйПоток = ТекущаяСтрока.ДенежныйПоток + ТекущаяСтрока.ОсновнойДолг_Получение;
				
				ПогаситьПроцентыЭСП(		ТекущаяСтрока, ПредыдущаяСтрока, ДенежныйПоток, ВозвратПоГрафику, ЭСП);
				ПогаситьОсновнойДолгЭСП(	ТекущаяСтрока, ПредыдущаяСтрока, ДенежныйПоток, ВозвратПоГрафику);
						
			КонецЕсли;
			
			РассчитатьДисконт(ТекущаяСтрока, ПредыдущаяСтрока);

		КонецЕсли;
				
		ПредыдущаяСтрока = ТекущаяСтрока;
		
	КонецЦикла;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеГрафика.ДисконтНаБалансе И Не ДанныеГрафика.Задолженность Тогда
		
		// если дисконт на балансе тогда в колонках ОД отражается ОД по ЭСП, в остальных случаях ОД по Ставке дисконтирования
		
		ОсновнойДолг_Возврат = ДанныеГрафика.ГрафикМСФО.ВыгрузитьКолонку("ОсновнойДолг_Возврат");
		ОсновнойДолг_Задолженность = ДанныеГрафика.ГрафикМСФО.ВыгрузитьКолонку("ОсновнойДолг_Задолженность");
		
		ДанныеГрафика.ГрафикМСФО.ЗагрузитьКолонку(ДанныеГрафика.ГрафикМСФО.ВыгрузитьКолонку("ЭСП_ОсновнойДолг_Возврат"), "ОсновнойДолг_Возврат");
		ДанныеГрафика.ГрафикМСФО.ЗагрузитьКолонку(ДанныеГрафика.ГрафикМСФО.ВыгрузитьКолонку("ЭСП_ОсновнойДолг_Задолженность"), "ОсновнойДолг_Задолженность");
		
		ДанныеГрафика.ГрафикМСФО.ЗагрузитьКолонку(ОсновнойДолг_Возврат, "ЭСП_ОсновнойДолг_Возврат");
		ДанныеГрафика.ГрафикМСФО.ЗагрузитьКолонку(ОсновнойДолг_Задолженность, "ЭСП_ОсновнойДолг_Задолженность");
		
	КонецЕсли;
	
	КоличествоСтрокГрафика = ДанныеГрафика.ГрафикМСФО.Количество();
	
	Если КоличествоСтрокГрафика < 2 Тогда
		Возврат;	
	КонецЕсли;
	
	ПредыдущаяСтрока = ДанныеГрафика.ГрафикМСФО.Получить(КоличествоСтрокГрафика - 2);
	СкорректироватьОсновнойДолг(ДанныеГрафика, ТекущаяСтрока, ПредыдущаяСтрока);
		
КонецПроцедуры

Процедура ВыделитьДолгосрочнуюЧасть(ДанныеГрафика, СтруктураДействий)
	
	Если Не СтруктураДействий.Свойство("ВыделитьДолгосрочнуюЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеГрафика.ГрафикМСФО.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	ПеревестиКогдаОстанетсяГод = ДанныеГрафика.ПереводВКраткосрочную;
	
	Если ПеревестиКогдаОстанетсяГод Тогда		
		ВыделитьДолгосрочнуюЧастьДоГода(ДанныеГрафика);
		Возврат;	
	КонецЕсли;
			
	ПоследнийИндекс = ДанныеГрафика.ГрафикМСФО.Количество()-1;
	ИндексЧерезГод = 1;
	ПредыдущаяДолгосрочнаяЗадолженность = 0;
	
	Для НомерСтроки = 0 По ПоследнийИндекс Цикл
		
		СтрокаЗаписи = ДанныеГрафика.ГрафикМСФО[НомерСтроки];
		НачалоДолгосрочной = ДобавитьМесяц(СтрокаЗаписи.Дата, 12);
		
		Для ИндексДолгосрочной = ИндексЧерезГод По ПоследнийИндекс Цикл
			
			СтрокаЧерезГод = ДанныеГрафика.ГрафикМСФО[ИндексДолгосрочной];
			Если СтрокаЧерезГод.Дата > НачалоДолгосрочной Тогда				
				
				// текущая дата первая, которая выходит за пределы краткосрочной, берем предыдущую задолженность
				СтрокаЗаписи.ОсновнойДолг_ДолгосрочнаяЗадолженность = Мин(СтрокаЗаписи.ОсновнойДолг_Задолженность, ДанныеГрафика.ГрафикМСФО[ИндексДолгосрочной-1].ОсновнойДолг_Задолженность);
				
				Прервать;
				
			КонецЕсли;
	
		КонецЦикла;
		
		ИндексЧерезГод = ИндексДолгосрочной;
		
		Предыдущая = ?(НомерСтроки = 0, СтрокаЗаписи.ОсновнойДолг_Задолженность, ПредыдущаяДолгосрочнаяЗадолженность);
		СтрокаЗаписи.ПереводВКраткосрочную = Предыдущая - СтрокаЗаписи.ОсновнойДолг_ДолгосрочнаяЗадолженность;

		ПредыдущаяДолгосрочнаяЗадолженность = СтрокаЗаписи.ОсновнойДолг_ДолгосрочнаяЗадолженность;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область РасчетГрафика

Функция ПолучитьСтавкуДисконтирования(ДанныеГрафика)

	Перем СтавкаДисконтирования;
	
	СтавкаДисконтирования = ДанныеГрафика.СтрокаФИ.ЭффективнаяПроцентнаяСтавкаМСФО;
	СтрокаФИ = ДанныеГрафика.СтрокаФИ;
	
	ВидСтавкиРасчетаПроцентов = СтрокаФИ.ПараметрыУчетаФинансовогоИнструментаМСФО.ВидОбъектаФинансовогоХарактера.ВидСтавкиРасчетаПроцентов;	
	Если ВидСтавкиРасчетаПроцентов = ПредопределенноеЗначение("Перечисление.ВидыСтавокОбъектовФинансовогоХарактера.СтавкаПоДоговору") Тогда
		СтавкаДисконтирования = СтрокаФИ.ПроцентнаяСтавкаПоДоговоруНСБУ;
	ИначеЕсли ВидСтавкиРасчетаПроцентов = ПредопределенноеЗначение("Перечисление.ВидыСтавокОбъектовФинансовогоХарактера.РыночнаяСтавка") Тогда
		СтавкаДисконтирования = СтрокаФИ.РыночнаяПроцентнаяСтавкаМСФО;
	КонецЕсли;
	
	Возврат СтавкаДисконтирования;
	
КонецФункции

Функция ПолучитьЭСП(ДанныеГрафика)
	
	Если ДанныеГрафика.Задолженность Тогда	
		Возврат 0;//для задолженностей не рассчитываются проценты по ЭСП
	КонецЕсли;
	
	Если ДанныеГрафика.Лизинг И ЕстьИзменениеГрафика(ДанныеГрафика) Тогда
		Возврат ДанныеГрафика.СтрокаФИ.РыночнаяПроцентнаяСтавкаМСФО;//расхождение РСП и ЭСП в лизинге не поддерживается
	КонецЕсли;
	
	ЭСП = ДанныеГрафика.СтрокаФИ.ЭффективнаяПроцентнаяСтавкаМСФО;
	Если ЭСП < 0 Тогда
		ЭСП = 0;
		Сообщить(НСтр("ru = 'Рассчитанная ЭСП отрицательная. Приведенная стоимость уплат процентов должна быть больше основного долга.
						|Проценты по ЭСП не будут рассчитаны. Амортизационная поправка не будет рассчитана.'"));
	КонецЕсли;
	
	Возврат ЭСП;

КонецФункции

Процедура ПогаситьПроценты(ТекущаяСтрока, ПредыдущаяСтрока, ДенежныйПоток, ВозвратПоГрафику, СтавкаДисконтирования)
	
	//Дисконт_Начисление - используется в случае изменения графика
	Долг = ПредыдущаяСтрока.ОсновнойДолг_Задолженность + ПредыдущаяСтрока.Проценты_ЗадолженностьТочность - ТекущаяСтрока.Дисконт_Начисление;
	
	Проценты_НачислениеТочность = ПолучитьПроцентыЗаПериод(Долг, СтавкаДисконтирования / 100, ТекущаяСтрока.ЧислоДнейНачисления);
	ТекущаяСтрока.Проценты_Начисление = Окр(Проценты_НачислениеТочность, 2);//срабатывает округление
	
	Если ВозвратПоГрафику Тогда
		
		ПогашениеПроцентов = ДенежныйПоток - ТекущаяСтрока.ОсновнойДолг_Возврат;
		ТекущаяСтрока.Проценты_Уплата = ?(ПогашениеПроцентов < 0, 0, ПогашениеПроцентов);
		
	Иначе
		
		ДолгПоПроцентам = ПредыдущаяСтрока.Проценты_Задолженность + ТекущаяСтрока.Проценты_Начисление;
		
		Если Долг > 0 Тогда
			ТекущаяСтрока.Проценты_Уплата = Макс(0, Мин(ДенежныйПоток, ДолгПоПроцентам));
		Иначе	
			ТекущаяСтрока.Проценты_Уплата = Мин(0, Макс(ДенежныйПоток, ДолгПоПроцентам));
		КонецЕсли;
				
	КонецЕсли;	
	
	ТекущаяСтрока.Проценты_Задолженность = ПредыдущаяСтрока.Проценты_Задолженность 
												+ ТекущаяСтрока.Проценты_Начисление 
												- ТекущаяСтрока.Проценты_Уплата;
												
	ТекущаяСтрока.Проценты_ЗадолженностьТочность = ПредыдущаяСтрока.Проценты_ЗадолженностьТочность
												+ Проценты_НачислениеТочность 
												- ТекущаяСтрока.Проценты_Уплата;
												
	ДенежныйПоток = ДенежныйПоток - ТекущаяСтрока.Проценты_Уплата;

КонецПроцедуры

Процедура ПогаситьОсновнойДолг(ТекущаяСтрока, ПредыдущаяСтрока, ДенежныйПоток, ВозвратПоГрафику)
	
	Если Не ВозвратПоГрафику Тогда
		
		//ОсновнойДолг_Возврат была пустая, только в первой строке - дисконт
		ТекущаяСтрока.ОсновнойДолг_Возврат = ТекущаяСтрока.ОсновнойДолг_Возврат + Макс(ДенежныйПоток, 0);
		
		Если ТекущаяСтрока.ДоляПриДосрочномВозврате > 0 Тогда
			
			ТекущаяЗадолженность = ПредыдущаяСтрока.ОсновнойДолг_Задолженность 
										+ ТекущаяСтрока.ОсновнойДолг_Получение 
										- ТекущаяСтрока.ОсновнойДолг_Возврат;
										
			ВозвратЗадолженностиПоВНА = ТекущаяСтрока.ДоляПриДосрочномВозврате * ТекущаяЗадолженность;								
			ТекущаяСтрока.ОсновнойДолг_Возврат = ТекущаяСтрока.ОсновнойДолг_Возврат + Окр(ВозвратЗадолженностиПоВНА, 2);
			
		КонецЕсли;
				
	КонецЕсли;
	
	ТекущаяСтрока.ОсновнойДолг_Задолженность = ПредыдущаяСтрока.ОсновнойДолг_Задолженность 
													+ ТекущаяСтрока.ОсновнойДолг_Получение 
													- ТекущаяСтрока.ОсновнойДолг_Возврат;

КонецПроцедуры

Процедура ПогаситьПроцентыЭСП(ТекущаяСтрока, ПредыдущаяСтрока, ДенежныйПоток, ВозвратПоГрафику, ЭСП)
	
	Долг = ПредыдущаяСтрока.ЭСП_ОсновнойДолг_Задолженность + ПредыдущаяСтрока.ЭСП_Проценты_ЗадолженностьТочность;
	
	ЭСП_Проценты_НачислениеТочность = ПолучитьПроцентыЗаПериод(Долг, ЭСП/100, ТекущаяСтрока.ЧислоДнейНачисления);
	ТекущаяСтрока.ЭСП_Проценты_Начисление = Окр(ЭСП_Проценты_НачислениеТочность, 2);//срабатывает округление
	
	Если ВозвратПоГрафику Тогда
		ТекущаяСтрока.ЭСП_Проценты_Уплата = ДенежныйПоток - ТекущаяСтрока.ОсновнойДолг_Возврат;
	Иначе
		ДолгПоПроцентам = ПредыдущаяСтрока.ЭСП_Проценты_Задолженность + ТекущаяСтрока.ЭСП_Проценты_Начисление;
				
		Если Долг > 0 Тогда
			ТекущаяСтрока.ЭСП_Проценты_Уплата = Макс(0, Мин(ДенежныйПоток, ДолгПоПроцентам));
		Иначе	
			ТекущаяСтрока.ЭСП_Проценты_Уплата = Мин(0, Макс(ДенежныйПоток, ДолгПоПроцентам));
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяСтрока.ЭСП_Проценты_Задолженность = ПредыдущаяСтрока.ЭСП_Проценты_Задолженность 
													+ ТекущаяСтрока.ЭСП_Проценты_Начисление 
													- ТекущаяСтрока.ЭСП_Проценты_Уплата;
													
	ТекущаяСтрока.ЭСП_Проценты_ЗадолженностьТочность = ПредыдущаяСтрока.ЭСП_Проценты_ЗадолженностьТочность
												+ ЭСП_Проценты_НачислениеТочность 
												- ТекущаяСтрока.ЭСП_Проценты_Уплата;
													
	//Условие точки останова:
	//ТекущаяСтрока.Дата = ДАТА(2018,1,31)
	ДенежныйПоток = ДенежныйПоток - ТекущаяСтрока.ЭСП_Проценты_Уплата;

КонецПроцедуры

Процедура ПогаситьОсновнойДолгЭСП(ТекущаяСтрока, ПредыдущаяСтрока, ДенежныйПоток, ВозвратПоГрафику)
	
	ТекущаяСтрока.ЭСП_ОсновнойДолг_Возврат = Макс(ДенежныйПоток, 0);
	ТекущаяСтрока.ЭСП_ОсновнойДолг_Задолженность = ПредыдущаяСтрока.ЭСП_ОсновнойДолг_Задолженность
														+ ТекущаяСтрока.ОсновнойДолг_Получение 
														- ТекущаяСтрока.ЭСП_ОсновнойДолг_Возврат;

КонецПроцедуры

Процедура РассчитатьДисконт(ТекущаяСтрока, ПредыдущаяСтрока)
	
	ТекущаяСтрока.Дисконт_Амортизация = ТекущаяСтрока.Проценты_Начисление - ТекущаяСтрока.ЭСП_Проценты_Начисление;
	ТекущаяСтрока.Дисконт_Остаток = ПредыдущаяСтрока.Дисконт_Остаток 
										+ ТекущаяСтрока.Дисконт_Начисление 
										- ТекущаяСтрока.Дисконт_Амортизация;

КонецПроцедуры

Процедура СкорректироватьОсновнойДолг(ДанныеГрафика, ТекущаяСтрока, ПредыдущаяСтрока)
	
	Если ТекущаяСтрока.ОсновнойДолг_Задолженность = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьДисконт = (ТекущаяСтрока.Дисконт_Остаток <> 0);
	
	ИзменениеВозвратОД = Окр(ТекущаяСтрока.ОсновнойДолг_Задолженность, 2);
	Если ИзменениеВозвратОД <> 0 Тогда
		ТекущаяСтрока.ОсновнойДолг_Возврат = ТекущаяСтрока.ОсновнойДолг_Возврат + ИзменениеВозвратОД;
		ТекущаяСтрока.ОсновнойДолг_Задолженность = 0;
	КонецЕсли;
	
	ЭСП_ИзменениеВозвратОД = Окр(ТекущаяСтрока.ЭСП_ОсновнойДолг_Задолженность, 2);
	Если ЭСП_ИзменениеВозвратОД <> 0 Тогда
		ТекущаяСтрока.ЭСП_ОсновнойДолг_Возврат = ТекущаяСтрока.ЭСП_ОсновнойДолг_Возврат + ЭСП_ИзменениеВозвратОД;
		ТекущаяСтрока.ЭСП_ОсновнойДолг_Задолженность = 0;
	КонецЕсли;
	
	Если (ТекущаяСтрока.Проценты_Задолженность <> 0) Или (ИзменениеВозвратОД <> 0) Тогда
		
		ТекущаяСтрока.Проценты_Уплата = ТекущаяСтрока.Проценты_Уплата - ИзменениеВозвратОД;
		ТекущаяСтрока.Проценты_Начисление = ТекущаяСтрока.Проценты_Начисление 
											- ТекущаяСтрока.Проценты_Задолженность
											- ИзменениеВозвратОД;
		
		ТекущаяСтрока.Проценты_Задолженность = 0;
		
		ПересчитатьДисконт = Истина;
		
	КонецЕсли;

	Если (ТекущаяСтрока.ЭСП_Проценты_Задолженность <> 0) Или (ЭСП_ИзменениеВозвратОД <> 0) Тогда
		ТекущаяСтрока.ЭСП_Проценты_Начисление = ТекущаяСтрока.ЭСП_Проценты_Начисление 
												- ТекущаяСтрока.ЭСП_Проценты_Задолженность
												- ЭСП_ИзменениеВозвратОД;
		ТекущаяСтрока.ЭСП_Проценты_Задолженность = 0;
		ПересчитатьДисконт = Истина;
	КонецЕсли;

	Если ПересчитатьДисконт Тогда
		РассчитатьДисконт(ТекущаяСтрока, ПредыдущаяСтрока);		
		ТекущаяСтрока.Дисконт_Амортизация = ТекущаяСтрока.Дисконт_Амортизация - ТекущаяСтрока.Дисконт_Остаток;
		ТекущаяСтрока.Дисконт_Остаток = 0;
	КонецЕсли;
	
КонецПроцедуры

Функция ЗаполнитьПервуюСтроку(ДанныеГрафика, ВозвратПоГрафику, ЕстьИзменениеГрафика, ДатаИзмененияГрафика)

	Если ДанныеГрафика.ГрафикМСФО.Количество() = 0 Тогда
		Возврат Неопределено;		
	КонецЕсли;
	
	ПерваяСтрока = ДанныеГрафика.ГрафикМСФО[0];
	ЧПС = ДанныеГрафика.СтрокаФИ.ЧистаяПриведеннаяСтоимостьМСФО;
	ОстатокОД = 0;
	
	Если ЕстьИзменениеГрафика Тогда
		
		Если ДанныеГрафика.СтрокаФИ.ПризнатьНовыйФинансовыйИнструментМСФО Тогда
			ПерваяСтрока.ОсновнойДолг_Получение	= ЧПС;//получение нового ОД
			ПерваяСтрока.ОсновнойДолг_Возврат = 0;
		Иначе 
			
			ПерваяСтрока = ДанныеГрафика.ГрафикМСФО.Найти(ДанныеГрафика.СтрокаФИ.ДатаПризнания, "Дата");
			Если ПерваяСтрока = Неопределено Тогда
				Возврат Неопределено;
			КонецЕсли;
			ПерваяСтрока.ОсновнойДолг_Возврат = 0;//возрат по графику(ОД_Поступление-ДП, ДП=ОД_Поступление-ОД_Списание)
			
			ИндексТекСтроки = ДанныеГрафика.ГрафикМСФО.Индекс(ПерваяСтрока);
			Если ИндексТекСтроки > 0 Тогда
				ОстатокОД = ДанныеГрафика.ГрафикМСФО.Получить(ИндексТекСтроки-1).ОсновнойДолг_Задолженность;
			КонецЕсли;
			
		КонецЕсли;
				
	Иначе //новый график, нет изменения
		
		Если Не ВозвратПоГрафику Тогда //если не возврат по графику, тогда дисконт ставим в возврат ОД
			
			ДанныеГрафика.ГрафикМСФО.ЗаполнитьЗначения(0, "ОсновнойДолг_Возврат");//очистим, чтобы погасить заново по правилам МСФО
			ПерваяСтрока.ОсновнойДолг_Возврат = ПерваяСтрока.ОсновнойДолг_Получение - ЧПС;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДанныеГрафика.РассчитыватьДисконт И Не (ДанныеГрафика.Лизинг И ЕстьИзменениеГрафика) Тогда//признание дисконта при получении задолженности
		ПерваяСтрока.Дисконт_Начисление = ОстатокОД + ПерваяСтрока.ОсновнойДолг_Получение - ЧПС;
	КонецЕсли;

КонецФункции

Функция НачальнаяПредыдущаяСтрока(ДанныеГрафика, ВозвратПоГрафику, ЕстьИзменениеГрафика, ДатаИзмененияГрафика)

	// дата первой операции, чтобы не начислились проценты
	ПредыдущаяСтрока = Новый Структура("Дата, ОсновнойДолг_Задолженность, Проценты_Задолженность, Дисконт_Остаток,
										|ЭСП_Проценты_Задолженность, ЭСП_ОсновнойДолг_Задолженность,
										|Проценты_ЗадолженностьТочность,ЭСП_Проценты_ЗадолженностьТочность",	
										ДанныеГрафика.СтрокаФИ.ДатаПризнания, 0, 0, 0, 0, 0, 0, 0);	
										
	Если ЕстьИзменениеГрафика И ДанныеГрафика.СтрокаФИ.ПризнатьНовыйФинансовыйИнструментМСФО Тогда
		
		//ПредыдущаяСтрока.ЭСП_ОсновнойДолг_Задолженность = ДанныеГрафика.СтрокаФИ.ЧистаяПриведеннаяСтоимостьМСФО;
				
	ИначеЕсли ЕстьИзменениеГрафика И ДанныеГрафика.ГрафикМСФО.Количество() Тогда // изменение старого графика 
		
		//ЗаполнитьЗначенияСвойств(ПредыдущаяСтрока, ДанныеГрафика.ГрафикМСФО[0], , "Дисконт_Остаток,ЭСП_Проценты_Задолженность");
		ТекущаяСтрока = ДанныеГрафика.ГрафикМСФО.Найти(ДанныеГрафика.СтрокаФИ.ДатаПризнания, "Дата");
		Если ТекущаяСтрока <> Неопределено Тогда
			ПредыдущаяСтрока = ДанныеГрафика.ГрафикМСФО.Получить(ДанныеГрафика.ГрафикМСФО.Индекс(ТекущаяСтрока)-1);
		КонецЕсли;
		
	ИначеЕсли Не ЕстьИзменениеГрафика И ВозвратПоГрафику И ДанныеГрафика.ГрафикМСФО.Количество() Тогда //новый график, нет изменения
		
		//если возврат по графику, тогда дисконт ставим как задолженность по процентам
		ПредыдущаяСтрока.Вставить("Проценты_Задолженность", 		- ДанныеГрафика.ГрафикМСФО[0].Дисконт_Начисление);
		ПредыдущаяСтрока.Вставить("Проценты_ЗадолженностьТочность", ПредыдущаяСтрока.Проценты_Задолженность);
		
	КонецЕсли;
	
	Возврат ПредыдущаяСтрока;
	
КонецФункции

#КонецОбласти

#Область ВспомогательныеФункции

#Область ВНА

Процедура РаспределитьПропорционально(СтрокиТаб, РаспределяемаяСумма, КолонкаРаспределения = "СуммаМСФО", КолонкаДолей = "СуммаМСФО")

	Если РаспределяемаяСумма=0 Тогда
		Возврат;
	КонецЕсли;
	
	Доли = Новый Массив;
	Для й = 0 По СтрокиТаб.Количество()-1 Цикл
		Доли.Добавить(СтрокиТаб[й][КолонкаДолей]);
	КонецЦикла;
	
	ДолиСуммы = ОбщегоНазначенияКлиентСервер.РаспределитьСуммуПропорциональноКоэффициентам(РаспределяемаяСумма, Доли, 2);
	Если Не ЗначениеЗаполнено(ДолиСуммы) Тогда
		ДолиСуммы = Новый Массив(Доли.Количество());
	КонецЕсли;
	
	Для й = 0 По СтрокиТаб.Количество()-1 Цикл
		СтрокиТаб[й][КолонкаРаспределения] = ДолиСуммы[й];
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьЧПСпоМАП(ДанныеГрафика)

	//в лизинге всегда есть проценты(МАП)
	ДатаИсключения = '00010101';//для нового графика
	ДатаНачалаГрафикаЧПС = ДанныеГрафика.СтрокаФИ.ДатаПризнания;
	
	ЕстьИзменениеГрафика = ЕстьИзменениеГрафика(ДанныеГрафика);
	Если ЕстьИзменениеГрафика Тогда //не берем предыдущие операции для расчета ЧПС
		
		ДатаИсключения = НачалоДня(ДанныеГрафика.СтрокаФИ.ДатаПризнания - 24*60*60);
		Если ДанныеГрафика.ГрафикМСФО.Количество() Тогда
			ДатаНачалаГрафикаЧПС = ДанныеГрафика.ГрафикМСФО.Получить(ДанныеГрафика.ГрафикМСФО.Количество()-1).Дата;//ЧПС должна быть сравнима с ОД старой части графика
		КонецЕсли;
		
	КонецЕсли;
	
	ДенежныеПотоки = УчетФинансовыхИнструментовМСФОСерверУХ.ПолучитьДенежныеПотоки(ДанныеГрафика, 
						Истина, Ложь, Истина, Ложь, Ложь, Истина, Ложь, ДатаИсключения);
	
	СтрокаТаб = ДенежныеПотоки.Добавить();
	СтрокаТаб.Дата = ДатаНачалаГрафикаЧПС;
	СтрокаТаб.ДенежныйПоток = 0;
					
	ДенежныеПотоки.Сортировать("Дата Возр");
	
	Возврат ПолучитьЧПС(ДенежныеПотоки, ДанныеГрафика.СтрокаФИ.РыночнаяПроцентнаяСтавкаМСФО / 100);

КонецФункции

Функция ПодготовитьИтогиВНА(ДанныеГрафика, СтруктураДействий)

	Отбор = Новый Структура("ВидОперации", ПредопределенноеЗначение("Справочник.ВидыОпераций.ВводВЭксплуатацию"));
	ИтогиВНА = ДанныеГрафика.ВНА.Скопировать(Отбор, "ВНА, СуммаМСФО");
	ИтогиВНА.Колонки.Добавить("Доля");
	СуммаОД = ИтогиВНА.Итог("СуммаМСФО");
	
	Если (ИтогиВНА.Количество() = 0) Или (СуммаОД = 0) Тогда
		СтруктураДействий.Очистить();
		
		Сообщение = Нстр("ru = 'Не заполнена стоимость ВНА. Расчет графика не возможен.'");
		Сообщить(Сообщение); 
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	ИтогиВНА.Свернуть("ВНА", "СуммаМСФО,Доля");
	Для каждого СтрокаВНА Из ИтогиВНА Цикл
		СтрокаВНА.Доля = СтрокаВНА.СуммаМСФО / СуммаОД;
	КонецЦикла;
	
	Отбор = Новый Структура("ВидОперации", ПредопределенноеЗначение("Справочник.ВидыОпераций.ВозвратОбъектаЛизинга"));
	ДосрочныеВозвраты = ДанныеГрафика.ВНА.Скопировать(Отбор, "ВНА, Дата");
	
    Если ДосрочныеВозвраты.Количество() >= ИтогиВНА.Количество() Тогда
		
		ДатаОкончанияПоВозвратам = ОбщегоНазначенияКлиентСерверУХ.МаксимумВМассиве(ДосрочныеВозвраты.ВыгрузитьКолонку("Дата")); 
		Если ЗначениеЗаполнено(ДатаОкончанияПоВозвратам) И (ДанныеГрафика.СтрокаФИ.ДатаОкончания <> ДатаОкончанияПоВозвратам) Тогда
			
			СтараяДата = ДанныеГрафика.СтрокаФИ.ДатаОкончания;
			ДанныеГрафика.СтрокаФИ.ДатаОкончания = ДатаОкончанияПоВозвратам;
			
			ТекстСообщения = НСтр("ru = 'На основании досрочных возвратов ВНА скорректирована дата окончания с <%1> на <%2>'");
			Сообщить(СтрШаблон(ТекстСообщения, Формат(СтараяДата, "ДЛФ=D"), Формат(ДатаОкончанияПоВозвратам, "ДЛФ=D")));
			
		КонецЕсли;
	
	КонецЕсли;
	
	ИтогиВНА.Индексы.Добавить("ВНА");
	
	Возврат ИтогиВНА;
	
КонецФункции

Функция ОтборВводВНА()

	Возврат Новый Структура("ВидОперации", ПредопределенноеЗначение("Справочник.ВидыОпераций.ВводВЭксплуатацию"));

КонецФункции

Функция ВидОперацииПоЗнакуИзмененияСуммы(СуммаИзменения = 0)

	Если СуммаИзменения > 0 Тогда
		Возврат ПредопределенноеЗначение("Справочник.ВидыОпераций.УвеличениеЛизинга");
	ИначеЕсли СуммаИзменения < 0 Тогда
		Возврат ПредопределенноеЗначение("Справочник.ВидыОпераций.УменьшениеЛизинга");
	Иначе 
		Возврат ПредопределенноеЗначение("Справочник.ВидыОпераций.ПустаяСсылка");
	КонецЕсли;

КонецФункции

Функция ПодготовитьСтрокиИзмененияВНА(ДанныеГрафика, ИзменениеОД)

	Если ИзменениеОД = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ДатаИзмененияГрафика = ДанныеГрафика.СтрокаФИ.ДатаПризнания;
	ВНА = Новый Массив;
	ИсключаемыеВНА = Новый Массив;
	Для каждого СтрокаВНА Из ДанныеГрафика.ВНА Цикл
		Если СтрокаВНА.Дата > ДатаИзмененияГрафика Тогда
			Продолжить;//будущая операция
		ИначеЕсли СтрокаВНА.ВидОперации = ПредопределенноеЗначение("Справочник.ВидыОпераций.ВводВЭксплуатацию") Тогда
			ВНА.Добавить(СтрокаВНА.ВНА);//на дату модификации уже введен
		ИначеЕсли СтрокаВНА.ВидОперации = ПредопределенноеЗначение("Справочник.ВидыОпераций.ВозвратОбъектаЛизинга") Тогда
			ИсключаемыеВНА.Добавить(СтрокаВНА.ВНА);//на дату модификации уже возвращен
		КонецЕсли;		
	КонецЦикла;
	
	Если (ВНА.Количество() = 1) И (ИсключаемыеВНА.Количество() = 0) Тогда // не используем БС ВНА
		ЗначениеБСВНА = Новый Структура("ВНА,БалансоваяСтоимость,АмортизацияРасчет", ВНА[0], 1, 0);
		БСВНА = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Новый Структура("Значение", ЗначениеБСВНА));//Доля = 1
	Иначе
		
		Документ		= ДанныеГрафика.Документ;
		ВидУчетаМСФО	= ПредопределенноеЗначение("Перечисление.ВидыУчета.МСФО");	
		ПоляБСВНА 		= "ВНА,ВидУчета,БалансоваяСтоимость,АмортизацияРасчет";
		
		ДанныеБСВНА = МСФОВНАВызовСервераУХ.ПолучитьРеквизитыВНА(
			ДатаИзмененияГрафика, ВНА, Документ.Организация, ВидУчетаМСФО, Документ.Сценарий, ПоляБСВНА);
		БСВНА = ДанныеБСВНА.МСФО;
		
	КонецЕсли;
	
	Результат = Новый Массив;
	Для каждого СтрокаБСВНА Из БСВНА Цикл
		
		ВыбытиеТекущегоВНА = (ИсключаемыеВНА.Найти(СтрокаБСВНА.Значение.ВНА) <> Неопределено);
		
		Отбор = Новый Структура("ВНА, Дата", СтрокаБСВНА.Значение.ВНА, ДатаИзмененияГрафика);
		СтрокиВНА = ДанныеГрафика.ВНА.НайтиСтроки(Отбор);
		
		Если Не ВыбытиеТекущегоВНА И (СтрокиВНА.Количество() = 0) Тогда
			СтрокаВНА = ДанныеГрафика.ВНА.Добавить(); //добавляем событие изменения стоимости по ВНА
			ЗаполнитьЗначенияСвойств(СтрокаВНА, Отбор);
			СтрокаВНА.СписатьНаВНА = Истина;//по умолчанию
			СтрокиВНА.Добавить(СтрокаВНА);
		КонецЕсли;
		
		Для каждого СтрокаВНА Из СтрокиВНА Цикл			
			Если ВыбытиеТекущегоВНА Тогда
				
				Если СтрокаВНА.ВидОперации = ПредопределенноеЗначение("Справочник.ВидыОпераций.ВозвратОбъектаЛизинга") Тогда
					//при возврате ВНА - списываем БС
					СтрокаВНА.СуммаМСФО = СтрокаБСВНА.Значение.БалансоваяСтоимость - СтрокаБСВНА.Значение.АмортизацияРасчет;
					СтрокаВНА.Доля = 0;
					ИзменениеОД = ИзменениеОД - (-СтрокаВНА.СуммаМСФО);//ИзмОД_ОстВНА = (ЧПС-ОстДолга)-ВыбБСВНА	
				Иначе //событий по выбывающему ВНА на дату выбытия быть не должно
					ДанныеГрафика.ВНА.Удалить(СтрокаВНА);										
				КонецЕсли;
				
			Иначе	
				СтрокаВНА.СуммаМСФО = 0;//СтрокаВНА не должна попасть в текущий расчет ЧПС
				СтрокаВНА.Доля = СтрокаБСВНА.Значение.БалансоваяСтоимость - СтрокаБСВНА.Значение.АмортизацияРасчет;
				Результат.Добавить(СтрокаВНА);
			КонецЕсли;
			
			СтрокаБСВНА.Значение.БалансоваяСтоимость = 0;//распределили на первую найденную строку			
		КонецЦикла;
	
	КонецЦикла;
			
	ВидОперации = ВидОперацииПоЗнакуИзмененияСуммы(ИзменениеОД);
	Для каждого СтрокаВНА Из Результат Цикл
		СтрокаВНА.ВидОперации = ВидОперации;
	КонецЦикла;

	Возврат Результат;

КонецФункции

#КонецОбласти

Функция ПолучитьСледующуюОтчетнуюДату(ДатаПромежуточнойОперации, ПериодичностьОтчетныхДат)
	
	ОтчетнаяДата = ОбщегоНазначенияУХ.ДобавитьИнтервал(ДатаПромежуточнойОперации,  ПериодичностьОтчетныхДат, 1);
	Если ПериодичностьОтчетныхДат = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
		Возврат НачалоДня(ОтчетнаяДата);
	Иначе	
		Возврат НачалоДня(КонецМесяца(ОтчетнаяДата));
	КонецЕсли;	

КонецФункции

Функция ПолучитьПроцентыЗаПериод(ДенежныйПоток, Процент, ЧислоДнейНачисления)
	Возврат ДенежныйПоток * (Pow(1 + Процент, ЧислоДнейНачисления / 365) - 1);
КонецФункции

Процедура ДобавитьНовуюКолонку(Коллекция, ИмяКолонки, ОписаниеТипа = Неопределено)
	
	Если Коллекция.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	Коллекция.Колонки.Добавить(ИмяКолонки, ОписаниеТипа);

КонецПроцедуры

Процедура ВыделитьДолгосрочнуюЧастьДоГода(ДанныеГрафика)
	
	ПоследнийИндекс = ДанныеГрафика.ГрафикМСФО.Количество()-1;	
	
	ДатаПеревода = ДобавитьМесяц(ДанныеГрафика.ГрафикМСФО[ПоследнийИндекс].Дата, -12);
	
	Для НомерСтроки = 0 По ПоследнийИндекс Цикл
		Если ДанныеГрафика.ГрафикМСФО[НомерСтроки].Дата > ДатаПеревода Тогда
			
			//Задолженность перед переводом становится краткосрочной
			НомерСтрокиПеревода = ?(НомерСтроки-1 < 0, 0, НомерСтроки-1);
			СтрокаЗаписи = ДанныеГрафика.ГрафикМСФО[НомерСтрокиПеревода];
			СтрокаЗаписи.ОсновнойДолг_ДолгосрочнаяЗадолженность = 0;
			СтрокаЗаписи.ПереводВКраткосрочную = СтрокаЗаписи.ПереводВКраткосрочную + СтрокаЗаписи.ОсновнойДолг_Задолженность;
			
			Прервать;
		Иначе 
			
			//Задолженность до даты перевода вся долгосрочная
			СтрокаЗаписи = ДанныеГрафика.ГрафикМСФО[НомерСтроки];
			СтрокаЗаписи.ОсновнойДолг_ДолгосрочнаяЗадолженность = СтрокаЗаписи.ОсновнойДолг_Задолженность;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция РассчитыватьДисконт(ВидОбъектаФинансовогоХарактера, ДополнительныеРасходы)

	Если ВидОбъектаФинансовогоХарактера.ВидСтавкиРасчетаПроцентов = ПредопределенноеЗначение("Перечисление.ВидыСтавокОбъектовФинансовогоХарактера.ЭффективнаяСтавка") Тогда
		Возврат Ложь;
	ИначеЕсли ВидОбъектаФинансовогоХарактера.ВидСтавкиРасчетаПроцентов = ПредопределенноеЗначение("Перечисление.ВидыСтавокОбъектовФинансовогоХарактера.СтавкаПоДоговору") Тогда
		Возврат ВидОбъектаФинансовогоХарактера.ВозвратПоГрафику И (ДополнительныеРасходы.Количество() = 0);
	Иначе 
		Возврат Истина;	
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЧПС(ГрафикТаблица, СтавкаВПроцентах)

	 Возврат ФинансоваяМатематикаКлиентСервер.ПолучитьЧистуюПриведеннуюСтоимость(
												СтавкаВПроцентах, 
												ГрафикТаблица.ВыгрузитьКолонку("ДенежныйПоток"), 
												ГрафикТаблица.ВыгрузитьКолонку("Дата")
											);

КонецФункции

#Область Реструктуризация

Функция ЕстьИзменениеГрафика(ДанныеГрафика)
	  Возврат ДанныеГрафика.КэшПредыдущегоГрафика.Количество() > 0;
КонецФункции

Функция ПроцентИзмененияГрафика(ДолгНаДатуИзменения, ЧПС)
	
	Если ЗначениеЗаполнено(ДолгНаДатуИзменения) Тогда
		Возврат (ДолгНаДатуИзменения - ЧПС) * 100 / ДолгНаДатуИзменения;
	Иначе 
		Возврат (1 - ЧПС) * 100 / 1;
	КонецЕсли;
	
КонецФункции

Функция ТребуетсяРеструктуризация(ПроцентИзмененияГрафика, Порог)
	 Возврат Макс(ПроцентИзмененияГрафика, -ПроцентИзмененияГрафика) >= Порог;
КонецФункции

Функция ПолучитьНовыйГрафик(ДанныеГрафика, ДатаИзмененияФИ, ЗадолженностьДоИзменения)
	
	НовыйГрафик = ДанныеГрафика.ГрафикМСФО.СкопироватьКолонки();
	
	Для каждого СтрокаИсточник Из ДанныеГрафика.ГрафикМСФО Цикл
		
		Если СтрокаИсточник.Дата < ДатаИзмененияФИ Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НовыйГрафик.Добавить(), СтрокаИсточник);
		
	КонецЦикла;
	
	//первая операция - признание новой задолженности при реструктуризации
	СтрокаГрафика = НовыйГрафик.Найти(ДатаИзмененияФИ, "Дата");
	Если СтрокаГрафика = Неопределено Тогда
		СтрокаГрафика = НовыйГрафик.Вставить(0);		
		СтрокаГрафика.Дата = ДатаИзмененияФИ;
	КонецЕсли;
	
	СтрокаГрафика.ДенежныйПоток = СтрокаГрафика.ДенежныйПоток - ЗадолженностьДоИзменения;//остаток долга в ДП нового графика
	СтрокаГрафика.ОсновнойДолг_Получение = СтрокаГрафика.ОсновнойДолг_Получение + ЗадолженностьДоИзменения; 
	
	Возврат НовыйГрафик;

КонецФункции

Процедура ЗаполнитьРеквизитыРеструктуризации(ДанныеГрафика, ДолгНаДатуИзменения, ЧПС)
	
	СтрокаФИ = ДанныеГрафика.СтрокаФИ;
	Порог = УчетФинансовыхИнструментовМСФОСерверУХ.ПолучитьПроцентСущественностиФИ() * 100;
	
	СтарыйПроцент = СтрокаФИ.ПроцентСущественностиМСФО;//далее обновим
	СтарыйПризнание	= СтрокаФИ.ПризнатьНовыйФинансовыйИнструментМСФО;
	ПризнаниеНовогоУстановленоВручную = ТребуетсяРеструктуризация(СтарыйПроцент, Порог) <> СтарыйПризнание;
	
	СтрокаФИ.ПроцентСущественностиМСФО = ПроцентИзмененияГрафика(ДолгНаДатуИзменения, ЧПС);
	
	Если ДанныеГрафика.Задолженность Тогда
		СтрокаФИ.ПризнатьНовыйФинансовыйИнструментМСФО = Ложь;// для ДКЗ нельзя признавать новый ФИ
	ИначеЕсли Не ПризнаниеНовогоУстановленоВручную Тогда
		СтрокаФИ.ПризнатьНовыйФинансовыйИнструментМСФО = ТребуетсяРеструктуризация(СтрокаФИ.ПроцентСущественностиМСФО, Порог);
	КонецЕсли;
	
КонецПроцедуры

Процедура КэшироватьГрафикДоИзменения(ДанныеГрафика)
	
	Если ДанныеГрафика.Свойство("КэшПредыдущегоГрафика") Тогда
		Возврат;
	КонецЕсли;

	КэшПредыдущегоГрафика = УчетФинансовыхИнструментовМСФОСерверУХ.ПолучитьПараметрыПредыдущегГрафика(ДанныеГрафика);
	ДанныеГрафика.Вставить("КэшПредыдущегоГрафика", КэшПредыдущегоГрафика);
	
	Если КэшПредыдущегоГрафика.Количество() = 0 Тогда
		ДанныеГрафика.СтрокаФИ.ДатаПризнанияДоРекласса 					= Неопределено;
		ДанныеГрафика.СтрокаФИ.ПараметрыУчетаФИДоРекласса 				= Неопределено;
		ДанныеГрафика.СтрокаФИ.ОстатокЗадолженностиНаНачалоПериодаМСФО 	= 0;
		ДанныеГрафика.СтрокаФИ.ПризнатьНовыйФинансовыйИнструментМСФО 	= Ложь;
		Возврат;
	КонецЕсли;
	
	ДанныеГрафика.СтрокаФИ.ДатаПризнанияДоРекласса					= КэшПредыдущегоГрафика.ДатаПризнания;
	ДанныеГрафика.СтрокаФИ.ПараметрыУчетаФИДоРекласса				= КэшПредыдущегоГрафика.ПараметрыУчетаФИ;
	ДанныеГрафика.СтрокаФИ.ОстатокЗадолженностиНаНачалоПериодаМСФО	= КэшПредыдущегоГрафика.Задолженность;
				
КонецПроцедуры

Функция ЭтоДатаПредыдущейВерсии(ДатаГрафика, ДатаИзмененияГрафика, ВключатьДатуИзменения = Истина)
	
	Возврат 
	ЗначениеЗаполнено(ДатаГрафика) //пустая дата = ввод не закончен и должен быть доступен
	И ?(ВключатьДатуИзменения, ДатаГрафика <= ДатаИзмененияГрафика, ДатаГрафика < ДатаИзмененияГрафика);
	
КонецФункции

#КонецОбласти

#Область ПересчетВВалюту

Процедура ПересчитатьСтоимостьПоФВ(ДанныеГрафика)
	
	Если ДанныеГрафика.ВалютаФИ = ДанныеГрафика.ФВ Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаФИ = ДанныеГрафика.ВалютаФИ; 
	ФВ = ДанныеГрафика.ФВ;
	
	Для каждого стр Из ДанныеГрафика.ВНА Цикл	
		стр.СуммаМСФО = ВВалюту(стр.СуммаМСФО, ВалютаФИ, ФВ, стр.Дата);		
	КонецЦикла;		
	
КонецПроцедуры

Функция ВВалюту(Сумма, ВалютаИсточник, ВалютаПриемник, Дата)
	Возврат УчетФинансовыхИнструментовМСФОСерверУХ.ВВалюту(Сумма, ВалютаИсточник, ВалютаПриемник, Дата);	
КонецФункции

#КонецОбласти

Функция ВалютаФИ(ФИ)

	Если Не ЗначениеЗаполнено(ФИ) Тогда
		Возврат ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка"); 	
	ИначеЕсли ТипЗнч(ФИ) = Тип("СправочникСсылка.ЦенныеБумаги") Тогда
		ОбщегоНазначенияУХ.ПолучитьЗначенияРеквизитов(ФИ, "ВалютаНоминала");
	Иначе	
		ОбщегоНазначенияУХ.ПолучитьЗначенияРеквизитов(ФИ, "ВалютаВзаиморасчетов");	
	КонецЕсли;

КонецФункции

#КонецОбласти

#КонецОбласти

#Область ОтображениеГрафика

Процедура УправлениеФормой(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ПодробноГрафик = Элементы.ФормаПодробноГрафик.Пометка;
	
	ПараметрыРасчета = УчетФинансовыхИнструментовМСФОСерверУХ.ПолучитьПараметрыРасчета(Объект.ПараметрыУчетаФинансовогоИнструментаМСФО);
	
	ЕстьДопРасходы = Объект.ДополнительныеРасходы.Количество() > 0;
	
	ВидСтавкиРСП = ПредопределенноеЗначение("Перечисление.ВидыСтавокОбъектовФинансовогоХарактера.РыночнаяСтавка");
	ВидСтавкиЭСП = ПредопределенноеЗначение("Перечисление.ВидыСтавокОбъектовФинансовогоХарактера.ЭффективнаяСтавка");
	
	ЭтоАктив				= ПараметрыРасчета.ЭтоАктив;
	ЭтоЛизинг 				= ПараметрыРасчета.Лизинг;
	ЭтоЗадолженность 		= ПараметрыРасчета.Задолженность;
		
	РассчитыватьДисконт = РассчитыватьДисконт(ПараметрыРасчета, Объект.ДополнительныеРасходы);
	ВидимостьПроцентовЭСП = РассчитыватьДисконт И ПараметрыРасчета.ПорядокУчетаДисконта;// дисконт балансе(видимость: ПроцентыЭСП+Дисконт)	
	ВидимостьТчПроценты = Не ЭтоЗадолженность И ПараметрыРасчета.ВозвратПоГрафику Или ЭтоЛизинг;
	ЕстьНДС = ЭтоЛизинг Или ПараметрыРасчета.Задолженность;

	Долгосрочный = (Объект.ДатаОкончания - Объект.ДатаПризнания)/86400 > 365;
	
	ЕстьДопРасходы2 = Ложь;
	Если ЭтоЛизинг И ЕстьДопРасходы Тогда
	    ЕстьДопРасходы = Объект.ДополнительныеРасходы.НайтиСтроки(Новый Структура("ТипПлатежа", Ложь)).Количество() > 0;
		ЕстьДопРасходы2 = Объект.ДополнительныеРасходы.НайтиСтроки(Новый Структура("ТипПлатежа", Истина)).Количество() > 0;
	КонецЕсли;
	
	ВидСтавки = ПараметрыРасчета.ВидСтавкиРасчетаПроцентов;
	ЕстьНеарендныеПлатежи = ЭтоЛизинг И Объект.Проценты.НайтиСтроки(Новый Структура("НеарендныйПлатеж", 0)).Количество() < Объект.Проценты.Количество();
	
	//Основной долг
	Элементы.ГрафикМСФОГруппаОсновнойДолг.Заголовок = ?(ЭтоЗадолженность, НСтр("ru = 'Расчеты по договору'"), НСтр("ru = 'Основной долг'"));
	Если ЭтоЗадолженность Тогда
	    Элементы.ГрафикМСФООсновнойДолг_Получение.Заголовок = ?(ЭтоАктив, НСтр("ru = 'Реализация'"), НСтр("ru = 'Закупки'"));
	ИначеЕсли ЭтоЛизинг Тогда
		Элементы.ГрафикМСФООсновнойДолг_Получение.Заголовок = ?(ЭтоАктив, НСтр("ru = 'Инвестиция в аренду'"), НСтр("ru = 'Стоимость ВНА, полученных в аренду'"));
	Иначе
		Элементы.ГрафикМСФООсновнойДолг_Получение.Заголовок = НСтр("ru = 'Получение'");
	КонецЕсли;
	
	Элементы.ГрафикМСФООсновнойДолг_Возврат.Заголовок 					= ?(ЭтоЗадолженность, НСтр("ru = 'Оплата'"), НСтр("ru = 'Возврат'"));
	Элементы.ГрафикМСФООсновнойДолг_ДолгосрочнаяЗадолженность.Видимость = ПодробноГрафик И Долгосрочный;
	Элементы.ГрафикМСФОПереводВКраткосрочную.Видимость 					= ПодробноГрафик И Долгосрочный;
	
	//Проценты	
	Элементы.ГрафикМСФОГруппаПроценты.Заголовок 		= СтрШаблон(НСтр("ru = 'Проценты (%1)'"), ВидСтавки);
	Элементы.ГрафикМСФОПроценты_Начисление.Видимость    = Не ВидимостьПроцентовЭСП Или ПодробноГрафик;	
	Элементы.ГрафикМСФОПроценты_Уплата.Видимость 		= Не ВидимостьПроцентовЭСП И Не ЭтоЗадолженность Или ПодробноГрафик;
	Элементы.ГрафикМСФОПроценты_Задолженность.Видимость = Не ВидимостьПроцентовЭСП Или ПодробноГрафик;
	
	//ПроцентыЭСП
	Элементы.ГрафикМСФОЭСП_Проценты_Начисление.Видимость 	= ВидимостьПроцентовЭСП И Не ЭтоЗадолженность Или ПодробноГрафик;
	Элементы.ГрафикМСФОЭСП_Проценты_Уплата.Видимость 		= ВидимостьПроцентовЭСП И Не ЭтоЗадолженность Или ПодробноГрафик;
	Элементы.ГрафикМСФОЭСП_Проценты_Задолженность.Видимость	= ВидимостьПроцентовЭСП И Не ЭтоЗадолженность Или ПодробноГрафик;
			
	//Дисконт
	Элементы.ГрафикМСФОДисконт_Начисление.Видимость 	= РассчитыватьДисконт;
	Элементы.ГрафикМСФОДисконт_Амортизация.Видимость 	= РассчитыватьДисконт;
	Элементы.ГрафикМСФОДисконт_Остаток.Видимость		= РассчитыватьДисконт;
		
	//Прочее	
	Элементы.ГрафикМСФОПроцентыБУ_Начисление.Видимость	= ПодробноГрафик;
	Элементы.ГрафикМСФОДенежныйПоток.Видимость			= ПодробноГрафик;
	Элементы.ГрафикМСФОДенежныйПоток.Заголовок			= ?(ЕстьНДС, НСтр("ru = 'Денежный поток без НДС'"), НСтр("ru = 'Денежный поток'"));
	Элементы.ГрафикМСФОНеарендныйПлатеж.Видимость		= ПодробноГрафик И ЭтоЛизинг И ЕстьНеарендныеПлатежи;
	Элементы.ГрафикМСФОНДС.Видимость					= ПодробноГрафик И ЕстьНДС;
	Элементы.ГрафикМСФОРасход2_Погашение.Видимость		= ПодробноГрафик И ЕстьДопРасходы2;
	
	//тч Основной долг
	Элементы.ГруппаОсновнойДолгТаблицей.Видимость	= Не ЭтоЛизинг;
	Элементы.ГруппаОсновнойДолгТаблицей.Заголовок 	= ?(Не ПараметрыРасчета.ВозвратПоГрафику И Не ЭтоЗадолженность, НСтр("ru = 'Денежный поток'"), Элементы.ГрафикМСФОГруппаОсновнойДолг.Заголовок);
	Элементы.ОсновнойДолгПолучение.Заголовок 		= Элементы.ГрафикМСФООсновнойДолг_Получение.Заголовок;
	Элементы.ОсновнойДолгВозврат.Заголовок 			= ?(Не ПараметрыРасчета.ВозвратПоГрафику И Не ЭтоЗадолженность, НСтр("ru = 'Выплаты'"), Элементы.ГрафикМСФООсновнойДолг_Возврат.Заголовок);
	Элементы.ОсновнойДолгНДС.Видимость 				= ЭтоЗадолженность;
	Элементы.ОсновнойДолгГруппаСчет.Видимость 		= ЭтоЗадолженность;	
	
	//тч ВНА	
	Элементы.ГруппаВНА.Видимость	= ЭтоЛизинг;
	//Элементы.ВНАДата.Заголовок		= ?(ЭтоАктив, НСтр("ru = 'Дата передачи ВНА в лизинг (МСФО)'"), НСтр("ru = 'Дата ввода в эксплуатацию (МСФО)'"));
	//Элементы.ВНАРассчитатьСтоимостьВНА.Видимость = Не ЗначениеЗаполнено(Объект.ДатаПризнанияДоРекласса);
	
	//тч Проценты
	Элементы.Проценты.Видимость							= ВидимостьТчПроценты;
	Элементы.ПроцентыУплата.Подсказка					= ?(ЕстьНДС, НСтр("ru = 'Уплата, включая НДС и неарендный платеж'"), "");
	Элементы.ПроцентыНДС.Видимость						= ЕстьНДС;
	Элементы.ПроцентыНеарендныйПлатеж.Видимость			= ЭтоЛизинг;
	
	Элементы.ДополнительныеРасходыТипПлатежа.Видимость 	= ЭтоЛизинг;
	
	//Параметры инструмента
	Элементы.СтавкаНДС.Видимость = ЭтоЗадолженность Или ЭтоЛизинг;
	 
	//изменение графика
	Элементы.ФормаГруппаВерсии.Видимость	= Объект.ПризнатьНовыйФинансовыйИнструментМСФО;
	Элементы.ГруппаДоРекласса.Видимость		= ЗначениеЗаполнено(Объект.ДатаПризнанияДоРекласса);
	Элементы.ГруппаПроценты.Заголовок		= ?(ЭтоЛизинг, НСтр("ru = 'Минимальные арендные платежи'"), НСтр("ru = 'Проценты'"));
	
	//Авансы
	Элементы.ГруппаАвансы.Видимость = ЭтоЛизинг;	
		
	//команды
	Элементы.ФормаЗагрузитьОсновнойДолгИПроценты.Видимость		= ВидимостьТчПроценты И Не ЭтоЛизинг;
	Элементы.ФормаЗагрузитьГрафикОсновногоДолга.Видимость		= Не ЭтоЛизинг;
	Элементы.ФормаЗагрузитьПогашениеПроцентов.Видимость			= ВидимостьТчПроценты;
	Элементы.ФормаЗагрузитьПогашениеПроцентов.Заголовок			= ?(ЭтоЛизинг, НСтр("ru = 'Загрузить минимальные арендные платежи'"), НСтр("ru = 'Загрузить погашение процентов'"));
	
	ЕстьИзменениеГрафика = ЗначениеЗаполнено(Объект.ДатаПризнанияДоРекласса);
	Элементы.ДекорацияИнформация.Видимость = ЕстьИзменениеГрафика;
	Если ЕстьИзменениеГрафика Тогда
		Если Не Объект.ПараметрыУчетаФИДоРекласса.Пустая() И Объект.ПараметрыУчетаФИДоРекласса <> Объект.ПараметрыУчетаФинансовогоИнструментаМСФО Тогда
			Элементы.ДекорацияИнформация.Заголовок = НСтр("ru = 'Рекласс финансового инструмента'");
			Элементы.ГруппаДоРекласса.Заголовок = НСтр("ru = 'Параметры рекласса'");
		ИначеЕсли Объект.ПризнатьНовыйФинансовыйИнструментМСФО Тогда 
			Элементы.ДекорацияИнформация.Заголовок = НСтр("ru = 'Сторно и признание нового финансового инструмента'");
			Элементы.ГруппаДоРекласса.Заголовок = НСтр("ru = 'Изменение графика'");
		Иначе	
			Элементы.ДекорацияИнформация.Заголовок = НСтр("ru = 'Изменение графика финансового инструмента'");
			Элементы.ГруппаДоРекласса.Заголовок = НСтр("ru = 'Изменение графика'");
		КонецЕсли;	
	КонецЕсли;
	
	Если ЭтоЛизинг И Не ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда //ограничения БМ по лизингу
		
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
						Элементы, "ГруппаДопРасходы", "Видимость", Ложь);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
						Элементы, "ПроцентыНеарендныйПлатеж", "Видимость", Ложь);
			
		ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
						Элементы, "ВНАДатаВозвратаМСФО", "Видимость", Ложь);
		
	КонецЕсли;
 		
КонецПроцедуры

Функция ПолучитьВидимостьПараметрыВыбораФИ(ЗначенияПараметровВыбора) Экспорт

	Лизинг 				= ЗначенияПараметровВыбора.Свойство("Лизинг") 			И ЗначенияПараметровВыбора.Лизинг;
	ВидИнструмента 		= ЗначенияПараметровВыбора.Свойство("ВидИнструмента") 	И ЗначенияПараметровВыбора.ВидИнструмента;
	ПлатежиВключают		= ЗначенияПараметровВыбора.Свойство("ПлатежиВключают") 	И ЗначенияПараметровВыбора.ПлатежиВключают;
	СнизитьРискССЧПУ 	= ЗначенияПараметровВыбора.Свойство("СнизитьРискССЧПУ") И ЗначенияПараметровВыбора.СнизитьРискССЧПУ;
	СнизитьРискССПСД 	= ЗначенияПараметровВыбора.Свойство("СнизитьРискССПСД") И ЗначенияПараметровВыбора.СнизитьРискССПСД;
	Лизинг10 			= ЗначенияПараметровВыбора.Свойство("Лизинг10")			И ЗначенияПараметровВыбора.Лизинг10 И ЗначенияПараметровВыбора.Лизинг;
	
	Результат = Новый Структура;
	
	Результат.Вставить("ВидИнструмента", 		Не Лизинг);
	Результат.Вставить("СнизитьРискССЧПУ", 		Не Лизинг И (ВидИнструмента = 0));
	Результат.Вставить("ПлатежиВключают", 		Не Лизинг И (ВидИнструмента = 0) И Не СнизитьРискССЧПУ);
	Результат.Вставить("БизнесМодель", 			Не Лизинг И (ВидИнструмента = 0) И Не СнизитьРискССЧПУ И Не ПлатежиВключают);
	Результат.Вставить("СнизитьРискССПСД", 		Не Лизинг И (ВидИнструмента = 1));
	Результат.Вставить("БизнесМодельДолевой",	Не Лизинг И (ВидИнструмента = 1) И Не СнизитьРискССПСД);
	
	Для каждого ТекущееЗначениеПараметра Из ЗначенияПараметровВыбора Цикл
	
		Если ТекущееЗначениеПараметра.Ключ = "Лизинг10" Тогда
			Результат.Вставить(ТекущееЗначениеПараметра.Ключ, Лизинг);
		ИначеЕсли СтрНачинаетсяС(ТекущееЗначениеПараметра.Ключ, "Лизинг1") Тогда
			Результат.Вставить(ТекущееЗначениеПараметра.Ключ, Лизинг10);
		ИначеЕсли СтрНачинаетсяС(ТекущееЗначениеПараметра.Ключ, "Лизинг") Тогда
			Результат.Вставить(ТекущееЗначениеПараметра.Ключ, Лизинг);
		КонецЕсли;
	
	КонецЦикла;
	
	Результат.Вставить("Лизинг", Истина);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти
