#Область ПрограммныйИнтерфейс

Процедура УтвердитьБланкиПоМассиву(МассивБланков) Экспорт
	
	Для Каждого Элемент Из МассивБланков Цикл
		
		Если НЕ ЗначениеЗаполнено(Элемент) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			
			ТекОбъект = Элемент.ПолучитьОбъект();
			ТекОбъект.ОбменДанными.Загрузка = истина;
			ТекОбъект.Утвержден = истина;
				
			ТекОБъект.Записать();
			
		ИСключение
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УтвердитьПравилаПоМассиву(МассивПравил) Экспорт
	
	Для Каждого Элемент Из МассивПравил Цикл
		
		Если Элемент.Ссылка=Справочники.ПравилаОбработки.ПустаяСсылка() Тогда 
			Продолжить;
		КонецЕсли;
		
		ТекОбъект = Элемент.ПолучитьОбъект();
		ТекОбъект.ОбменДанными.Загрузка = истина;
		ТекОбъект.Утверждено = истина;
		
		Попытка
			ТекОбъект.Записать();
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

#Область СправочникПериоды

Функция ОтносительныйПериодПоДате(ДатаНачала, Периодичность, Смещение, ТихийРежим = Ложь, Реструктурировать = Истина) Экспорт
	
	ДатаНачалаОтносительногоПериода = ОбщегоНазначенияУХ
											.ВернутьОтносительнуюДату(
												ОбщегоНазначенияУХ.ДатаНачалаПериода(ДатаНачала, Периодичность),
												Периодичность,
												Смещение
											);
	
	Если ДатаНачалаОтносительногоПериода = Неопределено Тогда
		
		Если НЕ ТихийРежим Тогда
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Не удалось определить начало относительного периода'"));
			
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Периоды.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ
	|	Периоды.ДатаНачала = &ДатаНачала
	|	И Периоды.Периодичность = &Периодичность
	|	И НЕ Периоды.Произвольный
	|	И НЕ Периоды.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачалаОтносительногоПериода);
	Запрос.УстановитьПараметр("Периодичность", Периодичность);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		ОбъектПериод=Справочники.Периоды.СоздатьЭлемент();
		ОбъектПериод.ДатаНачала=ДатаНачалаОтносительногоПериода;
		ОбъектПериод.Периодичность=Периодичность;
		ОбъектПериод.Заполнить(Неопределено);
		
		Попытка
			
			ОбъектПериод.Записать();
			
			Если Реструктурировать тогда
				Справочники.Периоды.РеструктурироватьПериоды();
			КонецЕсли;
			
			Возврат ОбъектПериод.Ссылка;
			
		Исключение
			
			Если Не ТихийРежим Тогда
				
				СообщениеОбОшибке = СтрШаблон(НСтр("ru = 'Невозможно определить относительный период (смещение = %1): не существует искомый период в справочнике ""Периоды""! '"), Смещение);
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СообщениеОбОшибке, , , СтатусСообщения.Важное);
				
			КонецЕсли;
			
			Возврат Справочники.Периоды.ПустаяСсылка();
			
		КонецПопытки;

	Иначе
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Получить(0);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМОВ RLS

Функция ПроверитьНаличиеПолныхПравУПользователя(Пользователь) Экспорт
	
	Возврат Пользователи.ЭтоПолноправныйПользователь(Пользователь,Ложь,Ложь);
	
КонецФункции

// Функции перенесены из модуля УправлениеРабочимПроцессом.

// Функция определяет возможность записи документов по периоду сценария
//
// Сценарий       - сценарий процесса
// ПериодСценария - период процесса
// Отказ          - Отказ
// ШапкаОшибки    - параметр, в который возвращается документ "Управление периодом сценария"
//
// Возвращает Истина - если документ УправлениеПериодомСценария не помечен на удаление и в нем не установлен флаг "Период закрыт"
//            Ложь   - иначе
//
Функция ПроверитьВозможностьЗаписиДокументовПоПериодуСценария(Сценарий, ПериодСценария,Организация, Отказ = Неопределено, ШапкаОшибки = "", Сообщать = Истина,ПериодОкончания = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СтатусыПериодовСценариев.СтатусБлокировки
	|ИЗ
	|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	|ГДЕ
	|	СтатусыПериодовСценариев.Сценарии = &Сценарий
	|	И СтатусыПериодовСценариев.Периоды = &ПериодСценария
	|	И СтатусыПериодовСценариев.Организации = &Организация";
		
	Запрос.УстановитьПараметр("Сценарий", 		Сценарий);
	Запрос.УстановитьПараметр("ПериодСценария", ПериодСценария);
	Запрос.УстановитьПараметр("Организация", 	Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Сообщение = "";
	
	Если Не Выборка.Следующий() Тогда
		
		Сообщение = "- для сценария """ + Сценарий + """ период """ + ПериодСценария + """ организация """ + Организация + """ еще не открыт!";
		Отказ = Истина;
		
	ИначеЕсли Выборка.СтатусБлокировки =1 Тогда
		
		Если  ПериодОкончания = Неопределено  Тогда		
			Сообщение = "- по сценарию """ + Сценарий + """ период """ + ПериодСценария+ """ организация """ + Организация + """ установлен запрет на изменение!";
			Отказ = Истина;		
		ИначеЕсли  ПериодСценария = ПериодОкончания	 Тогда
			Сообщение = "- по сценарию """ + Сценарий + """ период """ + ПериодСценария+ """ организация """ + Организация + """ установлен запрет на изменение!";
			Отказ = Истина;			
		КонецЕсли;	
	КонецЕсли;
	
	Если Не (ПустаяСтрока(Сообщение) ИЛИ Отказ = Неопределено) И Сообщать Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Сообщение, Отказ, ШапкаОшибки);
	КонецЕсли;
	
	Возврат ПустаяСтрока(Сообщение);
	
КонецФункции // ()

Функция ПроверятьПраваПоБланкам(Пользователь) Экспорт
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		Возврат Константы.ОграничиватьДоступНаУровнеЗаписей.Получить() И (НЕ ПроверитьНаличиеПолныхПравУПользователя(Пользователь));
		
	Иначе
		
		Возврат Ложь;
				
	КонецЕсли;
	
КонецФункции // ПроверятьПраваПоБланкам() 

Функция ПроверитьВозможностьЗаписиПоБланкуОтчета(БланкОтчета,Организация,Пользователь, Отказ=Неопределено, ШапкаОшибки="",ТихийРежим = Ложь) Экспорт
	
	Если НЕ ПроверятьПраваПоБланкам(Пользователь) Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	РегистрПрава="НастройкиПравДоступаПользователейБланкиДанныеРазвернутые";
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	НастройкиПравДоступаПользователейБланкиДанныеРазвернутые.Запись КАК Запись
	|ИЗ
	|	РегистрСведений."+РегистрПрава+" КАК НастройкиПравДоступаПользователейБланкиДанныеРазвернутые
	|ГДЕ
	|	НастройкиПравДоступаПользователейБланкиДанныеРазвернутые.Организация = &Организация
	|	И НастройкиПравДоступаПользователейБланкиДанныеРазвернутые.Пользователь = &Пользователь
	|	И НастройкиПравДоступаПользователейБланкиДанныеРазвернутые.БланкОтчета = &БланкОтчета";
			
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("БланкОтчета", 		БланкОтчета);
	Запрос.УстановитьПараметр("Пользователь", 		Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ЕстьПраваЗаписи=Выборка.Следующий() И Выборка.Запись=Истина;
	
	Если НЕ ЕстьПраваЗаписи Тогда
		
		Если НЕ ТихийРежим Тогда
			ТекстСообщения=СтрШаблон(Нстр("ru = 'У пользователя %1
			|отсутствуют права на изменение экземпляров отчетов с бланком %2 по организации %3'"),Пользователь,БланкОтчета,Организация);
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, Отказ, ШапкаОшибки);
		КонецЕсли;
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции //

Функция ПроверитьВозможностьОтображенияПоБланкуОтчета(БланкОтчета,Организация,Пользователь) Экспорт
	
	Если НЕ ПроверятьПраваПоБланкам(Пользователь) Тогда
		
		Возврат "";
		
	КонецЕсли;
	
	РегистрПрава="НастройкиПравДоступаПользователейБланкиДанныеРазвернутые";
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	НастройкиПравДоступаПользователейБланкиДанныеРазвернутые.Запись КАК Запись
	|ИЗ
	|	РегистрСведений."+РегистрПрава+" КАК НастройкиПравДоступаПользователейБланкиДанныеРазвернутые
	|ГДЕ
	|	НастройкиПравДоступаПользователейБланкиДанныеРазвернутые.Организация = &Организация
	|	И НастройкиПравДоступаПользователейБланкиДанныеРазвернутые.Пользователь = &Пользователь
	|	И НастройкиПравДоступаПользователейБланкиДанныеРазвернутые.БланкОтчета = &БланкОтчета";
			
	Запрос.УстановитьПараметр("Организация", 		Организация);
	Запрос.УстановитьПараметр("БланкОтчета", 		БланкОтчета);
	Запрос.УстановитьПараметр("Пользователь", 		Пользователь);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ Выборка.Следующий() Тогда
		
		Возврат СтрШаблон(Нстр("ru = 'У пользователя %1
		|отсутствуют права на просмотр бланка %2 по организации %3.
		|Выберите другой бланк.'"),Пользователь,БланкОтчета,Организация);
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
		
КонецФункции // ПроверитьВозможностьОтображенияПоБланкуОтчета() 


Функция ПроверитьВозможностьЗаписДанныхПоСтатусам(Организация,ПериодОтчета,Сценарий,ВидОтчета=Неопределено,Показатель=Неопределено,ОбластьДанных=Неопределено,Проект=Неопределено,Аналитика1=Неопределено,Аналитика2=Неопределено,Аналитика3=Неопределено,Аналитика4=Неопределено,Аналитика5=Неопределено,Аналитика6=Неопределено) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗначенияСтатусовПоказателейСинтетика.Показатель КАК Показатель,
	|	ЗначенияСтатусовПоказателейСинтетика.ИндексСостояния КАК ИндексСостояния,
	|	ЗначенияСтатусовПоказателейСинтетика.ЗначениеЗаблокировано КАК ЗначениеЗаблокировано
	|ИЗ
	|	РегистрСведений.ЗначенияСтатусовПоказателейСинтетика КАК ЗначенияСтатусовПоказателейСинтетика
	|ГДЕ
	|	ЗначенияСтатусовПоказателейСинтетика.Сценарий = &Сценарий
	|	И ЗначенияСтатусовПоказателейСинтетика.ПериодОтчета = &ПериодОтчета
	|	И ЗначенияСтатусовПоказателейСинтетика.ОрганизационнаяЕдиница = &Организация
	|	И ЗначенияСтатусовПоказателейСинтетика.ЗначениеЗаблокировано >= 2
	|	И ЗначенияСтатусовПоказателейСинтетика.ИндексСостояния = 3";
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ПериодОтчета",ПериодОтчета);
	Запрос.УстановитьПараметр("Сценарий",Сценарий);
	
	СоответствиеТекст=Новый Соответствие;
	СоответствиеТекст.Вставить("Организация","Организация");
	СоответствиеТекст.Вставить("ПериодОтчета","период отчета");
	СоответствиеТекст.Вставить("Сценарий","сценарий");
	
	Если ЗначениеЗаполнено(Проект) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ЗначенияСтатусовПоказателейСинтетика.Проект=&Проект";
		
		Запрос.УстановитьПараметр("Проект",Проект);
		СоответствиеТекст.Вставить("Проект","проект");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидОтчета) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ЗначенияСтатусовПоказателейСинтетика.ВидОтчета=&ВидОтчета";
		
		Запрос.УстановитьПараметр("ВидОтчета",ВидОтчета);
		СоответствиеТекст.Вставить("ВидОтчета","вид отчета");

		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Показатель) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ЗначенияСтатусовПоказателейСинтетика.Показатель=&Показатель";
		
		Запрос.УстановитьПараметр("Показатель",Показатель);
		СоответствиеТекст.Вставить("Показатель","показатель");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Аналитика1) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ЗначенияСтатусовПоказателейСинтетика.Аналитика1=&Аналитика1";
		
		Запрос.УстановитьПараметр("Аналитика1",Аналитика1);
		СоответствиеТекст.Вставить("Аналитика1","аналитика 1");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Аналитика2) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ЗначенияСтатусовПоказателейСинтетика.Аналитика2=&Аналитика2";
		
		Запрос.УстановитьПараметр("Аналитика2",Аналитика2);
		СоответствиеТекст.Вставить("Аналитика2","аналитика 2");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Аналитика3) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ЗначенияСтатусовПоказателейСинтетика.Аналитика3=&Аналитика3";
		
		Запрос.УстановитьПараметр("Аналитика3",Аналитика3);
		СоответствиеТекст.Вставить("Аналитика3","аналитика 3");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Аналитика4) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ЗначенияСтатусовПоказателейСинтетика.Аналитика4=&Аналитика4";
		
		Запрос.УстановитьПараметр("Аналитика4",Аналитика4);
		СоответствиеТекст.Вставить("Аналитика4","аналитика 4");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Аналитика5) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ЗначенияСтатусовПоказателейСинтетика.Аналитика5=&Аналитика5";
		
		Запрос.УстановитьПараметр("Аналитика5",Аналитика5);
		СоответствиеТекст.Вставить("Аналитика5","аналитика 5");
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Аналитика6) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ЗначенияСтатусовПоказателейСинтетика.Аналитика6=&Аналитика6";
		
		Запрос.УстановитьПараметр("Аналитика6",Аналитика6);
		СоответствиеТекст.Вставить("Аналитика6","аналитика 6");
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ОбластьДанных) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ЗначенияСтатусовПоказателейСинтетика.ОбластьДанных=&ОбластьДанных";
		
		Запрос.УстановитьПараметр("ОбластьДанных",ОбластьДанных);
		СоответствиеТекст.Вставить("ОбластьДанных","область данных");
		
	КонецЕсли;
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Если Результат.Следующий() Тогда
		
		ТекстОшибки="";
		
		Для Каждого Параметр ИЗ Запрос.Параметры Цикл
			
			ТекстОшибки=ТекстОшибки+", "+СоответствиеТекст[Параметр.Ключ]+": "+Параметр.Значение;
			
		КонецЦикла;
		
		Если СтрНайти(ТекстОшибки,"показатель")=0 Тогда
			
			ТекстОшибки=ТекстОшибки+", показатель: "+Результат.Показатель;
			
		КонецЕсли;
			
		Если Результат.ЗначениеЗаблокировано>0 Тогда
			
			ТекстОшибки=ТекстОшибки+"
			|значение заблокировано";
			
		КонецЕсли;
		
		Если Результат.ИндексСостояния>0 Тогда
			
			ТекстОшибки=ТекстОшибки+"
			|значение утверждено";
			
		КонецЕсли;
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Сред(ТекстОшибки,3),,,СтатусСообщения.Внимание);
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
			
КонецФункции // ПроверитьВозможностьЗаписДанныхПоСтатусам()


// Функция возвращает состояние этапа процесса для переданного настраиваемого отчета
// если для отчета не определен этап, возвращается неопределено
// 
// НастраиваемыйОтчет - настраиваемый отчет, состояние этапа которого необходимо вернуть
// ЭтапПроцесса       - параметр, в который возвращается сам этап
//
// Возвращаемое значение: ПеречислениеСсылка.СостоянияЭтаповПроцессов или Неопределено
//
Функция ПолучитьСостояниеЭтапаНастраиваемогоОтчета(НастраиваемыйОтчет, ЭтапПроцесса = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СостоянияВыполненияПроцессовСрезПоследних.СостояниеЭтапа КАК СостояниеЭтапа,
	|	СостоянияВыполненияПроцессовСрезПоследних.ЭтапПроцесса КАК ЭтапПроцесса
	|ПОМЕСТИТЬ ВыбранныеСостояния
	|ИЗ
	|	РегистрСведений.СостоянияВыполненияПроцессов.СрезПоследних(, НЕ ЭтапПроцесса.ПометкаУдаления) КАК СостоянияВыполненияПроцессовСрезПоследних
	|ГДЕ
	|	СостоянияВыполненияПроцессовСрезПоследних.Сценарий = &Сценарий
	|	И СостоянияВыполненияПроцессовСрезПоследних.ПериодСценария = &ПериодСценария
	|	И СостоянияВыполненияПроцессовСрезПоследних.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	_ЭтапыПроцессовФормируемыеДокументы.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ВыбранныеЭтапы
	|ИЗ
	|	Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК _ЭтапыПроцессовФормируемыеДокументы
	|ГДЕ
	|	_ЭтапыПроцессовФормируемыеДокументы.ШаблонДокумента = &ВидОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВыбранныеСостояния.СостояниеЭтапа КАК СостояниеЭтапа,
	|	ВыбранныеСостояния.ЭтапПроцесса КАК ЭтапПроцесса
	|ИЗ
	|	ВыбранныеЭтапы КАК ВыбранныеЭтапы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВыбранныеСостояния КАК ВыбранныеСостояния
	|		ПО ВыбранныеЭтапы.Ссылка = ВыбранныеСостояния.ЭтапПроцесса";
	Запрос.УстановитьПараметр("Сценарий",       НастраиваемыйОтчет.Сценарий);
	Запрос.УстановитьПараметр("ПериодСценария", НастраиваемыйОтчет.ПериодОтчета);
	Запрос.УстановитьПараметр("Организация",    НастраиваемыйОтчет.Организация);
	Запрос.УстановитьПараметр("ВидОтчета",      НастраиваемыйОтчет.ВидОтчета);
	Результат = Запрос.Выполнить();
	Выгрузка = Результат.Выгрузить();
	Если Выгрузка.Количество() = 0 Тогда
		РезультатФункции = Неопределено;
	ИначеЕсли Выгрузка.Количество() = 1 Тогда
		РезультатФункции = Выгрузка[0].СостояниеЭтапа;
		ЭтапПроцесса = Выгрузка[0].ЭтапПроцесса;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось однозначно определить этап для отчета %ВидОтчета% в периоде %Период% по сценарию %Сценарий%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидОтчета%", Строка(НастраиваемыйОтчет.ВидОтчета));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%", Строка(НастраиваемыйОтчет.ПериодОтчета));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сценарий%", Строка(НастраиваемыйОтчет.Сценарий));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Неопределено;
	КонецЕсли;
	Возврат РезультатФункции;
	
КонецФункции // ПолучитьСостояниеЭтапаНастраиваемогоОтчета()

Функция ПроверитьНаличиеЭкземпляровОтчетов(Сценарий, Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("ПериодСценария", Период);

	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастраиваемыйОтчет.Ссылка
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|ГДЕ
	|	НастраиваемыйОтчет.ПериодОтчета = &ПериодСценария
	|	И НастраиваемыйОтчет.Сценарий = &Сценарий
	|	И (НЕ НастраиваемыйОтчет.ПометкаУдаления)";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
КонецФункции

Функция ПроверитьНаличиеДополнительныхВалютВНеЗапланированныхОтчетах(Сценарий, Период) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сценарий", 		Сценарий);
	Запрос.УстановитьПараметр("ПериодСценария",	Период);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастраиваемыйОтчет.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втОтчеты
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|ГДЕ
	|	НастраиваемыйОтчет.ПериодОтчета = &ПериодСценария
	|	И НастраиваемыйОтчет.Ссылка.Сценарий = &Сценарий
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастраиваемыйОтчетДополнительныеВалюты.Ссылка
	|ИЗ
	|	Документ.НастраиваемыйОтчет.ДополнительныеВалюты КАК НастраиваемыйОтчетДополнительныеВалюты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(
	|				,
	|				Объект В
	|					(ВЫБРАТЬ
	|						т.Ссылка
	|					ИЗ
	|						втОтчеты КАК т)) КАК СостоянияСогласованияОбъектов
	|		ПО НастраиваемыйОтчетДополнительныеВалюты.Ссылка = СостоянияСогласованияОбъектов.Объект
	|ГДЕ
	|	НастраиваемыйОтчетДополнительныеВалюты.Ссылка В
	|			(ВЫБРАТЬ
	|				т.Ссылка
	|			ИЗ
	|				втОтчеты КАК т)
	|	И ЕСТЬNULL(СостоянияСогласованияОбъектов.СостояниеОбъекта, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Запланирован)";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПроверитьНаличиеНеУтвержденныхОтчетов(ВидыОтчета, Сценарий, Период, Организация) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастраиваемыйОтчет.Ссылка КАК Экземпляр
	|ПОМЕСТИТЬ втЭкземпляры
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|ГДЕ
	|	НастраиваемыйОтчет.Организация = &Организация
	|	И НастраиваемыйОтчет.ПериодОтчета = &ПериодОтчета
	|	И НастраиваемыйОтчет.Сценарий = &Сценарий
	|	И НастраиваемыйОтчет.ВидОтчета В(&ВидыОтчета)
	|	И НЕ НастраиваемыйОтчет.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Результат
	|ИЗ
	|	втЭкземпляры КАК втЭкземпляры
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(
	|				,
	|				Объект В
	|					(ВЫБРАТЬ
	|						т.Экземпляр
	|					ИЗ
	|						втЭкземпляры КАК т)) КАК СостоянияСогласованияОбъектов
	|		ПО втЭкземпляры.Экземпляр = СостоянияСогласованияОбъектов.Объект
	|ГДЕ
	|	ЕСТЬNULL(СостоянияСогласованияОбъектов.СостояниеОбъекта, НЕОПРЕДЕЛЕНО) <> ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден)"
	);
	
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("ПериодОтчета",	Период);
	Запрос.УстановитьПараметр("Сценарий",		Сценарий);
	Запрос.УстановитьПараметр("ВидыОтчета",		ВидыОтчета);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

Функция ПроверитьНаличиеДокументовСРеквизитамиТекущего(Отчет) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастраиваемыйОтчет.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|ГДЕ
	|	НастраиваемыйОтчет.Ссылка <> &ДокументРегистратор
	|	И НастраиваемыйОтчет.Сценарий = &Сценарий
	|	И НастраиваемыйОтчет.Организация = &Организация
	|	И НастраиваемыйОтчет.Проект = &Проект
	|	И НастраиваемыйОтчет.ПериодОтчета = &ПериодОтчета
	|	И НастраиваемыйОтчет.ВидОтчета = &ВидОтчета
	|	И НастраиваемыйОтчет.ПериодОкончания = &ПериодОкончания";
	
	Для Инд = 1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		Запрос.Текст = Запрос.Текст + "
		|	И НастраиваемыйОтчет.Аналитика" + Инд + " = &Аналитика" + Инд;
		Запрос.УстановитьПараметр("Аналитика" + Инд, Отчет["Аналитика" + Инд]);
	КонецЦикла;

	Запрос.УстановитьПараметр("Сценарий"			, Отчет.Сценарий);
	Запрос.УстановитьПараметр("Организация"			, Отчет.Организация);
	Запрос.УстановитьПараметр("Проект"				, Отчет.Проект);
	Запрос.УстановитьПараметр("ПериодОтчета"		, Отчет.ПериодОтчета);
	Запрос.УстановитьПараметр("ПериодОкончания"		, Отчет.ПериодОкончания);
	Запрос.УстановитьПараметр("ВидОтчета"			, Отчет.ВидОтчета);
	Запрос.УстановитьПараметр("ДокументРегистратор"	, Отчет.Ссылка);

	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Анализирует возможность записи сводного отчета, сравнивая состояние этого отчета 
// с состояниями связанных "элементарных" отчетов.
//
Процедура ПроверитьСостояниеАналитикНастраиваемогоОтчета(НастраиваемыйОтчет, Отказ, ШапкаОшибки) Экспорт

	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	ДоступныеСостояния = Новый СписокЗначений;
	Если НастраиваемыйОтчет.Состояние = Перечисления.СостоянияОтчетов.Подготовлен Тогда
		ДоступныеСостояния.Добавить(Перечисления.СостоянияОтчетов.Подготовлен);
		ДоступныеСостояния.Добавить(Перечисления.СостоянияОтчетов.Утвержден);
	ИначеЕсли НастраиваемыйОтчет.Состояние = Перечисления.СостоянияОтчетов.Утвержден Тогда
		ДоступныеСостояния.Добавить(Перечисления.СостоянияОтчетов.Утвержден);
	Иначе
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НастраиваемыйОтчет.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втЭкземпляры
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|ГДЕ
	|	НастраиваемыйОтчет.Организация = &Организация
	|	И НастраиваемыйОтчет.ПериодОтчета = &ПериодОтчета
	|	И НастраиваемыйОтчет.Сценарий = &Сценарий
	|	И НастраиваемыйОтчет.ВидОтчета = &ВидОтчета
	|	И &УсловиеПоАналитикам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастраиваемыйОтчет.Ссылка,
	|	РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта КАК Состояние
	|ИЗ
	|	втЭкземпляры КАК НастраиваемыйОтчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(
	|				,
	|				Объект В
	|					(ВЫБРАТЬ
	|						т.Ссылка
	|					ИЗ
	|						втЭкземпляры КАК т)) КАК РегистрСостоянийОбъектовСрезПоследних
	|		ПО НастраиваемыйОтчет.Ссылка = РегистрСостоянийОбъектовСрезПоследних.Объект
	|ГДЕ
	|	НЕ ЕСТЬNULL(РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта, НЕОПРЕДЕЛЕНО) В (&ДоступныеСостояния)";
	
	УсловияПоАналитикам = "";
	Для Инд = 1 По  ПараметрыСеанса.ЧислоДопАналитик Цикл
		УсловияПоАналитикам = УсловияПоАналитикам + ?(Инд = 1, "", " ИЛИ ") 
								+ "(НЕ НастраиваемыйОтчет.Аналитика" + Инд + " = НЕОПРЕДЕЛЕНО)";
	КонецЦикла;

	Запрос = Новый Запрос(СтрЗаменить(ТекстЗапроса, "&УсловиеПоАналитикам", ?(УсловияПоАналитикам = "", "ИСТИНА", УсловияПоАналитикам)));
		
	Запрос.УстановитьПараметр("Организация",          НастраиваемыйОтчет.Организация);
	Запрос.УстановитьПараметр("ПериодОтчета",         НастраиваемыйОтчет.ПериодОтчета);
	Запрос.УстановитьПараметр("Сценарий",             НастраиваемыйОтчет.Сценарий);
	Запрос.УстановитьПараметр("ВидОтчета",            НастраиваемыйОтчет.ВидОтчета);
	Запрос.УстановитьПараметр("ДоступныеСостояния",   ДоступныеСостояния);
		
	Если Не Запрос.Выполнить().Пустой() Тогда
		Если НастраиваемыйОтчет.Состояние = Перечисления.СостоянияОтчетов.Подготовлен Тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(" - Существуют не подготовленные отчеты по аналитикам!", Отказ, ШапкаОшибки);
		ИначеЕсли НастраиваемыйОтчет.Состояние = Перечисления.СостоянияОтчетов.Утвержден Тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(" - Существуют не утвержденные отчеты по аналитикам!", Отказ, ШапкаОшибки);
		КонецЕсли
	КонецЕсли;
	
КонецПроцедуры

// Проверяет возможность записи "элементарного" отчета, сравнивая состояние этого
// отчета с состоянием связанного сводного отчета.
//
Процедура ПроверитьСостояниеНастраиваемогоОтчетаПоАналитике(НастраиваемыйОтчет, Отказ, ШапкаОшибки) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли; 
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НастраиваемыйОтчет.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втЭкземпляры
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|ГДЕ
	|	НастраиваемыйОтчет.Организация = &Организация
	|	И НастраиваемыйОтчет.ПериодОтчета = &ПериодОтчета
	|	И НастраиваемыйОтчет.Сценарий = &Сценарий
	|	И НастраиваемыйОтчет.ВидОтчета = &ВидОтчета
	|	И &УсловиеПоАналитикам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастраиваемыйОтчет.Ссылка,
	|	РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта КАК Состояние,
	|	ПРЕДСТАВЛЕНИЕ(РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта)
	|ИЗ
	|	втЭкземпляры КАК НастраиваемыйОтчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(
	|				,
	|				Объект В
	|					(ВЫБРАТЬ
	|						т.Ссылка
	|					ИЗ
	|						втЭкземпляры КАК т)) КАК РегистрСостоянийОбъектовСрезПоследних
	|		ПО НастраиваемыйОтчет.Ссылка = РегистрСостоянийОбъектовСрезПоследних.Объект
	|ГДЕ
	|	ЕСТЬNULL(РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта, НЕОПРЕДЕЛЕНО) В (ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден), ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Подготовлен))";
	
	УсловияПоАналитикам = "";
	Для Инд = 1 По  ПараметрыСеанса.ЧислоДопАналитик Цикл
		УсловияПоАналитикам = УсловияПоАналитикам + ?(Инд = 1, "", " И ") + "НастраиваемыйОтчет.Аналитика" + Инд + " = НЕОПРЕДЕЛЕНО";
	КонецЦикла;

	Запрос = Новый Запрос(СтрЗаменить(ТекстЗапроса, "&УсловиеПоАналитикам", ?(УсловияПоАналитикам = "", "ИСТИНА", УсловияПоАналитикам)));
		
	Запрос.УстановитьПараметр("Организация",	НастраиваемыйОтчет.Организация);
	Запрос.УстановитьПараметр("ПериодОтчета",	НастраиваемыйОтчет.ПериодОтчета);
	Запрос.УстановитьПараметр("Сценарий",		НастраиваемыйОтчет.Сценарий);
	Запрос.УстановитьПараметр("ВидОтчета",		НастраиваемыйОтчет.ВидОтчета);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(" - Сводный " + Выборка.Ссылка + " находится в состоянии """ + Выборка.Состояние + """!", Отказ, ШапкаОшибки);
	КонецЕсли;
	
КонецПроцедуры

// Функция проверяет возможность утверждения документа текущим пользователем на основании настройки RLS.
Функция ПроверитьВозможностьУтвержденияОтчета(Пользователь, ВидОтчета, Организация) Экспорт
	
	Если НЕ ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		// В БМ виды отчетов без контроля на уровне записей. Можно делть все.
		Возврат Истина;
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь(Пользователь) Тогда // Для пользователя с полными правами возможность утверждения всегда возможна.
		Возврат Истина;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА 
	|ИЗ
	|	РегистрСведений.ПраваДоступаПользователейВидыОтчетов КАК т
	|ГДЕ
	|	т.Пользователь = &Пользователь
	|	И т.Организация = &Организация
	|	И т.ВидОтчета = &ВидОтчета
	|	И т.Утверждение");
	
	Запрос.УстановитьПараметр("Пользователь",	Пользователь);
	Запрос.УстановитьПараметр("Организация", 	Организация);
	Запрос.УстановитьПараметр("ВидОтчета", 		ВидОтчета);
	
	Возврат Не Запрос.Выполнить().Пустой();
		
КонецФункции

Функция УтверждениеОтчетаНеДоступно(Знач ВидОтчета, Знач Организация, Знач Проверяющий, Знач ТекущийПользовательОтчета = Неопределено) Экспорт

	Если ТекущийПользовательОтчета = Неопределено Тогда
		ТекущийПользовательОтчета = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
	
	Возврат 
	НЕ ПолныеПраваУХ.ПроверитьНаличиеПолныхПравУПользователя(ТекущийПользовательОтчета) 
	И (НЕ ПроверитьВозможностьУтвержденияОтчета(ТекущийПользовательОтчета, ВидОтчета, Организация)
		   		ИЛИ (ЗначениеЗаполнено(Проверяющий) И Проверяющий <> ТекущийПользовательОтчета));

КонецФункции

// Функция проверяет возможность записи документа текущим пользователем на основании настройки RLS.
Функция ПроверитьВозможностьЗаписиОтчета(Пользователь, ВидОтчета, Организация) Экспорт
	
	Если НЕ ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		// В БМ виды отчетов без контроля на уровне записей. Можно делть все.
		Возврат Истина;
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь(Пользователь) Тогда
		Возврат Истина;
	КонецЕсли;
		
	Если Не ПолучитьФункциональнуюОпцию("ОграничиватьДоступНаУровнеЗаписей") Тогда
		Возврат Истина;
	КонецЕсли;
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА
	|ИЗ
	|	РегистрСведений.ПраваДоступаПользователейВидыОтчетов КАК т
	|ГДЕ
	|	т.Пользователь = &Пользователь
	|	И т.Организация = &Организация
	|	И т.ВидОтчета = &ВидОтчета
	|	И т.Запись");
	
	Запрос.УстановитьПараметр("Пользователь",	Пользователь);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("ВидОтчета",		ВидОтчета);
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ РАБОТЫ С ВЕРСИЯМИ РЕГЛАМЕНТОВ ПОДГОТОВКИ ОТЧЕТНОСТИ.
//

// Функция возвращает Версию организационной структуры по заданным периоду отчета и сценарию.
Функция ВернутьВерсиюОрганизационнойСтруктурыПоПериодСценарию(ПериодОтчета, Сценарий) Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыПериодовСценариев.ВерсияРегламента КАК ВерсияОрганизационнойСтруктуры
	|ИЗ
	|	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	|ГДЕ
	|	СтатусыПериодовСценариев.Периоды = &Период
	|	И СтатусыПериодовСценариев.Сценарии = &Сценарий";
	
	Запрос.УстановитьПараметр("Период", 		ПериодОтчета);	
	Запрос.УстановитьПараметр("Сценарий", 		Сценарий);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ВерсияОрганизационнойСтруктуры;
	Иначе
		Возврат Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

// Функция определяет наличение движения по регистрам для документа
//
Функция ОпределитьНаличиеДвиженийПоРегистратору(ДокументСсылка) Экспорт
	ТекстЗапроса = "";	
	// для исключения падения для документов, проводящимся более чем по 256 таблицам
	счетчик_таблиц = 0;
	
	МетаданнныеДокумента = ДокументСсылка.Метаданные();
	
	Если МетаданнныеДокумента.Движения.Количество() = 0 Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Для Каждого Движение ИЗ МетаданнныеДокумента.Движения Цикл
		// в запросе получаем имена регистров, по которым есть хотя бы одно движение
		// например,
		// ВЫБРАТЬ Первые 1 «РегистрНакопления.ТоварыНаСкладах»
		// ИЗ РегистрНакопления.ТоварыНаСкладах
		// ГДЕ Регистратор = &Регистратор
		
		// имя регистра приводим к Строка(200), см. ниже
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 ВЫРАЗИТЬ(""" + Движение.ПолноеИмя() 
		+  """ КАК Строка(200)) КАК Имя ИЗ " + Движение.ПолноеИмя() 
		+ " ГДЕ Регистратор = &Регистратор";
		
		// если в запрос попадает более 256 таблиц – разбиваем его на две части
		// (вариант документа с проведением по 512 регистрам считаем нежизненным)
		счетчик_таблиц = счетчик_таблиц + 1;
		Если счетчик_таблиц = 256 Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ЗАпрос.УстановитьПараметр("Регистратор", ДокументСсылка);
	// при выгрузке для колонки «Имя» тип устанавливается по самой длинной строке из запроса
	// при втором проходе по таблице новое имя может не «влезть», по этому сразу в запросе
	// приводится к строка(200)
	ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();
	ТаблицаЗапроса.Индексы.Добавить("Имя");
	
	// если количество таблиц не превысило 256 – возвращаем таблицу
	Если счетчик_таблиц = МетаданнныеДокумента.Движения.Количество() Тогда
		Возврат ТаблицаЗапроса;			
	КонецЕсли;
	
	// таблиц больше чем 256, делаем доп. запрос и дополняем строки таблицы.
	
	ТекстЗапроса = "";
	Для Каждого Движение ИЗ МетаданнныеДокумента.Движения Цикл
		
		Если счетчик_таблиц > 0 Тогда
			счетчик_таблиц = счетчик_таблиц - 1;
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + "
		|" + ?(ТекстЗапроса = "", "", "ОБЪЕДИНИТЬ ВСЕ ") + "
		|ВЫБРАТЬ ПЕРВЫЕ 1 """ + Движение.ПолноеИмя() +  """ КАК Имя ИЗ " 
		+ Движение.ПолноеИмя() + " ГДЕ Регистратор = &Регистратор";	
		
		
	КонецЦикла;
	Запрос.Текст = ТекстЗапроса;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаЗапроса.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
	КонецЦикла;
	
	Возврат ТаблицаЗапроса;
	
КонецФункции

Функция ПолучитьВыборкуПоКритериюОтбора(ИмяКритерияОтбора, ЗначениеКритерия) Экспорт
		
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	Для Каждого ЭлементСостава ИЗ Метаданные.КритерииОтбора[ИмяКритерияОтбора].Состав Цикл
		
		Если Не ЭлементСостава.Тип.СодержитТип(ТипЗнч(ЗначениеКритерия)) Тогда
			Продолжить;
		КонецЕсли;
		
		ПутьКДанным = ЭлементСостава.ПолноеИмя();
		СтруктураПутьКДанным = ОбщегоНазначенияУХ.РазобратьПутьКОбъектуМетаданных(ПутьКДанным, ЭлементСостава.Родитель());
		
		ЕСли НЕ ПравоДоступа("Чтение", СтруктураПутьКДанным.Метаданные) Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяОбъекта = СтруктураПутьКДанным.ТипОбъекта + "." + СтруктураПутьКДанным.ВидОбъекта;
		ПсевдонимТаблицы = СтруктураПутьКДанным.ТипОбъекта + "_" + СтруктураПутьКДанным.ВидОбъекта + "_" + СтруктураПутьКДанным.ИмяТаблЧасти;
		
		ТекущаяСтрокаГДЕ = "ГДЕ " + ПсевдонимТаблицы + "." +СтруктураПутьКДанным.ИмяРеквизита + " = &ЗначениеКритерияОтбора";
			
		ИмяТЧ = Лев(СтруктураПутьКДанным.ИмяРеквизита, СтрНайти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ИмяРеквизита = Лев(СтруктураПутьКДанным.ИмяРеквизита, СтрНайти(СтруктураПутьКДанным.ИмяРеквизита, ".")-1);
		ТекстЗапроса = ТекстЗапроса + (?(ТекстЗапроса = "", "ВЫБРАТЬ", "ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ") + "
		|" + ПсевдонимТаблицы + ".Ссылка ИЗ " + ИмяОбъекта + "." + СтруктураПутьКДанным.ИмяТаблЧасти + " КАК " + ПсевдонимТаблицы + "
		|" + СтрЗаменить(ТекущаяСтрокаГДЕ, "..", ".") + "
		|");
		
	КонецЦикла;
	
	Если ТекстЗапроса = "" Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ЗначениеКритерия);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//////////////////////////////////////////////////////////////////////////////////////////
// РАБОТА С РЕГЛАМЕНТНЫМИ ЗАДАНИЯМИ.
//

Функция ПолучитьПредставлениеРегламентногоЗадания(Знач ИдентификаторРегламентногоЗадания, Использование) Экспорт
	
	ТекРегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторРегламентногоЗадания);
	Если ТекРегламентноеЗадание = Неопределено Тогда
		Использование = Ложь;
		Возврат НСтр("ru = ""<не определено>""");
	Иначе
		Использование = ТекРегламентноеЗадание.Использование;
		Возврат Строка(ТекРегламентноеЗадание.Расписание);
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСпособТрансляции(Организация) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Организации.СпособТрансляции КАК СпособТрансляции
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка = &Организация";
	
	Запрос.УстановитьПараметр("Организация",Организация);
	
	Результат=Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		Возврат Перечисления.СпособыТрансляции.ПустаяСсылка();
		
	Иначе
		
		Выборка=Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.СпособТрансляции;
		
	КонецЕсли;
		
КонецФункции // ПолучитьСпособТрансляции() 

#КонецОбласти