////////////////////////////////////////////////////////////////////////////////
// Модуль содержит серверные процедуры и функции, общие для произвольных форм.
//  
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс

Функция ПолучитьСтрокуРеквизитовФормы(Форма, ГруппаРеквизитов = "") Экспорт
	
	Строка = "";
	
	Для Каждого Реквизит Из Форма.ПолучитьРеквизиты(ГруппаРеквизитов) Цикл
		Строка = Строка + "," + Реквизит.Имя;
	КонецЦикла;
	
	Возврат Сред(Строка, 2);
	
Конецфункции

Функция СохранитьНастройки(Форма, Настройки = Неопределено, СохраняемыеРеквизиты = Неопределено, ИсключаемыеРеквизиты = "Объект") Экспорт
		
	Если Настройки = Неопределено Тогда
		Настройки = Новый Соответствие;
	КонецЕсли;
	
	ПроверятьСохраняемыеРеквизиты = ТипЗнч(СохраняемыеРеквизиты) = Тип("Строка");
	Если ПроверятьСохраняемыеРеквизиты Тогда
		СтруктураСохраняемыхРеквизитов = Новый Структура(СохраняемыеРеквизиты);
	КонецЕсли;
	
	ПроверятьИсключаемыеРеквизиты = ТипЗнч(ИсключаемыеРеквизиты) = Тип("Строка");
	Если ПроверятьИсключаемыеРеквизиты Тогда
		СтруктураИсключаемыхРеквизитов = Новый Структура(ИсключаемыеРеквизиты);
	КонецЕсли;
	
	Реквизиты = Новый Соответствие;
	Для Каждого Реквизит Из Форма.ПолучитьРеквизиты("") Цикл
		
		Если ПроверятьСохраняемыеРеквизиты И НЕ СтруктураСохраняемыхРеквизитов.Свойство(Реквизит.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПроверятьИсключаемыеРеквизиты И СтруктураИсключаемыхРеквизитов.Свойство(Реквизит.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ Настройки[Реквизит.Имя] = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Реквизит.ТипЗначения = Новый ОписаниеТипов("ТаблицаЗначений") ИЛИ Реквизит.ТипЗначения = Новый ОписаниеТипов("ДеревоЗначений") Тогда
			Настройки.Вставить(Реквизит.Имя, Форма.РеквизитФормыВЗначение(Реквизит.Имя));
		Иначе
			Настройки.Вставить(Реквизит.Имя, Форма[Реквизит.Имя]);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Настройки;
	
КонецФункции

Функция ВосстановитьНастройки(Форма, Настройки, ОчищатьНастройки = Истина, ОтменятьВосстановлениеПриОшибке = Ложь) Экспорт
	
	ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ = "ОбщийМодуль.УправлениеФормойУХ.ВосстановитьНастройки";
	
	Если ОтменятьВосстановлениеПриОшибке Тогда
		НачальныеНастройкиФормы = СохранитьНастройки(Форма);
	КонецЕсли;
	
	БылиОшибки = Ложь;
	
	Реквизиты = Новый Соответствие;
	Для Каждого Реквизит Из Форма.ПолучитьРеквизиты("") Цикл
		Реквизиты.Вставить(Реквизит.Имя, Реквизит);
	КонецЦикла;
	
	Для Каждого ЭлементНастроек Из ЗначениеИзСтрокиВнутр(ЗначениеВСтрокуВнутр(Настройки)) Цикл
		
		Реквизит = Реквизиты[ЭлементНастроек.Ключ];
		Если Реквизит = Неопределено Тогда
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьПредупреждение(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,,, "У формы " + Форма.ИмяФормы + " не найден реквизит " + ЭлементНастроек.Ключ);
			Продолжить;
		КонецЕсли;
			
		ТипыРеквизита = Реквизит.ТипЗначения.Типы();
		
		Если НЕ ЭлементНастроек.Значение = Неопределено Тогда
			Если ТипыРеквизита.Количество() > 0 И ТипыРеквизита.Найти(ТипЗнч(ЭлементНастроек.Значение)) = Неопределено Тогда
				ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,,, "У формы " + Форма.ИмяФормы + " не восстановлен реквизит " + Реквизит.Имя + ": Различаются типы значения у сохранненого значения (" + ТипЗнч(ЭлементНастроек.Значение) + ") и реквизита формы (" + Реквизит.ТипЗначения + ")");
				БылиОшибки = Истина;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Попытка
			Если ТипыРеквизита.Количество() > 0 И (ТипыРеквизита[0] = Тип("ТаблицаЗначений") ИЛИ ТипыРеквизита[0] = Тип("ДеревоЗначений")) Тогда
				
				Если НЕ ЭлементНастроек.Значение = Неопределено Тогда
					
					КолонкиРеквизита = Новый Соответствие;
					Для Каждого КолонкаРеквизита Из Форма.ПолучитьРеквизиты(Реквизит.Имя) Цикл
						КолонкиРеквизита.Вставить(КолонкаРеквизита.Имя, КолонкаРеквизита);
					КонецЦикла;
					
					Если КолонкиРеквизита.Количество() = ЭлементНастроек.Значение.Колонки.Количество() Тогда
						КолонкиСовпадают = Истина;
						Для Каждого КолонкаСохраненногоЗначения Из ЭлементНастроек.Значение.Колонки Цикл
							Если КолонкиРеквизита[КолонкаСохраненногоЗначения.Имя] = Неопределено Тогда
								КолонкиСовпадают = Ложь;
								Прервать;
							КонецЕсли;
						КонецЦикла; 
					Иначе
						КолонкиСовпадают = Ложь;
					КонецЕсли;
					
					Если КолонкиСовпадают Тогда
						Форма.ЗначениеВРеквизитФормы(ЭлементНастроек.Значение, Реквизит.Имя);
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				Форма[Реквизит.Имя] = ЭлементНастроек.Значение;
			КонецЕсли;
		Исключение
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,,, "У формы " + Форма.ИмяФормы + " не удалось восстановить реквизит " + Реквизит.Имя + ".", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			БылиОшибки = Истина;
		КонецПопытки;
			
	КонецЦикла; 
	
	Если БылиОшибки И ОтменятьВосстановлениеПриОшибке Тогда
		
		Если НЕ ВосстановитьНастройки(Форма, НачальныеНастройкиФормы, Ложь) Тогда
			
			ТекстОшибки = "После неудачной загрузки настроек не удалось выполнить откат к прежнему состоянию формы " + Форма.ИмяФормы;
			
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			СериализаторXDTO.ЗаписатьXML(ЗаписьXML, НачальныеНастройкиФормы);
			
			ТекстОшибки = ТекстОшибки + Символы.ПС + ЗаписьXML.Закрыть();
			
			ПротоколируемыеСобытияУХ.ДобавитьЗаписьОшибка(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,,, ТекстОшибки);
			
			ВызватьИсключение ТекстОшибки;
			
		КонецЕсли;
		
	ИначеЕсли ОчищатьНастройки Тогда
		
		Настройки.Очистить();
		
	КонецЕсли;
	
	Возврат БылиОшибки;
	
КонецФункции

// Функция формирует представление установленного отбора формы выбора.
//
// Параметры:
//  Форма				 - 	УправляемаяФорма - форма, для которой формируется представление отбора.
//  ЭлементДекорация	- 	ДекорацияФормы, Неопределено - Декорация формы для отображения отбора. Если не установлено или передано Неопределено - будет создана новая декорация.
//  ОбъектМетаданных	 - 	ОбъектМетаданных, Неопределено - используемый объект метаданных. Если значение указано, вместо имен полей будут по возможности выводиться их синонимы.
//  ПриоритетныеПоля	 - 	Массив, Неопределено - список полей отбора, которые (если установлены) должны всегда выводиться в начале строки.
//  НеприоритетныеПоля	 - 	Массив, Неопределено - список полей отбора, которые (если установлены) должны всегда выводиться после прочих параметров.
//  СинонимыПолей		 - 	Структура, Неопределено - Синонимы полей, отличные от синонимов реквизитов. Позволяет переопределить синоним поля для конкретного вызова метода.
//
Процедура УстановитьПредставлениеОтбора(Форма, Знач ЭлементДекорация = Неопределено, ОбъектМетаданных = Неопределено, Знач ПриоритетныеПоля = Неопределено, Знач НеприоритетныеПоля = Неопределено, СинонимыПолей = Неопределено) Экспорт
	
	Отбор = Форма.Параметры.Отбор;
	
	Если Не Отбор.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыОтбора = Новый Массив;
	// Получаем описание всех полей объекта метаданного из конфигурации.
	Если ОбъектМетаданных = Неопределено Тогда
		ТаблицаОписанияСвойствОбъекта = Неопределено;
	Иначе
		ТаблицаОписанияСвойствОбъекта = ОбщегоНазначения.ОписаниеСвойствОбъекта(ОбъектМетаданных, "Имя, Синоним");
	КонецЕсли;
	
	Если ПриоритетныеПоля = Неопределено Тогда
		ПриоритетныеПоля = Новый Массив;
	КонецЕсли;

	Если НеприоритетныеПоля = Неопределено Тогда
		НеприоритетныеПоля = Новый Массив;
	КонецЕсли;
	
	Для Каждого ТекИмяОтбора Из ПриоритетныеПоля Цикл
		
		Если Отбор.Свойство(ТекИмяОтбора) Тогда
			ДобавитьОписаниеЭлементаОтбора(ТекИмяОтбора, Отбор[ТекИмяОтбора], ЭлементыОтбора, ТаблицаОписанияСвойствОбъекта, СинонимыПолей);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из Отбор Цикл
		
		Если НеприоритетныеПоля.Найти(КлючИЗначение.Ключ) <> Неопределено
			ИЛИ ПриоритетныеПоля.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьОписаниеЭлементаОтбора(КлючИЗначение.Ключ, КлючИЗначение.Значение, ЭлементыОтбора, ТаблицаОписанияСвойствОбъекта, СинонимыПолей);
		
	КонецЦикла;
	
	Для Каждого ТекИмяОтбора Из НеприоритетныеПоля Цикл
		
		Если Отбор.Свойство(ТекИмяОтбора) Тогда
			ДобавитьОписаниеЭлементаОтбора(ТекИмяОтбора, Отбор[ТекИмяОтбора], ЭлементыОтбора, ТаблицаОписанияСвойствОбъекта, СинонимыПолей);
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ЭлементыОтбора.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыОтбора.Удалить(ЭлементыОтбора.ВГраница());
	
	Если ЭлементДекорация = Неопределено Тогда
		ИмяЭлемента = "ОтборПредставление" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");
		ЭлементДекорация = Форма.Элементы.Добавить(ИмяЭлемента, Тип("ДекорацияФормы"));
		ЭлементДекорация.Вид = ВидДекорацииФормы.Надпись;
		ЭлементДекорация.АвтоМаксимальнаяШирина = Ложь;
		Форма.Элементы.Переместить(ЭлементДекорация, ЭлементДекорация.Родитель, Форма.ПодчиненныеЭлементы[0]);
	КонецЕсли;
	
	ЭлементДекорация.Заголовок = Новый ФорматированнаяСтрока(ЭлементыОтбора);
	
КонецПроцедуры

Функция НовыйПараметрыПредставленияОтбора() Экспорт
	
	Результат = Новый Структура;
	
	Результат.Вставить("ЭлементДекорация",		Неопределено);
	Результат.Вставить("ОбъектМетаданных",		Неопределено);
	Результат.Вставить("ПриоритетныеПоля",		Новый Массив);
	Результат.Вставить("НеприоритетныеПоля",	Новый Массив);
	Результат.Вставить("СинонимыПолей",			Новый Структура);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьОписаниеЭлементаОтбора(Знач ИмяЭлементаОтбора, Знач ЗначениеЭлементаОтбора, Описания, ТаблицаОписанияСвойствОбъекта, СинонимыПолей)
	
	ИмяПоля = ИмяЭлементаОтбора;
	
	Если СинонимыПолей <> Неопределено И СинонимыПолей.Свойство(ИмяЭлементаОтбора) Тогда
		ИмяПоля = СинонимыПолей[ИмяЭлементаОтбора];
	ИначеЕсли ТаблицаОписанияСвойствОбъекта <> Неопределено Тогда
		СтрокаОписание = ТаблицаОписанияСвойствОбъекта.Найти(ИмяЭлементаОтбора, "Имя");
		Если СтрокаОписание <> Неопределено И ЗначениеЗаполнено(СтрокаОписание.Синоним) Тогда
			ИмяПоля = СтрокаОписание.Синоним;
		КонецЕсли;
	Иначе
		// Используем значение по умолчанию, которым инициализировано ИмяПоля.
	КонецЕсли;
	
	Описания.Добавить(ИмяПоля);
	Описания.Добавить(": ");
	Если ЗначениеЗаполнено(ЗначениеЭлементаОтбора) Тогда
		
		Если ТипЗнч(ЗначениеЭлементаОтбора) = Тип("Массив") ИЛИ ТипЗнч(ЗначениеЭлементаОтбора) = Тип("ФиксированныйМассив") Тогда
			ПредставленияЭлементов = Новый Массив;
			Для Каждого ТекЭлемент Из ЗначениеЭлементаОтбора Цикл
				Если ЗначениеЗаполнено(ТекЭлемент) Тогда 
					ПредставленияЭлементов.Добавить(Строка(ТекЭлемент));
				Иначе
					ПредставленияЭлементов.Добавить(НСтр("ru = '<Пустое значение>'"));
				КонецЕсли;
			КонецЦикла;
			ТекстЗначения = СтрСоединить(ПредставленияЭлементов, "; ");
		Иначе
			ТекстЗначения = Строка(ЗначениеЭлементаОтбора);
			
		КонецЕсли;
		
	Иначе
		ТекстЗначения = НСтр("ru = '<Пустое значение>'");
	КонецЕсли;
	Описания.Добавить(Новый ФорматированнаяСтрока(Строка(ТекстЗначения), ,ЦветаСтиля.ТекстПредопределенногоЗначения));
	
	Описания.Добавить("; ");	
	
КонецПроцедуры

#КонецОбласти

