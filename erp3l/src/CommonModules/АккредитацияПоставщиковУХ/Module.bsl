
#Область ВнешниеПользователи


Функция ПолучитьШаблонТЗГруппыПравНаПапку() 
	мТиповПользователей = Новый Массив;
	мТиповПользователей.Добавить(Тип("СправочникСсылка.ВнешниеПользователи"));
	мТиповПользователей.Добавить(Тип("СправочникСсылка.ГруппыВнешнихПользователей"));
	мТиповПользователей.Добавить(Тип("СправочникСсылка.ГруппыПользователей"));
	мТиповПользователей.Добавить(Тип("СправочникСсылка.Пользователи"));
	ТипПользователи = Новый ОписаниеТипов(мТиповПользователей);
	
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	ГруппаПрав = Новый ТаблицаЗначений;
	ГруппаПрав.Колонки.Добавить("Пользователь", ТипПользователи);
	ГруппаПрав.Колонки.Добавить("ВладелецНастройки");
	ГруппаПрав.Колонки.Добавить("НастройкаРодителя", ТипБулево);
	ГруппаПрав.Колонки.Добавить("НаследованиеРазрешено", ТипБулево);
	ГруппаПрав.Колонки.Добавить("ДобавлениеФайлов", ТипБулево);
	ГруппаПрав.Колонки.Добавить("ИзменениеПапок", ТипБулево);
	ГруппаПрав.Колонки.Добавить("ИзменениеФайлов", ТипБулево);
	ГруппаПрав.Колонки.Добавить("ПометкаУдаленияФайлов", ТипБулево);
	ГруппаПрав.Колонки.Добавить("УправлениеПравами", ТипБулево);
	ГруппаПрав.Колонки.Добавить("Чтение", ТипБулево);
	
	Возврат ГруппаПрав;
КонецФункции

Функция ПолучитьПапкуПоставщика(АнкетаПоставщика) Экспорт
	Возврат Константы.ПапкаСвязанныхФайлов.Получить();
КонецФункции

Функция ПолучитьИдентификаторПрофиляГруппыДоступаСаморегистрацияПоставщика() Экспорт
	Возврат "24733bb7-39cb-41f6-a1f9-e96538af4996";
КонецФункции

Функция ПолучитьИдентификаторПрофиляГруппыДоступаРабочийСтолПоставщика() Экспорт
	Возврат "ae53f696-14ad-428f-90c0-71037b622a2f";
КонецФункции

Функция СоздатьПарольВнешнегоПользователя() Экспорт
	НастройкиВхода = ПользователиСлужебныйПовтИсп.Настройки().ВнешниеПользователи;
	МинимальнаяДлинаПароля = ПолучитьМинимальнуюДлинуПаролейПользователей();
	Если МинимальнаяДлинаПароля < НастройкиВхода.МинимальнаяДлинаПароля Тогда
		МинимальнаяДлинаПароля = НастройкиВхода.МинимальнаяДлинаПароля;
	КонецЕсли;
	Если МинимальнаяДлинаПароля <= 8 Тогда
		МинимальнаяДлинаПароля = 8;
	КонецЕсли;
	
	ПараметрыПароля = ПользователиСлужебный.ПараметрыПароля(МинимальнаяДлинаПароля, Истина);
	
	Возврат ПользователиСлужебный.СоздатьПароль(ПараметрыПароля);
КонецФункции

// Создать или получить внешнего пользователя связанного с анкетой постащика.
//
// Параметры:
//	АнкетаПоставщика - СправочникСсылка.АнекетыПоставщиков - анкета для
//		которой необходимо создать внешнего пользователя.
//	ИмяПользователяИБ - Строка - имя внешнего пользователя.
//
// Возвращает:
//	Структура - результат работы программы:
//		Успех - Булево - Истина - найден или создан внешний пользователь.
//				Реквизит "Ссылка" заполнен.
//				Ложь - ошибка работы, в реквизите "ТекстОшибки" описание.
//		Ссылка - СпарвочникСсылка.ВнешниеПользователи - внешний пользователь
//				"СаморегистрацияПоставщика".
//		ТекстОшибки - Строка - описание ошибки. 
//
Функция ПолучитьВнешнегоПользователяПоставщика(
								АнкетаПоставщика,
								Знач ИмяПользователяИБ) Экспорт
	Результат = Новый Структура(
					"Успех, Ссылка, ТекстОшибки",
					Ложь, Неопределено, "");
					
	Если НЕ ЗначениеЗаполнено(АнкетаПоставщика) Тогда
		Результат.ТекстОшибки = НСтр("ru = 'Не указана анкета поставщика!'");
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИмяПользователяИБ) Тогда
		Результат.ТекстОшибки = НСтр("ru = 'Не указано имя пользователя ИБ!'");
		Возврат Результат;
	КонецЕсли;
	
	Возврат ВнешниеПользователиУХ.ПолучитьВнешнегоПользователя(
		АнкетаПоставщика,
		АккредитацияПоставщиковУХ.ПолучитьИдентификаторПрофиляГруппыДоступаРабочийСтолПоставщика(),
		ИмяПользователяИБ,
		"",
		Истина);
КонецФункции

// Создать или получить внешнего пользователя связанного с предопределенной
// анкетой постащика "СаморегистрацияПоставщика".
//
// Возвращает:
//	Структура - результат работы программы:
//		Успех - Булево - Истина - найден или создан внешний пользователь.
//				Реквизит "Ссылка" заполнен.
//				Ложь - ошибка работы, в реквизите "ТекстОшибки" описание.
//		Ссылка - СпарвочникСсылка.ВнешниеПользователи - внешний пользователь
//				"СаморегистрацияПоставщика".
//		ТекстОшибки - Строка - описание ошибки. 
//
Функция ПолучитьСаморегистрациюПоставщика() Экспорт
	Результат = Новый Структура(
					"Успех, Ссылка, ТекстОшибки",
					Ложь, Неопределено, "");
					
	СаморегистрацияПоставщика = Справочники.АнкетыПоставщиков.СаморегистрацияПоставщика;
	ВнешнийПользователь	= Неопределено;
	Если ПользователиСлужебный.ОбъектАвторизацииИспользуется(
					СаморегистрацияПоставщика,
					,
					ВнешнийПользователь) Тогда
		Результат.Успех = Истина;
		Результат.Ссылка = ВнешнийПользователь;
		Возврат Результат;
	КонецЕсли;
	
	ИмяПользователяИБ = ПользователиУХ.ПолучитьСвободноеИмяПользователяИБ("SP");
	
	Возврат ВнешниеПользователиУХ.ПолучитьВнешнегоПользователя(
		СаморегистрацияПоставщика,
		АккредитацияПоставщиковУХ.ПолучитьИдентификаторПрофиляГруппыДоступаСаморегистрацияПоставщика(),
		ИмяПользователяИБ,
		"",
		Ложь);
КонецФункции

// Получить анкету поставщика связанную с внешним пользователем
Функция ПолучитьАнектуПоставщикаВнешнегоПользователя(ВнешнийПользователь) Экспорт
	Если НЕ ЗначениеЗаполнено(ВнешнийПользователь) ИЛИ
		ТипЗнч(ВнешнийПользователь) <> Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		Возврат Справочники.АнкетыПоставщиков.ПустаяСсылка();
	КонецЕсли;
	
	Возврат ВнешнийПользователь.ОбъектАвторизации;
КонецФункции

// Возвращает ссылку на справочник "ВидыСобытийОповещений" по типу и состоянию документа
Функция ПолучитьВидСобытияПоОбъекту(Ссылка)
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТипСсылки = ТипЗнч(Ссылка);
	Если ТипСсылки = Тип("ДокументСсылка.АккредитацияПоставщика") Тогда
		РешениеПоДокументу = Ссылка.РешениеПоДокументу;
		// Не обрабатываем вид события "ОповещениеОбОтправкеНаИсправлениеАккредитации"
		Если РешениеПоДокументу = Перечисления.ВидыРешенийПоДокументуАккредитации.ПоложительноеРешение Тогда
			Возврат Справочники.ВидыСобытийОповещений.ОповещениеОбУтвержденииАккредитации;
			
		ИначеЕсли РешениеПоДокументу = Перечисления.ВидыРешенийПоДокументуАккредитации.Отказ Тогда
			Возврат Справочники.ВидыСобытийОповещений.ОповещениеОНеутвержденииАккредитации;
		КонецЕсли;

		Возврат Неопределено;
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.КвалификацияПоставщика") Тогда
		РешениеПоДокументу = Ссылка.РешениеПоДокументу;
		// Не обрабатываем вид события "ОповещениеОбОтправкеНаИсправлениеКвалификации"
		Если РешениеПоДокументу = Перечисления.ВидыРешенийПоДокументуКвалификации.ПоложительноеРешение Тогда
			Возврат Справочники.ВидыСобытийОповещений.ОповещениеОбУтвержденииКвалификации;
		ИначеЕсли РешениеПоДокументу = Перечисления.ВидыРешенийПоДокументуКвалификации.Отказ Тогда
			Возврат Справочники.ВидыСобытийОповещений.ОповещениеОНеутвержденииКвалификации;
		КонецЕсли;
		
		Возврат Неопределено;
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ЛишениеАккредитации") Тогда
		РешениеПоДокументу = Ссылка.РешениеПоДокументу;
		МораторийНаРаботуСПоставщиком = Ссылка.МораторийНаРаботуСПоставщиком;
		Если РешениеПоДокументу И НЕ МораторийНаРаботуСПоставщиком Тогда
			Возврат Справочники.ВидыСобытийОповещений.ОповещениеОЛишенииАккредитации;
		ИначеЕсли РешениеПоДокументу И МораторийНаРаботуСПоставщиком Тогда
			Возврат Справочники.ВидыСобытийОповещений.ОповещениеОЗапретеАккредитацииДоДаты;
		КонецЕсли;
		
		Возврат Неопределено;
		
	ИначеЕсли ТипСсылки = Тип("ДокументСсылка.ОтзывАккредитации") Тогда
		Если Ссылка.РешениеПоДокументу Тогда
			Возврат Справочники.ВидыСобытийОповещений.ОповещениеОбОтменеАккредитации;
		КонецЕсли;
		
		Возврат Неопределено;
		
	ИначеЕсли ТипСсылки = Тип("СправочникСсылка.АнкетыПоставщиков") Тогда
		СтатусАнкеты = УправлениеПроцессамиСогласованияУХ.ВернутьСтатусОбъекта(Ссылка);
		Если СтатусАнкеты = Перечисления.СостоянияСогласования.Утверждена Тогда
			Возврат Справочники.ВидыСобытийОповещений.ОповещениеОбОткрытииДоступаВнешнемуПоставщику;
		Иначе
			Возврат Справочники.ВидыСобытийОповещений.ОповещениеОбОтказеВДоступеВнешнемуПоставщику;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

Процедура СоздатьИОтправитьПисьмо(ТекстПисьма, Тема, Получатели, Отправитель=Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(Отправитель) Тогда
		Отправитель = МодульУправленияОповещениямиУХ.УчетнаяЗаписьДляРассылкиУведомлений();
	КонецЕсли;
	
	Письмо = Новый ИнтернетПочтовоеСообщение;
	
	Если ТипЗнч(Получатели) = Тип("Строка") Тогда
		Письмо.Получатели.Добавить(Получатели);
	Иначе
		Для Каждого ПочтовыйАдрес Из Получатели Цикл
			Письмо.Получатели.Добавить(ПочтовыйАдрес);
		КонецЦикла;
	КонецЕсли;
	
	Письмо.Отправитель = Отправитель;			
	Письмо.Тексты.Добавить(ТекстПисьма, ТипТекстаПочтовогоСообщения.HTML);
	Письмо.Тема = Тема;
	
	УстановитьПривилегированныйРежим(Истина);
	УправлениеЭлектроннойПочтойУХ.ЗаписатьПисьмоВРегистр(Письмо, Неопределено);
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

// Рассылает письма поставщикам из документа оповещения.
//
// Параметры:
//  ДокументОповещения - ДокументСсылка.ОповещениеАккредитованныхПоставщиковОТоргах
//								- документ из которого берутся данные рассылки.
// 
// Возвращаемое значение:
//   - Структура:
//		- Ошибки - Массив(Строка) - описание ошибок отправки и/или заполнения
//									документа.
//		- Успехи - Массив(Число) - идентификаторы строк ТЧ, по которым
//									было отправлено оповещение.
//
Функция ОповеститьПоставщиковОВозможностиУчаствоватьВЗакупке(
												ДокументОповещения) Экспорт
	РезультатФункции =
		ЦентрализованныеЗакупкиКлиентСерверУХ.ПолучитьПустойРезультатРаботы();
	Если НЕ ЗначениеЗаполнено(ДокументОповещения)
				ИЛИ НЕ ДокументОповещения.Проведен Тогда
		ТекстСообщения = НСтр("ru = 'Требуется провести документ для отправки писем. Операция отменена.'");
		ЦентрализованныеЗакупкиКлиентСерверУХ.ДобавитьОшибку(
			РезультатФункции, "", ТекстСообщения);
		Возврат РезультатФункции;
	КонецЕсли;
	Для Каждого СтрокаПоставщика Из ДокументОповещения.Поставщики Цикл
		Если СтрокаПоставщика.ОповещениеОтправлено Тогда
			Продолжить;
		КонецЕсли;
		Если ПустаяСтрока(СтрокаПоставщика.АдресЭП) Тогда
			ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Не заполнен адрес электронной почты в строке %1.'"),
				СтрокаПоставщика.НомерСтроки);
			ЦентрализованныеЗакупкиКлиентСерверУХ.ДобавитьОшибку(
				РезультатФункции,
				"Объект.Поставщики[%1].АдресЭП",
				ТекстСообщения,
				Неопределено,
				СтрокаПоставщика.НомерСтроки);
			Продолжить;
		КонецЕсли;
		ТекстОшибки = ОповеститьПоставщикаОВозможностьУчастияВЗакупке(
			ДокументОповещения,
			СтрокаПоставщика.Аккредитован,
			СтрокаПоставщика.АдресЭП);
		Если ТекстОшибки = Неопределено Тогда
			ЦентрализованныеЗакупкиКлиентСерверУХ.ДобавитьУспех(
				РезультатФункции,
				ДокументОповещения.Поставщики.Индекс(СтрокаПоставщика));
		Иначе
			ЦентрализованныеЗакупкиКлиентСерверУХ.ДобавитьОшибку(
				РезультатФункции, "", ТекстОшибки);
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

Функция ОповеститьПоставщикаОВозможностьУчастияВЗакупке(ДокументОповещения,
														Аккредитован,
														АдресЭП) Экспорт
	Попытка
		ВидСобытияОповещения = ВидОповещенияОбУчастииВЗакупке(Аккредитован);
		ТекстПисьма =
			МодульУправленияОповещениямиУХ.ПолучитьТекстПоВидуСобытияПоШаблону(
				ВидСобытияОповещения,
				ДокументОповещения);
		СоздатьИОтправитьПисьмо(ТекстПисьма, ВидСобытияОповещения, АдресЭП);
	Исключение
		Возврат СтрШаблон(НСтр(
			"ru = 'При отправке письма на адрес %1 возникли ошибки: %2'"),
			АдресЭП,
			ОписаниеОшибки());
	КонецПопытки;
	Возврат Неопределено;
КонецФункции
		
Функция ОповеститьПоставщикаОРешенииПоОбъекту(ОбъектСсылка, ИмяРеквизитаАнкеты="АнкетаПоставщика") Экспорт
	РезультатФункции = ЦентрализованныеЗакупкиКлиентСерверУХ.ПолучитьПустойРезультатРаботы();
	
	Если НЕ ЗначениеЗаполнено(ОбъектСсылка) Тогда
		ТекстСообщения = НСтр("ru = 'Не указан объект-источник отправки писем. Операция отменена.'");
		ЦентрализованныеЗакупкиКлиентСерверУХ.ДобавитьОшибку(РезультатФункции, "", ТекстСообщения);
		Возврат РезультатФункции;
	КонецЕсли;
	
	ТипОбъекта = ТипЗнч(ОбъектСсылка);
	ЭтоДокумент = Документы.ТипВсеСсылки().СодержитТип(ТипОбъекта);
	
	Если ЭтоДокумент И НЕ ОбъектСсылка.Проведен Тогда
		ТекстСообщения = НСтр("ru = 'Требуется провести документ для отправки писем. Операция отменена.'");
		ЦентрализованныеЗакупкиКлиентСерверУХ.ДобавитьОшибку(РезультатФункции, "", ТекстСообщения);
		Возврат РезультатФункции;
	КонецЕсли;
	
	АнкетаПоставщика = ОбъектСсылка[ИмяРеквизитаАнкеты];
	Если НЕ ЗначениеЗаполнено(АнкетаПоставщика) Тогда
		ТекстСообщения = НСтр("ru = 'Не указан поставщик. Операция отменена.'");
		ЦентрализованныеЗакупкиКлиентСерверУХ.ДобавитьОшибку(РезультатФункции, ТекстСообщения);
		Возврат РезультатФункции;
	КонецЕсли;
	
	АдресЭП = АнкетаПоставщика.АдресЭП;
	Если ПустаяСтрока(АдресЭП) Тогда
		ТекстСообщения = НСтр("ru = 'У поставщика не заполнен адрес элекронной почты. Операция отменена.'");
		ЦентрализованныеЗакупкиКлиентСерверУХ.ДобавитьОшибку(РезультатФункции, "", ТекстСообщения);
		Возврат РезультатФункции;
	КонецЕсли;
	
	ВидСобытия = ПолучитьВидСобытияПоОбъекту(ОбъектСсылка);
	Если ВидСобытия = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'По документу не принято решение. Операция отменена.'");
		ЦентрализованныеЗакупкиКлиентСерверУХ.ДобавитьОшибку(РезультатФункции, "", ТекстСообщения);
		Возврат РезультатФункции;
	КонецЕсли;
	
	ТекстУспешнойОтправки = "";
	Попытка
		ТекстПисьма = МодульУправленияОповещениямиУХ.ПолучитьТекстПоВидуСобытияПоШаблону(
			ВидСобытия,
			ОбъектСсылка);
			
		Если НЕ ПустаяСтрока(ТекстПисьма) Тогда
			СоздатьИОтправитьПисьмо(ТекстПисьма, Строка(ВидСобытия), АдресЭП);
			
			ТекстУспешнойОтправки = НСтр("ru = 'Отправлено оповещение поставщику %АнкетаПоставщика% на адрес %АдресЭП%.'");
			ТекстУспешнойОтправки = СтрЗаменить(ТекстУспешнойОтправки, "%АнкетаПоставщика%", Строка(АнкетаПоставщика));
			ТекстУспешнойОтправки = СтрЗаменить(ТекстУспешнойОтправки, "%АдресЭП%", АдресЭП);
			
		Иначе
			ТекстСообщения = НСтр("ru = 'Не удалось получить текст письма из шаблона. Операция отменена. Настройте шаблоны оповещения.'");
			ЦентрализованныеЗакупкиКлиентСерверУХ.ДобавитьОшибку(РезультатФункции, "", ТекстСообщения);
			Возврат РезультатФункции;
		КонеЦЕсли;
		
	Исключение
		ТекстСообщения = НСтр("ru = 'При отправке письма на адрес %АдресЭП% возникли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%АдресЭП%", Строка(АдресЭП));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ЦентрализованныеЗакупкиКлиентСерверУХ.ДобавитьОшибку(РезультатФункции, "", ТекстСообщения);
	КонецПопытки;
		
	Если НЕ ПустаяСтрока(ТекстУспешнойОтправки) Тогда
		ЦентрализованныеЗакупкиКлиентСерверУХ.ДобавитьУспех(РезультатФункции, ТекстУспешнойОтправки);
	КонецЕсли;
		
	Возврат РезультатФункции;	
КонецФункции


#КонецОбласти


#Область ОбработкаФормВнешнегоПользователя


// Проверить существование реквизита формы, и если он отсутствует, добавить его в массив ДобавляемыеРеквизиты
Процедура УстановитьРеквизитФормы(Форма, ИмяРеквизита, ДобавляемыеРеквизиты, ИмяТипаРеквизита)
	//Реквизит = Форма.ЭлементыФормы.Найти(ИмяРеквизита);
	флРеквизитСуществует = ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, ИмяРеквизита);
	Если флРеквизитСуществует Тогда 
		Возврат;
	КонецЕсли;
	
	ОписаниеТиповРеквизита = Новый ОписаниеТипов(ИмяТипаРеквизита);
	Реквизит = Новый РеквизитФормы(ИмяРеквизита, ОписаниеТиповРеквизита, , ИмяРеквизита, Ложь);
	ДобавляемыеРеквизиты.Добавить(Реквизит);
КонецПроцедуры

// Создать (если необходимо) и установить реквизиты формы "АнкетаПоставщика", "ТекущийПользователь", "ЭтоВнешнийПользователь"
// Для текущего внешнего пользователя
Процедура УстановитьРеквизитыФормыСпискаДляПоставщика(Форма) Экспорт
	ДобавляемыеРеквизиты = Новый Массив();
	УстановитьРеквизитФормы(Форма, "АнкетаПоставщика", ДобавляемыеРеквизиты, "СправочникСсылка.АнкетыПоставщиков");
	УстановитьРеквизитФормы(Форма, "ТекущийПользователь", ДобавляемыеРеквизиты, "СправочникСсылка.ВнешниеПользователи");
	УстановитьРеквизитФормы(Форма, "ЭтоВнешнийПользователь", ДобавляемыеРеквизиты, "Булево");
	
	Если ДобавляемыеРеквизиты.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	КонецЕсли;
	
	// Устанавливаем значения реквизитов
	ЭтоВнешнийПользователь = ПользователиСлужебныйПовтИсп.ЭтоСеансВнешнегоПользователя();
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	Если ЭтоВнешнийПользователь Тогда
		Форма["АнкетаПоставщика"] = АккредитацияПоставщиковУХ.
			ПолучитьАнектуПоставщикаВнешнегоПользователя(ТекущийПользователь);
	КонецЕсли;
		
	Форма["ТекущийПользователь"] = ТекущийПользователь;
	Форма["ЭтоВнешнийПользователь"] = ЭтоВнешнийПользователь;
КонецПроцедуры

// Создаем и заполняем отбор для реквизита формы.
// Проверяем, что текущий пользователь соответствует анкете.
// Если форма списка, то устанавливаем отбор.
Процедура ПриСозданииНаСервереФормыВнешнегоПоставщика(
				Форма,
				Отказ,
				ИмяРеквизитаОбъектаНаФорме="Объект",
				ИмяРеквизитаОбъекта ="АнкетаПоставщика",
				ИмяРеквизитаФормы="АнкетаПоставщика",
				ЭтоФормаСписка=Ложь) Экспорт
	
	УстановитьРеквизитыФормыСпискаДляПоставщика(Форма);
	
	Если НЕ Форма["ЭтоВнешнийПользователь"]  Тогда
		Возврат;
	КонецЕсли;
		
	Если ЭтоФормаСписка Тогда
		ОтборыСписковКлиентСерверУХ.ИзменитьЭлементОтбораСписка(
			Форма[ИмяРеквизитаОбъектаНаФорме],
			ИмяРеквизитаОбъекта,
			Форма[ИмяРеквизитаФормы],
			Истина);
		
	Иначе
		Если Форма[ИмяРеквизитаФормы] <> Форма[ИмяРеквизитаОбъектаНаФорме][ИмяРеквизитаОбъекта] Тогда
			Отказ = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Вам недоступна возможность открывать анкеты других поставщиков!'");
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Создаем и заполняем реквизиты формы.
// Проверяем, что текущий пользователь соостетствует контрагенту анкеты
// Если форма списка, то устанавливаем отбор
Процедура ПриСозданииНаСервереФормыКонтрагентаВнешнегоПоставщика(Форма, Отказ, ИмяРеквизитаОбъекта="Объект",
		ИмяРеквизитаАнкеты="АнкетаПоставщика", ИмяРеквизитаКонтрагента="Контрагент", ЭтоФормаСписка=Ложь) Экспорт
		
	УстановитьРеквизитыФормыСпискаДляПоставщика(Форма);
	
	Если НЕ Форма["ЭтоВнешнийПользователь"]  Тогда
		Возврат;
	КонецЕсли;
	
	КонтрагентПоставщика = Форма[ИмяРеквизитаАнкеты].Контрагент;
	Если НЕ ЗначениеЗаполнено(КонтрагентПоставщика) Тогда
		Отказ = Истина;
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = НСтр("ru = 'У внешнего поставщика не задан контрагент.'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
		
	Если ЭтоФормаСписка Тогда
		ОтборыСписковКлиентСерверУХ.ИзменитьЭлементОтбораСписка(
			Форма[ИмяРеквизитаОбъекта],
			ИмяРеквизитаКонтрагента,
			КонтрагентПоставщика,
			Истина);
		
	Иначе
		Если Форма[ИмяРеквизитаКонтрагента] <> КонтрагентПоставщика Тогда
			Отказ = Истина;
			
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Вам недоступна возможность данные других поставщиков.'");
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Установить общие настройки видимости и доступности элементов, единые для всех форм внешнего поставщика
Процедура УстановитьОбщееОформлениеФормыЭлементаВнешнегоПоставщика(Форма, ЭтоЧерновик, ИспользуемСогласование, ИспользуемРешениеПоДокументу,
				ИспользуемКомиссию, ИмяАнкетыПоставщика="АнкетаПоставщика") Экспорт
	ЭтоВнешнийПользователь = ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя();
	
	Если ИспользуемСогласование И ЭтоЧерновик = Неопределено Тогда
		флЧерновик = (Форма.СтатусОбъекта = Перечисления.СостоянияСогласования.Черновик) ИЛИ НЕ ЗначениеЗаполнено(Форма.СтатусОбъекта);
		флЗапретитьИзменениеКлючевыхРеквизитов = (Форма.СтатусОбъекта = Перечисления.СостоянияСогласования.Утверждена) ИЛИ
												(Форма.СтатусОбъекта = Перечисления.СостоянияСогласования.Отклонена);
	Иначе
		флЧерновик = ЭтоЧерновик;
		флЗапретитьИзменениеКлючевыхРеквизитов = НЕ флЧерновик;
	КонецЕсли;
											
	Если НЕ флЧерновик И ЭтоВнешнийПользователь Тогда
		Форма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Форма.Элементы.ФормаОтправитьНаСогласование.Видимость = ЭтоВнешнийПользователь И флЧерновик;
	
	Форма.Элементы.Дата.ТолькоПросмотр = ЭтоВнешнийПользователь ИЛИ флЗапретитьИзменениеКлючевыхРеквизитов;
	Форма.Элементы[ИмяАнкетыПоставщика].ТолькоПросмотр = ЭтоВнешнийПользователь ИЛИ флЗапретитьИзменениеКлючевыхРеквизитов;
	
	Если ИспользуемРешениеПоДокументу Тогда
		Форма.Элементы.РешениеПоДокументу.ТолькоПросмотр = ЭтоВнешнийПользователь;
		Форма.Элементы.ОбоснованиеРешения.ТолькоПросмотр = ЭтоВнешнийПользователь;
	КонецЕсли;
	
	Если ИспользуемКомиссию Тогда
		Форма.Элементы.ГруппаКомиссия.ТолькоПросмотр = флЗапретитьИзменениеКлючевыхРеквизитов;
		Форма.Элементы.ГруппаКомиссия.Видимость = НЕ ЭтоВнешнийПользователь;
	КонецЕсли;
	
	Форма.Элементы.Комментарий.Видимость = НЕ ЭтоВнешнийПользователь;
	Форма.Элементы.Ответственный.Видимость = НЕ ЭтоВнешнийПользователь;
КонецПроцедуры

// Для переданной формы в зависимости от того, открывает ее обычный или внешний
// пользователь, 
Процедура ИнициализироватьПодсистемуСогласованияПоВнешнемуПоставщику(
														Форма) Экспорт
	Если Форма.ЭтоВнешнийПользователь Тогда
		МодульСогласованияДокументовУХ.ДобавитьНаФормуРеквизитыСогласования(
			Форма);
	Иначе
		ДействияСогласованиеУХСервер.НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта(Форма);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти


#Область РаботаСТребованиями

// Получить перечень требований по организации на дату
Функция ПолучитьОбщиеТребования(ДатаСреза, Организация) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОбщиеКвалификационныеТребованияКПоставщикамСрезПоследних.ТребованиеКПоставщику КАК ТребованиеКПоставщику,
		|	ОбщиеКвалификационныеТребованияКПоставщикамСрезПоследних.Критерий КАК Критерий,
		|	ОбщиеКвалификационныеТребованияКПоставщикамСрезПоследних.ТребованиеКДокументу КАК ТребованиеКДокументу
		|ИЗ
		|	РегистрСведений.ОбщиеКвалификационныеТребованияКПоставщикам.СрезПоследних(&ДатаСреза, Организация = &Организация) КАК ОбщиеКвалификационныеТребованияКПоставщикамСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Запрос.УстановитьПараметр("Организация", Организация);
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
КонецФункции

// Организации для которых зарегистрированны общие требования к поставщикам
Функция ОрганизацииТребующиеАккредитациюПоставщиков(ДатаСреза) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОбщиеКвалификационныеТребованияКПоставщикамСрезПоследних.Организация
		|ИЗ
		|	РегистрСведений.ОбщиеКвалификационныеТребованияКПоставщикам.СрезПоследних(&ДатаСреза, ) КАК ОбщиеКвалификационныеТребованияКПоставщикамСрезПоследних
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТребованияКвалификацииКНоменклатуреПоставщиковСрезПоследних.Организация
		|ИЗ
		|	РегистрСведений.ТребованияКвалификацииКНоменклатуреПоставщиков.СрезПоследних(&ДатаСреза, ) КАК ТребованияКвалификацииКНоменклатуреПоставщиковСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку(0);
КонецФункции

// Получить требования для номенклатуры закупки.
//
// Параметры:
//  ЗакупочнаяПроцедура - СправочникСсылка.ЗакупочныеПроцедуры
//						| СправочникОбъект.ЗакупочныеПроцедуры - 
//			закупка по лотам которой, будут получены требования
//			к поставщикам.
// 
// Возвращаемое значение:
//	ТаблицаЗначений - структура соответствует табличной
//		части ТребованияКПоставщикам закупочной процедуры.
//
Функция ПолучитьТребованияПоНоменклатуре(ЗакупочнаяПроцедура) Экспорт
	мНоменклатуры = ЦентрализованныеЗакупкиУХ.ПолучитьМассивНоменклатурыИГруппЗакупки(ЗакупочнаяПроцедура);
	Возврат
		АккредитацияПоставщиковУХ.ПолучитьВсеТребованияПоНоменклатуре(
			ПолучитьДатуПоискаАккредитованныхПоставщиков(
				ЗакупочнаяПроцедура),
			ЗакупочнаяПроцедура.ОрганизаторЗакупки,
			мНоменклатуры);
КонецФункции

// Получить общие требования и требования по номенклатуре.
//
Функция ОбъединитьТребованияКПоставщикам(ОбщиеТребования, ТребованияПоНоменклатуре) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОбщиеТребования.ТребованиеКПоставщику КАК ТребованиеКПоставщику,
		|	ОбщиеТребования.Критерий КАК Критерий,
		|	ОбщиеТребования.ТребованиеКДокументу КАК ТребованиеКДокументу,
		|	ОбщиеТребования.ТребованиеАккредитации КАК ТребованиеАккредитации,
		|	ОбщиеТребования.ИзШаблона КАК ИзШаблона
		|ПОМЕСТИТЬ ОбщиеТребования
		|ИЗ
		|	&ОбщиеТребования КАК ОбщиеТребования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТребованияПоНоменклатуре.ТребованиеКПоставщику КАК ТребованиеКПоставщику,
		|	ТребованияПоНоменклатуре.Критерий КАК Критерий,
		|	ТребованияПоНоменклатуре.ТребованиеКДокументу КАК ТребованиеКДокументу,
		|	ТребованияПоНоменклатуре.ТребованиеАккредитации КАК ТребованиеАккредитации,
		|	ТребованияПоНоменклатуре.ИзШаблона КАК ИзШаблона
		|ПОМЕСТИТЬ ТребованияПоНоменклатуре
		|ИЗ
		|	&ТребованияПоНоменклатуре КАК ТребованияПоНоменклатуре
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТребованияПоНоменклатуре.ТребованиеКПоставщику КАК ТребованиеКПоставщику,
		|	ТребованияПоНоменклатуре.Критерий КАК Критерий,
		|	ТребованияПоНоменклатуре.ТребованиеКДокументу КАК ТребованиеКДокументу,
		|	ТребованияПоНоменклатуре.ТребованиеАккредитации КАК ТребованиеАккредитации,
		|	ТребованияПоНоменклатуре.ИзШаблона КАК ИзШаблона
		|ПОМЕСТИТЬ ТребованияНесгруппированные
		|ИЗ
		|	ТребованияПоНоменклатуре КАК ТребованияПоНоменклатуре
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбщиеТребования_.ТребованиеКПоставщику,
		|	ОбщиеТребования_.Критерий,
		|	ОбщиеТребования_.ТребованиеКДокументу,
		|	ЛОЖЬ,
		|	ЛОЖЬ
		|ИЗ
		|	ОбщиеТребования КАК ОбщиеТребования_
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТребованияНесгруппированные.ТребованиеКПоставщику КАК ТребованиеКПоставщику,
		|	ТребованияНесгруппированные.Критерий КАК Критерий,
		|	ТребованияНесгруппированные.ТребованиеКДокументу КАК ТребованиеКДокументу,
		|	МАКСИМУМ(ТребованияНесгруппированные.ТребованиеАккредитации) КАК ТребованиеАккредитации,
		|	МАКСИМУМ(ТребованияНесгруппированные.ИзШаблона) КАК ИзШаблона
		|ИЗ
		|	ТребованияНесгруппированные КАК ТребованияНесгруппированные
		|
		|СГРУППИРОВАТЬ ПО
		|	ТребованияНесгруппированные.ТребованиеКДокументу,
		|	ТребованияНесгруппированные.Критерий,
		|	ТребованияНесгруппированные.ТребованиеКПоставщику
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТребованиеАккредитации УБЫВ,
		|	ИзШаблона УБЫВ";
	Запрос.УстановитьПараметр("ОбщиеТребования", ОбщиеТребования);
	Запрос.УстановитьПараметр("ТребованияПоНоменклатуре", ТребованияПоНоменклатуре);
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	Возврат Выгрузка;
КонецФункции

// Получить общие требования для закупки и по возможности
// заполнить значения критериев для указанного поставщика.
// Если ТребованияЛота заполнены, то подставляет данные
// из этой таблицы.
//
// Параметры:
//	ДатаСреза - Дата+Время, дата на которую получаем требования.
//	ЗакупочнаяПроцедура - СправочникСсылка.ЗакупочныеПроцедуры, по номенклатуре 
//			лотов которого будут отбираться требования.
//	АнкетаПоставщика - Справочник.АнкетыПоставщиков, поставщик
//			для которого получаем данные.
//	ТребованияИзКвалификации - ТаблицаЗначений
//			(см. Документ.КвалификацияПоставщика табличная
//			часть ТребованияЛота).
//
// Возвращает:
//	ТаблицаЗначений, формат см. Документ.КвалификацияПоставщика
//		табличная часть ТребованияЛота.
//
Функция ПолучитьТребованияЗакупкиДляПоставщика(
									ЗакупочнаяПроцедура,
									АнкетаПоставщика,
									ТребованияИзКвалификации,
									ОтбиратьПоНоменклатуре=Ложь) Экспорт
	ГраницаСреза = 
		АккредитацияПоставщиковУХ.ПолучитьГраницуПоискаАккредитованныхПоставщиков(
			ЗакупочнаяПроцедура);
	Если ОтбиратьПоНоменклатуре Тогда
		мГруппИНоменклатуры =
			ЦентрализованныеЗакупкиУХ.ПолучитьМассивНоменклатурыИГруппЗакупки(
				ЗакупочнаяПроцедура);
	Иначе
		мГруппИНоменклатуры = Новый Массив;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗначенияИзКвалификации.ТребованиеКПоставщику КАК ТребованиеКПоставщику,
		|	ЗначенияИзКвалификации.Критерий КАК Критерий,
		|	ЗначенияИзКвалификации.ТребованиеКДокументу КАК ТребованиеКДокументу,
		|	ЗначенияИзКвалификации.ЗначениеМножества КАК ЗначениеМножества,
		|	ЗначенияИзКвалификации.ЗаполненИзАккредитации КАК ЗаполненИзАккредитации,
		|	ПОДСТРОКА(ЗначенияИзКвалификации.КомментарийУчастника, 0, 1000) КАК КомментарийУчастника,
		|	ЗначенияИзКвалификации.РешениеПоложительно КАК РешениеПоложительно,
		|	ПОДСТРОКА(ЗначенияИзКвалификации.КомментарийКомиссии, 0, 1000) КАК КомментарийКомиссии,
		|	ЗначенияИзКвалификации.ИзШаблона КАК ИзШаблона
		|ПОМЕСТИТЬ ЗначениеИзДокКвалификации
		|ИЗ
		|	&ТребованияИзКвалификации КАК ЗначенияИзКвалификации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗакупкаТребованияКПоставщикам.ТребованиеКПоставщику КАК ТребованиеКПоставщику,
		|	ЗакупкаТребованияКПоставщикам.Критерий КАК Критерий,
		|	ЗакупкаТребованияКПоставщикам.ТребованиеКДокументу КАК ТребованиеКДокументу,
		|	МАКСИМУМ(ЗакупкаТребованияКПоставщикам.ИзШаблона) КАК ИзШаблона,
		|	МАКСИМУМ(ЗакупкаТребованияКПоставщикам.ТребованиеАккредитации) КАК ТребованиеАккредитации
		|ПОМЕСТИТЬ ВсеТребованияЗакупки
		|ИЗ
		|	Справочник.ЗакупочныеПроцедуры.ТребованияКПоставщикам КАК ЗакупкаТребованияКПоставщикам
		|ГДЕ
		|	ЗакупкаТребованияКПоставщикам.Ссылка = &ЗакупочнаяПроцедура
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗакупкаТребованияКПоставщикам.Критерий,
		|	ЗакупкаТребованияКПоставщикам.ТребованиеКПоставщику,
		|	ЗакупкаТребованияКПоставщикам.ТребованиеКДокументу
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	АккредитованыеПоставщикиСрезПоследних.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ АккредитацияСсылка
		|ИЗ
		|	РегистрСведений.АккредитованыеПоставщики.СрезПоследних(
		|			,
		|			Организация = &Организация
		|				И АнкетаПоставщика = &АнкетаПоставщика
		|				И Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияАккредитацииПоставщиков.Аккредитован)
		|				И ДатаНачала <= &ДатаСреза
		|				И ДатаОкончания >= &ДатаСреза) КАК АккредитованыеПоставщикиСрезПоследних
		|ГДЕ
		|	НЕ &ОтбиратьПоНоменклатуре
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	АккредитованыеПоставщикиСрезПоследних.Регистратор
		|ИЗ
		|	РегистрСведений.АккредитованыеПоставщики.СрезПоследних(
		|			,
		|			Организация = &Организация
		|				И АнкетаПоставщика = &АнкетаПоставщика
		|				И Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияАккредитацииПоставщиков.Аккредитован)
		|				И ДатаНачала <= &ДатаСреза
		|				И ДатаОкончания >= &ДатаСреза) КАК АккредитованыеПоставщикиСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НоменклатураАккредитованыхПоставщиков КАК НоменклатураАккредитованыхПоставщиков
		|		ПО АккредитованыеПоставщикиСрезПоследних.Период = НоменклатураАккредитованыхПоставщиков.ДатаАккредитации
		|			И АккредитованыеПоставщикиСрезПоследних.Организация = НоменклатураАккредитованыхПоставщиков.Организация
		|			И АккредитованыеПоставщикиСрезПоследних.АнкетаПоставщика = НоменклатураАккредитованыхПоставщиков.АнкетаПоставщика
		|			И (&ОтбиратьПоНоменклатуре)
		|			И (НоменклатураАккредитованыхПоставщиков.Номенклатура В (&мГруппИНоменклатуры))
		|ГДЕ
		|	&ОтбиратьПоНоменклатуре
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АккредитацияПоставщикаОбщиеТребования.ТребованиеКПоставщику КАК ТребованиеКПоставщику,
		|	МАКСИМУМ(АккредитацияПоставщикаОбщиеТребования.ЗначениеМножества) КАК ЗначениеМножества,
		|	МАКСИМУМ(АккредитацияПоставщикаОбщиеТребования.РешениеПоложительно) КАК РешениеПоложительно,
		|	МАКСИМУМ(ПОДСТРОКА(АккредитацияПоставщикаОбщиеТребования.КомментарийУчастника, 0, 1000)) КАК КомментарийУчастника,
		|	МАКСИМУМ(ПОДСТРОКА(АккредитацияПоставщикаОбщиеТребования.КомментарийКомиссии, 0, 1000)) КАК КомментарийКомиссии
		|ПОМЕСТИТЬ ЗначенияТребований
		|ИЗ
		|	АккредитацияСсылка КАК АккредитацияСсылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АккредитацияПоставщика.ОбщиеТребования КАК АккредитацияПоставщикаОбщиеТребования
		|		ПО АккредитацияСсылка.Регистратор = АккредитацияПоставщикаОбщиеТребования.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	АккредитацияПоставщикаОбщиеТребования.ТребованиеКПоставщику
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВсеТребованияЗакупки.ТребованиеКПоставщику КАК ТребованиеКПоставщику,
		|	ВсеТребованияЗакупки.Критерий КАК Критерий,
		|	ВсеТребованияЗакупки.ТребованиеКДокументу КАК ТребованиеКДокументу,
		|	ВсеТребованияЗакупки.ИзШаблона КАК ИзШаблона,
		|	ВсеТребованияЗакупки.ТребованиеАккредитации КАК ТребованиеАккредитации,
		|	ВЫБОР
		|		КОГДА ВсеТребованияЗакупки.ТребованиеАккредитации
		|			ТОГДА ЕСТЬNULL(ЗначенияТребований.ЗначениеМножества, НЕОПРЕДЕЛЕНО)
		|		ИНАЧЕ ЕСТЬNULL(ЗначениеИзДокКвалификации.ЗначениеМножества, НЕОПРЕДЕЛЕНО)
		|	КОНЕЦ КАК ЗначениеМножества,
		|	ВЫБОР
		|		КОГДА ВсеТребованияЗакупки.ТребованиеАккредитации
		|			ТОГДА ЕСТЬNULL(ЗначенияТребований.КомментарийУчастника, """")
		|		ИНАЧЕ ЕСТЬNULL(ЗначениеИзДокКвалификации.КомментарийУчастника, """")
		|	КОНЕЦ КАК КомментарийУчастника,
		|	ВЫБОР
		|		КОГДА ВсеТребованияЗакупки.ТребованиеАккредитации
		|			ТОГДА ЕСТЬNULL(ЗначенияТребований.РешениеПоложительно, ЛОЖЬ)
		|		ИНАЧЕ ЕСТЬNULL(ЗначениеИзДокКвалификации.РешениеПоложительно, ЛОЖЬ)
		|	КОНЕЦ КАК РешениеПоложительно,
		|	ВЫБОР
		|		КОГДА ВсеТребованияЗакупки.ТребованиеАккредитации
		|			ТОГДА ЕСТЬNULL(ЗначенияТребований.КомментарийКомиссии, """")
		|		ИНАЧЕ ЕСТЬNULL(ЗначениеИзДокКвалификации.КомментарийКомиссии, """")
		|	КОНЕЦ КАК КомментарийКомиссии
		|ИЗ
		|	ВсеТребованияЗакупки КАК ВсеТребованияЗакупки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияТребований КАК ЗначенияТребований
		|		ПО ВсеТребованияЗакупки.ТребованиеКПоставщику = ЗначенияТребований.ТребованиеКПоставщику
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначениеИзДокКвалификации КАК ЗначениеИзДокКвалификации
		|		ПО ВсеТребованияЗакупки.ТребованиеКПоставщику = ЗначениеИзДокКвалификации.ТребованиеКПоставщику
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТребованиеАккредитации УБЫВ";
	Запрос.УстановитьПараметр("ЗакупочнаяПроцедура", ЗакупочнаяПроцедура);	
	Запрос.УстановитьПараметр("ДатаСреза", ГраницаСреза.Значение);
	Запрос.УстановитьПараметр("Организация", ЗакупочнаяПроцедура.ОрганизаторЗакупки);
	Запрос.УстановитьПараметр("АнкетаПоставщика", АнкетаПоставщика);
	Запрос.УстановитьПараметр("ТребованияИзКвалификации", ТребованияИзКвалификации);
	Запрос.УстановитьПараметр("ОтбиратьПоНоменклатуре", ОтбиратьПоНоменклатуре);
	Запрос.УстановитьПараметр("мГруппИНоменклатуры", мГруппИНоменклатуры);
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
КонецФункции

// Получить перечень требований по организации на дату
Функция ПолучитьОбщиеТребованияПоАнкете(ДатаСреза, Организация, АнкетаПоставщика) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	АккредитованыеПоставщикиСрезПоследних.Регистратор КАК Регистратор
		|ПОМЕСТИТЬ АккредитацияСсылка
		|ИЗ
		|	РегистрСведений.АккредитованыеПоставщики.СрезПоследних(
		|			,
		|			Организация = &Организация
		|				И АнкетаПоставщика = &АнкетаПоставщика
		|				И Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияАккредитацииПоставщиков.Аккредитован)
		|				И ДатаНачала <= &ДатаСреза
		|				И ДатаОкончания >= &ДатаСреза) КАК АккредитованыеПоставщикиСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АккредитацияПоставщикаОбщиеТребования.ТребованиеКПоставщику КАК ТребованиеКПоставщику,
		|	АккредитацияПоставщикаОбщиеТребования.ЗначениеМножества КАК ЗначениеМножества
		|ПОМЕСТИТЬ ЗначенияТребований
		|ИЗ
		|	АккредитацияСсылка КАК АккредитацияСсылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.АккредитацияПоставщика.ОбщиеТребования КАК АккредитацияПоставщикаОбщиеТребования
		|		ПО АккредитацияСсылка.Регистратор = АккредитацияПоставщикаОбщиеТребования.Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	АккредитацияПоставщикаОбщиеТребования.ЗначениеМножества,
		|	АккредитацияПоставщикаОбщиеТребования.ТребованиеКПоставщику
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОбщиеКвалификационныеТребованияКПоставщикамСрезПоследних.ТребованиеКПоставщику КАК ТребованиеКПоставщику,
		|	ОбщиеКвалификационныеТребованияКПоставщикамСрезПоследних.Критерий КАК Критерий,
		|	ОбщиеКвалификационныеТребованияКПоставщикамСрезПоследних.ТребованиеКДокументу КАК ТребованиеКДокументу,
		|	ЕСТЬNULL(ЗначенияТребований.ЗначениеМножества, НЕОПРЕДЕЛЕНО) КАК ЗначениеМножества
		|ИЗ
		|	РегистрСведений.ОбщиеКвалификационныеТребованияКПоставщикам.СрезПоследних(&ДатаСреза, Организация = &Организация) КАК ОбщиеКвалификационныеТребованияКПоставщикамСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияТребований КАК ЗначенияТребований
		|		ПО ОбщиеКвалификационныеТребованияКПоставщикамСрезПоследних.ТребованиеКПоставщику = ЗначенияТребований.ТребованиеКПоставщику";
	
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("АнкетаПоставщика", АнкетаПоставщика);
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
КонецФункции

// Возвращает:
//	ТаблицаЗначений с колонками:
//		ТребованиеКПоставщику
//		Критерий
//		ТребованиеКДокументу
Функция ПолучитьТребованияНоменклатуры(ДатаСреза, Организация, Номенклатура) Экспорт
	мГруппИНоменклатуры = Новый Массив;
	мГруппИНоменклатуры.Добавить(Номенклатура);
	мГруппИНоменклатуры = 
		ЦентрализованныеЗакупкиУХ.ПолучитьМассивНоменклатурыИРодителей(
			мГруппИНоменклатуры);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТребованияКвалификацииКНоменклатуреПоставщиковСрезПоследних.ТребованиеКПоставщику КАК ТребованиеКПоставщику,
		|	ТребованияКвалификацииКНоменклатуреПоставщиковСрезПоследних.Критерий КАК Критерий,
		|	ТребованияКвалификацииКНоменклатуреПоставщиковСрезПоследних.ТребованиеКДокументу КАК ТребованиеКДокументу
		|ИЗ
		|	РегистрСведений.ТребованияКвалификацииКНоменклатуреПоставщиков.СрезПоследних(
		|			&ДатаСреза,
		|			Организация = &Организация
		|				И Номенклатура В (&мГруппИНоменклатуры)) КАК ТребованияКвалификацииКНоменклатуреПоставщиковСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("мГруппИНоменклатуры", мГруппИНоменклатуры);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
КонецФункции

// Получить объединение общих требований по организации
// и требований по номенклатуре.
Функция ПолучитьВсеТребованияПоНоменклатуре(ДатаСреза,
											Организация, 
											Номенклатура) Экспорт
	мГруппИНоменклатуры = Новый Массив;
	мГруппИНоменклатуры.Добавить(Номенклатура);
	мГруппИНоменклатуры =
		ЦентрализованныеЗакупкиУХ.ПолучитьМассивНоменклатурыИРодителей(
			мГруппИНоменклатуры);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТребованияКвалификацииКНоменклатуреПоставщиковСрезПоследних.ТребованиеКПоставщику КАК ТребованиеКПоставщику,
		|	ТребованияКвалификацииКНоменклатуреПоставщиковСрезПоследних.Критерий КАК Критерий,
		|	ТребованияКвалификацииКНоменклатуреПоставщиковСрезПоследних.ТребованиеКДокументу КАК ТребованиеКДокументу,
		|	ИСТИНА КАК ИзШаблона,
		|	ЛОЖЬ КАК ТребованиеАккредитации
		|ПОМЕСТИТЬ Несгруппированные
		|ИЗ
		|	РегистрСведений.ТребованияКвалификацииКНоменклатуреПоставщиков.СрезПоследних(
		|			&ДатаСреза,
		|			Организация = &Организация
		|				И Номенклатура В ИЕРАРХИИ (&мГруппИНоменклатуры)) КАК ТребованияКвалификацииКНоменклатуреПоставщиковСрезПоследних
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОбщиеКвалификационныеТребованияКПоставщикамСрезПоследних.ТребованиеКПоставщику,
		|	ОбщиеКвалификационныеТребованияКПоставщикамСрезПоследних.Критерий,
		|	ОбщиеКвалификационныеТребованияКПоставщикамСрезПоследних.ТребованиеКДокументу,
		|	ИСТИНА,
		|	ИСТИНА
		|ИЗ
		|	РегистрСведений.ОбщиеКвалификационныеТребованияКПоставщикам.СрезПоследних(&ДатаСреза, Организация = &Организация) КАК ОбщиеКвалификационныеТребованияКПоставщикамСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Несгруппированные.ТребованиеКПоставщику КАК ТребованиеКПоставщику,
		|	Несгруппированные.Критерий КАК Критерий,
		|	Несгруппированные.ТребованиеКДокументу КАК ТребованиеКДокументу,
		|	МАКСИМУМ(Несгруппированные.ИзШаблона) КАК ИзШаблона,
		|	МАКСИМУМ(Несгруппированные.ТребованиеАккредитации) КАК ТребованиеАккредитации
		|ИЗ
		|	Несгруппированные КАК Несгруппированные
		|
		|СГРУППИРОВАТЬ ПО
		|	Несгруппированные.Критерий,
		|	Несгруппированные.ТребованиеКДокументу,
		|	Несгруппированные.ТребованиеКПоставщику
		|
		|УПОРЯДОЧИТЬ ПО
		|	ТребованиеАккредитации УБЫВ";
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("мГруппИНоменклатуры", мГруппИНоменклатуры);
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
КонецФункции


#КонецОбласти


#Область ПолучениеГлобальныхНастроек


// Срок аккредитации поставщика по умолчанию
Функция СрокАккредитацииПоставщикаПоУмолчаниюВМесяцах() Экспорт
	Возврат 12;
КонецФункции


#КонецОбласти


#Область РаботаСНоменклатуройАккредитации

// Требует ли переданный массив номенклатурных позиций (могут быть группы) аккредитации по данной Организации
Функция НоменклатураТребуетАккредитацииПоставщиков(ДатаСреза, Организация, мНоменклатуры) Экспорт
	мГруппИНоменклатуры = ЦентрализованныеЗакупкиУХ.ПолучитьМассивНоменклатурыИРодителей(мНоменклатуры);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	1 КАК Поле1
		|ИЗ
		|	РегистрСведений.ТребованияКвалификацииКНоменклатуреПоставщиков.СрезПоследних(
		|			&ДатаСреза,
		|			Номенклатура В (&мГруппИНоменклатуры)
		|				И Организация = &Организация) КАК ТребованияКвалификацииКНоменклатуреПоставщиковСрезПоследних";
	
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Запрос.УстановитьПараметр("мГруппИНоменклатуры", мГруппИНоменклатуры);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат НЕ РезультатЗапроса.Пустой();
КонецФункции


#КонецОбласти


#Область РаботаССостояниемАккредитации


// Получить данные аккредитации для поставщика на дату.
//
// Возвращает:
//	Если данные не найдены, то возвращает Неопределено.
//	Если данныей найдены, то структура:
//		Состояние - ПеречислениеСсылка.СостоянияАккредитацииПоставщиков
//		ДатаОкончания - Дата+Время - дата окончания срока аккредитации или лишения аккредитации.
//			Для других состояний будет незаполнено.
//		Регистратор - документ, зафиксировавший состояние.
//		Период - Дата+Время - дата записи данных о состоянии.
//		
Функция ПолучитьДанныеАккредитацииПоставщика(Организация, АнкетаПоставщика, ДатаСреза) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АккредитованыеПоставщикиСрезПоследних.ДатаОкончания КАК ДатаОкончания,
		|	АккредитованыеПоставщикиСрезПоследних.Состояние КАК Состояние,
		|	АккредитованыеПоставщикиСрезПоследних.Регистратор КАК Регистратор,
		|	АккредитованыеПоставщикиСрезПоследних.Период КАК Период,
		|	АккредитованыеПоставщикиСрезПоследних.ДатаНачала КАК ДатаНачала
		|ИЗ
		|	РегистрСведений.АккредитованыеПоставщики.СрезПоследних(
		|			,
		|			АнкетаПоставщика = &АнкетаПоставщика
		|				И Организация = &Организация
		|				И ДатаНачала <= &ДатаСреза
		|				И ДатаОкончания >= &ДатаСреза) КАК АккредитованыеПоставщикиСрезПоследних";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("АнкетаПоставщика", АнкетаПоставщика);
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Результат = Новый Структура();
		Результат.Вставить("Состояние", ВыборкаДетальныеЗаписи.Состояние);
		Результат.Вставить("ТекстСтатуса", АккредитацияПоставщиковУХ.ПолучитьПредставлениеСтатусаАккредитации(ВыборкаДетальныеЗаписи));
		Результат.Вставить("ДатаНачала", ВыборкаДетальныеЗаписи.ДатаНачала);
		Результат.Вставить("ДатаОкончания", ВыборкаДетальныеЗаписи.ДатаОкончания);
		Результат.Вставить("Регистратор", ВыборкаДетальныеЗаписи.Регистратор);
		Результат.Вставить("Период", ВыборкаДетальныеЗаписи.Период);
		
		Возврат Результат;
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

// Получить данные аккредитации для поставщика на дату по всем организациям.
// Возвращает:
//	ТаблицаЗначений:
//		Организация - СправочникСсылка.Организации, организация по которой 
//		Состояние - ПеречислениеСсылка.СостоянияАккредитацииПоставщиков
//		ДатаНачала - Дата+Время. Дата начала срока аккредитации или лишения аккредитации.
//		ДатаОкончания - Дата+Время. Дата окончания срока аккредитации или лишения аккредитации.
//			Для других состояний будет незаполнено.
//		
Функция ПолучитьСостоянияАккредитацииПоставщика(АнкетаПоставщика, ДатаСреза) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АккредитованыеПоставщикиСрезПоследних.Организация КАК Организация,
		|	АккредитованыеПоставщикиСрезПоследних.Состояние КАК Состояние,
		|	АккредитованыеПоставщикиСрезПоследних.ДатаОкончания КАК ДатаОкончания,
		|	АккредитованыеПоставщикиСрезПоследних.ДатаНачала КАК ДатаНачала,
		|	АккредитованыеПоставщикиСрезПоследних.Состояние КАК Аккредитован
		|ИЗ
		|	РегистрСведений.АккредитованыеПоставщики.СрезПоследних(
		|			,
		|			АнкетаПоставщика = &АнкетаПоставщика
		|				И ДатаНачала <= &ДатаСреза
		|				И ДатаОкончания >= &ДатаСреза) КАК АккредитованыеПоставщикиСрезПоследних";
	
	Запрос.УстановитьПараметр("АнкетаПоставщика", АнкетаПоставщика);
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
КонецФункции

// Получить общий статус аккредитации для поставщика на дату.
// Возвращает:
//	Структура:
//		Аккредитован - ПеречислениеСсылка.СостоянияАккредитацииПоставщиков
//		ДатаОкончания - Дата+Время. Дата окончания срока аккредитации. Если не аккредитован, то пустая дата.
//		
Функция ПолучитьОписаниеСтатусаАккредитацииПоставщика(АнкетаПоставщика, ДатаСреза) Экспорт
	ДанныеАккредитации = Новый Структура("Аккредитован, ДатаОкончания", ЛОжь, '00010101');
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СостоянияАккредитованныхПоставщиковСрезПоследних.ДатаОкончания,
		|	СостоянияАккредитованныхПоставщиковСрезПоследних.Аккредитован
		|ИЗ
		|	РегистрСведений.СостоянияАккредитованныхПоставщиков.СрезПоследних(&ДатаСреза, АнкетаПоставщика = &АнкетаПоставщика) КАК СостоянияАккредитованныхПоставщиковСрезПоследних";
	
	Запрос.УстановитьПараметр("АнкетаПоставщика", АнкетаПоставщика);
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		ДанныеАккредитации.Аккредитован = ВыборкаДетальныеЗаписи.Аккредитован;
		ДанныеАккредитации.ДатаОкончания = ВыборкаДетальныеЗаписи.ДатаОкончания;
	КонецЕсли;
	
	Возврат ДанныеАккредитации;
КонецФункции

// Параметры:
//	ДанныеАккредитации - Структура, см. возвращаемое значение функции ПолучитьОписаниеСтатусаАккредитацииПоставщика()
//
// Возвращает:
//	Строка, текстовое описание статуса аккредитации поставщика в целом по холдингу
Функция ПолучитьПредставлениеОбщегоСтатусаАккредитации(ДанныеАккредитации) Экспорт
	Если ДанныеАккредитации.Аккредитован Тогда
		Возврат СтрШаблон(НСтр("ru = 'Аккредитован до %1'"), Формат(ДанныеАккредитации.ДатаОкончания, "Л=ru; ДФ=dd.MM.yyyy"));
	КонецЕсли;
		
	Возврат НСтр("ru = 'Не аккредитован'");
КонецФункции

// Возвращает:
//	Строка, текстовое описание статуса аккредитации поставщика по организации
Функция ПолучитьПредставлениеСтатусаАккредитации(ДанныеАккредитации) Экспорт
	Если ДанныеАккредитации = Неопределено Тогда
		Возврат НСтр("ru = 'Не аккредитован'");
	КонецЕсли;
	
	ТекстДатыОкончания = Формат(ДанныеАккредитации.ДатаОкончания, "ДФ=dd.MM.yyyy");
	Если НЕ ЗначениеЗаполнено(ДанныеАккредитации.Состояние) Тогда
		ТекстОписания = НСтр("ru = 'Не аккредитован'");
	ИначеЕсли ДанныеАккредитации.Состояние = Перечисления.СостоянияАккредитацииПоставщиков.Аккредитован Тогда
		ТекстОписания = НСтр("ru = 'Аккредитован до '") + ТекстДатыОкончания;
	ИначеЕсли ДанныеАккредитации.Состояние = Перечисления.СостоянияАккредитацииПоставщиков.ЛишенАккредитации Тогда
		ТекстОписания = НСтр("ru = 'Лишен аккредитации до '") + ТекстДатыОкончания;
	ИначеЕсли ДанныеАккредитации.Состояние = Перечисления.СостоянияАккредитацииПоставщиков.НаРассмотрении Тогда
		ТекстОписания = НСтр("ru = 'На рассмотрении с '") + Формат(ДанныеАккредитации.ДатаНачала, "ДФ=dd.MM.yyyy");
	ИначеЕсли ДанныеАккредитации.Состояние = Перечисления.СостоянияАккредитацииПоставщиков.НеАккредитован Тогда
		ТекстОписания = НСтр("ru = 'Не аккредитован'");
	ИначеЕсли ДанныеАккредитации.Состояние = Перечисления.СостоянияАккредитацииПоставщиков.Черновик Тогда
		ТекстОписания = НСтр("ru = 'Не аккредитован'");
	КонецЕсли;

	Возврат ТекстОписания;
КонецФункции

Функция УстановитьПредставлениеСтатусаАккредитацииНаФорме(Форма, Организация, АнкетаПоставщика, Дата) Экспорт
	ДанныеАккредитации = АккредитацияПоставщиковУХ.ПолучитьДанныеАккредитацииПоставщика(Организация, АнкетаПоставщика, Дата);
	
	флЛишенАккредитации = (ДанныеАккредитации <> Неопределено) И
		(ДанныеАккредитации.Состояние = Перечисления.СостоянияАккредитацииПоставщиков.ЛишенАккредитации);
	
	Форма.Элементы.СостояниеАккредитации.Заголовок =
		АккредитацияПоставщиковУХ.ПолучитьПредставлениеСтатусаАккредитации(ДанныеАккредитации);
		
	Форма.Элементы.СостояниеАккредитации.ЦветТекста = ?(флЛишенАккредитации, ЦветаСтиля.ЦветОсобогоТекста, ЦветаСтиля.ЦветТекстаФормы);
	Возврат ДанныеАккредитации;
КонецФункции


#КонецОбласти


#Область РаботаСАнкетойПоставщика


// Создать или получить контрагента связанного с анкетой поставщика.
//
Функция ПолучитьКонтрагентаПоставщика(АнкетаПоставщика) Экспорт
	Если НЕ ЗначениеЗаполнено(АнкетаПоставщика) Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	Контрагент = НайтиКонтрагентаПоставщика(АнкетаПоставщика);
	Если ЗначениеЗаполнено(Контрагент) Тогда
		Возврат Контрагент;
	КонецЕсли;
	Возврат 
		УправлениеЗакупкамиВстраиваниеПереопределяемыйУХ.СоздатьИнфраструктуруКонтрагентаПоАнкетеПоставщика(
				АнкетаПоставщика);
КонецФункции

// Возвращает анкету поставщика для указанного Контрагента.
// Если не находит, то возвращает пустую ссылку СправочникСсылка.Контрагенты.
//
Функция ПолучитьАнкетуПоставщикаДляКонтрагента(Контрагент) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	АнкетыПоставщиков.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.АнкетыПоставщиков КАК АнкетыПоставщиков
		|ГДЕ
		|	АнкетыПоставщиков.Контрагент = &Контрагент";
	
	Запрос.УстановитьПараметр("Контрагент", Контрагент);
	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	
	Возврат Справочники.Контрагенты.ПустаяСсылка();
КонецФункции


#КонецОбласти


#Область РаботаСДокументамиАккредитации


// Добавить движение общего состояния аккредитации поставщика "АнкетаПоставщика" в регистр 
// сведений "СостоянияАккредитованныхПоставщиков" на дату "ДатаЗаписи".
// Значение ресурса "Аккредитован" определяем по следующему правилу:
// Если (Аккредитован==Истина), то записываем состояние (Аккредитован=Истина).
// Иначе, если есть аккредитация хотябы по одной организации отличной от Организация,
//	то записываем (Аккредитован=Истина),
//	иначе записываем (Аккредитован=Ложь).
//
Процедура ДобавитьДвижениеСостояниеАккредитацииПоставщика(ДвиженияСостоянияАккредитованныхПоставщиков,
		АнкетаПоставщика, ДатаЗаписи, Организация, Аккредитован, ДатаОкончанияСрокаАккредитации) Экспорт
		
	ЗаписываемСтатусАккредитации = Аккредитован;	
	Если НЕ Аккредитован Тогда
		// Проверим, что без аккредитации по Организация, все равно аккредитован.
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ИСТИНА КАК Поле1
			|ИЗ
			|	РегистрСведений.АккредитованыеПоставщики.СрезПоследних(
			|			,
			|			АнкетаПоставщика = &АнкетаПоставщика
			|				И Организация <> &Организация
			|				И Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияАккредитацииПоставщиков.Аккредитован)
			|				И ДатаНачала <= &ДатаСреза
			|				И ДатаОкончания >= &ДатаСреза) КАК АккредитованыеПоставщикиСрезПоследних";
		
		Запрос.УстановитьПараметр("АнкетаПоставщика", АнкетаПоставщика);
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("ДатаСреза", ДатаЗаписи);
		
		РезультатЗапроса = Запрос.Выполнить();
		ЗаписываемСтатусАккредитации = НЕ РезультатЗапроса.Пустой();
	КонецЕсли;
	
	Движение = ДвиженияСостоянияАккредитованныхПоставщиков.Добавить();
	Движение.Период = ДатаЗаписи;
	Движение.АнкетаПоставщика = АнкетаПоставщика;
	Движение.Аккредитован = ЗаписываемСтатусАккредитации;
	Движение.ДатаОкончания = ?(ЗаписываемСтатусАккредитации=Истина, ДатаОкончанияСрокаАккредитации, ДатаЗаписи);
	
КонецПроцедуры

// Возвращает документ аккредитации поставщика для выбранного типа с датой не позже указанной
// Параметры:
//	ИмяТипаДокумента - "АккредитацияПоставщика", "КвалификацияПоставщика", "ОтзывАккредитации", "ЛишениеАккредитации".
//	АнкетаПоставщика - СправочникСсылка.АнкетыПоставщиков. Ссылка на поставщика.
//	ДатаСреза - Дата - Поиск документа производится по вхождению даты в интервал [Документ.Дата; Документ.ДатаОкончанияСрокаАккредитации]
//	Отбор - Соответствие:
//		Ключ - имя реквизита документа для которого устанавливается отбор;
//		Значение - Структура с полями, значение и вид отбора:
//			Значение - Произвольный, значение отбора;
//			ВидСравнения - Строка, команда сравнения доступная в запросе)
//
// Возвращает:
//	ДокументСсылка указанного типа.
//	Если подходящего документа нет, возвращает пустую ссылку.
//
Функция ПолучитьДокументыАккредитации(ИмяТипаДокумента,
									Организация,
									АнкетаПоставщика,
									ДатаСреза,
									Отбор=Неопределено) Экспорт
	Если НЕ ЗначениеЗаполнено(АнкетаПоставщика) Тогда
		возврат Новый Массив;
	КонецЕсли;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(МАКСИМУМ(ТекущийДокументАккредитации.Ссылка), ЗНАЧЕНИЕ(Документ.АккредитацияПоставщика.ПустаяСсылка)) КАК Ссылка
		|ИЗ
		|	Документ.АккредитацияПоставщика КАК ТекущийДокументАккредитации
		|ГДЕ
		|	НЕ ТекущийДокументАккредитации.ПометкаУдаления
		|	И ТекущийДокументАккредитации.АнкетаПоставщика = &АнкетаПоставщика
		|	И ТекущийДокументАккредитации.Дата <= &ДатаСреза
		|	И ТекущийДокументАккредитации.Организация = &Организация";
	Запрос.УстановитьПараметр("АнкетаПоставщика", АнкетаПоставщика);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Если ИмяТипаДокумента <> "АккредитацияПоставщика" Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст, 
			"АккредитацияПоставщика", 
			ИмяТипаДокумента);
	КонецЕсли;
	Если ЗначениеЗаполнено(Отбор) Тогда
		НомерПараметра = 1;
		Для Каждого УсловиеОтбора Из Отбор Цикл
			Запрос.Текст = Запрос.Текст + Символы.ПС
				+ "	И ТекущийДокументАккредитации." + УсловиеОтбора.Ключ
				+ УсловиеОтбора.Значение.ВидСравнения
				+ " (&Параметр" + НомерПараметра + ")";
			Запрос.УстановитьПараметр("Параметр" 
				+ НомерПараметра, УсловиеОтбора.Значение.Значение);
			НомерПараметра = НомерПараметра + 1;
		КонецЦикла;
	КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаЗапроса = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	Если ВыборкаЗапроса.Следующий() Тогда
		Возврат ВыборкаЗапроса.Ссылка;
	КонецЕсли;
	Возврат Документы[ИмяТипаДокумента].ПустаяСсылка();
КонецФункции

// Получить документ аккредитации поставщика исключив документ ТекущаяАккредитация,
// но проведенный не позжде ТекущаяАккредитация.Дата.
//
// Параметры:
//	Организация - СправочникСсылка.Организации - организация по которой аккредитован поставщик.
//	АнектаПоставщика - СправочникСсылка.АнкетыПоставщиков - поставщик для которого ищем аккредитацию.
//	ТекущаяАккредитация - Дата или ДокументСсылка.АккредитацияПоставщика -
//		Если дата, то возвращает последний проведенный документ со статусом "Аккредитован" на указанную дату.
//		Если документ, то возвращает последний проведенный документ со статусом "Аккредитован"
//			на дату документа, не равный ТекущаяАккредитация.
// Возвращает:
//	ДокументСсылка.АккредитацияПоставщика.
//
Функция ПредыдущаяАккредитация(Организация, АнкетаПоставщика, ТекущаяАккредитация) Экспорт
	Если ТипЗнч(ТекущаяАккредитация) <> Тип("ДокументСсылка.АккредитацияПоставщика") Тогда
		СсылкаНаИсключаемуюАккредитацию = Документы.АккредитацияПоставщика.ПустаяСсылка();
		ДатаСреза = ТекущаяАккредитация;
	Иначе
		СсылкаНаИсключаемуюАккредитацию = ТекущаяАккредитация;
		ДатаСреза = ТекущаяАккредитация.Дата;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	АккредитованыеПоставщикиСрезПоследних.Регистратор КАК Регистратор
		|ИЗ
		|	РегистрСведений.АккредитованыеПоставщики.СрезПоследних(
		|			,
		|			АнкетаПоставщика = &АнкетаПоставщика
		|				И Организация = &Организация
		|				И Регистратор <> &ТекущаяАккредитация
		|				И Регистратор ССЫЛКА Документ.АккредитацияПоставщика
		|				И ДатаНачала <= &ДатаСреза
		|				И ДатаОкончания >= &ДатаСреза) КАК АккредитованыеПоставщикиСрезПоследних";
		
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("АнкетаПоставщика", АнкетаПоставщика);
	Запрос.УстановитьПараметр("ТекущаяАккредитация", СсылкаНаИсключаемуюАккредитацию);
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Регистратор;
	КонецЕсли;
	
	Возврат Документы.КвалификацияПоставщика.ПустаяСсылка();
КонецФункции

// Создать, если еще нет документы "Квалификация" для всех аккредитованных поставщиков на дату лота.
// Номенклатура не учитывается!
Процедура СоздатьКвалификацииПоАттестованнымКонтрагентамЗакупки(ЗакупочнаяПроцедура) Экспорт
	ДатаСреза = ПолучитьДатуПоискаАккредитованныхПоставщиков(
		ЗакупочнаяПроцедура);
	Запрос = Новый Запрос;
	Запрос.Текст =     "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                   |	ЗакупочныеПроцедурыУчастникиЗакупки.Участник КАК АнкетаПоставщика,
	                   |	МАКСИМУМ(ЕСТЬNULL(АккредитованыеПоставщикиСрезПоследних.Регистратор, НЕОПРЕДЕЛЕНО)) КАК ДокументАккредитации
	                   |ИЗ
	                   |	Справочник.ЗакупочныеПроцедуры.УчастникиЗакупки КАК ЗакупочныеПроцедурыУчастникиЗакупки
	                   |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АккредитованыеПоставщики.СрезПоследних(
	                   |				,
	                   |				Организация = &Организация
	                   |					И Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияАккредитацииПоставщиков.Аккредитован)
	                   |					И ДатаНачала <= &ДатаСреза
	                   |					И ДатаОкончания >= &ДатаСреза) КАК АккредитованыеПоставщикиСрезПоследних
	                   |		ПО ЗакупочныеПроцедурыУчастникиЗакупки.Участник = АккредитованыеПоставщикиСрезПоследних.АнкетаПоставщика
	                   |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КвалификацияПоставщика КАК КвалификацияПоставщика
	                   |		ПО (АккредитованыеПоставщикиСрезПоследних.АнкетаПоставщика = КвалификацияПоставщика.АнкетаПоставщика)
	                   |			И (КвалификацияПоставщика.ЗакупочнаяПроцедура = &ЗакупочнаяПроцедура)
	                   |			И (НЕ КвалификацияПоставщика.ПометкаУдаления)
	                   |			И (КвалификацияПоставщика.Организация = &Организация)
	                   |ГДЕ
	                   |	КвалификацияПоставщика.Ссылка ЕСТЬ NULL
	                   |	И ЗакупочныеПроцедурыУчастникиЗакупки.Ссылка = &ЗакупочнаяПроцедура
	                   |	И ЗакупочныеПроцедурыУчастникиЗакупки.ПодтвердилУчастие = Истина
	                   |
	                   |СГРУППИРОВАТЬ ПО
	                   |	ЗакупочныеПроцедурыУчастникиЗакупки.Участник";
	Запрос.УстановитьПараметр("ЗакупочнаяПроцедура", ЗакупочнаяПроцедура);
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Запрос.УстановитьПараметр("Организация",
		ЗакупочнаяПроцедура.ОрганизаторЗакупки);
	РезультатЗапроса = Запрос.Выполнить();
	ТЗДанныхЗаполненияКвалификаций = РезультатЗапроса.Выгрузить(
		ОбходРезультатаЗапроса.Прямой);
	ПостоянныеРеквизиты = Новый Структура("ЗакупочнаяПроцедура, Организация,Дата",
		ЗакупочнаяПроцедура, 
		ЗакупочнаяПроцедура.ОрганизаторЗакупки, 
		ТекущаяДата());
	АккредитацияПоставщиковУХ.СоздатьКвалификацииПоТаблицеЗначений(
		ТЗДанныхЗаполненияКвалификаций,
		РежимЗаписиДокумента.Запись,
		ПостоянныеРеквизиты);
КонецПроцедуры

// Создать, если еще нет документы "Квалификация" для массива поставщиков на дату
//  Закупочной процедуры. Номенклатура не учитывается!
//
// Параметры:
//  ЗакупочнаяПроцедура - СправочникСсылка.ЗакупочныеПроцедуры - закупка
//		для которой нужно создать квалификации.
//  мАнкетыПоставщиков - Массив(СправочникСсылка.АнкетыПоставщиков) - 
//		необязательный. Отбор актет поставщиков для которых нужно создать
//		квалификации.
//		
//
Процедура СоздатьКвалификацииПоПоставщикамЗакупки(ЗакупочнаяПроцедура,
												  мАнкетыПоставщиков=Неопределено) Экспорт
	ДатаСреза = ПолучитьДатуПоискаАккредитованныхПоставщиков(
		ЗакупочнаяПроцедура);
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОповещениеАккредитованныхПоставщиковОТоргахПоставщики.АнкетаПоставщика КАК АнкетаПоставщика
		|ПОМЕСТИТЬ АнкетыПоставщиков
		|ИЗ
		|	Документ.ОповещениеАккредитованныхПоставщиковОТоргах.Поставщики КАК ОповещениеАккредитованныхПоставщиковОТоргахПоставщики
		|ГДЕ
		|	ОповещениеАккредитованныхПоставщиковОТоргахПоставщики.Ссылка.ЗакупочнаяПроцедура = &ЗакупочнаяПроцедура
		|	И НЕ ОповещениеАккредитованныхПоставщиковОТоргахПоставщики.Ссылка.ПометкаУдаления
		|	И (НЕ &ЕстьОтборАнект
		|			ИЛИ ОповещениеАккредитованныхПоставщиковОТоргахПоставщики.АнкетаПоставщика В (&мАнкетыПоставщиков))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АнкетыПоставщиков.АнкетаПоставщика КАК АнкетаПоставщика,
		|	МАКСИМУМ(ЕСТЬNULL(АккредитованыеПоставщикиСрезПоследних.Регистратор, НЕОПРЕДЕЛЕНО)) КАК ДокументАккредитации
		|ИЗ
		|	АнкетыПоставщиков КАК АнкетыПоставщиков
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АккредитованыеПоставщики.СрезПоследних(
		|				,
		|				Организация = &Организация
		|					И Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияАккредитацииПоставщиков.Аккредитован)
		|					И ДатаНачала <= &ДатаСреза
		|					И ДатаОкончания >= &ДатаСреза
		|					И АнкетаПоставщика В
		|						(ВЫБРАТЬ
		|							АнкетыПоставщиков.АнкетаПоставщика КАК АнкетаПоставщика
		|						ИЗ
		|							АнкетыПоставщиков КАК АнкетыПоставщиков)) КАК АккредитованыеПоставщикиСрезПоследних
		|		ПО (АккредитованыеПоставщикиСрезПоследних.АнкетаПоставщика = АнкетыПоставщиков.АнкетаПоставщика)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КвалификацияПоставщика КАК КвалификацияПоставщика
		|		ПО АнкетыПоставщиков.АнкетаПоставщика = КвалификацияПоставщика.АнкетаПоставщика
		|			И (КвалификацияПоставщика.ЗакупочнаяПроцедура = &ЗакупочнаяПроцедура)
		|			И (КвалификацияПоставщика.Организация = &Организация)
		|			И (НЕ КвалификацияПоставщика.ПометкаУдаления)
		|ГДЕ
		|	КвалификацияПоставщика.Ссылка ЕСТЬ NULL
		|
		|СГРУППИРОВАТЬ ПО
		|	АнкетыПоставщиков.АнкетаПоставщика";
	Запрос.УстановитьПараметр("ЗакупочнаяПроцедура", ЗакупочнаяПроцедура);
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	Запрос.УстановитьПараметр("Организация",
		ЗакупочнаяПроцедура.ОрганизаторЗакупки);
	Запрос.УстановитьПараметр("ЕстьОтборАнект", 
		ЗначениеЗаполнено(мАнкетыПоставщиков));
	Запрос.УстановитьПараметр("мАнкетыПоставщиков", мАнкетыПоставщиков);
	РезультатЗапроса = Запрос.Выполнить();
	ТЗДанныхЗаполненияКвалификаций =
		РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
	ПостоянныеРеквизиты = Новый Структура(
		"ЗакупочнаяПроцедура, Организация, Дата",
		ЗакупочнаяПроцедура, 
		ЗакупочнаяПроцедура.ОрганизаторЗакупки, 
		ТекущаяДата());
	АккредитацияПоставщиковУХ.СоздатьКвалификацииПоТаблицеЗначений(
		ТЗДанныхЗаполненияКвалификаций,
		РежимЗаписиДокумента.Запись, 
		ПостоянныеРеквизиты);
КонецПроцедуры

// Создать документы "Квалификация" для всех строк таблицы
// ДанныеКвалификаций, и заполнить их данными по данным
// соответствующих строк.
//
// Параметры:
//	ДанныеКвалификаций - ТаблицаЗначений, по строкам которой будут
// 		создаваться документы. Одна строка - один документ.
//		Колонки таблицы должны соответствовать реквизитам документа
//		(см. функцию СоздатьКвалификацииПоЛоту()).
//	РежимЗаписи (необязательный) - РежимЗаписиДокумента.
//		По умолчанию - Запись.
//	ПостоянныеРеквизиты (необязательный) - Структура, предназначена 
//		для заполнения всех создаваемых документов.
//		Вначале документ заполняется из этой структуры, и затем,
//		из строки таблицы "ДанныеКвалификации".
//
Процедура СоздатьКвалификацииПоТаблицеЗначений(
										ДанныеКвалификаций,
										РежимЗаписи=Неопределено,
										ПостоянныеРеквизиты=Неопределено) Экспорт

	Если РежимЗаписи = Неопределено Тогда
		РежимЗаписи = РежимЗаписиДокумента.Запись;
	КонецЕсли;
	Для Каждого СтрокаКвалификации Из ДанныеКвалификаций Цикл
		КвалификацияОбъект = Документы.КвалификацияПоставщика.СоздатьДокумент();
		Если ПостоянныеРеквизиты <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(КвалификацияОбъект, ПостоянныеРеквизиты);
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(КвалификацияОбъект, СтрокаКвалификации);
		КвалификацияОбъект.Заполнить(Неопределено);
		КвалификацияОбъект.Записать(РежимЗаписи);
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьДокументКвалификацииПоставщикаЗакупочнойПроцедуры(Закупка, АнкетаПоставщика) Экспорт
	Если НЕ ЗначениеЗаполнено(Закупка) ИЛИ НЕ ЗначениеЗаполнено(АнкетаПоставщика) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Отбор_ = Новый Соответствие;
	Отбор_.Вставить("ЗакупочнаяПроцедура", Новый Структура("Значение,ВидСравнения", Закупка, "="));
	ДокументКвалификации = АккредитацияПоставщиковУХ.ПолучитьДокументыАккредитации(
		"КвалификацияПоставщика",
		Закупка.ОрганизаторЗакупки,
		АнкетаПоставщика,
		ТекущаяДата(),
		Отбор_);
	Возврат ДокументКвалификации;
КонецФункции

// Регистрирует список ЭТП указанного поставщика.
//  Проверяет, что поставщик аккредитован, и если это так, то
//  записывает указанные ЭТП в регистр сведений ИспользованиеЭТППоставщиками.
//  Если поставщик не аккредитован, то очищает этот регистр.
//  Может вызываться при проведении документа АккредитацияПоставщика,
//  или в момент записи списка ЭТП в анкете поставщика.
//
// Параметры:
//	АнектаПоставщика - СправочникСсылка.АнкетыПоставщиков - поставщик.
//  Дата - Дата+Время - дата на которую производится проверка аккредитации.
//  мЭТП - Массив(СправочникСсылка.КлассификаторЭТП) - массив ЭТП, которые
//				нужно зарегистрировать для поставщика, если он аккредитован.
//
Процедура ЗарегистрироватьЭТППоставщикаСПроверкой(АнкетаПоставщика, Дата, мЭТП) Экспорт
	ОписаниеАккредитации =
		ПолучитьОписаниеСтатусаАккредитацииПоставщика(АнкетаПоставщика, Дата);
	Если ОписаниеАккредитации.Аккредитован Тогда
		ЗарегистрироватьЭТППоставщика(АнкетаПоставщика, мЭТП);
	Иначе
		СтеретьЭТППоставщика(АнкетаПоставщика);
	КонецЕсли;
КонецПроцедуры

Процедура ЗарегистрироватьЭТППоставщика(АнкетаПоставщика, мЭТП) Экспорт
	РегистрыСведений.ИспользованиеЭТППоставщиками.ЗарегистрироватьПоПоставщику(
		АнкетаПоставщика,
		мЭТП);
КонецПроцедуры

Процедура СтеретьЭТППоставщика(АнкетаПоставщика) Экспорт
	РегистрыСведений.ИспользованиеЭТППоставщиками.ЗарегистрироватьПоПоставщику(
		АнкетаПоставщика,
		Новый Массив);
КонецПроцедуры
	
#КонецОбласти


#Область РаботаСЛотами


Функция ПолучитьДатуПоискаАккредитованныхПоставщиков(
									ЗакупочнаяПроцедура) Экспорт
	// Дата объявления закупки всегда заполнена.
	Возврат НачалоДня(
		ЗакупочнаяПроцедура.ДатаОфициальногоОбъявленияЗакупки);
КонецФункции
	
// Возвращает Границу(Включая) основанную на ключевой дате лота,
// относительно которой проверяется срок аккредитации поставщиков.
Функция ПолучитьГраницуПоискаАккредитованныхПоставщиков(
										ЗакупочнаяПроцедура) Экспорт
	Возврат Новый Граница(
		ПолучитьДатуПоискаАккредитованныхПоставщиков(ЗакупочнаяПроцедура),
		ВидГраницы.Включая);
КонецФункции

// Получить таблицу значений аккредитованных поставщиков (формат по табличной части
// "Поставщики" документа "ОповещениеАккредитованныхПоставщиковОТоргах"),
// подходящих для поставки по лоту
Функция ПолучитьАккредитованныхПоставщиковЗакупки(ЗакупочнаяПроцедура, ОтбиратьПоТоварнойКатегории = Ложь, ОтбиратьПоЭТП = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	АккредитованыеПоставщикиСрезПоследних.АнкетаПоставщика КАК АнкетаПоставщика,
		|	АккредитованыеПоставщикиСрезПоследних.АнкетаПоставщика.АдресЭП КАК АдресЭП,
		|	ИСТИНА КАК Аккредитован
		|ИЗ
		|	РегистрСведений.АккредитованыеПоставщики.СрезПоследних(, Организация = &Организация) КАК АккредитованыеПоставщикиСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.АккредитацияПоставщика.ТоварныеКатегории КАК АккредитацияПоставщикаТоварныеКатегории
		|		ПО АккредитованыеПоставщикиСрезПоследних.АнкетаПоставщика = АккредитацияПоставщикаТоварныеКатегории.Ссылка.АнкетаПоставщика
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АнкетыПоставщиков.ИспользуемыеЭТП КАК АнкетыПоставщиковИспользуемыеЭТП
		|		ПО АккредитованыеПоставщикиСрезПоследних.АнкетаПоставщика = АнкетыПоставщиковИспользуемыеЭТП.Ссылка
		|ГДЕ
		|	АккредитованыеПоставщикиСрезПоследних.Состояние = ЗНАЧЕНИЕ(Перечисление.СостоянияАккредитацииПоставщиков.Аккредитован)
		|	И АккредитованыеПоставщикиСрезПоследних.ДатаНачала <= &ДатаСреза
		|	И АккредитованыеПоставщикиСрезПоследних.ДатаОкончания >= &ДатаСреза
		|	И ВЫБОР
		|			КОГДА &ОтбиратьПоТоварнойКатегории
		|				ТОГДА АккредитацияПоставщикаТоварныеКатегории.ТоварнаяКатегория = &ТоварнаяКатегория
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &ОтбиратьПоЭТП
		|				ТОГДА АнкетыПоставщиковИспользуемыеЭТП.ЭТП = &ЭТП
		|			ИНАЧЕ ИСТИНА
		|		КОНЕЦ";
	
	Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЗакупочнаяПроцедура, "ОрганизаторЗакупки, ДатаОфициальногоОбъявленияЗакупки, ТоварнаяКатегория, ЭТППубликации");
	
	Запрос.УстановитьПараметр("ДатаСреза", Реквизиты.ДатаОфициальногоОбъявленияЗакупки);
	Запрос.УстановитьПараметр("Организация", Реквизиты.ОрганизаторЗакупки);
	Запрос.УстановитьПараметр("ОтбиратьПоТоварнойКатегории", ОтбиратьПоТоварнойКатегории);
	Запрос.УстановитьПараметр("ТоварнаяКатегория", Реквизиты.ТоварнаяКатегория);
	Запрос.УстановитьПараметр("ОтбиратьПоЭТП", ОтбиратьПоЭТП);
	Запрос.УстановитьПараметр("ЭТП", Реквизиты.ЭТППубликации);
	
	РезультатЗапроса = Запрос.Выполнить();
		
	Возврат РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой);
КонецФункции


// Получить массив документов "ОповещениеАккредитованныхПоставщиковОТоргах" для указанного лота
Функция ПолучитьОповещенияПоставщиковОТоргах(Лот) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ОповещениеАккредитованныхПоставщиковОТоргах.Ссылка
		|ИЗ
		|	Документ.ОповещениеАккредитованныхПоставщиковОТоргах КАК ОповещениеАккредитованныхПоставщиковОТоргах
		|ГДЕ
		|	ОповещениеАккредитованныхПоставщиковОТоргах.Лот = &Лот
		|	И НЕ ОповещениеАккредитованныхПоставщиковОТоргах.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Лот", Лот);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выгрузить(ОбходРезультатаЗапроса.Прямой).ВыгрузитьКолонку(0);
КонецФункции


#КонецОбласти


#Область ВнутреннийПрограммныйИнтерфейс


// Ищет контрагента связанного с анкетой поставщика.
//
Функция НайтиКонтрагентаПоставщика(АнкетаПоставщика) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	Контрагенты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.АнкетыПоставщиков КАК АнектыПоставщиков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО АнектыПоставщиков.ИНН = Контрагенты.ИНН
		|			И АнектыПоставщиков.КПП = Контрагенты.КПП
		|			И АнектыПоставщиков.ЮридическоеФизическоеЛицо = Контрагенты.ЮридическоеФизическоеЛицо
		|			И (АнектыПоставщиков.Ссылка = &АнкетаПоставщика)
		|			И (Контрагенты.ИНН <> """")
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.АнкетыПоставщиков КАК АнектыПоставщиков
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО АнектыПоставщиков.РегистрационныйНомер = Контрагенты.РегистрационныйНомер
		|			И АнектыПоставщиков.СтранаРегистрации = Контрагенты.СтранаРегистрации
		|			И АнектыПоставщиков.ЮридическоеФизическоеЛицо = Контрагенты.ЮридическоеФизическоеЛицо
		|			И (АнектыПоставщиков.Ссылка = &АнкетаПоставщика)
		|			И (Контрагенты.РегистрационныйНомер <> """")";
	Запрос.УстановитьПараметр("АнкетаПоставщика", АнкетаПоставщика);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
	Возврат Справочники.Контрагенты.ПустаяСсылка();
КонецФункции

Функция ВидОповещенияОбУчастииВЗакупке(Аккредитован)
	Если Аккредитован Тогда
		Возврат Справочники.ВидыСобытийОповещений.ОповещениеОВозможностиУчаствоватьВЛотеАккредитованномуВнешнемуПоставщику;
	КонецЕсли;
	Возврат Справочники.ВидыСобытийОповещений.ОповещениеОВозможностиУчаствоватьВЛотеВнешнемуПоставщику;
КонецФункции

#КонецОбласти
