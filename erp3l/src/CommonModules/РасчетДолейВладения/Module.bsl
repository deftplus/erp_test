
#Область ПрограммныйИнтерфейс

Функция ПолучитьПоследовательностиНаДату(Сценарий, ДатаСреза, Инвестор = Неопределено, ГруппировкиЧерезЗапятую = Неопределено, ВариантОтчета = "Уведомление") Экспорт

	ДокументРезультат = Новый ТаблицаЗначений;
	
	Отчет = Отчеты.ПоследовательностиУчастия.Создать();
	Если Отчет.СхемаКомпоновкиДанных.ВариантыНастроек.Получить(0).Имя <> ВариантОтчета Тогда
		
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(Отчет.СхемаКомпоновкиДанных.ВариантыНастроек.Найти(ВариантОтчета).Настройки);
		Отчет.КомпоновщикНастроек.Восстановить();
		
	КонецЕсли;
	
	Отчет.ЗаполнитьПоОтбору(Сценарий, Новый Граница(ДатаСреза, ВидГраницы.Включая), Инвестор);
	
	Результат = Новый ТаблицаЗначений;
	Если ГруппировкиЧерезЗапятую <> Неопределено Тогда
	
		Отчет.КомпоновщикНастроек.Настройки.Структура.Очистить();
		
		ТекущийЭлемент = Отчет.КомпоновщикНастроек.Настройки;
		Для каждого ИмяГруппировки Из СтрРазделить(ГруппировкиЧерезЗапятую, ",") Цикл
			
			НоваяГруппировка = ТиповыеОтчетыУХ.ДобавитьГруппировкуСтруктуры(ТекущийЭлемент, ИмяГруппировки);
			ТекущийЭлемент = НоваяГруппировка;							  
		
		КонецЦикла;
		
		НоваяГруппировка = ТиповыеОтчетыУХ.ДобавитьГруппировкуСтруктуры(ТекущийЭлемент, Неопределено);// детальные записи		
		Результат = Новый ДеревоЗначений;
			
	КонецЕсли;
	
	Отчет.ПодготовитьРезультат(Результат);
	
	Возврат Результат;

КонецФункции

Функция ПолучитьПоследовательностиУчастия(ОбъектыИнвестирования, ТабПрямыеДоли) Экспорт

	ТабПрямыеДоли.Индексы.Добавить("ОбъектИнвестирования");
	ТабПрямыеДоли.Индексы.Добавить("Инвестор");
	ТабПрямыеДоли.Индексы.Добавить("Инвестор, ОбъектИнвестирования");
	
	КонечныеОбъектыИнвестирования = Новый Соответствие;	
	Для каждого ОбъектИнвестирования Из ОбъектыИнвестирования Цикл
		ТекущаяПоследовательность = Новый Массив;
		СтрокаПрамаяДоля = Новый Структура("Инвестор,ОбъектИнвестирования", Неопределено, ОбъектИнвестирования);
	    ЗаполнитьОбъектыИнвестирования(КонечныеОбъектыИнвестирования, ТабПрямыеДоли, СтрокаПрамаяДоля, ТекущаяПоследовательность);
	КонецЦикла;	
		
	ШаблонПоследовательностей = ПолучитьШаблонПоследовательности();
	
	ПоследовательностиУчастия = Новый Соответствие;
	
	СкорректироватьСобственныеДоли(ТабПрямыеДоли);	
	
	Кольца = Новый Массив;
	
	ДобавитьПоследовательностиОтОбъектовИнвестирования(ТабПрямыеДоли, КонечныеОбъектыИнвестирования, ПоследовательностиУчастия, Кольца, ШаблонПоследовательностей);	
	ДобавитьПоследовательностиСКольцами(ТабПрямыеДоли, КонечныеОбъектыИнвестирования, ПоследовательностиУчастия, Кольца, ШаблонПоследовательностей);
		
	Возврат ПоследовательностиУчастия;
	
КонецФункции

Функция ТекстЗапроса_ИзмененияПоследовательностей() Экспорт

	Возврат 
	"ВЫБРАТЬ
	|	т.ОбъектИнвестирования КАК ОбъектИнвестирования,
	|	т.Период КАК Дата,
	|	т.ЭффективнаяДоля КАК ЭффективнаяДоля,
	|	т.ЭффективнаяДоля = 0 КАК ТребуетсяПредыдущееВыбытие
	|ПОМЕСТИТЬ втПоследниеСостояния
	|ИЗ
	|	РегистрСведений.СтатусыОбъектовИнвестирования.СрезПоследних(
	|			&Период,
	|			Сценарий = &Сценарий
	|				И Инвестор = &Инвестор
	|				И ОбъектИнвестирования.ИностранныйНалоговыйРезидент) КАК т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектИнвестирования,
	|	Дата,
	|	ТребуетсяПредыдущееВыбытие
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	т.ОбъектИнвестирования КАК ОбъектИнвестирования,
	|	т.Период КАК ДатаВыбытия
	|ПОМЕСТИТЬ втПоследниеВыбытия
	|ИЗ
	|	РегистрСведений.СтатусыОбъектовИнвестирования.СрезПоследних(
	|			&Период,
	|			Сценарий = &Сценарий
	|				И Инвестор = &Инвестор
	|				И ЭффективнаяДоля = 0) КАК т
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектИнвестирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	т.ОбъектИнвестирования КАК ОбъектИнвестирования,
	|	ЕСТЬNULL(МАКСИМУМ(ВЫБОР
	|				КОГДА т.ЭффективнаяДоля = 0
	|					ТОГДА т.Период
	|				ИНАЧЕ NULL
	|			КОНЕЦ), ДОБАВИТЬКДАТЕ(МИНИМУМ(т.Период), ДЕНЬ, -1)) КАК ДатаВыбытия
	|ПОМЕСТИТЬ втПредпоследниеВыбытия
	|ИЗ
	|	РегистрСведений.СтатусыОбъектовИнвестирования КАК т
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПоследниеСостояния КАК втПоследниеСостояния
	|		ПО (т.Инвестор = &Инвестор)
	|			И (т.Сценарий = &Сценарий)
	|			И т.ОбъектИнвестирования = втПоследниеСостояния.ОбъектИнвестирования
	|			И т.Период < втПоследниеСостояния.Дата
	|			И (втПоследниеСостояния.ТребуетсяПредыдущееВыбытие)
	|
	|СГРУППИРОВАТЬ ПО
	|	т.ОбъектИнвестирования
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектИнвестирования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПоследниеСостояния.ОбъектИнвестирования КАК ОбъектИнвестирования,
	|	ЕСТЬNULL(втПредпоследниеВыбытия.ДатаВыбытия, ЕСТЬNULL(втПоследниеВыбытия.ДатаВыбытия, ДАТАВРЕМЯ(1, 1, 1))) КАК ДатаНачала
	|ПОМЕСТИТЬ втДатыНачала
	|ИЗ
	|	втПоследниеСостояния КАК втПоследниеСостояния
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПредпоследниеВыбытия КАК втПредпоследниеВыбытия
	|		ПО втПоследниеСостояния.ОбъектИнвестирования = втПредпоследниеВыбытия.ОбъектИнвестирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПоследниеВыбытия КАК втПоследниеВыбытия
	|		ПО втПоследниеСостояния.ОбъектИнвестирования = втПоследниеВыбытия.ОбъектИнвестирования
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектИнвестирования,
	|	ДатаНачала
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыОбъектовИнвестирования.Период КАК Период,
	|	СтатусыОбъектовИнвестирования.Регистратор КАК Регистратор,
	|	СтатусыОбъектовИнвестирования.ОбъектИнвестирования КАК ОбъектИнвестирования,
	|	СтатусыОбъектовИнвестирования.ЭффективнаяДоля КАК ЭффективнаяДоля
	|ПОМЕСТИТЬ втИзмененияДолейВозможноВнутриДня
	|ИЗ
	|	РегистрСведений.СтатусыОбъектовИнвестирования КАК СтатусыОбъектовИнвестирования
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДатыНачала КАК втДатыНачала
	|		ПО (СтатусыОбъектовИнвестирования.Сценарий = &Сценарий)
	|			И (СтатусыОбъектовИнвестирования.Инвестор = &Инвестор)
	|			И СтатусыОбъектовИнвестирования.ОбъектИнвестирования = втДатыНачала.ОбъектИнвестирования
	|			И (СтатусыОбъектовИнвестирования.Период МЕЖДУ втДатыНачала.ДатаНачала И &Период)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Период,
	|	ОбъектИнвестирования,
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	т.Период КАК Период,
	|	т.ОбъектИнвестирования КАК ОбъектИнвестирования,
	|	ЕСТЬNULL(втИзмененияДолейВозможноВнутриДня.ЭффективнаяДоля, т.ЭффективнаяДоля) КАК ЭффективнаяДоля,
	|	т.ВозможноИзменениеПоследовательности КАК ВозможноИзменениеПоследовательности
	|ПОМЕСТИТЬ втИзмененияДолей
	|ИЗ
	|	(ВЫБРАТЬ
	|		т.Период КАК Период,
	|		т.ОбъектИнвестирования КАК ОбъектИнвестирования,
	|		МАКСИМУМ(т.ЭффективнаяДоля) КАК ЭффективнаяДоля,
	|		МАКСИМУМ(т.Регистратор) КАК Регистратор,
	|		МАКСИМУМ(т.Период) КАК ПериодКлюч,
	|		КОЛИЧЕСТВО(т.Регистратор) > 1 КАК ВозможноИзменениеПоследовательности
	|	ИЗ
	|		втИзмененияДолейВозможноВнутриДня КАК т
	|	
	|	СГРУППИРОВАТЬ ПО
	|		т.Период,
	|		т.ОбъектИнвестирования) КАК т
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИзмененияДолейВозможноВнутриДня КАК втИзмененияДолейВозможноВнутриДня
	|		ПО т.ОбъектИнвестирования = втИзмененияДолейВозможноВнутриДня.ОбъектИнвестирования
	|			И т.Регистратор = втИзмененияДолейВозможноВнутриДня.Регистратор
	|			И (т.ВозможноИзменениеПоследовательности)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектИнвестирования,
	|	Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИзмененияДолей.Период КАК Период,
	|	втИзмененияДолей.ОбъектИнвестирования КАК ОбъектИнвестирования,
	|	МАКСИМУМ(втИзмененияДолей.ЭффективнаяДоля) КАК ЭффективнаяДоля,
	|	МАКСИМУМ(втИзмененияДолейПредыдущее.Период) КАК ПериодПредыдущий
	|ПОМЕСТИТЬ втИзмененияДолейСПредыдущими
	|ИЗ
	|	втИзмененияДолей КАК втИзмененияДолей
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИзмененияДолей КАК втИзмененияДолейПредыдущее
	|		ПО втИзмененияДолей.ОбъектИнвестирования = втИзмененияДолейПредыдущее.ОбъектИнвестирования
	|			И втИзмененияДолей.Период > втИзмененияДолейПредыдущее.Период
	|
	|СГРУППИРОВАТЬ ПО
	|	втИзмененияДолей.ОбъектИнвестирования,
	|	втИзмененияДолей.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОбъектИнвестирования,
	|	ПериодПредыдущий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	т.ОбъектИнвестирования КАК ОбъектИнвестирования,
	|	т.Период КАК Период,
	|	ВЫБОР
	|		КОГДА ПредыдущаяОперация.ЭффективнаяДоля ЕСТЬ NULL
	|			ТОГДА ""Начало""
	|		КОГДА т.ЭффективнаяДоля = 0
	|				И ЕСТЬNULL(ПредыдущаяОперация.ЭффективнаяДоля, 0) > 0
	|			ТОГДА ""Прекращение""
	|		КОГДА т.ЭффективнаяДоля <> ЕСТЬNULL(ПредыдущаяОперация.ЭффективнаяДоля, 0)
	|			ТОГДА ""Изменение""
	|		ИНАЧЕ ""Последовательность""
	|	КОНЕЦ КАК Статус
	|ИЗ
	|	втИзмененияДолейСПредыдущими КАК т
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИзмененияДолей КАК ПредыдущаяОперация
	|		ПО т.ОбъектИнвестирования = ПредыдущаяОперация.ОбъектИнвестирования
	|			И т.ПериодПредыдущий = ПредыдущаяОперация.Период";

КонецФункции

Процедура СформироватьДвиженияПоследовательности(Движения, Реквизиты, ПоследовательностиУчастия, Отказ = Ложь) Экспорт
	
	Перем КэшОтношенийКГруппе;
	
	Инвестор = Реквизиты.Организация;
	ОбъектИнвестирования = Реквизиты.ОбъектИнвестирования;
	ТабПАО = ПолучитьПАО();

	Для каждого УзелИнвестор Из ПоследовательностиУчастия Цикл		
		Для каждого УзелОбъектИнвестирования Из УзелИнвестор.Значение Цикл
			
			ЭффективнаяДоля = 0;
			ПрямаяДоля = 0;
			ТолькоПАО = Истина;
			ЕстьСтрокаИзменение = Ложь;
			
			Для каждого УзелПоследовательность Из УзелОбъектИнвестирования.Значение Цикл
				
				НомерПоследовательностиУчастия = УзелПоследовательность.Значение.НомерПоследовательности;
								
				ОбработатьПолноеВыбытие(УзелПоследовательность);

				ОбработатьПАО(УзелПоследовательность, Инвестор, ТабПАО, ТолькоПАО);
				
				//ДобавитьДвиженияПоследовательности(Движения, УзелИнвестор, УзелОбъектИнвестирования, УзелПоследовательность, Реквизиты, НомерПоследовательностиУчастия);
				ЭффективнаяДоля = ЭффективнаяДоля + ПолучитьЭффективнуюДолюПоследовательности(УзелПоследовательность.Значение.Последовательность);
				
				Если УзелПоследовательность.Значение.Последовательность.Количество() = 1 Тогда
					ПрямаяДоля = ЭффективнаяДоля;
					ТолькоПАО = Ложь;
				КонецЕсли;
								
				Если УзелПоследовательность.Значение.ЕстьСтрокаИзменение = Истина Тогда
					ЕстьСтрокаИзменение = Истина;
				КонецЕсли;
			
			КонецЦикла; // УзелПоследовательность
						
			Если Не ЕстьСтрокаИзменение Тогда
				Продолжить;// не пишем рс.Статусы если среди последовательностей не используется прямая доля документа
			КонецЕсли;
			
			Движение = Движения.СтатусыОбъектовИнвестирования.Добавить();			
			
			Движение.Период 					= Реквизиты.Период;
			Движение.Сценарий 					= Реквизиты.Сценарий;
			Движение.Инвестор 					= УзелИнвестор.Ключ;
			Движение.ОбъектИнвестирования 		= УзелОбъектИнвестирования.Ключ;						
			Движение.ЭффективнаяДоля			= Мин(ЭффективнаяДоля, 100); //комментарии ФНС
			Движение.ЦепочкаПАО					= ТолькоПАО;			
			Движение.ПоследовательностиУчастия  = Новый ХранилищеЗначения(УзелОбъектИнвестирования.Значение);
			
			Если (Инвестор = УзелИнвестор.Ключ) И (ОбъектИнвестирования = УзелОбъектИнвестирования.Ключ) Тогда
				
				Движение.ОтношениеКГруппе = Реквизиты.ОтношениеКГруппе;
				
			Иначе	
				
				Движение.ОтношениеКГруппе = РегламентыКлиентСервер.ПолучитьОтношениеКГруппеПоДоле(
														Движение.ЭффективнаяДоля, КэшОтношенийКГруппе);
														
			КонецЕсли;
			
		КонецЦикла;
	КонецЦикла;
		
КонецПроцедуры

Процедура ОбработатьПАО(УзелПоследовательность, Инвестор, ТабПАО, ТолькоПАО)
	
	Если Не ТолькоПАО Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого Стр Из УзелПоследовательность.Значение.Последовательность Цикл
		Если Стр.ИнвесторПоследовательности <> Инвестор Тогда
			
			Если ТабПАО.Найти(Стр.ИнвесторПоследовательности, "Организация") = Неопределено Тогда
				ТолькоПАО = Ложь;
				Прервать;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ОбработатьПолноеВыбытие(УзелПоследовательность)
	
	Если Не ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		УзелПоследовательность.Значение, "ПолноеВыбытие", Ложь) Тогда
		Возврат;		
	КонецЕсли;

	//в последовательности есть полное выбытие - 
	//эффективную долю запишем, последовательность - нет
	УзелПоследовательность.Значение.Последовательность.Очистить();
	
КонецПроцедуры

Процедура ДобавитьДвиженияПоследовательности(Движения, УзелИнвестор, УзелОбъектИнвестирования, УзелПоследовательность, Реквизиты, НомерПоследовательностиУчастия)
	
	Для каждого ЭлементПоследовательности Из УзелПоследовательность.Значение.Последовательность Цикл
		
		Движение = Движения.ПоследовательностиУчастия.Добавить();
		
		Движение.Период 						= Реквизиты.Период;
		Движение.Сценарий 						= Реквизиты.Сценарий;
		Движение.Инвестор 						= УзелИнвестор.Ключ;
		Движение.ОбъектИнвестирования 			= УзелОбъектИнвестирования.Ключ;
		Движение.НомерПоследовательностиУчастия = НомерПоследовательностиУчастия;
		
		ЗаполнитьЗначенияСвойств(Движение, ЭлементПоследовательности);
		
	КонецЦикла;

КонецПроцедуры
	
Функция ПолучитьТаблицуОтображения(ТаблицаИнвестиции, ПредставлениеУзла = Неопределено, ПредставлениеСвязи = Неопределено, ЦветМоделирования = Неопределено) Экспорт
		
	ТаблицаОтображения = ШаблонТаблицыОтображения(); 
	
	ДополнитьТаблицуОтображенияРекурсивно(ТаблицаОтображения, ТаблицаИнвестиции, , Ложь, ПредставлениеУзла, ПредставлениеСвязи, ЦветМоделирования);
	ТаблицаОтображения.Сортировать("КоличествоИсточников Убыв");
	ТаблицаОтображения = ТаблицаОтображения.Скопировать();
	
	КоличествоВРяду = Цел(Sqrt(ТаблицаОтображения.Количество()));
	УровеньХ = 0;
	УровеньУ = 0;
	
	Для каждого СтрокаТаб Из ТаблицаОтображения Цикл
		
		Если КоличествоВРяду > УровеньХ Тогда
			УровеньХ = УровеньХ + 1;
		Иначе 
			УровеньХ = 0;
			УровеньУ = УровеньУ + 1;
		КонецЕсли;
		
		СтрокаТаб.УровеньХ = УровеньХ;
		СтрокаТаб.УровеньУ = УровеньУ;
		
	КонецЦикла;
	
	ДополнитьТаблицуОтображенияРекурсивно(ТаблицаОтображения, ТаблицаИнвестиции, , Истина, ПредставлениеУзла, ПредставлениеСвязи, ЦветМоделирования);
	
	Возврат ТаблицаОтображения;
	
КонецФункции

Функция ПолучитьТабУзловИзСвязей(ТаблицаСвязей) Экспорт

	ТабУзлов = Новый ТаблицаЗначений;
	ТабУзлов.Колонки.Добавить("Узел");	
	ТабУзлов.Колонки.Добавить("Источник", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,0));
	ТабУзлов.Колонки.Добавить("Приемник", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,0));
	ТабУзлов.Колонки.Добавить("Приемник2", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,0));//приемник для источника у которого есть приемники
	
	Для каждого СтрокаТаб Из ТаблицаСвязей Цикл
		
		НоваяСтрока = ТабУзлов.Добавить();
		НоваяСтрока.Узел = СтрокаТаб.Источник;
		НоваяСтрока.Источник = 1;
		
		НоваяСтрока = ТабУзлов.Добавить();
		НоваяСтрока.Узел = СтрокаТаб.Приемник;
		НоваяСтрока.Приемник = 1;
		НоваяСтрока.Приемник2 = ТаблицаСвязей.НайтиСтроки(Новый Структура("Источник", СтрокаТаб.Источник)).Количество();
		
	КонецЦикла;

	Возврат ТабУзлов;
	
КонецФункции

Функция ПолучитьНачальнуюТаблицуУзлов(ТабУзлов, ТаблицаСвязей,  ПредставлениеУзла, ЦветаОформления) Экспорт
	
	ТабУзлов.Колонки.Добавить("Приемник2", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,0)); // приемник для источника у которого есть приемники
	ТабУзлов.Колонки.Добавить("Представление");
	ТабУзлов.Колонки.Добавить("Оформление");
	
	КэшСтран = Неопределено;
	
	Для каждого ТекущийУзел Из ТабУзлов Цикл
		
		ТекущийУзел.Приемник2 = ТаблицаСвязей.НайтиСтроки(Новый Структура("Источник", ТекущийУзел.Узел)).Количество();
		ТекущийУзел.Представление = РасчетДолейВладения.ПолучитьПредставление(ТекущийУзел, ПредставлениеУзла, Ложь);
		
		ОформлениеЦветФона = Неопределено;
		ОформлениеКартинка = Неопределено;
		
		Если ТекущийУзел.ИностранныйНалоговыйРезидент Тогда
			
			ЦветаОформления.Свойство("ЦветИО", ОформлениеЦветФона);
			Если ТекущийУзел.ИностраннаяСтруктураБезОбразованияЮрЛица Тогда
				ЦветаОформления.Свойство("ЦветИС", ОформлениеЦветФона);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекущийУзел.СтранаРегистрации) Тогда
				ОформлениеКартинка = РегистрыСведений.ГеографическиеПризнакиНалоговогоОсвобожденияКИК.ПолучитьФлагСтраны(ТекущийУзел.КодСтраны, КэшСтран);
			Иначе 
				ОформлениеКартинка = БиблиотекаКартинок.Инвесторы;
			КонецЕсли;
			
		Иначе 
						
			Если ИнвестицииКлиентСервер.ЯвляетсяПАО(ТекущийУзел.Узел, ТекущийУзел.КодОКОПФ) Тогда
				ЦветаОформления.Свойство("ЦветПАО", ОформлениеЦветФона)
			КонецЕсли;
			
			Если ТекущийУзел.ИспользоватьВРегламентированномУчете Тогда
				
				Если ТекущийУзел.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
					ОформлениеКартинка = БиблиотекаКартинок.Пользователь;
				Иначе
					ОформлениеКартинка = БиблиотекаКартинок.Организация;
				КонецЕсли;
				
			Иначе // ЦФО или консолидирующая	
				ОформлениеКартинка = БиблиотекаКартинок.ОтчетПоОрганизациям;
			КонецЕсли;
			
		КонецЕсли;
				
		ТекущийУзел.Оформление = Новый Структура("ЦветФона,Картинка", ОформлениеЦветФона, ОформлениеКартинка);
		
	КонецЦикла;	
		
	ТабУзлов.Колонки.Добавить("Строка", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,0));
	ТабУзлов.Колонки.Добавить("Колонка", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,0));
		
	ТабУзлов.Сортировать("Источник Убыв, Приемник Возр");
		
	ТабУзлов.Колонки.Добавить("ВерхСтроки");
		
	ТабУзлов.Индексы.Добавить("Узел");
	ТабУзлов.Индексы.Добавить("Колонка");
		
	Возврат ТабУзлов;

КонецФункции

Функция ПолучитьТаблицуПрямыеДоли(Сценарий, ДатаАктуальности, Моделирование = Ложь, Инвесторы = Неопределено) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДвижениеИнвестицийОбороты.Сценарий КАК Сценарий,
	|	ДвижениеИнвестицийОбороты.ОбъектИнвестирования КАК ОбъектИнвестирования,
	|	ДвижениеИнвестицийОбороты.Инвестор КАК Инвестор,
	|	ДвижениеИнвестицийОбороты.ПрямаяДоляВладенияОборот КАК ПрямаяДоля,
	|	ДвижениеИнвестицийОбороты.ОбъектИнвестирования.ИностраннаяОрганизация КАК ОбъектИнвестированияИностраннаяОрганизация,
	|	ДвижениеИнвестицийОбороты.Инвестор.ИностраннаяОрганизация КАК ИнвесторИностраннаяОрганизация,
	|	ЛОЖЬ КАК Моделирование,
	|	ДвижениеИнвестицийОбороты.ИнвестицииОборот КАК Инвестиции
	|ПОМЕСТИТЬ тбГруппировка
	|ИЗ
	|	РегистрНакопления.ДвижениеИнвестиций.Обороты(
	|			,
	|			&ДатаАктуальности,
	|			Авто,
	|			Сценарий В (&Сценарий)
	|				И ВЫБОР
	|					КОГДА &ЕстьОтборИнвестор
	|						ТОГДА Инвестор В (&Инвесторы)
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) КАК ДвижениеИнвестицийОбороты
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МоделированиеДвиженийИнвестиций.Сценарий,
	|	МоделированиеДвиженийИнвестиций.ОбъектИнвестирования,
	|	МоделированиеДвиженийИнвестиций.Инвестор,
	|	МоделированиеДвиженийИнвестиций.ПрямаяДоляВладения,
	|	МоделированиеДвиженийИнвестиций.ОбъектИнвестирования.ИностранныйНалоговыйРезидент,
	|	МоделированиеДвиженийИнвестиций.Инвестор.ИностранныйНалоговыйРезидент,
	|	ИСТИНА,
	|	МоделированиеДвиженийИнвестиций.Инвестиции
	|ИЗ
	|	РегистрСведений.МоделированиеДвиженийИнвестиций КАК МоделированиеДвиженийИнвестиций
	|ГДЕ
	|	&Моделирование
	|	И МоделированиеДвиженийИнвестиций.Сценарий В(&Сценарий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тбГруппировка.Сценарий КАК Сценарий,
	|	тбГруппировка.ОбъектИнвестирования КАК ОбъектИнвестирования,
	|	тбГруппировка.Инвестор КАК Инвестор,
	|	СУММА(тбГруппировка.ПрямаяДоля) КАК ПрямаяДоля,
	|	тбГруппировка.ОбъектИнвестированияИностраннаяОрганизация КАК ОбъектИнвестированияИностраннаяОрганизация,
	|	тбГруппировка.ИнвесторИностраннаяОрганизация КАК ИнвесторИностраннаяОрганизация,
	|	МАКСИМУМ(тбГруппировка.Моделирование) КАК Моделирование,
	|	СУММА(тбГруппировка.Инвестиции) КАК Инвестиции
	|ИЗ
	|	тбГруппировка КАК тбГруппировка
	|
	|СГРУППИРОВАТЬ ПО
	|	тбГруппировка.Сценарий,
	|	тбГруппировка.ОбъектИнвестирования,
	|	тбГруппировка.Инвестор,
	|	тбГруппировка.ОбъектИнвестированияИностраннаяОрганизация,
	|	тбГруппировка.ИнвесторИностраннаяОрганизация");
		
	Запрос.УстановитьПараметр("Сценарий", 			Сценарий);	
	Запрос.УстановитьПараметр("ДатаАктуальности", 	ДатаАктуальности);
	Запрос.УстановитьПараметр("Моделирование", 		Моделирование);
	Запрос.УстановитьПараметр("ЕстьОтборИнвестор", 	Инвесторы <> Неопределено);
	Запрос.УстановитьПараметр("Инвесторы", 			Инвесторы);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьДанныеСтруктурыВладения(Сценарий, ДатаАктуальности, Моделирование = Ложь, ЭффективныеДоли = Ложь) Экспорт

	ДопКолонки = Новый Структура("ПрямыеДоли,Статусы,Узлы");
	
	ТекстЗапроса = ?(ЭффективныеДоли, ТекстЗапросаЭффективныеДоли(), ТекстЗапросаПрямыеДоли());
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляПрямыеДоли КАК ПоляПрямыеДоли", ПолучитьТекстКолонок(ДопКолонки.ПрямыеДоли));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляСтатусы КАК ПоляСтатусы", ПолучитьТекстКолонок(ДопКолонки.Статусы));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ПоляУзлы КАК ПоляУзлы", ПолучитьТекстКолонок(ДопКолонки.Узлы));
	
	Запрос = Новый Запрос(ТекстЗапроса);
			
	Запрос.УстановитьПараметр("Сценарий", 			Сценарий);	
	Запрос.УстановитьПараметр("ДатаАктуальности", 	ДатаАктуальности);
	Запрос.УстановитьПараметр("Моделирование", 		Моделирование);
	
	Пакет = Запрос.ВыполнитьПакет();
	                                                      
	Возврат Новый Структура("Связи, Узлы", Пакет[1 + ?(ЭффективныеДоли, 0, 1)].Выгрузить(), Пакет[2 + ?(ЭффективныеДоли, 0, 1)].Выгрузить());
	
КонецФункции

Функция ПоследовательностьАктуальна(Период, ТекстОшибки = Неопределено) Экспорт
	Если Последовательности.ДокументыДвиженияИнвестиций.Проверить(Период) Тогда
		Возврат Истина;
	Иначе
		ГраницаПоследовательности = Последовательности.ДокументыДвиженияИнвестиций.ПолучитьГраницу();
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Последовательность документов поступления и выбытия инвестиций актуальная на дату: %1. Необходимо восстановить последовательность'"), Формат(ГраницаПоследовательности.Дата, "ДФ=dd.MM.yyyy"));
		Возврат Ложь;
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область ПолучитьЭффективныеДолиВладения

Функция ПолучитьИнвесторовСИзменениями(ТабПрямыеДоли)
	
	ИнвесторыИзмененные = Новый Соответствие;
	Для каждого СтрокаДоля Из ТабПрямыеДоли Цикл
		Если СтрокаДоля.СтрокаИзменение Тогда
			ИнвесторыИзмененные.Вставить(СтрокаДоля.Инвестор, Истина);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИнвесторыИзмененные; 

КонецФункции

Процедура ЗаполнитьОбъектыИнвестирования(КонечныеОбъектыИнвестирования, ТабПрямыеДоли, СтрокаПрамаяДоля, ТекущаяПоследовательность)
				
	Если ТекущаяПоследовательность.Найти(СтрокаПрамаяДоля.ОбъектИнвестирования) <> Неопределено Тогда //это кольцо		
		КонечныеОбъектыИнвестирования.Вставить(СтрокаПрамаяДоля.ОбъектИнвестирования, Истина);
		Возврат;
	КонецЕсли;
	
	ТекущаяПоследовательность.Добавить(СтрокаПрамаяДоля.ОбъектИнвестирования);	
	СтрокиИнвестора = ТабПрямыеДоли.НайтиСтроки(Новый Структура("Инвестор", СтрокаПрамаяДоля.ОбъектИнвестирования));
	
	Если СтрокиИнвестора.Количество() Тогда
				
		Для каждого СтрокаИнвестора Из СтрокиИнвестора Цикл			
			ЗаполнитьОбъектыИнвестирования(КонечныеОбъектыИнвестирования, ТабПрямыеДоли, СтрокаИнвестора, ТекущаяПоследовательность);		
		КонецЦикла;
		
	КонецЕсли;
	
	КонечныеОбъектыИнвестирования.Вставить(СтрокаПрамаяДоля.ОбъектИнвестирования, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПоИнвесторуРекурсивно(ПоследовательностиУчастия, ТабПрямыеДоли, СтрокаИсточник, Знач ТекущаяПоследовательность, Кольца)
	
	СтрокиИнвестора = ТабПрямыеДоли.НайтиСтроки(Новый Структура("ОбъектИнвестирования", СтрокаИсточник.ИнвесторПоследовательности));
	
	Для каждого СтрокаИнвестор Из СтрокиИнвестора Цикл
		
		Если СтрокаИсточник.ИнвесторПоследовательности = СтрокаИнвестор.Инвестор Тогда
			Продолжить; // не учитываем последовательности с собственным владением (последовательности вида "А->В->В->С")
		КонецЕсли;
		
		НоваяПоследовательность = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ТекущаяПоследовательность);
		
		СтрокаНачалоКольца = НоваяПоследовательность.Последовательность.Найти(СтрокаИнвестор.Инвестор, "ОбъектИнвестированияПоследовательности");
						
		Если СтрокаНачалоКольца <> Неопределено Тогда
			
			ДобавитьКольцоВладения(Кольца, НоваяПоследовательность.Последовательность, СтрокаИнвестор);			
			Продолжить;
									
		КонецЕсли;
		
		Если НоваяПоследовательность.Последовательность.Количество() Тогда
			
			Если СтрокаИнвестор.СтрокаИзменение Тогда
				
				ПоследовательностьОтИнвестора = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ТекущаяПоследовательность);
				
				ПоследовательностьОтИнвестора.ОбъектИнвестирования = СтрокаИнвестор.ОбъектИнвестирования;
				ПоследовательностьОтИнвестора.Последовательность = ПоследовательностьОтИнвестора.Последовательность.СкопироватьКолонки();//Очистить() нельзя применять, т.к. есть ссылки на таблицу
				
				НоваяСтрока = ДобавитьПоследовательность(ПоследовательностиУчастия, СтрокаИсточник, ПоследовательностьОтИнвестора, СтрокаИнвестор, Истина);
				СтрокаИнвестор.СтрокаИзменение = Ложь;
				
				ЗаполнитьПоИнвесторуРекурсивно(ПоследовательностиУчастия, ТабПрямыеДоли, НоваяСтрока, ПоследовательностьОтИнвестора, Кольца);
				
			КонецЕсли;			
			
		КонецЕсли;
		
		//НоваяПоследовательность: Строка(СтрокаИнвестор.Инвестор) + ПредставлениеПоследовательности(НоваяПоследовательность, "ОбъектИнвестированияПоследовательности")
		НоваяСтрока = ДобавитьПоследовательность(ПоследовательностиУчастия, СтрокаИсточник, НоваяПоследовательность, СтрокаИнвестор);
		
		ЗаполнитьПоИнвесторуРекурсивно(ПоследовательностиУчастия, ТабПрямыеДоли, НоваяСтрока, НоваяПоследовательность, Кольца);
		
	КонецЦикла;

КонецПроцедуры

Функция ДобавитьПоследовательность(ПоследовательностиУчастия, СтрокаИсточник, НоваяПоследовательность, СтрокаИнвестор, СтрокаИзменение = Ложь)
				
	СтрокаПоследовательности = НоваяПоследовательность.Последовательность.Добавить();
	
	ЗаполнитьЗначенияСвойств(СтрокаПоследовательности, СтрокаИнвестор);//заполнить моделирование, если есть
	
	СтрокаПоследовательности.ИнвесторПоследовательности 			= СтрокаИнвестор.Инвестор;
	СтрокаПоследовательности.ОбъектИнвестированияПоследовательности	= СтрокаИнвестор.ОбъектИнвестирования;
	СтрокаПоследовательности.ПрямаяДоля								= СтрокаИнвестор.ПрямаяДоля;
	
	Если СтрокаИнвестор.ПрямаяДоля = 0 Тогда
		НоваяПоследовательность.Вставить("ПолноеВыбытие", Истина);
	КонецЕсли;
	
	ПересчитатьДолиОтИнвестора(НоваяПоследовательность.Последовательность);
	
	ОбъектИнвестирования = ?(СтрокаИзменение, СтрокаИнвестор.ОбъектИнвестирования, СтрокаИсточник.ОбъектИнвестированияПоследовательности);
	Если СтрокаИнвестор.Инвестор <> ОбъектИнвестирования Тогда
				
		НоваяПоследовательность.Вставить("Инвестор", 				СтрокаИнвестор.Инвестор);
		
		ДобавитьПоследовательностьВСоответствие(ПоследовательностиУчастия, НоваяПоследовательность);
				
	КонецЕсли;	
		
	Если СтрокаИнвестор.СтрокаИзменение Тогда	
		НоваяПоследовательность.Вставить("ЕстьСтрокаИзменение", Истина);	
	КонецЕсли;
	
	Возврат СтрокаПоследовательности; 

КонецФункции

Процедура ДобавитьПоследовательностьВСоответствие(ПоследовательностиУчастия, НоваяПоследовательность)

	УзелИнвестор = ПоследовательностиУчастия.Получить(НоваяПоследовательность.Инвестор);
	
	Если УзелИнвестор = Неопределено Тогда
		
		УзелИнвестор = Новый Соответствие;		
		УзелОбъектИнвестирования = Новый Соответствие;
					
	КонецЕсли;

	УзелОбъектИнвестирования = УзелИнвестор.Получить(НоваяПоследовательность.ОбъектИнвестирования);
	Если УзелОбъектИнвестирования = Неопределено Тогда		
		УзелОбъектИнвестирования = Новый Соответствие;				
	КонецЕсли;
	
	ПредставлениеПоследовательности = ПредставлениеПоследовательности(НоваяПоследовательность.Последовательность, "ОбъектИнвестированияПоследовательности", "ИнвесторПоследовательности");
	
	Если УзелОбъектИнвестирования.Получить(ПредставлениеПоследовательности) <> Неопределено Тогда
		Возврат;// последовательность уже введена
	КонецЕсли;
	
	НоваяПоследовательность.Вставить("НомерПоследовательности", УзелОбъектИнвестирования.Количество() + 1);	
	
	УзелОбъектИнвестирования.Вставить(ПредставлениеПоследовательности, НоваяПоследовательность);	
	УзелИнвестор.Вставить(НоваяПоследовательность.ОбъектИнвестирования, УзелОбъектИнвестирования);
	ПоследовательностиУчастия.Вставить(НоваяПоследовательность.Инвестор, УзелИнвестор);
			
КонецПроцедуры

Процедура ДобавитьПоследовательностиОтОбъектовИнвестирования(ТабПрямыеДоли, ОбъектыИнвестирования, ПоследовательностиУчастия, Кольца, ШаблонПоследовательностей)
	
	ИнвесторыИзмененные = ПолучитьИнвесторовСИзменениями(ТабПрямыеДоли);
	
	Для каждого ЭлементОИ Из ОбъектыИнвестирования Цикл
		
		ОбъектИнвестирования = ЭлементОИ.Ключ;
		
		ШаблонСтроки = Новый Структура("ИнвесторПоследовательности, ОбъектИнвестированияПоследовательности, Номер, ЭффективнаяДоля", ОбъектИнвестирования, ОбъектИнвестирования, 0, 100);
		ШаблонПоследовательностей.ОбъектИнвестирования = ОбъектИнвестирования;
		
		ЗаполнитьПоИнвесторуРекурсивно(ПоследовательностиУчастия, ТабПрямыеДоли, ШаблонСтроки, ШаблонПоследовательностей, Кольца);
		
	КонецЦикла;
	
	КлючиИзмененных = Новый Соответствие;
	Для каждого Кольцо Из Кольца Цикл
		
		Если КлючиИзмененных.Получить(Кольцо.Ключ) <> Неопределено Тогда
			Кольцо.Вставить("Изменение", Истина);	
			Продолжить;
		КонецЕсли;
		
		ЕстьИзменениеВКольце = Ложь;
		Для каждого УзелКольца Из Кольцо.Кольцо Цикл
			Если ИнвесторыИзмененные.Получить(УзелКольца) <> Неопределено Тогда
				ЕстьИзменениеВКольце = Истина;
				КлючиИзмененных.Вставить(Кольцо.Ключ, Истина);
				Прервать;
			КонецЕсли;			
		КонецЦикла;
		
		Кольцо.Вставить("Изменение", ЕстьИзменениеВКольце);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКольцоВладения(Кольца, НоваяПоследовательность, СтрокаИнвестор)
	
	КонецКольца = НоваяПоследовательность.Количество()-1;

	НовоеКольцо = Новый Массив;	
	КоэффициентКольца = 1;
	
	Для ИндексПоследовательности = 0 По КонецКольца Цикл
		
		ЭлементПоследовательности = НоваяПоследовательность.Получить(ИндексПоследовательности);
		КоэффициентКольца = КоэффициентКольца * ЭлементПоследовательности.ПрямаяДоля / 100;
		НовоеКольцо.Добавить(ЭлементПоследовательности.ИнвесторПоследовательности);
		Если СтрокаИнвестор.Инвестор = ЭлементПоследовательности.ОбъектИнвестированияПоследовательности Тогда
			
			//последовательность(А-В,В-С), СтрокаИнвестор(С-А) тогда: Кольцо(А-В-С)
			КоэффициентКольца = КоэффициентКольца * СтрокаИнвестор.ПрямаяДоля / 100;
			НовоеКольцо.Добавить(СтрокаИнвестор.Инвестор);
			Прервать;
			
		ИначеЕсли СтрокаИнвестор.Инвестор = ЭлементПоследовательности.ИнвесторПоследовательности Тогда
			
			//последовательность(А-В,В-С), СтрокаИнвестор(В-А) тогда: Кольцо(А-В)
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЧислоЭлементов = НовоеКольцо.Количество();
	
	Для каждого Кольцо Из Кольца Цикл
		
		Если ЧислоЭлементов <> Кольцо.ЧислоЭлементов Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщегоНазначения.КоллекцииИдентичны(НовоеКольцо, Кольцо.Кольцо, , , Истина) Тогда
			НовоеКольцо = Неопределено;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;

	Если НовоеКольцо = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Ключ = ПредставлениеПоследовательностиТаб(НовоеКольцо);
	Кольца.Добавить(Новый Структура("Коэффициент, Кольцо, ЧислоЭлементов, Ключ", КоэффициентКольца, НовоеКольцо, ЧислоЭлементов, Ключ));
	
	// Для кольца АБВ добавим также кольца БВА,ВАБ	
	Для ИндексКольца = 1 По ЧислоЭлементов - 1 Цикл
		
		ТекущееКольцо = Новый Массив;
		
		Для ИндексТекущегоКольца = ИндексКольца По ЧислоЭлементов - 1 Цикл
			ТекущееКольцо.Добавить(НовоеКольцо.Получить(ИндексТекущегоКольца));
		КонецЦикла;
		
		Для ИндексТекущегоКольца = 0 По ИндексКольца - 1 Цикл
			ТекущееКольцо.Добавить(НовоеКольцо.Получить(ИндексТекущегоКольца));
		КонецЦикла;
				
		Кольца.Добавить(Новый Структура("Коэффициент, Кольцо, ЧислоЭлементов, Ключ", КоэффициентКольца, ТекущееКольцо, ЧислоЭлементов, Ключ));
		
	КонецЦикла;
		
КонецПроцедуры

Функция СкорректироватьСобственныеДоли(ТабПрямыеДоли)

	СобственныеВладения = Новый Соответствие;
	
	Для каждого СтрокаТаб Из ТабПрямыеДоли Цикл		
		Если СтрокаТаб.Инвестор = СтрокаТаб.ОбъектИнвестирования Тогда
			СобственныеВладения.Вставить(СтрокаТаб.Инвестор, СтрокаТаб.ПрямаяДоля);
		КонецЕсли;			
	КонецЦикла;
	
	Для каждого СтрокаТаб Из ТабПрямыеДоли Цикл
		
		Если СтрокаТаб.Инвестор = СтрокаТаб.ОбъектИнвестирования Тогда
			СтрокаТаб.ПрямаяДоля = 0;
			Продолжить;
		КонецЕсли;
		
		СобственнаяДоля = СобственныеВладения.Получить(СтрокаТаб.ОбъектИнвестирования);
		Если СобственнаяДоля = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СобственнаяДоля = 100 Тогда
			СтрокаТаб.ПрямаяДоля = 0;
		Иначе 
			СтрокаТаб.ПрямаяДоля = СтрокаТаб.ПрямаяДоля * 100 / (100 - СобственнаяДоля);
		КонецЕсли;		
	
	КонецЦикла;

КонецФункции

Процедура ПересчитатьДолиОтИнвестора(НоваяПоследовательность)
	
	ЧислоСтрок = НоваяПоследовательность.Количество();
	
	Если ЧислоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредыдущаяСтрока = НоваяПоследовательность.Получить(ЧислоСтрок-1);
	ПредыдущаяСтрока.ЭффективнаяДоля = ПредыдущаяСтрока.ПрямаяДоля;
	ПредыдущаяСтрока.Номер = 1;
		
	Если ЧислоСтрок > 1 Тогда
		
		Для ОбратныйНомер = 0 По ЧислоСтрок-2 Цикл
			
			ТекущаяСтрока = НоваяПоследовательность.Получить(ОбратныйНомер);
			ТекущаяСтрока.ЭффективнаяДоля = ПредыдущаяСтрока.ЭффективнаяДоля * ТекущаяСтрока.ПрямаяДоля / 100;
			ТекущаяСтрока.Номер = ПредыдущаяСтрока.Номер + 1;
			ПредыдущаяСтрока = ТекущаяСтрока;
			
		КонецЦикла;		
		
		НоваяПоследовательность.Сортировать("Номер Возр");
		
	КонецЕсли;
	
КонецПроцедуры

#Область ДобавлениеКолец

Процедура ДобавитьПоследовательностиСКольцами(ТабПрямыеДоли, ОбъектыИнвестирования, ПоследовательностиУчастия, Кольца, ШаблонПоследовательностей)
	
	Если Кольца.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ГлубинаВыводаКолец = 2;
	
	Для каждого УзелИнвестор Из ПоследовательностиУчастия Цикл
		Для каждого УзелОбъектИнвестирования Из УзелИнвестор.Значение Цикл
			
			НовыеПоследовательности = Новый Соответствие;
			
			Для каждого УзелПоследовательность Из УзелОбъектИнвестирования.Значение Цикл
				
				ИспользуемыеКольца = ПолучитьИспользуемыеКольца(УзелПоследовательность, Кольца);
				Если ИспользуемыеКольца.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				КоличествоИтераций = Pow(ГлубинаВыводаКолец + 1, ИспользуемыеКольца.Количество());
				
				//ИтераторКолец: Например, Массив(2,0,1) значит: кольцо 1 - повторить 2 раза, кольцо 2 - не повторять, кольцо 3 - повторить 1 раз
				ИтераторКолец = Новый Массив(ИспользуемыеКольца.Количество());
				ИтераторКолец[0] = 1;
				
				Для НомерИтерации = 1 По КоличествоИтераций Цикл					
					
					ОбновитьИтераторКолец(ИтераторКолец, НомерИтерации, ГлубинаВыводаКолец);				
					
					НоваяПоследовательность = ПолучитьНовуюПоследовательностьСКольцами(УзелПоследовательность, ИтераторКолец, ИспользуемыеКольца, ТабПрямыеДоли);
					Если НоваяПоследовательность = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ТекПредставление = ПредставлениеПоследовательности(НоваяПоследовательность.Последовательность, "ОбъектИнвестированияПоследовательности", "ИнвесторПоследовательности");
					НовыеПоследовательности.Вставить(ТекПредставление, НоваяПоследовательность);
					
				КонецЦикла;
								
			КонецЦикла; //Для каждого УзелПоследовательность Из УзелОбъектИнвестирования.Значение Цикл
			
			ДобавитьНовыеПоследовательности(УзелОбъектИнвестирования, НовыеПоследовательности);
					
		КонецЦикла;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьНовыеПоследовательности(УзелОбъектИнвестирования, НовыеПоследовательности)
	
	Для каждого НоваяПоследовательность Из НовыеПоследовательности Цикл
		
		Если УзелОбъектИнвестирования.Значение.Получить(НоваяПоследовательность.Ключ) <> Неопределено Тогда
			Продолжить;// последовательность уже введена
		КонецЕсли;
		
		НоваяПоследовательность.Значение.НомерПоследовательности = УзелОбъектИнвестирования.Значение.Количество() + 1;
		УзелОбъектИнвестирования.Значение.Вставить(НоваяПоследовательность.Ключ, НоваяПоследовательность.Значение);
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьИспользуемыеКольца(УзелПоследовательность, Кольца)
	
	ИспользуемыеКольца = Новый Соответствие;
	
	Для каждого ТекКольцо Из Кольца Цикл	
		Если УзелПоследовательность.Значение.Последовательность.Найти(ТекКольцо.Кольцо[0], "ИнвесторПоследовательности") <> Неопределено Тогда
			//свернем кольца по представлению, чтобы исключить дублирование
			ИспользуемыеКольца.Вставить(ТекКольцо.Ключ, ТекКольцо);
		КонецЕсли;	
	КонецЦикла;
	
	Результат = Новый СписокЗначений;
	Для каждого ТекКольцо Из ИспользуемыеКольца Цикл
		Результат.Добавить(ТекКольцо.Значение.Кольцо, , ТекКольцо.Значение.Изменение);
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция ПолучитьНовуюПоследовательностьСКольцами(УзелПоследовательность, ИтераторКолец, ИспользуемыеКольца, ТабПрямыеДоли)
	
	ТочностьДоли = 0.0001;//последовательность с кольцами не учитывается, если эффективная доля меньше точности
	
	НоваяПоследовательность = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(УзелПоследовательность.Значение);
	
	КоличествоКолец = ИспользуемыеКольца.Количество();
	
	Для ИндексКольца = 0 По КоличествоКолец-1 Цикл // вставляем каждое кольцо
		
		ЭлементИтератора = ИтераторКолец.Получить(ИндексКольца);
		
		Если Не ЗначениеЗаполнено(ЭлементИтератора) Тогда
			Продолжить;// кольцо в данной новой последовательности не используется
		КонецЕсли;
		
		КольцоИсточник = ИспользуемыеКольца.Получить(ИндексКольца);
		Если КольцоИсточник = Неопределено Тогда
			Продолжить; //Кольцо не найдено среди используемых по индексу
		КонецЕсли;
		
		Если КольцоИсточник.Пометка Тогда
			НоваяПоследовательность.ЕстьСтрокаИзменение = Истина;
		КонецЕсли;
		УзлыКольца = КольцоИсточник.Значение;
		
		ПредСтрокаПоследовательности = НоваяПоследовательность.Последовательность.Найти(УзлыКольца[0], "ИнвесторПоследовательности");
		Если ПредСтрокаПоследовательности = Неопределено Тогда
			Продолжить; //инвестор из кольца не найден в последовательности
		КонецЕсли;
		
		ИндексДляВставкиКольца = НоваяПоследовательность.Последовательность.Индекс(ПредСтрокаПоследовательности);
		
		Для НомерПовтораКольца = 1 По ЭлементИтератора Цикл // повторяем кольцо
			ВставитьКольцоПовтораВПоследовательность(НоваяПоследовательность, УзлыКольца, ТабПрямыеДоли, ПредСтрокаПоследовательности, ИндексДляВставкиКольца);	
		КонецЦикла;
				
	КонецЦикла;
	
	//если одно из колец повторяется 2 раза значит можно не выводить по ТочностьДоли, 
	ПроверитьТочность = ОбщегоНазначенияКлиентСерверУХ.МаксимумВМассиве(ИтераторКолец)>1;
	ИспользоватьПоследовательность = Истина;
	ПересчитатьЭффективныеДоли(НоваяПоследовательность, ТочностьДоли, ИспользоватьПоследовательность, ПроверитьТочность);
	Если ИспользоватьПоследовательность Тогда
		Возврат НоваяПоследовательность;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;

КонецФункции

Процедура ПересчитатьЭффективныеДоли(НоваяПоследовательность, ТочностьДоли = 0, ИспользоватьПоследовательность = Истина, ПроверитьТочность = Ложь)
	
	Для ИндексПоследовательности = 0 По НоваяПоследовательность.Последовательность.Количество()-1 Цикл
		
		ТекСтрока = НоваяПоследовательность.Последовательность[ИндексПоследовательности];
		
		Если ИндексПоследовательности = 0 Тогда
			ТекСтрока.ЭффективнаяДоля = ТекСтрока.ПрямаяДоля;
		Иначе	
		  	ТекСтрока.ЭффективнаяДоля = НоваяПоследовательность.Последовательность[ИндексПоследовательности - 1].ЭффективнаяДоля * ТекСтрока.ПрямаяДоля / 100;
		КонецЕсли;
		
		Если ПроверитьТочность И (ТекСтрока.ЭффективнаяДоля < ТочностьДоли) Тогда
			ИспользоватьПоследовательность = Ложь;
			Возврат;
		КонецЕсли;
		
		ТекСтрока.Номер = ИндексПоследовательности + 1;
				
	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьИтераторКолец(ИтераторКолец, ТекПозиция, ГлубинаВыводаКолец)
	
	ОснованиеСистемыСчисления = ГлубинаВыводаКолец + 1;
	
	ТекОстаток = ТекПозиция;
	Для ИндексПозиции = 0 По ИтераторКолец.Количество()-1 Цикл	
		
		НовОстаток = Цел(ТекОстаток / ОснованиеСистемыСчисления);
		ИтераторКолец[ИндексПозиции] = ТекОстаток - НовОстаток * ОснованиеСистемыСчисления;
		ТекОстаток = НовОстаток;
	
	КонецЦикла; 

КонецПроцедуры

Процедура ВставитьКольцоПовтораВПоследовательность(НоваяПоследовательность, КольцоИсточник, ТабПрямыеДоли, ПредСтрокаПоследовательности, ИндексДляВставкиКольца)
	
	ПредИнвесторПоследовательности = ПредСтрокаПоследовательности.ИнвесторПоследовательности;
	
	Для ОбратныйИндексКольца = 1 По КольцоИсточник.Количество() Цикл
		
		ИндексУзлаКольца = КольцоИсточник.Количество() - ОбратныйИндексКольца;
		
		НоваяСтрокаПоследовательности = НоваяПоследовательность.Последовательность.Вставить(ИндексДляВставкиКольца);
		НоваяСтрокаПоследовательности.ОбъектИнвестированияПоследовательности = ПредИнвесторПоследовательности;
		НоваяСтрокаПоследовательности.ИнвесторПоследовательности = КольцоИсточник.Получить(ИндексУзлаКольца);
		
		СтрокиПрямаяДоля = ТабПрямыеДоли.НайтиСтроки(Новый Структура("Инвестор,ОбъектИнвестирования", НоваяСтрокаПоследовательности.ИнвесторПоследовательности, НоваяСтрокаПоследовательности.ОбъектИнвестированияПоследовательности));
		НоваяСтрокаПоследовательности.ПрямаяДоля = СтрокиПрямаяДоля[0].ПрямаяДоля;
		
		ПредИнвесторПоследовательности = НоваяСтрокаПоследовательности.ИнвесторПоследовательности;
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Представления

Функция ПредставлениеПоследовательностиТаб(Последовательность, РеквизитПредставления = Неопределено, РеквизитНачала = Неопределено) Экспорт

	Если Последовательность.Количество() = 0 Тогда
		Возврат ""; 
	КонецЕсли;
	
	Представление = "";
	ПредставлениеНачало = ?(РеквизитНачала = Неопределено, "", Строка(Последовательность[0][РеквизитНачала]));
	
	Для каждого ЭлементЦепочки Из Последовательность Цикл
		Представление = ?(Представление = "", ПредставлениеНачало + " -> ", Представление + " -> ") 
			+ ?(РеквизитПредставления = Неопределено, ЭлементЦепочки, ЭлементЦепочки[РеквизитПредставления]);
	КонецЦикла;
	
	Возврат Представление;

КонецФункции

Функция ПредставлениеПоследовательности(Последовательность, РеквизитПредставления = Неопределено, РеквизитНачала = Неопределено) Экспорт

	Если Последовательность.Количество() = 0 Тогда
		Возврат ""; 
	КонецЕсли;
		
	Если ТипЗнч(Последовательность) = Тип("ТаблицаЗначений") Тогда		
		Возврат ЗначениеВСтрокуВнутр(Последовательность.Скопировать(, РеквизитНачала + ", " + РеквизитПредставления));		
	Иначе 
		Возврат Строка(Последовательность[0]) + " -> " + СтрСоединить(Последовательность, " -> ");	
	КонецЕсли;

КонецФункции

Функция ПолучитьШаблонПоследовательности()

	ШаблонПоследовательности = Новый Структура;
	
	Последовательность = Новый ТаблицаЗначений;
	
	Последовательность.Колонки.Добавить("ИнвесторПоследовательности");
	Последовательность.Колонки.Добавить("ОбъектИнвестированияПоследовательности");
	Последовательность.Колонки.Добавить("Номер");
	Последовательность.Колонки.Добавить("ПрямаяДоля");
	Последовательность.Колонки.Добавить("ЭффективнаяДоля");
	Последовательность.Колонки.Добавить("Моделирование");
	
	ШаблонПоследовательности.Вставить("Последовательность", 		Последовательность);
	ШаблонПоследовательности.Вставить("Инвестор", 					Неопределено);
	ШаблонПоследовательности.Вставить("ОбъектИнвестирования", 		Неопределено);
	ШаблонПоследовательности.Вставить("НомерПоследовательности",	0);
	ШаблонПоследовательности.Вставить("Кольца",						Новый Массив);
	ШаблонПоследовательности.Вставить("ЕстьСтрокаИзменение",		Ложь);
	
	Возврат ШаблонПоследовательности;

КонецФункции

#КонецОбласти

#Область ТаблицаОтображенияГрафа

Функция ШаблонТаблицыОтображения()

	Таб = Новый ТаблицаЗначений;
	
	Таб.Колонки.Добавить("Узел");
	Таб.Колонки.Добавить("УзелПредставление");
	Таб.Колонки.Добавить("Источники", 				ОбщегоНазначенияУХ.ПолучитьОписаниеТиповТЗ());
	Таб.Колонки.Добавить("КоличествоИсточников", 	ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5));
	Таб.Колонки.Добавить("ПризнакВидОтчета", 		ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	Таб.Колонки.Добавить("УровеньХ", 				ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5));
	Таб.Колонки.Добавить("УровеньУ", 				ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(5));

	Таб.Индексы.Добавить("Узел");
	
	Возврат Таб;

КонецФункции

Функция ШаблонТаблицыИсточники()

	ТаблицаИсточники = Новый ТаблицаЗначений;
	ТаблицаИсточники.Колонки.Добавить("Узел");
	ТаблицаИсточники.Колонки.Добавить("ПредставлениеСвязи");
	ТаблицаИсточники.Колонки.Добавить("Цвет");
	ТаблицаИсточники.Колонки.Добавить("Линия");
	ТаблицаИсточники.Колонки.Добавить("СтрокаИсточника");
	
	Возврат ТаблицаИсточники;
	
КонецФункции

Процедура ДобавитьСтрокуИсточник(СтрокаТаблицыОтображения, УзелИсточник, ПредставлениеСвязи, ЦветМоделирования)

	Если СтрокаТаблицыОтображения.Источники.Количество() = 0 Тогда			
		СтрокаТаблицыОтображения.Источники = ШаблонТаблицыИсточники();		
	КонецЕсли;
	
	СтрокаИсточник = СтрокаТаблицыОтображения.Владелец().Найти(УзелИсточник.Инвестор, "Узел");
	
	Если СтрокаИсточник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаб = СтрокаТаблицыОтображения.Источники.Добавить();
	
	СтрокаТаб.Узел					= Строка(УзелИсточник.Инвестор);
	СтрокаТаб.ПредставлениеСвязи	= ПолучитьПредставление(УзелИсточник, ПредставлениеСвязи);
	СтрокаТаб.СтрокаИсточника		= СтрокаИсточник;
	Если УзелИсточник.Моделирование Тогда
	    СтрокаТаб.Цвет = ЦветМоделирования;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнитьТаблицуОтображенияРекурсивно(ТаблицаОтображения, УзелДерева, Уровень = 0, ЗаполнитьСтрокиИсточники = Истина, ПредставлениеУзла, ПредставлениеСвязи, ЦветМоделирования)
	
	СписокИнвестиции = Новый СписокЗначений;
	СписокИнвестиции.ЗагрузитьЗначения(ПредставлениеУзла);
	ЭлементИнвестор = СписокИнвестиции.НайтиПоЗначению("Инвестор");
	Если ЭлементИнвестор <> Неопределено Тогда
		ЭлементИнвестор.Значение = "ОбъектИнвестирования";
	КонецЕсли;
	ПредставлениеУзлаИнвестиция = СписокИнвестиции.ВыгрузитьЗначения();
	
	Для каждого Узел Из УзелДерева Цикл
				
		Если Узел.ПрямаяДоля = 0 Или Не ЗначениеЗаполнено(Узел.Инвестор) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаПриемник = Неопределено;
		Если ЗначениеЗаполнено(Узел.ОбъектИнвестирования) Тогда			
			
			СтрокаПриемник = НайтиДобавитьСтрокуОтображения(ТаблицаОтображения, Узел.ОбъектИнвестирования);
			Если Не ЗначениеЗаполнено(СтрокаПриемник.УзелПредставление) Тогда
				СтрокаПриемник.УзелПредставление = ПолучитьПредставление(Узел, ПредставлениеУзлаИнвестиция);
			КонецЕсли;
			СтрокаПриемник.КоличествоИсточников = СтрокаПриемник.КоличествоИсточников + 1;
			
		КонецЕсли;
						
		Если ЗаполнитьСтрокиИсточники Тогда
			
			Если СтрокаПриемник <> Неопределено Тогда
				ДобавитьСтрокуИсточник(СтрокаПриемник, Узел, ПредставлениеСвязи, ЦветМоделирования);			
			КонецЕсли;			
			
		ИначеЕсли ЗначениеЗаполнено(Узел.Инвестор) Тогда
			
			СтрокаПриемник = НайтиДобавитьСтрокуОтображения(ТаблицаОтображения, Узел.Инвестор);
			Если Не ЗначениеЗаполнено(СтрокаПриемник.УзелПредставление) Тогда
				СтрокаПриемник.УзелПредставление = ПолучитьПредставление(Узел, ПредставлениеУзла);			
			КонецЕсли;			
			СтрокаПриемник.КоличествоИсточников = СтрокаПриемник.КоличествоИсточников + 1;
			
		КонецЕсли;		
			
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПредставление(УзелДерева, КолонкиПредставления, ЕстьДоли = Истина) Экспорт

	Результат = "";
	Для каждого Колонка Из КолонкиПредставления Цикл
		
		Мас = СтрРазделить(Колонка, "_");
		Если Мас.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущееЗначение = УзелДерева[Мас[0]];
		Для Рекв = 1 По Мас.ВГраница() Цикл
			Попытка
				ТекущееЗначение = ТекущееЗначение[Мас[Рекв]];		
			Исключение		
			КонецПопытки;			
		КонецЦикла;
		
		Результат = ?(Результат = "", "", Результат + ", ") + Формат(ТекущееЗначение, "ДФ=dd.MM.yyyy") + ?(ЕстьДоли И СтрНайти(Колонка, "Доля") > 0, "%", "");
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Функция НайтиДобавитьСтрокуОтображения(ТаблицаОтображения, ИсточникПоиска, ПредставлениеСтроки = Неопределено)
	
	СтрокаПриемник = ТаблицаОтображения.Найти(ИсточникПоиска, "Узел");
	Если СтрокаПриемник = Неопределено Тогда			
		
		СтрокаПриемник = ТаблицаОтображения.Добавить();		
		СтрокаПриемник.Узел = ИсточникПоиска;
				
	КонецЕсли;
	
	Возврат СтрокаПриемник;
	
КонецФункции

#КонецОбласти

#Область ДанныеСтруктурыВладения

Функция ПолучитьТекстКолонок(СтруктураОписанийКолонок = Неопределено)

	ТекстСвязи = "NULL";
	Если СтруктураОписанийКолонок = Неопределено Тогда
		Возврат ТекстСвязи;
	КонецЕсли;
	
	Для каждого ТекущееПоле Из СтруктураОписанийКолонок Цикл			
		ТекстСвязи = ?(ТекстСвязи = "NULL", "", ",") + ТекущееПоле.Значение + " КАК " + ТекущееПоле.Ключ;			
	КонецЦикла;
	
	Возврат ТекстСвязи;

КонецФункции

Функция ТекстЗапросаПрямыеДоли()

	Возврат
	"ВЫБРАТЬ
	|	ДвижениеИнвестицийОбороты.ОбъектИнвестирования КАК ОбъектИнвестирования,
	|	ДвижениеИнвестицийОбороты.Инвестор КАК Инвестор,
	|	ДвижениеИнвестицийОбороты.ПрямаяДоляВладенияОборот КАК ПрямаяДоля,
	|	ДвижениеИнвестицийОбороты.ИнвестицииОборот КАК Инвестиции,
	|	ДвижениеИнвестицийОбороты.БалансоваяСтоимостьОборот КАК БалансоваяСтоимость,
	|	ДвижениеИнвестицийОбороты.КоличествоОборот КАК Количество,
	|	ДвижениеИнвестицийОбороты.КоличествоПривилегированныхОборот КАК КоличествоПривилегированных,
	|	ДвижениеИнвестицийОбороты.КоличествоВДоверительномУправленииОборот КАК КоличествоВДоверительномУправлении,
	|	ДвижениеИнвестицийОбороты.КоличествоГолосующихОборот КАК КоличествоГолосующих,
	|	ЛОЖЬ КАК Моделирование,
	|	СтатусыОбъектовИнвестированияСрезПервых.Период КАК ДатаНачалаУчастия
	|ПОМЕСТИТЬ ДвиженияИнвестиций
	|ИЗ
	|	РегистрНакопления.ДвижениеИнвестиций.Обороты(
	|			,
	|			&ДатаАктуальности,
	|			Авто,
	|			Сценарий В (&Сценарий)
	|				И (ОбъектИнвестирования.ИспользоватьВРегламентированномУчете
	|					ИЛИ ОбъектИнвестирования.ИностранныйНалоговыйРезидент)) КАК ДвижениеИнвестицийОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыОбъектовИнвестирования.СрезПервых КАК СтатусыОбъектовИнвестированияСрезПервых
	|		ПО ДвижениеИнвестицийОбороты.Инвестор = СтатусыОбъектовИнвестированияСрезПервых.Инвестор
	|			И ДвижениеИнвестицийОбороты.ОбъектИнвестирования = СтатусыОбъектовИнвестированияСрезПервых.ОбъектИнвестирования
	|			И ДвижениеИнвестицийОбороты.Сценарий = СтатусыОбъектовИнвестированияСрезПервых.Сценарий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МоделированиеДвиженийИнвестиций.ОбъектИнвестирования,
	|	МоделированиеДвиженийИнвестиций.Инвестор,
	|	МоделированиеДвиженийИнвестиций.ПрямаяДоляВладения,
	|	МоделированиеДвиженийИнвестиций.Инвестиции,
	|	МоделированиеДвиженийИнвестиций.БалансоваяСтоимость,
	|	МоделированиеДвиженийИнвестиций.Количество,
	|	МоделированиеДвиженийИнвестиций.КоличествоПривилегированных,
	|	МоделированиеДвиженийИнвестиций.КоличествоВДоверительномУправлении,
	|	МоделированиеДвиженийИнвестиций.КоличествоГолосующих,
	|	ИСТИНА,
	|	МоделированиеДвиженийИнвестиций.Дата
	|ИЗ
	|	РегистрСведений.МоделированиеДвиженийИнвестиций КАК МоделированиеДвиженийИнвестиций
	|ГДЕ
	|	&Моделирование
	|	И МоделированиеДвиженийИнвестиций.Сценарий В(&Сценарий)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияИнвестиций.ОбъектИнвестирования КАК ОбъектИнвестирования,
	|	ДвиженияИнвестиций.Инвестор КАК Инвестор,
	|	СУММА(ДвиженияИнвестиций.ПрямаяДоля) КАК ПрямаяДоля,
	|	СУММА(ДвиженияИнвестиций.Инвестиции) КАК Инвестиции,
	|	СУММА(ДвиженияИнвестиций.БалансоваяСтоимость) КАК БалансоваяСтоимость,
	|	СУММА(ДвиженияИнвестиций.Количество) КАК Количество,
	|	СУММА(ДвиженияИнвестиций.КоличествоПривилегированных) КАК КоличествоПривилегированных,
	|	СУММА(ДвиженияИнвестиций.КоличествоВДоверительномУправлении) КАК КоличествоВДоверительномУправлении,
	|	ДвиженияИнвестиций.КоличествоГолосующих КАК КоличествоГолосующих,
	|	МАКСИМУМ(ДвиженияИнвестиций.Моделирование) КАК Моделирование,
	|	МИНИМУМ(ДвиженияИнвестиций.ДатаНачалаУчастия) КАК ДатаНачалаУчастия
	|ПОМЕСТИТЬ Связи
	|ИЗ
	|	ДвиженияИнвестиций КАК ДвиженияИнвестиций
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияИнвестиций.ОбъектИнвестирования,
	|	ДвиженияИнвестиций.Инвестор,
	|	ДвиженияИнвестиций.КоличествоГолосующих
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвижениеИнвестицийОбороты.ОбъектИнвестирования КАК ОбъектИнвестирования,
	|	ДвижениеИнвестицийОбороты.Инвестор КАК Инвестор,
	|	ДвижениеИнвестицийОбороты.ПрямаяДоля КАК ПрямаяДоля,
	|	ДвижениеИнвестицийОбороты.Инвестиции КАК Инвестиции,
	|	ДвижениеИнвестицийОбороты.БалансоваяСтоимость КАК БалансоваяСтоимость,
	|	ДвижениеИнвестицийОбороты.Количество КАК Количество,
	|	ДвижениеИнвестицийОбороты.КоличествоПривилегированных КАК КоличествоПривилегированных,
	|	ДвижениеИнвестицийОбороты.КоличествоВДоверительномУправлении КАК КоличествоВДоверительномУправлении,
	|	ДвижениеИнвестицийОбороты.КоличествоГолосующих КАК КоличествоГолосующих,
	|	ДвижениеИнвестицийОбороты.Моделирование КАК Моделирование,
	|	&ПоляПрямыеДоли КАК ПоляПрямыеДоли,
	|	ДвижениеИнвестицийОбороты.Инвестор.ИностранныйНалоговыйРезидент КАК ИнвесторИностраннаяОрганизация,
	|	ДвижениеИнвестицийОбороты.ОбъектИнвестирования.ИностранныйНалоговыйРезидент КАК ОбъектИнвестированияИностраннаяОрганизация,
	|	ДвижениеИнвестицийОбороты.ДатаНачалаУчастия КАК ДатаНачалаУчастия
	|ИЗ
	|	Связи КАК ДвижениеИнвестицийОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	т.Узел КАК Узел,
	|	т.Узел.ИностранныйНалоговыйРезидент КАК ИностранныйНалоговыйРезидент,
	|	т.Узел.ИспользоватьВРегламентированномУчете КАК ИспользоватьВРегламентированномУчете,
	|	т.Узел.ИностраннаяСтруктураБезОбразованияЮрЛица КАК ИностраннаяСтруктураБезОбразованияЮрЛица,
	|	т.Узел.КодОКОПФ КАК КодОКОПФ,
	|	т.Узел.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	т.Узел.СтранаРегистрации КАК СтранаРегистрации,
	|	т.Узел.СтранаРегистрации.Код КАК КодСтраны,
	|	&ПоляУзлы КАК ПоляУзлы,
	|	т.Источник КАК Источник,
	|	т.Приемник КАК Приемник
	|ИЗ
	|	(ВЫБРАТЬ
	|		Узлы.Узел КАК Узел,
	|		СУММА(Узлы.Инвестор) КАК Источник,
	|		СУММА(Узлы.ОбъектИнвестирования) КАК Приемник
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВЫРАЗИТЬ(Статусы.Инвестор КАК Справочник.Организации) КАК Узел,
	|			1 КАК Инвестор,
	|			NULL КАК ОбъектИнвестирования
	|		ИЗ
	|			Связи КАК Статусы
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВЫРАЗИТЬ(Статусы.ОбъектИнвестирования КАК Справочник.Организации),
	|			NULL,
	|			1
	|		ИЗ
	|			Связи КАК Статусы) КАК Узлы
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Узлы.Узел) КАК т";

КонецФункции

Функция ТекстЗапросаЭффективныеДоли()

	Возврат
	"ВЫБРАТЬ
	|	Статусы.ОбъектИнвестирования КАК ОбъектИнвестирования,
	|	Статусы.Инвестор КАК Инвестор,
	
	|	Статусы.ОтношениеКГруппе.ВидОтношенияКГруппе КАК ВидОтношенияКГруппе,
	|	Статусы.ЭффективнаяДоля КАК ЭффективнаяДоля
	|ПОМЕСТИТЬ Связи
	|ИЗ
	|	РегистрСведений.СтатусыОбъектовИнвестирования.СрезПоследних(
	|			&ДатаАктуальности,
	|			Сценарий В (&Сценарий)
	|				И (ОбъектИнвестирования.ИспользоватьВРегламентированномУчете
	|					ИЛИ ОбъектИнвестирования.ИностранныйНалоговыйРезидент)) КАК Статусы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Статусы.ОбъектИнвестирования КАК ОбъектИнвестирования,
	|	Статусы.Инвестор КАК Инвестор,	
	|	Статусы.ВидОтношенияКГруппе КАК ВидОтношенияКГруппе,
	|	&ПоляСтатусы КАК ПоляСтатусы,
	|	ЛОЖЬ КАК Моделирование,
	|	Статусы.ЭффективнаяДоля КАК ПрямаяДоля,
	|	Статусы.ЭффективнаяДоля КАК ЭффективнаяДоля
	|ИЗ
	|	Связи КАК Статусы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	т.Узел,
	|	т.Узел.ИностранныйНалоговыйРезидент КАК ИностранныйНалоговыйРезидент,
	|	т.Узел.ИспользоватьВРегламентированномУчете КАК ИспользоватьВРегламентированномУчете,
	|	т.Узел.ИностраннаяСтруктураБезОбразованияЮрЛица КАК ИностраннаяСтруктураБезОбразованияЮрЛица,
	|	т.Узел.КодОКОПФ КАК КодОКОПФ,
	|	т.Узел.ЮридическоеФизическоеЛицо КАК ЮридическоеФизическоеЛицо,
	|	т.Узел.СтранаРегистрации КАК СтранаРегистрации,
	|	т.Узел.СтранаРегистрации.Код КАК КодСтраны,
	|	&ПоляУзлы КАК ПоляУзлы,
	|	т.Источник,
	|	т.Приемник
	|ИЗ
	|	(ВЫБРАТЬ
	|		Узлы.Узел КАК Узел,
	|		СУММА(Узлы.Инвестор) КАК Источник,
	|		СУММА(Узлы.ОбъектИнвестирования) КАК Приемник
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ВЫРАЗИТЬ(Статусы.Инвестор КАК Справочник.Организации) КАК Узел,
	|			1 КАК Инвестор,
	|			NULL КАК ОбъектИнвестирования
	|		ИЗ
	|			Связи КАК Статусы
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ВЫРАЗИТЬ(Статусы.ОбъектИнвестирования КАК Справочник.Организации),
	|			NULL,
	|			1
	|		ИЗ
	|			Связи КАК Статусы) КАК Узлы
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Узлы.Узел) КАК т";

КонецФункции

#КонецОбласти

Процедура РасположитьУзлыИСвязи(ТабУзлов, ТаблицаСвязей, ПредставлениеСвязи = Неопределено) Экспорт
	Если ТабУзлов.Количество() > 0 Тогда
		Для каждого ТекущийУзел Из ТабУзлов.НайтиСтроки(Новый Структура("Строка", 0)) Цикл
			ТекущийУзел.Строка = 1;// инвесторы, которыми никто не владеет
		КонецЦикла;
		
		МаксСтрока = ПолучитьМаксимальнуюСтроку(ТабУзлов);
		МаксДлинаСтроки = ПолучитьМаксимальнуюДлинуСтроки(ТабУзлов, МаксСтрока);
		Если МаксДлинаСтроки > 20 Тогда
			МаксДлинаСтроки = 20;
		КонецЕсли;	
		
		ТабУзлов.Колонки.Добавить("НоваяСтрока", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(8,0));
		ТабУзлов.Колонки.Добавить("СтараяСтрока", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(8,0));
		ЗанятыеМеста = Новый Соответствие;
		
		Для ИндексСтроки = 1 По МаксСтрока Цикл
			
			НомерСтрокиИсточник = МаксСтрока - ИндексСтроки + 1;		
			СтрокаНачалоУровня = НомерСтрокиИсточник;
			
			УзлыУровня = ТабУзлов.Скопировать(Новый Структура("Строка", НомерСтрокиИсточник));
			УзлыУровня.Сортировать("Приемник Убыв, Источник Убыв, Приемник2 Убыв");
			
			КоличествоУровня = УзлыУровня.Количество();
			
			Для НомерОтЦентра = 0 По (КоличествоУровня - 1) Цикл
				
				ТекущийУзел = ТабУзлов.Найти(УзлыУровня[НомерОтЦентра].Узел, "Узел");
				
				ЗанятыеМестаНачалаУровня = ЗанятыеМеста.Получить(СтрокаНачалоУровня);
				Если (ЗанятыеМестаНачалаУровня <> Неопределено) И (ЗанятыеМестаНачалаУровня.Количество() = 20) Тогда
					
					//Например(новаяСтрока) Было 1-1,2-2,3-2 - стало 1-1, 2-2, 3-2, 4-2
					КопияЗанятых = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(ЗанятыеМеста);
					Для Каждого ЭлементКопииЗанятых Из КопияЗанятых Цикл					
						МестаИсточник = КопияЗанятых.Получить(ЭлементКопииЗанятых.Ключ);					
						ЗанятыеМеста.Вставить(ЭлементКопииЗанятых.Ключ + 1, МестаИсточник);
					КонецЦикла;
					
					Для каждого СтрокаУзел Из ТабУзлов Цикл
						Если СтрокаУзел.НоваяСтрока >= СтрокаНачалоУровня Тогда
							СтрокаУзел.НоваяСтрока = СтрокаУзел.НоваяСтрока + 1;
						КонецЕсли;				
					КонецЦикла;
					
					ЦентрМесто = Цел(МаксДлинаСтроки / 2);
					
					ЗанятыеМестаТек = Новый Соответствие;
					ЗанятыеМестаТек.Вставить(ЦентрМесто, ЦентрМесто);
					ЗанятыеМестаТек.Вставить(ЦентрМесто - 1, ЦентрМесто);
					ЗанятыеМестаТек.Вставить(ЦентрМесто + 1, ЦентрМесто);
					ЗанятыеМестаТек.Вставить(ЦентрМесто + 2, ЦентрМесто);
					
					ЗанятыеМеста.Вставить(СтрокаНачалоУровня, ЗанятыеМестаТек);
					
				КонецЕсли;
				
				ТекущийУзел.НоваяСтрока = СтрокаНачалоУровня;
				
				Если (ТекущийУзел.Источник = 0) Или (ИндексСтроки = 1) Тогда				
					ТекущийУзел.Колонка = ЗанятьБлижайшее(Цел(МаксДлинаСтроки / 2), СтрокаНачалоУровня, ЗанятыеМеста);
					Продолжить;
				КонецЕсли;	
				СтрокиПред = ТаблицаСвязей.НайтиСтроки(Новый Структура("Источник", ТекущийУзел.Узел));
				
				Если СтрокиПред.Количество() Тогда
					
					ИтогПоПриемникам = 0;
					Для Каждого СтрокаПред Из СтрокиПред Цикл
						
						УзелПриемник = ТабУзлов.Найти(СтрокаПред.Приемник, "Узел");
						Если УзелПриемник = Неопределено Тогда
							Сообщить("Не найден узел приемник: " + СтрокаПред.Приемник);
							Продолжить;
						КонецЕсли;
						ИтогПоПриемникам = ИтогПоПриемникам + УзелПриемник.Колонка;
						
					КонецЦикла;
					
					Если ИтогПоПриемникам = 0 Тогда
						ТребуемаяКолонка = Цел(Цел(МаксДлинаСтроки / 2));
					Иначе
						ТребуемаяКолонка = Цел(ИтогПоПриемникам / СтрокиПред.Количество());
					КонецЕсли;
					
					ТекущийУзел.Колонка = ЗанятьБлижайшее(ТребуемаяКолонка, СтрокаНачалоУровня, ЗанятыеМеста);
					
				Иначе 
					ТекущийУзел.Колонка = ЗанятьБлижайшее(Цел(МаксДлинаСтроки / 2), СтрокаНачалоУровня, ЗанятыеМеста);		
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		Для каждого СтрокаУзел Из ТабУзлов Цикл
			
			СтрокаУзел.СтараяСтрока = СтрокаУзел.Строка;
			Если СтрокаУзел.НоваяСтрока > 0 Тогда
				СтрокаУзел.Строка = СтрокаУзел.НоваяСтрока;
			КонецЕсли;		
			
		КонецЦикла;
		
		ЗаполнитьСмещенияПоВысоте(ТаблицаСвязей, ТабУзлов, ПредставлениеСвязи, МаксДлинаСтроки, МаксСтрока);
	Иначе
		// Пустая таблица. Нельзя построить дерево.
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьТаблицуУзлов(ТабУзлов, ТаблицаСвязей, ПоследовательностиУчастия, ПредставлениеСвязи = Неопределено) Экспорт

	//ПредставлениеУзла, ПредставлениеСвязи, ОформлениеСвязи, ОформлениеУзла, УровеньХ, УровеньУ
		
	Если ТабУзлов.Количество() = 0 Тогда
		Возврат ТабУзлов;
	КонецЕсли;
	
	ТаблицаСвязей.Индексы.Добавить("Источник");
	ТаблицаСвязей.Колонки.Добавить("Представление");

	ЗаполнитьСтрокиКакМаксимальнаяПоследовательностьОбъектаИнвестирования(ТабУзлов, ПоследовательностиУчастия);
	
	РасположитьУзлыИСвязи(ТабУзлов, ТаблицаСвязей, ПредставлениеСвязи);
	
	Возврат ТабУзлов;
	
КонецФункции

Функция ПолучитьМаксимальнуюСтроку(ТабУзлов)
	
	РезультатФункции = Неопределено;
	Если ТабУзлов.Количество() > 0 Тогда
		ТабУзлов.Сортировать("Строка Убыв");
		РезультатФункции = ТабУзлов[0].Строка;
	Иначе
		ТекстСообщения = НСтр("ru = 'Не удалось получить максимальную строку таблицы узлов - передана пустая таблица'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Неопределено;
	КонецЕсли;
	Возврат РезультатФункции;

КонецФункции

Процедура ЗаполнитьСмещенияПоВысоте(ТаблицаСвязей, ТабУзлов, ПредставлениеСвязи, МаксДлинаСтроки, СтараяМаксСтрока)
	
	МаксСтрока = ПолучитьМаксимальнуюСтроку(ТабУзлов);
	
	ТаблицаСвязей.Колонки.Добавить("СтрокаИзгиба");
	ТаблицаСвязей.Колонки.Добавить("ОтступИзгиба");
	ТаблицаСвязей.Колонки.Добавить("Порядок");
	ТаблицаСвязей.Колонки.Добавить("Порядок2");
	
	СерединаСтроки = МаксДлинаСтроки / 2;
			
	Для каждого СтрокаСвязь Из ТаблицаСвязей Цикл	
		
		СтрокаСвязь.Представление = РасчетДолейВладения.ПолучитьПредставление(СтрокаСвязь, ПредставлениеСвязи, Истина);
		
		СтрокаИсточник = ТабУзлов.Найти(СтрокаСвязь.Источник, "Узел");
		СтрокаПриемник = ТабУзлов.Найти(СтрокаСвязь.Приемник, "Узел");
		СтрокаСвязь.СтрокаИзгиба = СтрокаПриемник.Строка-1;//?(СтрокаИсточник.Строка = СтрокаПриемник.Строка - 1, СтрокаИсточник.Строка, 0);
		СтрокаСвязь.Порядок = СтрокаПриемник.Источник;
		//СтрокаСвязь.Порядок2 = Макс(СерединаСтроки - СтрокаПриемник.Колонка, СтрокаПриемник.Колонка - СерединаСтроки);
		СтрокаСвязь.Порядок2 = Макс(СтрокаИсточник.Колонка - СтрокаПриемник.Колонка, СтрокаПриемник.Колонка - СтрокаИсточник.Колонка);
	КонецЦикла;
	
	ТаблицаСвязей.Сортировать("СтрокаИзгиба Возр, Порядок Возр, Порядок2 Возр");
	
	ВысотаУзла = 50;
	ВысотаОтступаМеждуИзгибами = 15;
	ВысотаСтандартногоОтступа = 40;
	ВерхСтроки = 5;// отступ первой строки от начала 
	
	РазмерыОтступов = Новый Соответствие;	
	Для НомерСтроки = 1 По МаксСтрока - 1 Цикл
		
		ТекущийУровень = 1;
		СтрокиСвязей = ТаблицаСвязей.НайтиСтроки(Новый Структура("СтрокаИзгиба", НомерСтроки));
		РазмерыОтступов.Вставить(НомерСтроки, ВысотаОтступаМеждуИзгибами * (СтрокиСвязей.Количество() + 1 + 1));
		
		Для каждого СтрокаСвязь Из СтрокиСвязей Цикл					
			СтрокаСвязь.ОтступИзгиба = ВысотаОтступаМеждуИзгибами * ТекущийУровень;
			ТекущийУровень = ТекущийУровень + 1;
		КонецЦикла;
		
	КонецЦикла;
	
	Для НомерСтроки = 1 По МаксСтрока Цикл
		
		УзлыСтроки = ТабУзлов.НайтиСтроки(Новый Структура("Строка", НомерСтроки));
		
		КоличествоУзлов = УзлыСтроки.Количество();
		Если КоличествоУзлов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого СтрокаУзел Из УзлыСтроки Цикл		
			СтрокаУзел.ВерхСтроки = ВерхСтроки;
		КонецЦикла;
		
		РазмерОтступа = РазмерыОтступов.Получить(НомерСтроки);
		ВерхСтроки = ВерхСтроки + ВысотаУзла + ?(РазмерОтступа = Неопределено, ВысотаСтандартногоОтступа, РазмерОтступа);
			
	КонецЦикла;

КонецПроцедуры

Функция ЗанятьБлижайшее(ТребуемаяКолонка, ТекущаяСтрока, ЗанятыеМеста)

	Если ТребуемаяКолонка < 2 Тогда
		ТребуемаяКолонка = 2;
	КонецЕсли;
	
	КолонкиПоСтроке = ЗанятыеМеста.Получить(ТекущаяСтрока);
	Если КолонкиПоСтроке = Неопределено Тогда
	
		КолонкиПоСтроке = Новый Соответствие;
		ЗанятыеМеста.Вставить(ТекущаяСтрока, КолонкиПоСтроке)
	
	КонецЕсли;
	
	Отклонение = 0;
	ПоложительноеОтклонение = Неопределено;
		
	Пока Истина Цикл
		
		ТекущееЗначение = ТребуемаяКолонка + ?(ПоложительноеОтклонение = Ложь, -Отклонение, Отклонение);
		
		Если (ТекущееЗначение > 0) И (КолонкиПоСтроке.Получить(ТекущееЗначение) = Неопределено) Тогда
			КолонкиПоСтроке.Вставить(ТекущееЗначение, ТребуемаяКолонка);
			Возврат ТекущееЗначение;
		КонецЕсли;
		
		Если (ПоложительноеОтклонение = Истина) Тогда
			ПоложительноеОтклонение = Ложь;			
		Иначе 
			ПоложительноеОтклонение = Истина;
			Отклонение = Отклонение + 1;
		КонецЕсли;
				
	КонецЦикла;

КонецФункции

Процедура ЗаполнитьСтрокиКакМаксимальнаяПоследовательностьОбъектаИнвестирования(ТабУзлов, ПоследовательностиУчастия) Экспорт
	
	Для каждого УзелИнвестор Из ПоследовательностиУчастия Цикл
		Для каждого УзелОбъектИнвестирования Из УзелИнвестор.Значение Цикл			
			Для каждого УзелПоследовательность Из УзелОбъектИнвестирования.Значение Цикл
				
				ТекущийУзел = ТабУзлов.Найти(УзелОбъектИнвестирования.Ключ, "Узел");
				Если ТекущийУзел = Неопределено Тогда
					Продолжить;
				КонецЕсли;				
				
				РазмерПоследовательности = УзелПоследовательность.Значение.Последовательность.Количество();
				Если ТекущийУзел.Строка < РазмерПоследовательности + 1 Тогда
					ТекущийУзел.Строка = РазмерПоследовательности + 1;
				КонецЕсли;
				
			КонецЦикла;			
		КонецЦикла;		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьМаксимальнуюДлинуСтроки(ТабУзлов, МаксСтрока)
	
	МаксДлинаСтроки = МаксСтрока;	
	Для ИндексСтроки = 1 По МаксСтрока Цикл
		
		КоличествоУровня = ТабУзлов.НайтиСтроки(Новый Структура("Строка", МаксСтрока - ИндексСтроки + 1)).Количество();			
		Если КоличествоУровня > МаксДлинаСтроки Тогда
			МаксДлинаСтроки = КоличествоУровня;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МаксДлинаСтроки;

КонецФункции

Функция ПолучитьЭффективнуюДолюПоследовательности(ТабПоследовательность) Экспорт

	ДлинаПоследовательности = ТабПоследовательность.Количество();
	
	КолонкаЭффективнойДоли = "ЭффективнаяДоля";
	Если ДлинаПоследовательности = 1 Тогда
		КолонкаЭффективнойДоли = "ПрямаяДоля";
	ИначеЕсли ДлинаПоследовательности = 0 Тогда	
		Возврат 0;//доля выбыла
	КонецЕсли;
	
	Возврат ТабПоследовательность[ДлинаПоследовательности-1][КолонкаЭффективнойДоли];
	
КонецФункции	

#Область НезависимыйРегистрСведенийПоИсточнику

Процедура УдалитьДвиженияПоИсточнику(Источник, ИмяРегистраСведений, Отказ = Ложь) Экспорт
	
	Запрос = Новый Запрос(СтрШаблон("ВЫБРАТЬ * ИЗ РегистрСведений.%1 КАК т ГДЕ т.Источник = &Источник", ИмяРегистраСведений));	
	Запрос.УстановитьПараметр("Источник", Источник);	
	Выборка = Запрос.Выполнить().Выбрать();
	
	МенеджерРегистра = РегистрыСведений[ИмяРегистраСведений];
	
	НачатьТранзакцию();	
	Попытка
		
		Пока Выборка.Следующий() Цикл
			
			нз = МенеджерРегистра.СоздатьНаборЗаписей();
			Для каждого ЭлементОтбора Из нз.Отбор Цикл			
				ЭлементОтбора.Установить(Выборка[ЭлементОтбора.Имя]);			
			КонецЦикла;
			нз.Прочитать();
			
			нз.Очистить();
			нз.Записать(Истина);
			
		КонецЦикла; 
		
	    ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ОписаниеОшибки(), Отказ);
		ОтменитьТранзакцию();
	КонецПопытки;
		
КонецПроцедуры

#КонецОбласти

Функция ПолучитьПАО()

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК Организация
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.КодОКОПФ = ""12247""");
	
	Результат = Запрос.Выполнить().Выгрузить();
	Результат.Индексы.Добавить("Организация");
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьДанныеПоследовательностей(Сценарий, ДатаСреза, Инвестор, ОбъектИнвестирования, ПрямаяДоляИзменение = 0, Ссылка = Неопределено) Экспорт
	
	ДатаАктуальности = ДатаСреза;
	Если Ссылка <> Неопределено Тогда
		ДатаАктуальности = Новый Граница(Новый МоментВремени(ДатаСреза, Ссылка), ВидГраницы.Исключая);
	КонецЕсли;
	
	ТабПрямыеДоли = РасчетДолейВладения.ПолучитьТаблицуПрямыеДоли(Сценарий, ДатаАктуальности, Ложь);
	ТабПрямыеДоли.Колонки.Добавить("СтрокаИзменение", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());

	Отбор = Новый Структура("Инвестор, ОбъектИнвестирования", Инвестор, ОбъектИнвестирования);
	
	СтрокиИзменение = ТабПрямыеДоли.НайтиСтроки(Отбор);
	Если СтрокиИзменение.Количество() Тогда
		СтрокаИзменение = СтрокиИзменение.Получить(0);
	Иначе	
		СтрокаИзменение = ТабПрямыеДоли.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаИзменение, Отбор);
	КонецЕсли;
	
	НоваяПрямаяДоля = ?(СтрокаИзменение.ПрямаяДоля = Неопределено, 0, СтрокаИзменение.ПрямаяДоля) + ПрямаяДоляИзменение;
	СтрокаИзменение.ПрямаяДоля 				= НоваяПрямаяДоля;
	СтрокаИзменение.СтрокаИзменение 		= Истина;
	
	ОбъектыИнвестирования = ТабПрямыеДоли.Скопировать(, "ОбъектИнвестирования");
	ОбъектыИнвестирования.Свернуть("ОбъектИнвестирования");	
	ПоследовательностиУчастия = РасчетДолейВладения.ПолучитьПоследовательностиУчастия(ОбъектыИнвестирования.ВыгрузитьКолонку("ОбъектИнвестирования"), ТабПрямыеДоли);
	
	Результат = Новый Структура();
	Результат.Вставить("ЭффективнаяДоля", 			0);
	Результат.Вставить("ПрямаяДоля", 				НоваяПрямаяДоля);
	Результат.Вставить("АдресПоследовательностей", 	ПоместитьВоВременноеХранилище(ПоследовательностиУчастия, Новый УникальныйИдентификатор));
	
	УзелИнвестор = ПоследовательностиУчастия.Получить(Инвестор);
	Если УзелИнвестор = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	УзелОбъектИнвестирования = УзелИнвестор.Получить(ОбъектИнвестирования);
	Если УзелОбъектИнвестирования = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	ЭффективнаяДоля = 0;
	Для каждого УзелПоследовательность Из УзелОбъектИнвестирования Цикл	
		ЭффективнаяДоля = ЭффективнаяДоля + РасчетДолейВладения.ПолучитьЭффективнуюДолюПоследовательности(УзелПоследовательность.Значение.Последовательность);	
	КонецЦикла;
	
	Результат.Вставить("ЭффективнаяДоля", ЭффективнаяДоля);
	
	Возврат Результат;
	
	
КонецФункции
