////////////////////////////////////////////////////////////////////////////////
// НСИ производства: Процедуры подсистемы управления данными об изделиях
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

#Область Спецификации

// Возвращает спецификацию изделия
//
// Параметры:
//  ДанныеОбИзделии             - Структура - см. УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураДанныхОбИзделииДляВыбораСпецификации()
//  ПараметрыВыбораСпецификаций - Структура - см. УправлениеДаннымиОбИзделияхКлиентСервер.ПараметрыВыбораСпецификаций()
// 
// Возвращаемое значение:
//  Структура, Неопределено - содержит данные спецификации изделия.
//
Функция СпецификацияИзделия(ДанныеОбИзделии, ПараметрыВыбораСпецификаций) Экспорт
	
	ДанныеСпецификации = Неопределено;
	
	СписокСпецификаций = УправлениеДаннымиОбИзделиях.СпецификацииИзделия(ДанныеОбИзделии, ПараметрыВыбораСпецификаций);
	
	Для Индекс = 0 По СписокСпецификаций.ВГраница() Цикл
		
		Если ДанныеСпецификации = Неопределено И СписокСпецификаций[Индекс].ПодбираетсяАвтоматически = Истина Тогда
			ДанныеСпецификации = СписокСпецификаций[Индекс];
			Если НЕ ЗначениеЗаполнено(ДанныеОбИзделии.ТекущаяСпецификация) Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
		Если СписокСпецификаций[Индекс].Спецификация = ДанныеОбИзделии.ТекущаяСпецификация Тогда
			ДанныеСпецификации = СписокСпецификаций[Индекс];
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДанныеСпецификации;
	
КонецФункции

// Копирует спецификацию и этапы
//
// Параметры:
//  Источник	- СправочникСсылка.РесурсныеСпецификации - спецификация, которую нужно скопировать.
//
// Возвращаемое значение:
//   СправочникСсылка.РесурсныеСпецификации   - копия спецификации.
//
Функция КопироватьРесурснуюСпецификацию(Источник) Экспорт

	НачатьТранзакцию();
	Попытка
		
		СсылкаНового = Справочники.РесурсныеСпецификации.ПолучитьСсылку();
		
		Объект = Источник.Скопировать();
		Объект.Наименование = Объект.Наименование + " " + НСтр("ru = '(копия)';
																|en = '(copy)'");
		
		Если НЕ ЗаполнитьЭтапыПоРесурснойСпецификации(Объект, Источник, СсылкаНового) Тогда
			
			ОтменитьТранзакцию();
			Возврат Неопределено;
			
		КонецЕсли;
		
		УправлениеДаннымиОбИзделиях.ОбновитьКлючиСвязиОбъекта(Объект);
		
		//++ НЕ УТКА
		УправлениеДаннымиОбИзделиях.КопироватьЗначенияПараметровНазначенияСпецификации(Источник.Ссылка, СсылкаНового);
		//-- НЕ УТКА
		
		Объект.УстановитьСсылкуНового(СсылкаНового);
		Объект.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		
		ОтменитьТранзакцию();
		Возврат Неопределено;
		
	КонецПопытки;
	
	Возврат Объект.Ссылка;
	
КонецФункции

#КонецОбласти

//++ НЕ УТКА

#Область МаршрутныеКарты

// Проверяет, что маршрутную карту можно назначить основной
//
// Параметры:
//  Ссылка			- СправочникСсылка.МаршрутныеКарты - ссылка на маршрутную карту
//  СтруктураОшибки	- Структура - содержит результат проверки: 
//								1. ТекстОшибки: причина по которой маршрутная карта не может быть основной.
//
// Возвращаемое значение:
//   Булево   - Истина, если можно назначить основной.
//
Функция МаршрутнуюКартуМожноНазначитьОсновной(Ссылка, СтруктураОшибки) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаршрутныеКарты.Статус КАК Статус,
	|	КОЛИЧЕСТВО(МаршрутныеКартыВыходныеИзделия.НомерСтроки) КАК КоличествоИзделий
	|ИЗ
	|	Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МаршрутныеКарты.ВыходныеИзделия КАК МаршрутныеКартыВыходныеИзделия
	|		ПО (МаршрутныеКартыВыходныеИзделия.Ссылка = МаршрутныеКарты.Ссылка)
	|ГДЕ
	|	МаршрутныеКарты.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	МаршрутныеКарты.Ссылка,
	|	МаршрутныеКарты.Статус";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Выборка.Следующий();
	
	Если Выборка.Статус <> ПредопределенноеЗначение("Перечисление.СтатусыМаршрутныхКарт.Действует") Тогда
		СтруктураОшибки.Вставить("ТекстОшибки", НСтр("ru = 'Основной может быть только действующая маршрутная карта.';
													|en = 'Only a valid route sheet can be assigned as the main one.'"));
		Возврат Ложь;
	ИначеЕсли Выборка.КоличествоИзделий = 0 Тогда
		СтруктураОшибки.Вставить("ТекстОшибки", НСтр("ru = 'В маршрутной карте должны быть выходные изделия.';
													|en = 'The route sheet must contain finished products.'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Назначает маршрутную карту основной для указанного изделия и подразделения
//
// Параметры:
//  СвойстваЗаписи 		- Структура - содержит значения свойств записи
//  НавигационнаяСсылка - Строка - навигационная ссылка на измененную запись.
//  СтруктураОшибки	- Структура - содержит результат проверки
//
// Возвращаемое значение:
//   Булево   - Истина, если маршрутная карта назначена основной.
//
Функция НазначитьОсновнойМаршрутнойКартой(СвойстваЗаписи, НавигационнаяСсылка = Неопределено, СтруктураОшибки = Неопределено) Экспорт
	
	СтруктураОшибки = Новый Структура;
	
	// Проверим, что маршрутную карту можно назначить основной
	Если НЕ МаршрутнуюКартуМожноНазначитьОсновной(СвойстваЗаписи.МаршрутнаяКарта, СтруктураОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПодразделениеМаршрутнойКарты = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СвойстваЗаписи.МаршрутнаяКарта, "Подразделение");
	
	// Запишем данные
	Запись = РегистрыСведений.ОсновныеМаршрутныеКарты.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(Запись, СвойстваЗаписи);
	Запись.Подразделение = ПодразделениеМаршрутнойКарты;
	
	Попытка
		Запись.Записать();
	Исключение
		ОписаниеОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки; 
	
	СтруктураТекущейЗаписи = Новый Структура;
	СтруктураТекущейЗаписи.Вставить("Подразделение",   Запись.Подразделение);
	СтруктураТекущейЗаписи.Вставить("Номенклатура",    Запись.Номенклатура);
	СтруктураТекущейЗаписи.Вставить("Характеристика",  Запись.Характеристика);
	СтруктураТекущейЗаписи.Вставить("МаршрутнаяКарта", Запись.МаршрутнаяКарта);
	
	КлючЗаписи = РегистрыСведений.ОсновныеМаршрутныеКарты.СоздатьКлючЗаписи(СтруктураТекущейЗаписи);
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(КлючЗаписи);
	
	Возврат Истина;
	
КонецФункции

// Получает значения реквизитов маршрутной карты
// 
// Параметры:
// 	МаршрутнаяКарта - СправочникСсылка.МаршрутныеКарты
// Возвращаемое значение:
// 	Структура - см. СтруктураРеквизитовМаршрутнойКарты()
Функция ЗначенияРеквизитовМаршрутнойКарты(МаршрутнаяКарта) Экспорт
	
	Возврат Справочники.МаршрутныеКарты.ЗначенияРеквизитовМаршрутнойКарты(МаршрутнаяКарта);
	
КонецФункции

#КонецОбласти

#Область ДеревоСпецификаций

// Получает подчиненные элементы строки дерева спецификаций
//
// Параметры:
//  Идентификатор	 - УникальныйИдентификатор	 - идентификатор строки
//  АдресВХранилище	 - Строка					 - адрес дерева спецификаций во временном хранилище.
// 
// Возвращаемое значение:
//   - Массив - подчиненные элементы строки дерева спецификаций.
//
Функция ДеревоСпецификацийПрочитатьЭлементы(Идентификатор, АдресВХранилище) Экспорт
	
	Возврат УправлениеДаннымиОбИзделиях.ДеревоСпецификацийПрочитатьЭлементы(Идентификатор, АдресВХранилище);
	
КонецФункции

#КонецОбласти

//-- НЕ УТКА

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура РесурсныеСпецификацииОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Если Параметры.Свойство("ПолучитьСпецификацииПоНоменклатуре") И Параметры.Свойство("Номенклатура") Тогда
		
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		
		ДанныеОбИзделии = УправлениеДаннымиОбИзделияхКлиентСервер.СтруктураДанныхОбИзделииДляВыбораСпецификации();
		ЗаполнитьЗначенияСвойств(ДанныеОбИзделии, Параметры);
		
		Список = УправлениеДаннымиОбИзделиях.СписокСпецификацийПоНоменклатуре(ДанныеОбИзделии, Параметры);
		ДанныеВыбора.ЗагрузитьЗначения(Список);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура РесурсныеСпецификацииОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, СтандартнаяОбработка) Экспорт

	Если ВидФормы = "ФормаВыбора" И Параметры.Свойство("ПолучитьСпецификацииПоНоменклатуре") И Параметры.Свойство("Номенклатура") Тогда
		ВыбраннаяФорма = "ФормаВыбораПоНоменклатуре";
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

Функция УстановитьСтатусСпецификаций(ВыделенныеСсылки, ЗначениеСтатуса) Экспорт

	НовыйСтатус = Перечисления.СтатусыСпецификаций[ЗначениеСтатуса];
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РесурсныеСпецификации.Ссылка,
	|	РесурсныеСпецификации.Наименование,
	|	РесурсныеСпецификации.ПометкаУдаления
	|ИЗ
	|	Справочник.РесурсныеСпецификации КАК РесурсныеСпецификации
	|ГДЕ
	|	РесурсныеСпецификации.Статус <> &НовыйСтатус
	|	И РесурсныеСпецификации.Ссылка В(&ВыделенныеСсылки)";
	
	Запрос.УстановитьПараметр("ВыделенныеСсылки", ВыделенныеСсылки);
	Запрос.УстановитьПараметр("НовыйСтатус",      НовыйСтатус);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	КоличествоОбработанных = 0;
	ОчередьКРасчету = Новый Массив;
	
	Если НовыйСтатус = Перечисления.СтатусыСпецификаций.ВРазработке Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПометкаУдаления Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Нельзя изменить статус помеченной на удаление спецификации ""%1"".';
										|en = 'Cannot change a status of the ""%1"" bill of materials marked for deletion.'"),
									Выборка.Наименование);
									
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка); 
			Продолжить;
		КонецЕсли;
		
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		НачатьТранзакцию();
		
		Попытка
			
			Если НовыйСтатус = Перечисления.СтатусыСпецификаций.ВРазработке Тогда
				ПараметрыПроверки = Новый Структура("Объект", Выборка.Ссылка);
				Справочники.РесурсныеСпецификации.ПроверитьИспользованиеОбъекта(ПараметрыПроверки, АдресХранилища);
				ЕстьСсылки = ПолучитьИзВременногоХранилища(АдресХранилища);
				Если ЕстьСсылки Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = 'Спецификация ""%1"" используется. Установка статуса ""В разработке"" допускается только в форме спецификации.';
												|en = 'Bill of materials ""%1"" is used. It is allowed to set the ""Under development"" status only in the BOM form.'"),
											СпрОбъект.Наименование);
											
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка); 
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
			КонецЕсли; 
			
			СпрОбъект.Статус = НовыйСтатус;
			СпрОбъект.ДополнительныеСвойства.Вставить("ПроверитьЭтапы");
			СпрОбъект.ДополнительныеСвойства.Вставить("ЗапретитьРасчетДлительностиПроизводства");
			Если СпрОбъект.ПроверитьЗаполнение() Тогда
				СпрОбъект.Записать();
				КоличествоОбработанных = КоличествоОбработанных + 1;
				Если НовыйСтатус = Перечисления.СтатусыСпецификаций.Действует Тогда
					ОчередьКРасчету.Добавить(Выборка.Ссылка);
				КонецЕсли;
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
		КонецПопытки;
		
	КонецЦикла;
	
	РегистрыСведений.ЗаданияКРасчетуДлительностиПроизводства.ЗапуститьЗадание();
	
	Возврат КоличествоОбработанных;

КонецФункции

Функция ЗаполнитьЭтапыПоРесурснойСпецификации(Приемник, Источник, СсылкаПриемника)

	Запрос = Новый Запрос(
	// 0
	"ВЫБРАТЬ
	|	РесурсныеСпецификацииВыходныеИзделия.ВидНоменклатуры КАК ВидНоменклатуры,
	|	РесурсныеСпецификацииВыходныеИзделия.Номенклатура КАК Номенклатура,
	|	РесурсныеСпецификацииВыходныеИзделия.Характеристика КАК Характеристика,
	|	РесурсныеСпецификацииВыходныеИзделия.Упаковка КАК Упаковка,
	|	РесурсныеСпецификацииВыходныеИзделия.КоличествоУпаковок КАК КоличествоУпаковок,
	|
	|	РесурсныеСпецификацииВыходныеИзделия.ДоляСтоимости КАК ДоляСтоимости,
	|
	|	РесурсныеСпецификацииВыходныеИзделия.ОбработатьПоСпецификации КАК ОбработатьПоСпецификации,
	|	РесурсныеСпецификацииВыходныеИзделия.Спецификация КАК Спецификация,
	|
	|	РесурсныеСпецификацииВыходныеИзделия.ЭтапРедактирование КАК ЭтапРедактирование,
	|	РесурсныеСпецификацииВыходныеИзделия.ОперацияРедактирование КАК ОперацияРедактирование,
	|
	|	РесурсныеСпецификацииВыходныеИзделия.ПроцентБрака КАК ПроцентБрака,
	|
	|	РесурсныеСпецификацииВыходныеИзделия.СпособАвтовыбораНоменклатуры КАК СпособАвтовыбораНоменклатуры,
	|	РесурсныеСпецификацииВыходныеИзделия.СпособАвтовыбораХарактеристики КАК СпособАвтовыбораХарактеристики,
	|	РесурсныеСпецификацииВыходныеИзделия.АлгоритмАвтовыбораХарактеристики КАК АлгоритмАвтовыбораХарактеристики,
	|	РесурсныеСпецификацииВыходныеИзделия.СвойствоСодержащееНоменклатуру КАК СвойствоСодержащееНоменклатуру,
	|	РесурсныеСпецификацииВыходныеИзделия.АлгоритмРасчетаКоличества КАК АлгоритмРасчетаКоличества,
	|
	|	РесурсныеСпецификацииВыходныеИзделия.КлючСвязи КАК КлючСвязи
	|
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВыходныеИзделия КАК РесурсныеСпецификацииВыходныеИзделия
	|ГДЕ
	|	РесурсныеСпецификацииВыходныеИзделия.Ссылка = &Источник
	|
	|УПОРЯДОЧИТЬ ПО
	|	РесурсныеСпецификацииВыходныеИзделия.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 1
	|ВЫБРАТЬ
	|	РесурсныеСпецификацииВозвратныеОтходы.Номенклатура КАК Номенклатура,
	|	РесурсныеСпецификацииВозвратныеОтходы.Характеристика КАК Характеристика,
	|	РесурсныеСпецификацииВозвратныеОтходы.Упаковка КАК Упаковка,
	|	РесурсныеСпецификацииВозвратныеОтходы.КоличествоУпаковок КАК КоличествоУпаковок,
	|
	|	РесурсныеСпецификацииВозвратныеОтходы.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|
	|	РесурсныеСпецификацииВозвратныеОтходы.ОбработатьПоСпецификации КАК ОбработатьПоСпецификации,
	|	РесурсныеСпецификацииВозвратныеОтходы.Спецификация КАК Спецификация,
	|
	|	РесурсныеСпецификацииВозвратныеОтходы.ЭтапРедактирование КАК ЭтапРедактирование,
	|	РесурсныеСпецификацииВозвратныеОтходы.ОперацияРедактирование КАК ОперацияРедактирование,
	|
	|	РесурсныеСпецификацииВозвратныеОтходы.ОписаниеИзделия КАК ОписаниеИзделия,
	|
	|	РесурсныеСпецификацииВозвратныеОтходы.СпособАвтовыбораНоменклатуры КАК СпособАвтовыбораНоменклатуры,
	|	РесурсныеСпецификацииВозвратныеОтходы.СпособАвтовыбораХарактеристики КАК СпособАвтовыбораХарактеристики,
	|	РесурсныеСпецификацииВозвратныеОтходы.АлгоритмАвтовыбораХарактеристики КАК АлгоритмАвтовыбораХарактеристики,
	|	РесурсныеСпецификацииВозвратныеОтходы.СвойствоСодержащееНоменклатуру КАК СвойствоСодержащееНоменклатуру,
	|	РесурсныеСпецификацииВозвратныеОтходы.АлгоритмРасчетаКоличества КАК АлгоритмРасчетаКоличества,
	|
	|	РесурсныеСпецификацииВозвратныеОтходы.КлючСвязи КАК КлючСвязи
	|ИЗ
	|	Справочник.РесурсныеСпецификации.ВозвратныеОтходы КАК РесурсныеСпецификацииВозвратныеОтходы
	|ГДЕ
	|	РесурсныеСпецификацииВозвратныеОтходы.Ссылка = &Источник
	|
	|УПОРЯДОЧИТЬ ПО
	|	РесурсныеСпецификацииВозвратныеОтходы.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 2
	|ВЫБРАТЬ
	|	РесурсныеСпецификацииМатериалыИУслуги.Номенклатура КАК Номенклатура,
	|	РесурсныеСпецификацииМатериалыИУслуги.Характеристика КАК Характеристика,
	|	РесурсныеСпецификацииМатериалыИУслуги.Упаковка КАК Упаковка,
	|	РесурсныеСпецификацииМатериалыИУслуги.КоличествоУпаковок КАК КоличествоУпаковок,
	|
	|	РесурсныеСпецификацииМатериалыИУслуги.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|
	|	РесурсныеСпецификацииМатериалыИУслуги.СпособПолученияМатериала КАК СпособПолученияМатериала,
	|	РесурсныеСпецификацииМатериалыИУслуги.ИсточникПолученияПолуфабриката КАК ИсточникПолученияПолуфабриката,
	|	РесурсныеСпецификацииМатериалыИУслуги.ПроизводитсяВПроцессе КАК ПроизводитсяВПроцессе,
	|
	|	РесурсныеСпецификацииМатериалыИУслуги.ПланироватьНеРанее КАК ПланироватьНеРанее,
	|	РесурсныеСпецификацииМатериалыИУслуги.СпецификацияРемонта КАК СпецификацияРемонта,
	|
	|	РесурсныеСпецификацииМатериалыИУслуги.ЭтапРедактирование КАК ЭтапРедактирование,
	|	РесурсныеСпецификацииМатериалыИУслуги.ОперацияРедактирование КАК ОперацияРедактирование,
	|
	|	РесурсныеСпецификацииМатериалыИУслуги.ПрименениеМатериала КАК ПрименениеМатериала,
	|	РесурсныеСпецификацииМатериалыИУслуги.Альтернативный КАК Альтернативный,
	|	РесурсныеСпецификацииМатериалыИУслуги.Вероятность КАК Вероятность,
	|
	|	РесурсныеСпецификацииМатериалыИУслуги.СпособАвтовыбораНоменклатуры КАК СпособАвтовыбораНоменклатуры,
	|	РесурсныеСпецификацииМатериалыИУслуги.СпособАвтовыбораХарактеристики КАК СпособАвтовыбораХарактеристики,
	|	РесурсныеСпецификацииМатериалыИУслуги.АлгоритмАвтовыбораХарактеристики КАК АлгоритмАвтовыбораХарактеристики,
	|	РесурсныеСпецификацииМатериалыИУслуги.СвойствоСодержащееНоменклатуру КАК СвойствоСодержащееНоменклатуру,
	|	РесурсныеСпецификацииМатериалыИУслуги.АлгоритмРасчетаКоличества КАК АлгоритмРасчетаКоличества,
	|
	|	РесурсныеСпецификацииМатериалыИУслуги.КлючСвязи КАК КлючСвязи
	|
	|ИЗ
	|	Справочник.РесурсныеСпецификации.МатериалыИУслуги КАК РесурсныеСпецификацииМатериалыИУслуги
	|ГДЕ
	|	РесурсныеСпецификацииМатериалыИУслуги.Ссылка = &Источник
	|
	|УПОРЯДОЧИТЬ ПО
	|	РесурсныеСпецификацииМатериалыИУслуги.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 3
	|ВЫБРАТЬ
	|	РесурсныеСпецификацииТрудозатраты.ВидРабот КАК ВидРабот,
	|	РесурсныеСпецификацииТрудозатраты.Количество КАК Количество,
	|
	|	РесурсныеСпецификацииТрудозатраты.СтатьяКалькуляции КАК СтатьяКалькуляции,
	|
	|	РесурсныеСпецификацииТрудозатраты.ЭтапРедактирование КАК ЭтапРедактирование,
	|	РесурсныеСпецификацииТрудозатраты.ОперацияРедактирование КАК ОперацияРедактирование,
	|
	|	РесурсныеСпецификацииТрудозатраты.НазначениеРабот КАК НазначениеРабот,
	|
	|	РесурсныеСпецификацииТрудозатраты.АлгоритмРасчетаКоличества КАК АлгоритмРасчетаКоличества,
	|
	|	РесурсныеСпецификацииТрудозатраты.КлючСвязи КАК КлючСвязи
	|ИЗ
	|	Справочник.РесурсныеСпецификации.Трудозатраты КАК РесурсныеСпецификацииТрудозатраты
	|ГДЕ
	|	РесурсныеСпецификацииТрудозатраты.Ссылка = &Источник
	|
	|УПОРЯДОЧИТЬ ПО
	|	РесурсныеСпецификацииТрудозатраты.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 4
	|ВЫБРАТЬ
	|	СправочникЭтапыПроизводства.Ссылка КАК Ссылка,
	|	СправочникЭтапыПроизводства.НомерЭтапа КАК НомерЭтапа,
	|	СправочникЭтапыПроизводства.НомерСледующегоЭтапа КАК НомерСледующегоЭтапа
	|ИЗ
	|	Справочник.ЭтапыПроизводства КАК СправочникЭтапыПроизводства
	|ГДЕ
	|	СправочникЭтапыПроизводства.Владелец = &Источник
	|	И НЕ СправочникЭтапыПроизводства.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЭтапа
	|
	//++ НЕ УТКА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	// 5
	|ВЫБРАТЬ
	|	СправочникТехнологическиеОперации.Ссылка КАК Ссылка,
	|	СправочникТехнологическиеОперации.Владелец КАК Этап,
	|	СправочникТехнологическиеОперации.НомерОперации КАК НомерОперации,
	|	СправочникТехнологическиеОперации.НомерСледующейОперации КАК НомерСледующейОперации
	|ИЗ
	|	Справочник.Технологическиеоперации КАК СправочникТехнологическиеОперации
	|ГДЕ
	|	СправочникТехнологическиеОперации.Спецификация = &Источник
	|	И НЕ СправочникТехнологическиеОперации.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Этап,
	|	НомерОперации
	|
	//-- НЕ УТКА
	|");
	
	Запрос.УстановитьПараметр("Источник", Источник);
	
	Результат = Запрос.ВыполнитьПакет();
	
	Приемник.ВыходныеИзделия.Загрузить(Результат[0].Выгрузить());
	Приемник.ВозвратныеОтходы.Загрузить(Результат[1].Выгрузить());
	Приемник.МатериалыИУслуги.Загрузить(Результат[2].Выгрузить());
	Приемник.Трудозатраты.Загрузить(Результат[3].Выгрузить());
	
	ВыборкаЭтапы = Результат[4].Выбрать();
	//++ НЕ УТКА
	ВыборкаОперации = Результат[5].Выбрать();
	//-- НЕ УТКА
	
	Пока ВыборкаЭтапы.Следующий() Цикл
		
		ЭтапОбъект = ВыборкаЭтапы.Ссылка.Скопировать();
		ЭтапОбъект.Владелец = СсылкаПриемника;
		ЭтапОбъект.НомерЭтапа = ВыборкаЭтапы.НомерЭтапа;
		ЭтапОбъект.НомерСледующегоЭтапа = ВыборкаЭтапы.НомерСледующегоЭтапа;
		
		ЭтапОбъект.ОбменДанными.Загрузка = Истина;
		
		Попытка
			
			ЭтапОбъект.Записать();
			
		Исключение
			
			Возврат Ложь;
			
		КонецПопытки;
		
		ВыполнитьЗаменуСсылокВКоллекции(Приемник.ВыходныеИзделия,  "ЭтапРедактирование", ВыборкаЭтапы.Ссылка, ЭтапОбъект.Ссылка);
		ВыполнитьЗаменуСсылокВКоллекции(Приемник.ВозвратныеОтходы, "ЭтапРедактирование", ВыборкаЭтапы.Ссылка, ЭтапОбъект.Ссылка);
		
		ВыполнитьЗаменуСсылокВКоллекции(Приемник.МатериалыИУслуги, "ЭтапРедактирование",             ВыборкаЭтапы.Ссылка, ЭтапОбъект.Ссылка);
		ВыполнитьЗаменуСсылокВКоллекции(Приемник.МатериалыИУслуги, "ИсточникПолученияПолуфабриката", ВыборкаЭтапы.Ссылка, ЭтапОбъект.Ссылка);
		ВыполнитьЗаменуСсылокВКоллекции(Приемник.МатериалыИУслуги, "ПланироватьНеРанее",             ВыборкаЭтапы.Ссылка, ЭтапОбъект.Ссылка);
		
		ВыполнитьЗаменуСсылокВКоллекции(Приемник.Трудозатраты,     "ЭтапРедактирование", ВыборкаЭтапы.Ссылка, ЭтапОбъект.Ссылка);
		
		Если Приемник.ОсновноеИзделиеЭтап = ВыборкаЭтапы.Ссылка Тогда
			Приемник.ОсновноеИзделиеЭтап = ЭтапОбъект.Ссылка;
		КонецЕсли;
		
		//++ НЕ УТКА
		ВыборкаОперации.Сбросить();
		Пока ВыборкаОперации.НайтиСледующий(ВыборкаЭтапы.Ссылка, "Этап") Цикл
			
			ОперацияОбъект = ВыборкаОперации.Ссылка.Скопировать();
			ОперацияОбъект.Владелец = ЭтапОбъект.Ссылка;
			ОперацияОбъект.НомерОперации = ВыборкаОперации.НомерОперации;
			ОперацияОбъект.НомерСледующейОперации = ВыборкаОперации.НомерСледующейОперации;
			ОперацияОбъект.Спецификация = СсылкаПриемника;
			
			ОперацияОбъект.ОбменДанными.Загрузка = Истина;
			
			Попытка
				
				ОперацияОбъект.Записать();
				
			Исключение
				
				Возврат Ложь;
				
			КонецПопытки;
			
			ВыполнитьЗаменуСсылокВКоллекции(Приемник.ВыходныеИзделия,  "ОперацияРедактирование", ВыборкаОперации.Ссылка, ОперацияОбъект.Ссылка);
			ВыполнитьЗаменуСсылокВКоллекции(Приемник.ВозвратныеОтходы, "ОперацияРедактирование", ВыборкаОперации.Ссылка, ОперацияОбъект.Ссылка);
			ВыполнитьЗаменуСсылокВКоллекции(Приемник.МатериалыИУслуги, "ОперацияРедактирование", ВыборкаОперации.Ссылка, ОперацияОбъект.Ссылка);
			ВыполнитьЗаменуСсылокВКоллекции(Приемник.Трудозатраты,     "ОперацияРедактирование", ВыборкаОперации.Ссылка, ОперацияОбъект.Ссылка);
			
		КонецЦикла;
		//-- НЕ УТКА
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Процедура ВыполнитьЗаменуСсылокВКоллекции(Коллекция, ИмяПоля, Ссылка, НоваяСсылка)
	
	Отбор = Новый Структура(ИмяПоля, Ссылка);
	
	НайденныеСтроки = Коллекция.НайтиСтроки(Отбор);
	
	Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
		НайденнаяСтрока[ИмяПоля] = НоваяСсылка;
		
	КонецЦикла;
	
КонецПроцедуры

//++ НЕ УТКА

Функция УстановитьСтатусМаршрутныхКарт(ВыделенныеСсылки, ЗначениеСтатуса) Экспорт

	НовыйСтатус = Перечисления.СтатусыМаршрутныхКарт[ЗначениеСтатуса];
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МаршрутныеКарты.Ссылка,
	|	МаршрутныеКарты.Наименование,
	|	МаршрутныеКарты.ПометкаУдаления
	|ИЗ
	|	Справочник.МаршрутныеКарты КАК МаршрутныеКарты
	|ГДЕ
	|	МаршрутныеКарты.Статус <> &НовыйСтатус
	|	И МаршрутныеКарты.Ссылка В(&ВыделенныеСсылки)";
	
	Запрос.УстановитьПараметр("ВыделенныеСсылки", ВыделенныеСсылки);
	Запрос.УстановитьПараметр("НовыйСтатус",      НовыйСтатус);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	КоличествоОбработанных = 0;
	
	Если НовыйСтатус = Перечисления.СтатусыМаршрутныхКарт.ВРазработке Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено);
	КонецЕсли;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ПометкаУдаления Тогда
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Нельзя изменить статус помеченной на удаление маршрутной карты ""%1"".';
										|en = 'Cannot change status of the ""%1"" route sheet because it is marked for deletion.'"),
									Выборка.Наименование);
									
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка); 
			Продолжить;
		КонецЕсли;
		
		СпрОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		НачатьТранзакцию();
		
		Попытка
			
			Если НовыйСтатус = Перечисления.СтатусыМаршрутныхКарт.ВРазработке Тогда
				ПараметрыПроверки = Новый Структура("Объект", Выборка.Ссылка);
				Справочники.МаршрутныеКарты.ПроверитьИспользованиеОбъекта(ПараметрыПроверки, АдресХранилища);
				ЕстьСсылки = ПолучитьИзВременногоХранилища(АдресХранилища);
				Если ЕстьСсылки Тогда
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = 'Маршрутная карта ""%1"" используется. Установка статуса ""В разработке"" допускается только в форме маршрутной карты.';
												|en = 'The ""%1"" route sheet is in use. To set ""Under development"" status, go to the route sheet form.'"),
											СпрОбъект.Наименование);
											
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Выборка.Ссылка); 
					ОтменитьТранзакцию();
					Продолжить;
				КонецЕсли;
			КонецЕсли; 
			
			СпрОбъект.Статус = НовыйСтатус;
			Если СпрОбъект.ПроверитьЗаполнение() Тогда
				СпрОбъект.Записать();
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			Продолжить;
		КонецПопытки;
		КоличествоОбработанных = КоличествоОбработанных + 1;
		
	КонецЦикла;
	
	Возврат КоличествоОбработанных;

КонецФункции

Процедура МаршрутныеКартыОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка) Экспорт
	
	Если Параметры.Свойство("ВыборДействующихМаршрутныхКарт") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("Подразделение") Тогда
			Подразделение = Параметры.Отбор.Подразделение;
		Иначе
			Подразделение = Справочники.СтруктураПредприятия.ПустаяСсылка();
		КонецЕсли; 
		Если Параметры.Свойство("Отбор") И Параметры.Отбор.Свойство("НачалоПроизводства") Тогда
			НачалоПроизводства = Параметры.Отбор.НачалоПроизводства;
		Иначе
			НачалоПроизводства = '000101010000';
		КонецЕсли; 
		
		ДанныеВыбора =  УправлениеДаннымиОбИзделиях.ДействующиеМаршрутныеКартыПодразделения(
								Подразделение, 
								НачалоПроизводства, 
								Параметры.СтрокаПоиска)
	КонецЕсли; 
	
	Если Параметры.Свойство("ЗапретитьВыбор") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МаршрутныеКарты.Ссылка КАК МаршрутнаяКарта,
		|	МаршрутныеКарты.Представление КАК МаршрутнаяКартаПредставление
		|ИЗ
		|	Справочник.МаршрутныеКарты КАК МаршрутныеКарты
		|ГДЕ
		|	МаршрутныеКарты.Ссылка <> &Ссылка
		|	И &СтрокаПоиска
		|	И &СтрокаОтбора
		|УПОРЯДОЧИТЬ ПО
		|	МаршрутнаяКартаПредставление";
		
		СтрокаПоиска = "";
		Если Параметры.СтрокаПоиска <> Неопределено Тогда
			Запрос.УстановитьПараметр("Текст",  "%" + СокрЛП(Параметры.СтрокаПоиска) + "%");
			СтрокаПоиска = "И МаршрутныеКарты.Наименование ПОДОБНО &Текст";
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &СтрокаПоиска", СтрокаПоиска);
		
		СтрокаОтбора = "";
		Если Параметры.Свойство("Отбор") Тогда
			Для каждого ЭлементОтбора Из Параметры.Отбор Цикл
				СтрокаОтбора = СтрокаОтбора + " И " + ЭлементОтбора.Ключ + " = &" + ЭлементОтбора.Ключ;
				Запрос.УстановитьПараметр(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			КонецЦикла; 
		КонецЕсли;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И &СтрокаОтбора", СтрокаОтбора);
		
		Запрос.УстановитьПараметр("Ссылка", Параметры.ЗапретитьВыбор);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ДанныеВыбора = Новый СписокЗначений;
		
		Пока Выборка.Следующий() Цикл
			ДанныеВыбора.Добавить(Выборка.МаршрутнаяКарта, Выборка.МаршрутнаяКартаПредставление);
		КонецЦикла;

	КонецЕсли; 
	
КонецПроцедуры

Процедура ТехнологическиеОперацииОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, СтандартнаяОбработка) Экспорт

	Если ВидФормы = "ФормаОбъекта" Тогда
		
		Если Параметры.Свойство("ЗначенияЗаполнения") Тогда
			
			Если ТипЗнч(Параметры.ЗначенияЗаполнения) = Тип("Структура") И Параметры.ЗначенияЗаполнения.Свойство("СодержитВложенныйМаршрут") И Параметры.ЗначенияЗаполнения.СодержитВложенныйМаршрут Тогда
				
				ВыбраннаяФорма = "ФормаВложенногоМаршрута";
				СтандартнаяОбработка = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли Параметры.Свойство("ЗначениеКопирования") Тогда
			
			СодержитВложенныйМаршрут = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.ЗначениеКопирования, "СодержитВложенныйМаршрут");
			
			Если СодержитВложенныйМаршрут Тогда
				
				ВыбраннаяФорма = "ФормаВложенногоМаршрута";
				СтандартнаяОбработка = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли Параметры.Свойство("Ключ") Тогда
			
			СодержитВложенныйМаршрут = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Параметры.Ключ, "СодержитВложенныйМаршрут");
			
			Если СодержитВложенныйМаршрут Тогда
				
				ВыбраннаяФорма = "ФормаВложенногоМаршрута";
				СтандартнаяОбработка = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

//-- НЕ УТКА

#КонецОбласти