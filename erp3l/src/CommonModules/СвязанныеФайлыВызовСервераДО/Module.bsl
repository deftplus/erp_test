////////////////////////////////////////////////////////////////////////////////
// Работа со связанными файлами в ДО.
// Прямой вызов функций и процедур данного модуля не рекомендован.
// Используйте модуль "СвязанныеФайлыВызовСервера".
//

#Область ПрограммныйИнтерфейс

// Возвращает массив структур, описывающих файлы владельца независимо от места хранения
//
// Параметры:
//   Владелец - ЛюбаяСсылка - объект-владелец связанных файлов
//   ДокументID - идентификатор связанного объекта ДО (если не передан, будет определен автоматически)
//   ДокументТип - тип связанного объекта ДО (если не передан, будет определен автоматически)
//   ВключатьПомеченныеНаУдаление - Булево - Истина, если требуется получить и помеченные на удаление.
//
// Возвращаемое значение:
//   Массив - структуры, описывающие реквизиты связанных файлов
//
Функция СвязанныеФайлыПоВладельцу(Владелец, ДокументID = "", ДокументТип = "", 
				ВключатьПомеченныеНаУдаление = Ложь) Экспорт
	
	МассивФайлов = Новый Массив;
	
	Если ДокументID = ""
			и ИнтеграцияС1СДокументооборот.ДоступенФункционалВерсииСервиса(, Ложь) Тогда
					
		Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
		
		ExternalObject = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
		ExternalObject.id = Строка(Владелец.УникальныйИдентификатор());
		ExternalObject.type = Владелец.Метаданные().ПолноеИмя();
		ExternalObject.name = Строка(Владелец);
		
		Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetDocumentListRequest");
		Запрос.externalObjects.Добавить(ExternalObject);
		Запрос.columnSet.Добавить("name");
		
		Результат = Прокси.execute(Запрос);
		Если ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, Результат, "DMError") Тогда 
			Возврат МассивФайлов;
		КонецЕсли;
			
		Если ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, Результат, "DMGetObjectListResponse") Тогда
			Если Результат.items.Количество() > 0 Тогда
				ОбъектXDTO = Результат.items[0].object;
			КонецЕсли;
		Иначе
			Если Результат.documents.Количество() > 0 Тогда
				ОбъектXDTO = Результат.documents[0];
			КонецЕсли;
		КонецЕсли;
			
		Если ОбъектXDTO <> Неопределено Тогда
			ДокументID = ОбъектXDTO.objectId.id;
			ДокументТип = ОбъектXDTO.objectId.type;
		КонецЕсли;
		
	КонецЕсли;
	
	// найден или передан связанный документ ДО
	Если ДокументID <> "" Тогда
		ОтветСервиса = ИнтеграцияС1СДокументооборотВызовСервера.ФайлыПоВладельцу(
			ДокументID, "", ДокументТип, ВключатьПомеченныеНаУдаление);
		Для каждого Файл из ОтветСервиса.files Цикл
			ОписаниеФайла = СвязанныеФайлыВызовСервера.ПолучитьШаблонОписанияФайла();
			ОписаниеФайла.ИндексКартинки = 
				РаботаСФайламиСлужебныйКлиентСервер
					.ПолучитьИндексПиктограммыФайла(Файл.extension);
			ОписаниеФайла.Наименование = Файл.name;
			ОписаниеФайла.Расширение = Файл.extension;
			ОписаниеФайла.СвязанныйФайл = Файл.objectId.id;
			ОписаниеФайла.Идентификатор = Файл.objectId.id;
			ОписаниеФайла.ДатаТекущейВерсии = Файл.modificationDateUniversal;
			ОписаниеФайла.Размер = Файл.size;
			Если Файл.Свойства().Получить("deletionMark") <> Неопределено Тогда
				ОписаниеФайла.ПометкаУдаления = (Файл.deletionMark = Истина);
				Если ОписаниеФайла.ПометкаУдаления Тогда
					ОписаниеФайла.ИндексКартинки = ОписаниеФайла.ИндексКартинки + 1;
				КонецЕсли;
			Иначе
				ОписаниеФайла.ПометкаУдаления = Ложь;
			КонецЕсли;
			ОписаниеФайла.Комментарий = Файл.description;
			
			МассивФайлов.Добавить(ОписаниеФайла);
		КонецЦикла;
	КонецЕсли;
		
	Возврат МассивФайлов;
	
КонецФункции

// Возвращает структуру, описывающую файл, найденный по идентификатору 1С:Документооборот.
//
// Параметры:
//   ИдентификаторФайла - идентификатор связанного объекта ДО.
//
// Возвращаемое значение:
//  Структура, описывающая реквизиты найденного файла, если файл найден. 
//		Описание полей см. СвязанныеФайлыВызовСервера.ПолучитьШаблонОписанияФайла().
//	Неопределено, если файл не найден.
//
Функция ПолучитьФайлПоИдентификатору(ИдентификаторФайла) Экспорт
	ОписаниеФайла = Неопределено;
	
	Если НЕ ПустаяСтрока(ИдентификаторФайла) Тогда
		ДанныеФайла = ИнтеграцияС1СДокументооборотВызовСервера.ОписаниеФайла(ИдентификаторФайла);
		ОписаниеФайла = СвязанныеФайлыВызовСервера.ПолучитьШаблонОписанияФайла();
		ОписаниеФайла.ИндексКартинки = 
			РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(ДанныеФайла.Расширение);
		ОписаниеФайла.Наименование = ДанныеФайла.Наименование;
		ОписаниеФайла.Расширение = ДанныеФайла.Расширение;
		ОписаниеФайла.СвязанныйФайл = ДанныеФайла.ID;
		ОписаниеФайла.Идентификатор = ИдентификаторФайла;
		ОписаниеФайла.ДатаТекущейВерсии = ДанныеФайла.ДатаМодификацииУниверсальная;
		ОписаниеФайла.Размер = ДанныеФайла.Размер;
		ОписаниеФайла.ПометкаУдаления = Ложь;
		ОписаниеФайла.Комментарий = ДанныеФайла.Описание;
	КонецЕсли;
		
	Возврат ОписаниеФайла;
КонецФункции

// Возвращает структуру, описывающую файл, найденный по ссылке.
// Аналогична функции ПолучитьФайлПоИдентификатору.
//
Функция ПолучитьФайлПоСсылке(СсылкаНаФайл) Экспорт
	Возврат ПолучитьФайлПоИдентификатору(СсылкаНаФайл);
КонецФункции

// Возвращает файл, добавленный владельцу из временного хранилища и помещенный в ДО.
// Может приводить к автоматическому созданию связанного объекта.
//
// Параметры:
//   Владелец - ЛюбаяСсылка - объект-владелец связанных файлов
//   АдресВременногоХранилищаФайла - Строка - адрес временного хранилища, где размещен файл
//   Имя - Строка - имя помещаемого файла
//   Расширение - Строка - расширение помещаемого файла
//   Размер - Число - размер помещаемого файла
//   ВремяИзменения - Дата - дата и время файла на диске
//   ВремяИзмененияУниверсальное - Дата - дата и время UTC файла на диске 
//   ДокументID - идентификатор связанного объекта ДО (если не передан, будет определен автоматически)
//   ДокументТип - тип связанного объекта ДО (если не передан, будет определен автоматически)
//
// Возвращаемое значение:
//   Строка - идентификатор файла ДО.
//
Функция ДобавитьФайлИзВременногоХранилища(Владелец, АдресВременногоХранилищаФайла, Имя, Расширение, Размер,
			ВремяИзменения, ВремяИзмененияУниверсальное, ДокументID = "", ДокументТип = "") Экспорт
			
	Если Не ЗначениеЗаполнено(ДокументID) 
		И ИнтеграцияС1СДокументооборот.ДоступенФункционалВерсииСервиса(, Ложь) Тогда
		
		// попытаемся найти связанный объект
		
		Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();

		ExternalObject = ИнтеграцияС1СДокументооборот.СоздатьОбъект(
								Прокси, "ExternalObject");
		ExternalObject.id = Строка(Владелец.УникальныйИдентификатор());
		ExternalObject.type = Владелец.Метаданные().ПолноеИмя();
		ExternalObject.name = Строка(Владелец);
		
		Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(
					Прокси, "DMGetDocumentListRequest");
		Запрос.externalObjects.Добавить(ExternalObject);
		Запрос.columnSet.Добавить("name");
		
		Результат = Прокси.execute(Запрос);
		Если ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, Результат, "DMError") Тогда 
			Возврат Неопределено;
		КонецЕсли;
			
		Если ИнтеграцияС1СДокументооборот.ПроверитьТип(
					Прокси, Результат, "DMGetObjectListResponse") Тогда
			Если Результат.items.Количество() > 0 Тогда
				ОбъектXDTO = Результат.items[0].object;
			КонецЕсли;
		Иначе
			Если Результат.documents.Количество() > 0 Тогда
				ОбъектXDTO = Результат.documents[0];
			КонецЕсли;
		КонецЕсли;
			
		Если ОбъектXDTO <> Неопределено Тогда
			ДокументID = ОбъектXDTO.objectId.id;
			ДокументТип = ОбъектXDTO.objectId.type;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокументID) Тогда // соответствие не найдено, создадим новый объект
			Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(Владелец);
			Если Правила.Количество() <> 0 Тогда
				ДокументXDTO = ИнтеграцияС1СДокументооборот.СоздатьОбъектДОПоПравилу(Прокси,
					Владелец,
					Правила[0].Ссылка);
				Если ДокументXDTO <> Неопределено Тогда
					ДокументID = ДокументXDTO.objectId.ID;
					ДокументТип = ДокументXDTO.objectId.type;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("Имя", Имя);
	ПараметрыСоздания.Вставить("Расширение", Расширение);
	ПараметрыСоздания.Вставить("Размер", Размер);
	ПараметрыСоздания.Вставить("ВремяИзменения", ВремяИзменения);
	ПараметрыСоздания.Вставить("ВремяИзмененияУниверсальное", ВремяИзмененияУниверсальное);
	ПараметрыСоздания.Вставить("АдресВременногоХранилищаФайла", АдресВременногоХранилищаФайла);
	ПараметрыСоздания.Вставить("Текст", "");
	ПараметрыСоздания.Вставить("ВебКлиент", Ложь);
	
	Результат = ИнтеграцияС1СДокументооборотВызовСервера
					.СоздатьИзФайлаНаДискеСервер(ПараметрыСоздания, 
						ДокументID, ДокументТип, "");
		
	Возврат Результат;	
КонецФункции

// Возвращает файл, добавленный владельцу копированием шаблона и помещенный в ДО.
// Может приводить к автоматическому созданию связанного объекта.
//
// Параметры:
//   Владелец - ЛюбаяСсылка - объект-владелец связанных файлов или папка при хранении в этой ИБ
//   Шаблон - СправочникСсылка.Файлы - шаблон для копирования
//   ДокументID - идентификатор связанного объекта ДО (если не передан, будет определен автоматически)
//   ДокументТип - тип связанного объекта ДО (если не передан, будет определен автоматически)
//
// Возвращаемое значение:
//   Строка - идентификатор файла ДО.
//
Функция ДобавитьФайлИзШаблона(Владелец, Шаблон, ДокументID = "", ДокументТип = "") Экспорт
			
	Если Не ЗначениеЗаполнено(ДокументID) 
		И ИнтеграцияС1СДокументооборот.ДоступенФункционалВерсииСервиса(, Ложь) Тогда
		
		// попытаемся найти связанный объект
		
		Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
			
		ExternalObject = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "ExternalObject");
		ExternalObject.id = Строка(Владелец.УникальныйИдентификатор());
		ExternalObject.type = Владелец.Метаданные().ПолноеИмя();
		ExternalObject.name = Строка(Владелец);
		
		Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMGetDocumentListRequest");
		Запрос.externalObjects.Добавить(ExternalObject);
		Запрос.columnSet.Добавить("name");
		
		Результат = Прокси.execute(Запрос);
		Если ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, Результат, "DMError") Тогда 
			Возврат Неопределено;
		КонецЕсли;
			
		Если ИнтеграцияС1СДокументооборот.ПроверитьТип(Прокси, Результат, "DMGetObjectListResponse") Тогда
			Если Результат.items.Количество() > 0 Тогда
				ОбъектXDTO = Результат.items[0].object;
			КонецЕсли;
		Иначе
			Если Результат.documents.Количество() > 0 Тогда
				ОбъектXDTO = Результат.documents[0];
			КонецЕсли;
		КонецЕсли;
			
		Если ОбъектXDTO <> Неопределено Тогда
			ДокументID = ОбъектXDTO.objectId.id;
			ДокументТип = ОбъектXDTO.objectId.type;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ДокументID) Тогда // соответствие не найдено, создадим новый объект
			Правила = ИнтеграцияС1СДокументооборотВызовСервера.ПодходящиеПравила(Владелец);
			Если Правила.Количество() <> 0 Тогда
				ДокументXDTO = ИнтеграцияС1СДокументооборот.СоздатьОбъектДОПоПравилу(Прокси,
					Владелец,
					Правила[0].Ссылка);
				Если ДокументXDTO <> Неопределено Тогда
					ДокументID = ДокументXDTO.objectId.ID;
					ДокументТип = ДокументXDTO.objectId.type;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ВерсияШаблона = Шаблон.ТекущаяВерсия;
	//Если ВерсияШаблона.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
	//	ХранилищеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(ВерсияШаблона);
	//	ДвоичныеДанные = ХранилищеФайла.Получить();
	//Иначе // тома
	//	ПолныйПутьФайлаШаблона = РаботаСФайламиСлужебный.ПолныйПутьТома(ВерсияШаблона.Том) + ВерсияШаблона.ПутьКФайлу;
	//	ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПутьФайлаШаблона);
	//КонецЕсли;
	
	ДанныеФайлаИДвоичныеДанные = РаботаСФайламиСлужебныйВызовСервера
			.ДанныеФайлаИДвоичныеДанные(ВерсияШаблона);
	ДвоичныеДанные =ДанныеФайлаИДвоичныеДанные.ДвоичныеДанные.Получить();
		
		
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	Запрос = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMAddFileRequest");
	
	ОбъектВладелец = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMObject");
	ОбъектВладелец.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, ДокументID, ДокументТип);
	ОбъектВладелец.name = Строка(Владелец);
	
	Запрос.owner = ОбъектВладелец;
	
	Запрос.file = ИнтеграцияС1СДокументооборот.СоздатьОбъект(Прокси, "DMFile");
	Запрос.file.objectId = ИнтеграцияС1СДокументооборот.СоздатьObjectID(Прокси, "", "DMFile");
	
	Запрос.file.binaryData = ДвоичныеДанные;
	Запрос.file.extension = Шаблон.ТекущаяВерсияРасширение;
	Запрос.file.modificationDate = Шаблон.ТекущаяВерсияДатаМодификацииФайла;
	Запрос.file.modificationDateUniversal = Шаблон.ТекущаяВерсияДатаМодификацииФайла;
	Запрос.file.name = Шаблон.Наименование;
	Запрос.file.size = Шаблон.ТекущаяВерсияРазмер;
	
	Размер = ДвоичныеДанные.Размер();
	МаксРазмерФайла = ИнтеграцияС1СДокументооборотВызовСервера.МаксимальныйРазмерПередаваемогоФайла();
	РазмерВМб = Размер / 1048576;
	РазмерВМбМакс = МаксРазмерФайла / 1048576;
	
	Если Размер > МаксРазмерФайла Тогда
		                                                    
		ВызватьИсключение
			   СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				 НСтр("ru = 'Размер файла ""%1"" (%2 Мб) превышает максимально допустимый размер файла для передачи (%3 Мб).'"),
				 Шаблон.Наименование, 
				 РаботаСФайламиСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб),           
				 РаботаСФайламиСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМбМакс));
	КонецЕсли;
	
	Текст = Шаблон.ТекстХранилище.Получить();
	Если НЕ ПустаяСтрока(Текст) Тогда
		Запрос.file.text = Текст;
	КонецЕсли;
	
	Ответ = Прокси.execute(Запрос);
	ИнтеграцияС1СДокументооборот.ПроверитьВозвратВебСервиса(Прокси, Ответ);
		
	Возврат Ответ.file.objectId.id; 
КонецФункции

// Обновить файл, добавленный владельцу из временного хранилища и помещенный в ДО.
// Может приводить к автоматическому созданию связанного объекта.
//
// Параметры:
//   Владелец - ЛюбаяСсылка - объект-владелец связанных файлов
//   АдресВременногоХранилищаФайла - Строка - адрес временного хранилища, где размещен файл
//   Имя - Строка - имя помещаемого файла
//   Расширение - Строка - расширение помещаемого файла
//   Размер - Число - размер помещаемого файла
//   ВремяИзменения - Дата - дата и время файла на диске
//   ВремяИзмененияУниверсальное - Дата - дата и время UTC файла на диске 
//   ДокументID - идентификатор связанного объекта ДО (если не передан, будет определен автоматически)
//   ДокументТип - тип связанного объекта ДО (если не передан, будет определен автоматически)
//
// Возвращаемое значение:
//   Булево - Истина, если файл обновлен успешно.
//
Функция ОбновитьФайлИзВременногоХранилища(ИдентификаторФайла, Владелец,
				АдресВременногоХранилищаФайла, Имя, Расширение, Размер,
			ВремяИзменения, ВремяИзмененияУниверсальное) Экспорт
			
	Результат = Ложь;
	
	ПараметрыСоздания = Новый Структура;
	ПараметрыСоздания.Вставить("Имя", Имя);
	ПараметрыСоздания.Вставить("Расширение", Расширение);
	ПараметрыСоздания.Вставить("Размер", Размер);
	ПараметрыСоздания.Вставить("ДатаМодификации", ВремяИзменения);
	ПараметрыСоздания.Вставить("ДатаМодификацииУниверсальная", ВремяИзмененияУниверсальное);
	ПараметрыСоздания.Вставить("АдресВременногоХранилищаФайла", АдресВременногоХранилищаФайла);
	ПараметрыСоздания.Вставить("Текст", "");
	ПараметрыСоздания.Вставить("Идентификатор", ИдентификаторФайла);
	ПараметрыСоздания.Вставить("ОсвободитьФайл", Истина);
	ПараметрыСоздания.Вставить("ОбновитьСведенияОРедактировании", Ложь);
	
	Результат = ИнтеграцияС1СДокументооборотВызовСервера
					.ОбновитьФайлДвоичнымиДаннымиВременногоХранилища(
						ПараметрыСоздания);
		
	Возврат Результат;	
КонецФункции

// Возвращает массив структур, описывающих версии файла.
//
// Параметры:
//   ИдентификаторФайла - Строка - идентификатор файла в ДО
//   ВключатьПомеченныеНаУдаление - Булево - Истина, если требуется
//		получить и помеченные на удаление.
//
// Возвращаемое значение:
//   Массив - структуры, описывающие реквизиты версий файла
//
Функция ВерсииФайла(ИдентификаторФайла, ВключатьПомеченныеНаУдаление = Ложь) Экспорт
	
	МассивВерсий = Новый Массив;
		
	РезультатыЗапроса = ИнтеграцияС1СДокументооборотВызовСервера.ВерсииФайла(
		ИдентификаторФайла, ВключатьПомеченныеНаУдаление);
	Для каждого РезультатЗапроса из РезультатыЗапроса Цикл
		ВерсияФайла = РезультатЗапроса.object;
		ОписаниеВерсии = Новый Структура;
		ОписаниеВерсии.Вставить("ИндексКартинки", 
			РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(
					ВерсияФайла.extension));
		ОписаниеВерсии.Вставить("Наименование", ВерсияФайла.name);
		ОписаниеВерсии.Вставить("Расширение", ВерсияФайла.extension);
		ОписаниеВерсии.Вставить("ВерсияФайла", ВерсияФайла.objectId.id);
		ОписаниеВерсии.Вставить("Идентификатор", ВерсияФайла.objectId.id);
		ОписаниеВерсии.Вставить("ДатаСоздания", ВерсияФайла.creationDate);
		ОписаниеВерсии.Вставить("ДатаМодификации", ВерсияФайла.modificationDate);
		ОписаниеВерсии.Вставить("Размер", ВерсияФайла.size);
		Если ВерсияФайла.Свойства().Получить("deletionMark") <> Неопределено Тогда
			ОписаниеВерсии.Вставить("ПометкаУдаления", (ВерсияФайла.deletionMark = Истина));
			Если ОписаниеВерсии.ПометкаУдаления Тогда
				ОписаниеВерсии.ИндексКартинки = ОписаниеВерсии.ИндексКартинки + 1;
			КонецЕсли;
		Иначе
			ОписаниеВерсии.Вставить("ПометкаУдаления", Ложь);
		КонецЕсли;
		МассивВерсий.Добавить(ОписаниеВерсии);
	КонецЦикла;
		
	Возврат МассивВерсий;
КонецФункции

// Помечает на удаление или снимает пометку с указанного файла.
//
// Параметры:
//   ИдентификаторФайла - Строка - идентификатор файла в ДО.
//
Процедура ПометитьНаУдалениеСнятьПометку(ИдентификаторФайла) Экспорт
	Прокси = ИнтеграцияС1СДокументооборотПовтИсп.ПолучитьПрокси();
	ИнтеграцияС1СДокументооборот.ПометитьНаУдалениеСнятьПометку(Прокси, ИдентификаторФайла, "DMFile");
КонецПроцедуры

// Изменить пометку на удаление для файлов принадлежащих Владелец
//
// Параметры:
//	ПометкаНаУдаление - Булево, Истина - установить, Ложь - снять пометку на удаление.
//	Владелец - ЛюбаяСсылка - объект-владелец связанных файлов.
//	ДокументID - идентификатор связанного объекта ДО (если не передан, будет определен автоматически).
//	ДокументТип - тип связанного объекта ДО (если не передан, будет определен автоматически).
//
Процедура ПометитьНаУдалениеПоВладельцу(ПометкаНаУдаление, Владелец, ДокументID = "", ДокументТип = "") Экспорт
	мФайлы = СвязанныеФайлыПоВладельцу(Владелец, ДокументID, ДокументТип, НЕ ПометкаНаУдаление);
	
	Для Каждого ОписаниеФайла Из мФайлы Цикл
		Если ОписаниеФайла.ПометкаУдаления <> ПометкаНаУдаление Тогда
			ПометитьНаУдалениеСнятьПометку(ОписаниеФайла.СвязанныйФайл);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получить ссылку на файл по его идентификатору. Возвращает переданный идентификатор.
// Необходима для унифицированной обработки идентификатора файла, с целью последующей передачи в другие функции.
// В рамках данного модуля можно не использовать.
//
// Параметры:
//   ИдентификаторФайла - Строка - идентификатор файла в ДО.
//
// Возвращает:
//	Строка, возвращает переданный идентификатор файла.
//
Функция ПолучитьСсылкуНаФайл(ИдентификаторФайла) Экспорт
	Возврат ИдентификаторФайла;
КонецФункции

// Получить идентификатор файла в 1С:Документооборот.
// Вспомогательная функция для унификации идентификатора файла.
//
// Параметры:
//	СсылкаНаФайл - Строка - обобщенная ссылка на файл, помещеенный в базу.
//
// Возвращает:
//	Строка - идентификатор в 1С:Документооборот.
//
Функция ПолучитьИдентификаторФайлаПоСсылке(СсылкаНаФайл) Экспорт
	Возврат СсылкаНаФайл;
КонецФункции

// Получить данные для открытия функцией СвязанныеФайлыКлиент.ОткрытьФайлДляПросмотра(ДанныеФайла)
//
Функция ПолучитьДанныеФайлаДляОткрытия(ИдентификаторФайла, УникальныйИдентификаторФормы) Экспорт
	ДанныеФайла = ПолучитьФайлПоИдентификатору(ИдентификаторФайла);
	ДанныеФайла.Вставить("ИспользоватьИнтеграциюС1СДокументооборот", Истина);
	Возврат ДанныеФайла;
КонецФункции



#КонецОбласти
