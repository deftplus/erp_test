
#Область ПрограммныйИнтерфейс

Процедура ОбработкаРасшифровки_ОтветственныеОбъектов(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;

	ПараметрыРасшифровки = Новый Структура("АдресСКД,ДанныеРасшифровки", ФормаОтчета.НастройкиОтчета.АдресСхемы, ФормаОтчета.ОтчетДанныеРасшифровки);
	
	Отбор = ТиповыеОтчетыУХ.ПолучитьОтборРасшифровки(Расшифровка, ФормаОтчета.ОтчетДанныеРасшифровки, Истина);
	ОчиститьПустые(Отбор);
	
	ОтборРасшифровки = Новый Структура("Организация,Роль");
	ОтборРасшифровки.Вставить("Организация",	Отбор.Получить("Организация"));
	ОтборРасшифровки.Вставить("Роль", 			Отбор.Получить("Роль"));
	
	Если Не ЗначениеЗаполнено(ОтборРасшифровки.Организация) 
		Или Не ЗначениеЗаполнено(ОтборРасшифровки.Роль) Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(
								ФормаОтчета.ОтчетДанныеРасшифровки, 
								Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПараметрыРасшифровки.АдресСКД)
							);
							
	ДопПараметры = Новый Структура("Расшифровка, ФормаОтчета, Отбор, ОтборРасшифровки, РасшифровкаВТеле, ПараметрыРасшифровки", 
									Расшифровка, ФормаОтчета, Отбор, ОтборРасшифровки, Ложь, ПараметрыРасшифровки);

	ДопПункты = Новый СписокЗначений;
	ДопПункты.Добавить("УстановитьПользователя",	НСтр("ru = 'Установить ответственного'"));
	ДопПункты.Добавить("УдалитьОтветственных", 		НСтр("ru = 'Удалить ответственных'"));
	
	ОписаниеОповещения 
			= Новый ОписаниеОповещения(
				"Подключаемый_ОбработкаРасшифровкиОтветственныеОбъектовЗавершение", 
				СверкаВГОКлиентУХ, 
				ДопПараметры
			);
	
	ДоступныеДействия = Новый Массив;
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	
	ОбработкаРасшифровки.ПоказатьВыборДействия(ОписаниеОповещения, Расшифровка, ДоступныеДействия, ДопПункты);
	
КонецПроцедуры

Процедура ОбработкаРасшифровки_ОтчетПорталаВГО(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт

	СтандартнаяОбработка = Ложь;

	ПараметрыРасшифровки = Новый Структура("АдресСКД,ДанныеРасшифровки", ФормаОтчета.НастройкиОтчета.АдресСхемы, ФормаОтчета.ОтчетДанныеРасшифровки);
	
	Отбор = ТиповыеОтчетыУХ.ПолучитьОтборРасшифровки(Расшифровка, ФормаОтчета.ОтчетДанныеРасшифровки, Истина);
	ОтборПолный = ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(Отбор);
	ОчиститьПустые(Отбор);
	Если ЗначениеЗаполнено(ОтборПолный.Получить("Расхождение.РасхожденийОсталосьУрегулироватьГр")) Тогда
		Отбор.Вставить("РасхожденийОсталосьУрегулироватьГр", ОтборПолный.Получить("Расхождение.РасхожденийОсталосьУрегулироватьГр"));
	КонецЕсли;
	
	ОтборРасшифровки = Новый Структура("Сценарий,ПериодСценария,ПериодСверки,Организация,Контрагент,РазделСверки");
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ОтборРасшифровки, Отбор, Истина);
	Если ЗначениеЗаполнено(ОтборРасшифровки.ПериодСверки) Тогда
		ОтборРасшифровки.Вставить("ПериодСценария", ОтборРасшифровки.ПериодСверки);
	КонецЕсли;
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(
								ФормаОтчета.ОтчетДанныеРасшифровки, 
								Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПараметрыРасшифровки.АдресСКД)
							);
							
	ДопПараметры = Новый Структура("Расшифровка, ФормаОтчета, Отбор, ОтборРасшифровки, РасшифровкаВТеле, ПараметрыРасшифровки", 
									Расшифровка, ФормаОтчета, Отбор, ОтборРасшифровки, Ложь, ПараметрыРасшифровки);
									
									
	Если ОтборРасшифровки.Свойство("ЭкземплярОтчета") Тогда //для Отчет.ОтчетОКорректировках
		
		ПараметрыФормы = Новый Структура("ЭкземплярОтчета,СписокПоказателей,тПериод", 
								ОтборРасшифровки.ЭкземплярОтчета, Новый СписокЗначений);
		Если ОтборРасшифровки.Свойство("Показатель") Тогда
			ПараметрыФормы.СписокПоказателей.Добавить(ОтборРасшифровки.Показатель); 		
		КонецЕсли;
		ПараметрыФормы.Вставить("СписокПоказателей", ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ОтборРасшифровки, "Показатель"));
		
		ДопПараметры.Вставить("ПараметрыФормы", ПараметрыФормы);

	Иначе //для СКД-отчета ВГО	
		ДопПараметры.Вставить("ИспользоватьПользовательскиеНастройки", Истина);
	КонецЕсли;								
	
	ДопПункты = Новый СписокЗначений;
	
	ДобавитьПункты_ПорталВГО(ДопПункты, ОтборПолный);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаРасшифровкиЗавершение", МСФОКлиентУХ, ДопПараметры);
	
	ДоступныеДействия = Новый Массив;
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	
	ОбработкаРасшифровки.ПоказатьВыборДействия(ОписаниеОповещения, Расшифровка, ДоступныеДействия, ДопПункты);
	
КонецПроцедуры

Процедура ОбработкаРасшифровки_АктВГО(ФормаОтчета, Элемент, Расшифровка, СтандартнаяОбработка) Экспорт
	
	Отчет = ФормаОтчета.Отчет;
	ДанныеРасшифровки = ФормаОтчета.ОтчетДанныеРасшифровки;
	
	мПоляРасшифровки = СверкаВГОВызовСервераУХ.ПолучитьПоляРасшифровки(Отчет.КомпоновщикНастроек.ПользовательскиеНастройки, ДанныеРасшифровки, Расшифровка);
	
	СтандартнаяОбработка = Ложь;
	
	ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Новый ИсточникДоступныхНастроекКомпоновкиДанных(Отчет));
	
	ДоступныеДействия = Новый Массив();
	ДоступныеДействия.Добавить(ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение);
	
	ДополнительныеДействия = Новый СписокЗначений;
	ДополнительныеДействия.Добавить("Расшифровать");
	
	ДопПараметры = Новый Структура("мПоляРасшифровки, Расшифровка, ДанныеРасшифровки", мПоляРасшифровки, Расшифровка, ДанныеРасшифровки);
	Оповещение = Новый ОписаниеОповещения("АктВГО_ОбработкаРасшифровкиЗавершение", ЭтотОбъект, ДопПараметры);
	
	ОбработкаРасшифровки.ПоказатьВыборДействия(Оповещение, Расшифровка, ДоступныеДействия, ДополнительныеДействия);
	
КонецПроцедуры

Процедура АктВГО_ОбработкаРасшифровкиЗавершение(ВыбранноеДействие, ПараметрыВыбранногоДействия, ДополнительныеПараметры) Экспорт
    
    мПоляРасшифровки 	= ДополнительныеПараметры.мПоляРасшифровки;
    Расшифровка			= ДополнительныеПараметры.Расшифровка;
	ДанныеРасшифровки	= ДополнительныеПараметры.ДанныеРасшифровки;
	
    // Осуществим выбор действия расшифровки пользователем.
    
    Если ПараметрыВыбранногоДействия <> Неопределено Тогда
		
		Если ВыбранноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.ОткрытьЗначение Тогда
			
			ПоказатьЗначение(, ПараметрыВыбранногоДействия);
				
        Иначе
			
			ПараметрыФормы = Новый Структура;
            ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
            ПараметрыФормы.Вставить("Расшифровка", Новый ОписаниеОбработкиРасшифровкиКомпоновкиДанных(ДанныеРасшифровки, Расшифровка, ПараметрыВыбранногоДействия));
			
			ОткрытьФорму("Отчет.РасхожденияВГОДляПисьма.Форма", ПараметрыФормы, , Истина);
			
		КонецЕсли;
		
    Иначе
		                                  	
		Если ВыбранноеДействие = "Расшифровать" Тогда
			
			ПараметрыФормы = Новый Структура;
            ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
            ПараметрыФормы.Вставить("ПоляРасшифровки", мПоляРасшифровки);
			
			ОткрытьФорму("Отчет.РасшифровкаРасхожденийВГО.Форма", ПараметрыФормы, , Истина);
			
		КонецЕсли;
		
    КонецЕсли;
    
КонецПроцедуры

Процедура Подключаемый_ОбработкаРасшифровкиОтветственныеОбъектовЗавершение(
		ВыполненноеДействие, ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(ВыполненноеДействие) 
			= Тип("ДействиеОбработкиРасшифровкиКомпоновкиДанных") Тогда
		
		МСФОКлиентУХ.Расшифровать_Стандартно(
				ВыполненноеДействие, 
				ПараметрВыполненногоДействия, 
				ДополнительныеПараметры
			);
			
		Возврат;
		
	ИначеЕсли СтрНачинаетсяС(ВыполненноеДействие, "УстановитьПользователя") Тогда
		
		Отбор = ДополнительныеПараметры.Отбор;
		ТекущееЗначение = Отбор.Получить("Пользователи");
		МножественныйВыбор = Не ОбщегоНазначенияУХ.ЗначениеРеквизитаОбъекта(
								Отбор.Получить("Роль"), "ПроверятьУникальность");
		ПараметрыФормы = ПараметрыПодбораПользователя(ТекущееЗначение, 
							МножественныйВыбор, Ложь, ТекущееЗначение);
		
		Оповещение = Новый ОписаниеОповещения(
							"Подключаемый_ВыборПользователяОтветственных", 
							СверкаВГОКлиентУХ, 
							ДополнительныеПараметры
						);
		
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", 
						ПараметрыФормы, 
						ДополнительныеПараметры.ФормаОтчета, 
						Истина,
						,
						,
						Оповещение
					);
		
		Возврат;
		
	ИначеЕсли СтрНачинаетсяС(ВыполненноеДействие, "УдалитьОтветственных") Тогда
		
		СверкаВГОВызовСервераУХ.УдалитьОтветственных(
				ДополнительныеПараметры.Отбор.Получить("Организация"),
				ДополнительныеПараметры.Отбор.Получить("Роль")
			);
			
		ОтчетыКлиент.СформироватьОтчет(ДополнительныеПараметры.ФормаОтчета);
		
		Возврат;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура Расшифровать_ДействиеПорталаВГО(ВыполненноеДействие, 
		ПараметрВыполненногоДействия, ДополнительныеПараметры) Экспорт

	Отбор = ДополнительныеПараметры.ОтборРасшифровки;
	ФормаОтчета = ДополнительныеПараметры.ФормаОтчета;
	
 	Если СтрЗаканчиваетсяНа(ВыполненноеДействие, "УрегулированиеРасхожденияВГО") Тогда
		
		ПараметрыЗаполнения = Новый Структура("Организация,Контрагент,Сценарий,
											|ПериодСценария,ВалютаВзаиморасчетов,
											|РазделВГО,СторонаУрегулирования,
											|СуммаОрганизации,СуммаКонтрагента,СуммаУрегулирования");
		
		ЗаполнитьЗначенияСвойств(ПараметрыЗаполнения, Отбор);
		
		Расхождение = Макс(Отбор.РасхожденийОсталосьУрегулироватьГр, 
							- Отбор.РасхожденийОсталосьУрегулироватьГр);
		
		ПараметрыЗаполнения.Вставить("СторонаУрегулирования", 	Отбор.СторонаСверки);
		ПараметрыЗаполнения.Вставить("СуммаУрегулирования", 	Расхождение);
		ПараметрыЗаполнения.Вставить("СуммаУрегулированияГр", 	Расхождение);
		
		Параметры = Новый Структура("ПараметрыЗаполнения", ПараметрыЗаполнения);
		
		ОткрытьФорму("Документ.УрегулированиеРасхожденияВГО.ФормаОбъекта", Параметры, ФормаОтчета);
		
	ИначеЕсли СтрЗаканчиваетсяНа(ВыполненноеДействие, "МастерУрегулирования") Тогда
		
		ПараметрыФормы = Новый Структура("ПериодСверки, Сценарий, Отбор");
		ПараметрыФормы.ПериодСверки 	= Отбор.ПериодСценария;
		ПараметрыФормы.Сценарий 		= Отбор.Сценарий;
		ПараметрыФормы.Отбор 			= Отбор;
		
		ОткрытьФорму("Обработка.ПорталСверкиВГО.Форма.АвтоматическоеУрегулирование", 
						ПараметрыФормы, ФормаОтчета);
		
	ИначеЕсли СтрЗаканчиваетсяНа(ВыполненноеДействие, "ДобавитьКомментарий") Тогда
		
		КомментироватьРасхождениеПорталаВГО(Отбор, "");
		
	Иначе //события без форм
		
		РезультатДействия = СверкаВГОВызовСервераУХ.ВыполненитьДействиеПорталаВГО(
								ВыполненноеДействие, Отбор);
		
		Если РезультатДействия = Истина Тогда
			//**Оповестить
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Вспомогательные

Функция ПараметрыПодбораПользователя(ТекущаяСтрока, МножественныйВыбор = Ложь, 
			ВыборГруппПользователей = Ложь, ВыбранныеПользователи = Неопределено)

	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("РежимВыбора", 				Истина);
	ПараметрыПодбора.Вставить("ТекущаяСтрока", 				ТекущаяСтрока);
	ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе", 		Истина);
	ПараметрыПодбора.Вставить("МножественныйВыбор", 		МножественныйВыбор);
	ПараметрыПодбора.Вставить("РасширенныйПодбор", 			Ложь);
	ПараметрыПодбора.Вставить("ЗаголовокФормыПодбора", 		НСтр("ru = 'Подбор ответственных сверки ВГО'"));
	ПараметрыПодбора.Вставить("ВыборГруппПользователей",	ВыборГруппПользователей);
	ПараметрыПодбора.Вставить("ВыбранныеПользователи", 		ВыбранныеПользователи);

	Возврат ПараметрыПодбора;
	
КонецФункции

Процедура Подключаемый_ВыборПользователяОтветственных(Результат, ДополнительныеПараметры) Экспорт

	Если Результат = Неопределено Тогда
		Возврат;//отмена
	КонецЕсли;
	
	Отбор = ДополнительныеПараметры.ОтборРасшифровки;
	
	СверкаВГОВызовСервераУХ.ЗаписатьОтветственного(
		Отбор.Организация, Отбор.Роль, Результат);

	ОтчетыКлиент.СформироватьОтчет(ДополнительныеПараметры.ФормаОтчета);
	
КонецПроцедуры

Процедура КомментироватьРасхождениеПорталаВГО(Отбор, ТекстОшибки)
	
	Незаполненные = ПолучитьНезаполненные(Отбор, "Организация, Контрагент, РазделВГО, ВалютаВзаиморасчетов");
	Если Незаполненные.Количество() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Незаполненные'") + СтрСоединить(Незаполненные, ", "));
		Возврат;
	КонецЕсли;
	
	РеквизитыПредметаКомментирования = Новый Структура("ПериодСценария, Сценарий, Отправитель, Этап, Получатель, РазделВГО, ВалютаВзаиморасчетов, ДопАналитикаРасхождения, Сумма, Пользователь");
	ЗаполнитьЗначенияСвойств(РеквизитыПредметаКомментирования, Отбор);
	РеквизитыПредметаКомментирования.Отправитель = Отбор.Организация;
	РеквизитыПредметаКомментирования.Получатель = Отбор.Контрагент;
	РеквизитыПредметаКомментирования.Сумма = 0;
	РеквизитыПредметаКомментирования.Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	ПредметКомментирования = Неопределено;
	ОписаниеПредметаКомментирования = УниверсальныеКомментарииВызовСервераУХ.ПодготовитьОписаниеПредметаКомментированияВГО(
										ПредметКомментирования, РеквизитыПредметаКомментирования, ТекстОшибки);
		
	Если ОписаниеПредметаКомментирования <> Неопределено Тогда
		
		ПредметКомментирования = УниверсальныеКомментарииКлиентУХ.ОткрытьОкноКомментирования(ОписаниеПредметаКомментирования);
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНезаполненные(Отбор, КлючиПроверкиСтрокой)

	Результат = Новый Массив;
	
	Проверки = Новый Структура(КлючиПроверкиСтрокой);
	Для каждого ТекущийКлюч Из Проверки Цикл
		
		Если Отбор.Свойство(ТекущийКлюч.Ключ) И ЗначениеЗаполнено(Отбор[ТекущийКлюч.Ключ]) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(ТекущийКлюч.Ключ);
		
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

Процедура ОчиститьПустые(Отбор, ОчищатьОтборыСТочкой = Истина)
	
	Для каждого ЭлементОтбора Из Отбор Цикл
		Если Не ЗначениеЗаполнено(ЭлементОтбора.Значение) Тогда
			Отбор.Удалить(ЭлементОтбора.Ключ);
		ИначеЕсли ОчищатьОтборыСТочкой И СтрНайти(ЭлементОтбора.Ключ, ".") > 0 Тогда
			Отбор.Удалить(ЭлементОтбора.Ключ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПункты_ПорталВГО(ДопПункты, Отбор)

	Если Отбор.Получить("РазделВГО") = Неопределено Тогда //ШахматкаВГО
		Детали = СтрШаблон("<%1> - <%2>", Отбор.Получить("Организация"), Отбор.Получить("Контрагент"));
		ДопПункты.Добавить("Отчет.ХодСверкиВГО.Форма", НСтр("ru = 'Ход сверки '") + Детали);
	КонецЕсли;
	
	Если Отбор.Получить("Показатель") <> Неопределено Тогда //РасшифровкаРасхожденийВГО
	    Детали = НСтр("ru = 'Отчет о корректировках показателя <%1>'");
		ДопПункты.Добавить("Отчет.ОтчетОКорректировках.Форма",  СтрШаблон(Детали, Отбор.Получить("Показатель")));
	ИначеЕсли Отбор.Получить("РазделВГО") <> Неопределено Тогда // ХодСверкиВГО
		
		Статус = Отбор.Получить("Расхождение.Состояние");
		Расхождение = Отбор.Получить("Расхождение.РасхожденийОсталосьУрегулироватьГр");
		
		Если ЗначениеЗаполнено(Отбор.Получить("РазделВГО")) Тогда
			
			Если ЗначениеЗаполнено(Расхождение) Тогда
				
				Если Статус = ПредопределенноеЗначение("Перечисление.СостояниеСверкиВГО.Спор") Тогда
					ДопПункты.Добавить("ДействиеПорталаВГО.ПодтвердитьСумму", НСтр("ru = 'Подтвердить сумму'"));
				Иначе	
					ДопПункты.Добавить("ДействиеПорталаВГО.ОткрытьСпор", НСтр("ru = 'Открыть спор'"));
				КонецЕсли;
				
				ДопПункты.Добавить("ДействиеПорталаВГО.УрегулированиеРасхожденияВГО", 
					НСтр("ru = 'Урегулировать расхождение'"));
			
			КонецЕсли;
			
			ДопПункты.Добавить("ДействиеПорталаВГО.ДобавитьКомментарий", НСтр("ru = 'Добавить комментарий'"));
			
		КонецЕсли;
		
		Детали = СтрШаблон("<%1> - <%2>", Отбор.Получить("Организация"), Отбор.Получить("Контрагент"));
		ДопПункты.Добавить("Отчет.РасшифровкаРасхожденийВГО.Форма/Основной", НСтр("ru = 'Расшифровка расхождения '") + Детали);
		
		Детали = СтрШаблон("<%1> - <%2>", Отбор.Получить("Контрагент"), Отбор.Получить("Организация"));
		ДопПункты.Добавить("Отчет.РасшифровкаРасхожденийВГО.Форма/Контрагент", НСтр("ru = 'Расшифровка расхождения '") + Детали);
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
