
#Область ПрограммныйИнтерфейс
	
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область СобытияМодуляФормы

#Область ФормаДокумента

#Область СтандартныеОбработчики

Процедура ФормаДокумента_ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	АналитикиПланированияДокументов.ПриЧтенииНаСервере(Форма);
КонецПроцедуры

Процедура ФормаДокумента_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;
	
	#Область УниверсальныеПроцессыСогласование
	ДействияСогласованиеУХСервер.НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта(Форма);
	Элементы.Переместить(Элементы.ГруппаСтатусыСогласования, Форма, Элементы.ГруппаСтраницы);
	#КонецОбласти
	
	АналитикиПланированияДокументов.ПриСозданииНаСервере(Форма, Элементы.Комментарий.Родитель, Элементы.Комментарий);
	КонтрольУХ.ПодготовитьФормуНаСервере(Форма, Форма.Элементы.ГруппаСтраницы);
	
КонецПроцедуры

Процедура ФормаДокумента_ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	КонтрольУХ.ИнициализироватьРезультатыКонтроля(Форма);
КонецПроцедуры

Процедура ФормаДокумента_ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	АналитикиПланированияДокументов.ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#КонецОбласти 

#Область Менеджер

#Область ИсточникиДляКонтроляДокумента
	
Функция ИсточникиДокумента(Объект) Экспорт
	
	Источники = Новый Соответствие;
	
	// 1. Источник для контроля бюджетных лимитов и резервов
	КонтрольУХ.ДобавитьИсточник(
		Источники, 
		КонтрольУХБюджетныеЛимиты, 
		Источник_БюджетныеЛимитыРезервы(Объект));
	
	// 2. Планы по взаиморасчетам с контрагентом
	КонтрольУХ.ДобавитьИсточник(
		Источники, 
		КонтрольУХВзаиморасчетыПоКонтрагенту, 
		Источник_ВзаиморасчетыПоКонтрагенту(Объект));
	
	// 3. Планы по взаиморасчетам по договору
	КонтрольУХ.ДобавитьИсточник(
		Источники, 
		КонтрольУХВзаиморасчетыПоДоговору,
		Источник_ВзаиморасчетыПоДоговору(Объект));
	
	// 4. Контроль суммы расходов по договору
	КонтрольУХ.ДобавитьИсточник(
		Источники, 
		КонтрольУХРасходыПоДоговору,
		Источник_РасходыПоДоговору(Объект));
	
	Возврат Источники;
	
КонецФункции
	
Функция Источник_БюджетныеЛимитыРезервы(Объект)
	
	//
	Источник = Новый Структура;
	
	// Параметры
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Дата", 						Объект.Дата);
	ДопПараметры.Вставить("Ссылка", 					Объект.Ссылка);
	ДопПараметры.Вставить("ЭтоНовый", 					НЕ ЗначениеЗаполнено(Объект.Ссылка));
	
	ТаблицаПланов = ПланыДокумента(Объект);
	ТаблицаПланов.Колонки.Сумма.Имя = "Заявлено";
	ТаблицаПланов.Колонки.Добавить("Лимит",				Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 2)));
	ТаблицаПланов.Колонки.Добавить("Зарезервировано",	Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 2)));
	ТаблицаПланов.Колонки.Добавить("Исполнено",			Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(18, 2)));
	
	//
	Источник.Вставить("Параметры", ДопПараметры);
	Источник.Вставить("ПланыДокумента", ТаблицаПланов);
	
	Возврат Источник;
	
КонецФункции

Функция Источник_ВзаиморасчетыПоКонтрагенту(Объект)
	
	// Если незаполнен контрагент, то контроль не выполняется
	Контрагент = Объект.Контрагент;
	Если Не ЗначениеЗаполнено(Контрагент) Тогда
		Возврат неопределено;
	КонецЕсли;
	
	// Если роль определить не удалось, то контроль не выполняется
	Результат = Новый Структура;
	Результат.Вставить("Заявка", Объект.Ссылка);
	Результат.Вставить("Контрагент", Объект.Контрагент);
	Результат.Вставить("РольКонтрагента", Перечисления.РолиКонтрагентов.Покупатели);
	Результат.Вставить("Валюта", Объект.Валюта);
	Результат.Вставить("СуммаПлатежа", -Объект.СуммаДокумента);
	
	Возврат Результат;
	
КонецФункции

Функция Источник_ВзаиморасчетыПоДоговору(Объект)
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) ИЛИ Не ЗначениеЗаполнено(Объект.Договор) Тогда
		// Контроль не выполняется
		Возврат неопределено;
	КонецЕсли;
	
	Взаиморасчеты = Новый ТаблицаЗначений;
	Взаиморасчеты.Колонки.Добавить("Организация", Метаданные.ОпределяемыеТипы.Организации.Тип);
	Взаиморасчеты.Колонки.Добавить("Контрагент", Метаданные.ОпределяемыеТипы.Контрагенты.Тип);
	Взаиморасчеты.Колонки.Добавить("Договор", Метаданные.ОпределяемыеТипы.Договор.Тип);
	Взаиморасчеты.Колонки.Добавить("ОбъектРасчетов", Новый ОписаниеТипов("СправочникСсылка.ОбъектыРасчетов"));
	Взаиморасчеты.Колонки.Добавить("ВалютаВзаиморасчетов", Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	Взаиморасчеты.Колонки.Добавить("СуммаВзаиморасчетов", Метаданные.ОпределяемыеТипы.ДенежнаяСуммаЛюбогоЗнака.Тип);
	
	// Поставка
	Строка = Взаиморасчеты.Добавить();
	ЗаполнитьЗначенияСвойств(Строка, Объект, "Организация, Контрагент, Договор, ОбъектРасчетов");
	Строка.ВалютаВзаиморасчетов = Объект.Валюта;
	Строка.СуммаВзаиморасчетов = Объект.СуммаДокумента;
	
	// Оплата
	СуммаПлатежей = Объект.ЭтапыГрафикаОплаты.Итог("СуммаПлатежа");
	Если СуммаПлатежей > 0 Тогда
		Строка = Взаиморасчеты.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, Объект, "Организация, Контрагент, Договор, ОбъектРасчетов");
		Строка.ВалютаВзаиморасчетов = Объект.Валюта;
		Строка.СуммаВзаиморасчетов = -СуммаПлатежей;
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("РасшифровкаПлатежа", Взаиморасчеты);
	
	// Устаревшая схема
	Результат.Вставить("Заявка", Объект.Ссылка);
	Результат.Вставить("Организация", Объект.Организация);
	Результат.Вставить("Контрагент", Объект.Контрагент);
	Результат.Вставить("Договор", Объект.Договор);
	Результат.Вставить("СуммаПлатежа", Объект.СуммаДокумента);
	
	Возврат Результат;
	
КонецФункции

Функция Источник_РасходыПоДоговору(Объект)
	
	Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
		Возврат неопределено; // Контроль не выполняется
	КонецЕсли;
	
	КонтрольОплаты = Ложь; 
	Результат = КонтрольУХРасходыПоДоговору.СтруктураИсточник(Объект.Ссылка, Объект.Организация, КонтрольОплаты);
	Результат.Контрагент = Объект.Контрагент;
	Результат.Договор = Объект.Договор;
	
	Строка = Результат.ДанныеДляПроверки.Добавить();
	ЗаполнитьЗначенияСвойств(Строка, Объект);
	Строка.Сумма = Объект.СуммаДокумента;
	Строка.ЭтоОплата = КонтрольОплаты;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ПланыДокумента

// Процедура возвращает таблицу планов документа
//
// Параметры:
//  Источник  - ДокументСсылка, ДокументОбъект, Форма.Объект - Документ планирования
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица планов документа
//
Функция ПланыДокумента(Источник) Экспорт
	
	//
	ТаблицаПланов = КонтрольЛимитовУХ.Новый_ТаблицаПланыДокумента();
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		ДанныеОбъекта = ДанныеОбъектаПоСсылке(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		ДанныеОбъекта = Источник;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") 
		И Источник.Свойство("Ссылка") И ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ЗаявкаНаВозвратТоваровОтКлиента") Тогда
		ДанныеОбъекта = Источник;
	Иначе
		Возврат ТаблицаПланов;
	КонецЕсли;
	
	//
	Если ДанныеОбъекта.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
		ИЛИ ДанныеОбъекта.РежимИспользованияГрафика <> Перечисления.РежимыИспользованияГрафика.КонтрольЛимитовИСозданиеПозиций Тогда
		Возврат ТаблицаПланов;
	КонецЕсли;
	
	//
	РеквизитыАналитик = "ВидБюджета, ДокументРезервирования, ЦФО, Проект, СтатьяБюджета, "
		+ АналитикиСтатейБюджетовУХКлиентСервер.РеквизитыАналитикИзШаблона("Аналитика%1");
		
	Если ДанныеОбъекта.СпособКомпенсации = Перечисления.СпособыКомпенсацииВозвратовТоваров.ВернутьДенежныеСредства Тогда
		
		// Оплата
		АналитикиОплаты = ПолучитьАналитикиПланированияБДДС(ДанныеОбъекта);
		Если АналитикиОплаты <> неопределено Тогда
			
			Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств;
			
			ПараметрыОперПланирования = ОперативноеПланированиеПовтИспУХ.ПолучитьПараметрыОперПланирования(
				Предназначение, ДанныеОбъекта.Дата);
				
			Для Каждого Строка Из ДанныеОбъекта.ЭтапыГрафикаОплаты Цикл
				СтрокаПлана = ТаблицаПланов.Добавить();
				СтрокаПлана.Период = ДанныеОбъекта.Дата;
				
				СтрокаПлана.ДокументПланирования = ДанныеОбъекта.Ссылка;
				СтрокаПлана.ПериодОтчета = ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(
					Строка.ДатаПлатежа, ПараметрыОперПланирования.ПериодичностьОперативногоПланирования,0);
				СтрокаПлана.ПриходРасход = Перечисления.ВидыДвиженийПриходРасход.Расход;
				СтрокаПлана.Сумма = Строка.СуммаПлатежа;
				СтрокаПлана.Организация = ДанныеОбъекта.Организация;
				СтрокаПлана.Контрагент = ДанныеОбъекта.Контрагент;
				СтрокаПлана.ДоговорКонтрагента = ДанныеОбъекта.Договор;
				СтрокаПлана.Валюта = ДанныеОбъекта.Валюта;
				
				ЗаполнитьЗначенияСвойств(СтрокаПлана, АналитикиОплаты, РеквизитыАналитик);
				СтрокаПлана.Предназначение = Предназначение;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	
	// Поставка
	АналитикиПоставки = ПолучитьАналитикиПланированияПоставки(ДанныеОбъекта);
	Если АналитикиПоставки <> неопределено Тогда
		
		Предназначение = АналитикиПоставки.ВидБюджета.Предназначение;
		
		ПараметрыОперПланирования = ОперативноеПланированиеПовтИспУХ.ПолучитьПараметрыОперПланирования(
			Предназначение, ДанныеОбъекта.Дата);
			
		Если ДанныеОбъекта.ПоступлениеОднойДатой = Истина Тогда
			ЕдиныйПериод = ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(
				ДанныеОбъекта.ДатаПоступления, ПараметрыОперПланирования.ПериодичностьОперативногоПланирования,0);
		КонецЕсли;
		
		Для Каждого Строка Из ДанныеОбъекта.ВозвращаемыеТовары Цикл
			СтрокаПлана = ТаблицаПланов.Добавить();
			СтрокаПлана.Период = ДанныеОбъекта.Дата;
			
			СтрокаПлана.ДокументПланирования = ДанныеОбъекта.Ссылка;
			Если ДанныеОбъекта.ПоступлениеОднойДатой = Истина Тогда
				СтрокаПлана.ПериодОтчета = ЕдиныйПериод;
			Иначе
				СтрокаПлана.ПериодОтчета = ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(
					Строка.ДатаПоступления, ПараметрыОперПланирования.ПериодичностьОперативногоПланирования,0);
			КонецЕсли;
			СтрокаПлана.ПриходРасход = Перечисления.ВидыДвиженийПриходРасход.Приход;
			СтрокаПлана.Сумма = Строка.СуммаСНДС;
			СтрокаПлана.Организация = ДанныеОбъекта.Организация;
			СтрокаПлана.Контрагент = ДанныеОбъекта.Контрагент;
			СтрокаПлана.ДоговорКонтрагента = ДанныеОбъекта.Договор;
			СтрокаПлана.Валюта = ДанныеОбъекта.Валюта;
			
			ЗаполнитьЗначенияСвойств(СтрокаПлана, АналитикиПоставки, РеквизитыАналитик);
			СтрокаПлана.Предназначение = Предназначение;
			
		КонецЦикла;
		
	КонецЕсли;
	
	РеквизитыПланов = "Период, ПериодОтчета, ВидБюджета, Предназначение, Валюта, ЦФО, Проект, ПриходРасход, СтатьяБюджета, Аналитика1,"
		+"Аналитика2, Аналитика3, Аналитика4, Аналитика5, Аналитика6, ДокументРезервирования, ДокументПланирования, Организация, Контрагент, ДоговорКонтрагента";
	
	ТаблицаПланов.Свернуть(РеквизитыПланов, "Сумма");
	
	Возврат ТаблицаПланов;
	
КонецФункции

Функция ДанныеОбъектаПоСсылке(Источник)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Источник);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Дата КАК Дата,
	|	Документ.Организация КАК Организация,
	|	Документ.Контрагент КАК Контрагент,
	|	Документ.Договор КАК Договор,
	|	Документ.ПоступлениеОднойДатой КАК ПоступлениеОднойДатой,
	|	Документ.ДатаПоступления КАК ДатаПоступления,
	|	Документ.ПорядокРасчетов КАК ПорядокРасчетов,
	|	Документ.РежимИспользованияГрафика КАК РежимИспользованияГрафика,
	|	Документ.СпособКомпенсации КАК СпособКомпенсации,
	|	Документ.ЭтапыГрафикаОплаты.(
	|		ДатаПлатежа КАК ДатаПлатежа,
	|		ВариантОплаты КАК ВариантОплаты,
	|		СуммаПлатежа КАК СуммаПлатежа,
	|		СуммаЗалогаЗаТару КАК СуммаЗалогаЗаТару,
	|		ИдентификаторПозиции КАК ИдентификаторПозиции
	|	) КАК ГрафикРасчетов,
	|	Документ.ВозвращаемыеТовары.(
	|		ДатаПоступления КАК ДатаПоступления,
	|		СуммаСНДС КАК СуммаСНДС
	|	) КАК Товары,
	|	Документ.АналитикиПланирования.(
	|		ВидБюджета КАК ВидБюджета,
	|		ДокументРезервирования КАК ДокументРезервирования,
	|		ЦФО КАК ЦФО,
	|		Проект КАК Проект,
	|		СтатьяБюджета КАК СтатьяБюджета,
	|		Аналитика1 КАК Аналитика1,
	|		Аналитика2 КАК Аналитика2,
	|		Аналитика3 КАК Аналитика3,
	|		Аналитика4 КАК Аналитика4,
	|		Аналитика5 КАК Аналитика5,
	|		Аналитика6 КАК Аналитика6
	|	) КАК АналитикиПланирования
	|ИЗ
	|	Документ.ЗаявкаНаВозвратТоваровОтКлиента КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка";
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка,, "ГрафикРасчетов");
		Результат.ГрафикРасчетов = Выборка.ГрафикРасчетов.Выгрузить();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьАналитикиПланированияБДДС(ДанныеОбъекта)
	
	СтруктураПоиска = Новый Структура("ВидБюджета", ПланыВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств);
	Строки = ДанныеОбъекта.АналитикиПланирования.НайтиСтроки(СтруктураПоиска);
	Если Строки.Количество() > 0 Тогда
		Возврат Строки[0];
	КонецЕсли;
	
	Возврат неопределено;
	
КонецФункции

Функция ПолучитьАналитикиПланированияПоставки(ДанныеОбъекта)
	
	Для Каждого Строка Из ДанныеОбъекта.АналитикиПланирования Цикл
		
		Если Строка.ВидБюджета <> ПланыВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств Тогда
			Возврат Строка;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат неопределено;
	
КонецФункции

#КонецОбласти 

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
#КонецОбласти
 
