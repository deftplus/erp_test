
#Область ПрограммныйИнтерфейс
	
#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

#Область СобытияМодуляФормы

#Область ФормаДокумента

#Область СтандартныеОбработчики

Процедура ФормаДокумента_ПриЧтенииНаСервере(Форма, ТекущийОбъект) Экспорт
	АналитикиПланированияДокументов.ПриЧтенииНаСервере(Форма);
КонецПроцедуры

Процедура ФормаДокумента_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Если ПолучитьФункциональнуюОпцию(
			"ИспользоватьЦентрализованноеУправлениеЗакупками") Тогда
		ФормаДокумента_ИнициализироватьФорму(Форма);
	КонецЕсли;
	
	Элементы = Форма.Элементы;
	
	АналитикиПланированияДокументов.ПриСозданииНаСервере(Форма, Элементы.Комментарий.Родитель, Элементы.Комментарий);
	КонтрольУХ.ПодготовитьФормуНаСервере(Форма, Форма.Элементы.ГруппаСтраницы);
	
КонецПроцедуры

Процедура ФормаДокумента_ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	КонтрольУХ.ИнициализироватьРезультатыКонтроля(Форма);
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#КонецОбласти 

#Область Менеджер

#Область ИсточникиДляКонтроляДокумента
	
Функция ИсточникиДокумента(Объект) Экспорт
	
	Источники = Новый Соответствие;
	
	// 1. Источник для контроля бюджетных лимитов и резервов
	КонтрольУХ.ДобавитьИсточник(
		Источники, 
		КонтрольУХБюджетныеЛимиты, 
		Источник_БюджетныеЛимитыРезервы(Объект));
	
	//// 2. Планы по взаиморасчетам с контрагентом
	//КонтрольУХ.ДобавитьИсточник(
	//	Источники, 
	//	КонтрольУХВзаиморасчетыПоКонтрагенту, 
	//	Источник_ВзаиморасчетыПоКонтрагенту(Объект));
	
	//// 3. Планы по взаиморасчетам по договору
	//КонтрольУХ.ДобавитьИсточник(
	//	Источники, 
	//	КонтрольУХВзаиморасчетыПоДоговору,
	//	Источник_ВзаиморасчетыПоДоговору(Объект));
	
	// 4. Контроль суммы расходов по договору
	КонтрольУХ.ДобавитьИсточник(
		Источники, 
		КонтрольУХРасходыПоДоговору,
		Источник_РасходыПоДоговору(Объект));
	
	Возврат Источники;
	
КонецФункции
	
Функция Источник_БюджетныеЛимитыРезервы(Объект)
	
	//
	Источник = Новый Структура;
	
	// Параметры
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Дата", 		Объект.Дата);
	ДопПараметры.Вставить("Ссылка", 	Объект.Ссылка);
	ДопПараметры.Вставить("ЭтоНовый", 	НЕ ЗначениеЗаполнено(Объект.Ссылка));
	
	// Получаем планы документа
	ДанныеДляПроверки = ПланыДокумента(Объект);
	ДанныеДляПроверки.Колонки.Сумма.Имя = "Заявлено";
	ДанныеДляПроверки.Колонки.Добавить("Лимит", РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
	ДанныеДляПроверки.Колонки.Добавить("Зарезервировано", РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
	ДанныеДляПроверки.Колонки.Добавить("Исполнено", РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
	ДанныеДляПроверки.ЗаполнитьЗначения(Объект.Дата, "Период");
	
	//
	Источник.Вставить("Параметры", ДопПараметры);
	Источник.Вставить("ПланыДокумента", ДанныеДляПроверки);
	
	Возврат Источник;
	
КонецФункции

Функция Источник_РасходыПоДоговору(Объект)
	
	Если Не ЗначениеЗаполнено(Объект.Договор) Тогда
		Возврат неопределено; // Контроль не выполняется
	КонецЕсли;
	
	КонтрольОплаты = Истина;
	Результат = КонтрольУХРасходыПоДоговору.СтруктураИсточник(Объект.Ссылка, Объект.Организация, КонтрольОплаты);
	Результат.Контрагент = Объект.Контрагент;
	Результат.Договор = Объект.Договор;
	
	// Оплата
	Для Каждого Этап Из Объект.ЭтапыГрафикаОплаты Цикл
		Строка = Результат.ДанныеДляПроверки.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, Объект, "Организация, Контрагент, Договор, Валюта");
		Строка.ЭтоОплата = КонтрольОплаты;
		Строка.Сумма = Этап.СуммаПлатежа;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ПланыДокумента

// Процедура возвращает таблицу планов документа
//
// Параметры:
//  Источник  - ДокументСсылка, ДокументОбъект, Форма.Объект - Документ планирования
//
// Возвращаемое значение:
//   ТаблицаЗначений   - Таблица планов документа
//
Функция ПланыДокумента(Источник) Экспорт
	
	//
	ТаблицаПланов = КонтрольЛимитовУХ.Новый_ТаблицаПланыДокумента();
	Если ТипЗнч(Источник) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		ДанныеОбъекта = ДанныеОбъектаПоСсылке(Источник);
	ИначеЕсли ТипЗнч(Источник) = Тип("ДокументОбъект.ПриобретениеТоваровУслуг") Тогда
		ДанныеОбъекта = Источник;
	ИначеЕсли ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") 
		И Источник.Свойство("Ссылка") И ТипЗнч(Источник.Ссылка) = Тип("ДокументСсылка.ПриобретениеТоваровУслуг") Тогда
		ДанныеОбъекта = Источник;
	Иначе
		Возврат ТаблицаПланов;
	КонецЕсли;
	
	//
	Если ДанныеОбъекта.ПорядокРасчетов = Перечисления.ПорядокРасчетов.ПоДоговорамКонтрагентов
		ИЛИ ДанныеОбъекта.РежимИспользованияГрафика <> Перечисления.РежимыИспользованияГрафика.КонтрольЛимитовИСозданиеПозиций Тогда
		Возврат ТаблицаПланов;
	КонецЕсли;
	
	//
	РеквизитыАналитик = "ВидБюджета, ДокументРезервирования, ЦФО, Проект, СтатьяБюджета, "
		+ АналитикиСтатейБюджетовУХКлиентСервер.РеквизитыАналитикИзШаблона("Аналитика%1");
	
	// Оплата
	АналитикиОплаты = ПолучитьАналитикиПланированияБДДС(ДанныеОбъекта);
	Если АналитикиОплаты <> неопределено Тогда
		
		Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств;
		
		ПараметрыОперПланирования = ОперативноеПланированиеПовтИспУХ.ПолучитьПараметрыОперПланирования(
			Предназначение, ДанныеОбъекта.Дата);
			
		Для Каждого Строка Из ДанныеОбъекта.ЭтапыГрафикаОплаты Цикл
			СтрокаПлана = ТаблицаПланов.Добавить();
			СтрокаПлана.Период = ДанныеОбъекта.Дата;
			
			СтрокаПлана.ДокументПланирования = ДанныеОбъекта.Ссылка;
			СтрокаПлана.ПериодОтчета = ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(
				Строка.ДатаПлатежа, ПараметрыОперПланирования.ПериодичностьОперативногоПланирования,0);
			СтрокаПлана.ПриходРасход = Перечисления.ВидыДвиженийПриходРасход.Расход;
			СтрокаПлана.Сумма = Строка.СуммаПлатежа;
			СтрокаПлана.Организация = ДанныеОбъекта.Организация;
			СтрокаПлана.Контрагент = ДанныеОбъекта.Контрагент;
			СтрокаПлана.ДоговорКонтрагента = ДанныеОбъекта.Договор;
			СтрокаПлана.Валюта = ДанныеОбъекта.Валюта;
			
			ЗаполнитьЗначенияСвойств(СтрокаПлана, АналитикиОплаты, РеквизитыАналитик);
			СтрокаПлана.Предназначение = Предназначение;
			
		КонецЦикла;
		
	КонецЕсли;
	
	//// Поставка
	//АналитикиПоставки = ПолучитьАналитикиПланированияПоставки(ДанныеОбъекта);
	//Если АналитикиПоставки <> неопределено Тогда
	//	
	//	Предназначение = АналитикиПоставки.ВидБюджета.Предназначение;
	//	
	//	ПараметрыОперПланирования = ОперативноеПланированиеПовтИспУХ.ПолучитьПараметрыОперПланирования(
	//		Предназначение, ДанныеОбъекта.Дата);
	//		
	//	Если ДанныеОбъекта.ПоступлениеОднойДатой = Истина Тогда
	//		ЕдиныйПериод = ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(
	//			ДанныеОбъекта.ДатаПоступления, ПараметрыОперПланирования.ПериодичностьОперативногоПланирования,0);
	//	КонецЕсли;
	//	
	//	Для Каждого Строка Из ДанныеОбъекта.Товары Цикл
	//		СтрокаПлана = ТаблицаПланов.Добавить();
	//		СтрокаПлана.Период = ДанныеОбъекта.Дата;
	//		
	//		СтрокаПлана.ДокументПланирования = ДанныеОбъекта.Ссылка;
	//		Если ДанныеОбъекта.ПоступлениеОднойДатой = Истина Тогда
	//			СтрокаПлана.ПериодОтчета = ЕдиныйПериод;
	//		Иначе
	//			СтрокаПлана.ПериодОтчета = ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(
	//				Строка.ДатаПоступления, ПараметрыОперПланирования.ПериодичностьОперативногоПланирования,0);
	//		КонецЕсли;
	//		СтрокаПлана.ПриходРасход = Перечисления.ВидыДвиженийПриходРасход.Расход;
	//		СтрокаПлана.Сумма = Строка.СуммаСНДС;
	//		СтрокаПлана.Организация = ДанныеОбъекта.Организация;
	//		СтрокаПлана.Контрагент = ДанныеОбъекта.Контрагент;
	//		СтрокаПлана.ДоговорКонтрагента = ДанныеОбъекта.Договор;
	//		СтрокаПлана.Валюта = ДанныеОбъекта.Валюта;
	//		
	//		ЗаполнитьЗначенияСвойств(СтрокаПлана, АналитикиПоставки, РеквизитыАналитик);
	//		СтрокаПлана.Предназначение = Предназначение;
	//		
	//	КонецЦикла;
	//	
	//КонецЕсли;
	
	РеквизитыПланов = "Период, ПериодОтчета, ВидБюджета, Предназначение, Валюта, ЦФО, Проект, ПриходРасход, СтатьяБюджета, Аналитика1,"
		+"Аналитика2, Аналитика3, Аналитика4, Аналитика5, Аналитика6, ДокументРезервирования, ДокументПланирования, Организация, Контрагент, ДоговорКонтрагента";
	
	ТаблицаПланов.Свернуть(РеквизитыПланов, "Сумма");
	
	Возврат ТаблицаПланов;
	
КонецФункции

Функция ДанныеОбъектаПоСсылке(Источник)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Источник);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Документ.Ссылка КАК Ссылка,
	|	Документ.Дата КАК Дата,
	|	Документ.Организация КАК Организация,
	|	Документ.Контрагент КАК Контрагент,
	|	Документ.Договор КАК Договор,
	|	Документ.Валюта КАК Валюта,
	//|	Документ.ПоступлениеОднойДатой КАК ПоступлениеОднойДатой,
	//|	Документ.ДатаПоступления КАК ДатаПоступления,
	|	Документ.ПорядокРасчетов КАК ПорядокРасчетов,
	|	Документ.РежимИспользованияГрафика КАК РежимИспользованияГрафика,
	|	Документ.ЭтапыГрафикаОплаты.(
	|		ДатаПлатежа КАК ДатаПлатежа,
	|		ВариантОплаты КАК ВариантОплаты,
	|		СуммаПлатежа КАК СуммаПлатежа,
	|		СуммаЗалогаЗаТару КАК СуммаЗалогаЗаТару,
	|		ИдентификаторПозиции КАК ИдентификаторПозиции
	|	) КАК ЭтапыГрафикаОплаты,
	//|	Документ.Товары.(
	//|		ДатаПоступления КАК ДатаПоступления,
	//|		СуммаСНДС КАК СуммаСНДС
	//|	) КАК Товары,
	|	Документ.АналитикиПланирования.(
	|		ВидБюджета КАК ВидБюджета,
	|		ДокументРезервирования КАК ДокументРезервирования,
	|		ЦФО КАК ЦФО,
	|		Проект КАК Проект,
	|		СтатьяБюджета КАК СтатьяБюджета,
	|		Аналитика1 КАК Аналитика1,
	|		Аналитика2 КАК Аналитика2,
	|		Аналитика3 КАК Аналитика3,
	|		Аналитика4 КАК Аналитика4,
	|		Аналитика5 КАК Аналитика5,
	|		Аналитика6 КАК Аналитика6
	|	) КАК АналитикиПланирования
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка";
	РезультатЗапроса = Запрос.Выполнить();
	
	Результат = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Результат.Вставить(Колонка.Имя);
	КонецЦикла;
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка,, "ЭтапыГрафикаОплаты");
		Результат.ЭтапыГрафикаОплаты = Выборка.ЭтапыГрафикаОплаты.Выгрузить();
		Результат.АналитикиПланирования = Выборка.АналитикиПланирования.Выгрузить();
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьАналитикиПланированияБДДС(ДанныеОбъекта)
	
	СтруктураПоиска = Новый Структура("ВидБюджета", ПланыВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств);
	Строки = ДанныеОбъекта.АналитикиПланирования.НайтиСтроки(СтруктураПоиска);
	Если Строки.Количество() > 0 Тогда
		Возврат Строки[0];
	КонецЕсли;
	
	Возврат неопределено;
	
КонецФункции

//Функция ПолучитьАналитикиПланированияПоставки(ДанныеОбъекта)
//	
//	Для Каждого Строка Из ДанныеОбъекта.АналитикиПланирования Цикл
//		
//		Если Строка.ВидБюджета <> ПланыВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств Тогда
//			Возврат Строка;
//		КонецЕсли;
//		
//	КонецЦикла;
//	
//	Возврат неопределено;
//	
//КонецФункции

#КонецОбласти 

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ФормаДокумента_ИнициализироватьФорму(Форма)
	Если ПолучитьФункциональнуюОпцию("ИспользоватьЦентрализованноеУправлениеЗакупками")
				И НЕ ФормыУХ.ЭлементыФормыУХУжеСозданы(Форма) Тогда
		ФормаДокумента_ПодключитьОбработчикиСобытийERPЭлементовФормы(Форма);
		ФормаДокумента_СоздатьКоманды(Форма, "ТоварыЗаполнить");
		ФормыУХ.ЭлементыФормыУХДобавлены(Форма);
	КонецЕсли;
КонецПроцедуры

Процедура ФормаДокумента_ПодключитьОбработчикиСобытийERPЭлементовФормы(Форма)
	ПереопределениеСобытийФормы.ПереопределитьСобытиеЭлементаФормы(
		Форма, 
		Форма.Элементы.Товары,
		"ОбработкаВыбора",
		"Подключаемый_УХ_ТоварыОбработкаВыбора");
КонецПроцедуры

Процедура ФормаДокумента_СоздатьКоманды(Форма, ИмяГруппыКоманд)
	Элементы = Форма.Элементы;
	ФормыУХ.СоздатьКоманду(
		Форма, 
		"ЗаполнитьИзПланаПоставокУХ", 
		"Заполнить по плану поставок", 
		"Подключаемый_УХ_ЗаполнитьИзПланаПоставок");
	ФормыУХ.СоздатьКоманду(
		Форма, 
		"ПодборИзОстатковПланаПоставокУХ", 
		"Подбор из плана поставок", 
		"Подключаемый_УХ_ПодборИзПланаПоставок",
		БиблиотекаКартинок.Подбор);
	ФормыУХ.СоздатьКнопкуФормы(
		Элементы, 
		"ТоварыЗаполнитьИзПланаПоставокУХ",
		"",
		"ЗаполнитьИзПланаПоставокУХ",
		ВидКнопкиФормы.КнопкаКоманднойПанели,
		Элементы[ИмяГруппыКоманд]);
	ФормыУХ.СоздатьКнопкуФормы(
		Элементы, 
		"ТоварыПодборИзОстатковПланаПоставокУХ",
		"",
		"ПодборИзОстатковПланаПоставокУХ",
		ВидКнопкиФормы.КнопкаКоманднойПанели,
		Элементы[ИмяГруппыКоманд]);
КонецПроцедуры

#КонецОбласти
