////////////////////////////////////////////////////////////////////////////////
// Функции и процедуры обеспечения формирования бухгалтерских отчетов.
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Вызывается при создании формы отчета на сервере для возможности дополнительной настройки.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//
Процедура ПриСозданииНаСервере(Форма) Экспорт

	УстановитьНастройкиПоУмолчанию(Форма);
	
	ПолеОформления = Форма.Элементы.Найти("КонтрагентДляОтбора");
	Если ПолеОформления <> Неопределено Тогда
		Если ПолучитьФункциональнуюОпцию("ИспользоватьПередачиТоваровМеждуОрганизациями") Тогда
			Если Форма.Отчет.КонтрагентДляОтбора = Неопределено Тогда
				Форма.Отчет.КонтрагентДляОтбора = Справочники.Контрагенты.ПустаяСсылка();
			КонецЕсли;
			НовыйМассив = Новый Массив();
			НовыйМассив.Добавить(Новый ПараметрВыбора("ВыборКонтрагентовИОрганизаций", Истина));
			ПолеОформления.ПараметрыВыбора = Новый ФиксированныйМассив(НовыйМассив);
 		Иначе
			ПолеОформления.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");	
			ПолеОформления.ВыбиратьТип = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//++ НЕ УТ
	ДобавитьПоказателиУправленческогоУчетаИОтчетности(Форма);
	//-- НЕ УТ

КонецПроцедуры

// Вызывается при установке настроек по умолчанию для формы отчета.
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//
Процедура УстановитьНастройкиПоУмолчанию(Форма) Экспорт

	ЭлементГруппаБыстрыеОтборы = Форма.Элементы.Найти("ГруппаБыстрыеОтборы");
	Если ЭлементГруппаБыстрыеОтборы <> Неопределено Тогда
		ЭлементГруппаБыстрыеОтборы.ЦветФона = Новый Цвет();
	КонецЕсли;

КонецПроцедуры

// Выполняет установку макета оформления для отчета.
//
// Параметры:
//	ПараметрыОтчета - Структура - передается из формы отчета при запуске фонового задания отчета.
//		Может содержать ключ:
//			* МакетОформления - Строка - Название макета оформления.
//	НастройкаКомпоновкиДанных - НастройкиКомпоновкиДанных - Настройки, которые будут использоваться для отчета. 
//	СтандартнаяОбработка - Булево - Если установить внутри процедуры в Ложь, то стандартная обработка не будет выполняться.
//
Процедура УстановитьМакетОформленияОтчета(ПараметрыОтчета, НастройкаКомпоновкиДанных, СтандартнаяОбработка) Экспорт
	Перем МакетОформления;
	
	Если ПараметрыОтчета.Свойство("МакетОформления", МакетОформления)
	   И ЗначениеЗаполнено(МакетОформления) Тогда
	   
		ПараметрыРежимаВыгрузки = Неопределено;
		Если ПараметрыОтчета.Свойство("ПараметрыРежимаВыгрузки", ПараметрыРежимаВыгрузки)
			И ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ПараметрыРежимаВыгрузки, "ПереопределятьМакетОформления", Истина) = Ложь
		 Или МакетОформления <> "МакетОформленияОтчетовЗеленый"
			И МакетОформления <> "ОформлениеОтчетовЗеленый" Тогда
			// В отчете выбран конкретный макет оформления, его не меняем.
			Возврат;
		КонецЕсли;

	КонецЕсли;

	СтандартнаяОбработка = Ложь;

	МакетОформления = "ОформлениеОтчетовБежевый";
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметрВывода(НастройкаКомпоновкиДанных, "МакетОформления", МакетОформления);	
	
КонецПроцедуры

// Позволяет ограничить суммовые показатели справки-расчета.
//
// Параметры:
//   ПоддерживаемыеНаборы - см. СправкиРасчетыКлиентСервер.ВсеНаборыСуммовыхПоказателей - 
//
// Возвращаемое значение:
//   см. СправкиРасчетыКлиентСервер.ВсеНаборыСуммовыхПоказателей - 
//
Функция РазрешенныеНаборыСуммовыхПоказателей(ПоддерживаемыеНаборы) Экспорт
	
	Возврат ПоддерживаемыеНаборы;
	
КонецФункции


// Добавляет к структуре параметров ключи, специфичные для данного отчета.
//
// Параметры:
//  ПараметрыОтчета - см. ЗаполнениеФинОтчетностиВБанки.ПустыеПараметрыОтчетаВаловаяПрибыль()
//
Процедура ПустыеПараметрыОтчетаВаловаяПрибыль(ПараметрыОтчета) Экспорт
	
	ПараметрыОтчета.ИдентификаторОтчета = "ВыручкаИСебестоимостьПродаж";
	
КонецПроцедуры

// Заполняет настройки СКД на основе настроек, переданных в структуре.
//
// Параметры:
//   КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - из настраиваемого отчета.
//   НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных - в ДополнительныеСвойства содержат параметры настройки.
//
// См. реализацию процедуры ПриЗагрузкеПользовательскихНастроекНаСервере() в модуле объекта отчета, вызываемую согласно
// настройкам из ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию()
//
Процедура ПриЗагрузкеПользовательскихНастроек(Отчет, НовыеПользовательскиеНастройкиКД, КомпоновщикНастроек) Экспорт


КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//
// Параметры:
//   КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - из настраиваемого отчета.
//   НовыеПользовательскиеНастройкиКД - ПользовательскиеНастройкиКомпоновкиДанных - в ДополнительныеСвойства содержат параметры настройки.
//   Форма - ФормаКлиентскогоПриложения - форма отчета.
//
// См. реализацию процедуры ПриЗагрузкеПользовательскихНастроекНаСервере() в модуле объекта отчета, вызываемую согласно
// настройкам из ОтчетыКлиентСервер.НастройкиОтчетаПоУмолчанию()
//
Процедура ПриЗагрузкеПользовательскихНастроекНастройкаФормы(Форма, НовыеПользовательскиеНастройкиКД, КомпоновщикНастроек) Экспорт


КонецПроцедуры

// Формирует представление для списка активных отборов в отчете.
//
// Параметры:
//  ПараметрыОтчета - Структура - может содержать свойство "Подразделение".
//  КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - источник отборов.
//  СтандартнаяОбработка - Булево - возвращаемое значение. Если Ложь, то ТекстОтбор считается заполненным.
//  ТекстОтбор   - возвращаемое значение. Представление отборов.
//
Процедура ОписаниеОтборовОтчета(ПараметрыОтчета, КомпоновщикНастроек, СтандартнаяОбработка, ТекстОтбор) Экспорт


КонецПроцедуры

// Дополняет список счетов учета товаров.
//
// Параметры:
//  СчетаУчетаТоваров - Массив из ПланСчетовСсылка.Хозрасчетный - счета и субсчета учета товаров.
//
Процедура СчетаУчетаТоваров(СчетаУчетаТоваров) Экспорт


КонецПроцедуры

//++ НЕ УТ

// Добавляет к структуре параметров ключи, специфичные для данного отчета.
//
// Параметры:
//  ПараметрыОтчета - см. ЗаполнениеФинОтчетностиВБанки.ПустыеПараметрыОтчетаВедомостьАмортизацииОС()
//
Процедура ПустыеПараметрыОтчетаВедомостьАмортизацииОС(ПараметрыОтчета) Экспорт
	
	ПараметрыОтчета.ИдентификаторОтчета = "ВедомостьПоОС2_4";
	
	НаборПоказателей = Новый Массив;
	НаборПоказателей.Добавить("БУ");
	НаборПоказателей.Добавить("НУ");
	НаборПоказателей.Добавить("ПР");
	НаборПоказателей.Добавить("ВР");
	НаборПоказателей.Добавить("УУ");
	
	БухгалтерскиеОтчеты.ДобавитьПоказателиВПараметры(ПараметрыОтчета, НаборПоказателей);
	
КонецПроцедуры

// Вызывается перед компоновкой макета бух. отчетов, выводит информацию по валютам регл., упр. и фин. отчетности,
//	если соответствующие показатели выбраны.
//	Параметры:
//		КомпоновщикНастроек - компоновщик настроек отчета;
//		ПараметрыОтчета - Структура - см. функцию "ПодготовитьПараметрыОтчета" форм бух. отчетности.
//
Процедура УстановитьПараметрыВалют(Схема, КомпоновщикНастроек, ПараметрыОтчета) Экспорт
	
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек, "ВалютаРеглУчета",	Константы.ВалютаРегламентированногоУчета.Получить());
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек, "ВалютаУУ", Константы.ВалютаУправленческогоУчета.Получить());
	БухгалтерскиеОтчетыКлиентСервер.УстановитьПараметр(
		КомпоновщикНастроек, "ВалютаФО", Константы.ВалютаФинОтчетности.Получить());
	
	Показатели = Новый Структура;
	Показатели.Вставить("ПоказательБУ", Ложь);
	Показатели.Вставить("ПоказательНУ", Ложь);
	Показатели.Вставить("ПоказательВР", Ложь);
	Показатели.Вставить("ПоказательПР", Ложь);
	Показатели.Вставить("ПоказательРазницаБУиУУ", Ложь);
	Показатели.Вставить("ПоказательУУ", Ложь);
	Показатели.Вставить("ПоказательФО", Ложь);
	ЗаполнитьЗначенияСвойств(Показатели, ПараметрыОтчета);
		
	// Установим вывод параметров валют, в зависимости от выводимых показателей и функциональных опций
	ВыводятсяПоказателиРеглУчета = Макс(Показатели.ПоказательБУ, Показатели.ПоказательНУ,
		Показатели.ПоказательВР, Показатели.ПоказательПР, Показатели.ПоказательРазницаБУиУУ);
	ПараметрыОтчета.СхемаКомпоновкиДанных.Параметры.ВалютаРеглУчета.ОграничениеИспользования =
		Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") И ВыводятсяПоказателиРеглУчета;
	ПараметрыОтчета.СхемаКомпоновкиДанных.Параметры.ВалютаУУ.ОграничениеИспользования =
		Не (ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") И Показатели.ПоказательУУ);
	ПараметрыОтчета.СхемаКомпоновкиДанных.Параметры.ВалютаФО.ОграничениеИспользования =
		Не (ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") И Показатели.ПоказательФО);
	Схема.Параметры.ВалютаРеглУчета.ОграничениеИспользования =
		Не ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") И ВыводятсяПоказателиРеглУчета;
	Схема.Параметры.ВалютаУУ.ОграничениеИспользования =
		Не (ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") И Показатели.ПоказательУУ);
	Схема.Параметры.ВалютаФО.ОграничениеИспользования =
		Не (ПолучитьФункциональнуюОпцию("ИспользоватьНесколькоВалют") И Показатели.ПоказательФО);
	
КонецПроцедуры

Процедура ДополнительныеПоказателиБухгалтерскихОтчетов(МассивПоказателей, НеДобавлятьРазницу = Ложь) Экспорт
	
	МассивПоказателей.Вставить(1, "УУ");

	Если НЕ НеДобавлятьРазницу Тогда
		МассивПоказателей.Вставить(2, "РазницаБУиУУ");
		ИндексПоказателяФО = ?(МассивПоказателей.Найти("Контроль") = Неопределено, 6, 7);
	Иначе
		ИндексПоказателяФО = 2;
	КонецЕсли;
	
	МассивПоказателей.Вставить(ИндексПоказателяФО, "ФО");
	
КонецПроцедуры

// Дополняем показатели расшифровки данными по упр. и фин. отчетности.
//	Параметры:
//		НастройкиРасшифровки - Структура;
//		Отчет - ОтчетОбъект - отчет, для которого производится расшифровка;
//
Процедура ДополнитьНастройкуРасшифровкиПоказателямиУправленческогоУчетаИОтчетности(НастройкиРасшифровки, Отчет) Экспорт
	
	ПоказателиУправленческогоУчетаИОтчетности = Новый Структура("ПоказательУУ, ПоказательРазницаБУиУУ, ПоказательФО");
	ЗаполнитьЗначенияСвойств(ПоказателиУправленческогоУчетаИОтчетности, Отчет);
	Для каждого Показатель из ПоказателиУправленческогоУчетаИОтчетности Цикл
		Если Показатель.Значение <> Неопределено Тогда
			НастройкиРасшифровки.Вставить(Показатель.Ключ, Показатель.Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Добавляет на форму отчета новые элементы формы - показатели упр. и фин. отчетности
//
// Параметры:
//	Форма - ФормаКлиентскогоПриложения - Форма отчета.
//
Процедура ДобавитьПоказателиУправленческогоУчетаИОтчетности(Форма) Экспорт
	
	Если МассивФормДляДобавленияПоказателейУправленческогоУчетаИОтчетности().Найти(Форма.ИмяФормы) = Неопределено Тогда
		// Данная форма не обрабатывается, ничего не делаем.
		Возврат;
	КонецЕсли;
	
	Если Форма.Отчет.Свойство("ПоказательУУ") Тогда
		ДобавитьНовыйПоказательОтчетаНаФорму(Форма, "ПоказательУУ", "ПоказательНУ");
	КонецЕсли;	
	Если ПолучитьФункциональнуюОпцию("ВестиУУНаПланеСчетовХозрасчетный") И Форма.Отчет.Свойство("ПоказательРазницаБУиУУ") Тогда
		ДобавитьНовыйПоказательОтчетаНаФорму(Форма, "ПоказательРазницаБУиУУ", "ПоказательНУ");
	КонецЕсли;
	Если Форма.Отчет.Свойство("ПоказательФО") Тогда
		ДобавитьНовыйПоказательОтчетаНаФорму(Форма, "ПоказательФО", "ПоказательВалютнаяСумма");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнительноеУправлениеПоказателями(Отчет) Экспорт
	
	Отчет.ПоказательУУ            = Ложь;
	Отчет.ПоказательРазницаБУиУУ  = Ложь;
	Отчет.ПоказательФО            = Ложь;

КонецПроцедуры

// Вызывается после вывода результата, для корректировки фиксации сверху отчета (вывод доп. параметров влияет на высоту отчета)
//
//	Параметры:
//		Схема - СхемаКомпоновкиДанных - схема компоновки данных отчета.
//
//	Возвращаемое значение:
//		Число - число по которому будем фиксировать шапку отчета.
//
Функция ВысотаВыводимыхПараметров(Схема) Экспорт
	
	КоличествоПараметров = 0;
	
	Для каждого Параметр из Схема.Параметры Цикл
		Если Не Параметр.ОграничениеИспользования Тогда
			КоличествоПараметров = КоличествоПараметров + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ?(КоличествоПараметров = 0, 0, КоличествоПараметров + 2);
	
КонецФункции

// Вызывается перед проверкой заполнения отчета, обнуляет показатели отчета, если они ранее были скрыты по ФО.
//	Параметры:
//		Отчет - ОтчетОбъект - отчет, для которого проводится проверка заполнения.
//
Процедура ПередПроверкойЗаполнения(Отчет) Экспорт
	
	СтруктураОчищаемыхПоказателей = Новый Структура;
	Если Не ПолучитьФункциональнуюОпцию("ВестиУУНаПланеСчетовХозрасчетный") Тогда
		СтруктураОчищаемыхПоказателей.Вставить("ПоказательУУ", Ложь);
	КонецЕсли;
	Если Не ПолучитьФункциональнуюОпцию("ВестиУчетНаПланеСчетовХозрасчетныйВВалютеФинОтчетности") Тогда
		СтруктураОчищаемыхПоказателей.Вставить("ПоказательФО", Ложь);
	КонецЕсли;
	Если Не ПолучитьФункциональнуюОпцию("ВалютыУпрИРеглУчетаСовпадают") ИЛИ Не ПолучитьФункциональнуюОпцию("ВестиУУНаПланеСчетовХозрасчетный") Тогда
		СтруктураОчищаемыхПоказателей.Вставить("ПоказательРазницаБУиУУ", Ложь);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Отчет, СтруктураОчищаемыхПоказателей);
	
КонецПроцедуры

// Для недоступных по функциональным опциям показателей отчета принудительно проставляет значение Ложь.
//
// Параметры:
//  ПараметрыОтчета - Структура - см. в модуле менеджера отчета функцию ПустыеПараметрыКомпоновкиОтчета().
//
Процедура ОтключитьНедоступныеПоказатели(ПараметрыОтчета) Экспорт

	Для каждого Показатель Из ПараметрыОтчета.НаборПоказателей Цикл
		Если Не ПараметрыОтчета["Показатель" + Показатель] Тогда
			Продолжить;
		КонецЕсли;
		
		ДоступностьПоказателя = Истина;
		Если Показатель = "ВалютнаяСумма" Тогда
			ДоступностьПоказателя = БухгалтерскийУчетПереопределяемый.ИспользоватьВалютныйУчет();
		ИначеЕсли Показатель = "УУ" Тогда
			ДоступностьПоказателя = ПолучитьФункциональнуюОпцию("ВестиУУНаПланеСчетовХозрасчетный");
		ИначеЕсли Показатель = "ФО" Тогда
			ДоступностьПоказателя = ПолучитьФункциональнуюОпцию("ВестиУчетНаПланеСчетовХозрасчетныйВВалютеФинОтчетности");
		ИначеЕсли Показатель = "РазницаБУиУУ" Тогда
			ДоступностьПоказателя = ПолучитьФункциональнуюОпцию("ВестиУУНаПланеСчетовХозрасчетный") И ПолучитьФункциональнуюОпцию("ВалютыУпрИРеглУчетаСовпадают");
		КонецЕсли;
		Если Не ДоступностьПоказателя Тогда
			ПараметрыОтчета.Вставить("Показатель" + Показатель, Ложь);
		КонецЕсли;
	
	КонецЦикла;

КонецПроцедуры

// Подбирает вариант дополнительного набора данных, поля которого должны быть доступны для использования в СКД.
//
// Параметры:
//  ТипПоля      - ОписаниеТипов - анализируемый набор типов поля СКД.
//  ИмяНабора    - Строка - возвращаемый параметр. Имя дополнительного набора данных: ОС, НМА или ФизЛица.
//
Процедура ПодобратьДополнительныйНаборДанных(ТипПоля, ИмяНабора) Экспорт

	Если ТипПоля.СодержитТип(БухгалтерскийУчетКлиентСерверПереопределяемый.ТипОсновныеСредства()) Тогда
		ИмяНабора = "ОС";
	ИначеЕсли ТипПоля.СодержитТип(Тип("СправочникСсылка.НематериальныеАктивы")) Тогда
		ИмяНабора = "НМА";
	ИначеЕсли ТипПоля.СодержитТип(Тип("СправочникСсылка.ФизическиеЛица")) Тогда
		ИмяНабора = "ФизЛица";
	КонецЕсли;

КонецПроцедуры

// Устанавливает свойства поля связанного набора данных для стандартных бухгалтерских отчетов.
//
// Параметры:
//	ПолеНабора - ПолеНабораДанныхСхемыКомпоновкиДанных  - Поле набора данных.
//	Схема - СхемаКомпоновкиДанных - Схема отчета.
//	ИмяНабора - Строка - Имя связанного набора.
//	ПараметрыПоляВладельца - Структура - Содержит ключ:
//		* ИндексСубконто - Число - Номер субконто.
//		* ЗаголовокСубконто - Строка - Название вида субконто.
//	ИмяПоляПрефикс - Строка - Префикс для имени поля.
//
Процедура ОбработатьПолеНабораДанныхСвязаннойИнформации(ПолеНабора, Схема, ИмяНабора, ПараметрыПоляВладельца, ИмяПоляПрефикс = "Субконто") Экспорт

	Если СтрНайти(ПолеНабора.Поле, "ОС_Владелец") Тогда
			
			ПолеНабора.ОграничениеИспользования.Группировка = Ложь;
			ПолеНабора.ОграничениеИспользования.Условие     = Ложь;
		
	КонецЕсли;

КонецПроцедуры

//-- НЕ УТ

Процедура УдалитьСсылкуНаСправкуИзОписанияФорматированнойСтроки(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ИдентификаторЗаданияАктуализации")
		И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "АдресХранилищаАктуализации") Тогда
		
		БухгалтерскиеОтчеты.УдалитьСсылкуНаСправкуИзОписанияФорматированнойСтроки(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается из обработчика события "ПриЗагрузкеПользовательскихНастроекНаСервере" формы отчета.
//
// Параметры:
//	ФормаОтчета   - ФормаКлиентскогоПриложения - Форма отчета.
//
Процедура ПроверитьАктуальность(ФормаОтчета) Экспорт
	
	ПараметрыПроверки = БухгалтерскиеОтчетыКлиентСервер.ИнициализироватьПараметрыПроверкиАктуальности(ФормаОтчета);
	ДанныеАктуализации = Новый Структура("ИдентификаторЗаданияАктуализации,АдресХранилищаАктуализации", "", "");
	ЗаполнитьЗначенияСвойств(ДанныеАктуализации, ФормаОтчета);
		
	БухгалтерскиеОтчеты.ПроверитьАктуальность(ПараметрыПроверки, ДанныеАктуализации);
	ЗаполнитьЗначенияСвойств(ФормаОтчета, ДанныеАктуализации);
	
КонецПроцедуры

Процедура ДополнительныеПараметрыОтчета(ПараметрыОтчета, Отчет, НеДобавлятьРазницу = Ложь) Экспорт
	
	//++ НЕ УТ
	ПараметрыОтчета.Вставить("ПоказательУУ"                     , Мин(Отчет.ПоказательУУ, ПолучитьФункциональнуюОпцию("ВестиУУНаПланеСчетовХозрасчетный")));
	ПараметрыОтчета.Вставить("ПоказательФО"                     , Мин(Отчет.ПоказательФО, ПолучитьФункциональнуюОпцию("ВестиУчетНаПланеСчетовХозрасчетныйВВалютеФинОтчетности")));
	
	Если Не НеДобавлятьРазницу Тогда
		
		ПараметрыОтчета.Вставить("ПоказательРазницаБУиУУ"           , 
			Мин(Отчет.ПоказательРазницаБУиУУ, ПолучитьФункциональнуюОпцию("ВестиУУНаПланеСчетовХозрасчетный") И ПолучитьФункциональнуюОпцию("ВалютыУпрИРеглУчетаСовпадают")));
		
	КонецЕсли;
	//-- НЕ УТ
	
КонецПроцедуры

Процедура ДобавитьДополнительныеГруппировки(Отчет) Экспорт
	
	Если БухгалтерскийУчетПереопределяемый.ИспользоватьНаправленияДеятельности() Тогда
		НоваяСтрока = Отчет.Группировка.Добавить();
		НоваяСтрока.Поле           = "НаправлениеДеятельности";
		НоваяСтрока.Использование  = Ложь;
		НоваяСтрока.Представление  = НСтр("ru = 'Направление деятельности';
											|en = 'Line of business'");
		НоваяСтрока.ТипГруппировки = 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьДополнительныеОтборы(Отчет) Экспорт
	
	Если БухгалтерскийУчетПереопределяемый.ИспользоватьНаправленияДеятельности() Тогда
		
		Поле = Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.НайтиПоле(Новый ПолеКомпоновкиДанных("НаправлениеДеятельности"));
		БухгалтерскиеОтчетыКлиентСервер.ДобавитьОтбор(Отчет.КомпоновщикНастроек, "НаправлениеДеятельности", Поле.Тип.ПривестиЗначение(Неопределено), , Ложь); 
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОпределениеВидаСуммыОтчета(Отчет, ВидСуммыФормированияОтчета) Экспорт
	
	// Определим сумму, по которой формируется отчет:
	Отчет.ПоказательБУ = (ВидСуммыФормированияОтчета = 0);
	Отчет.ПоказательУУ = (ВидСуммыФормированияОтчета = 1);
	Отчет.ПоказательФО = (ВидСуммыФормированияОтчета = 2);
	
КонецПроцедуры

Процедура ДобавитьВидСуммОтчета(СписокВидовСуммОтчета) Экспорт
	
	//++ НЕ УТ
	Если ПолучитьФункциональнуюОпцию("ВестиУУНаПланеСчетовХозрасчетный") Тогда
		СписокВидовСуммОтчета.Добавить(1, НСтр("ru = 'УУ';
												|en = 'MA'"));
	КонецЕсли;
	Если ПолучитьФункциональнуюОпцию("ВестиУчетНаПланеСчетовХозрасчетныйВВалютеФинОтчетности") Тогда
		СписокВидовСуммОтчета.Добавить(2, НСтр("ru = 'ФО';
												|en = 'FR'"));
	КонецЕсли;
	//-- НЕ УТ
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//++ НЕ УТ

Функция МассивФормДляДобавленияПоказателейУправленческогоУчетаИОтчетности()
	
	МассивВозврата = Новый Массив;
	МассивВозврата.Добавить("Отчет.ОборотноСальдоваяВедомость.Форма.ФормаОтчета");
	МассивВозврата.Добавить("Отчет.ОборотноСальдоваяВедомостьПоСчету.Форма.ФормаОтчета");
	МассивВозврата.Добавить("Отчет.АнализСубконто.Форма.ФормаОтчета");
	МассивВозврата.Добавить("Отчет.АнализСчета.Форма.ФормаОтчета");
	МассивВозврата.Добавить("Отчет.КарточкаСубконто.Форма.ФормаОтчета");
	МассивВозврата.Добавить("Отчет.КарточкаСчета.Форма.ФормаОтчета");
	МассивВозврата.Добавить("Отчет.ОборотыМеждуСубконто.Форма.ФормаОтчета");
	МассивВозврата.Добавить("Отчет.ОборотыСчета.Форма.ФормаОтчета");
	МассивВозврата.Добавить("Отчет.ОтчетПоПроводкам.Форма.ФормаОтчета");
	МассивВозврата.Добавить("Отчет.СводныеПроводки.Форма.ФормаОтчета");
	
	Возврат МассивВозврата;
	
КонецФункции

Процедура ДобавитьНовыйПоказательОтчетаНаФорму(Форма, ИмяПоказателя, ИмяСледующегоЭлемента = Неопределено)
	
	ЭлементПередКоторымБудемВставлятьПоказатель = Форма.Элементы.Найти(ИмяСледующегоЭлемента);
	Если ЭлементПередКоторымБудемВставлятьПоказатель = Неопределено Тогда
		// Элемент перед которым вставляем показатель не найден, будем добавлять в конец,
		// по умолчанию родительская группа - "ГруппаПоказатели".
		Родитель = Форма.Элементы.Найти("ГруппаПоказатели");
		Если Родитель = Неопределено Тогда
			// Родительская группа тоже не найдена - не добавляем показатель
			Возврат;
		КонецЕсли;
	Иначе
		Родитель = ЭлементПередКоторымБудемВставлятьПоказатель.Родитель;
	КонецЕсли;
	
	НовыйПоказатель = Форма.Элементы.Вставить(ИмяПоказателя, Тип("ПолеФормы"),
		Родитель, ЭлементПередКоторымБудемВставлятьПоказатель);
	НовыйПоказатель.ПутьКДанным = "Отчет." + ИмяПоказателя;
	НовыйПоказатель.Вид = ВидПоляФормы.ПолеФлажка;
	НовыйПоказатель.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
	
	НовыйПоказатель.УстановитьДействие("ПриИзменении", "Подключаемый_ДополнительныеПоказателиПриИзменении");
	
КонецПроцедуры

//-- НЕ УТ

#КонецОбласти
