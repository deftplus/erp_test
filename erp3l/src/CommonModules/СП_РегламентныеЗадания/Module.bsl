#Область ПрограммныйИнтерфейс

// Выполняет отправку подготовленных исходящих сообщений.
// 
// Параметры:
//  Кластер - СправочникСсылка.СП_Кластеры - кластер для обмена.
//  
Процедура ОтправитьИсходящиеСообщения(Кластер = Неопределено) Экспорт

	Если Не СП_СхемыДанных.ПодсистемаВключена() Тогда
		Возврат;
	КонецЕсли;
    
    Если ЗначениеЗаполнено(Кластер) Тогда                                                      
        СП_РаботаССообщениями.ВыполнитьОтправкуИсходящихСообщений(Кластер);        
    Иначе        
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ
        |   СП_Кластеры.Ссылка КАК Ссылка
        |ИЗ
        |   Справочник.СП_Кластеры КАК СП_Кластеры
        |ГДЕ
        |   СП_Кластеры.ПометкаУдаления = Ложь";
        
        РезультатЗапроса = Запрос.Выполнить();
        
        Выборка = РезультатЗапроса.Выбрать();
        
        Пока Выборка.Следующий() Цикл
            Попытка
                СП_РаботаССообщениями.ВыполнитьОтправкуИсходящихСообщений(Выборка.Ссылка);                    	            
            Исключение
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации("СП.Регламентная отправка сообщений", УровеньЖурналаРегистрации.Ошибка, , ,
					ТекстОшибки, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);            
            КонецПопытки;            
        КонецЦикла;       
        
    КонецЕсли;
	

КонецПроцедуры

// Выполняет обработку зарегистрированных исходящих сообщений.
//
Процедура СП_ОбработкаИсходящихСообщений() Экспорт

	Если Не СП_СхемыДанных.ПодсистемаВключена() Тогда
		Возврат;
	КонецЕсли;

	СП_РаботаССообщениями.ВыполнитьОбработкуИсходящихСообщений();

КонецПроцедуры

// Выполняет получение сообщений из Кафка и готовит их для обработки.
// 
// Параметры:
//  Кластер - СправочникСсылка.СП_Кластеры - кластер для обмена.
//  
Процедура ПолучитьВходящиеСообщения(Кластер = Неопределено) Экспорт

	Если Не СП_СхемыДанных.ПодсистемаВключена() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Кластер) Тогда
		СП_РаботаССообщениями.ВыполнитьПолучениеВходящихСообщений(Кластер);
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СП_Кластеры.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.СП_Кластеры КАК СП_Кластеры
			|ГДЕ
			|	НЕ СП_Кластеры.ПометкаУдаления";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Попытка
				СП_РаботаССообщениями.ВыполнитьПолучениеВходящихСообщений(Выборка.Ссылка);
			Исключение
				ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				ЗаписьЖурналаРегистрации("СП.Регламентное получение сообщений", УровеньЖурналаРегистрации.Ошибка, , ,
					ТекстОшибки, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обработку подготовленных входящих сообщений.
// 
Процедура ОбработатьВходящиеСообщения() Экспорт

	Если Не СП_СхемыДанных.ПодсистемаВключена() Тогда
		Возврат;
	КонецЕсли;

	СП_РаботаССообщениями.ВыполнитьОбработкуВходящихСообщений();

КонецПроцедуры

// Выполняет очистку журнала сообщений обмена.
//
Процедура ОчиститьСообщенияОбмена() Экспорт
	
	// По-умолчанию храним сообщения за последние 3 месяца, более ранние удаляем.
	МесяцевХранения = л3_СерверПовтИсп.ЗначениеНетиповойКонстанты("МесяцевХраненияСообщений");
	Если НЕ ЗначениеЗаполнено(МесяцевХранения) Тогда
		МесяцевХранения = 3;
	КонецЕсли;
	ДатаОчистки = ДобавитьМесяц(НачалоДня(ТекущаяДатаСеанса()), МесяцевХранения * -1);

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаОчистки", ДатаОчистки);
	Запрос.УстановитьПараметр("СостояниеНовое", Перечисления.СП_СостоянияСообщений.Новое);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СП_СообщенияОбмена.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.СП_СообщенияОбмена КАК СП_СообщенияОбмена
	|ГДЕ
	|	СП_СообщенияОбмена.ДатаВремяОбработки <= &ДатаОчистки
	|	И СП_СообщенияОбмена.СостояниеСообщения <> &СостояниеНовое";

	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();

		Попытка
			Пока Выборка.Следующий() Цикл
				СообщениеОбъект = Выборка.Ссылка.ПолучитьОбъект();
				СообщениеОбъект.Удалить();
			КонецЦикла;

		Исключение
			ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());

			ЗаписьЖурналаРегистрации("Очистка журнала сообщений обмена", УровеньЖурналаРегистрации.Ошибка, , ,
				ТекстОшибки, РежимТранзакцииЗаписиЖурналаРегистрации.Независимая);

		КонецПопытки;

	КонецЕсли;

	УстановитьПривилегированныйРежим(Ложь);

КонецПроцедуры

// Выполняет обновление схем данных для элементов справочника СП_ОбъектыОбмена.
// 
Процедура ОбновитьСхемыДанных() Экспорт

	Если Не СП_СхемыДанных.ПодсистемаВключена() Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьОбновлениеСхемДанных();

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ЭтоСхемаДанныхИзДругойКонфигурации(ИмяОбъекта, ПространствоИмен)

	ПространствоИменОбъекта = СП_СхемыДанных.ПространствоИменПоИмениОбъекта(ИмяОбъекта);

	Возврат Не ПространствоИменОбъекта = ПространствоИмен;

КонецФункции

Процедура ВыполнитьОбновлениеСхемДанных()

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СП_СхемыДанных.Наименование КАК ПространствоИмен,
	|	СП_СхемыДанных.ИмяОбъекта КАК ИмяОбъекта,
	|	СП_СхемыДанных.Ссылка КАК СхемаДанныхСсылка,
	|	СП_СхемыДанных.ВерсияСхемы КАК ВерсияСхемы,
	|	СП_СхемыДанных.ТекстСхемы КАК СхемаДанныхСтрока
	|ИЗ
	|	Справочник.СП_СхемыДанных КАК СП_СхемыДанных";

	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл

		Если ЭтоСхемаДанныхИзДругойКонфигурации(Выборка.ИмяОбъекта, Выборка.ПространствоИмен) Тогда
			Продолжить;
		КонецЕсли;

		СхемаДанныхСтрока = СП_СхемыДанных.ПолучитьСхемуДанныхОбъектаВВидеСтроки(Выборка.ИмяОбъекта);
		Если Выборка.СхемаДанныхСтрока = СхемаДанныхСтрока Тогда
			Продолжить;
		КонецЕсли;

		СхемаОбъект = Выборка.СхемаДанныхСсылка.ПолучитьОбъект();
		СхемаОбъект.ВерсияСхемы = Выборка.ВерсияСхемы + 1;
		СхемаОбъект.ТекстСхемы = СхемаДанныхСтрока;

		Попытка
			СхемаОбъект.Записать();

		Исключение
			КомментарийОшибки = СтрШаблон("Не удалось обновить схему данных.
										  |Причина: %1", ОписаниеОшибки());

			ЗаписьЖурналаРегистрации(
				"KafkaConnector", УровеньЖурналаРегистрации.Ошибка, , Выборка.ПространствоИмен, КомментарийОшибки);

		КонецПопытки;

	КонецЦикла;

КонецПроцедуры

#КонецОбласти