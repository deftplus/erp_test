
Процедура ПриСозданииНаСервере(Форма, ИменаСубконто) Экспорт

	Форма.КэшируемыеЗначения = Новый Структура;	
	
	Форма.КэшируемыеЗначения.Вставить("ВыбытиеИнвестиций", ТипЗнч(Форма.Объект.Ссылка) = Тип("ДокументСсылка.ВыбытиеИнвестиций"));
	
	Форма.КэшируемыеЗначения.Вставить("ИменаСубконто", 		ИменаСубконто);	
	Форма.КэшируемыеЗначения.Вставить("ПланСчетов", 		Справочники.ПланыСчетовБД.ПолучитьПланСчетовБД("Хозрасчетный"));
	Форма.КэшируемыеЗначения.Вставить("КлючевыеСубконто", 	ИнвестицииКлиентСервер.ПолучитьКлючевыеСубконтоИнвестиций());
	
	ПараметрыВыбораИсточник = Новый Массив;
	ПараметрыВыбораИсточник.Добавить(Новый ПараметрВыбора("Владелец", Форма.КэшируемыеЗначения.ПланСчетов));
	ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораИсточник);	
	
	Для каждого ИмяСчета Из Форма.КэшируемыеЗначения.ИменаСубконто Цикл
		Форма.Элементы[ИмяСчета.Ключ].ПараметрыВыбора = ПараметрыВыбора;
		МСФОКлиентСерверУХ.ОбновитьСубконтоСчета(Форма, ИмяСчета.Ключ);
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьКлючевыеСубконтоИнвестицийХозрасчетный()

	КлючевыеСубконто = Новый Соответствие;	
	КлючевыеСубконто.Вставить(Тип("СправочникСсылка.Контрагенты"), 			"Учредители");
	КлючевыеСубконто.Вставить(Тип("СправочникСсылка.Организации"),			"Организации");
	КлючевыеСубконто.Вставить(Тип("СправочникСсылка.ДоговорыКонтрагентов"),	"ДоговорыКонтрагентов");

	Возврат КлючевыеСубконто;

КонецФункции

Функция ПолучитьБалансовуюСтоимость(Организация, ДатаДокумента, ДокументСсылка, СчетУчета, ОрганизацияОбъектИнвестирования) Экспорт

	КонтрагентыПоОрганизации = ОрганизацииВызовСервераУХ.ПолучитьКонтрагентовПоОрганизации(ОрганизацияОбъектИнвестирования);
	Если КонтрагентыПоОрганизации.Количество() = 0 Тогда
		Возврат 0;	
	КонецЕсли;
	
	ТабОстатки = РегистрыБухгалтерии.Хозрасчетный.Остатки(
										Новый МоментВремени(ДатаДокумента, ДокументСсылка), 
										,
										Новый Структура("Организация, Счет,Субконто1", Организация, СчетУчета.СчетСсылка, КонтрагентыПоОрганизации[0]),
										,
										"Сумма"
									);
									
	Если ТабОстатки.Количество() = 0 Тогда
		Возврат 0;
	ИначеЕсли СчетУчета.СчетСсылка.Вид = ВидСчета.Пассивный Тогда
		Возврат ТабОстатки[0].СуммаОстатокКт;
	Иначе 
		Возврат ТабОстатки[0].СуммаОстатокДт - ТабОстатки[0].СуммаОстатокКт;
	КонецЕсли;								

КонецФункции

Функция ПолучитьДанныеУправленияФормой(ОрганизацияИнвестор, ОбъектИнвестирования, ДатаСреза = Неопределено) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЕСТЬNULL(ВЫРАЗИТЬ(&ОрганизацияИнвестор КАК Справочник.Организации).ИностранныйНалоговыйРезидент, ЛОЖЬ) КАК ИностранныйНалоговыйРезидент,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(&ОбъектИнвестирования КАК Справочник.Организации).ИностранныйНалоговыйРезидент, ЛОЖЬ) КАК ИностранныйНалоговыйРезидентОИ,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(&ОбъектИнвестирования КАК Справочник.Организации).ФормаУчастияВКапитале, ЛОЖЬ) КАК ФормаУчастияВКапиталеАкции");
	
	Запрос.УстановитьПараметр("ОрганизацияИнвестор", 	ОрганизацияИнвестор);
	Запрос.УстановитьПараметр("ОбъектИнвестирования", 	ОбъектИнвестирования);
	
	Результат = ПроведениеСерверУХ.СтрокаТаблицыЗначенийВСтруктуру(Запрос.Выполнить().Выгрузить()[0]);
	
	Результат.Вставить("ПланСчетов", 	Справочники.ПланыСчетовБД.ПолучитьПланСчетовБД("Хозрасчетный"));
	Результат.Вставить("ВедетсяУчет", 	ВстраиваниеУХВызовСервера.ЕстьУчетнаяПолитика(ОрганизацияИнвестор, ДатаСреза));
	
	ПараметрыВыбораИсточник = Новый Массив;
	ПараметрыВыбораИсточник.Добавить(Новый ПараметрВыбора("Владелец", Результат.ПланСчетов));
	
	Результат.Вставить("ПараметрыВыбораПоля", 	Новый ФиксированныйМассив(ПараметрыВыбораИсточник));
	
	Возврат Результат;

КонецФункции

Функция ПолучитьДанныеЗаполненияСчетовУчета(ОрганизацияИнвестор, ОбъектИнвестирования, ДатаСреза = Неопределено) Экспорт

	ЕстьУчетнаяПолитика = ВстраиваниеУХВызовСервера.ЕстьУчетнаяПолитика(ОрганизацияИнвестор, ДатаСреза);
	Если Не ЕстьУчетнаяПолитика Тогда
		Возврат Новый Структура; 
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СчетРасчетов.Ссылка КАК СчетРасчетов,
	|	СчетУчета.Ссылка КАК СчетУчета,
	|	СчетДохода.Ссылка КАК СчетДохода,
	|	СчетРасхода.Ссылка КАК СчетРасхода
	|ИЗ
	|	Справочник.СчетаБД КАК СчетРасчетов,
	|	Справочник.СчетаБД КАК СчетУчета,
	|	Справочник.СчетаБД КАК СчетДохода,
	|	Справочник.СчетаБД КАК СчетРасхода
	|ГДЕ
	|	СчетРасчетов.СчетСсылка = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками)
	|	И СчетУчета.СчетСсылка = ВЫБОР
	|			КОГДА &ОрганизацияИнвестор = &ОбъектИнвестирования
	|				ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.СобственныеАкции_ОбыкновенныеАкции)
	|			КОГДА ВЫРАЗИТЬ(&ОбъектИнвестирования КАК Справочник.Организации).ФормаУчастияВКапитале = ИСТИНА
	|				ТОГДА ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Акции)
	|			ИНАЧЕ ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.Паи)
	|		КОНЕЦ
	|	И СчетДохода.СчетСсылка = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеДоходы)
	|	И СчетРасхода.СчетСсылка = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПрочиеРасходы)");
	
	Запрос.УстановитьПараметр("ОрганизацияИнвестор", 	ОрганизацияИнвестор);
	Запрос.УстановитьПараметр("ОбъектИнвестирования", 	ОбъектИнвестирования);
		
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Структура;
	Иначе	
		Возврат ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(РезультатЗапроса.Выгрузить()[0]);
	КонецЕсли;	
	
КонецФункции

Функция ПолучитьТаблицуОборотовПрямыеИнвестиции(Сценарий, ПериодОтчета, МассивОрганизаций, ВалютаПредставленияГруппы) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДвижениеИнвестицийОбороты.ОбъектИнвестирования,
	|	ДвижениеИнвестицийОбороты.Инвестор,
	|	ДвижениеИнвестицийОбороты.Инвестор.ФункциональнаяВалюта КАК ВалютаИнвестора,
	|	ДвижениеИнвестицийОбороты.Период КАК Период,
	|	ДвижениеИнвестицийОбороты.ИнвестицииОборот КАК ИнвестицииОборот,
	|	ДвижениеИнвестицийОбороты.ПрямаяДоляВладенияОборот КАК ПрямаяДоляВладенияОборот,
	|	ДвижениеИнвестицийОбороты.БалансоваяСтоимостьОборот КАК БалансоваяСтоимостьРасход
	|ПОМЕСТИТЬ втОбороты
	|ИЗ
	|	РегистрНакопления.ДвижениеИнвестиций.Обороты(
	|			&ДатаНачалаПериода,
	|			&ДатаОкончанияПериода,
	|			Регистратор,
	|			Сценарий = &Сценарий
	|				И ОбъектИнвестирования В (&МассивОрганизаций)
	|				И Инвестор В (&МассивОрганизаций)) КАК ДвижениеИнвестицийОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвижениеИнвестицийОстатки.ОбъектИнвестирования,
	|	ДвижениеИнвестицийОстатки.Инвестор,
	|	ДвижениеИнвестицийОстатки.ИнвестицииОборот КАК ИнвестицииОстаток,
	|	ДвижениеИнвестицийОстатки.Инвестор.ФункциональнаяВалюта КАК ВалютаИнвестора,
	|	ДвижениеИнвестицийОстатки.ПрямаяДоляВладенияОборот КАК ПрямаяДоляВладенияОстаток
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	РегистрНакопления.ДвижениеИнвестиций.Обороты(
	|			,
	|			&ДатаНачалаПериода,
	|			,
	|			Сценарий = &Сценарий
	|				И ОбъектИнвестирования.ОрганизационнаяЕдиница В (&МассивОрганизаций)
	|				И Инвестор В (&МассивОрганизаций)) КАК ДвижениеИнвестицийОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТребуемыеКурсы.Валюта,
	|	ТребуемыеКурсы.Период
	|ПОМЕСТИТЬ втТребуемыеКурсы
	|ИЗ
	|	(ВЫБРАТЬ
	|		т.ВалютаИнвестора КАК Валюта,
	|		т.Период КАК Период
	|	ИЗ
	|		втОбороты КАК т
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&ВалютаПредставленияГруппы,
	|		т.Период
	|	ИЗ
	|		втОбороты КАК т) КАК ТребуемыеКурсы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКурсыНаНачало.Валюта КАК Валюта,
	|	втКурсыНаНачало.Кратность,
	|	втКурсыНаНачало.Курс
	|ПОМЕСТИТЬ втКурсыНаНачало
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(
	|			&ДатаНачалаПериода,
	|			Валюта В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					т.Валюта
	|				ИЗ
	|					втТребуемыеКурсы КАК т)) КАК втКурсыНаНачало
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втИнвестицииПериода.Валюта,
	|	КурсыВалют.Кратность,
	|	КурсыВалют.Курс,
	|	ВЫБОР
	|		КОГДА КурсыВалют.Валюта ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяПредыдущийКурс,
	|	втИнвестицииПериода.Период
	|ПОМЕСТИТЬ втКурсыБезПредыдущих
	|ИЗ
	|	втТребуемыеКурсы КАК втИнвестицииПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО втИнвестицииПериода.Валюта = КурсыВалют.Валюта
	|			И втИнвестицииПериода.Период = КурсыВалют.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКурсыБезПредыдущих.Валюта,
	|	МАКСИМУМ(КурсыВалют.Период) КАК Период
	|ПОМЕСТИТЬ втПериодыПредыдущихКурсов
	|ИЗ
	|	втКурсыБезПредыдущих КАК втКурсыБезПредыдущих
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
	|		ПО втКурсыБезПредыдущих.Валюта = КурсыВалют.Валюта
	|			И (КурсыВалют.Период МЕЖДУ &ДатаНачалаПериода И втКурсыБезПредыдущих.Период)
	|			И (втКурсыБезПредыдущих.ТребуетсяПредыдущийКурс)
	|
	|СГРУППИРОВАТЬ ПО
	|	втКурсыБезПредыдущих.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втКурсыБезПредыдущих.Период,
	|	втКурсыБезПредыдущих.Валюта,
	|	ВЫБОР
	|		КОГДА НЕ втКурсыБезПредыдущих.ТребуетсяПредыдущийКурс
	|			ТОГДА втКурсыБезПредыдущих.Кратность
	|		ИНАЧЕ ЕСТЬNULL(КурсыВалютПредыдущие.Кратность, КурсыВалютНаНачалоПериода.Кратность)
	|	КОНЕЦ КАК Кратность,
	|	ВЫБОР
	|		КОГДА НЕ втКурсыБезПредыдущих.ТребуетсяПредыдущийКурс
	|			ТОГДА втКурсыБезПредыдущих.Курс
	|		ИНАЧЕ ЕСТЬNULL(КурсыВалютПредыдущие.Курс, КурсыВалютНаНачалоПериода.Курс)
	|	КОНЕЦ КАК Курс
	|ПОМЕСТИТЬ втКурсыВалют
	|ИЗ
	|	втКурсыБезПредыдущих КАК втКурсыБезПредыдущих
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПериодыПредыдущихКурсов КАК втПериодыПредыдущихКурсов
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютПредыдущие
	|			ПО втПериодыПредыдущихКурсов.Валюта = КурсыВалютПредыдущие.Валюта
	|				И втПериодыПредыдущихКурсов.Период = КурсыВалютПредыдущие.Период
	|			ЛЕВОЕ СОЕДИНЕНИЕ втКурсыНаНачало КАК КурсыВалютНаНачалоПериода
	|			ПО втПериодыПредыдущихКурсов.Валюта = КурсыВалютНаНачалоПериода.Валюта
	|				И (втПериодыПредыдущихКурсов.Период ЕСТЬ NULL )
	|		ПО (втКурсыБезПредыдущих.ТребуетсяПредыдущийКурс)
	|			И втКурсыБезПредыдущих.Валюта = втПериодыПредыдущихКурсов.Валюта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	&ДатаНачалаПериода КАК Дата,
	|	ИСТИНА КАК Остаток,
	|	ДвижениеИнвестиций.ОбъектИнвестирования КАК ОрганизацияСобственность,
	|	ДвижениеИнвестиций.Инвестор КАК ОрганизацияСобственник,
	|	ДвижениеИнвестиций.ПрямаяДоляВладенияОстаток КАК ДоляПрямогоВладения,
	|	0 КАК Инвестиции,
	|	0 КАК ИнвестицииФВ,
	|	0 КАК СтоимостьДоли,
	|	0 КАК СтоимостьДолиФВ,
	|	ВЫБОР
	|		КОГДА ДвижениеИнвестиций.ВалютаИнвестора = &ВалютаПредставленияГруппы
	|			ТОГДА 1
	|		КОГДА ЕСТЬNULL(втВалютаПредставленияГруппы.Курс, 0) = 0
	|				ИЛИ ЕСТЬNULL(втКурсыВалют.Кратность, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ втКурсыВалют.Курс * втВалютаПредставленияГруппы.Кратность / (втВалютаПредставленияГруппы.Курс * втКурсыВалют.Кратность)
	|	КОНЕЦ КАК Курс
	|ИЗ
	|	втОстатки КАК ДвижениеИнвестиций
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКурсыНаНачало КАК втКурсыВалют
	|		ПО ДвижениеИнвестиций.ВалютаИнвестора = втКурсыВалют.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКурсыНаНачало КАК втВалютаПредставленияГруппы
	|		ПО (втВалютаПредставленияГруппы.Валюта = &ВалютаПредставленияГруппы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДвижениеИнвестиций.Период,
	|	ЛОЖЬ,
	|	ДвижениеИнвестиций.ОбъектИнвестирования,
	|	ДвижениеИнвестиций.Инвестор,
	|	ДвижениеИнвестиций.ПрямаяДоляВладенияОборот,
	|	0,
	|	ДвижениеИнвестиций.ИнвестицииОборот,
	|	0,
	|	ДвижениеИнвестиций.БалансоваяСтоимостьРасход,
	|	ВЫБОР
	|		КОГДА ДвижениеИнвестиций.ВалютаИнвестора = &ВалютаПредставленияГруппы
	|			ТОГДА 1
	|		КОГДА ЕСТЬNULL(втВалютаПредставленияГруппы.Курс, 0) = 0
	|				ИЛИ ЕСТЬNULL(втКурсыВалют.Кратность, 0) = 0
	|			ТОГДА 0
	|		ИНАЧЕ втКурсыВалют.Курс * втВалютаПредставленияГруппы.Кратность / (втВалютаПредставленияГруппы.Курс * втКурсыВалют.Кратность)
	|	КОНЕЦ
	|ИЗ
	|	втОбороты КАК ДвижениеИнвестиций
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКурсыВалют КАК втКурсыВалют
	|		ПО ДвижениеИнвестиций.ВалютаИнвестора = втКурсыВалют.Валюта
	|			И ДвижениеИнвестиций.Период = втКурсыВалют.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ втКурсыВалют КАК втВалютаПредставленияГруппы
	|		ПО (втВалютаПредставленияГруппы.Валюта = &ВалютаПредставленияГруппы)
	|			И ДвижениеИнвестиций.Период = втВалютаПредставленияГруппы.Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОрганизацияСобственность,
	|	Дата");
	
	Запрос.УстановитьПараметр("Сценарий", 					Сценарий);
	Запрос.УстановитьПараметр("ДатаНачалаПериода", 			НачалоДня(ПериодОтчета.ДатаНачала));
	Запрос.УстановитьПараметр("ДатаОкончанияПериода", 		КонецДня(ПериодОтчета.ДатаОкончания));
	Запрос.УстановитьПараметр("МассивОрганизаций", 			МассивОрганизаций);
	Запрос.УстановитьПараметр("ВалютаПредставленияГруппы",	ВалютаПредставленияГруппы);
	
	ТабИнвестиции = Запрос.Выполнить().Выгрузить();	
	РассчитатьСуммыВВалютеПредставления(ТабИнвестиции);

	Возврат ТабИнвестиции;

КонецФункции

Процедура РассчитатьСуммыВВалютеПредставления(ТабИнвестиции)
	
	Перем СтрокаПред;
	
    КоличествоСтрок = ТабИнвестиции.Количество();
        
    ИнвестицииОстатокФВ = 0;
    ИнвестицииОстаток = 0;
    ИнвестицииОстатокПред = 0;
    СтоимостьДолиФВ = 0;
    СтоимостьДоли = 0;
    СтоимостьДолиПред = 0;
    
    Для ИндексСтроки = 0 По КоличествоСтрок-1 Цикл
        
        СтрокаТаб = ТабИнвестиции.Получить(ИндексСтроки);
        
        ПерваяСтрокаОрганизации = (СтрокаПред = Неопределено) 
        Или (СтрокаПред.ОрганизацияСобственность <> СтрокаТаб.ОрганизацияСобственность);
        
        Если ПерваяСтрокаОрганизации Тогда		
            
            ИнвестицииОстатокФВ 	= СтрокаТаб.ИнвестицииФВ;
			ИнвестицииОстатокПред	= 0;
			ИнвестицииОстаток		= ИнвестицииОстатокФВ * СтрокаТаб.Курс;            
            
            СтоимостьДолиФВ 		= СтрокаТаб.СтоимостьДолиФВ;
            СтоимостьДолиПред		= 0;
            СтоимостьДоли			= СтоимостьДолиФВ * СтрокаТаб.Курс;			
            
        Иначе
            
            ИнвестицииОстатокФВ 	= СтрокаТаб.ИнвестицииФВ + ИнвестицииОстатокФВ;
			ИнвестицииОстатокПред	= ИнвестицииОстаток;
			ИнвестицииОстаток		= ИнвестицииОстатокФВ * СтрокаТаб.Курс;            
            
            СтоимостьДолиФВ 		= СтрокаТаб.СтоимостьДолиФВ + СтоимостьДолиФВ;
            СтоимостьДолиПред		= СтоимостьДоли;
            СтоимостьДоли			= СтоимостьДолиФВ * СтрокаТаб.Курс;			
            
        КонецЕсли;							
        
        СтрокаТаб.Инвестиции 	= ИнвестицииОстаток - ИнвестицииОстатокПред;
        СтрокаТаб.СтоимостьДоли = СтоимостьДоли - СтоимостьДолиПред;
        
        СтрокаПред = СтрокаТаб;		
        
    КонецЦикла;

КонецПроцедуры

Функция ПолучитьСтатусыИК() Экспорт

	

КонецФункции

Процедура ПроверитьДокументыМоделирования(ДокументыМоделирования, Реквизиты, Отказ) Экспорт
	
	Если Не Реквизиты.НалоговыйУчет И Не Реквизиты.РегламентированныйУчет Тогда
		Возврат; // при моделировании проверка не требуется
	ИначеЕсли ДокументыМоделирования.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	ТекстСообщения = НСтр("ru = 'Отражение документа %Ссылка% в учете невозможно. Необходимо отразить в учете (либо отменить проведение) документы моделирования:'");
	ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Ссылка%", Реквизиты.Ссылка);
	Для каждого ДокументМоделирования Из ДокументыМоделирования Цикл
		ТекстСообщения = ТекстСообщения + Символы.ПС + " - " + Строка(ДокументМоделирования);
	КонецЦикла;
	
	ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, Отказ);

КонецПроцедуры

#Область Проведение

Процедура СформироватьДвижения(Движения, ДополнительныеСвойства, Отказ) Экспорт
	
	Перем Регламент;
	Перем Хозрасчетный;
	
	Реквизиты			= ДополнительныеСвойства.Реквизиты;
	ДвижениеИнвестиций 	= ДополнительныеСвойства.ТаблицыДляДвижений.ДвижениеИнвестиций;
	
	Если Реквизиты.Свойство("Регламент", Регламент) И ЗначениеЗаполнено(Регламент) Тогда			
		
		// в прямой доле содержится эффективная доля из регламента, прямые доли не пишем
		ДвижениеИнвестиций.Колонки.ПрямаяДоляВладения.Имя = "ЭффективнаяДоля";
		Движения.СтатусыОбъектовИнвестирования.Загрузить(ДвижениеИнвестиций);
		ДвижениеИнвестиций.Очистить();
		
	Иначе
		
		ТаблицаСценариев = ДвижениеИнвестиций.Скопировать();
		ТаблицаСценариев.Свернуть("Сценарий");
		Для каждого Стр Из ТаблицаСценариев Цикл
			ИсточникРасчетаЭффективныхДолей = ДополнительныеСвойства.ТаблицыДляДвижений.ИсточникРасчетаЭффективныхДолей.Скопировать(Новый Структура("Сценарий", Стр.Сценарий));
			СтрокиСценария = ДвижениеИнвестиций.Скопировать(Новый Структура("Сценарий", Стр.Сценарий));
			ПоследовательностиУчастия = ПолучитьПоследовательностиУчастия(ИсточникРасчетаЭффективныхДолей, СтрокиСценария);
			Реквизиты.Сценарий = Стр.Сценарий;
			РасчетДолейВладения.СформироватьДвиженияПоследовательности(Движения, Реквизиты, ПоследовательностиУчастия, Отказ);	
		КонецЦикла;
		
		Если РасчетыПоКорпоративнымНалогам.ОпределитьУсловияВидимостиИДвиженияПоСамостоятельнумуКонтролю(Реквизиты) Тогда
			Движение = Движения.СамостоятельноеПризнаниеКонтроля.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты);
		КонецЕсли;
	КонецЕсли;
	
	Движения.ДвижениеИнвестиций.Загрузить(ДвижениеИнвестиций);

	Если Реквизиты.ЕстьУчетнаяПолитика И Реквизиты.РегламентированныйУчет Тогда
		ВстраиваниеУХ.ЗагрузитьТаблицыДвижений(Движения, ДополнительныеСвойства, Отказ);
	КонецЕсли;
	
	Для каждого Движение Из Движения Цикл	
		Движение.Записывать = Истина;	
	КонецЦикла;
		
КонецПроцедуры

Функция ПолучитьПоследовательностиУчастия(ИсточникРасчетаЭффективныхДолей, ДвижениеИнвестиций)

	ДвижениеИнвестиций.Индексы.Добавить("Инвестор");
	ТаблицаИнвесторы = ДвижениеИнвестиций.Скопировать(, "ОбъектИнвестирования");
	ТаблицаИнвесторы.Свернуть("ОбъектИнвестирования");

	Возврат РасчетДолейВладения.ПолучитьПоследовательностиУчастия(ТаблицаИнвесторы.ВыгрузитьКолонку("ОбъектИнвестирования"), ИсточникРасчетаЭффективныхДолей);
	
КонецФункции

Процедура ВыполнитьКонтрольРезультатовПроведения(Реквизиты, Отказ) Экспорт

	Если Не Реквизиты.ЕстьУчетнаяПолитика Или Не Реквизиты.РегламентированныйУчет Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ХозрасчетныйОстатки.СуммаОстаток КАК Сумма,
	|	ХозрасчетныйОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&Граница,
	|			Счет = &Счет,
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.Контрагенты),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						т.Ссылка
	|					ИЗ
	|						Справочник.Контрагенты КАК т
	|					ГДЕ
	|						т.ОрганизационнаяЕдиница = &ОбъектИнвестирования)) КАК ХозрасчетныйОстатки
	|ГДЕ
	|	(ХозрасчетныйОстатки.СуммаОстаток < 0
	|			ИЛИ ХозрасчетныйОстатки.КоличествоОстаток < 0)");
	
	Запрос.УстановитьПараметр("Граница", 				МСФОВызовСервераУХ.ПолучитьГраницуДоДокумента(Реквизиты.Период, Реквизиты.Ссылка));
	Запрос.УстановитьПараметр("Счет", 					Реквизиты.СчетУчета);
	Запрос.УстановитьПараметр("Организация",			Реквизиты.Организация);
	Запрос.УстановитьПараметр("ОбъектИнвестирования", 	Реквизиты.ОбъектИнвестирования);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОшибкаКоличества = ?(Выборка.Количество < 0, " недостаточное количество, требуется " + (-Выборка.Количество), "");
		ОшибкаСуммы = ?(Выборка.Сумма < 0, " недостаточная стоимость, требуется " + (-Выборка.Сумма), "");
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(
					"На счете учета " + Выборка.Счет + " не достаточно средств для операции:"
					+ ?(ОшибкаСуммы = "", ОшибкаКоличества, ?(ОшибкаКоличества="", ОшибкаСуммы, ОшибкаСуммы + "," +ОшибкаКоличества))
				, Отказ);		
		
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

Функция ПолучитьЦФО(МасОрганизации)

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Организации.Ссылка КАК ЦФО
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.Ссылка В(&Ссылка)
	|	И Не Организации.ИностранныйНалоговыйРезидент
	|	И Не Организации.ИспользоватьВРегламентированномУчете");
	
	Запрос.УстановитьПараметр("Ссылка", МасОрганизации);	
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЦФО");
	
КонецФункции

