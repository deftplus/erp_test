
// Обновление информационной базы конфигурации "Управление холдингом".
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	ОбновлениеИнформационнойБазыУХПереопределяемый.ПриДобавленииПодсистемы(Описание);
	
КонецПроцедуры

Процедура ПриДобавленииОбработчиковОбновления(Обработчики=Неопределено) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.1";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ПервыйЗапуск";
	Обработчик.НачальноеЗаполнение = Истина;
		
	#Область ОбработчикиОбновления_ВсеВерсии
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ОбновитьИнформациюПоМетаданным";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ЗаполнитьКатегориюОповещений";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "Справочники.ОперацииГрафиковДоговоров.ЗаполнитьПредопределенныеОперацииГрафиковДоговоров";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "Справочники.ВидыДоговоровКонтрагентовУХ.ЗаполнитьПредопределенныеВидыДоговоровКонтрагентовУХ";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "Справочники.ВидыКотировокФинансовыхИнструментов.ЗаполнитьПредопределенныеДанные";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ПроверкаСтандартныхПериодов";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "Справочники.ВидыСвязейОбъектов.ОбновитьПредопределенные";
	Обработчик.НачальноеЗаполнение = Истина;
	
	#КонецОбласти
	
	#Область ОбработчикиОбновления_1_0_1
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.140";
	Обработчик.Процедура = "Справочники.ПараметрыРасчетаРезервовПоДЗ.ОбновитьПредопределенные";	
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.1.143";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ОбновитьИсточникиДанныхДляТрансляции";	
	Обработчик.НачальноеЗаполнение = Истина;
		
	#КонецОбласти

	#Область ОбработчикиОбновления_1_0_2
	
	#КонецОбласти
	
	#Область ОбработчикиОбновления_1_0_3

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.3.46";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ОбновитьСправочникВерсииРегламентовПодготовкиОтчетности";
	Обработчик.НачальноеЗаполнение = Истина;
	
	#КонецОбласти
	
	#Область ОбработчикиОбновления_1_0_5
	
	#КонецОбласти
	
	#Область ОбработчикиОбновления_1_0_6
		
	#КонецОбласти
	
	// Версия 1.1
	
	#Область ОбработчикиОбновления_1_1_1
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.1.18";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.УстановитьПериодичностьБюджетирования";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.1.22";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.УстановитьКонстантыАвтоматическогоПересчета";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.1.26";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ПроверитьУстановитьКонстантуПапкаСвязанныхФайлов";
	Обработчик.НачальноеЗаполнение = Истина;
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.1.27";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ОбновитьПравилаРасчета";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.2.35";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.УстановитьПроизводственныйКалендарьПоУмолчанию";
	Обработчик.НачальноеЗаполнение = Истина;
		
	#КонецОбласти	
	
	#Область ОбработчикиОбновления_1_2_1
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.1.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ЗаполнитьОпцииОтчетов";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.1.8";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ОбновитьФИ";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.1.16";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.УстановитьКоэффициентыЛиквидности";
	Обработчик.НачальноеЗаполнение = Истина;
				
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.1.19";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ПеренестиПериодическиеКурсыВРегистрСведений";
	Обработчик.НачальноеЗаполнение = Истина;
		
	#КонецОбласти

#Область ОбработчикиОбновления_1_2_2
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.4.61";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.УстановитьСтатусЧерновикВДоговоре";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.5.70";
	Обработчик.Процедура = "ИнтеграцияЦУЗсЭТПСерверУХ.ОбновитьСоставЭТП";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.8.108";
	Обработчик.Процедура = "МодульУправленияОповещениямиУХ.ЗаполнитьНастройкиОповещений";
	Обработчик.НачальноеЗаполнение = Истина;
	
#КонецОбласти
	
#Область ОбработчикиОбновления_1_2_11
	
#КонецОбласти

#Область ОбработчикиОбновления_1_3_1
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.1.74";
	Обработчик.Процедура = "МодульУправленияОповещениямиУХ.ЗаполнитьНастройкиОповещений";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.1.91";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ЗаполнитьИнтервалыЗадолженностейДляКазначейства";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.1.99";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.УстановитьКонстантыСрокаОжиданияПоВалютномуКонтролю";
	Обработчик.НачальноеЗаполнение = Истина;
	
#КонецОбласти

#Область ОбработчикиОбновления_1_3_2
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.2.5";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ЗаполнитьКонстантуСценарияМСФО";
	Обработчик.НачальноеЗаполнение = Истина;
	
#КонецОбласти

#Область ОбработчикиОбновления_1_3_3

#КонецОбласти

#Область ОбработчикиОбновления_1_3_4

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.4.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ЗаполнитьРеквизитыРазделенияСогласования";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.4.12";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ЗаполнитьКонстантуСценарияКИК";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.4.14";
	Обработчик.Процедура = "СводнаяТаблицаУХ.ОбновитьСтатусыПериодов";
	Обработчик.НачальноеЗаполнение = Истина;
	
#КонецОбласти

#Область ОбработчикиОбновления_1_3_5
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.4.29";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ЗаполнитьКатегорииЗакупокПоДаннымПостановленияОт20160802";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.5.2";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ОбновитьСценарииБезСвязанныхДанных";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.5.4";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.УстановитьОсновныеБланки";
	Обработчик.НачальноеЗаполнение = Истина;
	
#КонецОбласти

#Область ОбработчикиОбновления_1_3_6
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.6.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ОбновитьДанныеОтчетныхПериодовПоПлану";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.6.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ЗаполнитьРеквизитыРазделенияСогласования";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.6.10";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ОбновитьВалютыОтчетностиРегламентов";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.6.11";
	Обработчик.Процедура = "ИнтеграцияЦУЗсЭТПСерверУХ.ОбновитьСоставЭТП";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.6.12";
	Обработчик.Процедура = "РегистрыСведений.НормативПрибылиКИКПодлежащейОсвобождениюОтНалогообложения.ЗаполнитьПоУмолчанию";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.6.13";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ЗаполнитьГеографическиеПризнакиНалоговогоОсвобожденияКИК";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.6.23";
	Обработчик.Процедура = "Справочники.ДокументыБД.ЗаполнитьКлючевыеРеквизитыМСФОПоУмолчанию";
	Обработчик.НачальноеЗаполнение = Истина;
	
#КонецОбласти

#Область ОбработчикиОбновления_1_3_7

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.7.17";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ЗаполнитьКатегорииЗакупокПоДаннымПостановленияОт20161214";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.7.18";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ЗаполнитьКатегорииЗакупокДляОтчетаОбъемЗакупок";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.7.19";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ЗаписатьВариантыЗаполненияШаблонов";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.7.20";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.УстановитьКонстантыАвтоматическогоФормированияОФД";
	Обработчик.НачальноеЗаполнение = Истина;
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.7.37";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.УстановитьРеквизитДопУпорядочиванияПриоритетыПлатежей";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.8.21";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.УстановитьКонстантуПериодХраненияСобытий";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.3.8.31";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.УстановитьПризнакУправлениеХолдингом";
	Обработчик.НачальноеЗаполнение = Истина;
	
#КонецОбласти

#Область ОбработчикиОбновления_1_3_9
		
	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"1.3.9.15",
		"ОбновлениеИнформационнойБазыУХ.УстановитьПризнакИспользованияИнтеграцииСВнешнимиСистемами",
		Истина,
		"Монопольно",
		Ложь);

	
#КонецОбласти

#Область ОбработчикиОбновления_2_0

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.2";
	Обработчик.Процедура = "Справочники.КредитныеРейтинги.ЗаполнитьШкалыРейтингов";
	Обработчик.НачальноеЗаполнение = Истина;	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.21";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ЗадатьНастройкиДокументаИнцидент";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.21";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ЗадатьНастройкиСправочникаРиски";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.21";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ЗадатьНастройкиДокументаМероприятие";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.0.22";
	Обработчик.Процедура = "Справочники.МестаПоставки.СформироватьМестаПоставкиПоСуществующимСкладам";
	Обработчик.НачальноеЗаполнение = Истина;
	
#КонецОбласти

#Область ОбработчикиОбновления_3_0

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.40";
	Обработчик.Процедура = "МероприятияВыборПоставщиков.ЗаполнитьПредопределенныеШаблоныМероприятий";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.73";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.УстановитьКонстантуУровеньКонтроляПравилНоменклатуры";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.76";
	Обработчик.Процедура = "МероприятияВыборПоставщиков.ЗаполнитьПредопределенныеСтадииПереторжка";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.78";
	Обработчик.Процедура = "МероприятияВыборПоставщиков.УдалитьИзШаблоновСтадииОкончания";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.79";
	Обработчик.Процедура = "МероприятияВыборПоставщиков.расположитьСтадииПереторжка";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.1.87";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.УстановитьОбязательнымиВложенияСтадийКонкурса";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.3.20";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ВыставитьСостоянияИТрендыАналитическойРассылки";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.4.18";
	Обработчик.Процедура = "МероприятияВыборПоставщиков.ЗаполнитьПредопределенныйШаблонЗакупкаУЕдинственногоПоставщика";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.0.10.6";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ВыставитьКодыСпособовЗакупки";
	Обработчик.НачальноеЗаполнение = Истина;

#КонецОбласти

#Область ОбработчикиОбновления_3_1

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.7";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.УстановитьСогласованиеДокументПротоколОтмены";
	Обработчик.НачальноеЗаполнение = Ложь;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.16";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ЗаполнитьДоступныеФормыСхемРеквизитов";
	Обработчик.НачальноеЗаполнение = Истина;

	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.31";
	Обработчик.Процедура = "РегистрыСведений.УдалитьНастройкаРаспределенияЗатратМСФО.ПеренестиРаспределенияВСправочник";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.32";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ПерезаписатьМПБланки";
	Обработчик.НачальноеЗаполнение = Ложь;
	
   	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.32";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ЗаполнитьГоризонтПодневногоПланирования";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.32";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ОбновитьНастройкиПериодическихОпераций";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.32";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначействоПереопределяемый.ОбновитьПризнакВнутригрупповогоПеремещенияВЗаявках";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.32";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ЗаполнитьВидОперацииУХВВидахОперацииБюджетирование";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.32";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначействоПереопределяемый.ЗаполнитьВидОперацииУХВЗаявках";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.32";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначействоПереопределяемый.ЗаполнитьВидОперацииУХВРазмещениеЗаявок";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.32";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ЗаполнитьВидОперацииУХХранилищеШаблонов";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.32";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ЗаполнитьВидОперацииУХВНастройкахОповещений";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.32";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначействоПереопределяемый.ЗаполнитьОсновныеСтатьиВидовОпераций";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.32";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ЗаполнитьСтрокиАдресаМестПоставки";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.32";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ЗаполнитьСтрокиАдресаАнкетПоставщиков";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.32";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ЗадатьНастройкиДокументаЗаказПоставщику";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.32";
	Обработчик.Процедура = "РегистрыСведений.НастройкиПланированияЗакупочныхПроцедур.ВыполнитьПервоначальноеЗаполнение";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.50";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ПерезаполнитьСторноПланаПоставокВДоговорах";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.59";
	Обработчик.Процедура = "ПланыВидовХарактеристик.ПараметрыЗакупки.ПервоначальноеЗаполнениеПВХПараметрыЗакупки";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.86";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначействоПереопределяемый.РазмещениеЗаявокЗаполнитьПроведен";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.18";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ПерезаписатьМПБланки";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.19";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ПерезаписатьМПБланки";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.6";
	Обработчик.Процедура = "РегистрыСведений.СтатусыОбъектовИнвестирования.ОбновитьПоследовательности";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение реквизита <Последовательности участия> в регистре сведений <Статусы объектов инвестирования>'");
	
    Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.20";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.УстановитьКонстантуАктуализироватьЗаявкиПоГрафикам";
	Обработчик.НачальноеЗаполнение = Истина;	
	
   	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.21";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ЗаполнитьГоризонтПодневногоПланирования";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.22";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ЗаполнитьНастройкиОптимизацииПлатежногоКалендаря";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.23";
	Обработчик.Процедура = "ОбработчикиОбновленияУХКазначейство.ЗаполнитьПлатежныеДниНедели";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.154";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ЗадатьНастройкиДокументаСтрокаПланаЗакупок";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.162";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ЗадатьНастройкиДокументаПрограммаЗакупок";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.195";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ЗадатьНастройкиСправочникаЗакупочныеПроцедурыЕИС";
	Обработчик.НачальноеЗаполнение = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.0.196";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ОбновитьСостоянияОбъектовЗакупок";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.1.75";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.УстановитьВидЛотовойЗакупки";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.106";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ПерезаписатьМПБланки";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.2.106";
	Обработчик.Процедура = "Справочники.КатегорииЗакупокДляИсключенияИзГОЗ.ЗаполнитьПоДаннымПостановленияОт20201225";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.24";
	Обработчик.Процедура = "Справочники.ИсточникиДанныхДляРасчетов.ЗаполнитьПредопределенныеРасчетныеКритерииДляОценкиПредложений";
	Обработчик.НачальноеЗаполнение = Ложь;	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.4.24";
	Обработчик.Процедура = "Справочники.КатегорииЗакупокДляИсключенияИзГОЗ.ЗаполнитьПоДаннымПостановленияОт20210106";
	Обработчик.НачальноеЗаполнение = Ложь;	
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.6";
	Обработчик.Процедура = "Справочники.СтатьиДоходовИРасходовКИК.ОбновлениеПредопределенныхЭлементов";
	Обработчик.РежимВыполнения = "Отложенно";	
	Обработчик.Комментарий = НСтр("ru = 'Связывание предопределённых элементов с элементами справочника'");
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.5.6";
	Обработчик.Процедура = "Справочники.СтатьиДоходовИРасходовКИК.ОбновлениеКодовДеклараций";
	Обработчик.РежимВыполнения = "Отложенно";	
	Обработчик.Комментарий = НСтр("ru = 'Заполнения кодов налоговых деклараций'");
	Приоритет = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();
	НовыйПриоритет = Приоритет.Добавить();
	НовыйПриоритет.Порядок = "После";
	НовыйПриоритет.Процедура = "Справочники.СтатьиДоходовИРасходовКИК.ОбновлениеПредопределенныхЭлементов";
	Обработчик.Приоритет = Приоритет;
		
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.7.9";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыУХ.ОбновлениеИспользованиеПорталаВГО";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.3";
	Обработчик.Процедура = "Константы.РольИсполнительВГО.ПереходНаКонстанты";
	Обработчик.НачальноеЗаполнение = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.4";
	Обработчик.Процедура = "Справочники.ПараметрыУчетаФИРСБУ.ЗаполнитьПоУмолчанию";
	Обработчик.НачальноеЗаполнение = Истина;//счета РСБУ для видов ФИ при начальном заполнении
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "3.1.8.4";
	Обработчик.Процедура = "Документы.РасчетСебестоимости.ОбновитьТипыЗакрытия";
	Обработчик.НачальноеЗаполнение = Ложь;//счета РСБУ для видов ФИ при начальном заполнении
		
#КонецОбласти

КонецПроцедуры

Процедура ПередОбновлениемИнформационнойБазы(Обработчики=Неопределено) Экспорт
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
	//Если ОбновлениеСПредыдущейРедакции.ЭтоПереходСРедакции20() Тогда 
	//	
	//	РежимОбновленияДанных = "ОбновлениеВерсии";
	//	СтандартнаяОбработка = Ложь;
	//	
	//КонецЕсли;
	
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
КонецПроцедуры

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// См. описание в общем модуле ОбновлениеИнформационнойБазыБСП.
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновления
// Возвращает Истина если запуск информационной базы
// выполняется первый раз, иначе возвращает Ложь
//
Функция ПервыйЗапуск() Экспорт
	
	//Вызовы процедур для первоначального заполнения базы
		
	УстановитьПривилегированныйРежим(Истина);
	
	ОбновитьИнформациюПоМетаданным(Истина);

	// Настройка списка видов операций бюджетирование
		
	//
	Константы.ПериодичностьБюджетирования.Установить(Перечисления.Периодичность.Месяц);
		
	// Предзаполнение реквизитов согласования для соответствующих объектов
	
	ДокументОбъект=Справочники.ДокументыБД.НайтиПоНаименованию("ЗаявкаНаРасходованиеДенежныхСредств",Истина,,Справочники.ТипыБазДанных.ТекущаяИБ).ПолучитьОбъект();
	ДокументОбъект.Согласуется=Истина;
	ДокументОбъект.Записать();
	
	ДокументОбъект=Справочники.ДокументыБД.НайтиПоНаименованию("ОперативныйПлан",Истина,,Справочники.ТипыБазДанных.ТекущаяИБ).ПолучитьОбъект();
	ДокументОбъект.Согласуется=Истина;
	ДокументОбъект.РеквизитСостояния="Состояние";
	ДокументОбъект.ЗначениеРеквизитаСостоянияНаУтверждении	= Перечисления.СостоянияСогласования.НаУтверждении;
	ДокументОбъект.ЗначениеРеквизитаСостоянияОтклонен		= Перечисления.СостоянияСогласования.Отклонена;
	ДокументОбъект.ЗначениеРеквизитаСостоянияУтвержден		= Перечисления.СостоянияСогласования.Утверждена;
	ДокументОбъект.Записать();
		
	ДокументОбъект=Справочники.ДокументыБД.НайтиПоНаименованию("НастраиваемыйОтчет",Истина,,Справочники.ТипыБазДанных.ТекущаяИБ).ПолучитьОбъект();
	ДокументОбъект.Согласуется=Истина;
	//ДокументОбъект.РеквизитСостояния="Состояние";
	ДокументОбъект.ЗначениеРеквизитаСостоянияНаУтверждении	= Перечисления.СостоянияОтчетов.Выполняется;
	ДокументОбъект.ЗначениеРеквизитаСостоянияОтклонен		= Перечисления.СостоянияОтчетов.Возвращен;
	ДокументОбъект.ЗначениеРеквизитаСостоянияУтвержден		= Перечисления.СостоянияОтчетов.Утвержден;
	ДокументОбъект.Записать();
	
	СправочникОбъект=Справочники.СправочникиБД.НайтиПоНаименованию("ДоговорыКонтрагентов",Истина,,Справочники.ТипыБазДанных.ТекущаяИБ).ПолучитьОбъект();
	СправочникОбъект.Согласуется=Истина;
	СправочникОбъект.РеквизитСостояния="Состояние";
	СправочникОбъект.ЗначениеРеквизитаСостоянияНаУтверждении	= Перечисления.СостоянияДоговоров.НаУтверждении;
	СправочникОбъект.ЗначениеРеквизитаСостоянияОтклонен			= Перечисления.СостоянияДоговоров.Отклонен;
	СправочникОбъект.ЗначениеРеквизитаСостоянияУтвержден		= Перечисления.СостоянияОтчетов.Утвержден;
	СправочникОбъект.Записать();
	
	СправочникОбъект=Справочники.СправочникиБД.НайтиПоНаименованию("Проекты",Истина,,Справочники.ТипыБазДанных.ТекущаяИБ).ПолучитьОбъект();
	СправочникОбъект.Согласуется=Истина;
	СправочникОбъект.РеквизитСостояния="Состояние";
	СправочникОбъект.ЗначениеРеквизитаСостоянияНаУтверждении	= Перечисления.СостоянияПроектов.НаУтверждении;
	СправочникОбъект.ЗначениеРеквизитаСостоянияОтклонен			= Перечисления.СостоянияПроектов.Отклонен;
	СправочникОбъект.ЗначениеРеквизитаСостоянияУтвержден		= Перечисления.СостоянияПроектов.Утвержден;
	СправочникОбъект.Записать();

	СправочникОбъект=Справочники.СправочникиБД.НайтиПоНаименованию("Лоты",Истина,,Справочники.ТипыБазДанных.ТекущаяИБ).ПолучитьОбъект();
	СправочникОбъект.Согласуется=Истина;
	СправочникОбъект.ЗначениеРеквизитаСостоянияЧерновик			= Перечисления.СтатусыЛотов.Черновик;
	СправочникОбъект.ЗначениеРеквизитаСостоянияНаУтверждении	= Перечисления.СтатусыЛотов.НаУтверждении;
	СправочникОбъект.ЗначениеРеквизитаСостоянияОтклонен			= Перечисления.СтатусыЛотов.Черновик;
	СправочникОбъект.ЗначениеРеквизитаСостоянияУтвержден		= Перечисления.СтатусыЛотов.ВключенВГПЗ;
	СправочникОбъект.Записать();
	
	СправочникОбъект=Справочники.СправочникиБД.НайтиПоНаименованию("АнкетыПоставщиков",Истина,,Справочники.ТипыБазДанных.ТекущаяИБ).ПолучитьОбъект();
	СправочникОбъект.Согласуется=Истина;
	СправочникОбъект.ЗначениеРеквизитаСостоянияЧерновик			= Перечисления.СостоянияСогласования.Черновик;
	СправочникОбъект.ЗначениеРеквизитаСостоянияНаУтверждении	= Перечисления.СостоянияСогласования.НаУтверждении;
	СправочникОбъект.ЗначениеРеквизитаСостоянияОтклонен			= Перечисления.СостоянияСогласования.Отклонена;
	СправочникОбъект.ЗначениеРеквизитаСостоянияУтвержден		= Перечисления.СостоянияСогласования.Утверждена;
	СправочникОбъект.Записать();
	
	ДокументОбъект=Справочники.ДокументыБД.НайтиПоНаименованию("АккредитацияПоставщика",Истина,,Справочники.ТипыБазДанных.ТекущаяИБ).ПолучитьОбъект();
	ДокументОбъект.Согласуется=Истина;
	ДокументОбъект.ЗначениеРеквизитаСостоянияЧерновик		= Перечисления.СостоянияСогласования.Черновик;
	ДокументОбъект.ЗначениеРеквизитаСостоянияНаУтверждении	= Перечисления.СостоянияСогласования.НаУтверждении;
	ДокументОбъект.ЗначениеРеквизитаСостоянияОтклонен		= Перечисления.СостоянияСогласования.Отклонена;
	ДокументОбъект.ЗначениеРеквизитаСостоянияУтвержден		= Перечисления.СостоянияСогласования.Утверждена;
	ДокументОбъект.Записать();
	
	ДокументОбъект=Справочники.ДокументыБД.НайтиПоНаименованию("КвалификацияПоставщика",Истина,,Справочники.ТипыБазДанных.ТекущаяИБ).ПолучитьОбъект();
	ДокументОбъект.Согласуется=Истина;
	ДокументОбъект.ЗначениеРеквизитаСостоянияЧерновик		= Перечисления.СостоянияСогласования.Черновик;
	ДокументОбъект.ЗначениеРеквизитаСостоянияНаУтверждении	= Перечисления.СостоянияСогласования.НаУтверждении;
	ДокументОбъект.ЗначениеРеквизитаСостоянияОтклонен		= Перечисления.СостоянияСогласования.Отклонена;
	ДокументОбъект.ЗначениеРеквизитаСостоянияУтвержден		= Перечисления.СостоянияСогласования.Утверждена;
	ДокументОбъект.Записать();
	
	ДокументОбъект=Справочники.ДокументыБД.НайтиПоНаименованию("ЛишениеАккредитации",Истина,,Справочники.ТипыБазДанных.ТекущаяИБ).ПолучитьОбъект();
	ДокументОбъект.Согласуется=Истина;
	ДокументОбъект.ЗначениеРеквизитаСостоянияЧерновик		= Перечисления.СостоянияСогласования.Черновик;
	ДокументОбъект.ЗначениеРеквизитаСостоянияНаУтверждении	= Перечисления.СостоянияСогласования.НаУтверждении;
	ДокументОбъект.ЗначениеРеквизитаСостоянияОтклонен		= Перечисления.СостоянияСогласования.Отклонена;
	ДокументОбъект.ЗначениеРеквизитаСостоянияУтвержден		= Перечисления.СостоянияСогласования.Утверждена;
	ДокументОбъект.Записать();
	
	ДокументОбъект=Справочники.ДокументыБД.НайтиПоНаименованию("ОтзывАккредитации",Истина,,Справочники.ТипыБазДанных.ТекущаяИБ).ПолучитьОбъект();
	ДокументОбъект.Согласуется=Истина;
	ДокументОбъект.ЗначениеРеквизитаСостоянияЧерновик		= Перечисления.СостоянияСогласования.Черновик;
	ДокументОбъект.ЗначениеРеквизитаСостоянияНаУтверждении	= Перечисления.СостоянияСогласования.НаУтверждении;
	ДокументОбъект.ЗначениеРеквизитаСостоянияОтклонен		= Перечисления.СостоянияСогласования.Отклонена;
	ДокументОбъект.ЗначениеРеквизитаСостоянияУтвержден		= Перечисления.СостоянияСогласования.Утверждена;
	ДокументОбъект.Записать();
	
	ДокументОбъект=Справочники.ДокументыБД.НайтиПоНаименованию("УстановкаОбщихТребованийКПоставщикам",Истина,,Справочники.ТипыБазДанных.ТекущаяИБ).ПолучитьОбъект();
	ДокументОбъект.Согласуется=Истина;
	ДокументОбъект.ЗначениеРеквизитаСостоянияЧерновик		= Перечисления.СостоянияСогласования.Черновик;
	ДокументОбъект.ЗначениеРеквизитаСостоянияНаУтверждении	= Перечисления.СостоянияСогласования.НаУтверждении;
	ДокументОбъект.ЗначениеРеквизитаСостоянияОтклонен		= Перечисления.СостоянияСогласования.Отклонена;
	ДокументОбъект.ЗначениеРеквизитаСостоянияУтвержден		= Перечисления.СостоянияСогласования.Утверждена;
	ДокументОбъект.Записать();
	
	ДокументОбъект=Справочники.ДокументыБД.НайтиПоНаименованию("УстановкаТребованийКвалификацииКНоменклатуреПоставщиков",Истина,,Справочники.ТипыБазДанных.ТекущаяИБ).ПолучитьОбъект();
	ДокументОбъект.Согласуется=Истина;
	ДокументОбъект.ЗначениеРеквизитаСостоянияЧерновик		= Перечисления.СостоянияСогласования.Черновик;
	ДокументОбъект.ЗначениеРеквизитаСостоянияНаУтверждении	= Перечисления.СостоянияСогласования.НаУтверждении;
	ДокументОбъект.ЗначениеРеквизитаСостоянияОтклонен		= Перечисления.СостоянияСогласования.Отклонена;
	ДокументОбъект.ЗначениеРеквизитаСостоянияУтвержден		= Перечисления.СостоянияСогласования.Утверждена;
	ДокументОбъект.Записать();
	
	#Область УчетМСФО
	
	Константы.ПериодичностьОтчетностиМСФО.Установить(ПредопределенноеЗначение("Перечисление.Периодичность.Год"));
	Константы.УчетПоСценариям.Установить(Ложь);
		
	#КонецОбласти
	
	#Область УчетМСФО_ВНА
		
	Константы.УчетРезервовПоПереоценкеВНА.Установить(ПредопределенноеЗначение("Перечисление.СпособыУчетаРезервовПоПереоценкеВНАМСФО.СписаниеПриВыбытии"));
		
	#КонецОбласти
	
	#Область УчетМСФО_ФИ
	
	Константы.МаксимальноеЧислоИтерацийРасчетаЭСП.Установить(100);
	Константы.ПорогТочностиРасчетаЭСП.Установить(7);
	
	УстановитьПривилегированныйРежим(Истина);
	Справочники.ВидыОбъектовФинансовогоХарактера.ОбновитьПредопределенные();
	УстановитьПривилегированныйРежим(Ложь);
	
	#КонецОбласти
	
	ОбработчикиОбновленияУХКазначействоПереопределяемый.ЗаполнитьОсновныеСтатьиВидовОперацийПервыйЗапуск();
	ОбработчикиОбновленияУХКазначейство.НачальноеЗаполнениеРежимАктуализацииГрафикаПриИзмененииПервичныхДокументов();
	
КонецФункции

Процедура ОбновитьИнформациюПоМетаданным(Параметры = Неопределено) Экспорт
	
	ТекущаяИБ = Справочники.ТипыБазДанных.ТекущаяИБ;
	
	Кэш = РаботаСОбъектамиМетаданныхУХ.НовыйКэшОбновленияМетаданных();
	
    ОбщегоНазначенияУХ.ЗаполнитьСписокПеречисленийБД(ТекущаяИБ,, Кэш);
    ОбщегоНазначенияУХ.ЗаполнитьСписокСправочниковБД(ТекущаяИБ,, Кэш);
    ОбщегоНазначенияУХ.ЗаполнитьСписокДокументовБД(ТекущаяИБ,, Кэш);
    ОбщегоНазначенияУХ.ЗаполнитьСписокПлановВидовХарактеристикБД(ТекущаяИБ,,Кэш);
    ОбщегоНазначенияУХ.ЗаполнитьСписокРегистровБД(ТекущаяИБ,, Истина, Истина, Истина, Истина, Истина, Кэш);
  
КонецПроцедуры

#Область Версия_1_0

Процедура ОбновитьИсточникиДанныхДляТрансляции() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст= "ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.Ссылка
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.ТрансляцияДебет";
	
	Результат=Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Пока Результат.Следующий() Цикл
		
		ОбъектИсточник=Результат.Ссылка.ПолучитьОбъект();
		ОбъектИсточник.ПодготовитьТаблицыСопоставленийИОтборов();
		ОбъектИсточник.мМодифицированность=Истина;
		ОбъектИсточник.СохранитьНастройкиОперанда();
		
		Попытка
			
			ОбъектИсточник.Записать();
			УправлениеОтчетамиУХ.ОбновитьНастройкиДляСтороныПроводки(ОбъектИсточник.Ссылка);
			
		Исключение
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке("Не удалось обновить источник данных "+ОбъектИсточник.Код+" для правила расчета "+ОбъектИсточник.НазначениеРасчетов+": "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,,СтатусСообщения.Внимание);
			ОтменитьТранзакцию();
			Возврат;
			
		КонецПопытки;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
		
КонецПроцедуры // ОбновитьИсточникиДанныхДляТрансляции() 

Процедура УстановитьЗначениеПоМодулю(ТекущееЗначение, ЕстьИзменение = Ложь)

	Если ТекущееЗначение < 0 Тогда
		ТекущееЗначение = - ТекущееЗначение;
		ЕстьИзменение = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьСправочникВерсииРегламентовПодготовкиОтчетности() Экспорт

	// заполним ОрганизационныеЕдиницы.ОрганизационнаяЕдиницаРодитель из СтруктураГруппы.ОрганизационнаяЕдиницаРодитель
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	тчОрганизационныеЕдиницы.Ссылка,
	|	тчОрганизационныеЕдиницы.ОрганизационнаяЕдиница
	|ПОМЕСТИТЬ втОрганизационныеЕдиницы
	|ИЗ
	|	Справочник.ВерсииРегламентовПодготовкиОтчетности.ОрганизационныеЕдиницы КАК тчОрганизационныеЕдиницы
	|ГДЕ
	|	тчОрганизационныеЕдиницы.ОрганизационнаяЕдиницаРодитель = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОрганизационныеЕдиницы.Ссылка КАК Документ,
	|	втОрганизационныеЕдиницы.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница,
	|	МАКСИМУМ(тчСтруктураГруппы.ОрганизационнаяЕдиницаРодитель) КАК ОрганизационнаяЕдиницаРодитель
	|ИЗ
	|	Справочник.ВерсииРегламентовПодготовкиОтчетности.СтруктураГруппы КАК тчСтруктураГруппы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОрганизационныеЕдиницы КАК втОрганизационныеЕдиницы
	|		ПО тчСтруктураГруппы.ОрганизационнаяЕдиница = втОрганизационныеЕдиницы.ОрганизационнаяЕдиница
	|			И тчСтруктураГруппы.Ссылка = втОрганизационныеЕдиницы.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	втОрганизационныеЕдиницы.Ссылка,
	|	втОрганизационныеЕдиницы.ОрганизационнаяЕдиница
	|ИТОГИ ПО
	|	Документ";

	ВыборкаРегламент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	
	Пока ВыборкаРегламент.Следующий() Цикл
		
		ДокументОбъект = ВыборкаРегламент.Документ.ПолучитьОбъект();
		
		ВыборкаОрганизация = ВыборкаРегламент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаОрганизация.Следующий() Цикл
			
			Отбор = Новый Структура("ОрганизационнаяЕдиница,ОрганизационнаяЕдиницаРодитель",
										ВыборкаОрганизация.ОрганизационнаяЕдиница, ПустаяОрганизация);
			СтрокиТаб = ДокументОбъект.ОрганизационныеЕдиницы.НайтиСтроки(Отбор);
			
			Для каждого СтрокаТаб Из СтрокиТаб Цикл
				СтрокаТаб.ОрганизационнаяЕдиницаРодитель = ВыборкаОрганизация.ОрганизационнаяЕдиницаРодитель; 
			КонецЦикла;
			
		КонецЦикла;
		
		ЗаписатьОбъект(ДокументОбъект);
		
	КонецЦикла;	
	
КонецПроцедуры

#КонецОбласти

#Область Версия_1_1

Функция ПолучитьСоздатьКонтрагентаПоФизЛицу(ФизЛицо, КэшФизЛицоКонтрагент)

	Контрагент = КэшФизЛицоКонтрагент.Получить(ФизЛицо);
	
	//из кэша
	Если Контрагент <> Неопределено Тогда		
		Возврат Контрагент;		
	КонецЕсли;
	
	//из созданных контрагентов
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Наименование = &Наименование
	|	И Контрагенты.ЮридическоеФизическоеЛицо = ЗНАЧЕНИЕ(Перечисление.ЮридическоеФизическоеЛицо.ФизическоеЛицо)";
	Запрос.УстановитьПараметр("Наименование", СокрЛП(ФизЛицо.Наименование));
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Контрагент = РезультатЗапроса.Выгрузить()[0].Ссылка;
		КэшФизЛицоКонтрагент.Вставить(ФизЛицо, Контрагент);
		Возврат Контрагент;
	КонецЕсли;

	ОбъектКонтрагент = Справочники.Контрагенты.СоздатьЭлемент();
	ОбъектКонтрагент.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо;
	ОбъектКонтрагент.Наименование = ФизЛицо.Наименование;
	
	ЗаписатьОбъект(ОбъектКонтрагент);	
	КэшФизЛицоКонтрагент.Вставить(ФизЛицо, ОбъектКонтрагент.Ссылка);
	
	Возврат ОбъектКонтрагент.Ссылка;
	
КонецФункции

Процедура УстановитьПериодичностьБюджетирования() Экспорт
	
	Константы.ПериодичностьБюджетирования.Установить(Перечисления.Периодичность.Месяц);
	 	
КонецПроцедуры // УстановитьПериодичностьБюджетирования()

Процедура ЗаполнитьАтрибутыПроектовНаСервере() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Проекты.Ссылка КАК Проект,
		|	Проекты.Удалить_ДатаНачала КАК ДатаНачала,
		|	Проекты.Удалить_ДатаОкончания КАК ДатаОкончания,
		|	Проекты.Удалить_ДлительностьДней КАК ДлительностьДней,
		|	ЗНАЧЕНИЕ(справочник.сценарии.план) КАК Сценарий
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АтрибутыПроектов КАК АтрибутыПроектов
		|		ПО (АтрибутыПроектов.Проект = Проекты.Ссылка)
		|			И (АтрибутыПроектов.Сценарий = ЗНАЧЕНИЕ(справочник.сценарии.план))
		|ГДЕ
		|	АтрибутыПроектов.Проект ЕСТЬ NULL ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	СценарийПлан = Справочники.Сценарии.План;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.АтрибутыПроектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Проект.Установить(ВыборкаДетальныеЗаписи.Проект);
		НаборЗаписей.Отбор.Сценарий.Установить(ВыборкаДетальныеЗаписи.Сценарий);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаДетальныеЗаписи);
		
		НаборЗаписей.Записать();
	КонецЦикла;
	

КонецПроцедуры

Процедура ПеренестиСостояниеОтчетовВРегистр() Экспорт

	Если Метаданные.Документы.НастраиваемыйОтчет.Реквизиты.Найти("Удалить_Состояние") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НастраиваемыйОтчет.Ссылка КАК Объект,
	|	НастраиваемыйОтчет.Удалить_Состояние КАК СостояниеОбъекта,
	|	НастраиваемыйОтчет.Дата КАК Период,
	|	НастраиваемыйОтчет.ПоследнийРедактировавший КАК Автор
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|ГДЕ
	|	НЕ НастраиваемыйОтчет.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					т.Объект
	|				ИЗ
	|					РегистрСведений.РегистрСостоянийОбъектов КАК т
	|				ГДЕ
	|					т.Объект ССЫЛКА Документ.НастраиваемыйОтчет)");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		нз = РегистрыСведений.РегистрСостоянийОбъектов.СоздатьНаборЗаписей();
		нз.Отбор.Период.Установить(Выборка.Период);
		нз.Отбор.Объект.Установить(Выборка.Объект);
		
		ЗаполнитьЗначенияСвойств(нз.Добавить(), Выборка);
		
		ЗаписатьДанные(нз);
		
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьКонстантыАвтоматическогоПересчета() Экспорт
	
	Константы.АвтоматическийПересчетЗависимыхПоказателей.Установить(Истина);
	
КонецПроцедуры // УстановитьКонстантыАвтоматическогоПересчета()

Процедура ПроверитьУстановитьКонстантуПапкаСвязанныхФайлов() Экспорт
	
	ПапкаСвязанныхФайлов = Константы.ПапкаСвязанныхФайлов.Получить();
	
	// Если папка уже установлена - ничего не делаем.
	Если Не ЗначениеЗаполнено(ПапкаСвязанныхФайлов) Тогда
		// Папка связанных файлов не установлена - установим служебную папку.
		НаименованиеСлужебнойПапки = "Связанные файлы документов УХ (служебная)";
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ПапкиФайлов.Ссылка
		               |ИЗ
		               |	Справочник.ПапкиФайлов КАК ПапкиФайлов
		               |ГДЕ
		               |	ПапкиФайлов.Наименование = &Наименование";
		Запрос.УстановитьПараметр("Наименование", НаименованиеСлужебнойПапки);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Константы.ПапкаСвязанныхФайлов.Установить(Выборка.Ссылка);
		Иначе
			НоваяПапка = Справочники.ПапкиФайлов.СоздатьЭлемент();
			НоваяПапка.Наименование = НаименованиеСлужебнойПапки;
			ЗаписатьОбъект(НоваяПапка);
			Константы.ПапкаСвязанныхФайлов.Установить(НоваяПапка.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ОбновитьПравилаРасчета() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПравилаОбработки.Ссылка
	|ИЗ
	|	Справочник.ПравилаОбработки КАК ПравилаОбработки
	|ГДЕ
	|	НЕ ПравилаОбработки.ПометкаУдаления";
					 
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		УправлениеОтчетамиУХ.СформироватьДанныеРегистраПараметрическихНастроек(Результат.Ссылка);
					
	КонецЦикла;
		
КонецПроцедуры

Процедура ОбновитьПравилаРасчетаПолеДругогоИсточника() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка.НазначениеРасчетов КАК НазначениеРасчетов
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса КАК ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса
	|ГДЕ
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.СпособЗаполнения = ЗНАЧЕНИЕ(Перечисление.СпособыЗаполненияПолейИсточника.ПолеДругогоИсточникаДанных)
	|	И НЕ ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка.ПометкаУдаления";
					 
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		УправлениеОтчетамиУХ.СформироватьДанныеРегистраПараметрическихНастроек(Результат.НазначениеРасчетов);
					
	КонецЦикла;
		
КонецПроцедуры

Процедура УстановитьПроизводственныйКалендарьПоУмолчанию() Экспорт
	
	Если НЕ ЗначениеЗаполнено(Константы.ПроизводственныйКалендарьПоУмолчанию.Получить()) Тогда
		Константы.ПроизводственныйКалендарьПоУмолчанию.Установить(КалендарныеГрафики.ОсновнойПроизводственныйКалендарь());
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПроектыПредшественникиНаСервере() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Проекты.Ссылка,
		|	Проекты.Родитель
		|ИЗ
		|	Справочник.Проекты КАК Проекты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Проекты.ПроектыПредшественники КАК ПроектыПроектыПредшественники
		|		ПО (ПроектыПроектыПредшественники.Ссылка = Проекты.Ссылка)
		|ГДЕ
		|	ПроектыПроектыПредшественники.Ссылка ЕСТЬ NULL 
		|	И Проекты.Родитель <> ЗНАЧЕНИЕ(справочник.проекты.пустаяссылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПроектОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		НоваяСтрока = ПроектОбъект.ПроектыПредшественники.Добавить();
		НоваяСтрока.Проект = ВыборкаДетальныеЗаписи.Родитель;
		ПроектОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПризнакиПроекта() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Проекты.Ссылка
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	НЕ Проекты.ПометкаУдаления";
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СправочникОбъект=Результат.Ссылка.ПолучитьОбъект();
		СправочникОбъект.Проект=Истина;
		СправочникОбъект.ПроектЭтапа=Результат.Ссылка;
		СправочникОбъект.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры // УстановитьПризнакиПроекта() 

Процедура ОбновитьФИ() Экспорт

	Справочники.ВидыОбъектовФинансовогоХарактера.ОбновитьПредопределенные();

КонецПроцедуры

Процедура ПереименоватьРеквизитПревышенияБюджетовВУсловииСогласования(КоллекцияСтрокДерева) Экспорт
	Для Каждого ТекСтрокаДерева Из КоллекцияСтрокДерева Цикл
		
		ТекСтрокаДерева.УсловиеДействие = СтрЗаменить(ТекСтрокаДерева.УсловиеДействие, "ЕстьПревышениеЛимитыБДДС", "ЕстьПревышениеЛимитыБюджет");
		ТекСтрокаДерева.УсловиеДействие = СтрЗаменить(ТекСтрокаДерева.УсловиеДействие, "ЕстьПревышениеЛимитыБДР", "ЕстьПревышениеЛимитыБюджет");
		ТекСтрокаДерева.УсловиеДействие = СтрЗаменить(ТекСтрокаДерева.УсловиеДействие, "ЕстьПревышениеЛимитыРесурсы", "ЕстьПревышениеЛимитыБюджет");
		ПереименоватьРеквизитПревышенияБюджетовВУсловииСогласования(ТекСтрокаДерева.Строки);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область Версия_1_2

Процедура ЗаполнитьОпцииОтчетов() Экспорт

	//Константы.ИспользоватьУтверждениеЭлементовОтчетов.Установить(Истина);
	//Константы.ИспользоватьЧтениеНеактуальныхЗаписей.Установить(Истина);

КонецПроцедуры

Процедура ОбновитьПараметрыУчетаФИ() Экспорт

	ТабСчетаУчета = Справочники.СчетаУчетаФИ.ПолучитьСчета();
	ТабСчетаУчета.Индексы.Добавить("ИмяПредопределенныхДанных");
	
	ПереносСчетов = Новый Структура;
	Для каждого Реквизит Из Метаданные.Справочники.ПараметрыУчетаФинансовыхИнструментовМСФО.Реквизиты Цикл
		
		Если СтрНачинаетсяС(Реквизит.Имя, "Удалить_") И (СтрНайти(Реквизит.Имя, "Субконто") = 0) Тогда
			ПереносСчетов.Вставить(Реквизит.Имя, СтрЗаменить(Реквизит.Имя, "Удалить_", ""));
		КонецЕсли;
		
	КонецЦикла;
	
	Выборка = Справочники.ПараметрыУчетаФинансовыхИнструментовМСФО.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.ПолучитьОбъект();
		//Объект.СчетаУчета.Очистить();
		
		Для каждого ПереносСчета Из ПереносСчетов Цикл
			
			Если Объект[ПереносСчета.Ключ].Пустая() Тогда 
				Продолжить;
			КонецЕсли;
			
			СчетУчета = ТабСчетаУчета.Найти(ПереносСчета.Значение, "ИмяПредопределенныхДанных");			
			Если не ЗначениеЗаполнено(СчетУчета) Тогда
				ЗаписатьОшибку("Не найден счет учета для: " + ПереносСчета.Ключ);
				Продолжить;
			КонецЕсли;
			
			СтрокаТаб = Объект.СчетаУчета.Найти(СчетУчета.Ссылка, "СчетУчета");
			Если СтрокаТаб = Неопределено Тогда
				СтрокаТаб = Объект.СчетаУчета.Добавить();
			ИначеЕсли Не СтрокаТаб.Счет.Пустая() Тогда 
				Продолжить; // счет уже заполнен - не перезаполняем
			КонецЕсли;
						
			СтрокаТаб.СчетУчета = СчетУчета.Ссылка;
			СтрокаТаб.Счет = Объект[ПереносСчета.Ключ];
			
			СтрокаТаб.Субконто1 = Объект[ПереносСчета.Ключ + "Субконто1"];
			СтрокаТаб.Субконто2 = Объект[ПереносСчета.Ключ + "Субконто2"];
			СтрокаТаб.Субконто3 = Объект[ПереносСчета.Ключ + "Субконто3"];
					
		КонецЦикла;
		
		Если Объект.Модифицированность() Тогда			
			ЗаписатьОбъект(Объект);		
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПеренестиДополнительныеНаименования() Экспорт
	
	МетаданныеДляПереноса = Новый Массив;	
	ОбщийРеквизит = Метаданные.ОбщиеРеквизиты.Наименование1;
	АвтоИспользование = (ОбщийРеквизит.АвтоИспользование = Метаданные.СвойстваОбъектов.АвтоИспользованиеОбщегоРеквизита.Использовать);
	
	Для каждого ЭлементСостава Из ОбщийРеквизит.Состав Цикл
		
		Если Не АвтоИспользование И (ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.Авто) Тогда 
			Продолжить;		
		ИначеЕсли (ЭлементСостава.Использование = Метаданные.СвойстваОбъектов.ИспользованиеОбщегоРеквизита.НеИспользовать) Тогда
			Продолжить;
		ИначеЕсли ЭлементСостава.Метаданные.Реквизиты.Найти("УдалитьНаименование1") = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеДляПереноса.Добавить(ЭлементСостава.Метаданные);
		
	КонецЦикла;
	
	Для каждого ЭлементМД Из МетаданныеДляПереноса Цикл
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ГруппыКонтрагентов.Ссылка,
		|	ГруппыКонтрагентов.УдалитьНаименование1,
		|	ГруппыКонтрагентов.УдалитьНаименование2
		|ИЗ
		|	Справочник.ГруппыКонтрагентов КАК ГруппыКонтрагентов
		|ГДЕ
		|	(ГруппыКонтрагентов.УдалитьНаименование1 <> """"
		|			ИЛИ ГруппыКонтрагентов.УдалитьНаименование2 <> """")
		|	И ГруппыКонтрагентов.Наименование1 = """"
		|	И ГруппыКонтрагентов.Наименование2 = """"";		
		
		Запрос = Новый Запрос(СтрЗаменить(ТекстЗапроса, "Справочник.ГруппыКонтрагентов", ЭлементМД.ПолноеИмя()));
		
		Выборка = Запрос.Выполнить().Выбрать();		
		Пока Выборка.Следующий() Цикл
			
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.Наименование1 = Объект.УдалитьНаименование1;
			Объект.Наименование2 = Объект.УдалитьНаименование2;
			
			ЗаписатьОбъект(Объект);
			
		КонецЦикла; 
	
	КонецЦикла;

КонецПроцедуры

Процедура ПеренестиВидыВременныхРазниц() Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыВременныхРазниц.Ссылка,
	|	ВидыВременныхРазниц.ВидСчета,
	|	ВидыВременныхРазниц.ВидРазницы,	
	|	ВидыВременныхРазниц.СчетОтражения КАК СчетОтражения
	|ИЗ
	|	Справочник.ВидыВременныхРазниц КАК ВидыВременныхРазниц
	|ГДЕ
	|	(ВидыВременныхРазниц.СчетОтражения = ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка))");
	
	Выборка = Запрос.Выполнить().Выбрать();
	СчетОтражения = Справочники.ФиксированныеСчетаУчетаБД.ОтложенныйНалогПоМСФО.Счет;
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектРазница = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Не ЗначениеЗаполнено(Выборка.СчетОтражения) Тогда
			ОбъектРазница.СчетОтражения = СчетОтражения;
		КонецЕсли;
		
		Если ОбъектРазница.Модифицированность() Тогда
			ЗаписатьОбъект(ОбъектРазница);		
		КонецЕсли;		
		
	КонецЦикла; 

КонецПроцедуры

Процедура ЗаписатьНормализованныеКодыПоказателей() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПоказателиОтчетов.Ссылка
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|ГДЕ
	|	НЕ ПоказателиОтчетов.ПометкаУдаления";
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ПоказательОбъект=Результат.Ссылка.ПолучитьОбъект();
		ПоказательОбъект.НормализованныйКод=СокрЛП(ПоказательОбъект.Код);
		ПоказательОбъект.ОбменДанными.Загрузка=Истина;
		ПоказательОбъект.Записать();
		
	КонецЦикла;			 	
	
КонецПроцедуры // ЗаписатьНормализованныеКодыПоказателей()

Процедура ЗаписатьНормализованныеКодыСтрокКолонок() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СтрокиОтчетов.Ссылка
	|ИЗ
	|	Справочник.СтрокиОтчетов КАК СтрокиОтчетов
	|ГДЕ
	|	НЕ СтрокиОтчетов.ПометкаУдаления";
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СправочникОбъект=Результат.Ссылка.ПолучитьОбъект();
		СправочникОбъект.НормализованныйКод=СокрЛП(СправочникОбъект.Код);
		СправочникОбъект.ОбменДанными.Загрузка=Истина;
		СправочникОбъект.Записать();
		
	КонецЦикла;
	
	Запрос.Текст="ВЫБРАТЬ
	|	КолонкиОтчетов.Ссылка
	|ИЗ
	|	Справочник.КолонкиОтчетов КАК КолонкиОтчетов
	|ГДЕ
	|	НЕ КолонкиОтчетов.ПометкаУдаления";
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СправочникОбъект=Результат.Ссылка.ПолучитьОбъект();
		СправочникОбъект.НормализованныйКод=СокрЛП(СправочникОбъект.Код);
		СправочникОбъект.ОбменДанными.Загрузка=Истина;
		СправочникОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры // ЗаписатьНормализованныеКодыСтрокКолонок()

Процедура ОбновитьПараметрыУчетаПереоценкиФИ() Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	т.Ссылка
	|ИЗ
	|	Документ.ПереоценкаФинансовыхИнструментов.ФинансовыеИнструменты КАК т
	|ГДЕ
	|	т.ПараметрыУчетаФИДоРекласса = ЗНАЧЕНИЕ(Справочник.ПараметрыУчетаФинансовыхИнструментовМСФО.ПустаяСсылка)");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбъектПереоценкаФИ = Выборка.Ссылка.ПолучитьОбъект();
		Для каждого СтрокаТаб Из ОбъектПереоценкаФИ.ФинансовыеИнструменты Цикл
		
			Если СтрокаТаб.ПараметрыУчетаФИДоРекласса.Пустая() Тогда
				СтрокаТаб.ПараметрыУчетаФИДоРекласса = СтрокаТаб.ПараметрыУчетаФИ;
			КонецЕсли;
		
		КонецЦикла;
		
		ЗаписатьОбъект(ОбъектПереоценкаФИ);
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура ОбновитьРеквизитКонтрагентФИ() Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СведенияОФИ.Регистратор,
	|	""СведенияОФИ"" КАК Регистр
	|ИЗ
	|	РегистрСведений.СведенияОФИ КАК СведенияОФИ
	|ГДЕ
	|	СведенияОФИ.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И СведенияОФИ.ФИ ССЫЛКА Справочник.ДоговорыКонтрагентов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетныеДанныеФИ.Регистратор,
	|	""РасчетныеДанныеФИ""
	|ИЗ
	|	РегистрНакопления.РасчетныеДанныеФИ КАК РасчетныеДанныеФИ
	|ГДЕ
	|	РасчетныеДанныеФИ.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И РасчетныеДанныеФИ.ФИ ССЫЛКА Справочник.ДоговорыКонтрагентов");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТипДоговор = Тип("СправочникСсылка.ДоговорыКонтрагентов");
	КэшКонтрагенты = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Регистр = "СведенияОФИ" Тогда
			нз = РегистрыСведений.СведенияОФИ.СоздатьНаборЗаписей();
		ИначеЕсли Выборка.Регистр = "РасчетныеДанныеФИ" Тогда	
			нз = РегистрыНакопления.РасчетныеДанныеФИ.СоздатьНаборЗаписей();
		Иначе 
			Продолжить;
		КонецЕсли;
		
		нз.Отбор.Регистратор.Установить(Выборка.Регистратор);
		нз.Прочитать();
		
		Для каждого Запись Из нз Цикл
			Если Запись.Контрагент.Пустая() И (ТипЗнч(Запись.ФИ) = ТипДоговор) Тогда
				
				Запись.Контрагент = КэшКонтрагенты.Получить(Запись.ФИ);
				Если Запись.Контрагент.Пустая() Тогда
					Запись.Контрагент = Запись.ФИ.Владелец;
					КэшКонтрагенты.Вставить(Запись.ФИ, Запись.Контрагент);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		ЗаписатьДанные(нз);
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура УстановитьКоэффициентыЛиквидности() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыДвиженийПриходРасход.Ссылка КАК ПриходРасход,
	|	ГоризонтыПланированияЛиквидности.Ссылка КАК ГоризонтПланированияЛиквидности,
	|	ИсточникиДанныхПлатежногоКалендаря.Ссылка КАК Источник,
	|	ВЫБОР
	|		КОГДА ИсточникиДанныхПлатежногоКалендаря.Ссылка = ЗНАЧЕНИЕ(Перечисление.ИсточникиДанныхПлатежногоКалендаря.ЗаявкиУтвержденные)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Вес
	|ИЗ
	|	Перечисление.ВидыДвиженийПриходРасход КАК ВидыДвиженийПриходРасход,
	|	Перечисление.ГоризонтыПланированияЛиквидности КАК ГоризонтыПланированияЛиквидности,
	|	Перечисление.ИсточникиДанныхПлатежногоКалендаря КАК ИсточникиДанныхПлатежногоКалендаря";
	Выборка = Запрос.Выполнить().Выбрать();
	
	НаборЗаписей = РегистрыСведений.МатрицаВесовЛиквидности.СоздатьНаборЗаписей();
	Пока Выборка.Следующий() Цикл
		
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(), Выборка);
		
	КонецЦикла;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ПеренестиПериодическиеКурсыВРегистрСведений() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	УправлениеПериодомСценарияПериодическиеКурсы.Валюта,
	|	УправлениеПериодомСценарияПериодическиеКурсы.Кратность,
	|	УправлениеПериодомСценарияПериодическиеКурсы.СреднийКурсЗаПериод,
	|	УправлениеПериодомСценарияПериодическиеКурсы.СреднийКурсЗаПериодМСФО,
	|	УправлениеПериодомСценарияПериодическиеКурсы.КурсНаНачалоПериода,
	|	УправлениеПериодомСценарияПериодическиеКурсы.КурсНаКонецПериода,
	|	УправлениеПериодомСценарияПериодическиеКурсы.СреднийКурсЗаПредыдущийПериод,
	|	УправлениеПериодомСценарияПериодическиеКурсы.КурсНаКонецПредыдущегоПериода,
	|	УправлениеПериодомСценарияПериодическиеКурсы.Ссылка.Сценарий,
	|	УправлениеПериодомСценарияПериодическиеКурсы.Ссылка.ПериодСценария КАК ПериодКурса
	|ПОМЕСТИТЬ ПериодическиеКурсы
	|ИЗ
	|	Документ.УправлениеПериодомСценария.УдалитьПериодическиеКурсы КАК УправлениеПериодомСценарияПериодическиеКурсы
	|ГДЕ
	|	НЕ УправлениеПериодомСценарияПериодическиеКурсы.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодическиеКурсы.Валюта КАК Валюта,
	|	ПериодическиеКурсы.Кратность,
	|	ПериодическиеКурсы.СреднийКурсЗаПериод КАК СреднийКурсЗаПериод,
	|	ПериодическиеКурсы.СреднийКурсЗаПериодМСФО,
	|	ПериодическиеКурсы.КурсНаНачалоПериода,
	|	ПериодическиеКурсы.КурсНаКонецПериода,
	|	ПериодическиеКурсы.СреднийКурсЗаПредыдущийПериод,
	|	ПериодическиеКурсы.КурсНаКонецПредыдущегоПериода,
	|	ПериодическиеКурсы.Сценарий КАК Сценарий,
	|	ПериодическиеКурсы.ПериодКурса КАК ПериодКурса
	|ИЗ
	|	ПериодическиеКурсы КАК ПериодическиеКурсы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сценарий,
	|	ПериодКурса,
	|	СреднийКурсЗаПериод УБЫВ";
	
	ТаблицаКурсовИсходная=Запрос.Выполнить().Выгрузить();
	ТаблицаКурсовРабочая=ТаблицаКурсовИсходная.СкопироватьКолонки();
	
	ТаблицаКурсовИсходная.Индексы.Добавить("Сценарий,ПериодКурса,Валюта");
	СтруктураПоиска=Новый Структура("Сценарий,ПериодКурса,Валюта");
	
	Для Каждого Строка ИЗ ТаблицаКурсовИсходная Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,Строка);
		
		Если ТаблицаКурсовРабочая.НайтиСтроки(СтруктураПоиска).Количество()=0 Тогда
			
			НоваяСтрока=ТаблицаКурсовРабочая.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			
		КонецЕсли;
		
	КонецЦикла;

	НаборЗаписей=РегистрыСведений.ПериодическиеКурсы.СоздатьНаборЗаписей();
	
	Для Каждого Строка ИЗ ТаблицаКурсовРабочая Цикл
		
		НоваяСтрока=НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры // ПеренестиПериодическиеКурсыВРегистрСведений() 

Процедура ОбновитьПараметрыУчетаФИДоРекласса() Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	т.Ссылка
	|ИЗ
	|	Документ.ВводСведенийОФинансовыхИнструментах.ФинансовыеИнструменты КАК т
	|ГДЕ
	|	т.ПараметрыУчетаФИДоРекласса = ЗНАЧЕНИЕ(Справочник.ПараметрыУчетаФинансовыхИнструментовМСФО.ПустаяСсылка)");
	
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		
		ОбъектПереоценкаФИ = Выборка.Ссылка.ПолучитьОбъект();
		Для каждого СтрокаТаб Из ОбъектПереоценкаФИ.ФинансовыеИнструменты Цикл
		
			Если СтрокаТаб.ПараметрыУчетаФИДоРекласса.Пустая() Тогда
				СтрокаТаб.ПараметрыУчетаФИДоРекласса = СтрокаТаб.ПараметрыУчетаФинансовогоИнструментаМСФО;
			КонецЕсли;
		
		КонецЦикла;
		
		ЗаписатьОбъект(ОбъектПереоценкаФИ);
		
	КонецЦикла; 
	
КонецПроцедуры

Процедура УдалитьНеиспользуемуюПодсистемуУХ() Экспорт

	мз = РегистрыСведений.ВерсииПодсистем.СоздатьМенеджерЗаписи();
	мз.ИмяПодсистемы = "Управление Холдингом";
	мз.Прочитать();
	мз.Удалить();
	
КонецПроцедуры

Процедура УстановитьПериодичностьЦентрализованныхЗакупок() Экспорт
	Константы.ПериодичностьЦентрализованныхЗакупок.Установить(Перечисления.Периодичность.Месяц);
КонецПроцедуры

Процедура ЗаполнитьРеквизитыОписанияВерсий() Экспорт
	
	НачатьТранзакцию();
	
	// Обновляем описания версий
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ОписаниеВерсий.Ссылка КАК ОписаниеВерсии,
	|	ОписаниеВерсий.ЭкземплярОтчета.Организация КАК Организация,
	|	ОписаниеВерсий.ЭкземплярОтчета.ПериодОтчета КАК ПериодОтчета,
	|	ОписаниеВерсий.ЭкземплярОтчета.Сценарий КАК Сценарий,
	|	ОписаниеВерсий.ЭкземплярОтчета.ВидОтчета КАК ВидОтчета,
	|	ОписаниеВерсий.ЭкземплярОтчета.Аналитика1 КАК Аналитика1,
	|	ОписаниеВерсий.ЭкземплярОтчета.Аналитика2 КАК Аналитика2,
	|	ОписаниеВерсий.ЭкземплярОтчета.Аналитика3 КАК Аналитика3,
	|	ОписаниеВерсий.ЭкземплярОтчета.Аналитика5 КАК Аналитика5,
	|	ОписаниеВерсий.ЭкземплярОтчета.Проект КАК Проект,
	|	ОписаниеВерсий.ЭкземплярОтчета.Аналитика4 КАК Аналитика4
	|ИЗ
	|	Справочник.ОписаниеВерсий КАК ОписаниеВерсий
	|ГДЕ
	|	НЕ ОписаниеВерсий.ЭкземплярОтчета = ЗНАЧЕНИЕ(Документ.НастраиваемыйОтчет.ПустаяСсылка)
	|	И НЕ ОписаниеВерсий.ПометкаУдаления";
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ОписаниеОбъект=Результат.ОписаниеВерсии.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ОписаниеОбъект,Результат);
		
		ОписаниеОбъект.ОбменДанными.Загрузка=Истина;
		ОписаниеОбъект.Записать();
		
	КонецЦикла;
	
	// Обновляем версии значений показателей
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ВерсииЗначенийПоказателей.Ссылка КАК ВерсияЗначенийПоказателя,
	|	ВерсииЗначенийПоказателей.ЭкземплярОтчета.Организация КАК Организация,
	|	ВерсииЗначенийПоказателей.ЭкземплярОтчета.ПериодОтчета КАК ПериодОтчета,
	|	ВерсииЗначенийПоказателей.ЭкземплярОтчета.Сценарий КАК Сценарий,
	|	ВерсииЗначенийПоказателей.ЭкземплярОтчета.ВидОтчета КАК ВидОтчета,
	|	ВерсииЗначенийПоказателей.ЭкземплярОтчета.Аналитика1 КАК Аналитика1,
	|	ВерсииЗначенийПоказателей.ЭкземплярОтчета.Аналитика2 КАК Аналитика2,
	|	ВерсииЗначенийПоказателей.ЭкземплярОтчета.Аналитика3 КАК Аналитика3,
	|	ВерсииЗначенийПоказателей.ЭкземплярОтчета.Аналитика5 КАК Аналитика5,
	|	ВерсииЗначенийПоказателей.ЭкземплярОтчета.Аналитика4 КАК Аналитика4,
	|	ВерсииЗначенийПоказателей.ЭкземплярОтчета.Проект КАК Проект,
	|	НЕ ВерсииЗначенийПоказателей.Валюта = ВерсииЗначенийПоказателей.ЭкземплярОтчета.ОсновнаяВалюта КАК ЗаписьВДополнительнойВалюте
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	НЕ ВерсииЗначенийПоказателей.ЭкземплярОтчета = ЗНАЧЕНИЕ(Документ.НастраиваемыйОтчет.ПустаяСсылка)
	|	И НЕ ВерсииЗначенийПоказателей.ПометкаУдаления";
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ВерсияОбъект=Результат.ВерсияЗначенийПоказателя.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ВерсияОбъект,Результат);
		
		ВерсияОбъект.ОбменДанными.Загрузка=Истина;
		ВерсияОбъект.Записать();
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
		
КонецПроцедуры // ЗаполнитьРеквизитыОписанияВерсий() 

Процедура ПроверитьСвернутьВерсииЗначенийПоказателей() Экспорт
		
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВерсииЗначенийПоказателей.ВидОтчета КАК ВидОтчета
	|ИЗ
	|	Справочник.ВерсииЗначенийПоказателей КАК ВерсииЗначенийПоказателей
	|ГДЕ
	|	НЕ ВерсииЗначенийПоказателей.ВидОтчета.СохранятьИсториюИзменений
	|	И НЕ ВерсииЗначенийПоказателей.ОсновнаяВерсия
	|	И НЕ ВерсииЗначенийПоказателей.ВидОтчета.ПометкаУдаления";
	
	Результат=Запрос.Выполнить().Выбрать();
		
	Пока Результат.Следующий() Цикл
		
		Документы.НастраиваемыйОтчет.СвернутьВерсии(Результат.ВидОтчета);
				
	КонецЦикла;
			
КонецПроцедуры // ПроверитьСвернутьВерсииЗначенийПоказателей()

Процедура ОбновлениеПравилРасчетаВнутренниеДанныеПоказатель() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникиДанныхДляРасчетов.ПотребительРасчета
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.СпособПолучения = &ВнутренниеДанныеПоказательОтчета";
	
	Запрос.УстановитьПараметр("ВнутренниеДанныеПоказательОтчета",Перечисления.СпособыПолученияОперандов.ВнутренниеДанныеПоказательОтчета);
	
	НачатьТранзакцию();
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НаборЗаписей=РегистрыСведений.ПроцедурыРасчетов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПотребительРасчета.Установить(Результат.ПотребительРасчета);
		
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()=1 Тогда
			
			НаборЗаписей[0].ДанныеРасчетовПоказателя=Новый ХранилищеЗначения(УправлениеОтчетамиУХ.ПолучитьДанныеРасчетовПоказателя(НаборЗаписей[0].НазначениеРасчетов,НаборЗаписей[0].ПотребительРасчета));
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();

	НачатьТранзакцию();
	
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникиДанныхДляРасчетов.НазначениеРасчетов
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.СпособПолучения = &ВнутренниеДанныеПоказательОтчета";
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		УправлениеОтчетамиУХ.СформироватьДанныеРегистраПараметрическихНастроек(Результат.НазначениеРасчетов);
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры // ОбновлениеПравилРасчетаВнутренниеДанныеПоказатель() 

Процедура ЗарегистрироватьЛотыПоЧерновикамИзПлановЗакупки() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрограммаЗакупокЛоты.ВЭлектроннойФорме,
		|	ПрограммаЗакупокЛоты.ДатаИсполненияДоговора,
		|	ПрограммаЗакупокЛоты.ДатаОфициальногоОбъявленияЗакупки,
		|	ПрограммаЗакупокЛоты.ЕдиницаИзмерения,
		|	ПрограммаЗакупокЛоты.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств,
		|	ПрограммаЗакупокЛоты.КодОКВЭД,
		|	ПрограммаЗакупокЛоты.КодОКВЭД2,
		|	ПрограммаЗакупокЛоты.КодОКДП,
		|	ПрограммаЗакупокЛоты.КодОКПД2,
		|	ПрограммаЗакупокЛоты.МестоПоставки,
		|	ПрограммаЗакупокЛоты.НомерЛотаВГПЗ,
		|	ПрограммаЗакупокЛоты.ОбщиеТребования,
		|	ПрограммаЗакупокЛоты.ПредметДоговора,
		|	ПрограммаЗакупокЛоты.ПривлечениеМалогоИСреднегоПредпринимательстваКакПодрядчиков,
		|	ПрограммаЗакупокЛоты.ПриоритетУчастияМалогоИСреднегоПредпринимательства,
		|	ПрограммаЗакупокЛоты.СпособВыбораПоставщика,
		|	ПрограммаЗакупокЛоты.СуммаЛота,
		|	ПрограммаЗакупокЛоты.СуммаНДС,
		|	ПрограммаЗакупокЛоты.УИД_Лота,
		|	ПрограммаЗакупокЛоты.ЦенаВключаетНДС,
		|	ПрограммаЗакупокЛоты.Ссылка КАК ПрограммаЗакупок,
		|	ПрограммаЗакупокЛоты.НомерСтроки
		|ИЗ
		|	Документ.ПрограммаЗакупок.Удалить_Лоты КАК ПрограммаЗакупокЛоты
		|ГДЕ
		|	ПрограммаЗакупокЛоты.Ссылка.Проведен
		|	И ПрограммаЗакупокЛоты.Лот = ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)
		|ИТОГИ ПО
		|	ПрограммаЗакупок";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСсылка.Следующий() Цикл
		ВыборкаЗаписей = ВыборкаСсылка.Выбрать();
		Пока ВыборкаЗаписей.Следующий() Цикл
			// записываем, чтобы обновить регистр сведений ЛотыПрограммыЗакупок
			Попытка
				ОбъектЛот = Справочники.Лоты.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(ОбъектЛот, ВыборкаЗаписей);
				ОбновлениеИнформационнойБазыУХ.ЗаписатьОбъект(ОбъектЛот);
			Исключение КонецПопытки;
		КонецЦикла;
	КонецЦикла;
	
	// Скорректируем максимальные номера ГПЗ
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(Лоты.НомерЛотаВГПЗ) КАК НомерЛотаВГПЗ,
		|	Лоты.ПериодЗакупок,
		|	Лоты.ОрганизацияДляЗаключенияДоговора
		|ПОМЕСТИТЬ МаксимальныеНомераЛотов
		|ИЗ
		|	Справочник.Лоты КАК Лоты
		|ГДЕ
		|	НЕ Лоты.ПометкаУдаления
		|
		|СГРУППИРОВАТЬ ПО
		|	Лоты.ПериодЗакупок,
		|	Лоты.ОрганизацияДляЗаключенияДоговора
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НомераЛотовВГПЗ.ПериодЗакупок,
		|	НомераЛотовВГПЗ.Организация,
		|	НомераЛотовВГПЗ.Номер
		|ИЗ
		|	МаксимальныеНомераЛотов КАК МаксимальныеНомераЛотов
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НомераЛотовВГПЗ КАК НомераЛотовВГПЗ
		|		ПО МаксимальныеНомераЛотов.ПериодЗакупок = НомераЛотовВГПЗ.ПериодЗакупок
		|			И МаксимальныеНомераЛотов.ОрганизацияДляЗаключенияДоговора = НомераЛотовВГПЗ.Организация
		|			И МаксимальныеНомераЛотов.НомерЛотаВГПЗ > НомераЛотовВГПЗ.Номер
		|ГДЕ
		|	НомераЛотовВГПЗ.Сценарий = ЗНАЧЕНИЕ(Справочник.Сценарии.ПустаяСсылка)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МенеджерЗаписи                  = РегистрыСведений.НомераЛотовВГПЗ.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.ПериодЗакупок	= ВыборкаДетальныеЗаписи.ПериодЗакупок;
		МенеджерЗаписи.Организация	    = ВыборкаДетальныеЗаписи.Организация;
		МенеджерЗаписи.Номер      		= ВыборкаДетальныеЗаписи.Номер;
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
	
КонецПроцедуры // ЗарегистрироватьУИДЛотовПлановЗакупки() 

Процедура ИзменитьРазделителиПутей() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СоответствиеВнешнимИБ.Ссылка,
	|	СоответствиеВнешнимИБ.ТипОбъектаВИБ
	|ИЗ
	|	Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	|ГДЕ
	|	НЕ СоответствиеВнешнимИБ.ПометкаУдаления";
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Если Результат.ТипОбъектаВИБ="ТаблицаADO" Тогда
			ИнтеграцияСВнешнимиСистемамиУХ.ADO_СформироватьРезультирующиеСтрокиПолейДляИмпорта(Результат.Ссылка);
		Иначе
			ИнтеграцияСВнешнимиСистемамиУХ.СформироватьРезультирующиеСтрокиПолейДляИмпорта(Результат.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.Текст="ВЫБРАТЬ
	|	ПравилаОбработки.Ссылка
	|ИЗ
	|	Справочник.ПравилаОбработки КАК ПравилаОбработки
	|ГДЕ
	|	НЕ ПравилаОбработки.ПометкаУдаления
	|	И НЕ(ПравилаОбработки.ТипБД = ЗНАЧЕНИЕ(Справочник.ТипыБазДанных.ПустаяСсылка)
	|				ИЛИ ПравилаОбработки.ТипБД = ЗНАЧЕНИЕ(Справочник.ТипыБазДанных.ТекущаяИБ))";
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		УправлениеОтчетамиУХ.СформироватьДанныеРегистраПараметрическихНастроек(Результат.Ссылка);
		
	КонецЦикла;		
	
КонецПроцедуры

Процедура ОбновитьВалютуИтоговВГО() Экспорт
		
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныСверкиВГО.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ШаблоныСверкиВГО КАК ШаблоныСверкиВГО
		|ГДЕ
		|	НЕ ШаблоныСверкиВГО.ПометкаУдаления
		|	И ШаблоныСверкиВГО.ВалютаИтогов = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИнформацияСверкиВГО.Период,
		|	ИнформацияСверкиВГО.ПериодСценария,
		|	ИнформацияСверкиВГО.Сценарий,
		|	ИнформацияСверкиВГО.Этап,
		|	ИнформацияСверкиВГО.Отправитель,
		|	ИнформацияСверкиВГО.Получатель,
		|	ИнформацияСверкиВГО.РазделВГО,
		|	ИнформацияСверкиВГО.ВалютаВзаиморасчетов,
		|	ИнформацияСверкиВГО.ДопАналитикаРасхождения,
		|	ИнформацияСверкиВГО.Состояние,
		|	ИнформацияСверкиВГО.СуммаОтправителя,
		|	ИнформацияСверкиВГО.СуммаПолучателя,
		|	ИнформацияСверкиВГО.СуммаРасхождения,
		|	ИнформацияСверкиВГО.ПредметКомментирования,
		|	ИнформацияСверкиВГО.Принудительно,
		|	ИнформацияСверкиВГО.АвторУрегулирования,
		|	ИнформацияСверкиВГО.Документ,
		|	ИнформацияСверкиВГО.ДатаНачалаСпора,
		|	ИнформацияСверкиВГО.ДатаЗавершенияСпора,
		|	ИнформацияСверкиВГО.АвторСпора,
		|	ИнформацияСверкиВГО.СуммаОтправителяГр,
		|	ИнформацияСверкиВГО.СуммаПолучателяГр,
		|	ИнформацияСверкиВГО.СуммаРасхожденияГр,
		|	ИнформацияСверкиВГО.ТрансформационнаяКорректировка,
		|	ИнформацияСверкиВГО.ПричинаРасхождения,
		|	ИнформацияСверкиВГО.СторонаПричиныРасхождения
		|ИЗ
		|	РегистрСведений.ИнформацияСверкиВГО КАК ИнформацияСверкиВГО
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ИнформацияСверкиВГО.СуммаОтправителя <> 0
		|					ИЛИ ИнформацияСверкиВГО.СуммаПолучателя <> 0
		|					ИЛИ ИнформацияСверкиВГО.СуммаРасхождения <> 0
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	И ИнформацияСверкиВГО.ВалютаВзаиморасчетов <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ИнформацияСверкиВГОПостоянная.ПериодСценария,
		|	ИнформацияСверкиВГОПостоянная.Сценарий,
		|	ИнформацияСверкиВГОПостоянная.Этап,
		|	ИнформацияСверкиВГОПостоянная.Отправитель,
		|	ИнформацияСверкиВГОПостоянная.Получатель,
		|	ИнформацияСверкиВГОПостоянная.РазделВГО,
		|	ИнформацияСверкиВГОПостоянная.ВалютаВзаиморасчетов,
		|	ИнформацияСверкиВГОПостоянная.ДопАналитикаРасхождения,
		|	ИнформацияСверкиВГОПостоянная.ДоговорыОтправителя,
		|	ИнформацияСверкиВГОПостоянная.ДоговорыПолучателя,
		|	ИнформацияСверкиВГОПостоянная.СуммаОтправителя,
		|	ИнформацияСверкиВГОПостоянная.СуммаПолучателя,
		|	ИнформацияСверкиВГОПостоянная.СуммаРасхождения,
		|	ИнформацияСверкиВГОПостоянная.СуммаОтправителяГр,
		|	ИнформацияСверкиВГОПостоянная.СуммаПолучателяГр,
		|	ИнформацияСверкиВГОПостоянная.СуммаРасхожденияГр
		|ИЗ
		|	РегистрСведений.ИнформацияСверкиВГОПостоянная КАК ИнформацияСверкиВГОПостоянная
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ИнформацияСверкиВГОПостоянная.СуммаОтправителя <> 0
		|					ИЛИ ИнформацияСверкиВГОПостоянная.СуммаПолучателя <> 0
		|					ИЛИ ИнформацияСверкиВГОПостоянная.СуммаРасхождения <> 0
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	И ИнформацияСверкиВГОПостоянная.ВалютаВзаиморасчетов <> ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)";
	
	мРезультатЗапроса = Запрос.ВыполнитьПакет();
	
	// Установим валюта итогов в Шаблоны сверки ВГО
	ВалютаИтогов = Константы.ВалютаУправленческогоУчета.Получить();
	ВыборкаДетальныеЗаписи = мРезультатЗапроса[0].Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ОбъектШаблонСверки = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ОбъектШаблонСверки.ВалютаИтогов = ВалютаИтогов;
		ОбновлениеИнформационнойБазыУХ.ЗаписатьОбъект(ОбъектШаблонСверки);
	КонецЦикла;
	
	// Пересчитаем итоги регистров в новую валюту группы
	ТекДата = ТекущаяДатаСеанса();
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КэшТаблицыКурсов = Неопределено;
	
	ВыборкаДетальныеЗаписи = мРезультатЗапроса[1].Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ВалютаВзаиморасчетов = ВалютаИтогов Тогда
			Продолжить;
		КонецЕсли;
		
		КоэффициентПересчета = УправлениеРабочимиПроцессамиУХ.ПересчитатьПоКурсу(
				1,
				ВыборкаДетальныеЗаписи.ВалютаВзаиморасчетов,
				ВалютаИтогов,
				Перечисления.ВидыКурсов.КурсНаМоментНачисления,
				ВыборкаДетальныеЗаписи.Сценарий,
				ВыборкаДетальныеЗаписи.ПериодСценария,
				ТекДата,,,
				КэшТаблицыКурсов);
			
		МенеджерЗаписи = РегистрыСведений.ИнформацияСверкиВГО.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаДетальныеЗаписи);
		МенеджерЗаписи.СуммаОтправителяГр = МенеджерЗаписи.СуммаОтправителя * КоэффициентПересчета;
		МенеджерЗаписи.СуммаПолучателяГр = МенеджерЗаписи.СуммаПолучателя * КоэффициентПересчета;
		МенеджерЗаписи.СуммаРасхожденияГр = МенеджерЗаписи.СуммаРасхождения * КоэффициентПересчета;
		
		МенеджерЗаписи.Записать();
	КонецЦикла;
	
	ВыборкаДетальныеЗаписи = мРезультатЗапроса[2].Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ВалютаВзаиморасчетов = ВалютаИтогов Тогда
			Продолжить;
		КонецЕсли;
		
		КоэффициентПересчета = УправлениеРабочимиПроцессамиУХ.ПересчитатьПоКурсу(
				1,
				ВыборкаДетальныеЗаписи.ВалютаВзаиморасчетов,
				ВалютаИтогов,
				Перечисления.ВидыКурсов.КурсНаМоментНачисления,
				ВыборкаДетальныеЗаписи.Сценарий,
				ВыборкаДетальныеЗаписи.ПериодСценария,
				ТекДата,,,
				КэшТаблицыКурсов);
			
		МенеджерЗаписи = РегистрыСведений.ИнформацияСверкиВГОПостоянная.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаДетальныеЗаписи);
		МенеджерЗаписи.СуммаОтправителяГр = МенеджерЗаписи.СуммаОтправителя * КоэффициентПересчета;
		МенеджерЗаписи.СуммаПолучателяГр = МенеджерЗаписи.СуммаПолучателя * КоэффициентПересчета;
		МенеджерЗаписи.СуммаРасхожденияГр = МенеджерЗаписи.СуммаРасхождения * КоэффициентПересчета;
		
		МенеджерЗаписи.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ПересчитатьИтоговуюСуммуКонсолидированныхПлановПотребностей() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КонсолидированныйПланЗакупокНоменклатура.Ссылка КАК Ссылка,
		|	СУММА(КонсолидированныйПланЗакупокНоменклатура.Сумма) КАК Сумма
		|ПОМЕСТИТЬ тСуммаТЧ
		|ИЗ
		|	Документ.КонсолидированныйПланЗакупок.Номенклатура КАК КонсолидированныйПланЗакупокНоменклатура
		|
		|СГРУППИРОВАТЬ ПО
		|	КонсолидированныйПланЗакупокНоменклатура.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	КонсолидированныйПланЗакупок.СуммаДокумента КАК СуммаДокумента,
		|	КонсолидированныйПланЗакупок.Ссылка КАК Ссылка,
		|	тСуммаТЧ.Сумма КАК Сумма
		|ИЗ
		|	тСуммаТЧ КАК тСуммаТЧ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КонсолидированныйПланЗакупок КАК КонсолидированныйПланЗакупок
		|		ПО тСуммаТЧ.Ссылка = КонсолидированныйПланЗакупок.Ссылка
		|			И тСуммаТЧ.Сумма <> КонсолидированныйПланЗакупок.СуммаДокумента";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
			ОбъектДокумент = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			ОбъектДокумент.СуммаДокумента = ВыборкаДетальныеЗаписи.Сумма;
			ОбновлениеИнформационнойБазыУХ.ЗаписатьДанные(ОбъектДокумент);
		Исключение КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТипыЗначенийЭлементовСтруктурыОтчета() Экспорт
	
	УстановитьТипЗначения("ПоказателиОтчетов");
	УстановитьТипЗначения("СтрокиОтчетов");
	УстановитьТипЗначения("КолонкиОтчетов");	
	
КонецПроцедуры // ЗаполнитьТипыЗначенийСтрокКолонок()

Процедура УстановитьТипЗначения(ЭлементНастройки)
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ЭлементыНастройки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник."+ЭлементНастройки+" КАК ЭлементыНастройки
	|ГДЕ
	|	ЭлементыНастройки.ТипЗначения = ЗНАЧЕНИЕ(Перечисление.ТипыЗначенийПоказателейОтчетов.ПустаяСсылка)";
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ЭлементОбъект=Результат.Ссылка.ПолучитьОбъект();
		ЭлементОбъект.ТипЗначения=Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
		ЭлементОбъект.ОбменДанными.Загрузка=Истина;
		ЭлементОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьТипЗначения() 

Процедура УстановитьКонстантуИспользоватьУправлениеЦентрализованнымиЗакупками() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	РегистрСведений.ПотребностиНоменклатуры КАК ПотребностиНоменклатуры";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Константы.ИспользоватьЦентрализованноеУправлениеЗакупками.Установить(Ложь);
	Иначе
		Константы.ИспользоватьЦентрализованноеУправлениеЗакупками.Установить(Истина);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьСтатусыЕИС() Экспорт
	СсылкаЕИС = Справочники.ЭлектронныеТорговыеПлощадки.СсылкаНаЕИС();
	
	Если НЕ ЗначениеЗаполнено(СсылкаЕИС) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДанныеЭТП.ОбъектОбмена,
		|	ДанныеЭТП.ЗаписьСтрока,
		|	ДанныеЭТП.ДатаЗаписи,
		|	""PurchaseStatus"" КАК Ключ
		|ИЗ
		|	РегистрСведений.ДанныеЭТП КАК ДанныеЭТП
		|ГДЕ
		|	ДанныеЭТП.Ключ = ""PurchaseStatusOOS""
		|	И ДанныеЭТП.ЭТП <> &ЕИС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеЭТП.ОбъектОбмена,
		|	ДанныеЭТП.ЗаписьСтрока,
		|	ДанныеЭТП.ДатаЗаписи,
		|	""ProcedureNumber""
		|ИЗ
		|	РегистрСведений.ДанныеЭТП КАК ДанныеЭТП
		|ГДЕ
		|	ДанныеЭТП.Ключ = ""PurchaseRegNumberOOS""
		|	И ДанныеЭТП.ЭТП <> &ЕИС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ДанныеЭТП.ОбъектОбмена,
		|	ДанныеЭТП.ЗаписьСтрока,
		|	ДанныеЭТП.ДатаЗаписи,
		|	""ProcedureUrl""
		|ИЗ
		|	РегистрСведений.ДанныеЭТП КАК ДанныеЭТП
		|ГДЕ
		|	ДанныеЭТП.Ключ = ""PurchaseURLOOS""
		|	И ДанныеЭТП.ЭТП <> &ЕИС";
	
	Запрос.УстановитьПараметр("ЕИС", СсылкаЕИС);
	
	ВыборкаДанных = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДанных.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ДанныеЭТП.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаДанных);
		МенеджерЗаписи.ЭТП = СсылкаЕИС;
		МенеджерЗаписи.ЭтоДвоичныеДанные = Ложь;
		МенеджерЗаписи.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура СвязатьИсточникиСАналитическимиОтчетами() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПроизвольныеОтчеты.Ссылка,
	|	ПроизвольныеОтчеты.ИсточникДанныхОтчета КАК ИсточникДанныхОтчета
	|ИЗ
	|	Справочник.ПроизвольныеОтчеты КАК ПроизвольныеОтчеты
	|ГДЕ
	|	НЕ(ПроизвольныеОтчеты.ИсточникДанныхОтчета = НЕОПРЕДЕЛЕНО
	|				ИЛИ ПроизвольныеОтчеты.ИсточникДанныхОтчета = ЗНАЧЕНИЕ(Справочник.ИсточникиДанныхДляРасчетов.ПустаяСсылка)
	|				ИЛИ ПроизвольныеОтчеты.ИсточникДанныхОтчета = ЗНАЧЕНИЕ(Справочник.Запросы.ПустаяСсылка))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИсточникДанныхОтчета";
	
	ТекИсточник=Неопределено;
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Если Результат.ИсточникДанныхОтчета=ТекИсточник Тогда
			
			ИсточникОбъект=ТекИсточник.Скопировать();
						
		Иначе
			
			ИсточникОбъект=Результат.ИсточникДанныхОтчета.ПолучитьОбъект();			
			ТекИсточник=Результат.ИсточникДанныхОтчета;
			
		КонецЕсли;
			
		ИсточникОбъект.ПотребительРасчета=Результат.Ссылка;
		ИсточникОбъект.СпособИспользования=Перечисления.СпособыИспользованияОперандов.ДляАналитическихОтчетов;
		
		Если ТипЗнч(ИсточникОбъект)=Тип("СправочникОбъект.ИсточникиДанныхДляРасчетов") Тогда
			
			ИсточникОбъект.ПодготовитьТаблицыСопоставленийИОтборов();	
			ИсточникОбъект.мМодифицированность=Истина;
			ИсточникОбъект.СохранитьНастройкиОперанда();
			
		КонецЕсли;
		
		ИсточникОбъект.Записать();
	
	КонецЦикла;	
	
КонецПроцедуры // СвязатьИсточникиСАналитическимиОтчетами()

Процедура ЗаполнитьСтатусыЭтапов() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЭтапыУниверсальныхПроцессов.Ссылка,
		|	ЭтапыУниверсальныхПроцессов.Владелец.ТипОбъектаСогласования.ЗначениеРеквизитаСостоянияНаУтверждении КАК ЗначениеРеквизитаСостоянияНаУтверждении,
		|	ЭтапыУниверсальныхПроцессов.Владелец.ТипОбъектаСогласования.ЗначениеРеквизитаСостоянияУтвержден КАК ЗначениеРеквизитаСостоянияУтвержден,
		|	ЭтапыУниверсальныхПроцессов.Владелец.ТипОбъектаСогласования.ЗначениеРеквизитаСостоянияОтклонен КАК ЗначениеРеквизитаСостоянияОтклонен,
		|	ЭтапыУниверсальныхПроцессов.Владелец.ТипОбъектаСогласования.ЗначениеРеквизитаСостоянияЧерновик КАК ЗначениеРеквизитаСостоянияЧерновик,
		|	ЭтапыУниверсальныхПроцессов.ТипЭтапа,
		|	ЭтапыУниверсальныхПроцессов.СтатусСогласованияОбъекта
		|ИЗ
		|	Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапыУниверсальныхПроцессов
		|ГДЕ
		|	ЭтапыУниверсальныхПроцессов.ПометкаУдаления = ЛОЖЬ
		|	И ЭтапыУниверсальныхПроцессов.Владелец.НазначениеПроцесса = &НазначениеПроцесса";
	Запрос.УстановитьПараметр("НазначениеПроцесса", Перечисления.НазначенияУниверсальныхПроцессов.МаршрутСогласования);	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЭтапОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Если НЕ ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.СтатусСогласованияОбъекта) Тогда
			Если ВыборкаДетальныеЗаписи.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапСогласования Тогда
				ЭтапОбъект.СтатусСогласованияОбъекта = ВыборкаДетальныеЗаписи.ЗначениеРеквизитаСостоянияНаУтверждении;
			ИначеЕсли ВыборкаДетальныеЗаписи.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Автоотклонение Тогда
				ЭтапОбъект.СтатусСогласованияОбъекта = ВыборкаДетальныеЗаписи.ЗначениеРеквизитаСостоянияОтклонен;
			ИначеЕсли ВыборкаДетальныеЗаписи.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Автоутверждение Тогда
				ЭтапОбъект.СтатусСогласованияОбъекта = ВыборкаДетальныеЗаписи.ЗначениеРеквизитаСостоянияУтвержден;
			Иначе
				// Для прочих этапов не заполняем статус.
			КонецЕсли;
		Иначе
			Продолжить;
		КонецЕсли;
		ЭтапОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьСтатусЧерновикВДоговоре() Экспорт
	
	СправочникДоговор = Справочники.СправочникиБД.НайтиПоНаименованию("ДоговорыКонтрагентов",,,Справочники.ТипыБазДанных.ТекущаяИБ);
	Если ЗначениеЗаполнено(СправочникДоговор) Тогда
		Объект = СправочникДоговор.ПолучитьОбъект();
		Объект.ЗначениеРеквизитаСостоянияЧерновик = Перечисления.СостоянияДоговоров.Черновик;
		ЗаписатьДанные(Объект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Версия_1_3

Процедура ЗаполнитьРеквизитыВУсловияхОплаты() Экспорт
	
	ВыборкаУсловияОплаты = Справочники.УсловияОплаты.Выбрать();
	
	Пока ВыборкаУсловияОплаты.Следующий() Цикл
		
		Объект = ВыборкаУсловияОплаты.ПолучитьОбъект();
		
		ПроцентАванса = 0;
		СрокОтсрочки = 0;
		
		Для Каждого ТекСтрока Из Объект.ЭтапыОплаты Цикл
			
			Если ТекСтрока.ВариантОплаты = Перечисления.ВариантыОплаты.Аванс Тогда
				
				ПроцентАванса = ПроцентАванса + ТекСтрока.ПроцентОплаты;
				
			ИначеЕсли ТекСтрока.ВариантОплаты = Перечисления.ВариантыОплаты.Постоплата Тогда
				
				СрокОтсрочки = Макс(СрокОтсрочки, ТекСтрока.Срок);
				
			КонецЕсли;
			
		КонецЦикла;
		
		Объект.ПроцентАванса = ПроцентАванса;
		Объект.СрокОтсрочки = СрокОтсрочки;
		ЗаписатьДанные(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСостоянияИнвестиций() Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДвижениеИнвестиций.Ссылка
	|ИЗ
	|	ЖурналДокументов.ДвижениеИнвестиций КАК ДвижениеИнвестиций
	|ГДЕ
	|	НЕ ДвижениеИнвестиций.РегламентированныйУчет
	|	И НЕ ДвижениеИнвестиций.НалоговыйУчет");
	
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.РегламентированныйУчет = Истина;
		ДокументОбъект.НалоговыйУчет = Истина;
		
		ЗаписатьОбъект(ДокументОбъект);		
		
	КонецЦикла;	

КонецПроцедуры

Процедура УстановитьВидыДоговоровУХ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"";
	
КонецПроцедуры

Процедура ЗаполнитьДатуЗакрытияПаспортовСделок() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПаспортаСделок.Ссылка,
		|	ЕСТЬNULL(ПаспортаСделок.ДоговорКонтрагента.СрокДействия, &ПустаяДата) КАК СрокДействияДоговора
		|ИЗ
		|	Справочник.ПаспортаСделок КАК ПаспортаСделок
		|ГДЕ
		|	ПаспортаСделок.ПометкаУдаления = ЛОЖЬ
		|	И ПаспортаСделок.ДатаЗавершенияИсполненияОбязательств = &ПустаяДата";
	Запрос.УстановитьПараметр("ПустаяДата", Дата(1, 1, 1));
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Попытка
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ПаспортСделкиСсылка = ВыборкаДетальныеЗаписи.Ссылка;
			ПаспортСделкиОбъект = ПаспортСделкиСсылка.ПолучитьОбъект();
			ПаспортСделкиОбъект.ДатаЗавершенияИсполненияОбязательств = ВыборкаДетальныеЗаписи.СрокДействияДоговора;
			ПаспортСделкиОбъект.Записать();
		КонецЦикла;
	Исключение
		ТекстСообщения = НСтр("ru = 'Во время записи паспорта сделки возникли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры

Процедура ЗаполнитьИнтервалыЗадолженностейДляКазначейства() Экспорт
	НовыйЭлемент = Справочники.ИнтервалыЗадолженностей.СоздатьЭлемент();
	НовыйЭлемент.ВидИнтервала = Перечисления.ВидыИнтервалов.ИнтервалДЗКазначейство;
	НовыйЭлемент.Наименование = НСтр("ru = '0 - 7 дней'");
	НовыйЭлемент.От = 0;
	НовыйЭлемент.До = 7;
	НовыйЭлемент.Записать();
	НовыйЭлемент = Справочники.ИнтервалыЗадолженностей.СоздатьЭлемент();
	НовыйЭлемент.ВидИнтервала = Перечисления.ВидыИнтервалов.ИнтервалДЗКазначейство;
	НовыйЭлемент.Наименование = НСтр("ru = '8 - 14 дней'");
	НовыйЭлемент.От = 8;
	НовыйЭлемент.До = 14;
	НовыйЭлемент.Записать();
	НовыйЭлемент = Справочники.ИнтервалыЗадолженностей.СоздатьЭлемент();
	НовыйЭлемент.ВидИнтервала = Перечисления.ВидыИнтервалов.ИнтервалДЗКазначейство;
	НовыйЭлемент.Наименование = НСтр("ru = '15 - 30 дней'");
	НовыйЭлемент.От = 15;
	НовыйЭлемент.До = 30;
	НовыйЭлемент.Записать();
	НовыйЭлемент = Справочники.ИнтервалыЗадолженностей.СоздатьЭлемент();
	НовыйЭлемент.ВидИнтервала = Перечисления.ВидыИнтервалов.ИнтервалДЗКазначейство;
	НовыйЭлемент.Наименование = НСтр("ru = '31 - 90 дней'");
	НовыйЭлемент.От = 31;
	НовыйЭлемент.До = 90;
	НовыйЭлемент.Записать();
	НовыйЭлемент = Справочники.ИнтервалыЗадолженностей.СоздатьЭлемент();
	НовыйЭлемент.ВидИнтервала = Перечисления.ВидыИнтервалов.ИнтервалДЗКазначейство;
	НовыйЭлемент.Наименование = НСтр("ru = '91 - 180 дней'");
	НовыйЭлемент.От = 91;
	НовыйЭлемент.До = 180;
	НовыйЭлемент.Записать();
	НовыйЭлемент = Справочники.ИнтервалыЗадолженностей.СоздатьЭлемент();
	НовыйЭлемент.ВидИнтервала = Перечисления.ВидыИнтервалов.ИнтервалДЗКазначейство;
	НовыйЭлемент.Наименование = НСтр("ru = '> 180 дней'");
	НовыйЭлемент.От = 181;
	НовыйЭлемент.До = 99999999;
	НовыйЭлемент.Записать();
КонецПроцедуры

Процедура ЗаполнитьГеографическиеПризнакиНалоговогоОсвобожденияКИК() Экспорт
	Макет = РегистрыСведений.ГеографическиеПризнакиНалоговогоОсвобожденияКИК.ПолучитьМакет("ФлагиСтран");
	СписокОсобыхЗон = Новый ТаблицаЗначений;
	СписокОсобыхЗон.Колонки.Добавить("Страна", Новый ОписаниеТипов("СправочникСсылка.СтраныМира"));
	СписокОсобыхЗон.Колонки.Добавить("СтранаКод", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(3));
	СписокОсобыхЗон.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата"));
	СписокОсобыхЗон.Колонки.Добавить("ЧленЕврАзЭС", Новый ОписаниеТипов("Булево"));
	СписокОсобыхЗон.Колонки.Добавить("Офшор", Новый ОписаниеТипов("Булево"));
	СписокОсобыхЗон.Колонки.Добавить("СИДН", Новый ОписаниеТипов("Булево"));
	СписокОсобыхЗон.Колонки.Добавить("НетИнформации", Новый ОписаниеТипов("Булево"));

	Для Инд = 2 По Макет.ВысотаТаблицы Цикл
		Признак1 = Макет.Область(Инд, 3, Инд, 3).Текст;
		Признак2 = Макет.Область(Инд, 4, Инд, 4).Текст;
		Признак3 = Макет.Область(Инд, 5, Инд, 5).Текст;
		Признак4 = Макет.Область(Инд, 6, Инд, 6).Текст;
		Код = Макет.Область(Инд, 1, Инд, 1).Текст;
		Если НЕ ПустаяСтрока(Признак1) Тогда
			НовСтр = СписокОсобыхЗон.Добавить();
			НовСтр.СтранаКод = Код;
			НовСтр.Период = Дата(Дата(Сред(Признак1, 7, 4) + Сред(Признак1, 4, 2) + Сред(Признак1, 0, 2)));
			НовСтр.Офшор = Истина;
		КонецЕсли;
		Если НЕ ПустаяСтрока(Признак2) Тогда
			НовСтр = СписокОсобыхЗон.Добавить();
			НовСтр.СтранаКод = Код;
			НовСтр.Период = Дата(Дата(Сред(Признак2, 7, 4) + Сред(Признак2, 4, 2) + Сред(Признак2, 0, 2)));
			НовСтр.ЧленЕврАзЭС = Истина;
		КонецЕсли;
		Если НЕ ПустаяСтрока(Признак3) Тогда
			НовСтр = СписокОсобыхЗон.Добавить();
			НовСтр.СтранаКод = Код;
			НовСтр.Период = Дата(Дата(Сред(Признак3, 7, 4) + Сред(Признак3, 4, 2) + Сред(Признак3, 0, 2)));
			НовСтр.СИДН = Истина;
		КонецЕсли;
		Если НЕ ПустаяСтрока(Признак4) Тогда
			НовСтр = СписокОсобыхЗон.Добавить();
			НовСтр.СтранаКод = Код;
			НовСтр.Период = Дата(Дата(Сред(Признак4, 7, 4) + Сред(Признак4, 4, 2) + Сред(Признак4, 0, 2)));
			НовСтр.НетИнформации = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таб.СтранаКод,
		|	Таб.Период,
		|	Таб.ЧленЕврАзЭС,
		|	Таб.Офшор,
		|	Таб.СИДН,
		|	Таб.НетИнформации
		|ПОМЕСТИТЬ Таблица
		|ИЗ
		|	&Таблица КАК Таб
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтраныМира.Ссылка КАК Страна,
		|	НАЧАЛОПЕРИОДА(Таблица.Период, ГОД) КАК Период,
		|	МАКСИМУМ(Таблица.ЧленЕврАзЭС) КАК ЧленЕврАзЭС,
		|	МАКСИМУМ(Таблица.Офшор) КАК Офшор,
		|	МАКСИМУМ(Таблица.СИДН) КАК СИДН,
		|	МАКСИМУМ(Таблица.НетИнформации) КАК НетИнформации
		|ИЗ
		|	Таблица КАК Таблица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СтраныМира КАК СтраныМира
		|		ПО Таблица.СтранаКод = СтраныМира.Код
		|
		|СГРУППИРОВАТЬ ПО
		|	СтраныМира.Ссылка,
		|	Таблица.Период";
	
	Запрос.УстановитьПараметр("Таблица", СписокОсобыхЗон);
	
	РезультатыЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатыЗапроса.Выбрать();
	
	НачатьТранзакцию();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.ГеографическиеПризнакиНалоговогоОсвобожденияКИК.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
		НаборЗаписей.Отбор.Страна.Установить(ВыборкаДетальныеЗаписи.Страна);
		НаборЗаписей.Очистить();
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись, ВыборкаДетальныеЗаписи);
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	ЗафиксироватьТранзакцию();
КонецПроцедуры

Процедура УстановитьКонстантыСрокаОжиданияПоВалютномуКонтролю() Экспорт
	Константы.СрокФормированияСПД.Установить(15);
	Константы.СрокФормированияСВОПоПоступлениям.Установить(15);
КонецПроцедуры

Процедура ОбновитьСвойстваДокументовПериодСценария() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УправлениеПериодомСценария.Ссылка
	|ИЗ
	|	Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	|ГДЕ
	|	УправлениеПериодомСценария.ПометкаУдаления = Ложь";
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.получитьОбъект();
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура СоздатьРакурсыПоУмолчанию() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВидыОтчетов.Ссылка
	               |ИЗ
	               |	Справочник.ВидыОтчетов КАК ВидыОтчетов
	               |ГДЕ
	               |	ВидыОтчетов.ПометкаУдаления = ЛОЖЬ
	               |	И ВидыОтчетов.ЭтоГруппа = ЛОЖЬ";
	
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Попытка 
			Справочники.ОбластиДанныхВидовОтчетов.СоздатьРакурсПоУмолчанию(Выборка.Ссылка);	
		Исключение
			ТекстСообщения = НСтр("ru = 'Во время записи ракурса для вида отчета "+Строка(Выборка.Ссылка)+"возникли ошибки: %ОписаниеОшибки%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);		
		КонецПопытки;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ЗаполнитьКатегориюОповещений(Параметры = Неопределено) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВидыСобытийОповещений.Ссылка,
		|	ВидыСобытийОповещений.КатегорияСобытия
		|ИЗ
		|	Справочник.ВидыСобытийОповещений КАК ВидыСобытийОповещений
		|ГДЕ
		|	ВидыСобытийОповещений.КатегорияСобытия = &КатегорияСобытия
		|	И ВидыСобытийОповещений.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("КатегорияСобытия", Справочники.КатегорииСобытийОповещений.ПустаяСсылка());
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВидСобытийСсылка = ВыборкаДетальныеЗаписи.Ссылка;
		ВидСобытийОбъект = ВидСобытийСсылка.ПолучитьОбъект();
		ВидСобытийОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьПредставлениеДляВнешнегоПоставщикаОтраженияФакта() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтражениеФактическихДанныхБюджетирования.Ссылка
	|ИЗ
	|	Документ.ОтражениеФактическихДанныхБюджетирования КАК ОтражениеФактическихДанныхБюджетирования
	|ГДЕ
	|	ОтражениеФактическихДанныхБюджетирования.ПредставлениеДляВнешнегоПоставщика = """"
	|	И ОтражениеФактическихДанныхБюджетирования.ИсходныйДокумент <> НЕОПРЕДЕЛЕНО";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаписатьДанные(Объект);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьКонстантуСценарияМСФО() Экспорт
	Константы.СценарийМСФО.Установить(Справочники.Сценарии.Факт);
КонецПроцедуры

Процедура УстановитьМетодыОценкиЛотов() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Лоты.Ссылка
		|ИЗ
		|	Справочник.Лоты КАК Лоты";
	
	ВыборкаЛотов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЛотов.Следующий() Цикл
		ЛотОбъект = ВыборкаЛотов.Ссылка.ПолучитьОбъект();
		// У старых лотов был только один метод оценки. Его и ставим.
		ЛотОбъект.МетодОценкиПредложенийПоставщиков = Перечисления.МетодыОценкиПредложенийПоставщиков.ПоКритериям;
		ЗаписатьОбъект(ЛотОбъект, , Ложь);
	КонецЦикла;	
КонецПроцедуры // УстановитьМетодыОценкиЛотов()

Процедура ДобавитьВидСвязиСпецификация() Экспорт
	Справочники.ВидыСвязейОбъектов.ОбновитьПредопределенные();
КонецПроцедуры

Процедура УстановитьФлагДопущенКУчастиюПредложенийПоставщиков() Экспорт
	// Установить флажок "Допущен к участию" для предложений поставщиков, которые выбраны в лотах как победители
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПредложениеПоставщика.Ссылка
		|ИЗ
		|	Справочник.Лоты.ВыбранныеПоставщики КАК ЛотыВыбранныеПоставщики
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПредложениеПоставщика КАК ПредложениеПоставщика
		|		ПО ЛотыВыбранныеПоставщики.Поставщик = ПредложениеПоставщика.Контрагент
		|			И (НЕ ПредложениеПоставщика.ДопущенКУчастию)";
	
	ВыборкаЛотов = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЛотов.Следующий() Цикл
		ДокОбъект = ВыборкаЛотов.Ссылка.ПолучитьОбъект();
		ДокОбъект.ДопущенКУчастию = Истина;
		ЗаписатьОбъект(ДокОбъект, , Ложь);
	КонецЦикла;	
КонецПроцедуры // УстановитьФлагДопущенКУчастиюПредложенийПоставщиков()

Процедура ОбновитьЗначенияБалльныхКритериев() Экспорт
	
	// Получаем значения бальных критериев, у которых не установлен балл, но установлено значение.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НастройкиПроцессаВыбораКритерииОценки.НеИспользоватьПреобразованиеВБаллы КАК НеИспользоватьПреобразованиеВБаллы,
		|	НастройкиПроцессаВыбораКритерииОценки.От0 КАК От0,
		|	НастройкиПроцессаВыбораКритерииОценки.До0 КАК До0,
		|	НастройкиПроцессаВыбораКритерииОценки.От1 КАК От1,
		|	НастройкиПроцессаВыбораКритерииОценки.До1 КАК До1,
		|	НастройкиПроцессаВыбораКритерииОценки.От2 КАК От2,
		|	НастройкиПроцессаВыбораКритерииОценки.До2 КАК До2,
		|	НастройкиПроцессаВыбораКритерииОценки.От3 КАК От3,
		|	НастройкиПроцессаВыбораКритерииОценки.До3 КАК До3,
		|	НастройкиПроцессаВыбораКритерииОценки.От4 КАК От4,
		|	НастройкиПроцессаВыбораКритерииОценки.До4 КАК До4,
		|	НастройкиПроцессаВыбораКритерииОценки.До5 КАК До5,
		|	НастройкиПроцессаВыбораКритерииОценки.От5 КАК От5,
		|	НастройкиПроцессаВыбораКритерииОценки.К0 КАК К0,
		|	НастройкиПроцессаВыбораКритерииОценки.К1 КАК К1,
		|	ЗначенияКритериевОценки.Владелец КАК Владелец,
		|	ЗначенияКритериевОценки.Ответственный КАК Ответственный,
		|	ЗначенияКритериевОценки.ОбъектОценки КАК ОбъектОценки,
		|	ЗначенияКритериевОценки.ЭтапОценки КАК ЭтапОценки,
		|	ЗначенияКритериевОценки.Критерий КАК Критерий,
		|	ЗначенияКритериевОценки.Значение КАК Значение,
		|	ЗначенияКритериевОценки.Вес КАК Вес,
		|	ЗначенияКритериевОценки.ЗначениеМножества КАК ЗначениеМножества,
		|	ЗначенияКритериевОценки.НеЗаполнен КАК НеЗаполнен
		|ИЗ
		|	РегистрСведений.ЗначенияКритериевОценки КАК ЗначенияКритериевОценки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПроцессовВыбора КАК НастройкиПроцессовВыбора
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НастройкиПроцессаВыбора.КритерииОценки КАК НастройкиПроцессаВыбораКритерииОценки
		|			ПО НастройкиПроцессовВыбора.НастройкаПроцессаВыбора = НастройкиПроцессаВыбораКритерииОценки.Ссылка
		|		ПО (НЕ ЗначенияКритериевОценки.НеЗаполнен)
		|			И (ЗначенияКритериевОценки.БалльноеЗначение = 0)
		|			И (НастройкиПроцессовВыбора.Владелец = ЗначенияКритериевОценки.Владелец)
		|ГДЕ
		|	НЕ НастройкиПроцессаВыбораКритерииОценки.Ссылка.ПометкаУдаления
		|	И НЕ НастройкиПроцессаВыбораКритерииОценки.РассчитатьЗначение
		|	И НЕ НастройкиПроцессаВыбораКритерииОценки.НеИспользоватьПреобразованиеВБаллы
		|	И ЗначенияКритериевОценки.Критерий = НастройкиПроцессаВыбораКритерииОценки.КритерийОценки
		|	И НастройкиПроцессаВыбораКритерииОценки.ЭтапВыбора = ЗначенияКритериевОценки.ЭтапОценки
		|	И НастройкиПроцессаВыбораКритерииОценки.От0 * НастройкиПроцессаВыбораКритерииОценки.От1 * НастройкиПроцессаВыбораКритерииОценки.От2 * НастройкиПроцессаВыбораКритерииОценки.От3 * НастройкиПроцессаВыбораКритерииОценки.От4 * НастройкиПроцессаВыбораКритерииОценки.От5 * НастройкиПроцессаВыбораКритерииОценки.До0 * НастройкиПроцессаВыбораКритерииОценки.До1 * НастройкиПроцессаВыбораКритерииОценки.До2 * НастройкиПроцессаВыбораКритерииОценки.До3 * НастройкиПроцессаВыбораКритерииОценки.До4 * НастройкиПроцессаВыбораКритерииОценки.До5 <> 0";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МенеджерЗаписи = РегистрыСведений.ЗначенияКритериевОценки.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаДетальныеЗаписи);
		МенеджерЗаписи.БалльноеЗначение = ВыборОбъектовУХ.БаллПоЗначению(ВыборкаДетальныеЗаписи.Значение, ВыборкаДетальныеЗаписи);
		МенеджерЗаписи.Записать();
	КонецЦикла;

КонецПроцедуры //ОбновитьЗначенияБалльныхКритериев

Процедура  ОбновитьДанныеОтчетныхПериодов() Экспорт

	ДокументыУОП = Документы.УправлениеПериодомСценария.Выбрать();
	
	Пока ДокументыУОП.Следующий() Цикл	
		ДокументОбъект = ДокументыУОП.ПолучитьОбъект();
		Попытка
			ЗаписатьДанные(ДокументОбъект,,Истина);
		Исключение
			ЗаписьЖурналаРегистрации("ОбновитьДокументУправлениеОтчетнымПериодом", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыРазделенияСогласования() Экспорт
	МодульСогласованияДокументовУХ.ЗаполнитьРеквизитыСогласованияОбъектаБД(Ложь,	 "ЛишениеАккредитации",										 "Организация", "");	
	МодульСогласованияДокументовУХ.ЗаполнитьРеквизитыСогласованияОбъектаБД(Истина,	 "ДоговорыКонтрагентов",									 "Организация", "ОсновнойПроект");	
	МодульСогласованияДокументовУХ.ЗаполнитьРеквизитыСогласованияОбъектаБД(Ложь,	 "СправкаОПодтверждающихДокументах",						 "Организация", "");	
	МодульСогласованияДокументовУХ.ЗаполнитьРеквизитыСогласованияОбъектаБД(Ложь,	 "УстановкаТребованийКвалификацииКНоменклатуреПоставщиков",	 "Организация", "");
	МодульСогласованияДокументовУХ.ЗаполнитьРеквизитыСогласованияОбъектаБД(Истина,	 "Проекты",													 "Организация", "");
	МодульСогласованияДокументовУХ.ЗаполнитьРеквизитыСогласованияОбъектаБД(Ложь,	 "НастраиваемыйОтчет",										 "Организация", "Проект");
	МодульСогласованияДокументовУХ.ЗаполнитьРеквизитыСогласованияОбъектаБД(Ложь,	 "УстановкаОбщихТребованийКПоставщикам",					 "Организация", "");
	МодульСогласованияДокументовУХ.ЗаполнитьРеквизитыСогласованияОбъектаБД(Истина,	 "Претензии",												 "Организация", "");
	МодульСогласованияДокументовУХ.ЗаполнитьРеквизитыСогласованияОбъектаБД(Ложь,	 "ЗаявкаНаИзменениеНСИ",									 "Организация", "");
	МодульСогласованияДокументовУХ.ЗаполнитьРеквизитыСогласованияОбъектаБД(Ложь,	 "ЗаявкаНаРасходованиеДенежныхСредств",						 "Организация", "Проект");
	МодульСогласованияДокументовУХ.ЗаполнитьРеквизитыСогласованияОбъектаБД(Истина,	 "РеестрыСогласуемыхОбъектов",								 "Организация", "");
	МодульСогласованияДокументовУХ.ЗаполнитьРеквизитыСогласованияОбъектаБД(Ложь,	 "РакурсДанных",											 "Организация", "Проект");
	МодульСогласованияДокументовУХ.ЗаполнитьРеквизитыСогласованияОбъектаБД(Ложь,	 "ОтражениеФактическихДанныхБюджетирования",				 "Организация", "Проект");
	МодульСогласованияДокументовУХ.ЗаполнитьРеквизитыСогласованияОбъектаБД(Ложь,	 "АккредитацияПоставщика",									 "Организация", "");
	МодульСогласованияДокументовУХ.ЗаполнитьРеквизитыСогласованияОбъектаБД(Ложь,	 "КвалификацияПоставщика",									 "Организация", "");
	МодульСогласованияДокументовУХ.ЗаполнитьРеквизитыСогласованияОбъектаБД(Ложь,	 "ОперативныйПлан",									 		 "Организация", "Проект");
	МодульСогласованияДокументовУХ.ЗаполнитьРеквизитыСогласованияОбъектаБД(Ложь,	 "РеестрПлатежей",											 "Организация", "");
	МодульСогласованияДокументовУХ.ЗаполнитьРеквизитыСогласованияОбъектаБД(Ложь,	 "ОтзывАккредитации",										 "Организация", "");
	МодульСогласованияДокументовУХ.ЗаполнитьРеквизитыСогласованияОбъектаБД(Ложь,	 "СправкаОВалютныхОперациях",								 "Организация", "");
	МодульСогласованияДокументовУХ.ЗаполнитьРеквизитыСогласованияОбъектаБД(Истина,	 "Лоты",													 "Организация", "Проект");	
	МодульСогласованияДокументовУХ.ЗаполнитьРеквизитыСогласованияОбъектаБД(Ложь,	 "ПоступлениеИнвестиций",								 	 "Организация", "");
	МодульСогласованияДокументовУХ.ЗаполнитьРеквизитыСогласованияОбъектаБД(Ложь,	 "ВыбытиеИнвестиций",									 	 "Организация", "");
КонецПроцедуры

Процедура ЗаполнитьКонстантуСценарияКИК() Экспорт
	
	НовыйСценарий = Справочники.Сценарии.СоздатьЭлемент();
	НовыйСценарий.Наименование = "Сценарий отчетности КИК";
	НовыйСценарий.Записать();
	
	Константы.СценарийОтчетностиКИК.Установить(НовыйСценарий.Ссылка);
	
КонецПроцедуры

Процедура ЗаполнитьОбъектыДляСогласования() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ВидыОтчетов.Ссылка
	|ИЗ
	|	Справочник.ВидыОтчетов КАК ВидыОтчетов
	|ГДЕ
	|	НЕ ВидыОтчетов.ПометкаУдаления
	|	И НЕ ВидыОтчетов.ЭтоГруппа
	|	И ВидыОтчетов.ОбъектДляСогласованияЗначений = ЗНАЧЕНИЕ(Перечисление.ОбъектыСогласованияЗначенийПоказателейОтчетов.ПустаяСсылка)";
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СправочникОбъект=Результат.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ОбъектДляСогласованияЗначений=Перечисления.ОбъектыСогласованияЗначенийПоказателейОтчетов.ЭкземплярОтчета;
		ЗаписатьОбъект(СправочникОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСценарии() Экспорт
	
	СценарийФакт = Справочники.Сценарии.Факт.ПолучитьОбъект();
	Попытка
		ЗаписатьДанные(СценарийФакт,,Ложь);
	Исключение
		ЗаписьЖурналаРегистрации("ОбновитьСценарий", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;
	
	СценарийПлан = Справочники.Сценарии.План.ПолучитьОбъект();
	Попытка
		ЗаписатьДанные(СценарийПлан,,Ложь);
	Исключение
		ЗаписьЖурналаРегистрации("ОбновитьСценарий", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;
	
	СценарийРезерв = Справочники.Сценарии.Резерв.ПолучитьОбъект();
	Попытка
		ЗаписатьДанные(СценарийРезерв,,Ложь);
	Исключение
		ЗаписьЖурналаРегистрации("ОбновитьСценарий", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;
	
	ОбновитьДанныеОтчетныхПериодов();
		
КонецПроцедуры

Процедура ОбновитьСценарииБезСвязанныхДанных() Экспорт
	
	СценарийФакт = Справочники.Сценарии.Факт.ПолучитьОбъект();
	Попытка
		ЗаписатьДанные(СценарийФакт,,Ложь);
	Исключение
		ЗаписьЖурналаРегистрации("ОбновитьСценарий", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;
	
	СценарийПлан = Справочники.Сценарии.План.ПолучитьОбъект();
	Попытка
		ЗаписатьДанные(СценарийПлан,,Ложь);
	Исключение
		ЗаписьЖурналаРегистрации("ОбновитьСценарий", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;
	
	СценарийРезерв = Справочники.Сценарии.Резерв.ПолучитьОбъект();
	Попытка
		ЗаписатьДанные(СценарийРезерв,,Ложь);
	Исключение
		ЗаписьЖурналаРегистрации("ОбновитьСценарий", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;
			
КонецПроцедуры

Процедура ЗаполнитьКатегорииЗакупокПоДаннымПостановленияОт20160802() Экспорт
	Справочники.КатегорииЗакупокДляИсключенияИзГОЗ.ЗаполнитьПоДаннымПостановленияОт20160802();
КонецПроцедуры

Процедура УстановитьОсновныеБланки() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НастройкаОбработкиОтчетов.ЭлементНастройкиОтчета,
		|	НастройкаОбработкиОтчетов.ЗначениеЭлементаНастройкиОтчета,
		|	НастройкаОбработкиОтчетов.ШаблонДокументаБД
		|ПОМЕСТИТЬ ВТ_НастройкиЭкземпляр
		|ИЗ
		|	РегистрСведений.НастройкаОбработкиОтчетов КАК НастройкаОбработкиОтчетов
		|ГДЕ
		|	НастройкаОбработкиОтчетов.ЭлементНастройкиОтчета = &ЭлементНастройкиОтчетаБланкЭкземпляра
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НастройкаОбработкиОтчетов.ЭлементНастройкиОтчета,
		|	НастройкаОбработкиОтчетов.ЗначениеЭлементаНастройкиОтчета,
		|	НастройкаОбработкиОтчетов.ШаблонДокументаБД
		|ПОМЕСТИТЬ ВТ_НастройкиСводнаяТаблица
		|ИЗ
		|	РегистрСведений.НастройкаОбработкиОтчетов КАК НастройкаОбработкиОтчетов
		|ГДЕ
		|	НастройкаОбработкиОтчетов.ЭлементНастройкиОтчета = &ЭлементНастройкиОтчетаБланкСводнойТаблицы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыОтчетов.Ссылка КАК ВидОтчета,
		|	ЕСТЬNULL(ВТ_НастройкиЭкземпляр.ЭлементНастройкиОтчета, &ЭлементНастройкиОтчетаБланкЭкземпляра) КАК ЭлементНастройки,
		|	МАКСИМУМ(ЕСТЬNULL(ВТ_НастройкиЭкземпляр.ЗначениеЭлементаНастройкиОтчета, ЗНАЧЕНИЕ(Справочник.БланкиОтчетов.ПустаяСсылка))) КАК Бланк
		|ПОМЕСТИТЬ ВТ_БланкиВидовОтчетов
		|ИЗ
		|	Справочник.ВидыОтчетов КАК ВидыОтчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НастройкиЭкземпляр КАК ВТ_НастройкиЭкземпляр
		|		ПО ВидыОтчетов.Ссылка = ВТ_НастройкиЭкземпляр.ШаблонДокументаБД
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыОтчетов.Ссылка,
		|	ЕСТЬNULL(ВТ_НастройкиЭкземпляр.ЭлементНастройкиОтчета, &ЭлементНастройкиОтчетаБланкЭкземпляра)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВидыОтчетов.Ссылка,
		|	ЕСТЬNULL(ВТ_НастройкиСводнаяТаблица.ЭлементНастройкиОтчета, &ЭлементНастройкиОтчетаБланкСводнойТаблицы),
		|	МАКСИМУМ(ЕСТЬNULL(ВТ_НастройкиСводнаяТаблица.ЗначениеЭлементаНастройкиОтчета, ЗНАЧЕНИЕ(Справочник.БланкиОтчетов.ПустаяСсылка)))
		|ИЗ
		|	Справочник.ВидыОтчетов КАК ВидыОтчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НастройкиСводнаяТаблица КАК ВТ_НастройкиСводнаяТаблица
		|		ПО ВидыОтчетов.Ссылка = ВТ_НастройкиСводнаяТаблица.ШаблонДокументаБД
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыОтчетов.Ссылка,
		|	ЕСТЬNULL(ВТ_НастройкиСводнаяТаблица.ЭлементНастройкиОтчета, &ЭлементНастройкиОтчетаБланкСводнойТаблицы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВТ_БланкиВидовОтчетов.ВидОтчета,
		|	ВТ_БланкиВидовОтчетов.ЭлементНастройки,
		|	ВТ_БланкиВидовОтчетов.Бланк
		|ПОМЕСТИТЬ ВТ_ОтсутствующиеБланки
		|ИЗ
		|	ВТ_БланкиВидовОтчетов КАК ВТ_БланкиВидовОтчетов
		|ГДЕ
		|	ВТ_БланкиВидовОтчетов.Бланк = ЗНАЧЕНИЕ(Справочник.БланкиОтчетов.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(БланкиОтчетов.Ссылка) КАК ВозможныйБланк,
		|	ВТ_ОтсутствующиеБланки.ЭлементНастройки,
		|	ВТ_ОтсутствующиеБланки.ВидОтчета
		|ИЗ
		|	ВТ_ОтсутствующиеБланки КАК ВТ_ОтсутствующиеБланки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БланкиОтчетов КАК БланкиОтчетов
		|		ПО ВТ_ОтсутствующиеБланки.ВидОтчета = БланкиОтчетов.Владелец
		|ГДЕ
		|	БланкиОтчетов.РежимСводнойТаблицы = ЛОЖЬ
		|	И ВТ_ОтсутствующиеБланки.ЭлементНастройки = &ЭлементНастройкиОтчетаБланкЭкземпляра
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ОтсутствующиеБланки.ЭлементНастройки,
		|	ВТ_ОтсутствующиеБланки.ВидОтчета
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	МАКСИМУМ(БланкиОтчетов.Ссылка),
		|	ВТ_ОтсутствующиеБланки.ЭлементНастройки,
		|	ВТ_ОтсутствующиеБланки.ВидОтчета
		|ИЗ
		|	ВТ_ОтсутствующиеБланки КАК ВТ_ОтсутствующиеБланки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БланкиОтчетов КАК БланкиОтчетов
		|		ПО ВТ_ОтсутствующиеБланки.ВидОтчета = БланкиОтчетов.Владелец
		|ГДЕ
		|	БланкиОтчетов.РежимСводнойТаблицы = ИСТИНА
		|	И ВТ_ОтсутствующиеБланки.ЭлементНастройки = &ЭлементНастройкиОтчетаБланкСводнойТаблицы
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ОтсутствующиеБланки.ЭлементНастройки,
		|	ВТ_ОтсутствующиеБланки.ВидОтчета";
	Запрос.УстановитьПараметр("ЭлементНастройкиОтчетаБланкСводнойТаблицы", Перечисления.ЭлементыНастройкиОтчета.БланкСводнойТаблицы);
	Запрос.УстановитьПараметр("ЭлементНастройкиОтчетаБланкЭкземпляра", Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображения);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		УправлениеОтчетамиУХ.УстановитьЭлементПоУмолчаниюДляВидаОтчета(ВыборкаДетальныеЗаписи.ВозможныйБланк, ВыборкаДетальныеЗаписи.ВидОтчета, ВыборкаДетальныеЗаписи.ЭлементНастройки);
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьДанныеОтчетныхПериодовПоПлану() Экспорт
	
	  Запрос = Новый Запрос;
	  Запрос.Текст = "ВЫБРАТЬ
	                 |	УправлениеПериодомСценария.Ссылка
	                 |ИЗ
	                 |	Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	                 |ГДЕ
	                 |	УправлениеПериодомСценария.ПометкаУдаления = ЛОЖЬ
	                 |	И УправлениеПериодомСценария.Сценарий = ЗНАЧЕНИЕ(Справочник.Сценарии.План)
	                 |	И УправлениеПериодомСценария.ПериодСценария.Периодичность = &Периодичность
	                 |
	                 |УПОРЯДОЧИТЬ ПО
	                 |	УправлениеПериодомСценария.ПериодСценария.ДатаНачала";
	  
	  Запрос.УстановитьПараметр("Периодичность",Константы.ПериодичностьБюджетирования.Получить());			 
	  Результат = Запрос.Выполнить().Выгрузить();  
	  СчетчикДокументов = 1;
	  
	  // выстроить документы по периодам
	  Для каждого стр Из Результат Цикл
		  
		  Если Результат.Количество() >= СчетчикДокументов+1  Тогда	  
			  СледующийДокумент =  Результат[СчетчикДокументов].Ссылка;	  
		  Иначе	  	  
			  СледующийДокумент = Неопределено;  
		  КонецЕсли; 
		  
		  Если НЕ СледующийДокумент = Неопределено Тогда
			
			  ДокументОбъект = стр.Ссылка.ПолучитьОбъект();
			  ДокументОбъект.ПериодСценарияОкончание =  УправлениеОтчетамиУХ.ПолучитьСледующийПериод(СледующийДокумент.ПериодСценария,-1);
			  Попытка
				  ДокументОбъект.ОбменДанными.Загрузка = Истина;
				  ДокументОбъект.Записать();
				  ТекДокумент = ДокументОбъект.Ссылка;
				  
				  //Разблокируем  периоды... 
				  тПериодыОрганизацииПолныйСрез = УправлениеОтчетамиУХ.ПолучитьАналитикиТекущегоГоризонта(ТекДокумент,ТекДокумент.ПериодСценария
				  ,ТекДокумент.ПериодСценарияОкончание,ТекДокумент.Сценарий,ТекДокумент.ВерсияОрганизационнойСтруктуры);	
				  
				  Для Каждого Стр Из тПериодыОрганизацииПолныйСрез Цикл	
					  Стр.СтатусБлокировки = ?(ТекДокумент.ПериодЗакрыт,1,0);	
				  КонецЦикла;	
				  
				  НаборЗаписей = РегистрыСведений.СтатусыПериодовСценариев.СоздатьНаборЗаписей();
				  НаборЗаписей.Отбор.Сценарии.Установить(ТекДокумент.Сценарий);
				  
				  ТЗПериодов = тПериодыОрганизацииПолныйСрез.Скопировать();
				  ТЗПериодов.Свернуть("Периоды");
				  
				  Для Каждого ПериодСценарияСтрока ИЗ ТЗПериодов Цикл
					  
					  НаборЗаписей.Отбор.Периоды.Установить(ПериодСценарияСтрока.Периоды);
					  НаборЗаписей.Прочитать();
					  НаборЗаписей.Загрузить(тПериодыОрганизацииПолныйСрез.Скопировать(Новый Структура("Периоды",ПериодСценарияСтрока.Периоды)));
					  НаборЗаписей.Записать(Истина);		
					  
				  КонецЦикла;
				  	  
			  Исключение	  
				  
				  ЗаписьЖурналаРегистрации("ОбновитьДанныеОтчетныхПериодовПоПлану", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
				  
			  КонецПопытки;	  
			  
		  КонецЕсли; 
		  
		  СчетчикДокументов = СчетчикДокументов+1;
		    
	  КонецЦикла; 
	  
	 // Для последнего документа определим период окончания 
	 Если Результат.Количество()>1 Тогда
		 
		 ПредыдущийДокумент = Результат[Результат.Количество()-2].Ссылка;
		 ТекущийДокумент =    Результат[Результат.Количество()-1].Ссылка;
		 
		 Смещение = УправлениеОтчетамиУХ.ПолучитьСмещениеПоИнтервалуПериодов(ПредыдущийДокумент.ПериодСценария,ПредыдущийДокумент.ПериодСценарияОкончание);
		 Смещение = ?(Смещение>12,12,Смещение);
		 		 
		 Попытка
			 
			 ДокументОбъект = ТекущийДокумент.ПолучитьОбъект();
			 ДокументОбъект.ПериодСценарияОкончание =  УправлениеОтчетамиУХ.ПолучитьСледующийПериод(ТекущийДокумент.ПериодСценария,Смещение-1);
			 ДокументОбъект.ОбменДанными.Загрузка = Истина;
			 ДокументОбъект.Записать();
			 ТекДокумент = ДокументОбъект.Ссылка;
			 
			 //Разблокируем  периоды... 
			 тПериодыОрганизацииПолныйСрез = УправлениеОтчетамиУХ.ПолучитьАналитикиТекущегоГоризонта(ТекДокумент,ТекДокумент.ПериодСценария
			 ,ТекДокумент.ПериодСценарияОкончание,ТекДокумент.Сценарий,ТекДокумент.ВерсияОрганизационнойСтруктуры);	
			 
			 Для Каждого Стр Из тПериодыОрганизацииПолныйСрез Цикл	
				 Стр.СтатусБлокировки = ?(ТекДокумент.ПериодЗакрыт,1,0);	
			 КонецЦикла;	
			 
			 НаборЗаписей = РегистрыСведений.СтатусыПериодовСценариев.СоздатьНаборЗаписей();
			 НаборЗаписей.Отбор.Сценарии.Установить(ТекДокумент.Сценарий);
			 
			 ТЗПериодов = тПериодыОрганизацииПолныйСрез.Скопировать();
			 ТЗПериодов.Свернуть("Периоды");
			 
			 Для Каждого ПериодСценарияСтрока ИЗ ТЗПериодов Цикл
				 
				 НаборЗаписей.Отбор.Периоды.Установить(ПериодСценарияСтрока.Периоды);
				 НаборЗаписей.Прочитать();
				 НаборЗаписей.Загрузить(тПериодыОрганизацииПолныйСрез.Скопировать(Новый Структура("Периоды",ПериодСценарияСтрока.Периоды)));
				 НаборЗаписей.Записать(Истина);		
				 
			 КонецЦикла;
			 	 
		 Исключение	  
			 
			ЗаписьЖурналаРегистрации("ОбновитьДанныеОтчетныхПериодовПоПлану", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки()); 
			 
		 КонецПопытки;	  
		 	 
	 КонецЕсли;  
	
КонецПроцедуры

Процедура ОбновитьВалютыОтчетностиРегламентов() Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВерсииРегламентовПодготовкиОтчетности.Ссылка
	|ИЗ
	|	Справочник.ВерсииРегламентовПодготовкиОтчетности КАК ВерсииРегламентовПодготовкиОтчетности
	|ГДЕ
	|	НЕ ВерсииРегламентовПодготовкиОтчетности.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					т.Регламент
	|				ИЗ
	|					РегистрСведений.ВалютыОтчетности КАК т)");
	
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.ВалютыОтчетности.СформироватьЗаписиВалютыОтчетности(Выборка.Ссылка);
	КонецЦикла; 

КонецПроцедуры

Процедура ОбновитьКонтрагентовСвязанныхСОрганизациямиЦФО() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка
		|ПОМЕСТИТЬ Таблица
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	(Организации.ЭлиминирующаяОрганизация
		|			ИЛИ НЕ(Организации.ИностранныйНалоговыйРезидент
		|					ИЛИ Организации.ИспользоватьВРегламентированномУчете))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ОрганизационнаяЕдиница В
		|			(ВЫБРАТЬ
		|				Таблица.Ссылка
		|			ИЗ
		|				Таблица КАК Таблица)
		|	И Контрагенты.ПометкаУдаления = ЛОЖЬ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Объект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Объект.ПометкаУдаления = Истина;
		Попытка
			ЗаписатьДанные(Объект, , Ложь);
		Исключение
			ЗаписьЖурналаРегистрации("ОбновитьКонтрагентовСвязанныхСОрганизациямиЦФО", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
	
	
КонецПроцедуры

Процедура СкорректироватьЭффективныеДоли() Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СтатусыОбъектовИнвестирования.Регистратор
	|ИЗ
	|	РегистрСведений.СтатусыОбъектовИнвестирования КАК СтатусыОбъектовИнвестирования
	|ГДЕ
	|	СтатусыОбъектовИнвестирования.ЭффективнаяДоля > 100");
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		нз = РегистрыСведений.СтатусыОбъектовИнвестирования.СоздатьНаборЗаписей();	
		нз.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		нз.Прочитать();
		
		Для каждого Запись Из нз Цикл		
			Если Запись.ЭффективнаяДоля > 100 Тогда
				Запись.ЭффективнаяДоля = 100;			
			КонецЕсли;		
		КонецЦикла;
		
		ЗаписатьДанные(нз);
		
	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьДанныеВидовУведомленийКИК() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УведомлениеОСпецрежимахНалогообложения.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.УведомлениеОСпецрежимахНалогообложения КАК УведомлениеОСпецрежимахНалогообложения
		|ГДЕ
		|	УведомлениеОСпецрежимахНалогообложения.ВидУведомления = ЗНАЧЕНИЕ(Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.УдалитьФормаКИК)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Объект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Объект.ВидУведомления = ПредопределенноеЗначение("Перечисление.ВидыУведомленийОСпецрежимахНалогообложения.ФормаКИК");
		Попытка
			ЗаписатьДанные(Объект, , Ложь);
		Исключение
			ЗаписьЖурналаРегистрации("ОбновитьДанныеВидовУведомленийКИК", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;

КонецПроцедуры

Процедура УстановитьМетодСписанияЗадолженностиВДепозитах() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВерсияСоглашенияДепозит.Ссылка
	|ИЗ
	|	Документ.ВерсияСоглашенияДепозит КАК ВерсияСоглашенияДепозит
	|ГДЕ
	|	ВерсияСоглашенияДепозит.МетодСписанияЗадолженности = ЗНАЧЕНИЕ(Перечисление.МетодыСписанияЗадолженности.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.МетодСписанияЗадолженности = Перечисления.МетодыСписанияЗадолженности.FIFO;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьФлагиОтраженияВУчетеДляИнвестиций() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеИнвестиций.Ссылка,
		|	ПоступлениеИнвестиций.Сценарий,
		|	ПоступлениеИнвестиций.НалоговыйУчет,
		|	ПоступлениеИнвестиций.РегламентированныйУчет,
		|	ПоступлениеИнвестиций.МСФОУчет,
		|	ПоступлениеИнвестиций.Регламент,
		|	ПоступлениеИнвестиций.Дата КАК Дата,
		|	ПоступлениеИнвестиций.Проведен
		|ИЗ
		|	Документ.ПоступлениеИнвестиций КАК ПоступлениеИнвестиций
		|ГДЕ
		|	ПоступлениеИнвестиций.ПометкаУдаления = ЛОЖЬ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВыбытиеИнвестиций.Ссылка,
		|	ВыбытиеИнвестиций.Сценарий,
		|	ВыбытиеИнвестиций.НалоговыйУчет,
		|	ВыбытиеИнвестиций.РегламентированныйУчет,
		|	ВыбытиеИнвестиций.МСФОУчет,
		|	"""",
		|	ВыбытиеИнвестиций.Дата,
		|	ВыбытиеИнвестиций.Проведен
		|ИЗ
		|	Документ.ВыбытиеИнвестиций КАК ВыбытиеИнвестиций
		|ГДЕ
		|	ВыбытиеИнвестиций.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		
		Объект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Регламент) Тогда
			Объект.Сценарий = ВыборкаДетальныеЗаписи.Регламент.Сценарий;
			Объект.РегламентированныйУчет = Ложь;
			Объект.НалоговыйУчет = Ложь;
			Объект.МСФОУчет = Ложь;
			Объект.ДополнительныеСвойства.Вставить("Регламент", ВыборкаДетальныеЗаписи.Регламент);
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.НалоговыйУчет ИЛИ ВыборкаДетальныеЗаписи.МСФОУчет Тогда
			Объект.Сценарий = Справочники.Сценарии.ПустаяСсылка();
		Иначе
			Объект.РегламентированныйУчет = Ложь;
		КонецЕсли;
		
		Если ВыборкаДетальныеЗаписи.НалоговыйУчет Тогда
			Объект.МСФОУчет = Истина;
		КонецЕсли;
				
		Если Объект.РегламентированныйУчет 
			И Не РегистрыБухгалтерии.Хозрасчетный.ВыбратьПоРегистратору(ВыборкаДетальныеЗаписи.Ссылка).Следующий() Тогда
			Объект.РегламентированныйУчет = Ложь; //небыло проводок по БУ
		КонецЕсли;
		
		Если НЕ ВыборкаДетальныеЗаписи.Проведен Тогда
			ЗаписатьОбъект(Объект);
		Иначе
			ПровестиДокумент(Объект, "");
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьКатегорииЗакупокПоДаннымПостановленияОт20161214() Экспорт
	Справочники.КатегорииЗакупокДляИсключенияИзГОЗ.ЗаполнитьПоДаннымПостановленияОт20161214();
КонецПроцедуры

Процедура ЗаполнитьКатегорииЗакупокДляОтчетаОбъемЗакупок() Экспорт
	Справочники.КатегорииЗакупокДляИсключенияИзГОЗ.ЗаполнитьКатегорииЗакупокДляОтчетаОбъемЗакупок();
КонецПроцедуры

Процедура ЗаписатьВариантыЗаполненияШаблонов() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВариантыЗаполненияШаблонов.Ссылка
		|ИЗ
		|	Справочник.ВариантыЗаполненияШаблонов КАК ВариантыЗаполненияШаблонов
		|ГДЕ
		|	НЕ ВариантыЗаполненияШаблонов.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СправочникСсылка = ВыборкаДетальныеЗаписи.Ссылка;
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		СправочникОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьКонстантыАвтоматическогоФормированияОФД() Экспорт
	
	Константы.АвтоматическиФормироватьОФДПоДокументамДДС.Установить(Истина);
	Константы.АвтоматическиФормироватьОФДПоДокументамПТУРТУ.Установить(Истина);
	
КонецПроцедуры

Процедура ДобавитьМастерОрганизациюВСчетаПула() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПулыЛиквидности.Ссылка
	|ИЗ
	|	Справочник.ПулыЛиквидности КАК ПулыЛиквидности
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПулыЛиквидности.УчастникиПула КАК ПулыЛиквидностиУчастникиПула
	|		ПО (ПулыЛиквидностиУчастникиПула.Ссылка = ПулыЛиквидности.Ссылка)
	|			И (ПулыЛиквидностиУчастникиПула.Организация = ПулыЛиквидности.Организация)
	|ГДЕ
	|	ПулыЛиквидностиУчастникиПула.Организация ЕСТЬ NULL
	|	И ПулыЛиквидности.Организация <> ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПулОбъект = Выборка.Ссылка.ПолучитьОбъект();
		НовыйУчастникПула = ПулОбъект.УчастникиПула.Добавить();
		НовыйУчастникПула.Организация = ПулОбъект.Организация;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ПулОбъект);
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ЗаполнитьСуммуВалютуВзаиморасчетовОтраженияФактическихДанных() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств.Ссылка КАК Ссылка,
	|	ЕСТЬNULL(РазмещениеЗаявок.СуммаВзаиморасчетов, ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств.Сумма) КАК СуммаВзаиморасчетов,
	|	ЕСТЬNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.ВалютаДокумента, ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)) КАК ВалютаВзаиморасчетов,
	|	ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ОтражениеФактическихДанныхБюджетирования.БюджетДвиженияДенежныхСредств КАК ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|		ПО ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств.ДокументПланирования = РазмещениеЗаявок.ЗаявкаНаОперацию
	|			И ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств.ИдентификаторПозиции = РазмещениеЗаявок.ИдентификаторПозиции
	|ГДЕ
	|	(ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств.СуммаВзаиморасчетов = 0
	|			ИЛИ ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств.ВалютаВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|ИТОГИ ПО
	|	Ссылка";
	
	ВыборкаДокументы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаДокументы.Следующий() Цикл
		
		ДокОбъект = ВыборкаДокументы.Ссылка.ПолучитьОбъект();
		
		ВыборкаСтрокиРасшифровки = ВыборкаДокументы.Выбрать();
		
		Пока ВыборкаСтрокиРасшифровки.Следующий() Цикл
			
			СтрокаДокумента = ДокОбъект.БюджетДвиженияДенежныхСредств.Найти(ВыборкаСтрокиРасшифровки.НомерСтроки, "НомерСтроки");
			Если СтрокаДокумента = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(СтрокаДокумента.ВалютаВзаиморасчетов) Тогда
				СтрокаДокумента.ВалютаВзаиморасчетов = ?(ЗначениеЗаполнено(ВыборкаСтрокиРасшифровки.ВалютаВзаиморасчетов), ВыборкаСтрокиРасшифровки.ВалютаВзаиморасчетов, ДокОбъект.ВалютаДокумента);
			КонецЕсли;
			
			Если СтрокаДокумента.СуммаВзаиморасчетов = 0 Тогда
				СтрокаДокумента.СуммаВзаиморасчетов = ВыборкаСтрокиРасшифровки.СуммаВзаиморасчетов
			КонецЕсли;
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокОбъект);
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ЗаполнитьРольКонтрагентаВМатрицеУсловий() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"
	|ВЫБРАТЬ
	|	МатрицаРекомендуемыхУсловий.РольКонтрагента,
	|	МатрицаРекомендуемыхУсловий.СтепеньРиска,
	|	МатрицаРекомендуемыхУсловий.СтепеньДоходности,
	|	МатрицаРекомендуемыхУсловий.УсловиеОплаты,
	|	МатрицаРекомендуемыхУсловий.ДопустимыйУровеньЗадолженности
	|ИЗ
	|	РегистрСведений.МатрицаРекомендуемыхУсловий КАК МатрицаРекомендуемыхУсловий
	|ГДЕ
	|	МатрицаРекомендуемыхУсловий.РольКонтрагента = ЗНАЧЕНИЕ(Перечисление.РолиКонтрагентов.ПустаяСсылка)";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		МЗ = РегистрыСведений.МатрицаРекомендуемыхУсловий.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МЗ, Выборка);
		МЗ.Прочитать();
		МЗ.РольКонтрагента = Перечисления.РолиКонтрагентов.Покупатели;
		МЗ.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРолиКонтрагентовВДокументеУстановкаКлассов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	УстановкаКлассовКонтрагентовОценки.НомерСтроки КАК НомерСтроки,
	|	УстановкаКлассовКонтрагентовОценки.Контрагент,
	|	УстановкаКлассовКонтрагентовОценки.СтепеньРиска,
	|	УстановкаКлассовКонтрагентовОценки.СтепеньДоходности,
	|	УстановкаКлассовКонтрагентовОценки.Комментарий,
	|	ВЫБОР
	|		КОГДА УстановкаКлассовКонтрагентовОценки.УсловиеОплатыВручную
	|			ТОГДА УстановкаКлассовКонтрагентовОценки.УсловиеОплаты
	|		ИНАЧЕ МатрицаРекомендуемыхУсловий.УсловиеОплаты
	|	КОНЕЦ КАК УсловиеОплаты,
	|	УстановкаКлассовКонтрагентовОценки.УсловиеОплатыВручную,
	|	ВЫБОР
	|		КОГДА УстановкаКлассовКонтрагентовОценки.ЗадолженностьВручную
	|			ТОГДА УстановкаКлассовКонтрагентовОценки.Задолженность
	|		ИНАЧЕ МатрицаРекомендуемыхУсловий.ДопустимыйУровеньЗадолженности
	|	КОНЕЦ КАК Задолженность,
	|	УстановкаКлассовКонтрагентовОценки.ЗадолженностьВручную,
	|	УстановкаКлассовКонтрагентовОценки.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.УстановкаКлассовКонтрагентов.Оценки КАК УстановкаКлассовКонтрагентовОценки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МатрицаРекомендуемыхУсловий КАК МатрицаРекомендуемыхУсловий
	|		ПО (МатрицаРекомендуемыхУсловий.РольКонтрагента = ЗНАЧЕНИЕ(Перечисление.РолиКонтрагентов.Покупатели))
	|			И УстановкаКлассовКонтрагентовОценки.СтепеньРиска = МатрицаРекомендуемыхУсловий.СтепеньРиска
	|			И УстановкаКлассовКонтрагентовОценки.СтепеньДоходности = МатрицаРекомендуемыхУсловий.СтепеньДоходности
	|ГДЕ
	|	УстановкаКлассовКонтрагентовОценки.Ссылка.РольКонтрагента = ЗНАЧЕНИЕ(Перечисление.РолиКонтрагентов.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|ИТОГИ ПО
	|	Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.РольКонтрагента = Перечисления.РолиКонтрагентов.Покупатели;
		Объект.Оценки.Очистить();
		ВыборкаДетальныеЗаписи = Выборка.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(Объект.Оценки.Добавить(), ВыборкаДетальныеЗаписи);
		КонецЦикла;
		
		Если Объект.Проведен Тогда
			РежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			РежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект,,,РежимЗаписи);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСлужебныеРеквизитыУсловийОплаты() Экспорт
	
	Выборка = Справочники.УсловияОплаты.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Объект.ПроцентАванса = 0;
		Объект.СрокОтсрочки = 0;
		Объект.СрокАванса = 0;
		Объект.СрокОтсрочкиПриведенный = 0;
		Объект.СрокАвансаПриведенный = 0;
		
		Для Каждого ТекСтрока Из Объект.ЭтапыОплаты Цикл
			
			Если ТекСтрока.ВариантОплаты = Перечисления.ВариантыОплаты.Аванс Тогда
				
				Объект.ПроцентАванса = Объект.ПроцентАванса + ТекСтрока.ПроцентОплаты;
				Объект.СрокАванса = Макс(Объект.СрокАванса, ТекСтрока.Срок);
				ТекСрокАвансаПриведенный = ТекСтрока.Срок * ?(ТекСтрока.ТипСрока = Перечисления.СпособыРасчетаКоличестваДнейВПериоде.ПоКалендарнымДням, 5/7, 1);
				Объект.СрокАвансаПриведенный = Макс(Объект.СрокАвансаПриведенный, ТекСрокАвансаПриведенный);
				
			ИначеЕсли ТекСтрока.ВариантОплаты = Перечисления.ВариантыОплаты.Постоплата Тогда
				
				Объект.СрокОтсрочки = Макс(Объект.СрокОтсрочки, ТекСтрока.Срок);
				ТекСрокОтсрочкиПриведенный = ТекСтрока.Срок * ?(ТекСтрока.ТипСрока = Перечисления.СпособыРасчетаКоличестваДнейВПериоде.ПоКалендарнымДням, 5/7, 1);
				Объект.СрокОтсрочкиПриведенный = Макс(Объект.СрокОтсрочкиПриведенный, ТекСрокОтсрочкиПриведенный);
				
			КонецЕсли;
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура ЗаполнитьФиксированныеСчетаУчетаПоДокументам() Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	т.СчетУчетаОбщейСебестоимости КАК СчетУчетаОбщейСебестоимости,
	|	т.СчетУчетаСебестоимостиПоСтатьям КАК СчетУчетаСебестоимостиПоСтатьям,
	|	т.СчетУчетаИзмененияОценкиЗапасов КАК СчетУчетаИзмененияОценкиЗапасов,
	|	т.СчетУчетаРеклассаЗатратВОПУ КАК СчетУчетаРеклассаЗатратВОПУ
	|ПОМЕСТИТЬ РеформацияСебстоимости
	|ИЗ
	|	Документ.РеформацияСебестоимости КАК т
	|ГДЕ
	|	т.Проведен
	|	И т.СчетУчетаОбщейСебестоимости <> ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)
	|	И т.СчетУчетаСебестоимостиПоСтатьям <> ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)
	|	И т.СчетУчетаИзмененияОценкиЗапасов <> ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)
	|	И т.СчетУчетаРеклассаЗатратВОПУ <> ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	т.ПериодОтчета.ДатаНачала УБЫВ,
	|	т.ПериодОтчета.ДатаОкончания УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	т.СчетУчетаТекущегоФинансовогоРезультата КАК СчетУчетаТекущегоФинансовогоРезультата,
	|	т.СчетУчетаНераспределеннойПрибылиНепокрытогоУбыткаОтчетногоГода КАК СчетУчетаНераспределеннойПрибылиНепокрытогоУбыткаОтчетногоГода,
	|	т.СчетУчетаНераспределеннойПрибылиНепокрытогоУбыткаПрошлыхЛет КАК СчетУчетаНераспределеннойПрибылиНепокрытогоУбыткаПрошлыхЛет
	|ПОМЕСТИТЬ РеформацияБаланса
	|ИЗ
	|	Документ.РеформацияБаланса КАК т
	|ГДЕ
	|	т.Проведен
	|	И т.СчетУчетаТекущегоФинансовогоРезультата <> ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)
	|	И т.СчетУчетаНераспределеннойПрибылиНепокрытогоУбыткаОтчетногоГода <> ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)
	|	И т.СчетУчетаНераспределеннойПрибылиНепокрытогоУбыткаПрошлыхЛет <> ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	т.ПериодОтчета.ДатаНачала УБЫВ,
	|	т.ПериодОтчета.ДатаОкончания УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	т.СчетУчетаУсловногоНалогаНаПрибыль КАК СчетУчетаУсловногоНалогаНаПрибыль,
	|	т.СчетУчетаОтложенногоНалогаПоНСБУ КАК СчетУчетаОтложенногоНалогаПоНСБУ,
	|	т.СчетУчетаОНА КАК СчетУчетаОНА,
	|	т.СчетУчетаОНО КАК СчетУчетаОНО,
	|	т.СчетУчетаНалога КАК СчетУчетаНалога
	|ПОМЕСТИТЬ РеклассОтложенныхНалогов
	|ИЗ
	|	Документ.РеклассОтложенныхНалогов КАК т
	|ГДЕ
	|	т.Проведен
	|	И т.СчетУчетаУсловногоНалогаНаПрибыль <> ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)
	|	И т.СчетУчетаОтложенногоНалогаПоНСБУ <> ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)
	|	И т.СчетУчетаОНА <> ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)
	|	И т.СчетУчетаОНО <> ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)
	|	И т.СчетУчетаНалога <> ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	т.ПериодОтчета.ДатаНачала УБЫВ,
	|	т.ПериодОтчета.ДатаОкончания УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РеклассОтложенныхНалогов.СчетУчетаУсловногоНалогаНаПрибыль КАК УсловныйНалогНаПрибыль,
	|	РеклассОтложенныхНалогов.СчетУчетаОтложенногоНалогаПоНСБУ КАК ОтложенныйНалогПоНСБУ,
	|	РеклассОтложенныхНалогов.СчетУчетаОНА КАК ОтложенныйНалоговыйАктив,
	|	РеклассОтложенныхНалогов.СчетУчетаОНО КАК ОтложенноеНалоговоеОбязательство,
	|	РеклассОтложенныхНалогов.СчетУчетаНалога КАК НалогНаПрибыль,
	|	РеформацияБаланса.СчетУчетаТекущегоФинансовогоРезультата КАК ТекущийФинансовыйРезультат,
	|	РеформацияБаланса.СчетУчетаНераспределеннойПрибылиНепокрытогоУбыткаОтчетногоГода КАК НераспределеннаяПрибыльНепокрытыйУбытокОтчетногоПериода,
	|	РеформацияБаланса.СчетУчетаНераспределеннойПрибылиНепокрытогоУбыткаПрошлыхЛет КАК НераспределеннаяПрибыльНепокрытыйУбытокПредыдущихПериодов,
	|	РеформацияСебстоимости.СчетУчетаОбщейСебестоимости КАК ОбщаяСебестоимость,
	|	РеформацияСебстоимости.СчетУчетаСебестоимостиПоСтатьям КАК СебестоимостьПоСтатьям,
	|	РеформацияСебстоимости.СчетУчетаИзмененияОценкиЗапасов КАК ИзмененияОценкиЗапасов,
	|	РеформацияСебстоимости.СчетУчетаРеклассаЗатратВОПУ КАК РеклассЗатратВОПУ
	|ИЗ
	|	РеформацияСебстоимости КАК РеформацияСебстоимости,
	|	РеформацияБаланса КАК РеформацияБаланса,
	|	РеклассОтложенныхНалогов КАК РеклассОтложенныхНалогов");
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();	
	Если Выборка.Следующий() Тогда
		Для каждого КолонкаЗапроса Из РезультатЗапроса.Колонки Цикл
			
			ФиксСчет = Справочники.ФиксированныеСчетаУчетаБД[КолонкаЗапроса.Имя];
			Если Не ФиксСчет.Счет.Пустая() Тогда
				Продолжить;
			КонецЕсли;
			
			ОбъектФиксСчет = ФиксСчет.ПолучитьОбъект();
			ОбъектФиксСчет.Счет = Выборка[КолонкаЗапроса.Имя];
			ОбновлениеИнформационнойБазыУХ.ЗаписатьОбъект(ОбъектФиксСчет);
		
		КонецЦикла;
	КонецЕсли; 

КонецПроцедуры

Процедура ПеренестиСтавкуДисконтированияВРегистр() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	Проекты.Ссылка КАК Проект,
	|	Проекты.УдалитьСтавкаДисконтирования
	|ИЗ
	|	Справочник.Проекты КАК Проекты
	|ГДЕ
	|	НЕ Проекты.ПометкаУдаления
	|	И Проекты.УдалитьСтавкаДисконтирования <> 0";
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		НаборЗаписей=РегистрыСведений.АтрибутыПроектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Проект.Установить(Результат.Проект);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество()=0 Тогда
			
			НоваяСтрока=НаборЗаписей.Добавить();
			НоваяСтрока.Сценарий				= Справочники.Сценарии.План;
			НоваяСтрока.Проект					= Результат.Проект;
			НоваяСтрока.СтавкаДисконтирования	= Результат.УдалитьСтавкаДисконтирования;
			
			НоваяСтрока=НаборЗаписей.Добавить();
			НоваяСтрока.Сценарий				= Справочники.Сценарии.Факт;
			НоваяСтрока.Проект					= Результат.Проект;
			НоваяСтрока.СтавкаДисконтирования	= Результат.УдалитьСтавкаДисконтирования;
			
		Иначе
			
			Для Каждого Строка ИЗ НаборЗаписей Цикл
				
				Строка.СтавкаДисконтирования=Результат.УдалитьСтавкаДисконтирования;
				
			КонецЦикла;
			
		КонецЕсли;
		
		НаборЗаписей.Записать();
		
	КонецЦикла;	
	
КонецПроцедуры // ПеренестиСтавкуДисконтированияВРегистр 

Процедура ЗакрытьРегистрыБюджетированияПоФакту() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	УправлениеПериодомСценария.Ссылка,
	|	РАЗНОСТЬДАТ(УправлениеПериодомСценария.ПериодСценарияОкончание.ДатаОкончания, УправлениеПериодомСценария.ПериодСценария.ДатаНачала, ДЕНЬ) КАК ДлительностьПериода,
	|	УправлениеПериодомСценария.ПериодСценарияОкончание.ДатаОкончания КАК ОкончаниеПериода
	|ИЗ
	|	Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	|ГДЕ
	|	УправлениеПериодомСценария.Сценарий = ЗНАЧЕНИЕ(Справочник.Сценарии.Факт)
	|	И НЕ УправлениеПериодомСценария.ПометкаУдаления
	|	И УправлениеПериодомСценария.ПериодЗакрыт
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДлительностьПериода,
	|	ОкончаниеПериода";
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		ДокументОбъект=Результат.Ссылка.ПолучитьОбъект();
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
	КонецЦикла;
		
КонецПроцедуры // ЗакрытьРегистрыБюджетированияПоФакту()

Процедура УстановитьРеквизитДопУпорядочиванияПриоритетыПлатежей() Экспорт
	
	Запрос = Новый Запрос;

	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПриоритетыПлатежей.Ссылка
	|ИЗ
	|	Справочник.ПриоритетыПлатежей КАК ПриоритетыПлатежей
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриоритетыПлатежей.РеквизитДопУпорядочивания";

	Выборка = Запрос.Выполнить().Выбрать();

	Сч = 1;

	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.РеквизитДопУпорядочивания = Сч;
		Сч = Сч + 1;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПроставитьНомерАналитикиЭтапаПроекта() Экспорт 
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ГруппыРаскрытия.Ссылка
	|ИЗ
	|	Справочник.ГруппыРаскрытия КАК ГруппыРаскрытия
	|ГДЕ
	|	НЕ ГруппыРаскрытия.ПометкаУдаления
	|	И ГруппыРаскрытия.РазделениеПоПроектам
	|	И ГруппыРаскрытия.АналитикаЭтапПроекта = 0";
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СправочникОбъект=Результат.Ссылка.ПолучитьОбъект();
		
		Для Индекс=1 По 5 Цикл
			
			Если СправочникОбъект["ВидАналитики" + Индекс].ТипЗначения.СодержитТип(Тип("СправочникСсылка.Проекты")) Тогда
				
				СправочникОбъект.АналитикаЭтапПроекта=Индекс;
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если СправочникОбъект.АналитикаЭтапПроекта>0 Тогда
			
			Попытка
				
				СправочникОбъект.ОбменДанными.Загрузка=Истина;	
				СправочникОбъект.Записать();
				
			Исключение
				
				ОбщегоНазначенияУХ.СообщитьОбОшибке("Не удалось установить флаг ""Этап проекта"" для группы аналитическкого раскрытия "+СправочникОбъект.Наименование+" вида отчета "+СправочникОбъект.Владелец+"
				|: "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,,СтатусСообщения.Внимание);
				
			КонецПопытки;
			
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроставитьНомерАналитикиЭтапаПроекта()

Процедура ПеренестиПериодСортировкиИсторииСогласования() Экспорт
	Набор = РегистрыСведений.ИсторияВыполненияПроцессов.СоздатьНаборЗаписей();
	Набор.Прочитать();
	ДатаНачало = Дата(1, 1, 1);
	Для Каждого ТекНабор Из Набор Цикл
		ИнтервалВСекундах = (ТекНабор.УдалитьПериодСортировки - ДатаНачало);
		ТекНабор.ПериодСортировкиМс = ИнтервалВСекундах * 1000;
	КонецЦикла;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
КонецПроцедуры

Процедура ЗаполнитьПолеКонтрагентПлательщикВЗаявках() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"
	|ВЫБРАТЬ
	|	ЗаявкаНаОперацию.Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаОперацию
	|ГДЕ
	|	ЗаявкаНаОперацию.ТипОперацииБюджетирование = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийБюджетирование.ВнутригрупповоеПеремещение)
	|	И ЗаявкаНаОперацию.КонтрагентПлательщик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.КонтрагентПлательщик = УправлениеДенежнымиСредствамиУХ.КонтрагентОрганизации(Объект.Организация);
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьНомерКорректировки(ИмяДокумента)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Таблица.Ссылка,
		|	Таблица.ДокументОснование,
		|	0 КАК ПорядковыйНомерКорректировки
		|ИЗ
		|	Документ." + ИмяДокумента + " КАК Таблица";

	РезультатЗапроса = Запрос.Выполнить();

	ПодсчетИерархии = РезультатЗапроса.Выгрузить();

	КоличествоИтераций = ПодсчетИерархии.Количество() - 1;
	ПустоеЗначение = Документы[ИмяДокумента].ПустаяСсылка();

	Для СчетчикИтераций = 0 По КоличествоИтераций Цикл
		
		ЕстьПодчиненные = Ложь;
		
		Для СчетчикОсновной = 0 По КоличествоИтераций Цикл
			
			Если ПодсчетИерархии[СчетчикОсновной].ДокументОснование = ПустоеЗначение Тогда
				Продолжить;
			КонецЕсли;
			ЕстьПодчиненные = Истина;
			
			СтрокаСсылки = ПодсчетИерархии.Найти(ПодсчетИерархии[СчетчикОсновной].ДокументОснование, "Ссылка");
			Если СтрокаСсылки.ДокументОснование = ПустоеЗначение Тогда
				ПодсчетИерархии[СчетчикОсновной].ПорядковыйНомерКорректировки = СтрокаСсылки.ПорядковыйНомерКорректировки + 1;
				ПодсчетИерархии[СчетчикОсновной].ДокументОснование = ПустоеЗначение;
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ЕстьПодчиненные Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;

	Для каждого Стр Из ПодсчетИерархии Цикл
		Если Стр.ПорядковыйНомерКорректировки = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Объект = Стр.Ссылка.ПолучитьОбъект();
		Объект.ПорядковыйНомерКорректировки = Стр.ПорядковыйНомерКорректировки;
		ЗаписатьОбъект(Объект);
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьНомераКорректировокВСправкахВалютногоКонтроля() Экспорт
	ОбновитьНомерКорректировки("СправкаОВалютныхОперациях");
	ОбновитьНомерКорректировки("СправкаОПодтверждающихДокументах");
КонецПроцедуры

Процедура ПеренестиВерсииХранимыхФайловВПрисоединенныеФайлы() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ВерсииХранимыхФайлов.Владелец,
	|	ВерсииХранимыхФайлов.ДатаИзмененияФайла,
	|	ВерсииХранимыхФайлов.ХранилищеФайла,
	|	ВерсииХранимыхФайлов.КомментарийКВерсии,
	|	ВерсииХранимыхФайлов.ДатаВерсии,
	|	ВерсииХранимыхФайлов.АвторВерсии,
	|	ВерсииХранимыхФайлов.Владелец.РасширениеФайла КАК РасширениеФайла,
	|	ВерсииХранимыхФайлов.Владелец.Наименование КАК Наименование,
	|	ВерсииХранимыхФайлов.Ссылка
	|ИЗ
	|	Справочник.УдалитьВерсииХранимыхФайлов КАК ВерсииХранимыхФайлов
	|ГДЕ
	|	НЕ ВерсииХранимыхФайлов.Владелец.ПометкаУдаления";
	
	Результат=Запрос.Выполнить().Выбрать();
		
	Пока Результат.Следующий() Цикл
		
		НаименованиеБезРасширения=СтрЗаменить(Результат.Наименование,"."+Результат.РасширениеФайла,"");
		
		ПрисоединенныйФайл = Справочники.ХранимыеФайлыОрганизацийПрисоединенныеФайлы.СоздатьЭлемент();
		
		НоваяСсылкаНаФайл=Справочники.ХранимыеФайлыОрганизацийПрисоединенныеФайлы.ПолучитьСсылку();
		ПрисоединенныйФайл.УстановитьСсылкуНового(НоваяСсылкаНаФайл);
		
		ДвоичныеДанные  = Результат.ХранилищеФайла.Получить();
		
		ПрисоединенныйФайл.ВладелецФайла                = Результат.Владелец;
		ПрисоединенныйФайл.ДатаМодификацииУниверсальная = Результат.ДатаИзмененияФайла;
		ПрисоединенныйФайл.ДатаСоздания                 = Результат.ДатаВерсии;
		ПрисоединенныйФайл.Описание                     = Результат.КомментарийКВерсии;
		ПрисоединенныйФайл.ПодписанЭП                   = Ложь;
		ПрисоединенныйФайл.Наименование                 = НаименованиеБезРасширения;
		ПрисоединенныйФайл.Расширение                   = Результат.РасширениеФайла;
		ПрисоединенныйФайл.ТипХраненияФайла             = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
		ПрисоединенныйФайл.Размер                       = ДвоичныеДанные.Размер();
		
		СвояТранзакцияОткрыта = Ложь;
		
		Попытка
			
			НачатьТранзакцию();
			СвояТранзакцияОткрыта = Истина;
			РаботаСФайламиСлужебный.ЗаписатьФайлВИнформационнуюБазу(НоваяСсылкаНаФайл, ДвоичныеДанные);
			ПрисоединенныйФайл.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
			ПрисоединенныйФайл.ПутьКФайлу = "";
			
			СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
			ИзвлеченныйТекст = "";
			
			
			СтатусИзвлеченияТекста = РаботаСФайламиСлужебный.ИзвлечьТекст(
			ДвоичныеДанные, ПрисоединенныйФайл.Расширение, ИзвлеченныйТекст);
			
			ПрисоединенныйФайл.СтатусИзвлеченияТекста = СтатусИзвлеченияТекста;
			ПрисоединенныйФайл.ТекстХранилище = Новый ХранилищеЗначения(ИзвлеченныйТекст);
			ПрисоединенныйФайл.Автор = Результат.АвторВерсии;
			ПрисоединенныйФайл.Заполнить(Неопределено);
			
			ПрисоединенныйФайл.Записать();
			
			ЗапросСправочник=Новый Запрос;
			ЗапросСправочник.УстановитьПараметр("ВерсияХранимогоФайла",Результат.Ссылка);
			
			#Область ОписаниеВерсий
			
			ЗапросСправочник.Текст="ВЫБРАТЬ
			|	ОписаниеВерсий.Ссылка
			|ИЗ
			|	Справочник.ОписаниеВерсий КАК ОписаниеВерсий
			|ГДЕ
			|	ОписаниеВерсий.ВерсияХранимогоФайла = &ВерсияХранимогоФайла";
						
			РезультатСправочник=ЗапросСправочник.Выполнить().Выбрать();
			
			Пока РезультатСправочник.Следующий() Цикл
				
				СправочникОбъект=РезультатСправочник.Ссылка.ПолучитьОбъект();
				СправочникОбъект.ВерсияХранимогоФайла=ПрисоединенныйФайл.Ссылка;
				СправочникОбъект.УдалитьВерсияХранимогоФайла=Результат.Ссылка;
				СправочникОбъект.ОбменДанными.Загрузка=Истина;
				СправочникОбъект.Записать();
				
			КонецЦикла;
			
			#КонецОбласти
			
			#Область ПротоколируемыеСобытия
			
			ЗапросСправочник.Текст="ВЫБРАТЬ
			|	ПротоколируемыеСобытия.Ссылка
			|ИЗ
			|	Справочник.ПротоколируемыеСобытия КАК ПротоколируемыеСобытия
			|ГДЕ
			|	ПротоколируемыеСобытия.ФайлИмпорта = &ВерсияХранимогоФайла";
			
			РезультатСправочник=ЗапросСправочник.Выполнить().Выбрать();
			
			Пока РезультатСправочник.Следующий() Цикл
				
				СправочникОбъект						= РезультатСправочник.Ссылка.ПолучитьОбъект();
				СправочникОбъект.ФайлИмпорта			= ПрисоединенныйФайл.Ссылка;
				СправочникОбъект.УдалитьФайлИмпорта		= Результат.Ссылка;
				СправочникОбъект.ОбменДанными.Загрузка	= Истина;
				СправочникОбъект.Записать();
				
			КонецЦикла;
		
			#КонецОбласти
			
			#Область ЖурналПротоколируемыхСобытий
			
			НаборЗаписей=РегистрыСведений.ЖурналПротоколируемыхСобытий.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВерсияХранимогоФайла.Установить(Результат.Ссылка);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				
				ТаблицаНабора = НаборЗаписей.Выгрузить();
				НаборЗаписей.Очистить();	
				НаборЗаписей.ОбменДанными.Загрузка = Истина;	
				НаборЗаписей.Записать();
				
				НаборЗаписей.Отбор.ВерсияХранимогоФайла.Установить(ПрисоединенныйФайл.Ссылка);
				
				Для Каждого Строка ИЗ ТаблицаНабора Цикл
					
					Строка.ВерсияХранимогоФайла=ПрисоединенныйФайл.Ссылка;
					Строка.УдалитьВерсияХранимогоФайла=Результат.Ссылка;
					
				КонецЦикла;
				
				НаборЗаписей.Загрузить(ТаблицаНабора);
				НаборЗаписей.Записать();
				
			КонецЕсли;

					
			#КонецОбласти
			
			#Область ОбъектыХранимыхФайлов
			
			НаборЗаписей=РегистрыСведений.ОбъектыХранимыхФайлов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВерсияХранимогоФайла.Установить(Результат.Ссылка);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				
				ТаблицаНабора = НаборЗаписей.Выгрузить();
				НаборЗаписей.Очистить();	
				НаборЗаписей.ОбменДанными.Загрузка = Истина;	
				НаборЗаписей.Записать();
				
				НаборЗаписей.Отбор.ВерсияХранимогоФайла.Установить(ПрисоединенныйФайл.Ссылка);
				
				Для Каждого Строка ИЗ ТаблицаНабора Цикл
					
					Строка.ВерсияХранимогоФайла=ПрисоединенныйФайл.Ссылка;
					Строка.УдалитьВерсияХранимогоФайла=Результат.Ссылка;
					
				КонецЦикла;
				
				НаборЗаписей.Загрузить(ТаблицаНабора);
				НаборЗаписей.Записать();
				
			КонецЕсли;
					
			#КонецОбласти
			
			#Область ПротоколыОбъектов
			
			// Измерение "ВерсияХранимогоФайла"
			
			НаборЗаписей=РегистрыСведений.ПротоколыОбъектов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВерсияХранимогоФайла.Установить(Результат.Ссылка);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				
				ТаблицаНабора = НаборЗаписей.Выгрузить();
				НаборЗаписей.Очистить();	
				НаборЗаписей.ОбменДанными.Загрузка = Истина;	
				НаборЗаписей.Записать();
				
				НаборЗаписей.Отбор.ВерсияХранимогоФайла.Установить(ПрисоединенныйФайл.Ссылка);
				
				Для Каждого Строка ИЗ ТаблицаНабора Цикл
					
					Строка.ВерсияХранимогоФайла=ПрисоединенныйФайл.Ссылка;
					Строка.УдалитьВерсияХранимогоФайла=Результат.Ссылка;
					
				КонецЦикла;
				
				НаборЗаписей.Загрузить(ТаблицаНабора);
				НаборЗаписей.Записать();
				
			КонецЕсли;
			
			//////////////////////////////////////////////////////////////
			// Измерение "Объект"
			
			НаборЗаписей=РегистрыСведений.ПротоколыОбъектов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Объект.Установить(Результат.Ссылка);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 Тогда
				
				ТаблицаНабора = НаборЗаписей.Выгрузить();
				НаборЗаписей.Очистить();	
				НаборЗаписей.ОбменДанными.Загрузка = Истина;	
				НаборЗаписей.Записать();
				
				НаборЗаписей.Отбор.Объект.Установить(ПрисоединенныйФайл.Ссылка);
				
				Для Каждого Строка ИЗ ТаблицаНабора Цикл
					
					Строка.Объект=ПрисоединенныйФайл.Ссылка;
					
				КонецЦикла;
				
				НаборЗаписей.Загрузить(ТаблицаНабора);
				НаборЗаписей.Записать();
				
			КонецЕсли;		
								
			#КонецОбласти

			
			Если СвояТранзакцияОткрыта Тогда
				ЗафиксироватьТранзакцию();
			КонецЕсли;
			
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			Если СвояТранзакцияОткрыта Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			
			ШаблонСообщения = НСтр("ru = 'Ошибка при переносе версии хранимого файла ""%1"":
			|%2'");
			КомментарийЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			НаименованиеБезРасширения + "." + Результат.РасширениеФайла,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(КомментарийЖурналаРегистрации,,,СтатусСообщения.Внимание);
			
		КонецПопытки;	
		
	КонецЦикла;	
	
КонецПроцедуры // ПеренестиВерсииХранимыхФайловВПрисоединенныеФайлы()

Процедура ВыставитьКатегорииЭтаповПодготовкиОтчетности() Экспорт
	КатегорияОповещениеЭтапа				 = Справочники.КатегорииСобытийОповещений.ОповещенияЭтапаПроцесса;
	КатегорияПроцессПодготовкиОтчетности	 = Справочники.КатегорииСобытийОповещений.СобытияПроцессаПодготовкиОтчетности;
	// Требуется заполнить отчет.
	ВидСобытияСсылка = Справочники.ВидыСобытийОповещений.ТребуетсяЗаполнитьОтчетыПоЭтапу;
	ВидСобытияОбъект = ВидСобытияСсылка.ПолучитьОбъект();
	КатегорияСобытия = ВидСобытияОбъект.КатегорияСобытия;
	Если (НЕ ЗначениеЗаполнено(КатегорияСобытия)) ИЛИ (КатегорияСобытия = КатегорияОповещениеЭтапа) Тогда
		ВидСобытияОбъект.КатегорияСобытия = КатегорияПроцессПодготовкиОтчетности;  
		ВидСобытияОбъект.Записать();
	Иначе
		// Не изменяем категорию.
	КонецЕсли;
	// Этап процесса переведен в статус Выполняется.
	ВидСобытияСсылка = Справочники.ВидыСобытийОповещений.ЭтапПроцессаПереведенВСтатусВыполняется;
	ВидСобытияОбъект = ВидСобытияСсылка.ПолучитьОбъект();
	КатегорияСобытия = ВидСобытияОбъект.КатегорияСобытия;
	Если (НЕ ЗначениеЗаполнено(КатегорияСобытия)) ИЛИ (КатегорияСобытия = КатегорияОповещениеЭтапа) Тогда
		ВидСобытияОбъект.КатегорияСобытия = КатегорияПроцессПодготовкиОтчетности;  
		ВидСобытияОбъект.Записать();
	Иначе
		// Не изменяем категорию.
	КонецЕсли;      
	// Этап процесса переведен в статус Утвержден.
	ВидСобытияСсылка = Справочники.ВидыСобытийОповещений.ЭтапПроцессаПереведенВСтатусУтвержден;
	ВидСобытияОбъект = ВидСобытияСсылка.ПолучитьОбъект();
	КатегорияСобытия = ВидСобытияОбъект.КатегорияСобытия;
	Если (НЕ ЗначениеЗаполнено(КатегорияСобытия)) ИЛИ (КатегорияСобытия = КатегорияОповещениеЭтапа) Тогда
		ВидСобытияОбъект.КатегорияСобытия = КатегорияПроцессПодготовкиОтчетности;  
		ВидСобытияОбъект.Записать();
	Иначе
		// Не изменяем категорию.
	КонецЕсли;
КонецПроцедуры

Процедура ПеренестиРасшифровкиОбъектомКонфигурации() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ПроизвольныеОтчетыУдалитьРасшифровкиОбъектомИнформационнойБазы.Ссылка
		|ПОМЕСТИТЬ ВТ_ОтчетыСРасшифровками
		|ИЗ
		|	Справочник.ПроизвольныеОтчеты.УдалитьРасшифровкиОбъектомИнформационнойБазы КАК ПроизвольныеОтчетыУдалитьРасшифровкиОбъектомИнформационнойБазы
		|ГДЕ
		|	НЕ ПроизвольныеОтчетыУдалитьРасшифровкиОбъектомИнформационнойБазы.Ссылка.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РасшифровкиАналитическихОтчетов.Владелец
		|ПОМЕСТИТЬ ВТ_НезависимыеРасшифровкиОтчетов
		|ИЗ
		|	Справочник.РасшифровкиАналитическихОтчетов КАК РасшифровкиАналитическихОтчетов
		|ГДЕ
		|	НЕ РасшифровкиАналитическихОтчетов.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ОтчетыСРасшифровками.Ссылка,
		|	ВТ_ОтчетыСРасшифровками.Ссылка.Наименование КАК Наименование
		|ИЗ
		|	ВТ_ОтчетыСРасшифровками КАК ВТ_ОтчетыСРасшифровками
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НезависимыеРасшифровкиОтчетов КАК ВТ_НезависимыеРасшифровкиОтчетов
		|		ПО ВТ_ОтчетыСРасшифровками.Ссылка = ВТ_НезависимыеРасшифровкиОтчетов.Владелец
		|ГДЕ
		|	ВЫБОР
		|			КОГДА ВТ_НезависимыеРасшифровкиОтчетов.Владелец ЕСТЬ NULL
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекОтчет = ВыборкаДетальныеЗаписи.Ссылка;
		Если ТипЗнч(ТекОтчет) = Тип("СправочникСсылка.ПроизвольныеОтчеты") Тогда
			ОбъектОтчет = ТекОтчет.ПолучитьОбъект();
			ВыгрузкаРасшифровки = ОбъектОтчет.УдалитьРасшифровкиОбъектомИнформационнойБазы.Выгрузить();
			ВыгрузкаПараметры = ОбъектОтчет.УдалитьПараметрыРасшифровкиОбъектом.Выгрузить();
			ТекНаименование = ВыборкаДетальныеЗаписи.Наименование;
			БизнесАнализСерверУХ.ЗаписатьРасшифровкуОбъектом(ТекОтчет, ВыгрузкаРасшифровки, ВыгрузкаПараметры, ТекНаименование);
		Иначе
			Продолжить;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьТЧТехническихСчетовШаблоновСверкиВГО() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ШаблоныСверкиВГО.Ссылка
		|ИЗ
		|	Справочник.ШаблоныСверкиВГО КАК ШаблоныСверкиВГО";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Объект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Объект.ЗаполнитьТаблицуТехСчетовПоРеквизитамОбъекта();
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьСвойстваКолонокБланковСТ() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	НастройкиСтруктурыБланка.Ссылка
	|ИЗ
	|	Справочник.НастройкиСтруктурыБланка КАК НастройкиСтруктурыБланка
	|ГДЕ
	|	 НастройкиСтруктурыБланка.ИндексЭлемента = 10";
		
	Рез = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Стр Из Рез Цикл
		нОбъект = Стр.Ссылка.ПолучитьОбъект();
		Если  нОбъект.КолонкиОтчетов.Количество() = 0 Тогда	
			нКол =  нОбъект.КолонкиОтчетов.Добавить();
			нКол.Колонка 		= нОбъект.КолонкаОтчета;
			нКол.КодПоказателя  = "["+СокрЛП(нОбъект.КолонкаОтчета.Владелец)+"] "+СокрЛП(нОбъект.КолонкаОтчета.Код);				
		КонецЕсли;	
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(нОбъект);

	КонецЦикла;	 

КонецПроцедуры

Процедура СоздатьСеансыОбменаДанными() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбработанныеОбъектыБД.УдалитьОбъектБД КАК ОбъектБД,
	|	ОбработанныеОбъектыБД.УдалитьОрганизация КАК Организация,
	|	ОбработанныеОбъектыБД.УдалитьПериодОтчета КАК ПериодОтчета,
	|	ОбработанныеОбъектыБД.УдалитьСценарий КАК Сценарий,
	|	ОбработанныеОбъектыБД.УдалитьПравилоЗаполнения КАК ПравилоЗаполнения,
	|	ОбработанныеОбъектыБД.УдалитьИспользуемаяИБ КАК ИспользуемаяИБ,
	|	ОбработанныеОбъектыБД.УдалитьОбластьГенерации КАК ОбластьГенерации
	|ИЗ
	|	РегистрСведений.ОбработанныеОбъектыБД КАК ОбработанныеОбъектыБД
	|ГДЕ
	|	ОбработанныеОбъектыБД.СеансОбменаДанными = ЗНАЧЕНИЕ(Справочник.СеансыОбменаДанными.ПустаяСсылка)";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		НовыйСеанс = Справочники.СеансыОбменаДанными.СоздатьЭлемент();
		ЗаполнитьЗначенияСвойств(НовыйСеанс, Выборка);
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(НовыйСеанс);
		
		НаборЗаписейРегистра = РегистрыСведений.ОбработанныеОбъектыБД.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Отбор.УдалитьОбъектБД.Установить(Выборка.ОбъектБД);
		НаборЗаписейРегистра.Отбор.УдалитьОрганизация.Установить(Выборка.Организация);
		НаборЗаписейРегистра.Отбор.УдалитьПериодОтчета.Установить(Выборка.ПериодОтчета);
		НаборЗаписейРегистра.Отбор.УдалитьСценарий.Установить(Выборка.Сценарий);
		НаборЗаписейРегистра.Отбор.УдалитьПравилоЗаполнения.Установить(Выборка.ПравилоЗаполнения);
		НаборЗаписейРегистра.Отбор.УдалитьИспользуемаяИБ.Установить(Выборка.ИспользуемаяИБ);
		НаборЗаписейРегистра.Отбор.УдалитьОбластьГенерации.Установить(Выборка.ОбластьГенерации);	
		
		НаборЗаписейРегистра.Прочитать();
		
		Для Каждого ТекЗапись из НаборЗаписейРегистра Цикл
			ТекЗапись.СеансОбменаДанными = НовыйСеанс.Ссылка;	
		КонецЦикла;	
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписейРегистра);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьПрофилиПользователейБП() Экспорт
	Профиль1 = Неопределено;
	Профиль2 = Неопределено;
	Выборка = Справочники.ПрофилиГруппДоступа.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Строка(Выборка.ИдентификаторПоставляемыхДанных) = "ea55b08d-7d30-11e0-b9a7-20cf30c960bf" Тогда
			Профиль1 = Выборка.Ссылка;
		КонецЕсли;
		Если Строка(Выборка.ИдентификаторПоставляемыхДанных) = "62730c03-81d6-11e0-a42a-be487808c52b" Тогда
			Профиль2 = Выборка.Ссылка;
		КонецЕсли;
		Если Профиль1 <> Неопределено И Профиль2 <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Профили = Новый Массив;
	Если Профиль1 <> Неопределено Тогда
		Профили.Добавить(Профиль1);
	КонецЕсли;
	Если Профиль2 <> Неопределено Тогда
		Профили.Добавить(Профиль2);
	КонецЕсли;
	Если Профили.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыДоступаПользователи.Пользователь
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|ГДЕ
		|	ГруппыДоступаПользователи.Ссылка.Профиль В(&Профили)";
	
	Запрос.УстановитьПараметр("Профили", Профили);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МассивПользователей = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Пользователь");
	
	УправлениеДоступом.ОбновитьРолиПользователей(МассивПользователей, Неопределено);
	
КонецПроцедуры

Процедура УстановитьКонстантуПериодХраненияСобытий() Экспорт
	КонстантаМенеджер = Константы.ПериодХраненияСобытий.СоздатьМенеджерЗначения();
	КонстантаМенеджер.Значение = 30;
	КонстантаМенеджер.Записать();
КонецПроцедуры

Процедура УстановитьИспользованиеЦентрализованныхЗакупок() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК Поле1
		|ИЗ
		|	Документ.ОперативныйПлан КАК ОперативныйПлан
		|ГДЕ
		|	ОперативныйПлан.ТипОперацииБюджетирование = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийБюджетирование.ПланированиеЗакупок)";
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Константы.ИспользоватьЦентрализованноеУправлениеЗакупками.Установить(Истина);
	КонецЕсли;
КонецПроцедуры

Процедура УбратьРеквизитШаблонРучныхКорректировок() Экспорт
	НайденныйЭлементСправочника = Справочники.ДокументыБД.НайтиПоНаименованию("РучныеКорректировки", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	Если ЗначениеЗаполнено(НайденныйЭлементСправочника) Тогда
		Если СокрЛП(НайденныйЭлементСправочника.РеквизитШаблонаДокумета) = "ШаблонРучнойОперации" Тогда
			СправочникОбъект = НайденныйЭлементСправочника.ПолучитьОбъект();
			СправочникОбъект.РеквизитШаблонаДокумета = "";
			СправочникОбъект.ИспользоватьШаблоны = Ложь;
			СправочникОбъект.Записать();
		Иначе
			// Устаревшего значения нет. Ничего не делаем.
		КонецЕсли;
	Иначе
		// Элемент РучныеКорректировки справочника Документы БД не найден. Ничего не делаем.
	КонецЕсли;
КонецПроцедуры

Процедура ЗаполнитьКонстантуСуперпользователя() Экспорт
	Попытка
		ИмяСуперпользователя = "Справочник.РолиКонтактныхЛиц.Суперпользователь";
		Константы.РольСуперПользователь.Установить(
			ПредопределенноеЗначение(ИмяСуперпользователя));
		//Справочники.РолиКонтактныхЛиц.Суперпользователь);
	Исключение
		ТекстСообщения = НСтр("ru = 'Во время обновления константы РольСуперПользователь произошла ошибка.'");
		ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Возможно была попытка обновления конфигурации на более старший релиз.'");
		ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("ru = 'Необходимо задать константу вручную'");
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
	КонецПопытки;
КонецПроцедуры

Процедура УстановитьВариантМасштабаАвто() Экспорт
	
	ПользователиИБ = ПользователиИнформационнойБазы.ПолучитьПользователей();
	
	Для Каждого ТекПользовательИБ Из ПользователиИБ Цикл
		
		ИмяПользователя = ТекПользовательИБ.Имя;
		Настройки = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения",,,ИмяПользователя);

		Если НЕ ТипЗнч(Настройки) = Тип("НастройкиКлиентскогоПриложения") Тогда
			// Точно не установлен Компактный режим.
			Продолжить;
		КонецЕсли;
		
		Если Настройки.ВариантМасштабаФормКлиентскогоПриложения <> ВариантМасштабаФормКлиентскогоПриложения.Авто Тогда
			
			Настройки.ВариантМасштабаФормКлиентскогоПриложения = ВариантМасштабаФормКлиентскогоПриложения.Авто;
			ХранилищеСистемныхНастроек.Сохранить("Общее/НастройкиКлиентскогоПриложения",, Настройки,,ИмяПользователя);
			
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьПризнакУправлениеХолдингом() Экспорт
	
	ЭтоУХ = ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом();
	Константы.ЭтоУправлениеХолдингом.Установить(ЭтоУХ);
	
КонецПроцедуры

Процедура УстановитьПризнакИспользованияИнтеграцииСВнешнимиСистемами() Экспорт
	
	ЭтоУХ = ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом();
	Константы.ИспользоватьИнтеграциюСВнешнимиСистемамиУХ.Установить(ЭтоУХ);
	
КонецПроцедуры

Процедура СнятьПометкуУдаленияСБывшегоПредопределенногоЭлемента() Экспорт
	
	РольСуперпользователь = Константы.РольСуперПользователь.Получить();
	Если НЕ ЗначениеЗаполнено(РольСуперпользователь) Тогда
		Возврат;
	КонецЕсли;
	СпрОбъект = РольСуперпользователь.ПолучитьОбъект();
	Если НЕ СпрОбъект.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	СпрОбъект.ПометкаУдаления = Ложь;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СпрОбъект);
	
КонецПроцедуры

Процедура УбратьПутьОбъектВНА() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса КАК ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса
	|ГДЕ
	|	ИсточникиДанныхДляРасчетовПравилаИспользованияПолейЗапроса.Поле ПОДОБНО &ИмяРеквизита
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетовТаблицаПараметровОтбораБД.Ссылка
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов.ТаблицаПараметровОтбораБД КАК ИсточникиДанныхДляРасчетовТаблицаПараметровОтбораБД
	|ГДЕ
	|	ИсточникиДанныхДляРасчетовТаблицаПараметровОтбораБД.ПолеБД ПОДОБНО &ИмяРеквизита
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.Ссылка
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.ТекстОтбора ПОДОБНО &ИмяРеквизита";
	
	Запрос.УстановитьПараметр("ИмяРеквизита","%.ОбъектВНА%");
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		СправочникОбъект=Результат.Ссылка.ПолучитьОбъект();
		СправочникОбъект.ТекстОтбора=СтрЗаменить(СправочникОбъект.ТекстОтбора,".ОбъектВНА","");
		
		Для Каждого Строка ИЗ СправочникОбъект.ПравилаИспользованияПолейЗапроса Цикл
			
			Если СтрНайти(Строка.Поле,".ОбъектВНА")=0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Строка.Поле=СтрЗаменить(Строка.Поле,".ОбъектВНА","");
			
		КонецЦикла;
		
		Для Каждого Строка ИЗ СправочникОбъект.ТаблицаПараметровОтбораБД Цикл
			
			Если СтрНайти(Строка.ПолеБД,".ОбъектВНА")=0 Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			Строка.ПолеБД=СтрЗаменить(Строка.ПолеБД,".ОбъектВНА","");
			
		КонецЦикла;
		
		СправочникОбъект.ОбменДанными.Загрузка=Истина;
		
		Попытка
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
			
		Исключение
			
			ТекстОшибки="Не удалось обновить источник данных "+СправочникОбъект+" правила "+СправочникОбъект.НазначениеРасчетов;
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки,,,СтатусСообщения.Внимание);
			
		КонецПопытки;
		
	КонецЦикла;	
	
КонецПроцедуры // УбратьПутьОбъектВНА() 

Процедура ЗаполнитьРеквизитыОбъектовВНА() Экспорт
	
	Запрос = Новый Запрос;

	Запрос.Текст = "ВЫБРАТЬ
	               |	ОсновныеСредства.Ссылка КАК Ссылка,
	               |	ОсновныеСредства.УдалитьОбъектВНА.КадастровыйНомер КАК КадастровыйНомер,
	               |	ОсновныеСредства.УдалитьОбъектВНА.КадастроваяСтоимость КАК КадастроваяСтоимость,
	               |	ОсновныеСредства.УдалитьОбъектВНА.ОбщаяПлощадь КАК ОбщаяПлощадь,
	               |	ОсновныеСредства.УдалитьОбъектВНА.Этажность КАК Этажность,
	               |	ОсновныеСредства.УдалитьОбъектВНА.ПраваСобственности КАК ПраваСобственности,
	               |	ОсновныеСредства.УдалитьОбъектВНА.НазначениеВНА КАК НазначениеВНА,
	               |	ОсновныеСредства.УдалитьОбъектВНА.Страхование.(
	               |		Договор КАК Договор,
	               |		Комментарий КАК Комментарий
	               |	) КАК Страхование,
	               |	ОсновныеСредства.УдалитьОбъектВНА.РемонтныйЦикл.(
	               |		ВидРемонта КАК ВидРемонта,
	               |		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |		ИнтервалНаработки КАК ИнтервалНаработки,
	               |		ДатаПоследнегоРемонта КАК ДатаПоследнегоРемонта,
	               |		ДатаСледующегоРемонта КАК ДатаСледующегоРемонта
	               |	) КАК РемонтныйЦикл,
	               |	ОсновныеСредства.УдалитьОбъектВНА.ПервоначальныйИнвентарныйНомерМСФО КАК ПервоначальныйИнвентарныйНомерМСФО,
	               |	ОсновныеСредства.УдалитьОбъектВНА.ИнвентарныйНомерМСФО КАК ИнвентарныйНомерМСФО
	               |ИЗ
	               |	Справочник.ОсновныеСредства КАК ОсновныеСредства
	               |ГДЕ
	               |	ОсновныеСредства.УдалитьОбъектВНА <> ЗНАЧЕНИЕ(Справочник.УдалитьВнеоборотныеАктивы.ПустаяСсылка)
	               |	И ОсновныеСредства.НазначениеВНА = ЗНАЧЕНИЕ(Справочник.НазначенияВНА.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	НематериальныеАктивы.Ссылка КАК Ссылка,
	               |	НематериальныеАктивы.УдалитьОбъектВНА.НазначениеВНА КАК НазначениеВНА,
	               |	НематериальныеАктивы.УдалитьОбъектВНА.ПраваСобственности КАК ПраваСобственности,
	               |	НематериальныеАктивы.УдалитьОбъектВНА.Страхование.(
	               |		Договор КАК Договор,
	               |		Комментарий КАК Комментарий
	               |	) КАК Страхование,
	               |	НематериальныеАктивы.УдалитьОбъектВНА.ПервоначальныйИнвентарныйНомерМСФО КАК ПервоначальныйИнвентарныйНомерМСФО,
	               |	НематериальныеАктивы.УдалитьОбъектВНА.ИнвентарныйНомерМСФО КАК ИнвентарныйНомерМСФО
	               |ИЗ
	               |	Справочник.НематериальныеАктивы КАК НематериальныеАктивы
	               |ГДЕ
	               |	НематериальныеАктивы.УдалитьОбъектВНА <> ЗНАЧЕНИЕ(Справочник.УдалитьВнеоборотныеАктивы.ПустаяСсылка)
	               |	И НематериальныеАктивы.НазначениеВНА = ЗНАЧЕНИЕ(Справочник.НазначенияВНА.ПустаяСсылка)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ОбъектыСтроительства.Ссылка КАК Ссылка,
	               |	ОбъектыСтроительства.УдалитьОбъектВНА.Страхование.(
	               |		Договор КАК Договор,
	               |		Комментарий КАК Комментарий
	               |	) КАК Страхование,
	               |	ОбъектыСтроительства.УдалитьОбъектВНА.НазначениеВНА КАК НазначениеВНА,
	               |	ОбъектыСтроительства.УдалитьОбъектВНА.КадастровыйНомер КАК КадастровыйНомер,
	               |	ОбъектыСтроительства.УдалитьОбъектВНА.КадастроваяСтоимость КАК КадастроваяСтоимость,
	               |	ОбъектыСтроительства.УдалитьОбъектВНА.ОбщаяПлощадь КАК ОбщаяПлощадь,
	               |	ОбъектыСтроительства.УдалитьОбъектВНА.Этажность КАК Этажность,
	               |	ОбъектыСтроительства.УдалитьОбъектВНА.ПраваСобственности КАК ПраваСобственности,
	               |	ОбъектыСтроительства.УдалитьОбъектВНА.ПервоначальныйИнвентарныйНомерМСФО КАК ПервоначальныйИнвентарныйНомерМСФО,
	               |	ОбъектыСтроительства.УдалитьОбъектВНА.ИнвентарныйНомерМСФО КАК ИнвентарныйНомерМСФО
	               |ИЗ
	               |	Справочник.ОбъектыСтроительства КАК ОбъектыСтроительства
	               |ГДЕ
	               |	ОбъектыСтроительства.УдалитьОбъектВНА <> ЗНАЧЕНИЕ(Справочник.УдалитьВнеоборотныеАктивы.ПустаяСсылка)
	               |	И ОбъектыСтроительства.НазначениеВНА = ЗНАЧЕНИЕ(Справочник.НазначенияВНА.ПустаяСсылка)";

	Массив = Запрос.ВыполнитьПакет();

	// 1. ОсновныеСредства
	Выборка = Массив[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектОС = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ОбъектОС, Выборка,,"Ссылка,Страхование,РемонтныйЦикл");
		ОбъектОС.Страхование.Загрузить(Выборка.Страхование.Выгрузить());
		ОбъектОС.РемонтныйЦикл.Загрузить(Выборка.РемонтныйЦикл.Выгрузить());
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектОС);
	КонецЦикла;

	// 2. НематериальныеАктивы
	Выборка = Массив[1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектНМА = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ОбъектНМА, Выборка,,"Ссылка,Страхование");
		ОбъектНМА.Страхование.Загрузить(Выборка.Страхование.Выгрузить());
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектНМА);
	КонецЦикла;

	// 3. ОбъектыСтроительства
	Выборка = Массив[2].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ОбъектСтроительства = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьЗначенияСвойств(ОбъектСтроительства, Выборка,,"Ссылка,Страхование");
		ОбъектСтроительства.Страхование.Загрузить(Выборка.Страхование.Выгрузить());
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ОбъектСтроительства);
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПеренестиДвиженияЗакрытияПериодаНаДокументыТУ() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МСФО.Регистратор.ИсходныйДокумент КАК РегистраторПриемник,
	|	МСФО.Регистратор КАК РегистраторИсточник
	|ИЗ
	|	РегистрБухгалтерии.МСФО.ДвиженияССубконто(
	|			,
	|			,
	|			Регистратор ССЫЛКА Документ.ТрансформационнаяКорректировка
	|				И ТИПЗНАЧЕНИЯ(Регистратор.ИсходныйДокумент) В (ТИП(Документ.РеформацияБаланса), ТИП(Документ.РеклассОтложенныхНалогов), ТИП(Документ.РасчетФинансовогоРезультата), ТИП(Документ.РасчетСебестоимости), ТИП(Документ.РасчетОтложенныхНалогов), ТИП(Документ.ПереоценкаВалютныхАктивовОбязательств), ТИП(Документ.ПовторениеКорректировокПрошлыхПериодов))
	|				И Активность,
	|			,
	|			) КАК МСФО
	|
	|УПОРЯДОЧИТЬ ПО
	|	МСФО.Регистратор");
	
	ВыборкаДок = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаДок.Следующий() Цикл
		
		//движения Документа приемника
		нзПриемник = РегистрыБухгалтерии.МСФО.СоздатьНаборЗаписей();
		нзПриемник.Отбор.Регистратор.Установить(ВыборкаДок.РегистраторПриемник);
		нзПриемник.Прочитать();
		
		Если нзПриемник.Количество() Тогда
			Продолжить;		
		КонецЕсли;
		
		нзИсточник = РегистрыБухгалтерии.МСФО.СоздатьНаборЗаписей();
		нзИсточник.Отбор.Регистратор.Установить(ВыборкаДок.РегистраторИсточник);
		нзИсточник.Прочитать();
		
		нзПриемник.Загрузить(нзИсточник.Выгрузить());
		
		нзПриемник.Записать();
		
		//очищаем движения документа источника
		нзИсточник.Очистить();	
		нзИсточник.Записать();
		
		// снимаем галку у тк 
		
		ДокументОбъект = ВыборкаДок.РегистраторИсточник.ПолучитьОбъект();
		ДокументОбъект.ДвиженияПоРегиструБухгалтерии = Ложь;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);	
		
	КонецЦикла; 

КонецПроцедуры

Процедура ПеренестиРеклассыРБП() Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Удалить_РеклассВосстановлениеИзРБП.Ссылка КАК Ссылка,
	|	ТрансформационнаяКорректировка.Ссылка КАК ТК,
	|	ОперацияМСФО.Ссылка КАК ОперацияМСФО,
	|	Удалить_РеклассВосстановлениеИзРБП.Организация.МодельУчетаМСФО КАК МодельУчетаМСФО
	|ИЗ
	|	Документ.Удалить_РеклассВосстановлениеИзРБП КАК Удалить_РеклассВосстановлениеИзРБП
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТрансформационнаяКорректировка КАК ТрансформационнаяКорректировка
	|		ПО Удалить_РеклассВосстановлениеИзРБП.Ссылка = ТрансформационнаяКорректировка.ИсходныйДокумент
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОперацияМСФО КАК ОперацияМСФО
	|		ПО Удалить_РеклассВосстановлениеИзРБП.Ссылка = ОперацияМСФО.СторнируемыйДокумент
	|			И (ОперацияМСФО.Комментарий ПОДОБНО ""Создан при обновлении%"")");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Выборка.ТК) Тогда
			
			ДокументОбъект = Выборка.ТК.ПолучитьОбъект();
			ДокументОбъект.ИсходныйДокумент = Неопределено;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
			
		ИначеЕсли Выборка.МодельУчетаМСФО = ПредопределенноеЗначение("Перечисление.МоделиУчетаМСФО.ТранзакционныйУчетПроводки") Тогда 
			
			Если ЗначениеЗаполнено(Выборка.ОперацияМСФО) Тогда
				ДокументОбъект = Выборка.ОперацияМСФО.ПолучитьОбъект();
			Иначе 
				ДокументОбъект = Документы.ОперацияМСФО.СоздатьДокумент();
				ЗаполнитьЗначенияСвойств(ДокументОбъект, Выборка.Ссылка);
			КонецЕсли;
			
			ДокументОбъект.Комментарий = "Создан при обновлении. Перенос документа: " + Выборка.Ссылка;
			ДокументОбъект.СторнируемыйДокумент = Выборка.Ссылка;
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
			
			//движения Документа приемника
			нзПриемник = РегистрыБухгалтерии.МСФО.СоздатьНаборЗаписей();
			нзПриемник.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);
			нзПриемник.Прочитать();
			
			нзИсточник = РегистрыБухгалтерии.МСФО.СоздатьНаборЗаписей();
			нзИсточник.Отбор.Регистратор.Установить(Выборка.Ссылка);
			нзИсточник.Прочитать();
			
			нзПриемник.Загрузить(нзИсточник.Выгрузить());		
			нзПриемник.Записать();
			
			//очищаем движения документа источника
			нзИсточник.Очистить();	
			нзИсточник.Записать();
			
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры

Процедура ЗаполнитьПериодОтчетаНачисленияАмортизации() Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НачислениеАмортизацииВНАМСФО.Ссылка КАК Ссылка,
	|	НАЧАЛОПЕРИОДА(НачислениеАмортизацииВНАМСФО.Дата, МЕСЯЦ) КАК ДатаНачалаМесяца
	|ИЗ
	|	Документ.НачислениеАмортизацииВНАМСФО КАК НачислениеАмортизацииВНАМСФО
	|ГДЕ
	|	НачислениеАмортизацииВНАМСФО.ПериодОтчета = ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка)");
	
	Выборка = Запрос.Выполнить().Выбрать();	
	ПериодичностьМесяц = Перечисления.Периодичность.Месяц;
	Пока Выборка.Следующий() Цикл
		
		ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ПериодОтчета = ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(Выборка.ДатаНачалаМесяца, ПериодичностьМесяц, 0);
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
		
	КонецЦикла; 

КонецПроцедуры

Процедура УстановитьОрганизациюРезервированияПоЦФО() Экспорт
	// Изменяем бизнес-логику документа Резервирование бюджета:
	// ЦФО для бюджетирования.
	// Организация для закупок и оформления первичных документов.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОперативныйПлан.Ссылка КАК Ссылка,
	|	ОперативныйПлан.Организация КАК Организация,
	|	ОперативныйПлан.ЦФО КАК ЦФО
	|ИЗ
	|	Документ.ОперативныйПлан КАК ОперативныйПлан
	|ГДЕ
	|	ОперативныйПлан.ТипОперацииБюджетирование = &ТипОперацииБюджетирование
	|	И ОперативныйПлан.Организация <> ОперативныйПлан.ЦФО");
	
	Запрос.УстановитьПараметр("ТипОперацииБюджетирование",
		Перечисления.ТипыОперацийБюджетирование.ПланированиеЗакупок);
	ВыборкаДокументов = Запрос.Выполнить().Выбрать();	
	Пока ВыборкаДокументов.Следующий() Цикл
		ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
		ДокументОбъект.УдалитьОрганизацияЦУЗ = ДокументОбъект.Организация;
		ДокументОбъект.Организация = ДокументОбъект.ЦФО;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
	КонецЦикла; 
КонецПроцедуры

Процедура ЗаполнитьШаблонКорректировкаРазмещенияПоУмолчанию() Экспорт
	// Инициализация.
	ВидСобытияОповещения = Справочники.ВидыСобытийОповещений.КорректировкаРазмещения;
	КатегорияОповещения = Справочники.КатегорииСобытийОповещений.ОплатаЗаявок;
	ТипОбъектаОповещения = Справочники.ДокументыБД.НайтиПоНаименованию("ЗаявкаНаРасходованиеДенежныхСредств", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	// Получение шаблонов в системе.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	НастройкиОповещений.ШаблонОповещения.Шаблон КАК Шаблон,
		|	НастройкиОповещений.ВидСобытияОповещения КАК ВидСобытияОповещения,
		|	НастройкиОповещений.ШаблонОповещения КАК ХранилищеШаблонов,
		|	НастройкиОповещений.ТипОбъектаОповещения КАК ТипОбъектаОповещения,
		|	НастройкиОповещений.КатегорияОповещения КАК КатегорияОповещения,
		|	НастройкиОповещений.ВидОбъектаОповещения КАК ВидОбъектаОповещения,
		|	НастройкиОповещений.СписокРассылкиПредставление КАК СписокРассылкиПредставление,
		|	НастройкиОповещений.СписокРассылки КАК СписокРассылки,
		|	НастройкиОповещений.ОповещениеВключено КАК ОповещениеВключено,
		|	НастройкиОповещений.ПериодНапоминания КАК ПериодНапоминания,
		|	НастройкиОповещений.ИнтервалВремениНапоминания КАК ИнтервалВремениНапоминания
		|ИЗ
		|	РегистрСведений.НастройкиОповещений КАК НастройкиОповещений
		|ГДЕ
		|	НастройкиОповещений.ОповещениеВключено
		|	И НастройкиОповещений.ВидСобытияОповещения = &ВидСобытияОповещения
		|	И НастройкиОповещений.ОповещениеВключено";
	Запрос.УстановитьПараметр("ВидСобытияОповещения", ВидСобытияОповещения);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	// Запись новых шаблонов.
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ХранилищеШаблонов) Тогда
			НужноОбновлятьШаблон = Ложь;
			ПредЗначениеШаблон = ВыборкаДетальныеЗаписи.Шаблон.Получить();
			Если ПредЗначениеШаблон <> Неопределено Тогда
				НужноОбновлятьШаблон = (СокрЛП(ПредЗначениеШаблон) = "");
			Иначе
				НужноОбновлятьШаблон = Истина;			// Пустой шаблон. Выставим по умолчанию.
			КонецЕсли;
			// Обновим шаблон, если проверка прошла успешно.
			Если НужноОбновлятьШаблон Тогда
				ШаблонПоУмолчанию = МодульУправленияОповещениямиУХ.ПолучитьТекстОповещенияПоВидуСобытияПоУмолчанию(КатегорияОповещения, ВидСобытияОповещения, ТипОбъектаОповещения);
				Попытка
					СправочникОбъект = ВыборкаДетальныеЗаписи.ХранилищеШаблонов.ПолучитьОбъект();
					СправочникОбъект.Шаблон = Новый ХранилищеЗначения(ШаблонПоУмолчанию);
					СправочникОбъект.Записать();
				Исключение
					ТекстСообщения = НСтр("ru = 'При записи шаблона оповещения для события %ВидСобытия% возникли ошибки: %ОписаниеОшибки%'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидСобытия%", Строка(ВидСобытияОповещения));
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				КонецПопытки;
			Иначе
				// Обработка не требуется. Пропускаем.
			КонецЕсли;
		Иначе
			ШаблонПоУмолчанию = МодульУправленияОповещениямиУХ.ПолучитьТекстОповещенияПоВидуСобытияПоУмолчанию(КатегорияОповещения, ВидСобытияОповещения, ТипОбъектаОповещения);
			Попытка
				НовыйХранилищеШаблонов = Справочники.УдалитьХранилищеШаблонов.СоздатьЭлемент();
				НовыйХранилищеШаблонов.Наименование = Строка(ВидСобытияОповещения) + ": " + Строка(ТипОбъектаОповещения);
				НовыйХранилищеШаблонов.Шаблон = Новый ХранилищеЗначения(ШаблонПоУмолчанию);
				НовыйХранилищеШаблонов.Записать();
				МенеджерЗаписи = РегистрыСведений.НастройкиОповещений.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.КатегорияОповещения			 = ВыборкаДетальныеЗаписи.КатегорияОповещения;
				МенеджерЗаписи.ВидСобытияОповещения			 = ВыборкаДетальныеЗаписи.ВидСобытияОповещения;
				МенеджерЗаписи.ТипОбъектаОповещения			 = ВыборкаДетальныеЗаписи.ТипОбъектаОповещения;
				МенеджерЗаписи.ВидОбъектаОповещения			 = ВыборкаДетальныеЗаписи.ВидОбъектаОповещения;
				МенеджерЗаписи.ШаблонОповещения				 = НовыйХранилищеШаблонов.Ссылка;
				МенеджерЗаписи.СписокРассылкиПредставление	 = ВыборкаДетальныеЗаписи.СписокРассылкиПредставление;
				МенеджерЗаписи.СписокРассылки				 = ВыборкаДетальныеЗаписи.СписокРассылки;
				МенеджерЗаписи.ОповещениеВключено			 = ВыборкаДетальныеЗаписи.ОповещениеВключено;
				МенеджерЗаписи.ПериодНапоминания			 = ВыборкаДетальныеЗаписи.ПериодНапоминания;
				МенеджерЗаписи.ИнтервалВремениНапоминания	 = ВыборкаДетальныеЗаписи.ИнтервалВремениНапоминания;
				МенеджерЗаписи.Записать();
			Исключение
				ТекстСообщения = НСтр("ru = 'При записи шаблона оповещения для события %ВидСобытия% возникли ошибки: %ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидСобытия%", Строка(ВидСобытияОповещения));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьНекорректнуюВалютуОплатыВКонвертации() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЗаявкаНаОперацию.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаОперацию
	|ГДЕ
	|	ЗаявкаНаОперацию.ТипОперацииБюджетирование = ЗНАЧЕНИЕ(Перечисление.ТипыОперацийБюджетирование.КонвертацияВалюты)
	|	И ЗаявкаНаОперацию.ВалютаДокумента <> ЗаявкаНаОперацию.ВалютаОплаты
	|";

	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокОбъект.ВалютаОплаты = ДокОбъект.ВалютаДокумента;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОбъект);
		
	КонецЦикла
	
КонецПроцедуры

Процедура ОбновитьИменаАналитикИРесурсовСверкиВГО() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ГруппыАналитикСверкиВГОАналитики.Ссылка КАК Ссылка,
		|	ГруппыАналитикСверкиВГОАналитики.НомерСтроки КАК НомерСтроки,
		|	1 КАК ТипТЧ
		|ИЗ
		|	Справочник.ГруппыАналитикСверкиВГО.Аналитики КАК ГруппыАналитикСверкиВГОАналитики
		|ГДЕ
		|	ГруппыАналитикСверкиВГОАналитики.Имя = """"
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыАналитикСверкиВГОРесурсы.Ссылка,
		|	ГруппыАналитикСверкиВГОРесурсы.НомерСтроки,
		|	2
		|ИЗ
		|	Справочник.ГруппыАналитикСверкиВГО.Ресурсы КАК ГруппыАналитикСверкиВГОРесурсы
		|ГДЕ
		|	ГруппыАналитикСверкиВГОРесурсы.Имя = """"
		|ИТОГИ ПО
		|	Ссылка,
		|	ТипТЧ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаСсылка.Следующий() Цикл
		ГруппаОбъект = ВыборкаСсылка.Ссылка.ПолучитьОбъект();
	
		ВыборкаТЧ = ВыборкаСсылка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаТЧ.Следующий() Цикл
			Если ВыборкаТЧ.ТипТЧ = 1 Тогда
				ТЧ = ГруппаОбъект.Аналитики;
				Префикс = "Аналитика";
			Иначе
				ТЧ = ГруппаОбъект.Ресурсы;
				Префикс = "Ресурс";
			КонецЕсли;
			СледующийНомерВИмени = СверкаВГОКлиентСервер.МаксимальныйНомерПослеПрефикса(
										ТЧ.ВыгрузитьКолонку("Имя"),
										Префикс) + 1;
			
			ВыборкаНомераСтрокТЧ = ВыборкаТЧ.Выбрать(ОбходРезультатаЗапроса.Прямой);
			Пока ВыборкаНомераСтрокТЧ.Следующий() Цикл
				Строка = ТЧ[ВыборкаНомераСтрокТЧ.НомерСтроки-1];
				Строка.Имя = "Префикс" + СледующийНомерВИмени;
				СледующийНомерВИмени = СледующийНомерВИмени + 1;
			КонецЦикла;
		КонецЦикла;
		
		ЗаписатьОбъект(ГруппаОбъект);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьКатегорииОповещений() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	КатегорииСобытийОповещений.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КатегорииСобытийОповещений КАК КатегорииСобытийОповещений
		|ГДЕ
		|	НЕ КатегорииСобытийОповещений.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		КатегорияОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		КатегорияОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьКонстантуНалоговоеПланированиеИнвестиций() Экспорт
	
	Сценарии = Новый Массив;
	Сценарии.Добавить(Константы.СценарийМСФО.Получить());
	Сценарии.Добавить(Константы.СценарийОтчетностиКИК.Получить());
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеИнвестиций.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеИнвестиций КАК ПоступлениеИнвестиций
		|ГДЕ
		|	НЕ ПоступлениеИнвестиций.Сценарий В (&Сценарии)
		|	И ПоступлениеИнвестиций.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ВыбытиеИнвестиций.Ссылка
		|ИЗ
		|	Документ.ВыбытиеИнвестиций КАК ВыбытиеИнвестиций
		|ГДЕ
		|	НЕ ВыбытиеИнвестиций.Сценарий В (&Сценарии)
		|	И ВыбытиеИнвестиций.Проведен";
	
	Запрос.УстановитьПараметр("Сценарии", Сценарии);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Константы.НалоговоеПланированиеИнвестиций.Установить(Истина);
	КонецЕсли;

КонецПроцедуры

Процедура ОбновитьХранениеДанныхЦенныхБумаг() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦенныеБумаги.Ссылка КАК Ссылка,
	|	ЦенныеБумаги.ВидФинансовогоИнструмента КАК ВидФинансовогоИнструмента,
	|	УдалитьВерсииНоминалаЦенныхБумагСрезПоследних.Регистратор КАК ВерсияГрафикаЦБ
	|ИЗ
	|	Справочник.ЦенныеБумаги КАК ЦенныеБумаги
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьВерсииНоминалаЦенныхБумаг.СрезПоследних КАК УдалитьВерсииНоминалаЦенныхБумагСрезПоследних
	|		ПО (УдалитьВерсииНоминалаЦенныхБумагСрезПоследних.ПредметГрафика = ЦенныеБумаги.Ссылка)
	|ГДЕ
	|	НЕ ЦенныеБумаги.ЭтоГруппа
	|	И ЦенныеБумаги.ПараметрыЦеннойБумаги = НЕОПРЕДЕЛЕНО
	|	И ЦенныеБумаги.ВидФинансовогоИнструмента В (ЗНАЧЕНИЕ(Перечисление.ВидыФинансовыхИнструментов.Вексель), ЗНАЧЕНИЕ(Перечисление.ВидыФинансовыхИнструментов.Облигация))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.ВидФинансовогоИнструмента = Перечисления.ВидыФинансовыхИнструментов.Облигация Тогда
			// Просто свяжем данные.
			ЦБОбъект = Выборка.Ссылка.получитьОбъект();
			ЦБОбъект.ПараметрыЦеннойБумаги = Выборка.ВерсияГрафикаЦБ;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЦБОбъект);
		ИначеЕсли Выборка.ВидФинансовогоИнструмента = Перечисления.ВидыФинансовыхИнструментов.Вексель Тогда
			
			ЦБОбъект = Выборка.Ссылка.получитьОбъект();
			
			ДокументВексель = Документы.ПараметрыЦеннойБумагиВексель.СоздатьДокумент();
			ДокументВексель.Заполнить(Выборка.Ссылка);
			ДокументВексель.ФормаВекселя = ?(ЦБОбъект.УдалитьПереводнойВексель, Перечисления.ФормаВекселя.Переводной, Перечисления.ФормаВекселя.Простой);
			ДокументВексель.Номинал = ЦБОбъект.Номинал;
			ДокументВексель.ВалютаНоминала = ЦБОбъект.ВалютаНоминала;
			ДокументВексель.Векселедатель = ЦБОбъект.Эмитент;
			ДокументВексель.Поручитель = ЦБОбъект.УдалитьПоручитель;
			ДокументВексель.Должник = ЦБОбъект.Должник;
			ДокументВексель.МестоПлатежа = ЦБОбъект.УдалитьМестоПлатежа;
			ДокументВексель.МестоСоставления = ЦБОбъект.УдалитьМестоСоставления;
			ДокументВексель.ПодписантРуководитель = Строка(ЦБОбъект.УдалитьПодписантРуководитель);
			ДокументВексель.ПодписантГлавныйБухгалтер = Строка(ЦБОбъект.УдалитьПодписантГлавныйБухгалтер);
			ДокументВексель.ПервыйПолучатель = ЦБОбъект.ПервыйПолучатель;
			ДокументВексель.СрокПлатежаПоВекселю = ?(ЦБОбъект.ДисконтнаяЦБ, Перечисления.СрокиПлатежаПоВекселю.НаОпределенныйДень, Перечисления.СрокиПлатежаПоВекселю.ПоПредъявлении);
			ДокументВексель.ПредусмотренПроцентныйДоход = Не ЦБОбъект.ДисконтнаяЦБ;
			ДокументВексель.ПроцентнаяСтавка = Выборка.ВерсияГрафикаЦБ.ПроцентнаяСтавка;
			ДокументВексель.ДатаНачалаНачисленияПроцентов = ЦБОбъект.ДатаВыпуска;
			ДокументВексель.ОтсрочкаПлатежа = 0;
			ДокументВексель.ДатаОкончанияНачисленияПроцентов = ЦБОбъект.СрокПогашения;
			ДокументВексель.ДатаПредъявленияНеРанее = ЦБОбъект.СрокПогашения;
			ДокументВексель.ДатаПлатежа = ЦБОбъект.СрокПогашения;
			ДокументВексель.ДатаСоставления = ЦБОбъект.ДатаВыпуска;
			ДокументВексель.МаксимальнаяСуммаПроцентов = Выборка.ВерсияГрафикаЦБ.График.итог("ПроцентыНачислено");
			
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументВексель,,,РежимЗаписиДокумента.Проведение);
			ЦБОбъект.ПараметрыЦеннойБумаги = ДокументВексель.Ссылка;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЦБОбъект);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОрганизациюКонтрагентаРасчетыСКонтрагентамиГрафики() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКонтрагентамиГрафики.Регистратор КАК Регистратор,
	|	ВЫБОР
	|		КОГДА РасчетыСКонтрагентамиГрафики.ПредметГрафика ССЫЛКА Справочник.ЦенныеБумаги
	|			ТОГДА РасчетыСКонтрагентамиГрафики.Регистратор.Организация
	|		ИНАЧЕ РасчетыСКонтрагентамиГрафики.ПредметГрафика.Организация
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА РасчетыСКонтрагентамиГрафики.ПредметГрафика ССЫЛКА Справочник.ЦенныеБумаги
	|			ТОГДА РасчетыСКонтрагентамиГрафики.Регистратор.Контрагент
	|		КОГДА РасчетыСКонтрагентамиГрафики.ПредметГрафика ССЫЛКА Справочник.ДоговорыКонтрагентов
	|			ТОГДА РасчетыСКонтрагентамиГрафики.ПредметГрафика.Владелец
	|		ИНАЧЕ РасчетыСКонтрагентамиГрафики.ПредметГрафика.Контрагент
	|	КОНЕЦ КАК Контрагент
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентамиГрафики КАК РасчетыСКонтрагентамиГрафики
	|ГДЕ
	|	РасчетыСКонтрагентамиГрафики.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	И РасчетыСКонтрагентамиГрафики.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписейРегистра = РегистрыНакопления.РасчетыСКонтрагентамиГрафики.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписейРегистра.Прочитать();
		Для Каждого ТекЗаписьРегистра Из НаборЗаписейРегистра Цикл
			Если ТекЗаписьРегистра.Организация.Пустая() Тогда
				ТекЗаписьРегистра.Организация = Выборка.Организация;
			КонецЕсли;

			Если ТекЗаписьРегистра.Контрагент.Пустая() Тогда
				ТекЗаписьРегистра.Контрагент = Выборка.Контрагент;
			КонецЕсли;

		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейРегистра);
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьОрганизациюКонтрагентаРасчетыПоФинансовымИнструментамФакт() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РасчетыСКонтрагентамиФакт.Регистратор КАК Регистратор,
	|	РасчетыСКонтрагентамиФакт.Регистратор.Организация КАК Организация,
	|	РасчетыСКонтрагентамиФакт.Регистратор.Контрагент КАК Контрагент
	|ИЗ
	|	РегистрНакопления.РасчетыСКонтрагентамиФакт КАК РасчетыСКонтрагентамиФакт
	|ГДЕ
	|	РасчетыСКонтрагентамиФакт.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|	ИЛИ РасчетыСКонтрагентамиФакт.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НаборЗаписейРегистра = РегистрыНакопления.РасчетыСКонтрагентамиФакт.СоздатьНаборЗаписей();
		НаборЗаписейРегистра.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НаборЗаписейРегистра.Прочитать();
		Для Каждого ТекЗаписьРегистра Из НаборЗаписейРегистра Цикл
			Если ТекЗаписьРегистра.Организация.Пустая() Тогда
				ТекЗаписьРегистра.Организация = Выборка.Организация;
			КонецЕсли;

			Если ТекЗаписьРегистра.Контрагент.Пустая() Тогда
				ТекЗаписьРегистра.Контрагент = Выборка.Контрагент;
			КонецЕсли;

		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейРегистра);
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьПризнакиБюджетовВОтраженииФактическихДанных() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтражениеФактическихДанныхБюджетирования.Ссылка КАК Ссылка,
	|	ОтражениеФактическихДанныхБюджетирования.ЭтоБДДС КАК ЭтоБДДС,
	|	ОтражениеФактическихДанныхБюджетирования.ЭтоБДР КАК ЭтоБДР,
	|	ОтражениеФактическихДанныхБюджетирования.ЭтоРесурсы КАК ЭтоРесурсы,
	|	КОЛИЧЕСТВО(ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств.Ссылка) > 0 КАК ЕстьБДДС,
	|	КОЛИЧЕСТВО(ОтражениеФактическихДанныхБюджетированияБюджетДвиженияРесурсов.Ссылка) > 0 КАК ЕстьРесурсы,
	|	КОЛИЧЕСТВО(ОтражениеФактическихДанныхБюджетированияБюджетДоходовИРасходов.Ссылка) > 0 КАК ЕстьБДР
	|ИЗ
	|	Документ.ОтражениеФактическихДанныхБюджетирования КАК ОтражениеФактическихДанныхБюджетирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтражениеФактическихДанныхБюджетирования.БюджетДвиженияДенежныхСредств КАК ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств
	|		ПО ОтражениеФактическихДанныхБюджетирования.Ссылка = ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтражениеФактическихДанныхБюджетирования.БюджетДоходовИРасходов КАК ОтражениеФактическихДанныхБюджетированияБюджетДоходовИРасходов
	|		ПО ОтражениеФактическихДанныхБюджетирования.Ссылка = ОтражениеФактическихДанныхБюджетированияБюджетДоходовИРасходов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ОтражениеФактическихДанныхБюджетирования.БюджетДвиженияРесурсов КАК ОтражениеФактическихДанныхБюджетированияБюджетДвиженияРесурсов
	|		ПО ОтражениеФактическихДанныхБюджетирования.Ссылка = ОтражениеФактическихДанныхБюджетированияБюджетДвиженияРесурсов.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтражениеФактическихДанныхБюджетирования.Ссылка,
	|	ОтражениеФактическихДанныхБюджетирования.ЭтоБДДС,
	|	ОтражениеФактическихДанныхБюджетирования.ЭтоБДР,
	|	ОтражениеФактическихДанныхБюджетирования.ЭтоРесурсы
	|
	|ИМЕЮЩИЕ
	|	(ОтражениеФактическихДанныхБюджетирования.ЭтоБДДС <> (КОЛИЧЕСТВО(ОтражениеФактическихДанныхБюджетированияБюджетДвиженияДенежныхСредств.Ссылка) > 0)
	|		ИЛИ ОтражениеФактическихДанныхБюджетирования.ЭтоБДР <> (КОЛИЧЕСТВО(ОтражениеФактическихДанныхБюджетированияБюджетДоходовИРасходов.Ссылка) > 0)
	|		ИЛИ ОтражениеФактическихДанныхБюджетирования.ЭтоРесурсы <> (КОЛИЧЕСТВО(ОтражениеФактическихДанныхБюджетированияБюджетДвиженияРесурсов.Ссылка) > 0))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокОбъект.ЭтоБДДС = Выборка.ЕстьБДДС;
		ДокОбъект.ЭтоБДР = Выборка.ЕстьБДР;
		ДокОбъект.ЭтоРесурсы = Выборка.ЕстьРесурсы;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОбъект);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьРегистрРасчетыСКонтрагентамиФактДаннымиКоммерческихДоговоров() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УдалитьИсполнениеСделок.Регистратор КАК Регистратор,
	|	УдалитьИсполнениеСделок.Регистратор.Дата КАК Период,
	|	УдалитьИсполнениеСделок.Регистратор.Организация КАК Организация,
	|	УдалитьИсполнениеСделок.Регистратор.Контрагент КАК Контрагент,
	|	УдалитьИсполнениеСделок.Регистратор.ВалютаДокумента КАК Валюта,
	|	УдалитьИсполнениеСделок.Регистратор.ПриходРасход КАК ПриходРасход,
	|	УдалитьИсполнениеСделок.Регистратор.ЭтоБДДС КАК ЭтоБДДС,
	|	УдалитьИсполнениеСделок.Регистратор.ЭтоБДР КАК ЭтоБДР,
	|	УдалитьИсполнениеСделок.Регистратор.ЭтоРесурсы КАК ЭтоРесурсы,
	|	ВЫБОР
	|		КОГДА УдалитьИсполнениеСделок.Регистратор.НаправлениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.НаправлениеДвиженияВзаиморасчетов.УвеличениеЗадолженности)
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвижения
	|ПОМЕСТИТЬ ВТ_ДокументыРегистраторы
	|ИЗ
	|	РегистрНакопления.УдалитьИсполнениеСделок КАК УдалитьИсполнениеСделок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РасчетыСКонтрагентамиФакт КАК РасчетыСКОнтрагентамиФакт
	|		ПО УдалитьИсполнениеСделок.Регистратор = РасчетыСКОнтрагентамиФакт.Регистратор
	|ГДЕ
	|	РасчетыСКОнтрагентамиФакт.Регистратор ЕСТЬ NULL
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ДокументыРегистраторы.Регистратор КАК Регистратор,
	|	ВТ_ДокументыРегистраторы.Период КАК Период,
	|	ВТ_ДокументыРегистраторы.Организация КАК Организация,
	|	ВТ_ДокументыРегистраторы.Контрагент КАК Контрагент,
	|	ВТ_ДокументыРегистраторы.Валюта КАК Валюта,
	|	ВТ_ДокументыРегистраторы.ПриходРасход КАК ПриходРасход,
	|	ВТ_ДокументыРегистраторы.ВидДвижения КАК ВидДвижения,
	|	ТабРасшифровка.ОбъектРасчетов КАК ОбъектРасчетов,
	|	ТабРасшифровка.Сумма КАК Сумма,
	|	ТабРасшифровка.СтатьяДвиженияДенежныхСредств КАК СтатьяБюджета
	|ИЗ
	|	ВТ_ДокументыРегистраторы КАК ВТ_ДокументыРегистраторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтражениеФактическихДанныхБюджетирования.БюджетДвиженияДенежныхСредств КАК ТабРасшифровка
	|		ПО ВТ_ДокументыРегистраторы.Регистратор = ТабРасшифровка.Ссылка
	|			И (ВТ_ДокументыРегистраторы.ЭтоБДДС)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ДокументыРегистраторы.Регистратор,
	|	ВТ_ДокументыРегистраторы.Период,
	|	ВТ_ДокументыРегистраторы.Организация,
	|	ВТ_ДокументыРегистраторы.Контрагент,
	|	ВТ_ДокументыРегистраторы.Валюта,
	|	ВТ_ДокументыРегистраторы.ПриходРасход,
	|	ВТ_ДокументыРегистраторы.ВидДвижения,
	|	ТабРасшифровка.ОбъектРасчетов,
	|	ТабРасшифровка.Сумма,
	|	ТабРасшифровка.СтатьяДоходовИРасходов
	|ИЗ
	|	ВТ_ДокументыРегистраторы КАК ВТ_ДокументыРегистраторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтражениеФактическихДанныхБюджетирования.БюджетДоходовИРасходов КАК ТабРасшифровка
	|		ПО ВТ_ДокументыРегистраторы.Регистратор = ТабРасшифровка.Ссылка
	|			И (НЕ ВТ_ДокументыРегистраторы.ЭтоБДДС)
	|			И (ВТ_ДокументыРегистраторы.ЭтоБДР)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ДокументыРегистраторы.Регистратор,
	|	ВТ_ДокументыРегистраторы.Период,
	|	ВТ_ДокументыРегистраторы.Организация,
	|	ВТ_ДокументыРегистраторы.Контрагент,
	|	ВТ_ДокументыРегистраторы.Валюта,
	|	ВТ_ДокументыРегистраторы.ПриходРасход,
	|	ВТ_ДокументыРегистраторы.ВидДвижения,
	|	ТабРасшифровка.ОбъектРасчетов,
	|	ТабРасшифровка.Сумма,
	|	ТабРасшифровка.СтатьяДвиженияРесурсов
	|ИЗ
	|	ВТ_ДокументыРегистраторы КАК ВТ_ДокументыРегистраторы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтражениеФактическихДанныхБюджетирования.БюджетДвиженияРесурсов КАК ТабРасшифровка
	|		ПО ВТ_ДокументыРегистраторы.Регистратор = ТабРасшифровка.Ссылка
	|			И (НЕ ВТ_ДокументыРегистраторы.ЭтоБДДС)
	|			И (НЕ ВТ_ДокументыРегистраторы.ЭтоБДР)
	|			И (ВТ_ДокументыРегистраторы.ЭтоРесурсы)
	|ИТОГИ ПО
	|	Регистратор";

	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыНакопления.РасчетыСКонтрагентамиФакт.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
		
		ВыборкаДетальныеЗаписи = Выборка.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СтрокаНабораЗаписей = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНабораЗаписей, ВыборкаДетальныеЗаписи);
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура УстановитьИспользуемыеВПроцессахДокументы() Экспорт
	// Инициализация.
	ТекИБ = Справочники.ТипыБазДанных.ТекущаяИБ;
	// Снятие флагов у прочих документов.
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументыБД.Ссылка КАК Ссылка,
		|	ДокументыБД.ИспользуетсяВПроцессе КАК ИспользуетсяВПроцессе
		|ИЗ
		|	Справочник.ДокументыБД КАК ДокументыБД
		|ГДЕ
		|	НЕ ДокументыБД.ПометкаУдаления
		|	И ДокументыБД.ИспользуетсяВПроцессе";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТекСправочник = ВыборкаДетальныеЗаписи.Ссылка;
		СправочникОбъект = ТекСправочник.ПолучитьОбъект();
		СправочникОбъект.ИспользуетсяВПроцессе = Ложь;
		СправочникОбъект.Записать();
	КонецЦикла;
	// Экземпляр отчёта.
	НайденныйЭлемент = Справочники.ДокументыБД.НайтиПоНаименованию("НастраиваемыйОтчет", , , ТекИБ);
	Если НайденныйЭлемент <> Неопределено Тогда
		СправочникОбъект = НайденныйЭлемент.ПолучитьОбъект();
		СправочникОбъект.ИспользуетсяВПроцессе = Истина;
		СправочникОбъект.Записать();
	Иначе
		// Элемент не найден. Пропускаем.
	КонецЕсли;
	// Трансляция.
	НайденныйЭлемент = Справочники.ДокументыБД.НайтиПоНаименованию("Трансляция", , , ТекИБ);
	Если НайденныйЭлемент <> Неопределено Тогда
		СправочникОбъект = НайденныйЭлемент.ПолучитьОбъект();
		СправочникОбъект.ИспользуетсяВПроцессе = Истина;
		СправочникОбъект.Записать();
	Иначе
		// Элемент не найден. Пропускаем.
	КонецЕсли;
	// Трансформационная корректировка.
	НайденныйЭлемент = Справочники.ДокументыБД.НайтиПоНаименованию("ТрансформационнаяКорректировка", , , ТекИБ);
	Если НайденныйЭлемент <> Неопределено Тогда
		СправочникОбъект = НайденныйЭлемент.ПолучитьОбъект();
		СправочникОбъект.ИспользуетсяВПроцессе = Истина;
		СправочникОбъект.Записать();
	Иначе
		// Элемент не найден. Пропускаем.
	КонецЕсли;
	// Элиминация.
	НайденныйЭлемент = Справочники.ДокументыБД.НайтиПоНаименованию("Элиминация", , , ТекИБ);
	Если НайденныйЭлемент <> Неопределено Тогда
		СправочникОбъект = НайденныйЭлемент.ПолучитьОбъект();
		СправочникОбъект.ИспользуетсяВПроцессе = Истина;
		СправочникОбъект.Записать();
	Иначе
		// Элемент не найден. Пропускаем.
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьУИДЛотовНаСервере() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Лоты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Лоты КАК Лоты
		|ГДЕ
		|	Лоты.УИД_ЕИС = """"
		|	И НЕ Лоты.Предопределенный";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЛотОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ЛотОбъект.УИД_ЕИС = Строка(ЛотОбъект.Ссылка.УникальныйИдентификатор());
		ОбновлениеИнформационнойБазыУХ.ЗаписатьОбъект(ЛотОбъект, Ложь, Ложь);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область Версия_2_0

Процедура ОбновитьПоляСоответствия() Экспорт
	
	//////////////////////////////////////////////////////////////////
	// Обновление полей настройки соответствия объектов
	
	СпрСоответствия=Справочники.СоответствиеВнешнимИБ.Выбрать();
	
	МассивОбъектов=Новый Массив;
	
	Пока СпрСоответствия.Следующий() Цикл
		
		Если МассивОбъектов.Найти(СпрСоответствия.Ссылка)=Неопределено Тогда
			
			ИнтеграцияСВнешнимиСистемамиУХ.ЗаполнитьТаблицуПолейДляИмпорта(СпрСоответствия.Ссылка);
			МассивОбъектов.Добавить(СпрСоответствия.Ссылка);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьПоляСоответствия() 

Процедура УдалитьДублиОписанийТабличныхЧастей() Экспорт
		
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК ТабличнаяЧастьБД
	|ПОМЕСТИТЬ ИспользуемыеОбъекты
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.ПотребительРасчета ССЫЛКА Справочник.ТабличныеЧастиБД
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.ОбъектБД
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.ОбъектБД ССЫЛКА Справочник.ТабличныеЧастиБД
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.ТабличнаяЧастьБД
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПравилаЗаполненияОбъектовБДИсточникиДляЗаполненияТЧ.ТабличнаяЧасть
	|ИЗ
	|	Справочник.ПравилаЗаполненияОбъектовБД.ИсточникиДляЗаполненияТЧ КАК ПравилаЗаполненияОбъектовБДИсточникиДляЗаполненияТЧ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабличныеЧастиБД.Владелец КАК Владелец,
	|	ТабличныеЧастиБД.Имя КАК Имя,
	|	ТабличныеЧастиБД.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ТабличныеЧастиБД КАК ТабличныеЧастиБД
	|ГДЕ
	|	НЕ ТабличныеЧастиБД.Ссылка В
	|				(ВЫБРАТЬ
	|					ИспользуемыеОбъекты.ТабличнаяЧастьБД
	|				ИЗ
	|					ИспользуемыеОбъекты)
	|ИТОГИ ПО
	|	Владелец,
	|	Ссылка";
	
	РезультатЗапроса=Запрос.ВыполнитьПакет();
	ТабИспользуемые=РезультатЗапроса[0].Выгрузить();
	
	ВыборкаВладелец=РезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаВладелец.Следующий() Цикл
		
		МассивИмен=Новый Массив;
		
		ВыборкаСсылка=ВыборкаВладелец.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСсылка.Следующий() Цикл
			
			Если НЕ МассивИмен.Найти(ВыборкаСсылка.Имя)=Неопределено Тогда
				
				СправочникОбъект=ВыборкаСсылка.Ссылка.ПолучитьОбъект();
				СправочникОбъект.Имя="Удалить"+СправочникОбъект.Имя;
				СправочникОбъект.Синоним="(Удалить) "+СправочникОбъект.Синоним;
				СправочникОбъект.ПометкаУдаления=Истина;
				СправочникОбъект.ОбменДанными.Загрузка=Истина;
				СправочникОбъект.Записать();
				
			Иначе
				
				МассивИмен.Добавить(ВыборкаСсылка.Имя);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры // УдалитьДублиОписанийТабличныхЧастей()

Процедура ЗаполнитьОписанияОбъектовТек() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	СоответствиеВнешнимИБ.Ссылка КАК Ссылка,
	             |	СоответствиеВнешнимИБ.ИмяОбъектаМетаданных КАК ИмяОбъектаМетаданных
	             |ИЗ
	             |	Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	             |ГДЕ
	             |	СоответствиеВнешнимИБ.ТипОбъектаКонсолидации = ""ВидСубконто""";
	
	ТабВидыСубконто=Запрос.Выполнить().Выгрузить();
	ТабВидыСубконто.Колонки.Добавить("ТаблицаАналитики",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(255));
	
	Для Каждого Строка ИЗ ТабВидыСубконто Цикл
		
		Строка.ТаблицаАналитики=Метаданные.НайтиПоТипу(Строка.ИмяОбъектаМетаданных.ТипЗначения.Типы()[0]).ПолноеИмя();
		
	КонецЦикла;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	""Справочник."" + СправочникиБД.Наименование КАК ТаблицаАналитики,
	|	СправочникиБД.Ссылка КАК ОписаниеОбъектаБД
	|ПОМЕСТИТЬ ОписанияОбъектовБД
	|ИЗ
	|	Справочник.СправочникиБД КАК СправочникиБД
	|ГДЕ
	|	СправочникиБД.Владелец = ЗНАЧЕНИЕ(Справочник.ТипыБазДанных.ТекущаяИБ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Перечисление."" + ПеречисленияБД.Наименование,
	|	ПеречисленияБД.Ссылка
	|ИЗ
	|	Справочник.ПеречисленияБД КАК ПеречисленияБД
	|ГДЕ
	|	ПеречисленияБД.Владелец = ЗНАЧЕНИЕ(Справочник.ТипыБазДанных.ТекущаяИБ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""ПланСчетов."" + ПланыСчетовБД.Наименование,
	|	ПланыСчетовБД.Ссылка
	|ИЗ
	|	Справочник.ПланыСчетовБД КАК ПланыСчетовБД
	|ГДЕ
	|	ПланыСчетовБД.Владелец = ЗНАЧЕНИЕ(Справочник.ТипыБазДанных.ТекущаяИБ)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТаблицаАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабВидыСубконто.Ссылка КАК Ссылка,
	|	ТабВидыСубконто.ТаблицаАналитики КАК ТаблицаАналитики
	|ПОМЕСТИТЬ ТабВидыСубконто
	|ИЗ
	|	&ТабВидыСубконто КАК ТабВидыСубконто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеВнешнимИБ.Ссылка КАК Ссылка,
	|	СоответствиеВнешнимИБ.ТипОбъектаКонсолидации + ""."" + (ВЫРАЗИТЬ(СоответствиеВнешнимИБ.ИмяОбъектаМетаданных КАК СТРОКА(255))) КАК ТаблицаАналитики
	|ПОМЕСТИТЬ СоответствияВнешнимИБ
	|ИЗ
	|	Справочник.СоответствиеВнешнимИБ КАК СоответствиеВнешнимИБ
	|ГДЕ
	|	НЕ СоответствиеВнешнимИБ.ТипОбъектаКонсолидации = ""ВидСубконто""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТабВидыСубконто.Ссылка,
	|	ТабВидыСубконто.ТаблицаАналитики
	|ИЗ
	|	ТабВидыСубконто КАК ТабВидыСубконто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствияВнешнимИБ.Ссылка КАК Ссылка,
	|	ОписанияОбъектовБД.ОписаниеОбъектаБД КАК ОписаниеОбъектаБД
	|ИЗ
	|	СоответствияВнешнимИБ КАК СоответствияВнешнимИБ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОписанияОбъектовБД КАК ОписанияОбъектовБД
	|		ПО СоответствияВнешнимИБ.ТаблицаАналитики = ОписанияОбъектовБД.ТаблицаАналитики";
	
	Запрос.УстановитьПараметр("ТабВидыСубконто",ТабВидыСубконто);
	
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		Если ЗначениеЗаполнено(Результат.ОписаниеОбъектаБД) Тогда
			
			СправочникОбъект=Результат.Ссылка.ПолучитьОбъект();
			СправочникОбъект.ОписаниеОбъектаТек=Результат.ОписаниеОбъектаБД;
			СправочникОбъект.ОбменДанными.Загрузка=Истина;
			СправочникОбъект.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьОписанияОбъектовТек()

Процедура ОбновитьНаименованиеТЧ() Экспорт
	
	СправочникТЧ=Справочники.ТабличныеЧастиБД.Выбрать();
	
	Пока СправочникТЧ.Следующий() Цикл
		
		СправочникОбъект=СправочникТЧ.Ссылка.ПолучитьОбъект();
		СправочникОбъект.Наименование=СправочникОбъект.Имя;
		СправочникОбъект.ОбменДанными.Загрузка=Истина;
		СправочникОбъект.Записать();
		
	КонецЦикла;	
			
КонецПроцедуры // ОбновитьНаименованиеТЧ() 

Процедура ОбновлениеНастроекЭкземпляровОтчетов() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	НастраиваемыйОтчет.Ссылка КАК ЭкзеплярСсылка
	               |ИЗ
	               |	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет";
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Эобъект = Выборка.ЭкзеплярСсылка.ПолучитьОбъект();
		Эобъект.ОбменДанными.Загрузка = Истина;
		Эобъект.ПериодОкончания =  Эобъект.ПериодОтчета;
		Эобъект.УправлениеПериодом =  ВернутьСвязанныйУОП(Эобъект.Ссылка);
		Эобъект.Записать();	 
	КонецЦикла;
		
КонецПроцедуры // ОбновлениеНастроекЭкземпляровОтчетов() 
	
Функция ВернутьСвязанныйУОП(ЭоСсылка)
	
	 Запрос = Новый Запрос;
	 Запрос.Текст = "ВЫБРАТЬ
	 |	СтатусыПериодовСценариев.УправлениеПериодомСценария КАК УправлениеПериодомСценария
	 |ИЗ
	 |	РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	 |ГДЕ
	 |	СтатусыПериодовСценариев.Сценарии = &Сценарии
	 |	И СтатусыПериодовСценариев.Периоды = &Периоды
	 |	И СтатусыПериодовСценариев.Организации = &Организации";
	 
	 Запрос.УстановитьПараметр("Сценарии",ЭоСсылка.Сценарий);
	 Запрос.УстановитьПараметр("Периоды",ЭоСсылка.ПериодОтчета);
     Запрос.УстановитьПараметр("Организации",ЭоСсылка.Организация);
	 
	 
	 Результат = Запрос.Выполнить();
	 Выборка = Результат.Выбрать();
	 
	 Пока Выборка.Следующий() Цикл
	 
	 	  Возврат Выборка.УправлениеПериодомСценария;
	 
	 КонецЦикла;
	 
	 Возврат Документы.УправлениеПериодомСценария.ПустаяСсылка();
	
КонецФункции	

Процедура ПеренестиИнициативыВМероприятия() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдалитьИнициативы.Ссылка КАК Ссылка,
		|	УдалитьИнициативы.Наименование КАК Наименование,
		|	УдалитьИнициативы.ДатаНачала КАК ДатаНачала,
		|	УдалитьИнициативы.ДатаОкончания КАК ДатаОкончания,
		|	УдалитьИнициативы.Ответственный КАК Ответственный,
		|	УдалитьИнициативы.Организация КАК Организация,
		|	УдалитьИнициативы.ПроцентВыполнения КАК ПроцентВыполнения,
		|	УдалитьИнициативы.Описание КАК Описание,
		|	УдалитьИнициативы.ЗатратыПлан КАК ЗатратыПлан,
		|	УдалитьИнициативы.ЗатратыФакт КАК ЗатратыФакт,
		|	УдалитьИнициативы.Цель КАК Цель
		|ИЗ
		|	Справочник.УдалитьИнициативы КАК УдалитьИнициативы
		|ГДЕ
		|	НЕ УдалитьИнициативы.ПометкаУдаления";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ТекДата = ТекущаяДатаСеанса();
	ВидМероприятияИнициатива = Перечисления.ВидыМероприятий.Инициатива;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НовыйДокумент = Документы.Мероприятие.СоздатьДокумент();
		НовыйДокумент.Дата					 = ТекДата;
		НовыйДокумент.ВидМероприятия		 = ВидМероприятияИнициатива;
		НовыйДокумент.НаименованиеРеакции	 = ВыборкаДетальныеЗаписи.Наименование;
		НовыйДокумент.ДатаНачала			 = ВыборкаДетальныеЗаписи.ДатаНачала;
		НовыйДокумент.ДатаОкончания			 = ВыборкаДетальныеЗаписи.ДатаОкончания;
		НовыйДокумент.Ответственный			 = ВыборкаДетальныеЗаписи.Ответственный;
		НовыйДокумент.Организация			 = ВыборкаДетальныеЗаписи.Организация;
		НовыйДокумент.ОбщийПрогресс			 = ВыборкаДетальныеЗаписи.ПроцентВыполнения;
		НовыйДокумент.Описание				 = ВыборкаДетальныеЗаписи.Описание;
		НовыйДокумент.ПлановыеЗатраты		 = ВыборкаДетальныеЗаписи.ЗатратыПлан;
		НовыйДокумент.ФактическиеЗатраты	 = ВыборкаДетальныеЗаписи.ЗатратыФакт;
		НовыйДокумент.Контекст				 = ВыборкаДетальныеЗаписи.Цель;
		Для Каждого ТекУчастники Из ВыборкаДетальныеЗаписи.Ссылка.Участники Цикл
			НоваяСтрока = НовыйДокумент.Участники.Добавить();
			НоваяСтрока.Пользователь = ТекУчастники.Пользователь;
		КонецЦикла;	
		НовыйДокумент.Записать();
	КонецЦикла;
КонецПроцедуры		 // ПеренестиИнициативыВМероприятия()

Процедура ЗадатьНастройкиДокументаИнцидент() Экспорт
	ПеречислениеБД = Справочники.ПеречисленияБД.НайтиПоНаименованию("СостоянияИнцидентов", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	ДокументБД = Справочники.ДокументыБД.НайтиПоНаименованию("РисковоеСобытие", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	ДокументОбъект = ДокументБД.ПолучитьОбъект();
	ДокументОбъект.Согласуется = Истина;
	ДокументОбъект.РеквизитСостояния = ПеречислениеБД;
	ДокументОбъект.РеквизитСостоянияСтрока = "Перечисление." + Строка(ПеречислениеБД);
	ДокументОбъект.ЗначениеРеквизитаСостоянияНаУтверждении = Перечисления.СостоянияИнцидентов.НаУтверждении;
	ДокументОбъект.ЗначениеРеквизитаСостоянияУтвержден = Перечисления.СостоянияИнцидентов.Открыт;
	ДокументОбъект.ЗначениеРеквизитаСостоянияОтклонен = Перечисления.СостоянияИнцидентов.Отклонен;
	ДокументОбъект.ЗначениеРеквизитаСостоянияЧерновик = Перечисления.СостоянияИнцидентов.Черновик;
	ДокументОбъект.Записать();
КонецПроцедуры		// ЗадатьНастройкиДокументаИнцидент()

Процедура ЗадатьНастройкиДокументаМероприятие() Экспорт
	ПеречислениеБД = Справочники.ПеречисленияБД.НайтиПоНаименованию("СостоянияМероприятий", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	ДокументБД = Справочники.ДокументыБД.НайтиПоНаименованию("Мероприятие", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	ДокументОбъект = ДокументБД.ПолучитьОбъект();
	ДокументОбъект.Согласуется = Истина;
	ДокументОбъект.РеквизитСостояния = ПеречислениеБД;
	ДокументОбъект.РеквизитСостоянияСтрока = "Перечисление." + Строка(ПеречислениеБД);
	ДокументОбъект.ЗначениеРеквизитаСостоянияНаУтверждении	 = Перечисления.СостоянияМероприятий.НаУтверждении;
	ДокументОбъект.ЗначениеРеквизитаСостоянияУтвержден		 = Перечисления.СостоянияМероприятий.Утверждено;
	ДокументОбъект.ЗначениеРеквизитаСостоянияОтклонен		 = Перечисления.СостоянияМероприятий.Отклонено;
	ДокументОбъект.ЗначениеРеквизитаСостоянияЧерновик		 = Перечисления.СостоянияМероприятий.Черновик;
	ДокументОбъект.Записать();
КонецПроцедуры		// ЗадатьНастройкиДокументаМероприятие()

Процедура ЗадатьНастройкиСправочникаРиски() Экспорт
	ПеречислениеБД = Справочники.ПеречисленияБД.НайтиПоНаименованию("СостоянияСогласования", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	СправочникБД = Справочники.СправочникиБД.НайтиПоНаименованию("Риски", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	СправочникОбъект = СправочникБД.ПолучитьОбъект();
	СправочникОбъект.Согласуется = Истина;
	СправочникОбъект.РеквизитСостояния = ПеречислениеБД;
	СправочникОбъект.РеквизитСостоянияСтрока = "Перечисление." + Строка(ПеречислениеБД);
	СправочникОбъект.ЗначениеРеквизитаСостоянияНаУтверждении = Перечисления.СостоянияСогласования.НаУтверждении;
	СправочникОбъект.ЗначениеРеквизитаСостоянияУтвержден = Перечисления.СостоянияСогласования.Утверждена;
	СправочникОбъект.ЗначениеРеквизитаСостоянияОтклонен = Перечисления.СостоянияСогласования.Отклонена;
	СправочникОбъект.ЗначениеРеквизитаСостоянияЧерновик = Перечисления.СостоянияСогласования.Черновик;
	СправочникОбъект.Записать();
КонецПроцедуры		// ЗадатьНастройкиСправочникаРиски()

Процедура ПометитьПредопределенныеЛотыКакСкрытыйНаСервере() Экспорт
	мНаименований = Новый Массив;
	мНаименований.Добавить("Вне программы закупок");
	мНаименований.Добавить("К распределению");
	мНаименований.Добавить("Внутригрупповые перемещения");
	мНаименований.Добавить("По действующему договору");
	мНаименований.Добавить("По программе закупок");
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Лоты.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Лоты КАК Лоты
		|ГДЕ
		|	Лоты.Наименование В(&мНаименований)
		|	И НЕ Лоты.Скрыт";
	Запрос.УстановитьПараметр("мНаименований", мНаименований);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ЛотОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ЛотОбъект.Скрыт = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЛотОбъект, Ложь, Ложь);
	КонецЦикла;
КонецПроцедуры

Процедура СоздатьЗакупочныеКомпанииИСтрокиПлановЗакупкиЛотов() Экспорт
	РеквизитыПеремещеныВЗакупку = Справочники.Лоты.ПолучитьРеквизитыЛотаПеремещенныеВЗакупочнуюПроцедуру();
	РеквизитыПеремещеныВСтрокуПлана = Справочники.Лоты.ПолучитьРеквизитыЛотаПеремещенныеВСтрокуПлана();
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Лоты.Ссылка КАК Ссылка,
		|	Лоты.Владелец = ЗНАЧЕНИЕ(Справочник.ЗакупочныеПроцедуры.ПустаяСсылка) КАК СоздатьЗакупку,
		|	Лоты.СтрокаПланаЗакупок = ЗНАЧЕНИЕ(Документ.СтрокаПланаЗакупок.ПустаяСсылка) КАК СоздатьСтрокуПлана,
		|	НЕ Лоты.ПометкаУдаления
		|		И НЕ Лоты.УдалитьСтатус В (&СтатусыЛотаНЕВГПЗ)
		|		И Лоты.УдалитьСтатус <> ЗНАЧЕНИЕ(Перечисление.СтатусыЛотов.ПустаяСсылка) КАК ПроводитьСтрокуПлана
		|ИЗ
		|	Справочник.Лоты КАК Лоты
		|ГДЕ
		|	НЕ Лоты.Скрыт
		|	И (Лоты.Владелец = ЗНАЧЕНИЕ(Справочник.ЗакупочныеПроцедуры.ПустаяСсылка)
		|			ИЛИ Лоты.СтрокаПланаЗакупок = ЗНАЧЕНИЕ(Документ.СтрокаПланаЗакупок.ПустаяСсылка))";
	Запрос.УстановитьПараметр("СтатусыЛотаНЕВГПЗ", Перечисления.СтатусыЛотов.ПолучитьСтатусыЛотаДоВключенияВГПЗ());
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			ЛотОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			Если ВыборкаДетальныеЗаписи.СоздатьЗакупку Тогда
				ЛотОбъект.Владелец = СоздатьЗакупочнуюПроцедуруПоЛоту(
					ЛотОбъект, 
					РеквизитыПеремещеныВЗакупку);
			КонецЕсли;
			Если ВыборкаДетальныеЗаписи.СоздатьСтрокуПлана Тогда
				ЛотОбъект.СтрокаПланаЗакупок = СоздатьСтрокуПланаПоЛоту(
					ЛотОбъект,
					РеквизитыПеремещеныВСтрокуПлана,
					ВыборкаДетальныеЗаписи.ПроводитьСтрокуПлана);
			КонецЕсли;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЛотОбъект, Ложь, Ложь);
			ЗафиксироватьТранзакцию();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось создать закупочную процедуру и строку плана закупок на основании лота
	                                   |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.Лоты,
				ЛотОбъект.Ссылка, 
				ТекстСообщения);
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Функция СоздатьЗакупочнуюПроцедуруПоЛоту(ЛотОбъект, РеквизитыПеремещеныВЗакупку)
	ЗакупкаОбъект = Справочники.ЗакупочныеПроцедуры.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(ЗакупкаОбъект, ЛотОбъект, , "Родитель, Владелец");
	ЗакупкаОбъект.ТребованияКПоставщикам.Загрузить(
		ЛотОбъект.ТребованияКПоставщикам.Выгрузить());
	ЗакупкаОбъект.ТребованияКСоставуДокументов.Загрузить(
		ЛотОбъект.ТребованияКСоставуДокументов.Выгрузить());
	ЗаполнитьУдаленнымиРеквизитами(ЗакупкаОбъект, ЛотОбъект, РеквизитыПеремещеныВЗакупку);
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЗакупкаОбъект, Ложь, Ложь);
	Возврат ЗакупкаОбъект.Ссылка;
КонецФункции

Функция СоздатьСтрокуПланаПоЛоту(ЛотОбъект, 
								РеквизитыПеремещеныВСтрокуПлана, 
								ПроводитьСтрокуПлана)
	СтрокаПланаОбъект = Документы.СтрокаПланаЗакупок.СоздатьДокумент();
	ЗаполнитьЗначенияСвойств(СтрокаПланаОбъект, ЛотОбъект);
	ЗаполнитьУдаленнымиРеквизитами(
		СтрокаПланаОбъект, 
		ЛотОбъект, 
		РеквизитыПеремещеныВСтрокуПлана);
	СтрокаПланаОбъект.Дата = ?(ЗначениеЗаполнено(
			ЛотОбъект.УдалитьДатаОфициальногоОбъявленияЗакупки), 
			ЛотОбъект.УдалитьДатаОфициальногоОбъявленияЗакупки,
			ТекущаяДатаСеанса());
	СтрокаПланаОбъект.СуммаДокумента = ЛотОбъект.СуммаЛота;
	СтрокаПланаОбъект.Заполнить(ЛотОбъект);
	СтрокаПланаОбъект.Номенклатура.Загрузить(
		ЛотОбъект.Номенклатура.Выгрузить());
	СтрокаПланаОбъект.ИдентификаторСтрокиПланаЗакупок =
		Справочники.ИдентификаторыСтрокПлановЗакупок.ПолучитьДляСтрокиПлана(
			СтрокаПланаОбъект);
	СтрокаПланаОбъект.Проведен = ПроводитьСтрокуПлана;
	ОбновлениеИнформационнойБазы.ЗаписатьОбъект(
		СтрокаПланаОбъект, 
		Ложь, 
		Ложь);
	Ссылка = СтрокаПланаОбъект.Ссылка;
	Если ПроводитьСтрокуПлана Тогда
		// Закрываем потребности
		НаборЗаписей = РегистрыНакопления.ПотребностиВНоменклатуре.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
		РегистрыНакопления.ПотребностиВНоменклатуре.ДобавитьОбеспечениеПотребности(
			НаборЗаписей,
			ПолучитьВыборкуДляЗаписиОбеспеченияПоСтрокеПланаЗакупок(
				ЛотОбъект.Ссылка,
				СтрокаПланаОбъект));
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		// Строка в регистре плана
		НаборЗаписей = РегистрыСведений.СтрокиПланаЗакупок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
		НоваяЗапись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаПланаОбъект);
		НоваяЗапись.Регистратор = Ссылка;
		НоваяЗапись.Период =  СтрокаПланаОбъект.Дата;
		НоваяЗапись.СтрокаПлана = Ссылка;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		// НМЦСтроки
		НаборЗаписей = РегистрыСведений.НМЦСтрокиПланаЗакупок.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Регистратор = Ссылка;
		НоваяЗапись.Период = СтрокаПланаОбъект.Дата;
		НоваяЗапись.СтрокаПлана = Ссылка;
		НоваяЗапись.Сумма = СтрокаПланаОбъект.СуммаДокумента;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
	КонецЕсли;
	Возврат Ссылка;
КонецФункции

Функция ПолучитьВыборкуДляЗаписиОбеспеченияПоСтрокеПланаЗакупок(Лот, СтрокаПланаОбъект)
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	&Ссылка КАК Регистратор,
		|	&Дата КАК Период,
		|	ЗНАЧЕНИЕ(Справочник.ПриоритетыПотребностей.Обычный) КАК Приоритет,
		|	УдалитьПланОбеспеченияПотребностей.Номенклатура КАК Номенклатура,
		|	УдалитьПланОбеспеченияПотребностей.ПериодПотребности КАК ПериодПотребности,
		|	УдалитьПланОбеспеченияПотребностей.Организация КАК Организация,
		|	МестаПоставки.Ссылка КАК МестоПоставки,
		|	УдалитьПланОбеспеченияПотребностей.Проект КАК Проект,
		|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК Менеджер,
		|	ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорСПокупателем,
		|	МАКСИМУМ(УдалитьПланОбеспеченияПотребностей.Количество) КАК Количество,
		|	МАКСИМУМ(УдалитьПланОбеспеченияПотребностей.Сумма) КАК Сумма,
		|	УдалитьПланОбеспеченияПотребностей.Коэффициент КАК Коэффициент,
		|	УдалитьПланОбеспеченияПотребностей.ЕдиницаИзмерения КАК ЕдиницаИзмерения
		|ИЗ
		|	РегистрСведений.УдалитьПланОбеспеченияПотребностей КАК УдалитьПланОбеспеченияПотребностей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.МестаПоставки КАК МестаПоставки
		|		ПО УдалитьПланОбеспеченияПотребностей.УдалитьСклад = МестаПоставки.Склад
		|ГДЕ
		|	УдалитьПланОбеспеченияПотребностей.УдалитьЛот = &Лот
		|
		|СГРУППИРОВАТЬ ПО
		|	МестаПоставки.Ссылка,
		|	УдалитьПланОбеспеченияПотребностей.Организация,
		|	УдалитьПланОбеспеченияПотребностей.ПериодПотребности,
		|	УдалитьПланОбеспеченияПотребностей.ЕдиницаИзмерения,
		|	УдалитьПланОбеспеченияПотребностей.Номенклатура,
		|	УдалитьПланОбеспеченияПотребностей.Проект,
		|	УдалитьПланОбеспеченияПотребностей.Коэффициент";
	Запрос.УстановитьПараметр("Лот",	Лот);
	Запрос.УстановитьПараметр("Ссылка",	СтрокаПланаОбъект.Ссылка);
	Запрос.УстановитьПараметр("Дата", СтрокаПланаОбъект.Дата);
	РезультатЗапроса = Запрос.Выполнить();
	Возврат РезультатЗапроса.Выбрать();
КонецФункции

Процедура ЗаполнитьУдаленнымиРеквизитами(Приемник, Источник, ИменаРеквизитов)
	Для Каждого КлючИмяРеквизита Из ИменаРеквизитов Цикл
		ИмяРеквизита = КлючИмяРеквизита.Ключ;
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Приемник, ИмяРеквизита) Тогда
			ИмяРеквизитаИсточник = "Удалить" + ИмяРеквизита;
			Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Источник, ИмяРеквизитаИсточник) Тогда
				Приемник[ИмяРеквизита] = Источник[ИмяРеквизитаИсточник];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьРегистрЗаказыПоставщикам() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ЗаказыПоставщикам.Регистратор КАК Регистратор,
		|	ЕСТЬNULL(ЗаказыПоставщикам.ЗаказПоставщику.ДоговорКонтрагента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Договор
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам КАК ЗаказыПоставщикам
		|ГДЕ
		|	(ЗаказыПоставщикам.Приоритет = ЗНАЧЕНИЕ(Справочник.ПриоритетыПотребностей.ПустаяСсылка)
		|			ИЛИ ЗаказыПоставщикам.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|				И ЗаказыПоставщикам.ЗаказПоставщику.ДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ПриоритетОбычный = Справочники.ПриоритетыПотребностей.Обычный;
	НаборЗаписей = РегистрыНакопления.ЗаказыПоставщикам.СоздатьНаборЗаписей();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
			НаборЗаписей.Прочитать();
			Для Каждого Запись Из НаборЗаписей Цикл
				Если НЕ ЗначениеЗаполнено(Запись.Договор) Тогда
					Запись.Договор =  ВыборкаДетальныеЗаписи.Договор;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(Запись.Приоритет) Тогда
					Запись.Приоритет = ПриоритетОбычный;
				КонецЕсли;
			КонецЦикла;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			ЗафиксироватьТранзакцию();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось создать закупочную процедуру и строку плана закупок на основании лота
	                                   |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ЗаказПоставщику,
				ВыборкаДетальныеЗаписи.Регистратор, 
				ТекстСообщения);
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ВызватьИсключение;
		КонецПопытки;
		НаборЗаписей.Очистить();
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьПредложенияПоставщиковВРегистры() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументПредложениеПоставщика.Ссылка КАК Ссылка,
		|	МАКСИМУМ(КурсыВалютДокумента.Период) КАК ПериодВалютыДокумента,
		|	МАКСИМУМ(КурсыВалютЦЗ.Период) КАК ПериодВалютыЦЗ,
		|	КурсыВалютЦЗ.Валюта КАК ВалютаЦЗ,
		|	КурсыВалютДокумента.Валюта КАК ВалютаДокумента
		|ПОМЕСТИТЬ ДокументыДляПроведения
		|ИЗ
		|	Документ.ПредложениеПоставщика КАК ДокументПредложениеПоставщика
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютДокумента
		|		ПО (КурсыВалютДокумента.Период < ДокументПредложениеПоставщика.Дата)
		|			И ДокументПредложениеПоставщика.ВалютаДокумента = КурсыВалютДокумента.Валюта
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютЦЗ
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Константа.ВалютаУчетаЦентрализованныхЗакупок КАК ВалютаУчетаЦентрализованныхЗакупок
		|			ПО КурсыВалютЦЗ.Валюта = ВалютаУчетаЦентрализованныхЗакупок.Значение
		|		ПО (КурсыВалютЦЗ.Период < ДокументПредложениеПоставщика.Дата)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УсловияПредложенийПоставщиков КАК УсловияПредложенийПоставщиков
		|		ПО ДокументПредложениеПоставщика.Ссылка = УсловияПредложенийПоставщиков.Регистратор
		|ГДЕ
		|	УсловияПредложенийПоставщиков.Регистратор ЕСТЬ NULL
		|	И ДокументПредложениеПоставщика.Проведен
		|	И ДокументПредложениеПоставщика.ДопущенКУчастию
		|
		|СГРУППИРОВАТЬ ПО
		|	ДокументПредложениеПоставщика.Ссылка,
		|	КурсыВалютЦЗ.Валюта,
		|	КурсыВалютДокумента.Валюта
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.Ссылка КАК Регистратор,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.Ссылка.Дата КАК Период,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.Ссылка.Лот.Владелец КАК ЗакупочнаяПроцедура,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.Ссылка.Лот КАК Лот,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.Ссылка КАК ПредложениеПоставщика,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.Номенклатура КАК Номенклатура,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.ПериодПотребности КАК ПериодПотребности,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.МестоПоставки КАК МестоПоставки,
		|	СУММА(ПредложениеПоставщикаУсловияПоНоменклатуре.Количество * ПредложениеПоставщикаУсловияПоНоменклатуре.Коэффициент) КАК Количество,
		|	СРЕДНЕЕ(ПредложениеПоставщикаУсловияПоНоменклатуре.Цена * ВЫБОР
		|			КОГДА КурсыВалютДокумента.Валюта ЕСТЬ NULL
		|				ТОГДА 1
		|			ИНАЧЕ КурсыВалютДокумента.Курс / ВЫБОР
		|					КОГДА КурсыВалютДокумента.Кратность = 0
		|						ТОГДА 1
		|					ИНАЧЕ КурсыВалютДокумента.Кратность
		|				КОНЕЦ * ВЫБОР
		|					КОГДА КурсыВалютЦЗ.Валюта ЕСТЬ NULL
		|						ТОГДА 1
		|					ИНАЧЕ КурсыВалютЦЗ.Кратность / ВЫБОР
		|							КОГДА КурсыВалютЦЗ.Курс = 0
		|								ТОГДА 1
		|							ИНАЧЕ КурсыВалютЦЗ.Курс
		|						КОНЕЦ
		|				КОНЕЦ
		|		КОНЕЦ) КАК Цена,
		|	СУММА(ПредложениеПоставщикаУсловияПоНоменклатуре.Сумма * ВЫБОР
		|			КОГДА КурсыВалютДокумента.Валюта ЕСТЬ NULL
		|				ТОГДА 1
		|			ИНАЧЕ КурсыВалютДокумента.Курс / ВЫБОР
		|					КОГДА КурсыВалютДокумента.Кратность = 0
		|						ТОГДА 1
		|					ИНАЧЕ КурсыВалютДокумента.Кратность
		|				КОНЕЦ * ВЫБОР
		|					КОГДА КурсыВалютЦЗ.Валюта ЕСТЬ NULL
		|						ТОГДА 1
		|					ИНАЧЕ КурсыВалютЦЗ.Кратность / ВЫБОР
		|							КОГДА КурсыВалютЦЗ.Курс = 0
		|								ТОГДА 1
		|							ИНАЧЕ КурсыВалютЦЗ.Курс
		|						КОНЕЦ
		|				КОНЕЦ
		|		КОНЕЦ) КАК Сумма,
		|	СУММА(ПредложениеПоставщикаУсловияПоНоменклатуре.СуммаНДС * ВЫБОР
		|			КОГДА КурсыВалютДокумента.Валюта ЕСТЬ NULL
		|				ТОГДА 1
		|			ИНАЧЕ КурсыВалютДокумента.Курс / ВЫБОР
		|					КОГДА КурсыВалютДокумента.Кратность = 0
		|						ТОГДА 1
		|					ИНАЧЕ КурсыВалютДокумента.Кратность
		|				КОНЕЦ * ВЫБОР
		|					КОГДА КурсыВалютЦЗ.Валюта ЕСТЬ NULL
		|						ТОГДА 1
		|					ИНАЧЕ КурсыВалютЦЗ.Кратность / ВЫБОР
		|							КОГДА КурсыВалютЦЗ.Курс = 0
		|								ТОГДА 1
		|							ИНАЧЕ КурсыВалютЦЗ.Курс
		|						КОНЕЦ
		|				КОНЕЦ
		|		КОНЕЦ) КАК СуммаНДС,
		|	МАКСИМУМ(ПредложениеПоставщикаУсловияПоНоменклатуре.Коэффициент) КАК Коэффициент,
		|	МАКСИМУМ(ПредложениеПоставщикаУсловияПоНоменклатуре.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.СтавкаНДС КАК СтавкаНДС
		|ИЗ
		|	Документ.ПредложениеПоставщика.УсловияПоНоменклатуре КАК ПредложениеПоставщикаУсловияПоНоменклатуре
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДокументыДляПроведения КАК ДокументыДляПроведения
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютЦЗ
		|			ПО (КурсыВалютЦЗ.Период = ДокументыДляПроведения.ПериодВалютыЦЗ)
		|				И (КурсыВалютЦЗ.Валюта = ДокументыДляПроведения.ВалютаЦЗ)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалютДокумента
		|			ПО (КурсыВалютДокумента.Период = ДокументыДляПроведения.ПериодВалютыДокумента)
		|				И (КурсыВалютДокумента.Валюта = ДокументыДляПроведения.ПериодВалютыДокумента)
		|		ПО ПредложениеПоставщикаУсловияПоНоменклатуре.Ссылка = ДокументыДляПроведения.Ссылка
		|ГДЕ
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.Количество <> 0
		|
		|СГРУППИРОВАТЬ ПО
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.ПериодПотребности,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.МестоПоставки,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.Номенклатура,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.Ссылка.Дата,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.Ссылка.Лот,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.Ссылка.Лот.Владелец,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.Ссылка,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.СтавкаНДС,
		|	ПредложениеПоставщикаУсловияПоНоменклатуре.Ссылка
		|ИТОГИ ПО
		|	Регистратор";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПоРегистратору = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	НаборЗаписей = РегистрыСведений.УсловияПредложенийПоставщиков.СоздатьНаборЗаписей();
	Пока ВыборкаПоРегистратору.Следующий() Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаПоРегистратору.Регистратор);
		НачатьТранзакцию();
		Попытка
			РегистрыСведений.УсловияПредложенийПоставщиков.ДобавитьЗаписи(
				НаборЗаписей,
				ВыборкаПоРегистратору.Выбрать(ОбходРезультатаЗапроса.Прямой));
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			ЗафиксироватьТранзакцию();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось записать движения регистра сведений ""Условия предложений поставщиков""
	                                   |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ПредложениеПоставщика,
				ВыборкаПоРегистратору.Регистратор, 
				ТекстСообщения);
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ВызватьИсключение;
		КонецПопытки;
		НаборЗаписей.Очистить();
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьУсловияПоставокНоменклатурыВРегистры() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УдалитьУсловияПоставокНоменклатурыТолькоСпецификации.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	УдалитьУсловияПоставокНоменклатурыТолькоСпецификации.СпецификацияДоговора КАК СпецификацияДоговора
		|ПОМЕСТИТЬ Спецификации
		|ИЗ
		|	РегистрСведений.УдалитьУсловияПоставокНоменклатуры КАК УдалитьУсловияПоставокНоменклатурыТолькоСпецификации
		|ГДЕ
		|	УдалитьУсловияПоставокНоменклатурыТолькоСпецификации.СпецификацияДоговора <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|	И УдалитьУсловияПоставокНоменклатурыТолькоСпецификации.ДоговорКонтрагента.ВидДоговораУХ = ЗНАЧЕНИЕ(Справочник.ВидыДоговоровКонтрагентовУХ.СПоставщиком)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УдалитьУсловияПоставокНоменклатуры.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	УдалитьУсловияПоставокНоменклатуры.СпецификацияДоговора КАК СпецификацияДоговора,
		|	УдалитьУсловияПоставокНоменклатуры.ДоговорКонтрагента КАК ДоговорВерсииСоглашения
		|ПОМЕСТИТЬ ДоговорыДляОбработки
		|ИЗ
		|	РегистрСведений.УдалитьУсловияПоставокНоменклатуры КАК УдалитьУсловияПоставокНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Спецификации КАК Спецификации
		|		ПО УдалитьУсловияПоставокНоменклатуры.ДоговорКонтрагента = Спецификации.ДоговорКонтрагента
		|ГДЕ
		|	Спецификации.ДоговорКонтрагента ЕСТЬ NULL
		|	И УдалитьУсловияПоставокНоменклатуры.ДоговорКонтрагента.ВидДоговораУХ = ЗНАЧЕНИЕ(Справочник.ВидыДоговоровКонтрагентовУХ.СПоставщиком)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Спецификации.ДоговорКонтрагента,
		|	Спецификации.СпецификацияДоговора,
		|	Спецификации.СпецификацияДоговора
		|ИЗ
		|	Спецификации КАК Спецификации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоговорыДляОбработки.ДоговорВерсииСоглашения.ВерсияСоглашения КАК Регистратор,
		|	ДоговорыДляОбработки.ДоговорВерсииСоглашения.ВерсияСоглашения.Дата КАК Период,
		|	ДоговорыДляОбработки.ДоговорВерсииСоглашения КАК Договор,
		|	ЗНАЧЕНИЕ(Справочник.ПриоритетыПотребностей.Обычный) КАК Приоритет,
		|	УдалитьУсловияПоставокНоменклатуры.Номенклатура КАК Номенклатура,
		|	УдалитьУсловияПоставокНоменклатуры.ПериодПотребности КАК ПериодПотребности,
		|	УдалитьУсловияПоставокНоменклатуры.Организация КАК Организация,
		|	УдалитьУсловияПоставокНоменклатуры.МестоПоставки КАК МестоПоставки,
		|	УдалитьУсловияПоставокНоменклатуры.Проект КАК Проект,
		|	УдалитьУсловияПоставокНоменклатуры.Лот КАК Лот,
		|	УдалитьУсловияПоставокНоменклатуры.Количество КАК Количество,
		|	УдалитьУсловияПоставокНоменклатуры.Сумма КАК Сумма,
		|	УдалитьУсловияПоставокНоменклатуры.Коэффициент КАК Коэффициент,
		|	УдалитьУсловияПоставокНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	УдалитьУсловияПоставокНоменклатуры.Цена КАК Цена,
		|	НЕ УдалитьУсловияПоставокНоменклатуры.Лот.Скрыт КАК ЭтоЛот
		|ИЗ
		|	РегистрСведений.УдалитьУсловияПоставокНоменклатуры КАК УдалитьУсловияПоставокНоменклатуры
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ДоговорыДляОбработки КАК ДоговорыДляОбработки
		|		ПО УдалитьУсловияПоставокНоменклатуры.ДоговорКонтрагента = ДоговорыДляОбработки.ДоговорКонтрагента
		|			И УдалитьУсловияПоставокНоменклатуры.СпецификацияДоговора = ДоговорыДляОбработки.СпецификацияДоговора
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланПоставокПоДоговорам.Обороты КАК ПланПоставокПоДоговорамОбороты
		|		ПО (ПланПоставокПоДоговорамОбороты.Договор = ДоговорыДляОбработки.ДоговорВерсииСоглашения)
		|ГДЕ
		|	ПланПоставокПоДоговорамОбороты.Договор ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	Лот
		|ИТОГИ ПО
		|	Регистратор,
		|	ЭтоЛот";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПоРегистратору = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ПотребностиВНоменклатуре = РегистрыНакопления.ПотребностиВНоменклатуре.СоздатьНаборЗаписей();
	ДоговорыПоЗакупочнымПроцедурам = РегистрыСведений.ДоговорыПоЗакупочнымПроцедурам.СоздатьНаборЗаписей();
	ПланПоставокПоДоговорам = РегистрыНакопления.ПланПоставокПоДоговорам.СоздатьНаборЗаписей();
	Пока ВыборкаПоРегистратору.Следующий() Цикл
		ПотребностиВНоменклатуре.Отбор.Регистратор.Установить(ВыборкаПоРегистратору.Регистратор);
		ПланПоставокПоДоговорам.Отбор.Регистратор.Установить(ВыборкаПоРегистратору.Регистратор);
		ВыборкаТиповЛотов = ВыборкаПоРегистратору.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаТиповЛотов.Следующий() Цикл
			ВыборкаЗаписей = ВыборкаТиповЛотов.Выбрать(ОбходРезультатаЗапроса.Прямой);
			ЭтоЛот = ВыборкаТиповЛотов.ЭтоЛот;
			НачатьТранзакцию();
			Попытка
				Если ЭтоЛот Тогда
					ЗаписатьРегистрСведенийДоговорыПоЗакупочнымПроцедурам(
						ДоговорыПоЗакупочнымПроцедурам,
						ВыборкаПоРегистратору.Регистратор,
						ВыборкаЗаписей);
					ДоговорыПоЗакупочнымПроцедурам.Очистить();
					ВыборкаЗаписей.Сбросить();
				Иначе
					РегистрыНакопления.ПотребностиВНоменклатуре.ДобавитьРазмещениеВДоговоре(
						ПотребностиВНоменклатуре,
						ВыборкаЗаписей);
					ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПотребностиВНоменклатуре);
					ПотребностиВНоменклатуре.Очистить();
					ВыборкаЗаписей.Сбросить();
				КонецЕсли;
				РегистрыНакопления.ПланПоставокПоДоговорам.ДобавитьВПланПоставок(
					ПланПоставокПоДоговорам,
					ВыборкаЗаписей);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПланПоставокПоДоговорам);
				ПланПоставокПоДоговорам.Очистить();
				ЗафиксироватьТранзакцию();
			Исключение
				ШаблонСообщения = НСтр("ru = 'Не удалось записать движения регистра сведений ""Условия предложений поставщиков""
		                                   |%1'");
				ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Документы.ПредложениеПоставщика,
					ВыборкаПоРегистратору.Регистратор, 
					ТекстСообщения);
				Если ТранзакцияАктивна() Тогда
					ОтменитьТранзакцию();
				КонецЕсли;
				ВызватьИсключение;
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьТЧНоменклатураДоговоров() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УдалитьУсловияПоставокНоменклатурыТолькоСпецификации.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	УдалитьУсловияПоставокНоменклатурыТолькоСпецификации.СпецификацияДоговора КАК СпецификацияДоговора
		|ПОМЕСТИТЬ Спецификации
		|ИЗ
		|	РегистрСведений.УдалитьУсловияПоставокНоменклатуры КАК УдалитьУсловияПоставокНоменклатурыТолькоСпецификации
		|ГДЕ
		|	УдалитьУсловияПоставокНоменклатурыТолькоСпецификации.СпецификацияДоговора <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
		|	И УдалитьУсловияПоставокНоменклатурыТолькоСпецификации.ДоговорКонтрагента.ВидДоговораУХ = ЗНАЧЕНИЕ(Справочник.ВидыДоговоровКонтрагентовУХ.СПоставщиком)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	УдалитьУсловияПоставокНоменклатуры.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	УдалитьУсловияПоставокНоменклатуры.СпецификацияДоговора КАК СпецификацияДоговора,
		|	УдалитьУсловияПоставокНоменклатуры.ДоговорКонтрагента КАК ДоговорВерсииСоглашения
		|ПОМЕСТИТЬ ДоговорыДляОбработки
		|ИЗ
		|	РегистрСведений.УдалитьУсловияПоставокНоменклатуры КАК УдалитьУсловияПоставокНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ Спецификации КАК Спецификации
		|		ПО УдалитьУсловияПоставокНоменклатуры.ДоговорКонтрагента = Спецификации.ДоговорКонтрагента
		|ГДЕ
		|	Спецификации.ДоговорКонтрагента ЕСТЬ NULL
		|	И УдалитьУсловияПоставокНоменклатуры.ДоговорКонтрагента.ВидДоговораУХ = ЗНАЧЕНИЕ(Справочник.ВидыДоговоровКонтрагентовУХ.СПоставщиком)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Спецификации.ДоговорКонтрагента,
		|	Спецификации.СпецификацияДоговора,
		|	Спецификации.СпецификацияДоговора
		|ИЗ
		|	Спецификации КАК Спецификации
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДоговорыДляОбработки.ДоговорВерсииСоглашения.ВерсияСоглашения КАК Регистратор,
		|	УдалитьУсловияПоставокНоменклатуры.Лот КАК Лот,
		|	ЗНАЧЕНИЕ(Справочник.ПриоритетыПотребностей.Обычный) КАК Приоритет,
		|	УдалитьУсловияПоставокНоменклатуры.ПериодПотребности КАК ПериодПотребности,
		|	УдалитьУсловияПоставокНоменклатуры.Номенклатура КАК Номенклатура,
		|	УдалитьУсловияПоставокНоменклатуры.Организация КАК Организация,
		|	УдалитьУсловияПоставокНоменклатуры.МестоПоставки КАК МестоПоставки,
		|	УдалитьУсловияПоставокНоменклатуры.Проект КАК Проект,
		|	УдалитьУсловияПоставокНоменклатуры.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	УдалитьУсловияПоставокНоменклатуры.Коэффициент КАК Коэффициент,
		|	УдалитьУсловияПоставокНоменклатуры.Количество КАК Количество,
		|	УдалитьУсловияПоставокНоменклатуры.Цена КАК Цена,
		|	УдалитьУсловияПоставокНоменклатуры.СтавкаНДС КАК СтавкаНДС,
		|	УдалитьУсловияПоставокНоменклатуры.Сумма КАК Сумма,
		|	УдалитьУсловияПоставокНоменклатуры.СуммаНДС КАК СуммаНДС
		|ИЗ
		|	ДоговорыДляОбработки КАК ДоговорыДляОбработки
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияКоммерческийДоговор.Номенклатура КАК ВерсияСоглашенияКоммерческийДоговорНоменклатура
		|		ПО (ВерсияСоглашенияКоммерческийДоговорНоменклатура.Ссылка = ДоговорыДляОбработки.ДоговорВерсииСоглашения.ВерсияСоглашения)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.УдалитьУсловияПоставокНоменклатуры КАК УдалитьУсловияПоставокНоменклатуры
		|		ПО ДоговорыДляОбработки.ДоговорКонтрагента = УдалитьУсловияПоставокНоменклатуры.ДоговорКонтрагента
		|			И ДоговорыДляОбработки.СпецификацияДоговора = УдалитьУсловияПоставокНоменклатуры.СпецификацияДоговора
		|ГДЕ
		|	ДоговорыДляОбработки.ДоговорВерсииСоглашения.ВерсияСоглашения ССЫЛКА Документ.ВерсияСоглашенияКоммерческийДоговор
		|	И ВерсияСоглашенияКоммерческийДоговорНоменклатура.Ссылка ЕСТЬ NULL
		|
		|УПОРЯДОЧИТЬ ПО
		|	Лот
		|ИТОГИ ПО
		|	Регистратор";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПоРегистратору = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоРегистратору.Следующий() Цикл
		ЗаписатьТЧНоменклатураВерсииСоглашения(
			ВыборкаПоРегистратору.Регистратор,
			ВыборкаПоРегистратору.Выбрать(ОбходРезультатаЗапроса.Прямой));
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьТЧНоменклатураВерсииСоглашения(ВерсияСоглашения,
													ВыборкаЗаписей)
	НачатьТранзакцию();
	Попытка
		ВерсияОбъект = ВерсияСоглашения.ПолучитьОбъект();
		ТЧНоменклатура = ВерсияОбъект.Номенклатура;
		Пока ВыборкаЗаписей.Следующий() Цикл
			НоваяСтрока = ТЧНоменклатура.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаЗаписей);
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ВерсияОбъект);
		ЗафиксироватьТранзакцию();
	Исключение
		ШаблонСообщения = НСтр("ru = 'Не удалось записать табличную часть Номенклатунра версии соглашения с поставщиком
                                   |%1'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(
			ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные.Документы.ВерсияСоглашенияКоммерческийДоговор,
			ВерсияСоглашения, 
			ТекстСообщения);
		Если ТранзакцияАктивна() Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

Процедура ЗаписатьРегистрСведенийДоговорыПоЗакупочнымПроцедурам(
													НаборЗаписей,
													Регистратор,
													ВыборкаЗаписей)
	НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
	Пока ВыборкаЗаписей.СледующийПоЗначениюПоля("Лот") Цикл
		Если ЗначениеЗаполнено(ВыборкаЗаписей.Лот) Тогда
			Движение = НаборЗаписей.Добавить();
			Движение.Период = ВыборкаЗаписей.Период;
			Движение.ЗакупочнаяПроцедура = ВыборкаЗаписей.Лот.Владелец;
			Движение.Договор = ВыборкаЗаписей.Договор;
			Движение.Лот = ВыборкаЗаписей.Лот;
		КонецЕсли;
	КонецЦикла;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
КонецПроцедуры

Процедура ЗаполнитьЗакупочнуюПроцедуруРСДоговорыПоЗакупочнымПроцедурам() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДоговорыПоЗакупочнымПроцедурам.Период КАК Период,
		|	ДоговорыПоЗакупочнымПроцедурам.Регистратор КАК Регистратор,
		|	ДоговорыПоЗакупочнымПроцедурам.Договор КАК Договор,
		|	ДоговорыПоЗакупочнымПроцедурам.Лот КАК Лот,
		|	ДоговорыПоЗакупочнымПроцедурам.Лот.Владелец КАК ЗакупочнаяПроцедура
		|ИЗ
		|	РегистрСведений.ДоговорыПоЗакупочнымПроцедурам КАК ДоговорыПоЗакупочнымПроцедурам
		|ГДЕ
		|	ДоговорыПоЗакупочнымПроцедурам.ЗакупочнаяПроцедура = ЗНАЧЕНИЕ(Справочник.ЗакупочныеПроцедуры.ПустаяСсылка)
		|	И НЕ ДоговорыПоЗакупочнымПроцедурам.Лот.Владелец ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаЗаписей = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	НаборЗаписей = РегистрыСведений.ДоговорыПоЗакупочнымПроцедурам.СоздатьНаборЗаписей();
	Пока ВыборкаЗаписей.Следующий() Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаЗаписей.Регистратор);
		НачатьТранзакцию();
		Попытка
			Движение = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, ВыборкаЗаписей);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			ЗафиксироватьТранзакцию();
			НаборЗаписей.Очистить();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось записать движения регистра сведений ""Договоры по закупочным процедурам""
	                                   |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ПредложениеПоставщика,
				ВыборкаЗаписей.Регистратор, 
				ТекстСообщения);
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьЗакупочнуюПроцедуруРСУчастникиКвалификации() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчастникиКвалификации.Регистратор КАК Регистратор,
		|	УчастникиКвалификации.Регистратор.Дата КАК Период,
		|	УчастникиКвалификации.УдалитьЛот.Владелец КАК ЗакупочнаяПроцедура,
		|	УчастникиКвалификации.Участник КАК Участник,
		|	УчастникиКвалификации.УдалитьЛот КАК УдалитьЛот
		|ИЗ
		|	РегистрСведений.УчастникиКвалификации КАК УчастникиКвалификации
		|ГДЕ
		|	УчастникиКвалификации.ЗакупочнаяПроцедура = ЗНАЧЕНИЕ(Справочник.ЗакупочныеПроцедуры.ПустаяСсылка)
		|	И НЕ УчастникиКвалификации.УдалитьЛот.Владелец ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаЗаписей = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	НаборЗаписей = РегистрыСведений.УчастникиКвалификации.СоздатьНаборЗаписей();
	Пока ВыборкаЗаписей.Следующий() Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаЗаписей.Регистратор);
		НачатьТранзакцию();
		Попытка
			Движение = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, ВыборкаЗаписей);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			ЗафиксироватьТранзакцию();
			НаборЗаписей.Очистить();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось записать движения регистра сведений ""Участники квалификации""
	                                   |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.КвалификацияПоставщика,
				ВыборкаЗаписей.Регистратор, 
				ТекстСообщения);
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьЗакупочнуюПроцедуруРСУчастникиКвалифицированныеПоЛоту() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	УчастникиКвалифицированныеПоЛоту.Регистратор КАК Регистратор,
		|	УчастникиКвалифицированныеПоЛоту.Регистратор.Дата КАК Период,
		|	УчастникиКвалифицированныеПоЛоту.УдалитьЛот.Владелец КАК ЗакупочнаяПроцедура,
		|	УчастникиКвалифицированныеПоЛоту.УчастникАккредитации КАК УчастникАккредитации,
		|	УчастникиКвалифицированныеПоЛоту.УдалитьЛот КАК УдалитьЛот,
		|	УчастникиКвалифицированныеПоЛоту.Контрагент КАК Контрагент,
		|	УчастникиКвалифицированныеПоЛоту.ДатаУтверждения КАК ДатаУтверждения
		|ИЗ
		|	РегистрСведений.УчастникиКвалифицированныеПоЛоту КАК УчастникиКвалифицированныеПоЛоту
		|ГДЕ
		|	УчастникиКвалифицированныеПоЛоту.ЗакупочнаяПроцедура = ЗНАЧЕНИЕ(Справочник.ЗакупочныеПроцедуры.ПустаяСсылка)
		|	И НЕ УчастникиКвалифицированныеПоЛоту.УдалитьЛот.Владелец ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаЗаписей = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	НаборЗаписей = РегистрыСведений.УчастникиКвалифицированныеПоЛоту.СоздатьНаборЗаписей();
	Пока ВыборкаЗаписей.Следующий() Цикл
		НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаЗаписей.Регистратор);
		НачатьТранзакцию();
		Попытка
			Движение = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, ВыборкаЗаписей);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			ЗафиксироватьТранзакцию();
			НаборЗаписей.Очистить();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось записать движения регистра сведений ""Участники квалифицированные по закупочной процедуре""
	                                   |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.КвалификацияПоставщика,
				ВыборкаЗаписей.Регистратор, 
				ТекстСообщения);
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьРСЛотыПланаЗакупок() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Лоты.СтрокаПланаЗакупок.ИдентификаторСтрокиПланаЗакупок КАК ИдентификаторСтрокиПланаЗакупок,
		|	Лоты.Ссылка КАК Лот,
		|	Лоты.СтрокаПланаЗакупок КАК ВерсияСтрокиПланаЗакупок,
		|	Лоты.СтрокаПланаЗакупок.СуммаВВалютеРегламентированногоУчета КАК Сумма
		|ИЗ
		|	Справочник.Лоты КАК Лоты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЛотыПланаЗакупок КАК ЛотыПланаЗакупок
		|		ПО ЛотыПланаЗакупок.ИдентификаторСтрокиПланаЗакупок = Лоты.СтрокаПланаЗакупок.ИдентификаторСтрокиПланаЗакупок
		|ГДЕ
		|	ЛотыПланаЗакупок.ИдентификаторСтрокиПланаЗакупок ЕСТЬ NULL
		|	И НЕ Лоты.СтрокаПланаЗакупок.ИдентификаторСтрокиПланаЗакупок ЕСТЬ NULL";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаЗаписей = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	НаборЗаписей = РегистрыСведений.ЛотыПланаЗакупок.СоздатьНаборЗаписей();
	Пока ВыборкаЗаписей.Следующий() Цикл
		НаборЗаписей.Отбор.ИдентификаторСтрокиПланаЗакупок.Установить(
			ВыборкаЗаписей.ИдентификаторСтрокиПланаЗакупок);
		НачатьТранзакцию();
		Попытка
			Движение = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, ВыборкаЗаписей);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			ЗафиксироватьТранзакцию();
			НаборЗаписей.Очистить();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось записать движения регистра сведений ""Лоты плана закупок""
	                                   |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.ИдентификаторыСтрокПлановЗакупок,
				ВыборкаЗаписей.ИдентификаторСтрокиПланаЗакупок, 
				ТекстСообщения);
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область Версия_3_0

Процедура ОбновитьПротоколВыбораПобедителей() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДокументПротоколВыбораПобедителей.Ссылка КАК ПротоколВыбораПобедителей,
		|	ДокументПротоколВыбораПобедителей.УдалитьЛот.Владелец КАК ЗакупочнаяПроцедура
		|ИЗ
		|	Документ.ПротоколВыбораПобедителей КАК ДокументПротоколВыбораПобедителей
		|ГДЕ
		|	НЕ ДокументПротоколВыбораПобедителей.УдалитьЛот.Владелец ЕСТЬ NULL
		|	И ДокументПротоколВыбораПобедителей.УдалитьЛот <> ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)
		|	И ДокументПротоколВыбораПобедителей.ЗакупочнаяПроцедура = ЗНАЧЕНИЕ(Справочник.ЗакупочныеПроцедуры.ПустаяСсылка)";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаЗаписей = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока ВыборкаЗаписей.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			ДокОбъект = ВыборкаЗаписей.ПротоколВыбораПобедителей.ПолучитьОбъект();
			ДокОбъект.ЗакупочнаяПроцедура = ВыборкаЗаписей.ЗакупочнаяПроцедура;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось записать документ ""Протокол выбора победителей""
	                                   |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ПротоколВыбораПобедителей,
				ВыборкаЗаписей.ПротоколВыбораПобедителей, 
				ТекстСообщения);
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура СоздатьДокументыВыборПобедителейЛотов() Экспорт
	
КонецПроцедуры

Процедура ЗадатьНастройкиДокументаПротоколВскрытияКонвертов() Экспорт
	ПеречислениеБД = Справочники.ПеречисленияБД.НайтиПоНаименованию("СостоянияСогласования", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	СправочникБД = Справочники.ДокументыБД.НайтиПоНаименованию("ПротоколВскрытияКонвертов", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	СправочникОбъект = СправочникБД.ПолучитьОбъект();
	СправочникОбъект.Согласуется = Истина;
	СправочникОбъект.РеквизитСостояния = ПеречислениеБД;
	СправочникОбъект.РеквизитСостоянияСтрока = "Перечисление." + Строка(ПеречислениеБД);
	СправочникОбъект.ЗначениеРеквизитаСостоянияНаУтверждении = Перечисления.СостоянияСогласования.НаУтверждении;
	СправочникОбъект.ЗначениеРеквизитаСостоянияУтвержден = Перечисления.СостоянияСогласования.Утверждена;
	СправочникОбъект.ЗначениеРеквизитаСостоянияОтклонен = Перечисления.СостоянияСогласования.Отклонена;
	СправочникОбъект.ЗначениеРеквизитаСостоянияЧерновик = Перечисления.СостоянияСогласования.Черновик;
	СправочникОбъект.Записать();
КонецПроцедуры		// ЗадатьНастройкиДокументаПротоколВскрытияКонвертов()

Процедура ЗадатьНастройкиДокументаПротоколРассмотренияЗаявок() Экспорт
	ПеречислениеБД = Справочники.ПеречисленияБД.НайтиПоНаименованию("СостоянияСогласования", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	СправочникБД = Справочники.ДокументыБД.НайтиПоНаименованию("ПротоколРассмотренияЗаявок", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	СправочникОбъект = СправочникБД.ПолучитьОбъект();
	СправочникОбъект.Согласуется = Истина;
	СправочникОбъект.РеквизитСостояния = ПеречислениеБД;
	СправочникОбъект.РеквизитСостоянияСтрока = "Перечисление." + Строка(ПеречислениеБД);
	СправочникОбъект.ЗначениеРеквизитаСостоянияНаУтверждении = Перечисления.СостоянияСогласования.НаУтверждении;
	СправочникОбъект.ЗначениеРеквизитаСостоянияУтвержден = Перечисления.СостоянияСогласования.Утверждена;
	СправочникОбъект.ЗначениеРеквизитаСостоянияОтклонен = Перечисления.СостоянияСогласования.Отклонена;
	СправочникОбъект.ЗначениеРеквизитаСостоянияЧерновик = Перечисления.СостоянияСогласования.Черновик;
	СправочникОбъект.Записать();
КонецПроцедуры		// ЗадатьНастройкиДокументаПротоколРассмотренияЗаявок()

Процедура ЗадатьНастройкиДокументаПротоколВыбораПобедителей() Экспорт
	ПеречислениеБД = Справочники.ПеречисленияБД.НайтиПоНаименованию("СостоянияСогласования", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	СправочникБД = Справочники.ДокументыБД.НайтиПоНаименованию("ПротоколВыбораПобедителей", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	СправочникОбъект = СправочникБД.ПолучитьОбъект();
	СправочникОбъект.Согласуется = Истина;
	СправочникОбъект.РеквизитСостояния = ПеречислениеБД;
	СправочникОбъект.РеквизитСостоянияСтрока = "Перечисление." + Строка(ПеречислениеБД);
	СправочникОбъект.ЗначениеРеквизитаСостоянияНаУтверждении = Перечисления.СостоянияСогласования.НаУтверждении;
	СправочникОбъект.ЗначениеРеквизитаСостоянияУтвержден = Перечисления.СостоянияСогласования.Утверждена;
	СправочникОбъект.ЗначениеРеквизитаСостоянияОтклонен = Перечисления.СостоянияСогласования.Отклонена;
	СправочникОбъект.ЗначениеРеквизитаСостоянияЧерновик = Перечисления.СостоянияСогласования.Черновик;
	СправочникОбъект.Записать();
КонецПроцедуры		// ЗадатьНастройкиДокументаПротоколВыбораПобедителей()

Процедура УстановитьНомерВГПЗСтрокПланаЗакупок() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СправочникЛоты.УдалитьНомерВГПЗ КАК НомерВГПЗ,
		|	ДокументСтрокаПланаЗакупок.Ссылка КАК Ссылка,
		|	ЛОЖЬ КАК ТолькоРегистр
		|ИЗ
		|	Справочник.Лоты КАК СправочникЛоты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СтрокаПланаЗакупок КАК ДокументСтрокаПланаЗакупок
		|		ПО СправочникЛоты.СтрокаПланаЗакупок = ДокументСтрокаПланаЗакупок.Ссылка
		|			И (СправочникЛоты.УдалитьНомерВГПЗ <> 0)
		|			И (ДокументСтрокаПланаЗакупок.НомерВГПЗ = 0)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ДокументСтрокаПланаЗакупок.НомерВГПЗ,
		|	ДокументСтрокаПланаЗакупок.Ссылка,
		|	ИСТИНА
		|ИЗ
		|	Документ.СтрокаПланаЗакупок КАК ДокументСтрокаПланаЗакупок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтрокиПланаЗакупок КАК СтрокиПланаЗакупок
		|		ПО ДокументСтрокаПланаЗакупок.Ссылка = СтрокиПланаЗакупок.Регистратор
		|			И ДокументСтрокаПланаЗакупок.НомерВГПЗ <> СтрокиПланаЗакупок.НомерВГПЗ
		|			И (ДокументСтрокаПланаЗакупок.НомерВГПЗ <> 0)";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаЗаписей = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	НаборЗаписей = РегистрыСведений.СтрокиПланаЗакупок.СоздатьНаборЗаписей();
	Пока ВыборкаЗаписей.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			СтрокаПланаОбъект = ВыборкаЗаписей.Ссылка.ПолучитьОбъект();
			Если НЕ ВыборкаЗаписей.ТолькоРегистр Тогда
				СтрокаПланаОбъект.НомерВГПЗ = ВыборкаЗаписей.НомерВГПЗ;
				ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СтрокаПланаОбъект);
			КонецЕсли;
			Если СтрокаПланаОбъект.Проведен Тогда
				НаборЗаписей.Отбор.Регистратор.Установить(СтрокаПланаОбъект.Ссылка);
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаПланаОбъект);
				НоваяЗапись.Регистратор = СтрокаПланаОбъект.Ссылка;
				НоваяЗапись.Период =  СтрокаПланаОбъект.Дата;
				НоваяЗапись.СтрокаПлана = СтрокаПланаОбъект.Ссылка;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
				НаборЗаписей.Очистить();
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось записать строку плана закупок
	                                   |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.СтрокаПланаЗакупок,
				ВыборкаЗаписей.Ссылка, 
				ТекстСообщения);
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьНомерСтрокПланаЗакупок() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументСтрокаПланаЗакупок.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СтрокаПланаЗакупок КАК ДокументСтрокаПланаЗакупок
		|ГДЕ
		|	ДокументСтрокаПланаЗакупок.Номер = """"";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаЗаписей = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока ВыборкаЗаписей.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			СтрокаПланаОбъект = ВыборкаЗаписей.Ссылка.ПолучитьОбъект();
			СтрокаПланаОбъект.УстановитьНовыйНомер();
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СтрокаПланаОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось записать строку плана закупок
	                                   |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.СтрокаПланаЗакупок,
				ВыборкаЗаписей.Ссылка, 
				ТекстСообщения);
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьЗакупочнуюПроцедуруВДокументах() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОповещениеАккредитованныхПоставщиковОТоргах.Ссылка КАК Ссылка,
		|	ОповещениеАккредитованныхПоставщиковОТоргах.УдалитьЛот.Владелец КАК ЗакупочнаяПроцедура
		|ИЗ
		|	Документ.ОповещениеАккредитованныхПоставщиковОТоргах КАК ОповещениеАккредитованныхПоставщиковОТоргах
		|ГДЕ
		|	НЕ ОповещениеАккредитованныхПоставщиковОТоргах.УдалитьЛот.Владелец ЕСТЬ NULL
		|	И ОповещениеАккредитованныхПоставщиковОТоргах.УдалитьЛот <> ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)
		|	И ОповещениеАккредитованныхПоставщиковОТоргах.ЗакупочнаяПроцедура = ЗНАЧЕНИЕ(Справочник.ЗакупочныеПроцедуры.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПротоколВскрытияКонвертов.Ссылка,
		|	ПротоколВскрытияКонвертов.УдалитьЛот.Владелец
		|ИЗ
		|	Документ.ПротоколВскрытияКонвертов КАК ПротоколВскрытияКонвертов
		|ГДЕ
		|	НЕ ПротоколВскрытияКонвертов.УдалитьЛот.Владелец ЕСТЬ NULL
		|	И ПротоколВскрытияКонвертов.УдалитьЛот <> ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)
		|	И ПротоколВскрытияКонвертов.ЗакупочнаяПроцедура = ЗНАЧЕНИЕ(Справочник.ЗакупочныеПроцедуры.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПротоколОтменыЗакупочнойПроцедуры.Ссылка,
		|	ПротоколОтменыЗакупочнойПроцедуры.УдалитьЛот.Владелец
		|ИЗ
		|	Документ.ПротоколОтменыЗакупочнойПроцедуры КАК ПротоколОтменыЗакупочнойПроцедуры
		|ГДЕ
		|	НЕ ПротоколОтменыЗакупочнойПроцедуры.УдалитьЛот.Владелец ЕСТЬ NULL
		|	И ПротоколОтменыЗакупочнойПроцедуры.УдалитьЛот <> ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)
		|	И ПротоколОтменыЗакупочнойПроцедуры.ЗакупочнаяПроцедура = ЗНАЧЕНИЕ(Справочник.ЗакупочныеПроцедуры.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПротоколРассмотренияЗаявок.Ссылка,
		|	ПротоколРассмотренияЗаявок.УдалитьЛот.Владелец
		|ИЗ
		|	Документ.ПротоколРассмотренияЗаявок КАК ПротоколРассмотренияЗаявок
		|ГДЕ
		|	НЕ ПротоколРассмотренияЗаявок.УдалитьЛот.Владелец ЕСТЬ NULL
		|	И ПротоколРассмотренияЗаявок.УдалитьЛот <> ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)
		|	И ПротоколРассмотренияЗаявок.ЗакупочнаяПроцедура = ЗНАЧЕНИЕ(Справочник.ЗакупочныеПроцедуры.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КвалификацияПоставщика.Ссылка,
		|	КвалификацияПоставщика.УдалитьЛот.Владелец
		|ИЗ
		|	Документ.КвалификацияПоставщика КАК КвалификацияПоставщика
		|ГДЕ
		|	НЕ КвалификацияПоставщика.УдалитьЛот.Владелец ЕСТЬ NULL
		|	И КвалификацияПоставщика.УдалитьЛот <> ЗНАЧЕНИЕ(Справочник.Лоты.ПустаяСсылка)
		|	И КвалификацияПоставщика.ЗакупочнаяПроцедура = ЗНАЧЕНИЕ(Справочник.ЗакупочныеПроцедуры.ПустаяСсылка)";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаЗаписей = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока ВыборкаЗаписей.Следующий() Цикл
		ИмяДокумента = """" + Строка(ВыборкаЗаписей.Ссылка) + """";
		МетаданныеДокумента = ВыборкаЗаписей.Ссылка.Метаданные();
		НачатьТранзакцию();
		Попытка
			ДокОбъект = ВыборкаЗаписей.Ссылка.ПолучитьОбъект();
			ДокОбъект.ЗакупочнаяПроцедура = ВыборкаЗаписей.ЗакупочнаяПроцедура;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось установить закупочную процедуру в документе " + ИмяДокумента + "
	                                   |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				МетаданныеДокумента,
				ВыборкаЗаписей.Ссылка, 
				ТекстСообщения);
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ЗадатьНастройкиСправочникаЗакупочныеПроцедуры() Экспорт
	ПеречислениеБД = Справочники.ПеречисленияБД.НайтиПоНаименованию("СостоянияСогласования", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	СправочникБД = Справочники.СправочникиБД.НайтиПоНаименованию("ЗакупочныеПроцедуры", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	СправочникОбъект = СправочникБД.ПолучитьОбъект();
	СправочникОбъект.Согласуется = Истина;
	СправочникОбъект.РеквизитСостояния = ПеречислениеБД;
	СправочникОбъект.РеквизитСостоянияСтрока = "Перечисление." + Строка(ПеречислениеБД);
	СправочникОбъект.ЗначениеРеквизитаСостоянияНаУтверждении = Перечисления.СостоянияСогласования.НаУтверждении;
	СправочникОбъект.ЗначениеРеквизитаСостоянияУтвержден = Перечисления.СостоянияСогласования.Утверждена;
	СправочникОбъект.ЗначениеРеквизитаСостоянияОтклонен = Перечисления.СостоянияСогласования.Отклонена;
	СправочникОбъект.ЗначениеРеквизитаСостоянияЧерновик = Перечисления.СостоянияСогласования.Черновик;
	СправочникОбъект.Записать();
КонецПроцедуры		// ЗадатьНастройкиСправочникаЗакупочныеПроцедуры()

Процедура ОчиститьДвиженияПланаОбеспеченияРамочныхДоговров() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ВерсияСоглашенияКоммерческийДоговор.Ссылка КАК Регистратор
		|ИЗ
		|	РегистрНакопления.ПланПоставокПоДоговорам КАК ПланПоставокПоДоговорам
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияКоммерческийДоговор КАК ВерсияСоглашенияКоммерческийДоговор
		|		ПО ПланПоставокПоДоговорам.Регистратор = ВерсияСоглашенияКоммерческийДоговор.Ссылка
		|			И (ВерсияСоглашенияКоммерческийДоговор.ВидСоглашения <> ЗНАЧЕНИЕ(Перечисление.ВидыСоглашений.Спецификация))";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	ПриоритетОбычный = Справочники.ПриоритетыПотребностей.Обычный;
	НаборЗаписей = РегистрыНакопления.ПланПоставокПоДоговорам.СоздатьНаборЗаписей();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаДетальныеЗаписи.Регистратор);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			ЗафиксироватьТранзакцию();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось очистить движения регистра ""План поставок по договорам""
	                                   |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.ВерсияСоглашенияКоммерческийДоговор,
				ВыборкаДетальныеЗаписи.Регистратор, 
				ТекстСообщения);
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ВызватьИсключение;
		КонецПопытки;
		НаборЗаписей.Очистить();
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьИдентификаторыСтрокПланаЗакупок() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтрокаПланаЗакупок.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.СтрокаПланаЗакупок КАК СтрокаПланаЗакупок
		|ГДЕ
		|	СтрокаПланаЗакупок.ИдентификаторСтрокиПланаЗакупок = ЗНАЧЕНИЕ(Справочник.ИдентификаторыСтрокПлановЗакупок.ПустаяСсылка)
		|
		|УПОРЯДОЧИТЬ ПО
		|	СтрокаПланаЗакупок.ДокументОснование,
		|	СтрокаПланаЗакупок.Дата";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаЗаписей = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока ВыборкаЗаписей.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			СтрокаПланаОбъект = ВыборкаЗаписей.Ссылка.ПолучитьОбъект();
			СтрокаПланаОбъект.ИдентификаторСтрокиПланаЗакупок = 
				Справочники.ИдентификаторыСтрокПлановЗакупок.ПолучитьДляСтрокиПлана(
					СтрокаПланаОбъект);
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СтрокаПланаОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось записать строку плана закупок
	                                   |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.СтрокаПланаЗакупок,
				ВыборкаЗаписей.Ссылка, 
				ТекстСообщения);
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ИсправитьИдентификаторыВерсийСтрокПланаЗакупок() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтрокаПланаЗакупок.Ссылка КАК Ссылка,
		|	СтрокаПланаЗакупок.ДокументОснование.ИдентификаторСтрокиПланаЗакупок КАК Идентификатор
		|ИЗ
		|	Документ.СтрокаПланаЗакупок КАК СтрокаПланаЗакупок
		|ГДЕ
		|	СтрокаПланаЗакупок.ИдентификаторСтрокиПланаЗакупок <> СтрокаПланаЗакупок.ДокументОснование.ИдентификаторСтрокиПланаЗакупок
		|	И СтрокаПланаЗакупок.ДокументОснование <> ЗНАЧЕНИЕ(ДОкумент.СтрокаПланаЗакупок.ПустаяСсылка)";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаЗаписей = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	НаборЗаписей = РегистрыСведений.СтрокиПланаЗакупок.СоздатьНаборЗаписей();
	Пока ВыборкаЗаписей.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			СтрокаПланаОбъект = ВыборкаЗаписей.Ссылка.ПолучитьОбъект();
			СтрокаПланаОбъект.ИдентификаторСтрокиПланаЗакупок = 
				ВыборкаЗаписей.Идентификатор;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(СтрокаПланаОбъект);
			Если СтрокаПланаОбъект.Проведен Тогда
				НоваяЗапись = НаборЗаписей.Добавить();
				НаборЗаписей.Отбор.Регистратор.Установить(ВыборкаЗаписей.Ссылка);
				ЗаполнитьЗначенияСвойств(НоваяЗапись, СтрокаПланаОбъект);
				НоваяЗапись.Регистратор = ВыборкаЗаписей.Ссылка;
				НоваяЗапись.Период =  СтрокаПланаОбъект.Дата;
				НоваяЗапись.СтрокаПлана = ВыборкаЗаписей.Ссылка;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
				НаборЗаписей.Очистить();
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось записать строку плана закупок
	                                   |%1'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.СтрокаПланаЗакупок,
				ВыборкаЗаписей.Ссылка, 
				ТекстСообщения);
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ОбнулитьНомераВГПЗКопийСтрокПланаЗакупок() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СтрокаПланаЗакупок.Ссылка КАК Ссылка,
		|	СтрокаПланаЗакупок.НомерВГПЗ КАК НомерВГПЗ,
		|	СтрокаПланаЗакупок.НомерВерсии КАК НомерВерсии,
		|	СтрокаПланаЗакупок.ОрганизацияДляЗаключенияДоговора КАК ОрганизацияДляЗаключенияДоговора,
		|	СтрокаПланаЗакупок.ИдентификаторСтрокиПланаЗакупок КАК ИдентификаторСтрокиПланаЗакупок,
		|	СтрокаПланаЗакупок.Проведен КАК Проведен
		|ИЗ
		|	Документ.СтрокаПланаЗакупок КАК СтрокаПланаЗакупок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СтрокаПланаЗакупок КАК СтрокаПланаЗакупок1
		|		ПО СтрокаПланаЗакупок.Ссылка <> СтрокаПланаЗакупок1.Ссылка
		|			И СтрокаПланаЗакупок.ПериодЗакупок = СтрокаПланаЗакупок1.ПериодЗакупок
		|			И СтрокаПланаЗакупок.ОрганизацияДляЗаключенияДоговора = СтрокаПланаЗакупок1.ОрганизацияДляЗаключенияДоговора
		|			И СтрокаПланаЗакупок.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств = СтрокаПланаЗакупок1.ЗакупкаИнновационнойВысокотехнологичнойПродукцииИЛекарственныхСредств
		|			И СтрокаПланаЗакупок.НомерВГПЗ = СтрокаПланаЗакупок1.НомерВГПЗ
		|			И СтрокаПланаЗакупок.НомерВерсии = СтрокаПланаЗакупок1.НомерВерсии
		|			И СтрокаПланаЗакупок.ИдентификаторСтрокиПланаЗакупок = СтрокаПланаЗакупок1.ИдентификаторСтрокиПланаЗакупок
		|ИТОГИ
		|	МИНИМУМ(Ссылка)
		|ПО
		|	ИдентификаторСтрокиПланаЗакупок";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаИдентификаторСтрокиПланаЗакупок = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИдентификаторСтрокиПланаЗакупок.Следующий() Цикл
		ИсходнаяСсылка = ВыборкаИдентификаторСтрокиПланаЗакупок.Ссылка;
		ВыборкаДетальныеЗаписи = ВыборкаИдентификаторСтрокиПланаЗакупок.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ВыборкаДетальныеЗаписи.Ссылка <> ИсходнаяСсылка Тогда
				Попытка
					СтрокаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
					СтрокаОбъект.СброситьУникальныеРеквизиты();
					ОбновлениеИнформационнойБазы.ЗаписатьОбъект(
						СтрокаОбъект, 
						Ложь, 
						Истина,
						?(ВыборкаДетальныеЗаписи.Проведен,
							РежимЗаписиДокумента.Проведение, 
						 	РежимЗаписиДокумента.Запись));
				Исключение
					ШаблонСообщения = НСтр(
						"ru = 'Не удалось исправить строку плана закупок
                        	|%1'");
					ТекстСообщения = СтрШаблон(ШаблонСообщения,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					ЗаписьЖурналаРегистрации(
						ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
						УровеньЖурналаРегистрации.Ошибка,
						Метаданные.Документы.СтрокаПланаЗакупок,
						ВыборкаДетальныеЗаписи.Ссылка, 
						ТекстСообщения);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьКонстантуУровеньКонтроляПравилНоменклатуры() Экспорт

	Если НЕ ЗначениеЗаполнено(Константы.УровеньКонтроляПравилНоменклатуры.Получить()) Тогда
	
		Константы.УровеньКонтроляПравилНоменклатуры.Установить(Перечисления.УровниКонтроляПравилНоменклатуры.ОКПД2);
	
	КонецЕсли; 

КонецПроцедуры
 
Процедура ОбновитьНастройкиЗаполненияОтчетов() Экспорт
	
	НаборНастройки = РегистрыСведений.НастройкаОбработкиОтчетов.СоздатьНаборЗаписей();
	НаборНастройки.Прочитать();
	тТаблица =  НаборНастройки.Выгрузить();
	
	Для Каждого элНастройки Из тТаблица Цикл
		Если НЕ ЗначениеЗАполнено(элНастройки.ДокументБД) И ЗначениеЗаполнено(элНастройки.ШаблонДокументаБД) И ТипЗнч(элНастройки.ШаблонДокументаБД) = Тип("СправочникСсылка.ВидыОтчетов") Тогда
			элНастройки.ДокументБД = Справочники.ДокументыБД.НайтиПоНаименованию("НастраиваемыйОтчет",,,Справочники.ТипыБазДанных.ТекущаяИБ);
		КонецЕсли;	
	КонецЦикла;	
	
	тТаблица.Свернуть("ЭлементНастройкиОтчета,ДокументБД,ШаблонДокументаБД,Организация,Сценарий,ПериодОтчета,ВерсияОрганизационнойСтруктуры,ЗначениеЭлементаНастройкиОтчета");
	
	НаборНастройки.Загрузить(тТаблица);
	НаборНастройки.Записать(Истина);
	
КонецПроцедуры	

Процедура УстановитьЦенаВключаетНДСДоговора() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсияСоглашенияКоммерческийДоговор.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ВерсияСоглашенияКоммерческийДоговор КАК ВерсияСоглашенияКоммерческийДоговор
		|ГДЕ
		|	НЕ ВерсияСоглашенияКоммерческийДоговор.ЦенаВключаетНДС";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ДокументОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		ДокументОбъект.ЦенаВключаетНДС = Истина;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ДокументОбъект);
	КонецЦикла;
КонецПроцедуры

Процедура УстановитьОбязательнымиВложенияСтадийКонкурса() Экспорт
	МероприятияВыборПоставщиков.УстановитьВсеВложенияСтадииОбязательными(Справочники.СтадииМероприятий.Конкурс_ВскрытиеЗаявок);
	МероприятияВыборПоставщиков.УстановитьВсеВложенияСтадииОбязательными(Справочники.СтадииМероприятий.Конкурс_НачалоКвалификационногоОтбора);
	МероприятияВыборПоставщиков.УстановитьВсеВложенияСтадииОбязательными(Справочники.СтадииМероприятий.Конкурс_НачалоПодготовкиЗакупкиКПубликации);
	МероприятияВыборПоставщиков.УстановитьВсеВложенияСтадииОбязательными(Справочники.СтадииМероприятий.Конкурс_НачалоПредоставленияРазъяснений);
	МероприятияВыборПоставщиков.УстановитьВсеВложенияСтадииОбязательными(Справочники.СтадииМероприятий.Конкурс_НачалоПриемаЗаявок);
	МероприятияВыборПоставщиков.УстановитьВсеВложенияСтадииОбязательными(Справочники.СтадииМероприятий.Конкурс_ОглашениеРезультатов);
	МероприятияВыборПоставщиков.УстановитьВсеВложенияСтадииОбязательными(Справочники.СтадииМероприятий.Конкурс_ОкончаниеКвалификационногоОтбора);
	МероприятияВыборПоставщиков.УстановитьВсеВложенияСтадииОбязательными(Справочники.СтадииМероприятий.Конкурс_ОкончаниеПредоставленияРазъяснений);
	МероприятияВыборПоставщиков.УстановитьВсеВложенияСтадииОбязательными(Справочники.СтадииМероприятий.Конкурс_ОкончаниеПриемаЗаявок);
	МероприятияВыборПоставщиков.УстановитьВсеВложенияСтадииОбязательными(Справочники.СтадииМероприятий.Конкурс_ОкончаниеРассмотренияЗаявок);
	МероприятияВыборПоставщиков.УстановитьВсеВложенияСтадииОбязательными(Справочники.СтадииМероприятий.Конкурс_ОфициальноеОбъявлениеЗакупки);
	МероприятияВыборПоставщиков.УстановитьВсеВложенияСтадииОбязательными(Справочники.СтадииМероприятий.Конкурс_Переторжка);
	МероприятияВыборПоставщиков.УстановитьВсеВложенияСтадииОбязательными(Справочники.СтадииМероприятий.Конкурс_ПодведениеИтогов);
	МероприятияВыборПоставщиков.УстановитьВсеВложенияСтадииОбязательными(Справочники.СтадииМероприятий.Конкурс_ПодписаниеКонтракта);
КонецПроцедуры		// УстановитьОбязательнымиВложенияСтадийКонкурса()

Процедура ЗаполнитьВерсииЕИСДляСтрокПланаЗакупок() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Лоты.Ссылка КАК Лот,
		|	ДокументСтрокаПланаЗакупок.Ссылка КАК Объект,
		|	ВерсииЛотовДляЕИС.НомерВерсии КАК НомерВерсии,
		|	ВерсииЛотовДляЕИС.ОбоснованиеИзменений КАК ОбоснованиеИзменений,
		|	ВерсииЛотовДляЕИС.Дата КАК Дата,
		|	ВерсииЛотовДляЕИС.ГУИДВерсии КАК ГУИДВерсии,
		|	ВерсииЛотовДляЕИС.Размещен КАК Размещен
		|ИЗ
		|	Справочник.Лоты КАК Лоты
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СтрокаПланаЗакупок КАК ДокументСтрокаПланаЗакупок
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВерсииОбъектовДляЕИС КАК ВерсииСтрокПланаДляЕИС
		|			ПО ДокументСтрокаПланаЗакупок.Ссылка = ВерсииСтрокПланаДляЕИС.Объект
		|		ПО Лоты.СтрокаПланаЗакупок = ДокументСтрокаПланаЗакупок.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВерсииОбъектовДляЕИС КАК ВерсииЛотовДляЕИС
		|		ПО Лоты.Ссылка = ВерсииЛотовДляЕИС.Объект
		|ГДЕ
		|	ВерсииСтрокПланаДляЕИС.Объект ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Лоты.Ссылка КАК Лот,
		|	Лоты.УИД_ЕИС КАК УИД_ЕИС,
		|	ДокументСтрокаПланаЗакупок.Ссылка КАК СтрокаПлана
		|ИЗ
		|	Справочник.Лоты КАК Лоты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СтрокаПланаЗакупок КАК ДокументСтрокаПланаЗакупок
		|		ПО Лоты.СтрокаПланаЗакупок = ДокументСтрокаПланаЗакупок.Ссылка
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеЭТП КАК ДанныеЭТП
		|		ПО (ДанныеЭТП.ОбъектОбмена = Лоты.Ссылка)
		|			И (ДанныеЭТП.ЭТП = &ЕИС)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВерсииОбъектовДляЕИС КАК ВерсииЛотовДляЕИС
		|		ПО Лоты.Ссылка = ВерсииЛотовДляЕИС.Объект
		|ГДЕ
		|	ДокументСтрокаПланаЗакупок.УИД_ЕИС = """"
		|	И ВерсииЛотовДляЕИС.Объект ЕСТЬ NULL";
	Запрос.УстановитьПараметр(
		"ЕИС", 
		Справочники.ЭлектронныеТорговыеПлощадки.СсылкаНаЕИС());
	мРезультатЗапроса = Запрос.ВыполнитьПакет();
	ВыборкаЗаписей = мРезультатЗапроса[0].Выбрать(ОбходРезультатаЗапроса.Прямой);
	НаборЗаписей = РегистрыСведений.ВерсииОбъектовДляЕИС.СоздатьНаборЗаписей();
	Пока ВыборкаЗаписей.Следующий() Цикл
		ЗаписатьВерсиюСтрокиПланаДляЕИС(
			НаборЗаписей, 
			ВыборкаЗаписей);
	КонецЦикла;
	ВыборкаЗаписей = мРезультатЗапроса[1].Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока ВыборкаЗаписей.Следующий() Цикл
		УИД_ЕИС = ВыборкаЗаписей.УИД_ЕИС;
		Если ПустаяСтрока(УИД_ЕИС) Тогда
			УИД_ЕИС = Строка(ВыборкаЗаписей.Лот.УникальныйИдентификатор());
		КонецЕсли;
		УстановитьУИД_ЕИССтрокиПлана(
			ВыборкаЗаписей.СтрокаПлана, 
			УИД_ЕИС);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаписатьВерсиюСтрокиПланаДляЕИС(НаборЗаписей, ВыборкаЗаписей)
	НаборЗаписей.Отбор.Объект.Установить(
			ВыборкаЗаписей.Объект);
		НачатьТранзакцию();
		Попытка
			Движение = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(Движение, ВыборкаЗаписей);
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			ЗафиксироватьТранзакцию();
			НаборЗаписей.Очистить();
		Исключение
			ШаблонСообщения = 
				НСтр("ru = 'Не удалось записать движения регистра сведений "
					+ """Версии объектов для ЕИС"" для строки плана закупок %1"
					+ Символы.ПС + "%2'");
			ТекстСообщения = СтрШаблон(
				ШаблонСообщения, 
				ВыборкаЗаписей.Объект,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.СтрокаПланаЗакупок,
				ВыборкаЗаписей.Объект, 
				ТекстСообщения);
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ВызватьИсключение;
		КонецПопытки;
КонецПроцедуры
	
Процедура УстановитьУИД_ЕИССтрокиПлана(СтрокаПлана, УИД_ЕИС)
		НачатьТранзакцию();
		Попытка
			СтрокаПланаОбъект = СтрокаПлана.ПолучитьОбъект();
			СтрокаПланаОбъект.УИД_ЕИС = УИД_ЕИС;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(СтрокаПланаОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			ШаблонСообщения = 
				НСтр("ru = 'Не удалось записать строку плана закупок %1"
					+ Символы.ПС + "%2'");
			ТекстСообщения = СтрШаблон(
				ШаблонСообщения, 
				СтрокаПлана,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Документы.СтрокаПланаЗакупок,
				СтрокаПлана, 
				ТекстСообщения);
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ВызватьИсключение;
		КонецПопытки;
КонецПроцедуры

Процедура ЗаполнитьРеквизитЗакупочнаяПроцедураЛота() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Лоты.Ссылка КАК Ссылка,
		|	Лоты.Владелец КАК Владелец
		|ИЗ
		|	Справочник.Лоты КАК Лоты
		|ГДЕ
		|	Лоты.Владелец <> Лоты.ЗакупочнаяПроцедура
		|	И НЕ Лоты.Скрыт";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаЗаписей = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.Прямой);
	Пока ВыборкаЗаписей.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			ЛотОбъект = ВыборкаЗаписей.Ссылка.ПолучитьОбъект();
			ЛотОбъект.ЗакупочнаяПроцедура = ВыборкаЗаписей.Владелец;
			ОбновлениеИнформационнойБазы.ЗаписатьОбъект(ЛотОбъект);
			ЗафиксироватьТранзакцию();
		Исключение
			ШаблонСообщения = НСтр("ru = 'Не удалось записать лот
	                                   |%1'");
			ТекстСообщения = СтрШаблон(
				ШаблонСообщения, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.Лоты,
				ВыборкаЗаписей.Ссылка, 
				ТекстСообщения);
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			ВызватьИсключение;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьДокументыУОП() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УправлениеПериодомСценария.Ссылка
	|ИЗ
	|	Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария";
	
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект_УОП =  Выборка.Ссылка.ПолучитьОбъект();
		Попытка
			Объект_УОП.ОбменДанными.Загрузка = Истина;
			Объект_УОП.Записать();
		Исключение
			ИнфоОшибки = ИнформацияОбОшибке();
			ТекОшибка = ПодробноеПредставлениеОшибки(ИнфоОшибки);
			ТекстОшибки1 = "Ошибка обновления свойств документа управление отчтеным периодом  " + Выборка.Ссылка +Символы.ПС;
			ТекстОшибки1 = ТекстОшибки1 + Символы.ПС + "Текст ошибки:" + Символы.ПС + ТекОшибка;
			ЗаписьЖурналаРегистрации("ОбновитьДокументыУОП", УровеньЖурналаРегистрации.Ошибка,,, ТекОшибка);	
		КонецПопытки;
	
	КонецЦикла;
	
КонецПроцедуры	

Процедура ОбновитьМПБланки() Экспорт 
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	БланкиОтчетов.Ссылка.Владелец КАК ВидОтчета
	|ИЗ
	|	Справочник.БланкиОтчетов КАК БланкиОтчетов
	|ГДЕ
	|	БланкиОтчетов.РежимБланка = 2
	|	И БланкиОтчетов.ПометкаУдаления = Ложь";
	
	
	
	Результат = Запрос.Выполнить();
	ВыборкаВО = Результат.Выбрать();
	
	Пока ВыборкаВО.Следующий() Цикл
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПоказателиОтчетов.Ссылка КАК ПоказательОтчета
		|ИЗ
		|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
		|ГДЕ
		|	ПоказателиОтчетов.Владелец = &Владелец";
		
		Запрос.УстановитьПараметр("Владелец",ВыборкаВО.ВидОтчета);
		
		Результат = Запрос.Выполнить().Выгрузить();
		
		рОбработка = Обработки.РестуктуризацияБланковВО.Создать();
		рОбработка.ИзмененныеПоказатели.Загрузить(Результат);
		Попытка
			рОбработка.ВыполнитьРеструктуризациюБланков();
		Исключение
			ИнфоОшибки = ИнформацияОбОшибке();
			ТекОшибка = ПодробноеПредставлениеОшибки(ИнфоОшибки);
			ТекстОшибки1 = "Ошибка обновления свойств бланков вида отчета  " + ВыборкаВО.ВидОтчета +Символы.ПС;
			ТекстОшибки1 = ТекстОшибки1 + Символы.ПС + "Текст ошибки:" + Символы.ПС + ТекОшибка;
			ЗаписьЖурналаРегистрации("ОбновитьБланкиМП", УровеньЖурналаРегистрации.Ошибка,,, ТекОшибка);	
		КонецПопытки;
		
		
	КонецЦикла;
	
	
КонецПроцедуры	

Процедура ЗаполнитьНомерЛотаВЗакупочнойПроцедуреНаСервере() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МАКСИМУМ(Лоты.Код) КАК МаксКод,
		|	Лоты.Владелец КАК Владелец,
		|	МИНИМУМ(Лоты.Код) КАК МинКод,
		|	КОЛИЧЕСТВО(Лоты.Код) КАК КоличествоЛотов
		|ПОМЕСТИТЬ МаксНомерЛотаВЗакупке
		|ИЗ
		|	Справочник.Лоты КАК Лоты
		|ГДЕ
		|	НЕ Лоты.Скрыт
		|
		|СГРУППИРОВАТЬ ПО
		|	Лоты.Владелец
		|
		|ИМЕЮЩИЕ
		|	(МАКСИМУМ(Лоты.Код) > КОЛИЧЕСТВО(Лоты.Код)
		|		ИЛИ МИНИМУМ(Лоты.Код) <> 1)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Лоты.Ссылка КАК Лот
		|ИЗ
		|	МаксНомерЛотаВЗакупке КАК МаксНомерЛотаВЗакупке
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Лоты КАК Лоты
		|		ПО МаксНомерЛотаВЗакупке.Владелец = Лоты.Владелец
		|ГДЕ
		|	НЕ Лоты.Скрыт
		|
		|УПОРЯДОЧИТЬ ПО
		|	Лоты.Код
		|ИТОГИ ПО
		|	Лоты.Владелец";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаВладелец = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаВладелец.Следующий() Цикл
		СледующийНомер = 1;
		ВыборкаДетальныеЗаписи = ВыборкаВладелец.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Попытка
				ЛотОбъект = ВыборкаДетальныеЗаписи.Лот.ПолучитьОбъект();
				ЛотОбъект.Код = СледующийНомер;
				ОбновлениеИнформационнойБазыУХ.ЗаписатьОбъект(ЛотОбъект);
				СледующийНомер = СледующийНомер + 1;
			Исключение
				ТекстСообщения = НСтр(СтрШаблон(
					"ru = 'Не удалось записать лот %1 по причине:
		            |%2'",
					ВыборкаДетальныеЗаписи.Лот,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
				ЗаписьЖурналаРегистрации(
					ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.Лоты,
					ВыборкаДетальныеЗаписи.Лот, 
					ТекстСообщения);
			КонецПопытки;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ПеренестиМеждународныеАдресаВНовыеРеквизиты() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Банки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Банки КАК Банки
	|ГДЕ
	|	(Банки.УдалитьАдрес1 <> """"
	|				И Банки.АдресМеждународный = """"
	|			ИЛИ Банки.УдалитьГородСтрана1 <> """"
	|				И Банки.ГородСтранаМеждународный = """")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	(Контрагенты.УдалитьАдрес1 <> """"
	|				И Контрагенты.АдресМеждународный = """"
	|			ИЛИ Контрагенты.УдалитьГородСтрана1 <> """"
	|				И Контрагенты.ГородСтранаМеждународный = """")
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	(Организации.УдалитьАдрес1 <> """"
	|				И Организации.АдресМеждународный = """"
	|			ИЛИ Организации.УдалитьГородСтрана1 <> """"
	|				И Организации.ГородСтранаМеждународный = """")";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ПустаяСтрока(Объект.АдресМеждународный) Тогда
			Объект.АдресМеждународный = Объект.УдалитьАдрес1;
		КонецЕсли;
		
		Если ПустаяСтрока(Объект.ГородСтранаМеждународный) Тогда
			Объект.ГородСтранаМеждународный = Объект.УдалитьГородСтрана1;
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьСтрокуШаблонаЗаголовкаАналитики(ИсходнаяСтрока)
	
	ТзВозврата = Новый ТаблицаЗначений;
	ТзВозврата.Колонки.Добавить("ТекстОбласти");
	ТзВозврата.Колонки.Добавить("ТипОбласти");
	
	Пока СтрНайти(ИсходнаяСтрока,"[")>0 Цикл		
		ПозицияНачалаПараметра 			= СтрНайти(ИсходнаяСтрока,"["); 
		ПозицияОкончанияПараметра       = СтрНайти(ИсходнаяСтрока,"]"); 
		ТекстДоПараметра                = Лев(ИсходнаяСтрока,ПозицияНачалаПараметра-1);
		Параметр 						= Сред(ИсходнаяСтрока,ПозицияНачалаПараметра+1,ПозицияОкончанияПараметра-ПозицияНачалаПараметра-1);
		
		нСтрока = ТзВозврата.Добавить();
		нСтрока.ТекстОбласти = ТекстДоПараметра;
		нСтрока.ТипОбласти = "Строка";
		
		ПараметрТочка 	= СтрНайти(Параметр,".");
		
		ПараметрДоТочки = ?(ПараметрТочка=0,Параметр,Лев(Параметр,ПараметрТочка-1));
		
		кПараметр = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.НайтиПоКоду(ПараметрДоТочки);
		
		Если (НЕ кПараметр = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.ПустаяСсылка()) ИЛИ ПараметрДоТочки = "ПериодОтчета" ИЛИ ПараметрДоТочки = "Организация" ИЛИ ПараметрДоТочки = "Сценарий" ИЛИ ПараметрДоТочки = "Проект" Тогда
						
			нСтрока = ТзВозврата.Добавить();
			нСтрока.ТекстОбласти = СокрЛП(СтрЗАменить(Параметр,кПараметр.Код,кПараметр.Наименование));
			нСтрока.ТипОбласти = "Параметр";

		Иначе	
			нСтрока = ТзВозврата.Добавить();
			нСтрока.ТекстОбласти = Параметр;
			нСтрока.ТипОбласти = "Строка";

		КонецЕсли;	
		
		ИсходнаяСтрока =  Прав(ИсходнаяСтрока,СтрДлина(ИсходнаяСтрока)-ПозицияОкончанияПараметра);	
	КонецЦикла;	
	
	нСтрока = ТзВозврата.Добавить();
	нСтрока.ТекстОбласти = ИсходнаяСтрока;
	нСтрока.ТипОбласти = "Строка";
		
	Возврат ТзВозврата;
	
КонецФункции	

Процедура ОбновитьКонстантыДополнительныеЯзыки() Экспорт
	
	ТаблицаЯзыков = Константы.ДополнительныеЯзыкиВыводаОтчета.Получить().Получить();
	
	Если НЕ ТипЗнч(ТаблицаЯзыков)=Тип("ТаблицаЗначений") Тогда
		
		ТаблицаЯзыков=Новый ТаблицаЗначений;
		ТаблицаЯзыков.Колонки.Добавить("ПорядковыйНомер",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));
		ТаблицаЯзыков.Колонки.Добавить("КодЯзыка",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(2));
		ТаблицаЯзыков.Колонки.Добавить("НаименованиеЯзыка",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(150));
			
	КонецЕсли;	
	
	Если ТаблицаЯзыков.Количество()=2 Тогда
		
		Константы.ИспользоватьДополнительныеЯзыкиПредставления.Установить(Истина);
		
	Иначе
		
		ОбновитьКонстанту=Ложь;
		
		Для Каждого Язык ИЗ Метаданные.Языки Цикл
			
			Если Язык=Метаданные.ОсновнойЯзык Тогда
				
				Продолжить;
				
			ИначеЕсли ТаблицаЯзыков.Количество()=2 Тогда
				
				Прервать;
				
			ИначеЕсли ТаблицаЯзыков.Найти(Язык.КодЯзыка,"КодЯзыка")=Неопределено Тогда
				
				НоваяСтрока=ТаблицаЯзыков.Добавить();
				НоваяСтрока.КодЯзыка=Язык.КодЯзыка;
				НоваяСтрока.НаименованиеЯзыка=Язык.Синоним;
				НоваяСтрока.ПорядковыйНомер=ТаблицаЯзыков.Количество();
				
				ОбновитьКонстанту=Истина;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ОбновитьКонстанту Тогда
			
			Константы.ДополнительныеЯзыкиВыводаОтчета.Установить(Новый ХранилищеЗначения(ТаблицаЯзыков));
			
		КонецЕсли;
		
		Если ТаблицаЯзыков.Количество()>0 Тогда
			
			Константы.ИспользоватьДополнительныеЯзыкиПредставления.Установить(Истина);
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры // ОбновитьКонстантыДополнительныеЯзыки() 

Процедура ВыставитьСостоянияИТрендыАналитическойРассылки() Экспорт
	// Состояния.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ АналитическаяПодпискаРассылаемыеСостояния.СостояниеПоказателяМКП) КАК КоличествоСостояний,
	|	АналитическаяПодписка.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.АналитическаяПодписка КАК АналитическаяПодписка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АналитическаяПодписка.РассылаемыеСостояния КАК АналитическаяПодпискаРассылаемыеСостояния
	|		ПО (АналитическаяПодпискаРассылаемыеСостояния.Ссылка = АналитическаяПодписка.Ссылка)
	|ГДЕ
	|	НЕ АналитическаяПодписка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	АналитическаяПодписка.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ АналитическаяПодпискаРассылаемыеСостояния.СостояниеПоказателяМКП) <> 3";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПодпискаСсылка = ВыборкаДетальныеЗаписи.Ссылка;
		ПодпискаОбъект = ПодпискаСсылка.ПолучитьОбъект();
		ПодпискаОбъект.РассылаемыеСостояния.Очистить();
		ПодпискаОбъект.ДобавитьСтрокуТабличнойЧасти("РассылаемыеСостояния", "СостояниеПоказателяМКП", Перечисления.СостоянияПоказателейМКП.Хорошее);
		ПодпискаОбъект.ДобавитьСтрокуТабличнойЧасти("РассылаемыеСостояния", "СостояниеПоказателяМКП", Перечисления.СостоянияПоказателейМКП.Нормальное);
		ПодпискаОбъект.ДобавитьСтрокуТабличнойЧасти("РассылаемыеСостояния", "СостояниеПоказателяМКП", Перечисления.СостоянияПоказателейМКП.Тревожное);
		ПодпискаОбъект.Записать();
	КонецЦикла;
	// Тренды.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	АналитическаяПодписка.Ссылка КАК Ссылка,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ АналитическаяПодпискаРассылаемыеТренды.ТрендПоказателяМКП) КАК ТрендПоказателяМКП
	|ИЗ
	|	Справочник.АналитическаяПодписка КАК АналитическаяПодписка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.АналитическаяПодписка.РассылаемыеТренды КАК АналитическаяПодпискаРассылаемыеТренды
	|		ПО (АналитическаяПодпискаРассылаемыеТренды.Ссылка = АналитическаяПодписка.Ссылка)
	|ГДЕ
	|	НЕ АналитическаяПодписка.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	АналитическаяПодписка.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ АналитическаяПодпискаРассылаемыеТренды.ТрендПоказателяМКП) <> 3";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПодпискаСсылка = ВыборкаДетальныеЗаписи.Ссылка;
		ПодпискаОбъект = ПодпискаСсылка.ПолучитьОбъект();
		ПодпискаОбъект.РассылаемыеТренды.Очистить();
		ПодпискаОбъект.ДобавитьСтрокуТабличнойЧасти("РассылаемыеТренды", "ТрендПоказателяМКП", Перечисления.ТрендыПоказателейМКП.Отрицательный);
		ПодпискаОбъект.ДобавитьСтрокуТабличнойЧасти("РассылаемыеТренды", "ТрендПоказателяМКП", Перечисления.ТрендыПоказателейМКП.Нулевой);
		ПодпискаОбъект.ДобавитьСтрокуТабличнойЧасти("РассылаемыеТренды", "ТрендПоказателяМКП", Перечисления.ТрендыПоказателейМКП.Положительный);
		ПодпискаОбъект.Записать();
	КонецЦикла;
КонецПроцедуры		// ВыставитьСостоянияИТрендыАналитическойРассылки()

Процедура УстановитьСогласованиеДокументПротоколОтмены() Экспорт
	НайденныйСправочник = Справочники.ДокументыБД.НайтиПоНаименованию("ПротоколОтменыЗакупочнойПроцедуры", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	Если ЗначениеЗаполнено(НайденныйСправочник) Тогда
		СправочникОбъект = НайденныйСправочник.ПолучитьОбъект();
		СправочникОбъект.Согласуется = Истина;
		ПеречислениеБД = Справочники.ПеречисленияБД.НайтиПоНаименованию("СостоянияСогласования", , , Справочники.ТипыБазДанных.ТекущаяИБ);
		СправочникОбъект.РеквизитСостояния = ПеречислениеБД;
		СправочникОбъект.РеквизитСостоянияСтрока = "Перечисление." + Строка(ПеречислениеБД);
		СправочникОбъект.ЗначениеРеквизитаСостоянияЧерновик			= Перечисления.СостоянияСогласования.Черновик;
		СправочникОбъект.ЗначениеРеквизитаСостоянияНаУтверждении	= Перечисления.СостоянияСогласования.НаУтверждении;
		СправочникОбъект.ЗначениеРеквизитаСостоянияОтклонен			= Перечисления.СостоянияСогласования.Отклонена;
		СправочникОбъект.ЗначениеРеквизитаСостоянияУтвержден		= Перечисления.СостоянияСогласования.Утверждена;
		СправочникОбъект.Записать();
	Иначе
		// Пропускаем.
	КонецЕсли;
КонецПроцедуры		// УстановитьСогласованиеДокументПротоколОтмены()

Процедура ЗаполнитьДоступныеФормыСхемРеквизитов() Экспорт
	// Получение макета.
	МакетПоставка = Справочники.СхемаДоступностиРеквизитов.ПолучитьМакет("МакетДоступныеФормыСхемРеквизитов_Поставляемый_ru");
	КоличествоСтрок = МакетПоставка.ВысотаТаблицы;
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		// Считывание данных из макета.
		ТипОбъектаОбласть			 = МакетПоставка.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C1");
		НаименованиеОбъектаОбласть	 = МакетПоставка.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C2" );
		ДоступныеФормыОбласть		 = МакетПоставка.Область("R" + Формат(НомерСтроки, "ЧГ=0") + "C3" );
		ТипОбъектаСтрока			 = СокрЛП(ТипОбъектаОбласть.Текст);
		НаименованиеОбъектаСтрока	 = СокрЛП(НаименованиеОбъектаОбласть.Текст);
		ДоступныеФормыСтрока		 = СокрЛП(ДоступныеФормыОбласть.Текст);
		// Поиск справочника БД.
		Если ТипОбъектаСтрока = "Справочник" Тогда
			НайденныйСправочник = Справочники.СправочникиБД.НайтиПоНаименованию(НаименованиеОбъектаСтрока, , , Справочники.ТипыБазДанных.ТекущаяИБ);
		ИначеЕсли ТипОбъектаСтрока = "Документ" Тогда
			НайденныйСправочник = Справочники.ДокументыБД.НайтиПоНаименованию(НаименованиеОбъектаСтрока, , , Справочники.ТипыБазДанных.ТекущаяИБ);
		Иначе
			НайденныйСправочник = Неопределено;
		КонецЕсли;
		// Добавим в справочник формы из макета и перезапишем его. 
		Если ЗначениеЗаполнено(НайденныйСправочник) Тогда
			МассивФорм = СтрРазделить(ДоступныеФормыСтрока, ",");
			СправочникОбъект = НайденныйСправочник.ПолучитьОбъект();
			СправочникОбъект.ДоступныеФормыСхемРеквизитов.Очистить();
			Для Каждого ТекМассивФорм Из МассивФорм Цикл
				НоваяСтрока = СправочникОбъект.ДоступныеФормыСхемРеквизитов.Добавить();
				НоваяСтрока.ИмяДоступнойФормы = ТекМассивФорм;
			КонецЦикла;	
			СправочникОбъект.Записать();
		Иначе
			// Справочник БД не найден. Пропускаем.
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

Процедура ВыставитьКодыСпособовЗакупки() Экспорт
	СпособЗапросКотировокМсп	 = Перечисления.СпособыВыбораПоставщика.ЗапросКотировокУМсп;
	СпособКонкурсУМсп			 = Перечисления.СпособыВыбораПоставщика.КонкурсУМсп;
	СпособАукционУМсп			 = Перечисления.СпособыВыбораПоставщика.АукционУМсп;
	СпособЗапросПредложенийУМсп	 = Перечисления.СпособыВыбораПоставщика.ЗапросПредложенийУМсп;
	НаименованиеЗапросКотировокМсп		 = НСтр("ru = 'Запрос котировок в электронной форме, участниками которого могут быть только субъекты малого и среднего предпринимательства'");
	НаименованиеКонкурсУМсп				 = НСтр("ru = 'Конкурс в электронной форме, участниками которого могут быть только субъекты малого и среднего предпринимательства'");
	НаименованиеАукционУМсп				 = НСтр("ru = 'Аукцион в электронной форме, участниками которого могут быть только субъекты малого и среднего предпринимательства'");
	НаименованиеЗапросПредложенийУМсп	 = НСтр("ru = 'Запрос предложений в электронной форме, участниками которого могут быть только субъекты малого и среднего предпринимательства'");
	УстановитьКодЕис(СпособЗапросКотировокМсп,		 4511, НаименованиеЗапросКотировокМсп);
	УстановитьКодЕис(СпособКонкурсУМсп,				 4509, НаименованиеКонкурсУМсп);
	УстановитьКодЕис(СпособАукционУМсп,				 4510, НаименованиеАукционУМсп);
	УстановитьКодЕис(СпособЗапросПредложенийУМсп,	 4512, НаименованиеЗапросПредложенийУМсп);
КонецПроцедуры		// ВыставитьКодыСпособовЗакупки()

#КонецОбласти

#Область Версия_3_1

Процедура ПерезаписатьМПБланки() Экспорт
	
	 Запрос = Новый Запрос;
	  Запрос.Текст = "ВЫБРАТЬ
	  |	БланкиОтчетов.Ссылка КАК Ссылка
	  |ИЗ
	  |	Справочник.БланкиОтчетов КАК БланкиОтчетов
	  |ГДЕ
	  |	БланкиОтчетов.РежимБланка = 2
	  |	И БланкиОтчетов.ПометкаУдаления = Ложь";
	  
	  
	  Результат = Запрос.Выполнить();
	  Выборка = Результат.Выбрать();
	  
	  Пока Выборка.Следующий() Цикл 
		  
		  Бланк = Выборка.Ссылка;
		  
		  Попытка 
			  
			  ПолеТабличногоДокументаМакет 	= Новый ТабличныйДокумент;
			 
			  ОбъектАБ = Обработки.АналитическийБланк.Создать();
			  Обработки.АналитическийБланк.ПрочитатьНастройкиАналитическогоБланка(ПолеТабличногоДокументаМакет,Бланк,ОбъектАБ);	
			  ПодготовитьКэшСГруппировками(ПолеТабличногоДокументаМакет,ОбъектАБ);
			  			  
			  Отказ = Ложь;				
			  Уид   = Новый УникальныйИдентификатор;
			  Справочники.БланкиОтчетов.СохранитьМакетМногопериодногоБланка(Бланк,ПолеТабличногоДокументаМакет,ОбъектАБ,Уид,Отказ);
			  
		  Исключение	 
			  
			  ТекстСообщения = НСтр("ru = 'При перезаписи бланка %Бланк% произошла ошибка
			  |			%ОписаниеОшибки%'");
			  ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Бланк%", Строка(Бланк));
			  ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", Строка(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			  ЗаписьЖурналаРегистрации(
			  ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
			  УровеньЖурналаРегистрации.Ошибка,
			  Метаданные.Справочники.БланкиОтчетов,
			  Бланк, 
			  ТекстСообщения);
			  
			  ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);	
		  КонецПопытки;	 
		  
	  КонецЦикла;
	  	
КонецПроцедуры	

Процедура ЗаполнитьСтрокиАдресаМестПоставки() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МестаПоставки.Ссылка КАК Ссылка,
		|	МестаПоставки.Адрес КАК Адрес
		|ИЗ
		|	Справочник.МестаПоставки КАК МестаПоставки
		|ГДЕ
		|	МестаПоставки.АдресСтрокой = """"";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		МестоПоставкиОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		МестоПоставкиОбъект.ОбновитьПредставлениеАдресовВОбъекте();
		ЗаписатьОбъект(МестоПоставкиОбъект);
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьСтрокиАдресаАнкетПоставщиков() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	АнкетыПоставщиков.Ссылка КАК Ссылка,
		|	АнкетыПоставщиков.ФактическийАдрес КАК ФактическийАдрес,
		|	АнкетыПоставщиков.ЮридическийАдрес КАК ЮридическийАдрес
		|ИЗ
		|	Справочник.АнкетыПоставщиков КАК АнкетыПоставщиков
		|ГДЕ
		|	(АнкетыПоставщиков.ФактическийАдресСтрокой = """"
		|			ИЛИ АнкетыПоставщиков.ЮридическийАдресСтрокой = """")";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		АнкетаПоставщикаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		АнкетаПоставщикаОбъект.ОбновитьПредставлениеАдресовВОбъекте();
		ЗаписатьОбъект(АнкетаПоставщикаОбъект);
	КонецЦикла;
КонецПроцедуры

Процедура ЗадатьНастройкиДокументаЗаказПоставщику() Экспорт
	ПеречислениеБД = Справочники.ПеречисленияБД.НайтиПоНаименованию("СостоянияСогласования", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	ДокументБД = Справочники.ДокументыБД.НайтиПоНаименованию("ЗаказПоставщику", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	ДокументОбъект = ДокументБД.ПолучитьОбъект();
	ДокументОбъект.Согласуется = Истина;
	ДокументОбъект.РеквизитСостояния = ПеречислениеБД;
	ДокументОбъект.РеквизитСостоянияСтрока = "Перечисление." + Строка(ПеречислениеБД);
	ДокументОбъект.ЗначениеРеквизитаСостоянияНаУтверждении = Перечисления.СостоянияСогласования.НаУтверждении;
	ДокументОбъект.ЗначениеРеквизитаСостоянияУтвержден = Перечисления.СостоянияСогласования.Утверждена;
	ДокументОбъект.ЗначениеРеквизитаСостоянияОтклонен = Перечисления.СостоянияСогласования.Отклонена;
	ДокументОбъект.ЗначениеРеквизитаСостоянияЧерновик = Перечисления.СостоянияСогласования.Черновик;
	ДокументОбъект.Записать();
КонецПроцедуры		// ЗадатьНастройкиДокументаЗаказПоставщику()

Процедура ПерезаполнитьСторноПланаПоставокВДоговорах() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсияСоглашенияКоммерческийДоговорРодитель.Ссылка КАК Родитель,
		|	ВерсияСоглашенияКоммерческийДоговорПотомок.Ссылка КАК Потомок
		|ПОМЕСТИТЬ ВТ_Потомки
		|ИЗ
		|	Документ.ВерсияСоглашенияКоммерческийДоговор КАК ВерсияСоглашенияКоммерческийДоговорПотомок
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВерсияСоглашенияКоммерческийДоговор КАК ВерсияСоглашенияКоммерческийДоговорРодитель
		|		ПО ВерсияСоглашенияКоммерческийДоговорПотомок.ДокументОснование = ВерсияСоглашенияКоммерческийДоговорРодитель.Ссылка
		|ГДЕ
		|	ВерсияСоглашенияКоммерческийДоговорПотомок.Проведен
		|	И ВерсияСоглашенияКоммерческийДоговорПотомок.ВидСоглашения <> ЗНАЧЕНИЕ(Перечисление.ВидыСоглашений.РамочныйДоговор)
		|	И ВерсияСоглашенияКоммерческийДоговорРодитель.ВидСоглашения <> ЗНАЧЕНИЕ(Перечисление.ВидыСоглашений.РамочныйДоговор)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_Потомки.Потомок КАК Ссылка
		|ИЗ
		|	ВТ_Потомки КАК ВТ_Потомки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланПоставокПоДоговорам КАК ПланПоставокПоДоговорамПотомка
		|		ПО (ПланПоставокПоДоговорамПотомка.Регистратор = ВТ_Потомки.Потомок)
		|			И (ПланПоставокПоДоговорамПотомка.Количество <= 0)
		|			И (ПланПоставокПоДоговорамПотомка.Сумма <= 0)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПланПоставокПоДоговорам КАК ПланПоставокПоДоговорамРодителя
		|		ПО (ПланПоставокПоДоговорамРодителя.Регистратор = ВТ_Потомки.Родитель)
		|			И (ПланПоставокПоДоговорамРодителя.Количество >= 0)
		|			И (ПланПоставокПоДоговорамРодителя.Сумма >= 0)
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_Потомки.Потомок
		|
		|ИМЕЮЩИЕ
		|	(-ЕСТЬNULL(СУММА(ПланПоставокПоДоговорамПотомка.Количество), 0) <> ЕСТЬNULL(СУММА(ПланПоставокПоДоговорамРодителя.Количество), 0)
		|		ИЛИ -ЕСТЬNULL(СУММА(ПланПоставокПоДоговорамПотомка.Сумма), 0) <> ЕСТЬNULL(СУММА(ПланПоставокПоДоговорамРодителя.Сумма), 0))";
	РезультатЗапроса = Запрос.Выполнить();
	НаборЗаписей =
		РегистрыНакопления.ПланПоставокПоДоговорам.СоздатьНаборЗаписей(); 
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Ссылка = ВыборкаДетальныеЗаписи.Ссылка;
		НаборЗаписей.Очистить();
        НаборЗаписей.Отбор.Регистратор.Значение = Ссылка;
		Документы.ВерсияСоглашенияКоммерческийДоговор.ЗаполнитьДвиженияПланПоставокПоДоговорам(
			Ссылка, НаборЗаписей);
		Для Каждого Запись Из НаборЗаписей Цикл
			Запись.Регистратор = Ссылка;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
	КонецЦикла;
КонецПроцедуры

Процедура ПроверкаСтандартныхПериодов(Параметры = Неопределено) Экспорт
	
	ЗапросПоСтандартнымПериодам = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МИНИМУМ(Периоды.ДатаНачала) КАК НачалоПериода,
	|	МАКСИМУМ(Периоды.ДатаОкончания) КАК КонецПериода
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|
	|ИМЕЮЩИЕ
	|	НЕ МИНИМУМ(Периоды.ДатаНачала) ЕСТЬ NULL И
	|	НЕ МАКСИМУМ(Периоды.ДатаОкончания) ЕСТЬ NULL");
	
	ТекущийГод = Год(ТекущаяДата());
	ОграничениеДатаНачала = Дата(ТекущийГод - 10, 1, 1);
	ОграничениеДатаОкончания = Дата(ТекущийГод + 10, 12, 31, 23, 59, 59);
	
	ВыборкаПериодов = ЗапросПоСтандартнымПериодам.Выполнить().Выбрать();
	
	Если ВыборкаПериодов.Следующий() тогда
		ПериодыУХПовтИсп.ПроверитьИнтервалПериодов(
			Макс(ВыборкаПериодов.НачалоПериода, ОграничениеДатаНачала), 
			Мин(ВыборкаПериодов.КонецПериода, ОграничениеДатаОкончания));
	Иначе
		ПериодыУХПовтИсп.ПроверитьИнтервалПериодов(ОграничениеДатаНачала, ОграничениеДатаОкончания);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКонстантуАктуализироватьЗаявкиПоГрафикам() Экспорт

	УстановитьПривилегированныйРежим(Истина);

	РегЗадание = Метаданные.РегламентныеЗадания.ФормированиеЗаявокПоГрафикамОплаты;
	ИспользованиеРегЗадания = РегламентныеЗаданияСервер.РегламентноеЗаданиеИспользуется(РегЗадание);

	Если ИспользованиеРегЗадания Тогда
		Константы.АвтоматическиАктуализироватьЗаявкиПоГрафикамДоговоров.Установить(Истина);
	КонецЕсли

КонецПроцедуры

Процедура ЗадатьНастройкиДокументаСтрокаПланаЗакупок() Экспорт
	ПеречислениеБД = Справочники.ПеречисленияБД.НайтиПоНаименованию("СтатусыВыгружаемыхОбъектовЕИС", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	ДокументБД = Справочники.ДокументыБД.НайтиПоНаименованию("СтрокаПланаЗакупок", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	ДокументОбъект = ДокументБД.ПолучитьОбъект();
	ДокументОбъект.Согласуется = Истина;
	ДокументОбъект.РеквизитСостояния = ПеречислениеБД;
	ДокументОбъект.РеквизитСостоянияСтрока = "Перечисление." + Строка(ПеречислениеБД);
	ДокументОбъект.ЗначениеРеквизитаСостоянияНаУтверждении = Перечисления.СтатусыВыгружаемыхОбъектовЕИС.НаУтверждении;
	ДокументОбъект.ЗначениеРеквизитаСостоянияУтвержден = Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Утвержден;
	ДокументОбъект.ЗначениеРеквизитаСостоянияОтклонен = Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Возвращен;
	ДокументОбъект.ЗначениеРеквизитаСостоянияЧерновик = Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Черновик;
	ДокументОбъект.Записать();
КонецПроцедуры		// ЗадатьНастройкиДокументаСтрокаПланаЗакупок()

Процедура ЗадатьНастройкиДокументаПрограммаЗакупок() Экспорт
	ПеречислениеБД = Справочники.ПеречисленияБД.НайтиПоНаименованию("СтатусыВыгружаемыхОбъектовЕИС", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	ДокументБД = Справочники.ДокументыБД.НайтиПоНаименованию("ПрограммаЗакупок", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	ДокументОбъект = ДокументБД.ПолучитьОбъект();
	ДокументОбъект.Согласуется = Истина;
	ДокументОбъект.РеквизитСостояния = ПеречислениеБД;
	ДокументОбъект.РеквизитРазделенияПоОрганизациям = "ОрганизацияДляЗаключенияДоговора";
	ДокументОбъект.РеквизитСостоянияСтрока = "Перечисление." + Строка(ПеречислениеБД);
	ДокументОбъект.ЗначениеРеквизитаСостоянияНаУтверждении	 = Перечисления.СтатусыВыгружаемыхОбъектовЕИС.НаУтверждении;
	ДокументОбъект.ЗначениеРеквизитаСостоянияУтвержден		 = Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Утвержден;
	ДокументОбъект.ЗначениеРеквизитаСостоянияОтклонен		 = Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Возвращен;
	ДокументОбъект.ЗначениеРеквизитаСостоянияЧерновик		 = Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Черновик;
	ДокументОбъект.Записать();
КонецПроцедуры		// ЗадатьНастройкиДокументаПрограммаЗакупок()

Процедура УстановитьСостоянияЭтаповПроцессаСтрокиПланаЗакупок() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭтапыУниверсальныхПроцессов.Ссылка КАК Ссылка,
		|	ЭтапыУниверсальныхПроцессов.Владелец КАК Владелец,
		|	ЭтапыУниверсальныхПроцессов.СтатусСогласованияОбъекта КАК СтатусСогласованияОбъекта
		|ИЗ
		|	Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапыУниверсальныхПроцессов
		|ГДЕ
		|	ЭтапыУниверсальныхПроцессов.Владелец.ТипОбъектаСогласования = &ТипОбъектаСогласования
		|	И НЕ ЭтапыУниверсальныхПроцессов.Владелец.ПометкаУдаления
		|	И НЕ ЭтапыУниверсальныхПроцессов.ПометкаУдаления";
	Запрос.УстановитьПараметр("ТипОбъектаСогласования", Справочники.ДокументыБД.НайтиПоНаименованию("СтрокаПланаЗакупок"));
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СправочникСсылка = ВыборкаДетальныеЗаписи.Ссылка;
		СправочникОбъект = СправочникСсылка.ПолучитьОбъект();
		СтарыйСтатус = СправочникОбъект.СтатусСогласованияОбъекта;
		НовыйСтатус = ЦентрализованныеЗакупкиКлиентСерверУХ.СостоянияСогласованияВСтатусыВыгружаемыхОбъектов(СтарыйСтатус);
		СправочникОбъект.СтатусСогласованияОбъекта = НовыйСтатус;
		СправочникОбъект.Записать();
	КонецЦикла;
КонецПроцедуры		// УстановитьСостоянияЭтаповПроцессаСтрокиПланаЗакупок()

Процедура ЗадатьНастройкиСправочникаЗакупочныеПроцедурыЕИС() Экспорт
	ПеречислениеБД = Справочники.ПеречисленияБД.НайтиПоНаименованию("СтатусыВыгружаемыхОбъектовЕИС", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	СправочникБД = Справочники.СправочникиБД.НайтиПоНаименованию("ЗакупочныеПроцедуры", , , Справочники.ТипыБазДанных.ТекущаяИБ);
	СправочникОбъект = СправочникБД.ПолучитьОбъект();
	СправочникОбъект.Согласуется = Истина;
	СправочникОбъект.РеквизитСостояния = ПеречислениеБД;
	СправочникОбъект.РеквизитСостоянияСтрока = "Перечисление." + Строка(ПеречислениеБД);
	СправочникОбъект.ЗначениеРеквизитаСостоянияНаУтверждении = Перечисления.СтатусыВыгружаемыхОбъектовЕИС.НаУтверждении;
	СправочникОбъект.ЗначениеРеквизитаСостоянияУтвержден = Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Утвержден;
	СправочникОбъект.ЗначениеРеквизитаСостоянияОтклонен = Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Возвращен;
	СправочникОбъект.ЗначениеРеквизитаСостоянияЧерновик = Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Черновик;
	СправочникОбъект.Записать();
КонецПроцедуры		// ЗадатьНастройкиСправочникаЗакупочныеПроцедурыЕИС()

Процедура ОбновитьСостоянияОбъектовЗакупок() Экспорт
	СоответствиеСостояний = Новый Соответствие;
	СоответствиеСостояний.Вставить(Перечисления.СостоянияСогласования.Черновик, Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Черновик);
	СоответствиеСостояний.Вставить(Перечисления.СостоянияСогласования.НаУтверждении, Перечисления.СтатусыВыгружаемыхОбъектовЕИС.НаУтверждении);
	СоответствиеСостояний.Вставить(Перечисления.СостоянияСогласования.Утверждена, Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Утвержден);
	СоответствиеСостояний.Вставить(Перечисления.СостоянияСогласования.Отклонена, Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Возвращен);
	СоответствиеСостояний.Вставить(Перечисления.СостоянияСогласования.Черновик, Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Черновик);
	СоответствиеСостояний.Вставить(Перечисления.СостоянияСогласования.Возвращена, Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Возвращен);
	СоответствиеСостояний.Вставить(Перечисления.СостоянияСогласования.ПустаяСсылка(), Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Черновик);
	СоответствиеСостояний.Вставить(Справочники.СостоянияСогласования.НаУтверждении, Перечисления.СтатусыВыгружаемыхОбъектовЕИС.НаУтверждении);
	СоответствиеСостояний.Вставить(Справочники.СостоянияСогласования.Отклонено, Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Возвращен);
	СоответствиеСостояний.Вставить(Справочники.СостоянияСогласования.Утверждено, Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Утвержден);
	СоответствиеСостояний.Вставить(Справочники.СостоянияСогласования.Черновик, Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Черновик);
	СоответствиеСостояний.Вставить(Справочники.СостоянияСогласования.ПустаяСсылка(), Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Черновик);
	СтатусЧерновик = Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Черновик;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РегистрСостоянийОбъектов.Объект КАК ОбъектСостояния
		|ИЗ
		|	РегистрСведений.РегистрСостоянийОбъектов КАК РегистрСостоянийОбъектов
		|ГДЕ
		|	РегистрСостоянийОбъектов.Объект ССЫЛКА Справочник.ЗакупочныеПроцедуры
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистрСостоянийОбъектов.Объект
		|ИЗ
		|	РегистрСведений.РегистрСостоянийОбъектов КАК РегистрСостоянийОбъектов
		|ГДЕ
		|	РегистрСостоянийОбъектов.Объект ССЫЛКА Документ.СтрокаПланаЗакупок
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РегистрСостоянийОбъектов.Объект
		|ИЗ
		|	РегистрСведений.РегистрСостоянийОбъектов КАК РегистрСостоянийОбъектов
		|ГДЕ
		|	РегистрСостоянийОбъектов.Объект ССЫЛКА Документ.ПрограммаЗакупок";
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НаборЗаписей = РегистрыСведений.РегистрСостоянийОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ВыборкаДетальныеЗаписи.ОбъектСостояния); 
		НаборЗаписей.Прочитать();
		Для Каждого ТекНаборЗаписей Из НаборЗаписей Цикл
			СтарыйСтатус = ТекНаборЗаписей.СостояниеОбъекта;
			Если ТипЗнч(СтарыйСтатус) <> Тип("ПеречислениеСсылка.СтатусыВыгружаемыхОбъектовЕИС") Тогда
				НовыйСтатус = СоответствиеСостояний.Получить(СтарыйСтатус);
				Если НовыйСтатус <> Неопределено Тогда
					ТекНаборЗаписей.СостояниеОбъекта = НовыйСтатус;
				Иначе
					ТекНаборЗаписей.СостояниеОбъекта = СтатусЧерновик;
				КонецЕсли;
			Иначе
				// Уже установлен корректный статус.
			КонецЕсли;
		КонецЦикла;	
		НаборЗаписей.Записать(); 
	КонецЦикла;
КонецПроцедуры		// ОбновитьСостоянияОбъектовЗакупок()

Процедура УстановитьВидЛотовойЗакупки(Параметры = Неопределено) Экспорт
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	Лоты.Ссылка КАК Ссылка,
	             |	Лоты.РазрешенаЧастичнаяПоставка КАК РазрешенаЧастичнаяПоставка
	             |ИЗ
	             |	Справочник.Лоты КАК Лоты";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Лот = Выборка.Ссылка.ПолучитьОбъект();
		Лот.ВидЗакупки = ?(Выборка.РазрешенаЧастичнаяПоставка = Истина,Перечисления.ВидЛотовойЗакупки.ПопозиционнаяЗакупка,Перечисления.ВидЛотовойЗакупки.ЛотоваяЗакупка);
		ОбновлениеИнформационнойБазыУХ.ЗаписатьОбъект(Лот, Ложь, Ложь);
	КонецЦикла;
КонецПроцедуры

Процедура СоздатьТипыОтчетностиОДоговорахЕИСНаСервере() Экспорт
	Справочники.ТипыОтчетностиОДоговорахЕИС.ЗаполнитьИзСхемыЕИСВерсия92();
КонецПроцедуры

Процедура ИсправитьИерархиюАдресации() Экспорт
	
	ЗапросПоАдресации = Новый Запрос("ВЫБРАТЬ
	|	ИерархияРасширеннойАдресации.ЭлементАдресации КАК ЭлементАдресации,
	|	ИерархияРасширеннойАдресации.РодительЭлемента КАК РодительЭлемента,
	|	ИерархияРасширеннойАдресации.СправочникИБ КАК СправочникИБ
	|ИЗ
	|	РегистрСведений.ИерархияРасширеннойАдресации КАК ИерархияРасширеннойАдресации
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ИерархияРасширеннойАдресации.ЭлементАдресации) <> ТИПЗНАЧЕНИЯ(ИерархияРасширеннойАдресации.РодительЭлемента)");
	
	ВыборкаПоАдресации = ЗапросПоАдресации.Выполнить().Выбрать();
	МенеджерЗаписи = РегистрыСведений.ИерархияРасширеннойАдресации.СоздатьМенеджерЗаписи();
	
	Пока ВыборкаПоАдресации.Следующий() Цикл
		
		Если ЗначениеЗаполнено(ВыборкаПоАдресации.РодительЭлемента) тогда
			Продолжить;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ВыборкаПоАдресации);
		МенеджерЗаписи.Прочитать();
		
		Если МенеджерЗаписи.Выбран() тогда
			МенеджерЗаписи.РодительЭлемента = Новый (ТипЗнч(МенеджерЗаписи.ЭлементАдресации));
			
			Попытка
				МенеджерЗаписи.Записать();
			Исключение
				ТекстСообщения = СтрШаблон(НСтр(
				"ru = 'Не удалось записать регистр сведений ""%1""
				|%2'"),
				"ИерархияРасширеннойАдресации",
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				,
				, 
				ТекстСообщения);
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновлениеИспользованиеПорталаВГО() Экспорт 

	Константы.ИспользоватьПорталВГО.Установить(Константы.РассчитыватьРасхожденияВГО.Получить());

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОТОКОЛИРОВАНИЕ ХОДА ОБНОВЛЕНИЯ

Функция СобытиеЖурналаРегистрации()
	
	Возврат НСтр("ru = 'Обновление информационной базы УХ'");
	
КонецФункции	

Процедура ЗаписатьОшибку(Знач Текст) 
	
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Ошибка,,, Текст);
	
КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФункцииДляИспользованияВОбработчикахОбновления

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для использования в обработчиках обновления.

// Записывает изменения в переданном объекте.
// Для использования в обработчиках обновления.
//
// Параметры:
//   Данные                            - Произвольный - объект, набор записей или менеджер константы, который
//                                                      необходимо записать.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьДанные(Знач Данные, Знач РегистрироватьНаУзлахПлановОбмена = Ложь, 
	Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	Данные.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Если Не РегистрироватьНаУзлахПлановОбмена Тогда
		Данные.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Данные.Записать();
	
КонецПроцедуры

// Записывает изменения в переданном объекте ссылочного типа.
// Для использования в обработчиках обновления.
//
// Параметры:
//   Объект                            - Произвольный - записываемый объект ссылочного типа. Например, СправочникОбъект.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьОбъект(Знач Объект, Знач РегистрироватьНаУзлахПлановОбмена = Неопределено, 
	Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	Если РегистрироватьНаУзлахПлановОбмена = Неопределено И Объект.ЭтоНовый() Тогда
		РегистрироватьНаУзлахПлановОбмена = Истина;
	Иначе
		РегистрироватьНаУзлахПлановОбмена = Ложь;
	КонецЕсли;
	
	Объект.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Если Не РегистрироватьНаУзлахПлановОбмена Тогда
		Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Объект.Записать();
	
КонецПроцедуры

Процедура ПровестиДокумент(Данные, ТекстНачалаОшибки = "", ЗаписатьЕслиНеУдалосьПровести = Истина, ОтказЕслиНеПроведен = Ложь, ОтказЕслиНеЗаписан = Ложь) Экспорт

	Попытка				
		Данные.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(ТекстНачалаОшибки + "Не удалось провести документ <%1>: " + ОписаниеОшибки(), Данные), ОтказЕслиНеПроведен);
	КонецПопытки;
	
	Если Не ОтказЕслиНеПроведен Тогда
		Возврат;
	ИначеЕсли Не ЗаписатьЕслиНеУдалосьПровести Тогда
		
	КонецЕсли;	
		
	Попытка
		Данные.Проведен = Ложь;
		Данные.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(ТекстНачалаОшибки + "Не удалось записать документ <%1>: " + ОписаниеОшибки(), Данные), ОтказЕслиНеЗаписан);
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПредопределенныхЭлементовИзМакета(ОбъектМетаданных, МакетСДанными) Экспорт
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
	
	// Сформируем описание данных заполнения по первой строке макета
	ОписаниеПолейЗаполнения = Новый Структура;
	Для НомерКолонки = 2 По МакетСДанными.ШиринаТаблицы Цикл
		ИмяПоля = СокрЛП(МакетСДанными.Область(1, НомерКолонки).Текст);
		Если Не ПустаяСтрока(ИмяПоля)Тогда
			ОписаниеПолейЗаполнения.Вставить(ИмяПоля, НомерКолонки);
		КонецЕсли;
	КонецЦикла;
	
	Для НомерСтроки = 2 По МакетСДанными.ВысотаТаблицы Цикл
		
		ИмяПредопределенногоЭлемента = СокрЛП(МакетСДанными.Область(НомерСтроки, 1).Текст);
		
		Попытка
			ПредопределенныйЭлемент = МенеджерОбъекта[ИмяПредопределенногоЭлемента];
		Исключение
			Продолжить;
		КонецПопытки;
		
		Объект = ПредопределенныйЭлемент.ПолучитьОбъект();
		
		// Заполним каждый реквизит.
		Для Каждого ТекРеквизит Из ОбъектМетаданных.Реквизиты Цикл
			
			ИмяРеквизита = ТекРеквизит.Имя;
			
			Если Объект.ЭтоГруппа И ТекРеквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
				Продолжить;
			КонецЕсли;
			
			ДопустимоСсылочноеЗначение = Ложь;
			
			Для Каждого ТекущийТип Из ТекРеквизит.Тип.Типы() Цикл
				Если ОбщегоНазначения.ЭтоСсылка(ТекущийТип) Тогда 
					ДопустимоСсылочноеЗначение = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ОписаниеПолейЗаполнения.Свойство(ИмяРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			
			НомерКолонки = ОписаниеПолейЗаполнения[ИмяРеквизита];
			ТекстЗаполнения =  СокрЛП(МакетСДанными.Область(НомерСтроки, НомерКолонки).Текст);
			
			Если Не ЗначениеЗаполнено(ТекстЗаполнения) Тогда
				Объект[ИмяРеквизита] = Неопределено;
			ИначеЕсли ДопустимоСсылочноеЗначение Тогда
				
				Объект[ИмяРеквизита] = ПредопределенноеЗначение(ТекстЗаполнения);
				
			Иначе
				// Это значение примитивного типа.
				Объект[ИмяРеквизита] = ТекстЗаполнения;
			КонецЕсли;
			
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПодготовитьКэшСГруппировками(ПолеТабличногоДокументаМакет,ОбъектАБ)
		
	ОбъектАБ.КэшРаскрываемыхОбластейСгруппированный.Очистить();
	ОбъектАБ.КэшТаблицРаскрываемыхОбластей.Очистить();
	ОбъектАБ.НастройкиТаблицРаскрываемыхОбластей.Очистить();
	
	Для Каждого облРаскрытия Из ОбъектАБ.КэшРаскрываемыхОбластей Цикл			
		ОбластьРаскрытия =  ПолеТабличногоДокументаМакет.Области.Найти(облРаскрытия.ИмяОбласти);		
		ФлВключенияОбласти = Истина;	
		Если Не ОбластьРаскрытия = Неопределено Тогда	
			
			облРаскрытия.Лево = ОбластьРаскрытия.Лево;
			облРаскрытия.Верх = ОбластьРаскрытия.Верх;
			
			//Строки
			Если ОбластьРаскрытия.Лево=0 Тогда		
				Для Каждого ОбластьДляПроверки Из ОбъектАБ.КэшРаскрываемыхОбластей Цикл	
					тОбласть = ПолеТабличногоДокументаМакет.Области.Найти(ОбластьДляПроверки.ИмяОбласти);
					Если тОбласть.Верх<ОбластьРаскрытия.Верх И тОбласть.Низ>=ОбластьРаскрытия.Низ Тогда
						ФлВключенияОбласти = Ложь; Прервать; 	
					КонецЕсли;				
				КонецЦикла;				
				Если ФлВключенияОбласти Тогда
					НобластьКэша = ОбъектАБ.КэшРаскрываемыхОбластейСгруппированный.Добавить();
					ЗаполнитьЗначенияСвойств(НобластьКэша,облРаскрытия);
					НобластьКэша.Низ =  ОбластьРаскрытия.Низ;
					НобластьКэша.Лево = 9999;		
				КонецЕсли;
			КонецЕсли;		
			//Колонки
			Если ОбластьРаскрытия.Верх=0 Тогда		
				Для Каждого ОбластьДляПроверки Из ОбъектАБ.КэшРаскрываемыхОбластей Цикл
					тОбласть = ПолеТабличногоДокументаМакет.Области.Найти(ОбластьДляПроверки.ИмяОбласти);
					//Если область имеет область - родителя, то игнорируем ее 
					Если тОбласть.Лево<ОбластьРаскрытия.Лево И тОбласть.Право>=ОбластьРаскрытия.Право Тогда
						ФлВключенияОбласти = Ложь; Прервать;						
					КонецЕсли;				
				КонецЦикла;			
				Если ФлВключенияОбласти Тогда
					НобластьКэша = ОбъектАБ.КэшРаскрываемыхОбластейСгруппированный.Добавить();
					ЗаполнитьЗначенияСвойств(НобластьКэша,облРаскрытия);
					НобластьКэша.Право =  ОбластьРаскрытия.Право;
					НобластьКэша.Верх = 9999;
				КонецЕсли;
			КонецЕсли;		
		КонецЕсли;						
	КонецЦикла;	
	
	
	
	
	//Готовим области таблиц
	тСтроки 	= ОбъектАБ.КэшРаскрываемыхОбластей.НайтиСтроки(Новый Структура("Лево",0));
	тКолонки 	= ОбъектАБ.КэшРаскрываемыхОбластей.НайтиСтроки(Новый Структура("Верх",0));
		
	Для Каждого тСтрока Из тСтроки Цикл	
		сНастройкиАналитикРаскрытия = ЗначениеИзСтрокиВнутр(тСтрока.НастройкиАналитикРаскрытия);
		тНастройкиАналитикРаскрытия = сНастройкиАналитикРаскрытия.СкопироватьКолонки();
		тОбластьСтрока              = ПолеТабличногоДокументаМакет.Область(тСтрока.ИмяОбласти);
		
		Для Каждого строкаАналитики Из сНастройкиАналитикРаскрытия Цикл
			тстрокаАналитики = тНастройкиАналитикРаскрытия.Добавить();
			ЗаполнитьЗначенияСвойств(тСтрокаАналитики,строкаАналитики);
		КонецЦикла;	
		Для Каждого тКолонка Из тКолонки Цикл	
			
		    тОбластьКолонка              = ПолеТабличногоДокументаМакет.Область(тКолонка.ИмяОбласти);
			
			кНастройкиАналитикРаскрытия = ЗначениеИзСтрокиВнутр(тКолонка.НастройкиАналитикРаскрытия);
			Для Каждого строкаАналитики Из кНастройкиАналитикРаскрытия Цикл
				тстрокаАналитики = тНастройкиАналитикРаскрытия.Добавить();
				ЗаполнитьЗначенияСвойств(тСтрокаАналитики,строкаАналитики);
			КонецЦикла;			
			нТаблица = ОбъектАБ.КэшТаблицРаскрываемыхОбластей.Добавить();
			нТаблица.УидГруппыОтборов =СтрЗаменить(Новый УникальныйИдентификатор,"-","");
			нТаблица.Лево 	= тОбластьКолонка.Лево;
			нТаблица.Право 	= тОбластьКолонка.Право;
			нТаблица.Верх 	= тОбластьСтрока.Верх;
			нТаблица.Низ 	= тОбластьСтрока.Низ;
			нТаблица.ИмяОбластиСтрок 	= тСтрока.ИмяОбласти;
			нТаблица.ИмяОбластиКолонок = тКолонка.ИмяОбласти;
			нТаблица.НастройкиАналитикРаскрытия = ЗначениеВСтрокуВнутр(тНастройкиАналитикРаскрытия);	
			нТаблица.ИмяОбласти           =  ПолеТабличногоДокументаМакет.Область(нТаблица.Верх,нТаблица.Лево,нТаблица.Низ,нТаблица.Право).Имя;
			
			ОтборРаскрываемойОбластиСтроки  = ОбъектАБ.НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов",тСтрока.УидГруппыОтборов));
			ОтборРаскрываемойОбластиКолонки = ОбъектАБ.НастройкиРаскрываемыхОбластей.НайтиСтроки(Новый Структура("УидГруппыОтборов",тКолонка.УидГруппыОтборов));
			
			Для Каждого СтрокаОтбор Из ОтборРаскрываемойОбластиСтроки Цикл
				нОтбор = ОбъектАБ.НастройкиТаблицРаскрываемыхОбластей.Добавить();
				ЗаполнитьЗначенияСвойств(нОтбор,СтрокаОтбор);
				нОтбор.УидГруппыОтборов = нТаблица.УидГруппыОтборов;
			Конеццикла;
			
			Для Каждого СтрокаОтбор Из ОтборРаскрываемойОбластиКолонки Цикл
				нОтбор = ОбъектАБ.НастройкиТаблицРаскрываемыхОбластей.Добавить();
				ЗаполнитьЗначенияСвойств(нОтбор,СтрокаОтбор);
				нОтбор.УидГруппыОтборов = нТаблица.УидГруппыОтборов;
			Конеццикла;

			
		КонецЦикла;		
	КонецЦикла;	
			
   ОбъектАБ.КэшВыводаОбластейМакета.Очистить();	
   Лево =1;
   Верх =1;
   
   ОбъектАБ.КэшРаскрываемыхОбластейСгруппированный.Сортировать("Верх,Лево");
   КолонкиРаскрытия 	= ОбъектАБ.КэшРаскрываемыхОбластейСгруппированный.Выгрузить(Новый Структура("Верх",9999));
   СтрокиРаскрытия		= ОбъектАБ.КэшРаскрываемыхОбластейСгруппированный.Выгрузить(Новый Структура("Лево",9999));
   
   нКол  		= КолонкиРаскрытия.Добавить();
   Нкол.Лево    = ПолетабличногоДокументаМакет.ШиринаТаблицы+1;
   Нкол.ИмяОбласти = "МаркерОкончания";
   
   Низ 		= ПолетабличногоДокументаМакет.ВысотаТаблицы;   
   нСтрока  = СтрокиРаскрытия.Добавить();
   нСтрока.Верх    = ПолетабличногоДокументаМакет.ВысотаТаблицы+1;
   нСтрока.ИмяОбласти = "МаркерОкончания";
   
   
   //Для Каждого СтрокаМакета Из  СтрокиРаскрытия Цикл	      
   //    //Между областями есть 'свободные' колонки
   //    Если Верх<>СтрокаМакета.Верх  Тогда   
   // 	   ЗаполнитьКэшВыводаОбластейМакета(ПолеТабличногоДокументаМакет,ОбъектАБ,КолонкиРаскрытия,Верх,СтрокаМакета.Верх,Лево,"Синтетика");
   //    КонецЕсли;
   //    Если СтрокаМакета.ИмяОбласти = "МаркерОкончания" Тогда
   // 	   Продолжить;
   //    КонецЕсли;		   
   //    ЗаполнитьКэшВыводаОбластейМакета(ПолеТабличногоДокументаМакет,ОбъектАБ,КолонкиРаскрытия,СтрокаМакета.Верх,СтрокаМакета.Низ,Лево,"Строки",СтрокаМакета.УидГруппыОтборов);	   
   //    Верх 	        = ?(ПолетабличногоДокументаМакет.ВысотаТаблицы =СтрокаМакета.Низ,ПолетабличногоДокументаМакет.ВысотаТаблицы+1,СтрокаМакета.Низ+1);	   
   //КонецЦикла;	   
    
   
КонецПроцедуры	

// Записывает в регистр КодыЗакупокВЕИС запись с указанными значениями полей.
Процедура УстановитьКодЕис(СпособВход, КодВход, НаименованиеВход)
	МенеджерЗаписи = РегистрыСведений.КодыЗакупокВЕИС.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СпособВыбораПоставщика	 = СпособВход;
	МенеджерЗаписи.КодЕИС					 = КодВход;
	МенеджерЗаписи.НаименованиеЕИС			 = НаименованиеВход;
	МенеджерЗаписи.Записать();	
КонецПроцедуры		// УстановитьКодЕис()

#КонецОбласти
