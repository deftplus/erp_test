
#Область ПрограммныйИнтерфейс

#Область ОпределениеПодключаемойКомандыВыполнитьКонтрольДокумента

// см. ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд
Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	
   	Вид = ВидыПодключаемыхКоманд.Добавить();
    Вид.Имя         = "КонтрольДокумента";
    Вид.ИмяПодменю  = "ПодменюКонтроль";
    Вид.Заголовок   = НСтр("ru = 'Выполнить контроль документа'");
	Вид.Картинка	= БиблиотекаКартинок.СинтаксическийКонтроль;
	Вид.Отображение	= ОтображениеКнопки.КартинкаИТекст;
	
КонецПроцедуры

// см. ПодключаемыеКомандыПереопределяемый.ПриОпределенииСоставаНастроекПодключаемыхОбъектов
Процедура ПриОпределенииСоставаНастроекПодключаемыхОбъектов(НастройкиПрограммногоИнтерфейса) Экспорт
	
	Настройка = НастройкиПрограммногоИнтерфейса.Добавить();
    Настройка.Ключ          = "КонтрольДокумента";
    Настройка.ОписаниеТипов = Новый ОписаниеТипов("Булево");
    Настройка.ВидыПодключаемыхОбъектов = "Документ";
	
КонецПроцедуры

// см. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт
	
	КонтролируемыеДокументы = Метаданные.ОпределяемыеТипы.ДокументыКонтролируемыеСсылки.Тип;
	Исключения = КонтрольУХ.ТипыДокументовИсключенияДляПодключаемойКоманды();
	
	ТипыОбъектов = Новый Массив;
	
	ТребуетсяКомандаКонтроля = Ложь;
	Для Каждого Тип Из НастройкиФормы.ТипыИсточников Цикл
		
		КонтролируемыйТип = КонтролируемыеДокументы.СодержитТип(Тип) И Исключения.Найти(Тип) = неопределено;
		
		ТребуетсяКомандаКонтроля = ТребуетсяКомандаКонтроля	ИЛИ КонтролируемыйТип;
			
		Если КонтролируемыйТип Тогда
			ТипыОбъектов.Добавить(Тип);
		КонецЕсли;
			
	КонецЦикла;
	
	Если НЕ ТребуетсяКомандаКонтроля Тогда
		Возврат;
	КонецЕсли;
	
	ТипПараметра = Новый ОписаниеТипов(ТипыОбъектов);
	
	Команда						= Команды.Добавить();
	Команда.Вид					= "КонтрольДокумента";
	Команда.РежимЗаписи			= "НеЗаписывать";
    Команда.Представление		= НСтр("ru = 'Выполнить контроль'");
	Команда.Картинка			= БиблиотекаКартинок.СинтаксическийКонтроль;
	Команда.ВидимостьВФормах	= "ФормаДокумента";
	Команда.Обработчик			= "КонтрольУХКлиент.ВыполнитьКонтрольДокументаОбработкаКоманды";
	Команда.Порядок				= 1;
	Команда.Важность			= "Важное";
	Команда.ТипПараметра		= ТипПараметра;
	Команда.Назначение			= "ДляОбъекта";
	
	Команда.МножественныйВыбор	= Ложь;
	
КонецПроцедуры

#КонецОбласти 

//
Функция ВыполнитьИнтерактивныйКонтроль(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	РеквизитыЭлементы = КонтрольУХКлиентСервер.ИменаРеквизитовЭлементовКонтроля();
	
	ИсточникиДокумента = ПолучитьИсточникиДокумента(Объект);
	Если ИсточникиДокумента = неопределено Тогда
		Возврат неопределено;
	КонецЕсли;
	
	ПараметрыКонтроля = Новый Структура;
	ПараметрыКонтроля.Вставить("Документ",	Объект.Ссылка);
	ПараметрыКонтроля.Вставить("Источники", ИсточникиДокумента);
	ПараметрыКонтроля.Вставить("Результат", Форма[РеквизитыЭлементы.ИмяРеквизита]);
	ПараметрыКонтроля.Вставить("УИДФормы",	Форма.УникальныйИдентификатор);
	ПараметрыКонтроля.Вставить("РеквизитыКонтроляВДокументе", КонтрольУХ.ТипыДокументовИсключенияДляПодключаемойКоманды());
	
	ВыполнитьКонтрольИнтерактивно(ПараметрыКонтроля);
	
	КонтрольУХКлиентСервер.ОтразитьРезультатыКонтроляНаФорме(Форма, РеквизитыЭлементы, ПараметрыКонтроля);
	
КонецФункции

//
Процедура ВыполнитьЗагрузкуРезультатовКонтроля(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	РеквизитыЭлементы = КонтрольУХКлиентСервер.ИменаРеквизитовЭлементовКонтроля();
	
	ПараметрыКонтроля = Новый Структура;
	ПараметрыКонтроля.Вставить("Документ",	Объект.Ссылка);
	Если ДокументИмеетТабЧастьРезультатыКонтроля(Форма.Объект.Ссылка) Тогда
		РезультатыКонтроля = Объект.РезультатыКонтроля.Выгрузить();
		РезультатыКонтроля.Колонки.Добавить("ВремяПроверки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	Иначе
		РезультатыКонтроля = ПолучитьРезультатыКонтроля(Объект.Ссылка);
	КонецЕсли;
	ПараметрыКонтроля.Вставить("Источники", РезультатыКонтроля);
	ПараметрыКонтроля.Вставить("Результат", Форма[РеквизитыЭлементы.ИмяРеквизита]);
	ПараметрыКонтроля.Вставить("УИДФормы",	Форма.УникальныйИдентификатор);
	ПараметрыКонтроля.Вставить("РеквизитыКонтроляВДокументе", КонтрольУХ.ТипыДокументовИсключенияДляПодключаемойКоманды());
	
	ЗагрузитьРезультатыКонтроля(ПараметрыКонтроля);
	
	КонтрольУХКлиентСервер.ОтразитьРезультатыКонтроляНаФорме(Форма, РеквизитыЭлементы, ПараметрыКонтроля);
	
КонецПроцедуры

// Обработчик подписки ПередЗаписью контролируемых документов в котором выполняются действия по проверке документа
Процедура ВыполнитьКонтрольДокументаПередПроведением(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
		
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Контроль при проведении документа
	Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Возврат;
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Если НЕ Источник.Проведен Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РезультатыКонтроля = РегистрыСведений.РезультатыКонтроляДокументовПоВидамКонтроля.СоздатьНаборЗаписей().Выгрузить();
	
	Источники = ПолучитьИсточникиДокумента(Источник);
	
	//
	ПараметрыКонтроля = Новый Структура;
	ПараметрыКонтроля.Вставить("Документ",	Источник.Ссылка);
	ПараметрыКонтроля.Вставить("Источники", Источники);
	ПараметрыКонтроля.Вставить("Результат", РезультатыКонтроля);
	
	ВыполнитьКонтрольПриПроведении(ПараметрыКонтроля);
	
	
	Если ДокументИмеетТабЧастьРезультатыКонтроля(Источник.Ссылка) Тогда
		Источник.РезультатыКонтроля.Загрузить(РезультатыКонтроля);
		Если ПараметрыКонтроля.Свойство("РеквизитыДокумента") Тогда
			ЗаполнитьЗначенияСвойств(Источник, ПараметрыКонтроля.РеквизитыДокумента);
		КонецЕсли;
	Иначе
		
		// Сохранить результаты контроля в Доп.Свойства, что-бы в дальнейшем записать их
		КонтрольДокумента = Новый Структура;
		КонтрольДокумента.Вставить("РезультатыКонтроля", РезультатыКонтроля);
		КонтрольДокумента.Вставить("ЕстьНарушения", ПараметрыКонтроля.РеквизитыДокумента.ЕстьПревышениеЛимитов);
		
		Источник.ДополнительныеСвойства.Вставить("КонтрольДокумента", КонтрольДокумента);
		
	КонецЕсли;
	
	// Блокирование проведения документа
	СтруктураПоиска = Новый Структура("КонтрольНарушен", Истина);
	СтрокиСНарушениями = РезультатыКонтроля.НайтиСтроки(СтруктураПоиска);
	КонтролиДокумента = РезультатыКонтроля.Скопировать(СтрокиСНарушениями, "ВидКонтроля, КлючКонтроля");
	Если КонтролиДокумента.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//
	Контроли = КонтрольУХПовтИсп.ЗарегистрированныеПроверки(ПараметрыКонтроля.Документ.Метаданные().Имя);
	//
	НарушенныеКонтроли = КонтролиДокумента.Скопировать();
	НарушенныеКонтроли.Свернуть("ВидКонтроля", "");
	Для Каждого Строка Из НарушенныеКонтроли Цикл
		
		ОписаниеКонтроля = ПолучитьОписаниеКонтроляПоВидуКонтроля(Контроли, Строка.ВидКонтроля);
		Если ОписаниеКонтроля = неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		БлокироватьПроведение = Ложь;
		СтруктураПоиска = Новый Структура("ВидКонтроля", Строка.ВидКонтроля);
		КонтролиВидаКонтроля = КонтролиДокумента.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаКонтроля Из КонтролиВидаКонтроля Цикл
			Если ОписаниеКонтроля.Объект.БлокироватьПроведение(СтрокаКонтроля.КлючКонтроля) Тогда
				БлокироватьПроведение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если БлокироватьПроведение Тогда
			ШаблонСообщения = НСтр("ru = 'Нарушен %1. Проведение документа %2 блокировано.'");
			ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка.ВидКонтроля, Источник.Ссылка);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Источник.Ссылка,,,Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не Отказ Тогда
		
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтролируемыеДокументыПриЗаписиОбработчик(Источник) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("КонтрольДокумента") Тогда
		
		КонтрольДокумента = Источник.ДополнительныеСвойства.КонтрольДокумента;
		
		// 
		ТекущаяДатаСеанса = ТекущаяДатаСеанса();
		
		УстановитьПривилегированныйРежим(Истина);
		
		// Результат контроля
		НаборЗаписей = РегистрыСведений.РезультатыКонтроляДокументов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Источник.Ссылка);
		НаборЗаписей.Отбор.Период.Установить(ТекущаяДатаСеанса);
		Запись = НаборЗаписей.Добавить();
		Запись.Документ = Источник.Ссылка;
		Запись.Период = ТекущаяДатаСеанса;
		Запись.Активность = Истина;
		Запись.ЕстьНарушения = КонтрольДокумента.ЕстьНарушения;
		НаборЗаписей.Записать(Истина);
		
		// Заполним некоторые колонки таблицы значений
		КонтрольДокумента.РезультатыКонтроля.ЗаполнитьЗначения(Источник.Ссылка, "Документ");
		КонтрольДокумента.РезультатыКонтроля.ЗаполнитьЗначения(ТекущаяДатаСеанса, "Период");
		
		// Сохраняем результат контроля в регистр сведений
		НаборЗаписей = РегистрыСведений.РезультатыКонтроляДокументовПоВидамКонтроля.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Документ.Установить(Источник.Ссылка);
		НаборЗаписей.Отбор.Период.Установить(ТекущаяДатаСеанса);
		
		НаборЗаписей.Загрузить(КонтрольДокумента.РезультатыКонтроля);
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

// Выводит предупреждения заявки
Процедура ВывестиПредупрежденияЗаявки(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ДанныеПредупреждений = ВстраиваниеОПКПереопределяемый.ПолучитьПредупрежденияПоЗаявке(Объект);
	
	Форма.ЕстьПредупреждения = Ложь;
	Форма.ЕстьИнформация = Ложь;
	
	Строки = Новый Массив;
	
	Для Каждого ТекПредупреждение Из ДанныеПредупреждений Цикл
		
		Если ВРЕГ(ТекПредупреждение.ВидПредупреждения) = "ПРЕДУПРЕЖДЕНИЕ" Тогда
			Форма.ЕстьПредупреждения = Истина;
		ИначеЕсли ВРЕГ(ТекПредупреждение.ВидПредупреждения) = "ИНФОРМАЦИЯ" Тогда
			Форма.ЕстьИнформация = Истина;
		КонецЕсли;
		
		Картинка = КартинкаПоВидуПредупреждения(ТекПредупреждение.ВидПредупреждения);
		Строки.Добавить(Картинка);
		Строки.Добавить(" ");
		Строки.Добавить(ТекПредупреждение.ТекстПредупреждения);
		Строки.Добавить(Символы.ПС);
	КонецЦикла;
	
	Если Строки.Количество() Тогда
		Форма.НадписьПредупреждения = Новый ФорматированнаяСтрока(Строки);
		Элементы.НадписьПредупреждения.Видимость = Истина;
	Иначе
		Элементы.НадписьПредупреждения.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Процедура вызывается в процедура ПодготовитьФормуНаСервере или ПриЧтенииНаСервере модуля формы
// добавляет необходимые реквизиты, заполняет их и создает необходимые реквизиты
Процедура ПодготовитьФормуНаСервере(Форма, РодительДляЭлементовКонтроля) Экспорт
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			Форма, КонтрольУХКлиентСервер.ИменаРеквизитовЭлементовКонтроля().ИмяРеквизита) Тогда
			
		//
		Реквизиты = Новый Массив;
		ДобавитьРеквизитыСтраницыКонтроль(Реквизиты, НЕ ДокументИмеетТабЧастьРезультатыКонтроля(Форма.Объект.Ссылка));
		
		Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ЕстьПредупреждения") Тогда
			Реквизиты.Добавить(Новый РеквизитФормы("ЕстьПредупреждения", Новый ОписаниеТипов("Булево")));
		КонецЕсли;
		Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ЕстьИнформация") Тогда
			Реквизиты.Добавить(Новый РеквизитФормы("ЕстьИнформация", Новый ОписаниеТипов("Булево")));
		КонецЕсли;
		Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Информация") Тогда
			Реквизиты.Добавить(Новый РеквизитФормы("Информация", ОбщегоНазначения.ОписаниеТипаСтрока(20)));
		КонецЕсли;
		
		Форма.ИзменитьРеквизиты(Реквизиты);
		
		//
		КонтрольУХ.ДобавитьСтраницуКонтроляДокумента(Форма, РодительДляЭлементовКонтроля);
		ИнициализироватьРезультатыКонтроля(Форма);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура либо загружает результаты контроля, либо выполняет интерактивную проверку в зависимости от состояния документа
// Вызывается из ПриСозданииНаСервере или ПриЧтенииНаСервере, ПослеЗаписиНаСервере
Процедура ИнициализироватьРезультатыКонтроля(Форма) Экспорт
	
	Объект = Форма.Объект;
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) ИЛИ НЕ Объект.Проведен Тогда
		ВыполнитьИнтерактивныйКонтроль(Форма);
	Иначе
		ВыполнитьЗагрузкуРезультатовКонтроля(Форма);
	КонецЕсли;
	
	ВывестиПредупрежденияЗаявки(Форма);
	
КонецПроцедуры

// Возвращает структуру с полями необходимыми для описания проверки документа
Функция Новый_Проверка() Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Объект");
	Результат.Вставить("Источник");
	Результат.Вставить("ВидКонтроля");
	
	// Если Ложь, в общем модуле контроля должна быть добавлена функция ВыполнитьКонтроль
	Результат.Вставить("СтандартныйКонтроль", Ложь);	//
	
	// Имя реквизита шапки проверяемого документа с типом Булево. 
	// Сохранено для совместимости со старыми решениями.
	// Если не заполнено, то установка состояния не производится
	Результат.Вставить("ИмяРеквизита");
	Возврат Результат;
	
КонецФункции

// Процедура добавляет описание колонки контроля в соответствие
Процедура ДобавитьКолонкуКонтроля(Соответствие, ИмяКолонки, ОписаниеТипа, ПутьКДанным = неопределено) Экспорт
	
	Инфо = Новый Структура("ИмяКолонки, ОписаниеТипа, ПутьКДанным", ИмяКолонки, ОписаниеТипа, ПутьКДанным);
	
	Если Инфо.ПутьКДанным = неопределено Тогда
		Инфо.ПутьКДанным = Инфо.ИмяКолонки;
	КонецЕсли;
	
	Соответствие.Вставить(ИмяКолонки, Инфо);
	
КонецПроцедуры

// Процедура добавляет источник для проверки
Процедура ДобавитьИсточник(Источники, ОбщийМодуль, ДанныеИсточника) Экспорт
	
	Источники.Вставить(ОбщийМодуль.ИмяИсточника(), ДанныеИсточника);
	
КонецПроцедуры

#Область РаботаСФормой

// Устарела. Имя реквизита формы, в котором хранятся результаты интерактивного контроля
//Функция ИмяРеквизитаТаблицаКонтроляДокумента() Экспорт
Функция ИменаРеквизитовЭлементовКонтроля() Экспорт
	Возврат КонтрольУХКлиентСервер.ИменаРеквизитовЭлементовКонтроля();
КонецФункции

// Добавляет в массив реквизиты для последующего создания 
Процедура ДобавитьРеквизитыСтраницыКонтроль(Реквизиты, ДобавитьРезультатыКонтроляПоВидамКонтроля = Ложь) Экспорт
	
	РеквизитыЭлементы = КонтрольУХКлиентСервер.ИменаРеквизитовЭлементовКонтроля();
	
	Реквизиты.Добавить(Новый РеквизитФормы("НадписьПредупреждения", Новый ОписаниеТипов("ФорматированнаяСтрока")));
	
	ИмяТаблицы = РеквизитыЭлементы.ИмяРеквизита;
	Реквизиты.Добавить(Новый РеквизитФормы(ИмяТаблицы, Новый ОписаниеТипов("ТаблицаЗначений")));
	Реквизиты.Добавить(Новый РеквизитФормы("ВидКонтроля", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыКонтроляДокументов"), ИмяТаблицы));
	Реквизиты.Добавить(Новый РеквизитФормы("ТребуетсяПроверка", Новый ОписаниеТипов("Булево"), ИмяТаблицы));
	Реквизиты.Добавить(Новый РеквизитФормы("КонтрольНарушен", Новый ОписаниеТипов("Булево"), ИмяТаблицы));
	Реквизиты.Добавить(Новый РеквизитФормы("ВремяПроверки", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя), ИмяТаблицы));
	Реквизиты.Добавить(Новый РеквизитФормы("ИндексКартинки", ОбщегоНазначения.ОписаниеТипаЧисло(1,0), ИмяТаблицы, НСтр("ru = 'Индекс картинки'")));
	Реквизиты.Добавить(Новый РеквизитФормы("ДополнительнаяИнформация", ОбщегоНазначения.ОписаниеТипаСтрока(0), ИмяТаблицы, НСтр("ru = 'Дополнительная информация'")));
	Реквизиты.Добавить(Новый РеквизитФормы("РезультатСтрока", ОбщегоНазначения.ОписаниеТипаСтрока(0), ИмяТаблицы, НСтр("ru = 'Результат'")));
	Реквизиты.Добавить(Новый РеквизитФормы("АдресРезультата", ОбщегоНазначения.ОписаниеТипаСтрока(100), ИмяТаблицы));
	
	Если ДобавитьРезультатыКонтроляПоВидамКонтроля = Истина Тогда
		Таблица = РегистрыСведений.РезультатыКонтроляДокументовПоВидамКонтроля.СоздатьНаборЗаписей().Выгрузить();
		
		// Заменитель Объект.ЕстьПревышениеЛимитов
		Реквизиты.Добавить(Новый РеквизитФормы("ЕстьНарушения", Новый ОписаниеТипов("Булево")));
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет страницу контроля и инициализирует данные контроля документа
Процедура ИнициализироватьДанныеКонтроля(Форма, РодительДляЭлементовКонтроля) Экспорт
	
	//
	Объект = Форма.Объект;
	КонтрольУХ.ДобавитьСтраницуКонтроляДокумента(Форма, РодительДляЭлементовКонтроля);

	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ВыполнитьИнтерактивныйКонтроль(Форма);
	Иначе
		ВыполнитьЗагрузкуРезультатовКонтроля(Форма);
	КонецЕсли;

	ВывестиПредупрежденияЗаявки(Форма);
	
КонецПроцедуры

// Добавляет на форму страницу контроля
Процедура ДобавитьСтраницуКонтроляДокумента(Форма, Размещение) экспорт
	
	Элементы = Форма.Элементы;
	Команды = Форма.Команды;
	
	//
	РеквизитыЭлементы = КонтрольУХКлиентСервер.ИменаРеквизитовЭлементовКонтроля();
	
	Если ТипЗнч(Размещение) = Тип("Структура") Тогда
		Родитель = Размещение.Родитель;
		ПередЭлементом = Размещение.ПередЭлементом;
	Иначе
		Родитель = Размещение;
		ПередЭлементом = неопределено;
	КонецЕсли;
	
	// Добавить Страницу
	Страница = ФормыУХ.СоздатьГруппуФормы(
		Элементы, РеквизитыЭлементы.ИмяСтраницы, НСтр("ru = 'Контроль документа'"),
		ВидГруппыФормы.Страница, Родитель, ПередЭлементом);
	
	//НадписьПредупреждения
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "НадписьПредупреждения", , "НадписьПредупреждения", ВидПоляФормы.ПолеНадписи, Страница);
	Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	Элемент.АвтоМаксимальнаяШирина = Ложь;
	
	// ТаблицаКонтролей
	Таблица = ФормыУХ.СоздатьТаблицуФормы(Элементы, "ТаблицаКонтроляДокумента",,РеквизитыЭлементы.ИмяРеквизита, Страница);
	Таблица.ПутьКДаннымКартинкиСтроки = РеквизитыЭлементы.ИмяРеквизита + ".ИндексКартинки";
	Таблица.КартинкаСтрок = БиблиотекаКартинок.СостоянияКонтроляЛимитов;
	Таблица.ИзменятьСоставСтрок = Ложь;
	Таблица.ИзменятьПорядокСтрок = Ложь;
	Таблица.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	Таблица.ТолькоПросмотр = Истина;
	
	Таблица.УстановитьДействие("Выбор", "Подключаемый_ТаблицаКонтроляДокументаВыбор");
	Таблица.УстановитьДействие("ПриАктивизацииЯчейки", "Подключаемый_ТаблицаКонтроляДокументаПриАктивизацииЯчейки");
	
	// Колонки таблицы контроля 
	
	// ИдКонтроля
	Колонка = ФормыУХ.СоздатьПолеФормы(Элементы, "ТаблицаКонтроляВидКонтроля", НСтр("ru = 'Вид контроля'"), РеквизитыЭлементы.ИмяРеквизита + ".ВидКонтроля",, Таблица);
	Колонка.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
	
	// РезультатТаблицаКонтроляРезультат
	Колонка = ФормыУХ.СоздатьПолеФормы(Элементы, "ТаблицаКонтроляРезультат", НСтр("ru = 'Результат'"), РеквизитыЭлементы.ИмяРеквизита + ".РезультатСтрока",, Таблица);
	Колонка.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
	Колонка.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
	Колонка.Ширина = 8;
	Колонка.РастягиватьПоГоризонтали = Ложь;
	
	// ДополнительнаяИнформация
	Колонка = ФормыУХ.СоздатьПолеФормы(Элементы, "ТаблицаКонтроляДополнительнаяИнформация", НСтр("ru = 'Дополнительная информация'"), РеквизитыЭлементы.ИмяРеквизита + ".ДополнительнаяИнформация",, Таблица);
	Колонка.ЦветТекста = ЦветаСтиля.ГиперссылкаЦвет;
	Колонка.Шрифт = Новый Шрифт(Колонка.Шрифт,,,,, Истина);
	Колонка.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Лево;
	Колонка.Ширина = 8;
	Колонка.РастягиватьПоГоризонтали = Ложь;
	
	
	// КНОПКА "ПРОВЕРИТЬ ЛИМИТЫ"
	
	Исключения = КонтрольУХ.ТипыДокументовИсключенияДляПодключаемойКоманды();
	Если Исключения.Найти(ТипЗнч(Форма.Объект.Ссылка)) <> неопределено Тогда
	
		ИмяКоманды = РеквизитыЭлементы.ИмяКоманды;
		Если Команды.Найти(ИмяКоманды) = неопределено Тогда
			Команда = Команды.Добавить(ИмяКоманды);
			Команда.Заголовок = НСтр("ru = 'Выполнить контроль документа'");
			Команда.Картинка = БиблиотекаКартинок.СинтаксическийКонтроль;
			Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
			Команда.Действие = "ВыполнитьКомандуУХ";
		КонецЕсли;
		
		// Размещение кнопки в глобальных командах формы
		МестаРазмещенияКнопки = Новый Массив;
		МестаРазмещенияКнопки.Добавить("ФормаГлобальныеКоманды");
		МестаРазмещенияКнопки.Добавить("ГруппаГлобальныеКоманды");
		Для Каждого ИмяГруппы Из МестаРазмещенияКнопки Цикл
			Если Элементы.Найти(ИмяГруппы) <> неопределено Тогда
				КнопкаПроверитьЛимиты = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы[ИмяГруппы]);
				КнопкаПроверитьЛимиты.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
				КнопкаПроверитьЛимиты.ИмяКоманды = ИмяКоманды;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	//
	УстановитьУсловноеОформлениеТаблицыКонтролей(Форма);
	
КонецПроцедуры

// Устанавливает условное оформление таблицы контроля
Процедура УстановитьУсловноеОформлениеТаблицыКонтролей(Форма) экспорт
	
	Элементы = Форма.Элементы;
	РеквизитТаблицаКонтроля = КонтрольУХКлиентСервер.ИменаРеквизитовЭлементовКонтроля().ИмяРеквизита;
	
	// ПРЕВЫШЕНИЕ
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКонтроляРезультат.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКонтроляВидКонтроля.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКонтроляДополнительнаяИнформация.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		РеквизитТаблицаКонтроля + ".ТребуетсяПроверка", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		РеквизитТаблицаКонтроля + ".КонтрольНарушен", ВидСравненияКомпоновкиДанных.Равно, Истина);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(251, 212, 212));
	
	// ВСЕ ХОРОШО
	Элемент = Форма.УсловноеОформление.Элементы.Добавить();
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКонтроляРезультат.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКонтроляВидКонтроля.Имя);
	Элемент.Поля.Элементы.Добавить().Поле = Новый ПолеКомпоновкиДанных(Элементы.ТаблицаКонтроляДополнительнаяИнформация.Имя);
	
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		РеквизитТаблицаКонтроля + ".ТребуетсяПроверка", ВидСравненияКомпоновкиДанных.Равно, Истина);
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(Элемент.Отбор,
		РеквизитТаблицаКонтроля + ".КонтрольНарушен", ВидСравненияКомпоновкиДанных.Равно, Ложь);
	
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(204, 255, 204));
	
КонецПроцедуры

#КонецОбласти 

// Возвращает строковое представление статьи бюджета и 3-х аналитик для отображения в сообщениях.
//
// Параметры:
//  СтатьяБюджета	 - Строка, ОпределяемыйТип.СтатьиБюджетов, 			 	 	- Статьи бюджетов;
//  Аналитика1		 - Строка, ХарактеристикаСсылка.ВидыСубконтоКорпоративные	- Аналитика #1;
//  Аналитика2		 - Строка, ХарактеристикаСсылка.ВидыСубконтоКорпоративные	- Аналитика #2;
//  Аналитика3		 - Строка, ХарактеристикаСсылка.ВидыСубконтоКорпоративные	- Аналитика #3;
//  Аналитика4		 - Строка, ХарактеристикаСсылка.ВидыСубконтоКорпоративные	- Аналитика #4;
//  Аналитика5		 - Строка, ХарактеристикаСсылка.ВидыСубконтоКорпоративные	- Аналитика #5;
//  Аналитика6		 - Строка, ХарактеристикаСсылка.ВидыСубконтоКорпоративные	- Аналитика #6;
// 
// Возвращаемое значение:
//  Строка - представление статьи бюджета.
//
Функция ПредставлениеСтатьиБюджетаИАналитик(СтатьяБюджета, Аналитика1="", Аналитика2="", Аналитика3="", Аналитика4="", Аналитика5="", Аналитика6="") Экспорт

	СтрПредставление = СокрЛП(СтатьяБюджета);

	СтрПредставлениеАналитик = "";
	
	Если ЗначениеЗаполнено(Аналитика1)Тогда
		СтрПредставлениеАналитик = СтрПредставлениеАналитик + СокрЛП(Аналитика1)+"; " ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Аналитика2)Тогда
		СтрПредставлениеАналитик = СтрПредставлениеАналитик + СокрЛП(Аналитика2)+"; ";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Аналитика3)Тогда
		СтрПредставлениеАналитик = СтрПредставлениеАналитик + СокрЛП(Аналитика3)+"; " ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Аналитика4)Тогда
		СтрПредставлениеАналитик = СтрПредставлениеАналитик + СокрЛП(Аналитика4)+"; " ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Аналитика5)Тогда
		СтрПредставлениеАналитик = СтрПредставлениеАналитик + СокрЛП(Аналитика5)+"; " ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Аналитика6)Тогда
		СтрПредставлениеАналитик = СтрПредставлениеАналитик + СокрЛП(Аналитика6)+"; " ;
	КонецЕсли;
	
	Если СтрПредставлениеАналитик <> "" Тогда
		
		СтрПредставление = СтрПредставление + "("+СокрЛП(СтрПредставлениеАналитик)+")";
		
	КонецЕсли;

	Возврат СтрПредставление;

КонецФункции

// Функция возвращает строковое представление ЦФО и проекта
//
// Параметры:
//  ЦФОПредставление		- Строка - строковое представление ЦФО
//  ПроектПредставление	 	- Строка - строковое представление проекта
// 
// Возвращаемое значение:
//  Строка - строковое представление ЦФО и проекта.
//
Функция ПолучитьПредставлениеЦФО(ЦФОПредставление, ПроектПредставление = "") Экспорт

	СтрПредставление = СокрЛП(ЦФОПредставление);

	Если ЗначениеЗаполнено(ПроектПредставление)Тогда
		СтрПредставление = СтрПредставление + " / " + СокрЛП(ПроектПредставление);
	КонецЕсли;

	Возврат СтрПредставление;

КонецФункции

Функция ПолучитьПредставлениеСтатьиБюджетаИАналитик(Данные) Экспорт
	
	Результат = Новый Массив;
	
	Если ЗначениеЗаполнено(Данные.СтатьяБюджета) Тогда
		
		РеквизитыВидовАналитик = АналитикиСтатейБюджетовУХКлиентСервер.РеквизитыАналитикИзШаблона("ВидАналитики%1");
		ВидыАналитик = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Данные.СтатьяБюджета, РеквизитыВидовАналитик);
		
		ПоследнийЗаполненный = 0;
		Для Поз = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл 
			Если ЗначениеЗаполнено(ВидыАналитик["ВидАналитики"+Поз]) Тогда
				ПоследнийЗаполненный = Поз;
			КонецЕсли;
		КонецЦикла;
		
		Для Поз = 1 По ПоследнийЗаполненный Цикл
			Значение = Данные["Аналитика"+Поз];
			Если НЕ ЗначениеЗаполнено(Значение) Тогда
				Значение = НСтр("ru = '<Не заполнено>'");
			КонецЕсли;
			Результат.Добавить(Значение);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СтрСоединить(Результат, Символы.ПС);
	
КонецФункции

Функция КартинкаСтраницыКонтроль(ЕстьПревышениеЛимитов, ЕстьПредупреждения = Ложь, ЕстьИнформация = Ложь) Экспорт
	Возврат КонтрольУХКлиентСервер.КартинкаСтраницыКонтроль(ЕстьПревышениеЛимитов, ЕстьПредупреждения, ЕстьИнформация);
КонецФункции

// Процедура выполняет контроль обработанных данных
Функция ВыполнитьСтандартныйКонтроль(ИнформацияДляКонтроля, ДанныеДляКонтроля) Экспорт
	
	КонтрольНарушен = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеДляКонтроля) Тогда
	
		Для Каждого Строка Из ДанныеДляКонтроля Цикл
			
			Доступно = Строка.Лимит + Строка.ЛимитИзменение 
				- Строка.Зарезервировано - Строка.ЗарезервированоИзменение
				- Строка.Заявлено - Строка.ЗаявленоИзменение
				- Строка.Исполнено - Строка.ИсполненоИзменение;
			
			Строка.КонтрольНарушен = Доступно < 0;
			КонтрольНарушен = КонтрольНарушен ИЛИ Строка.КонтрольНарушен;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат КонтрольНарушен;
	
КонецФункции

Функция КартинкаПоВидуПредупреждения(ВидПредупреждения) Экспорт
	
	Если ВРЕГ(ВидПредупреждения) = "ОШИБКА" Тогда
		Возврат БиблиотекаКартинок.СообщениеОПроблемах;
	ИначеЕсли ВРЕГ(ВидПредупреждения) = "ПРЕДУПРЕЖДЕНИЕ" Тогда
		Возврат БиблиотекаКартинок.Предупреждение;
	ИначеЕсли ВРЕГ(ВидПредупреждения) = "ИНФОРМАЦИЯ" Тогда
		Возврат БиблиотекаКартинок.Информация;
	Иначе
		Возврат Новый Картинка;
	КонецЕсли;
	
КонецФункции

// Возвращает массив типов ДокументСсылка, для которых не надо формировать подключаемую команду КонтрольДокументов
Функция ТипыДокументовИсключенияДляПодключаемойКоманды() Экспорт
	
	Результат = Новый Массив;
	Результат.Добавить(Тип("ДокументСсылка.ОперативныйПлан"));
	Результат.Добавить(КэшируемыеПроцедурыОПК.ТипЗаявкаНаОплату());
	Результат.Добавить(КэшируемыеПроцедурыОПК.ТипПланируемоеПоступление());
	Результат.Добавить(КэшируемыеПроцедурыОПК.ТипЗаявкаНаРасход());
	Результат.Добавить(КэшируемыеПроцедурыОПК.ТипПланируемыйДоход());
	
	КонтрольУХВстраивание.ТипыДокументовИсключенияДляПодключаемойКоманды(Результат);
	
	Возврат Результат;
	
КонецФункции

//
Функция ПолучитьИсточникиДокумента(Объект) Экспорт
	
	РазмещениеИсточников = КонтрольУХПовтИсп.РазмещениеИсточниковКонтроля();
	
	Если РазмещениеИсточников[Объект.Ссылка.Метаданные()] <> неопределено Тогда
		МенеджерОбъекта = РазмещениеИсточников[Объект.Ссылка.Метаданные()];
	Иначе
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	КонецЕсли;
	
	Попытка
		Источники = МенеджерОбъекта.ИсточникиДокумента(Объект);
	Исключение
		Источники = неопределено;
	КонецПопытки; 
	
	Возврат Источники;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ВыполнитьКонтрольИнтерактивно(ПараметрыКонтроля) Экспорт
	
	Если ТипЗнч(ПараметрыКонтроля) <> Тип("Структура") Тогда
		Возврат ;
	КонецЕсли;
	
	Если НЕ ПараметрыКонтроля.Свойство("Источники") ИЛИ ТипЗнч(ПараметрыКонтроля.Источники) <> Тип("Соответствие") Тогда
		Возврат ;
	КонецЕсли;
	
	Если НЕ ПараметрыКонтроля.Свойство("Документ") Тогда
		Возврат ;
	КонецЕсли;
	
	Если НЕ ПараметрыКонтроля.Свойство("Результат") Тогда
		Возврат; 
	КонецЕсли;
	
	Если НЕ ПараметрыКонтроля.Свойство("УИДФормы") Тогда
		Возврат; 
	КонецЕсли;
	
	// Сохраняем адреса расшифровки результатов
	АдресаРезультатовПроверки = Новый Соответствие;
	Для Каждого Строка Из ПараметрыКонтроля.Результат Цикл
		Если ЗначениеЗаполнено(Строка.АдресРезультата) Тогда
			АдресаРезультатовПроверки.Вставить(Строка.ВидКонтроля, Строка.АдресРезультата);
		КонецЕсли;
	КонецЦикла;
	
	//
	ПараметрыКонтроля.Результат.Очистить();
	
	// 
	ЕстьНарушения = Ложь;
	РеквизитыДокумента = Новый Структура;
	
	// Получить список проверок, для которых есть источники данных
	ИмяДокумента = ПараметрыКонтроля.Документ.Метаданные().Имя;
	Для Каждого Проверка Из КонтрольУХПовтИсп.ЗарегистрированныеПроверки(ИмяДокумента) Цикл
		
		Источник = ПараметрыКонтроля.Источники[Проверка.Источник];
		Если Источник = неопределено Тогда
			СтрокаРезультат = ПараметрыКонтроля.Результат.Добавить();
			СтрокаРезультат.ВидКонтроля = Проверка.ВидКонтроля;
			СтрокаРезультат.ТребуетсяПроверка = Ложь;
			
			ЗаполнитьПредставлениеРезультатаКонтроля(СтрокаРезультат);
			СтрокаРезультат.ВремяПроверки = ТекущаяДатаСеанса();
			
			Продолжить;
		КонецЕсли;
		
		// 
		СтрокаРезультат = ПараметрыКонтроля.Результат.Добавить();
		СтрокаРезультат.ВидКонтроля = Проверка.ВидКонтроля;
		
		// 
		АдресРезультата = АдресаРезультатовПроверки[СтрокаРезультат.ВидКонтроля];
		Если АдресРезультата <> неопределено Тогда
			СтрокаРезультат.АдресРезультата = АдресРезультата;
			АдресаРезультатовПроверки.Удалить(СтрокаРезультат.ВидКонтроля);
		КонецЕсли;
			
		// Проверка
		СтрокаРезультат.ТребуетсяПроверка = Проверка.Объект.ТребуетсяПроверка(ПараметрыКонтроля, Источник);
		Если СтрокаРезультат.ТребуетсяПроверка Тогда
			
			ДанныеДляКонтроля = Проверка.Объект.ОбработатьДанныеИсточника(ПараметрыКонтроля, Источник);
			
			СтрокаРезультат.ТребуетсяПроверка = ДанныеДляКонтроля.Количество() > 0;
			
			Если СтрокаРезультат.ТребуетсяПроверка Тогда
				
				Если Проверка.СтандартныйКонтроль Тогда
					СтрокаРезультат.КонтрольНарушен = ВыполнитьСтандартныйКонтроль(ПараметрыКонтроля, ДанныеДляКонтроля);
				Иначе
					СтрокаРезультат.КонтрольНарушен = Проверка.Объект.ВыполнитьКонтроль(ПараметрыКонтроля, ДанныеДляКонтроля);
				КонецЕсли;
				// Помещаем во временное хранилище
				Если ЗначениеЗаполнено(СтрокаРезультат.АдресРезультата) Тогда
					ПоместитьВоВременноеХранилище(ДанныеДляКонтроля, СтрокаРезультат.АдресРезультата);
				Иначе
					СтрокаРезультат.АдресРезультата = ПоместитьВоВременноеХранилище(ДанныеДляКонтроля, ПараметрыКонтроля.УИДФормы);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		// Представление
		ЗаполнитьПредставлениеРезультатаКонтроля(СтрокаРезультат);
		
		//
		Если ЗначениеЗаполнено(Проверка.ИмяРеквизита) Тогда
			РеквизитыДокумента.Вставить(Проверка.ИмяРеквизита, СтрокаРезультат.КонтрольНарушен);
		КонецЕсли;
		ЕстьНарушения = ЕстьНарушения ИЛИ СтрокаРезультат.КонтрольНарушен;
		
		СтрокаРезультат.ВремяПроверки = ТекущаяДатаСеанса();
		
	КонецЦикла;
	
	// Установка признака наличия превышений в документе
	РеквизитыЭлементы = КонтрольУХКлиентСервер.ИменаРеквизитовЭлементовКонтроля();
	РеквизитыДокумента.Вставить(РеквизитыЭлементы.ЕстьНарушения, ЕстьНарушения);
	ПараметрыКонтроля.Вставить("РеквизитыДокумента", РеквизитыДокумента);
	
	// Удаляем лишние адреса временного хранилища
	Для Каждого КлючЗначение Из АдресаРезультатовПроверки Цикл
		УдалитьИзВременногоХранилища(КлючЗначение.Значение);
	КонецЦикла;
	
	Если ПараметрыКонтроля.Свойство("РезультатКонтроляРезервов") Тогда
		ПараметрыКонтроля.Удалить("РезультатКонтроляРезервов");
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьКонтрольПриПроведении(ПараметрыКонтроля)
	
	Если ТипЗнч(ПараметрыКонтроля) <> Тип("Структура") Тогда
		Возврат ;
	КонецЕсли;
	
	Если НЕ ПараметрыКонтроля.Свойство("Источники") ИЛИ ТипЗнч(ПараметрыКонтроля.Источники) <> Тип("Соответствие") Тогда
		Возврат ;
	КонецЕсли;
	
	Если НЕ ПараметрыКонтроля.Свойство("Документ") Тогда
		Возврат ;
	КонецЕсли;
	
	Если НЕ ПараметрыКонтроля.Свойство("Результат") Тогда
		Возврат; // нужна ТЧ, в которую помещать результат проверки
	КонецЕсли;
	
	ПараметрыКонтроля.Результат.Очистить();
	
	// 
	ЕстьНарушения = Ложь;
	РеквизитыДокумента = Новый Структура;
	
	// Получить список проверок, для которых есть источники данных
	ИмяДокумента = ПараметрыКонтроля.Документ.Метаданные().Имя;
	Для Каждого Проверка Из КонтрольУХПовтИсп.ЗарегистрированныеПроверки(ИмяДокумента) Цикл
		
		Источник = ПараметрыКонтроля.Источники[Проверка.Источник];
		Если Источник = неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		// Проверка
		ТребуетсяПроверка = Проверка.Объект.ТребуетсяПроверка(ПараметрыКонтроля, Источник);
		
		Если ТребуетсяПроверка Тогда
			ДанныеДляКонтроля = Проверка.Объект.ОбработатьДанныеИсточника(ПараметрыКонтроля, Источник);
			Если Проверка.СтандартныйКонтроль Тогда
				КонтрольНарушен = ВыполнитьСтандартныйКонтроль(ПараметрыКонтроля, ДанныеДляКонтроля);
			Иначе
				КонтрольНарушен = Проверка.Объект.ВыполнитьКонтроль(ПараметрыКонтроля, ДанныеДляКонтроля);
			КонецЕсли;
			Проверка.Объект.СохранитьДанныеДляКонтроляВДокументе(ДанныеДляКонтроля, ПараметрыКонтроля.Результат);
		Иначе
			КонтрольНарушен = Ложь;
		КонецЕсли;
		
		//
		Если ЗначениеЗаполнено(Проверка.ИмяРеквизита) Тогда
			РеквизитыДокумента.Вставить(Проверка.ИмяРеквизита, КонтрольНарушен);
		КонецЕсли;
		ЕстьНарушения = ЕстьНарушения ИЛИ КонтрольНарушен;
		
	КонецЦикла;
	
	// Установка признака наличия превышений в документе
	РеквизитыЭлементы = КонтрольУХКлиентСервер.ИменаРеквизитовЭлементовКонтроля();
	РеквизитыДокумента.Вставить(РеквизитыЭлементы.ЕстьНарушения, ЕстьНарушения);
	ПараметрыКонтроля.Вставить("РеквизитыДокумента", РеквизитыДокумента);
	
КонецПроцедуры

// Процедура выполняет загрузку
// ПараметрыКонтроля	- Структура - 
// 		* УИДФормы		- УникальныйИдентификатор -
// 		* Документ		- ДокументСсылка		  - Ссылка на проверяемый документ
// 		* Источники		- ТабличнаяЧасть		  - Табличная часть с результатами предыдущей проверки
// 		* Результат		- КоллекцияЗначений		  - Таблица значений для отображения в форме с результатами проверки
Процедура ЗагрузитьРезультатыКонтроля(ПараметрыКонтроля)
	
	Если ТипЗнч(ПараметрыКонтроля) <> Тип("Структура") Тогда
		Возврат ;
	КонецЕсли;
	
	Если НЕ ПараметрыКонтроля.Свойство("УИДФормы") Тогда
		Возврат ;
	КонецЕсли;
	
	Если НЕ ПараметрыКонтроля.Свойство("Документ") Тогда
		Возврат ;
	КонецЕсли;
	
	Если НЕ ПараметрыКонтроля.Свойство("Источники") Тогда
		Возврат ;
	КонецЕсли;
	
	Если НЕ ПараметрыКонтроля.Свойство("Результат") Тогда
		Возврат ;
	КонецЕсли;
	
	//
	ПараметрыКонтроля.Результат.Очистить();
	
	// Получить список проверок, для которых есть источники данных
	СтруктураПоиска = Новый Структура("ВидКонтроля");
	ИмяДокумента = ПараметрыКонтроля.Документ.Метаданные().Имя;
	ЕстьНарушения = Ложь;
	РеквизитыДокумента = Новый Структура;
	Для Каждого Проверка Из КонтрольУХПовтИсп.ЗарегистрированныеПроверки(ИмяДокумента) Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, Проверка);
		
		ДанныеДляКонтроля = ПараметрыКонтроля.Источники.Скопировать(СтруктураПоиска);
		
		СтрокаРезультат = ПараметрыКонтроля.Результат.Добавить();
		СтрокаРезультат.ВидКонтроля = Проверка.ВидКонтроля;
		
		// Проверка
		СтрокаРезультат.ТребуетсяПроверка = ДанныеДляКонтроля.Количество() > 0;
		
		//
		Если СтрокаРезультат.ТребуетсяПроверка Тогда
			
			СтрокаРезультат.КонтрольНарушен = ДанныеДляКонтроля.Итог("КонтрольНарушен") > 0;
			
			ЕстьНарушения = ЕстьНарушения ИЛИ СтрокаРезультат.КонтрольНарушен;
			
			КолонкиДанныхКонтроля = Проверка.Объект.КолонкиДанныхКонтроля();
			
			// Добавляем при необходимости колонки
			Для Каждого Колонка Из КолонкиДанныхКонтроля.Колонки Цикл
				Если ДанныеДляКонтроля.Колонки.Найти(Колонка.Ключ) = неопределено Тогда
					ДанныеДляКонтроля.Колонки.Добавить(Колонка.Ключ, Колонка.Значение.ОписаниеТипа);
				КонецЕсли;
			КонецЦикла;
			
			// Заполняем добавленные колонки
			КлючиКонтроля = ДанныеДляКонтроля.ВыгрузитьКолонку("КлючКонтроля");
			ДанныеКлючейКонтроля = ПолучитьДанныеКлючейКонтроля(КолонкиДанныхКонтроля, КлючиКонтроля);
			Для Каждого Строка Из ДанныеДляКонтроля Цикл
				ДанныеКлюча = ДанныеКлючейКонтроля[Строка.КлючКонтроля];
				Если ДанныеКлюча <> неопределено Тогда
					ЗаполнитьЗначенияСвойств(Строка, ДанныеКлюча);
				КонецЕсли;
			КонецЦикла;
			
			//
			СтрокаРезультат.АдресРезультата = ПоместитьВоВременноеХранилище(ДанныеДляКонтроля, ПараметрыКонтроля.УИДФормы);
			
			Если ДанныеДляКонтроля.Количество() > 0 Тогда
				СтрокаРезультат.ВремяПроверки = ДанныеДляКонтроля[0].ВремяПроверки;
			КонецЕсли;
			
		КонецЕсли;
		
		// Представление
		ЗаполнитьПредставлениеРезультатаКонтроля(СтрокаРезультат);
		
	КонецЦикла;
	
	// Установка признака наличия превышений в документе
	РеквизитыЭлементы = КонтрольУХКлиентСервер.ИменаРеквизитовЭлементовКонтроля();
	РеквизитыДокумента.Вставить(РеквизитыЭлементы.ЕстьНарушения, ЕстьНарушения);
	ПараметрыКонтроля.Вставить("РеквизитыДокумента", РеквизитыДокумента);
	
КонецПроцедуры

Функция ПолучитьДанныеКлючейКонтроля(КолонкиДанныхКонтроля, МассивКлючейКонтроля)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Шаблон текста запроса
	ШаблонТекстаЗапроса = 
	"ВЫБРАТЬ
	|	&0.Ссылка КАК Ключ,
	|	%1
	|ИЗ
	|	%2
	|ГДЕ
	|	%3";
	
	ИмяТаблицы = "Ключи";
	
	// Поля
	мПоля = Новый Массив;
	мИменаПолей = Новый Массив;
	ШаблонПоля = "&0.%1 КАК %2";
	Для Каждого Колонка Из КолонкиДанныхКонтроля.Колонки Цикл
		мПоля.Добавить(СтрШаблон(ШаблонПоля, Колонка.Значение.ПутьКДанным, Колонка.Значение.ИмяКолонки));
		мИменаПолей.Добавить(Колонка.Значение.ИмяКолонки);
	КонецЦикла;
	Поля = СтрСоединить(мПоля, ","+Символы.ПС+Символы.Таб);
	ИменаПолей = СтрСоединить(мИменаПолей, ",");
	
	Таблицы = КолонкиДанныхКонтроля.Источник + " КАК &0";
	Условия = "&0.Ссылка В (&МассивСсылок)";
	
	ТекстЗапроса = СтрШаблон(ШаблонТекстаЗапроса, Поля, Таблицы, Условия);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&0", ИмяТаблицы);
	
	// Запрос
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивСсылок", МассивКлючейКонтроля);
	
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Новый Соответствие;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Результат = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		
		Данные = Новый Структура(ИменаПолей);
		ЗаполнитьЗначенияСвойств(Данные, Выборка);
		
		Результат.Вставить(Выборка.Ключ, Данные);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Процедура заполняет реквизиты представления результата контроля документы
Процедура ЗаполнитьПредставлениеРезультатаКонтроля(СтрокаРезультат)
	
	ПреставлениеРезультата = Новый Соответствие;
	ПреставлениеРезультата.Вставить(Истина,	Новый Структура("Надпись, ИндексКартинки, ДопИнфо", "Нарушен",	1, НСтр("ru = 'Подробнее'"))); // нарушения есть
	ПреставлениеРезультата.Вставить(Ложь,	Новый Структура("Надпись, ИндексКартинки, ДопИнфо", "OK", 		0, НСтр("ru = 'Подробнее'"))); // нарушений нет
	ПреставлениеРезультата.Вставить(0,		Новый Структура("Надпись, ИндексКартинки, ДопИнфо", "-",		2, НСтр("ru = 'Не требуется'"))); // контроль не выполнялся
	
	Состояние = ?(НЕ СтрокаРезультат.ТребуетсяПроверка, 0, СтрокаРезультат.КонтрольНарушен);
	ОписаниеРезультата = ПреставлениеРезультата[Состояние];
	СтрокаРезультат.РезультатСтрока = ОписаниеРезультата.Надпись;
	СтрокаРезультат.ИндексКартинки = ОписаниеРезультата.ИндексКартинки;
	СтрокаРезультат.ДополнительнаяИнформация = ОписаниеРезультата.ДопИнфо;
	
КонецПроцедуры

Функция ПолучитьОписаниеКонтроляПоВидуКонтроля(Контроли, ВидКонтроля)
	
	Для каждого Контроль Из Контроли Цикл
		Если Контроль.ВидКонтроля = ВидКонтроля Тогда
			Возврат Контроль;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат неопределено;
	
КонецФункции

Функция ДокументИмеетТабЧастьРезультатыКонтроля(КонтролируемыйДокумент)
	
	Возврат КонтролируемыйДокумент.Метаданные().ТабличныеЧасти.Найти("РезультатыКонтроля") <> неопределено;
	
КонецФункции

Функция ПолучитьРезультатыКонтроля(КонтролируемыйДокумент)
	
	// По колонкам с типом "Булево,null" не работает метод Итог ТаблицыЗначений
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("КонтрольНарушен", Новый ОписаниеТипов("Булево"));
	
	//
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КонтролируемыйДокумент", КонтролируемыйДокумент);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РезультатыКонтроляДокументовПоВидамКонтроля.Период КАК ВремяПроверки,
	|	РезультатыКонтроляДокументовПоВидамКонтроля.Документ КАК Документ,
	|	РезультатыКонтроляДокументовПоВидамКонтроля.ВидКонтроля КАК ВидКонтроля,
	|	РезультатыКонтроляДокументовПоВидамКонтроля.КлючКонтроля КАК КлючКонтроля,
	|	РезультатыКонтроляДокументовПоВидамКонтроля.Валюта КАК Валюта,
	|	РезультатыКонтроляДокументовПоВидамКонтроля.Лимит КАК Лимит,
	|	РезультатыКонтроляДокументовПоВидамКонтроля.Зарезервировано КАК Зарезервировано,
	|	РезультатыКонтроляДокументовПоВидамКонтроля.Заявлено КАК Заявлено,
	|	РезультатыКонтроляДокументовПоВидамКонтроля.Исполнено КАК Исполнено,
	|	РезультатыКонтроляДокументовПоВидамКонтроля.ЛимитИзменение КАК ЛимитИзменение,
	|	РезультатыКонтроляДокументовПоВидамКонтроля.ЗарезервированоИзменение КАК ЗарезервированоИзменение,
	|	РезультатыКонтроляДокументовПоВидамКонтроля.ЗаявленоИзменение КАК ЗаявленоИзменение,
	|	РезультатыКонтроляДокументовПоВидамКонтроля.ИсполненоИзменение КАК ИсполненоИзменение,
	|	ВЫРАЗИТЬ(РезультатыКонтроляДокументовПоВидамКонтроля.КонтрольНарушен КАК Булево) КАК КонтрольНарушен
	|ИЗ
	|	РегистрСведений.РезультатыКонтроляДокументовПоВидамКонтроля КАК РезультатыКонтроляДокументовПоВидамКонтроля
	|ГДЕ
	|	(РезультатыКонтроляДокументовПоВидамКонтроля.Документ, РезультатыКонтроляДокументовПоВидамКонтроля.Период) В
	|			(ВЫБРАТЬ
	|				РезультатыКонтроляДокументовСрезПоследних.Документ КАК Документ,
	|				РезультатыКонтроляДокументовСрезПоследних.Период КАК Период
	|			ИЗ
	|				РегистрСведений.РезультатыКонтроляДокументов.СрезПоследних(, Документ = &КонтролируемыйДокумент) КАК РезультатыКонтроляДокументовСрезПоследних)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	//
	Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
		Если Результат.Колонки.Найти(Колонка.Имя) <> неопределено Тогда
			Продолжить;
		КонецЕсли;
		Результат.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	
	Для Каждого Строка Из РезультатЗапроса.Выгрузить() Цикл
		ЗаполнитьЗначенияСвойств(Результат.Добавить(), Строка);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

