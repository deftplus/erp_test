Функция ТрансформироватьВнешниеДанные(КонтекстОтчета,ТаблицаДанных,ПравилаИспользованияПолей,ИспользуемаяИБ=Неопределено) Экспорт
	
	РежимРасшифровки = ?(ЗначениеЗаполнено(РежимРасшифровки), РежимРасшифровки, Ложь);
	
	МассивАналитик=Новый Массив;
	
	Результат = ЗаполнитьАналитикуПоПравилам(КонтекстОтчета,ТаблицаДанных,ПравилаИспользованияПолей,МассивАналитик,КонтекстОтчета.Организация);
	
	Если ТаблицаДанных.Количество()>0 И Результат.Количество()=0 Тогда
		
		ФлагОшибкиИмпорта=Истина;
		Возврат Результат;
		
	КонецЕсли;
	
	// Проверим, все ли аналитики найдены
	КэшОпределенныхЗначений = Новый Структура;
	Для Каждого Аналитика Из МассивАналитик Цикл
		
		ТекТаблица = Новый ТаблицаЗначений;
		
		Для Каждого Элемент Из ПравилаИспользованияПолей.Скопировать(Новый Структура("КодАналитики", Аналитика), "РеквизитАналитики").ВыгрузитьКолонку("РеквизитАналитики") Цикл
			ТекТаблица.Колонки.Добавить(Элемент);	
		КонецЦикла;
		
		ТекТаблица.Колонки.Добавить("СсылкаНаЭлементСправочника");
		
		КэшОпределенныхЗначений.Вставить(Аналитика, ТекТаблица);
		
	КонецЦикла;
	
	ДанныеВидыСубконто=Новый Соответствие;
	
	Для Каждого Строка ИЗ ПравилаИспользованияПолей Цикл
		
		ДанныеВидыСубконто.Вставить(Строка.АналитикаОперанда,ОбщегоНазначенияУХ.ПолучитьДанныеОбъектаБД(Строка.АналитикаОперанда));
		
	КонецЦикла;
	
	Для Каждого СтрДанные Из Результат Цикл
		
		Для Каждого Аналитика ИЗ МассивАналитик Цикл
			
			СтруктураПоиска=Новый Структура("КодАналитики",Аналитика);
			МассивДанныхАналитики=ПравилаИспользованияПолей.НайтиСтроки(СтруктураПоиска);
			
			ТекВидСубконто=ДанныеВидыСубконто[МассивДанныхАналитики[0].АналитикаОперанда];
	
			Если СтрДанные[Аналитика]= Null Тогда
				
				ИмяСправочника=СтрЗаменить(МассивДанныхАналитики[0].ТаблицаАналитики,"Справочник.","");
				ТаблицаСправочника=МассивДанныхАналитики[0].ТаблицаАналитики;
				ВидСубконто=МассивДанныхАналитики[0].АналитикаОперанда;
				
				ПустоеЗначениеАналитики = Истина; // Признак того, что импортируется запись с неопределенным значением аналитики.
				
				Для Каждого СтрПоля Из МассивДанныхАналитики Цикл
					Если ЗначениеЗаполнено(СтрДанные[СтрПоля.Синоним]) Тогда
						ПустоеЗначениеАналитики = Ложь;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ПустоеЗначениеАналитики Тогда
					СтрДанные[Аналитика] = Справочники[ИмяСправочника].ПустаяСсылка();
				ИначеЕсли ТекВидСубконто.СоздаватьПриНеудачномПоискеПриИмпорте И НЕ РежимРасшифровки Тогда
					СтруктураЗаписи = Новый Структура;
					
					ЕстьСоответствиеПоКоду = Ложь;
					
					Для Каждого СтрПоля ИЗ МассивДанныхАналитики Цикл 
						Если Не ЕстьСоответствиеПоКоду Тогда
							ЕстьСоответствиеПоКоду = СтрПоля.РеквизитАналитики="Код";
						КонецЕсли;
						СтруктураЗаписи.Вставить(СтрПоля.РеквизитАналитики, СтрДанные[СтрПоля.Синоним]);
					КонецЦикла;
					
					НайденныеСтроки = КэшОпределенныхЗначений[Аналитика].НайтиСтроки(СтруктураЗаписи);
					Если НайденныеСтроки.Количество() = 0 Тогда
						Попытка
							ЭлСпр = Справочники[ИмяСправочника].СоздатьЭлемент();
							Если ТаблицаСправочника = "Справочник.ПроизвольныйКлассификаторУХ" Тогда
								ЭлСпр.Владелец = ВидСубконто;
								Если ТекВидСубконто.РазделятьПоОрганизациям Тогда
									ЭлСпр.Организация = КонтекстОтчета.Организация;
								КонецЕсли;
							КонецЕсли;
							
							ЗаполнитьЗначенияСвойств(ЭлСпр, СтруктураЗаписи);
							
							Если Не ЕстьСоответствиеПоКоду Тогда
								ЭлСпр.УстановитьНовыйКод();
							Иначе
								ЭлСпр.Код = ОбщегоНазначенияУХ.ПолучитьВозможныйКодСправочника(ЭлСпр.Код, ЭлСпр.Метаданные().ДлинаКода, СтрЗаменить(ТаблицаСправочника, "Справочник.", ""), ЭлСпр.Владелец)
							КонецЕсли;
							
							Если ОбщегоНазначенияУХ.ЕстьРеквизитОбъекта("ВИБ",ЭлСпр) Тогда
								ЭлСпр.ВИБ=ИспользуемаяИБ;
							КонецЕсли;
							
							ЭлСпр.Записать();
							СтрДанные[Аналитика]=ЭлСпр.Ссылка;
							СтруктураЗаписи.Вставить("СсылкаНаЭлементСправочника", ЭлСпр.Ссылка);
							
							НоваяСтрока = КэшОпределенныхЗначений[Аналитика].Добавить();
							ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураЗаписи);
							НоваяСтрока.СсылкаНаЭлементСправочника = ЭлСпр.Ссылка;
							
						Исключение
							
							ФлагОшибкиИмпорта = Истина;
							ТекстСообщения = СтрШаблон(Нстр("ru = 'Не удалось создать элемент справочника %1:
							|%2
							|Свойства элемента:%3'"), ИмяСправочника, 
							ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), Символы.ПС);
							
							Для Каждого СтрПоля ИЗ МассивДанныхАналитики Цикл
								
								ТекстСообщения=ТекстСообщения+(СтрПоля.Поле+" - "+СтрДанные[СтрПоля.Синоним])+Символы.ПС;
								
							КонецЦикла;
							
							ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения,,,СтатусСообщения.Важное);
							
						КонецПопытки;
						
					Иначе
						СтрДанные[Аналитика] = НайденныеСтроки[0].СсылкаНаЭлементСправочника;
					КонецЕсли;
					
				Иначе // если флажок создания при неудачном поиске не взведен...
					
					СтрДанные[Аналитика] = Справочники[ИмяСправочника].ПустаяСсылка();
					
					Если НЕ КонтекстОтчета.Свойство("ТихийРежим") Тогда
						ЗнАн = Неопределено;
						ТекстСообщения="";
						
						Для Каждого СтрПоля ИЗ МассивДанныхАналитики Цикл
							
							Если НЕ СтрПоля.НеИспользоватьДляСинхронизации Тогда
								
								ТекстСообщения=ТекстСообщения+(СтрПоля.Поле+" - "+СтрДанные[СтрПоля.Синоним])+Символы.ПС;
								
							КонецЕсли;
								
						КонецЦикла;
						
						ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Не удается найти значение аналитики %1
						|Значения реквизитов аналитики: 
						|%2'"), Аналитика, ТекстСообщения),,,СтатусСообщения.Важное);
																		
					Иначе
						
						ФлагОшибкиИмпорта=Истина;
						
						ТекстСообщения="";
						
						Для Каждого СтрПоля ИЗ МассивДанныхАналитики Цикл
							
							Если НЕ СтрПоля.НеИспользоватьДляСинхронизации Тогда
								
								ТекстСообщения=ТекстСообщения+(СтрПоля.Поле+" - "+СтрДанные[СтрПоля.Синоним])+Символы.ПС;
								
							КонецЕсли;
							
						КонецЦикла;
						
						ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Не удается найти значение аналитики %1
						|Значения реквизитов аналитики: %2'"), Аналитика, ТекстСообщения),,,СтатусСообщения.Важное);
							
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли ТекВидСубконто.ОбновлятьРеквизитыПриИмпорте И НЕ РежимРасшифровки Тогда
				
				ЕстьИзменения=Ложь;
				
				СтруктураЗаписи = Новый Структура;
				
				Для Каждого СтрПоля ИЗ МассивДанныхАналитики Цикл 
					
					Если НЕ СокрЛП(СтрДанные[Аналитика][СтрПоля.РеквизитАналитики])=СокрЛП(СтрДанные[СтрПоля.Синоним]) Тогда
						
						СтруктураЗаписи.Вставить(СтрПоля.РеквизитАналитики, СтрДанные[СтрПоля.Синоним]);
						
						ЕстьИзменения=Истина;
						
					КонецЕсли;
					
				КонецЦикла;
				
				Если ЕстьИзменения Тогда
					
					ТекОбъект = СтрДанные[Аналитика].ПолучитьОбъект();
					
					ЗаполнитьЗначенияСвойств(ТекОбъект, СтруктураЗаписи);
					
					Попытка
						
						ТекОбъект.Записать();
						
					Исключение
						
						ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Не удалось обновить данные по элементу справочника %1'"), 
							ТекОбъект.Наименование),,,СтатусСообщения.Важное);
						
					КонецПопытки;
					
					ТекОбъект = Неопределено;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
		
	Возврат Результат;
				
КонецФункции // ТрансформироватьВнешниеДанные()

Функция ЗаполнитьАналитикуПоПравилам(ОбъектРасчета,ТаблицаДанных,ПравилаИспользованияПолей,МассивАналитик, Организация = Неопределено) Экспорт
	
	Если Организация = Неопределено Тогда
		Организация = Справочники.Организации.ПустаяСсылка();
	КонецЕсли;
	
	Если ПравилаИспользованияПолей.Количество()=0
		ИЛИ (ПравилаИспользованияПолей.Количество()=1 И ПустаяСтрока(ПравилаИспользованияПолей[0].КодАналитики)) Тогда
		
		Возврат ТаблицаДанных;
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	ТекстВыбор="";
	ТекстСоединенияТаблица="";
	ТекстСоединенияРеквизиты="";
	ТекстСоединенияКонтрагент="";
	ТекстСоединенияОрганизация="";
	ТекстСоединенияОрганизацияДоговор="";
	
	Аналитика="";
	ТекстСвертка="";
	
	ТекстИменКолонок = "";
	Для Инд = 0 По ТаблицаДанных.Колонки.Количество() - 1 Цикл
		
		ТекстИменКолонок = ТекстИменКолонок + ", " + ТаблицаДанных.Колонки[Инд].Имя;
		
	КонецЦикла;
	
	ТекстИменКолонок = Сред(ТекстИменКолонок, 2);
	
	ТабГруппировкиДубли=Новый ТаблицаЗначений;
	ТабГруппировкиДубли.Колонки.Добавить("КодАналитики");
	ТабГруппировкиДубли.Колонки.Добавить("ТаблицаАналитики");
	ТабГруппировкиДубли.Колонки.Добавить("МассивПолей");
	
	Запрос=Новый Запрос;
	
	Для Каждого СтрПоле ИЗ ПравилаИспользованияПолей Цикл
		
		Если ПустаяСтрока(СтрПоле.КодАналитики) ИЛИ СтрПоле.НеИспользоватьДляСинхронизации Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		СтрГруппировкиДубли=ТабГруппировкиДубли.Найти(СтрПоле.КодАналитики,"КодАналитики");
		
		Если СтрГруппировкиДубли=Неопределено Тогда
			
			СтрГруппировкиДубли=ТабГруппировкиДубли.Добавить();
			ЗаполнитьЗначенияСвойств(СтрГруппировкиДубли,СтрПоле);
			
			МассивПолей=Новый Массив;
			МассивПолей.Добавить(СтрПоле.Синоним);
			
			СтрГруппировкиДубли.МассивПолей=МассивПолей;
			
		Иначе
			
			СтрГруппировкиДубли.МассивПолей.Добавить(СтрПоле.Синоним);
			
		КонецЕсли;
			
		Если НЕ СтрПоле.КодАналитики=Аналитика Тогда
			
			Если СтрНайти(СтрПоле.ТаблицаАналитики,"Перечисление")>0 Тогда
				
				ТекстВыбор=ТекстВыбор+"
				|НЕОПРЕДЕЛЕНО КАК "+СтрПоле.КодАналитики + ", ";
				
				Продолжить;
				
			КонецЕсли;
			
			ТекстВыбор=ТекстВыбор+"
			|"+СтрПоле.КодАналитики+".Ссылка КАК "+СтрПоле.КодАналитики + ", ";
			
			ТекстСвертка=ТекстСвертка+","+СтрПоле.КодАналитики;
			МассивАналитик.Добавить(СтрПоле.КодАналитики);
			
			ТекстСоединенияТаблица=ТекстСоединенияТаблица+Сред(ТекстСоединенияРеквизиты,3)+"
			|ЛЕВОЕ СОЕДИНЕНИЕ "+СтрПоле.ТаблицаАналитики+" КАК "+СтрПоле.КодАналитики+" ПО";
			
			Если СтрПоле.КодАналитики="АналитикаДоговорКонтрагента" Тогда
				
				ТекстСоединенияТаблица=ТекстСоединенияТаблица+"#ВладелецКонтрагент#"+"#ОрганизацияДоговор";
				
			КонецЕсли;
			
			Если СтрПоле.КодАналитики="АналитикаБанковскийСчетКасса" Тогда
				
				ТекстСоединенияТаблица=ТекстСоединенияТаблица+"#ВладелецОрганизация#";
				
			КонецЕсли;
			
			ТекстСоединенияРеквизиты="";
			Аналитика=СтрПоле.КодАналитики;
			
		КонецЕсли;
		
		ТекстСоединенияРеквизиты=ТекстСоединенияРеквизиты+" И "+"ВТ."+СтрПоле.Синоним+"="+СтрПоле.КодАналитики+"."+СтрПоле.РеквизитАналитики;
		
		Если Аналитика="АналитикаКонтрагент" Тогда
			ТекстСоединенияКонтрагент=ТекстСоединенияКонтрагент+" И "+"ВТ."+СтрПоле.Синоним+"=АналитикаДоговорКонтрагента.Владелец"+"."+СтрПоле.РеквизитАналитики;
		КонецЕсли;
		
		Если Аналитика="АналитикаОрганизация" Тогда
			ТекстСоединенияОрганизация=ТекстСоединенияОрганизация+" И "+"ВТ."+СтрПоле.Синоним+"=АналитикаБанковскийСчетКасса.Владелец"+"."+СтрПоле.РеквизитАналитики;
			ТекстСоединенияОрганизацияДоговор=ТекстСоединенияОрганизацияДоговор+" И "+"ВТ."+СтрПоле.Синоним+"=АналитикаДоговорКонтрагента.Организация."+СтрПоле.РеквизитАналитики;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрПоле.АналитикаОперанда) И СтрПоле.АналитикаОперанда.ТипЗначения.СодержитТип(Тип("СправочникСсылка.ПроизвольныйКлассификаторУХ")) Тогда
			
			ТекстСоединенияРеквизиты = ТекстСоединенияРеквизиты + " И " + СтрПоле.КодАналитики + ".Владелец = &" 
			+ СтрПоле.КодАналитики + "Владелец";
			Если СтрПоле.РазделятьПоОрганизациям Тогда 
				ТекстСоединенияРеквизиты = ТекстСоединенияРеквизиты + " И " + СтрПоле.КодАналитики + ".Организация = &" + СтрПоле.КодАналитики + "Организация";
				Запрос.УстановитьПараметр(СтрПоле.КодАналитики + "Организация", Организация);
			КонецЕсли;
			
			Запрос.УстановитьПараметр(СтрПоле.КодАналитики + "Владелец", СтрПоле.АналитикаОперанда); 
			
		ИначеЕсли СтрПоле.ТаблицаАналитики="Справочник.СчетаБД" ИЛИ СтрПоле.ТаблицаАналитики="Справочник.КорреспонденцииВГО" Тогда
			
			ТекстСоединенияРеквизиты = ТекстСоединенияРеквизиты + " И " + СтрПоле.КодАналитики + ".Владелец = &" 
			+ СтрПоле.КодАналитики + "Владелец";
			
			Запрос.УстановитьПараметр(СтрПоле.КодАналитики + "Владелец", УправлениеОтчетамиУХ.ПолучитьПланСчетовОрганизации(ОбъектРасчета.Организация,ОбъектРасчета.Сценарий,ОбъектРасчета.ПериодОтчета));
			
		ИначеЕсли СтрПоле.ТаблицаАналитики="Справочник.ПодразделенияОрганизаций"  Тогда
			
			ТекстСоединенияРеквизиты = ТекстСоединенияРеквизиты + " И " + СтрПоле.КодАналитики + ".Владелец = &" 
			+ СтрПоле.КодАналитики + "Владелец";
			
			Запрос.УстановитьПараметр(СтрПоле.КодАналитики + "Владелец", Организация);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ТекстСоединенияКонтрагент) Тогда
		
		ТекстСоединенияТаблица=СтрЗаменить(ТекстСоединенияТаблица,"#ВладелецКонтрагент#",Сред(ТекстСоединенияКонтрагент,3)+" И ")
		
	Иначе
		
		ТекстСоединенияТаблица=СтрЗаменить(ТекстСоединенияТаблица,"#ВладелецКонтрагент#","");
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстСоединенияОрганизация) Тогда
		
		ТекстСоединенияТаблица=СтрЗаменить(ТекстСоединенияТаблица,"#ВладелецОрганизация#",Сред(ТекстСоединенияОрганизация,3)+" И ")
		
	Иначе
		
		ТекстСоединенияТаблица=СтрЗаменить(ТекстСоединенияТаблица,"#ВладелецОрганизация#","");
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстСоединенияОрганизацияДоговор) Тогда
		
		ТекстСоединенияТаблица=СтрЗаменить(ТекстСоединенияТаблица,"#ОрганизацияДоговор",Сред(ТекстСоединенияОрганизацияДоговор,3)+" И ")
		
	Иначе
		
		ТекстСоединенияТаблица=СтрЗаменить(ТекстСоединенияТаблица,"#ОрганизацияДоговор","");
		
	КонецЕсли;
	
	ТекстСоединенияТаблица=ТекстСоединенияТаблица+Сред(ТекстСоединенияРеквизиты,3);
	
	ТекстВыбор = "ВЫБРАТЬ ВТ.* " + ?(СтрДлина(ТекстВыбор) > 2,", " + Лев(ТекстВыбор, СтрДлина(ТекстВыбор) - 2), "");
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ *
	|ПОМЕСТИТЬ ВременнаяТаблица
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|;";
	
	
	Запрос.Текст = Запрос.Текст + ТекстВыбор + " ПОМЕСТИТЬ РезультатыРасчета
	|ИЗ ВременнаяТаблица КАК ВТ"+ТекстСоединенияТаблица + "
	|;
	|ВЫБРАТЬ * ИЗ РезультатыРасчета
	|;
	|УНИЧТОЖИТЬ ВременнаяТаблица
	|;
	|УНИЧТОЖИТЬ РезультатыРасчета";
	
	Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаДанных);	
	РезЗапроса = Запрос.ВыполнитьПакет();
	
	ТабРезультат    = РезЗапроса[2].Выгрузить();
		
	Если НЕ ТабРезультат.Количество()=ТаблицаДанных.Количество() Тогда // Некорректная синхронизация с возникновением дублирующихся строк
		
		СоответствиеТаблицДублей=ПолучитьСоответствиеТаблицДублей(ТабРезультат,ТабГруппировкиДубли);
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'При импорте данных из файла %1 
		|возникли неоднозначности при синхронизации реквизитов аналитик, приводящие к дублированию данных. 
		|Импорт прекращен.'"), ОбъектРасчета.ХранимыйФайл.Наименование),,,СтатусСообщения.Важное);
		
		Для Каждого КлючИЗначение ИЗ СоответствиеТаблицДублей Цикл
			
			Для Каждого Строка ИЗ КлючИЗначение.Значение Цикл
				
				СтрРеквизиты="";
				
				Для Каждого Колонка ИЗ КлючИЗначение.Значение.Колонки Цикл
					
					Если Колонка.Имя="КоличествоДублей" Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					СтрРеквизиты=СтрРеквизиты+", "+Колонка.Имя+": "+Строка[Колонка.Имя];
					
				КонецЦикла;
				
				ТекстОшибки=СтрШаблон(Нстр("ru = '%1Количество дублей: %2'"), 
					КлючИЗначение.Ключ+Символы.ПС+Сред(СтрРеквизиты,3)+Символы.ПС, Строка.КоличествоДублей);
				
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстОшибки,,,СтатусСообщения.Важное);

			КонецЦикла;
			
		КонецЦикла;		
					
		ТабРезультат.Очистить();
					
	КонецЕсли;
	
	Возврат ТабРезультат;
		
КонецФункции // ЗаполнитьАналитикуПоПравилам()

Функция ПолучитьСоответствиеТаблицДублей(ТабРезультат,ТабГруппировкиДубли) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.МенеджерВременныхТаблиц=Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст="Выбрать * Поместить ТабРезультат ИЗ &ТабРезультат КАК ТабРезультат";
	Запрос.УстановитьПараметр("ТабРезультат",ТабРезультат);
	
	Запрос.Выполнить();
	
	СоответствиеТаблицДублей=Новый Соответствие;
	
	Для Каждого Строка ИЗ ТабГруппировкиДубли Цикл
		
		ТекстВыборка="";
		ТекстГруппировка="";
		
		Для Каждого Поле ИЗ Строка.МассивПолей Цикл
			
			ТекстПоле=Поле;
			ТекстПсевдоним="";
			
			МассивПутей=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(Поле,"vzv");
			
			Для Индекс=1 ПО МассивПутей.Количество()-1 Цикл
				
				ТекстПсевдоним=ТекстПсевдоним+"_"+МассивПутей[Индекс];
				
			КонецЦикла;
				
			ТекстВыборка=ТекстВыборка+",ТабРезультат."+Поле+" КАК "+Сред(ТекстПсевдоним,2);
			ТекстГруппировка=ТекстГруппировка+",ТабРезультат."+Поле;
			
		КонецЦикла;
		
		Запрос.Текст="ВЫБРАТЬ "+Сред(ТекстВыборка,2)+", КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТабРезультат."+Строка.КодАналитики+") КАК КоличествоДублей
		|ИЗ ТабРезультат КАК ТабРезультат
		|СГРУППИРОВАТЬ ПО "+Сред(ТекстГруппировка,2)+"
		|ИМЕЮЩИЕ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТабРезультат."+Строка.КодАналитики+")>1";
		
		Результат=Запрос.Выполнить().Выгрузить();
		
		Если Результат.Количество()>0 Тогда
			
			СоответствиеТаблицДублей.Вставить(Строка.ТаблицаАналитики,Результат);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеТаблицДублей;
			
КонецФункции // ПолучитьСоответствиеТаблицДублей() 

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Импорт бланка с произвольным количеством колонок (редакция 3.0)
//

Функция ИмпортироватьДанныеИзМакета20(ОбъектРасчета) Экспорт
	
	Если ОбъектРасчета.БланкИмпорта.Пустая() Тогда
		ОбъектРасчета.БланкИмпорта = УправлениеОтчетамиУХ.НайтиПараметрОтчета(Перечисления.ЭлементыНастройкиОтчета.БланкДляИмпорта, ОбъектРасчета.ВидОтчета, ОбъектРасчета.Сценарий, ОбъектРасчета.Организация, ОбъектРасчета.ПериодОтчета);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОбъектРасчета.БланкИмпорта) Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'В регламенте для вида отчета %1  не указан бланк импорта'"), 
			ОбъектРасчета.ВидОтчета),,,СтатусСообщения.Важное);
		Возврат 0;
	КонецЕсли;	
	
	
	Если ОбъектРасчета.МассивПериодов=Неопределено Тогда
		
		МассивПериодов = ПериодыУХ.ПолучитьПодчиненныеПериоды(ОбъектРасчета.ПериодОтчета.ДатаНачала,ОбъектРасчета.ПериодОкончания.ДатаОкончания,ОбъектРасчета.ПериодОтчета.Периодичность);
		ОбъектРасчета.Вставить("МассивПериодов",МассивПериодов);
		
	КонецЕсли;
	
	МассивПериодов		= ОбъектРасчета.МассивПериодов;
	КоличествоПериодов  = МассивПериодов.Количество();
		
	ЭталонныйМакет  = Новый ТабличныйДокумент;
	текНаборЗаписей = РасширениеБизнесЛогикиУХ.ПолучитьНаборЗаписейРегистраНастройкиАналитическихБланков();
	текНаборЗаписей.Отбор.Бланк.Установить(ОбъектРасчета.БланкИмпорта);
	текНаборЗаписей.Прочитать();
	Если  текНаборЗаписей.Количество() =1 Тогда			
		ЗначениеСохраняемойНастройки = текНаборЗаписей[0].ХранилищеДополнительныхНастроек.Получить();
		Если  ЗначениеСохраняемойНастройки.Свойство("ТабДокМакет") Тогда		
			ЭталонныйМакет.Вывести(ЗначениеСохраняемойНастройки.ТабДокМакет);
        КонецЕсли;
	КонецЕсли;
	
	ИсходныйМакет = Неопределено;
	Параметры = Новый Массив();
	Параметры.Добавить(ИсходныйМакет);
	Параметры.Добавить(ЭталонныйМакет);
	Параметры.Добавить(ОбъектРасчета.БланкИмпорта);
	Параметры.Добавить(ОбъектРасчета.ПериодОтчета.Периодичность);
	Параметры.Добавить(КоличествоПериодов);
	Параметры.Добавить(Ложь);
	Параметры.Добавить(ОбъектРасчета);
	ОбщегоНазначения.ВыполнитьМетодКонфигурации("АналитическийБланкУХСервер.ЗаполнитьШаблонМакетаДляВыгрузки", Параметры);
		
	ИсходныйМакет =  Параметры[0];
	
	Если ИсходныйМакет = Неопределено Тогда
		Возврат 0;
	КонецЕсли;	
	
	ТабРасшифровки=Новый ТаблицаЗначений;
	ТабРасшифровки.Колонки.Добавить("Строка");
	ТабРасшифровки.Колонки.Добавить("Колонка");
	ТабРасшифровки.Колонки.Добавить("Текст");
	
	ТабРасшифровки.Колонки.Добавить("Расшифровка");
	
	НомерКолонкиНачало=0;
	НомерСтрокиНачало=0;
	НомерКолонкиНачалоПоказателей=0;
	НомерКолонкиОкончаниеПоказателей=0;
	
	ТаблицаСтрок=Новый Таблицазначений;
	ТаблицаСтрок.Колонки.Добавить("СтрокаОтчета");
	ТаблицаСтрок.Колонки.Добавить("СтрокаОтчетаНаименование");
	ТаблицаСтрок.Колонки.Добавить("ПравилаИспользованияПолейЗапроса");
	
	ТаблицаПоказателей=Новый ТаблицаЗначений;
	ТаблицаПоказателей.Колонки.Добавить("СтрокаОтчета");
	ТаблицаПоказателей.Колонки.Добавить("НомерКолонки");
	ТаблицаПоказателей.Колонки.Добавить("ИмяКолонки");
	ТаблицаПоказателей.Колонки.Добавить("ПоказательОтчета");
	ТаблицаПоказателей.Колонки.Добавить("ПериодОтчета");
		
	ШаблонТаблицыИспользованияПолей=Новый ТаблицаЗначений;
	ШаблонТаблицыИспользованияПолей.Колонки.Добавить("Синоним");
	ШаблонТаблицыИспользованияПолей.Колонки.Добавить("НомерКолонки");
	ШаблонТаблицыИспользованияПолей.Колонки.Добавить("Поле");
	ШаблонТаблицыИспользованияПолей.Колонки.Добавить("АналитикаОперанда");
	ШаблонТаблицыИспользованияПолей.Колонки.Добавить("КодАналитики");
	ШаблонТаблицыИспользованияПолей.Колонки.Добавить("РеквизитАналитики");
	ШаблонТаблицыИспользованияПолей.Колонки.Добавить("ТаблицаАналитики");
	ШаблонТаблицыИспользованияПолей.Колонки.Добавить("НеИспользоватьДляСинхронизации",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ШаблонТаблицыИспользованияПолей.Колонки.Добавить("СоздаватьПриНеудачномПоискеПриИмпорте",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ШаблонТаблицыИспользованияПолей.Колонки.Добавить("РазделятьПоОрганизациям");
	ШаблонТаблицыИспользованияПолей.Колонки.Добавить("ОбновлятьРеквизитыПриИмпорте");
	ШаблонТаблицыИспользованияПолей.Колонки.Добавить("ТипЗначения");
	
	ОписаниеСтроки=Неопределено;
				
	Для Нстр=1 По ИсходныйМакет.ВысотаТаблицы Цикл
		
		ЕстьНачалоПоказателей=Ложь;
		
		Для Нкол=1 ПО ИсходныйМакет.ШиринаТаблицы Цикл
			
			РабочаяОбласть=ИсходныйМакет.Область(Нстр,Нкол,Нстр,Нкол);
			
			Если НЕ ТипЗнч(РабочаяОбласть.Расшифровка)=Тип("ФиксированнаяСтруктура") Тогда
				
				Если ЕстьНачалоПоказателей Тогда
					
					НомерКолонкиОкончаниеПоказателей=Нкол-1;
					
				КонецЕсли;		
					
			ИначеЕсли РабочаяОбласть.Расшифровка.Свойство("СтрокаОтчета") И НЕ РабочаяОбласть.Расшифровка.Свойство("ПоказательСсылка") Тогда
				
				Если НомерСтрокиНачало=0 Тогда
					
					НомерКолонкиНачало=Нкол;
					НомерСтрокиНачало=Нстр;
					ЕстьНачалоСтроки=Истина;
					
				КонецЕсли;
				
			ИначеЕсли РабочаяОбласть.Расшифровка.Свойство("ПоказательСсылка") Тогда 
				
				Если НомерКолонкиНачалоПоказателей=0 Тогда
					
					НомерКолонкиНачалоПоказателей=Нкол;
					НомерКолонкиОкончаниеПоказателей=Нкол;
					ЕстьНачалоПоказателей=Истина;
					
				Иначе
					
					НомерКолонкиОкончаниеПоказателей=Нкол;
					
				КонецЕсли;
															
			КонецЕсли;
										
		КонецЦикла;
		
		Если НомерСтрокиНачало>0 Тогда
			
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если НомерСтрокиНачало=0 Тогда
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'В бланке импорта %1 не найдены области строк. Импорт невозможен.'"), 
			ОбъектРасчета.БланкИмпорта),,,СтатусСообщения.Важное);
		Возврат 0;
		
	КонецЕсли;	
	
	Для НомСтр=НомерСтрокиНачало По ИсходныйМакет.ВысотаТаблицы Цикл
		
		РабочаяОбласть=ИсходныйМакет.Область(НомСтр,НомерКолонкиНачало,НомСтр,НомерКолонкиНачало);
		
		Если ТипЗнч(РабочаяОбласть.Расшифровка)=Тип("ФиксированнаяСтруктура")
			И РабочаяОбласть.Расшифровка.Свойство("СтрокаОтчета") Тогда
			
			НоваяСтрока=ТаблицаСтрок.Добавить();
			НоваяСтрока.СтрокаОтчета					= РабочаяОбласть.Расшифровка.СтрокаОтчета;
			НоваяСтрока.СтрокаОтчетаНаименование		= РабочаяОбласть.Расшифровка.СтрокаОтчетаНаименование;
			НоваяСтрока.ПравилаИспользованияПолейЗапроса= ШаблонТаблицыИспользованияПолей.СкопироватьКолонки();
	
			Для НомКол=НомерКолонкиНачалоПоказателей ПО НомерКолонкиОкончаниеПоказателей Цикл
				
				РабочаяОбласть=ИсходныйМакет.Область(НомСтр,НомКол,НомСтр,НомКол);
				
				Если ТипЗнч(РабочаяОбласть.Расшифровка)=Тип("ФиксированнаяСтруктура")
					И РабочаяОбласть.Расшифровка.Свойство("ПоказательСсылка") Тогда
					
					СтрПоказатель=ТаблицаПоказателей.Добавить();
					СтрПоказатель.ПоказательОтчета=РабочаяОбласть.Расшифровка.ПоказательСсылка;
					СтрПоказатель.ПериодОтчета=РабочаяОбласть.Расшифровка.ПериодОтчета;
					СтрПоказатель.НомерКолонки=НомКол;
					СтрПоказатель.СтрокаОтчета=НоваяСтрока.СтрокаОтчета;
					СтрПоказатель.ИмяКолонки="_"+НомКол;
					
				КонецЕсли;				
								
			КонецЦикла;	
			
		Иначе
			
			Для НомКол=НомерКолонкиНачало ПО НомерКолонкиНачалоПоказателей-1 Цикл
				
				РабочаяОбласть=ИсходныйМакет.Область(НомСтр,НомКол,НомСтр,НомКол);
								
				Если ТипЗнч(РабочаяОбласть.Расшифровка)=Тип("ФиксированнаяСтруктура") Тогда
					
					СтрПравило=НоваяСтрока.ПравилаИспользованияПолейЗапроса.Добавить();
					СтрПравило.НомерКолонки		 = НомКол;
					СтрПравило.КодАналитики		 = РабочаяОбласть.Расшифровка.ТекущаяАналитика;
					СтрПравило.АналитикаОперанда = РабочаяОбласть.Расшифровка.ТекущаяАналитикассылка;
					СтрПравило.РеквизитАналитики = РабочаяОбласть.Расшифровка.ТекущаяАналитикаКлюч;
					СтрПравило.Поле				 = СтрПравило.КодАналитики+"."+СтрПравило.РеквизитАналитики;
					СтрПравило.Синоним			 = СтрПравило.КодАналитики+"vzv"+СтрПравило.РеквизитАналитики;
					СтрПравило.РеквизитАналитики = РабочаяОбласть.Расшифровка.ТекущаяАналитикаКлюч;
					
					ДанныеОбъекта=ОбщегоНазначенияУХ.ПолучитьДанныеОбъектаБД(СтрПравило.АналитикаОперанда);
					
					ЗаполнитьЗначенияСвойств(СтрПравило,ДанныеОбъекта);
					
					СтрПравило.ТаблицаАналитики=ДанныеОбъекта.ТипОбъектаМетаданных+"."+ДанныеОбъекта.ИмяОбъектаМетаданных;
					СтрПравило.ТипЗначения=ПолучитьТипЗначенияРеквизита(ДанныеОбъекта.ОбъектМетаданных,СтрПравило.РеквизитАналитики);
					
				КонецЕсли;
				
			КонецЦикла;
						
		КонецЕсли;
		
	КонецЦикла;	
	
	СтруктураДанных=Новый Структура;
	СтруктураДанных.Вставить("НомерСтрокиНачало",				НомерСтрокиНачало);
	СтруктураДанных.Вставить("НомерКолонкиНачало",				НомерКолонкиНачало);
	СтруктураДанных.Вставить("НомерКолонкиНачалоПоказателей",	НомерКолонкиНачалоПоказателей);
	СтруктураДанных.Вставить("НомерКолонкиОкончаниеПоказателей",НомерКолонкиОкончаниеПоказателей);
	
	
	ПолучитьДанныеИзФайла(ОбъектРасчета,ТаблицаСтрок,ТаблицаПоказателей,СтруктураДанных);
	
КонецФункции // ИмпортироватьДанныеИзМакета20() 

Функция ПолучитьТипЗначенияРеквизита(ОбъектМетаданных,ИмяРеквизита)
	
	Если ОбъектМетаданных.Реквизиты.Найти(ИмяРеквизита)=Неопределено Тогда
		
		Возврат ОбъектМетаданных.СтандартныеРеквизиты[ИмяРеквизита].Тип;
		
	Иначе
		
		Возврат ОбъектМетаданных.Реквизиты[ИмяРеквизита].Тип;
		
	КонецЕсли;		
	
КонецФункции // ПолучитьТипЗначенияРеквизита() 

Процедура ПолучитьДанныеИзФайла(ОбъектРасчета,ТаблицаСтрок,ТаблицаПоказателей,СтруктураДанных)
	
	ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ = "ОбщийМодуль.ИмпортДанныхБланкУХ.РазобратьДанныеФайла";
	
	Расширение = ?(ОбъектРасчета.Excel2003, "xls", "xlsx");
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла(Расширение);
	
	Попытка
		
		ПолучитьИзВременногоХранилища(ОбъектРасчета.АдресХранилищаФайла).Записать(ИмяВременногоФайла);
		Excel_Настройки = Неопределено;
		ExcelApplication = ОбщегоНазначенияMicrosoftExcelКлиентСерверУХ.Создать(Excel_Настройки);
		
		Если ExcelApplication = Неопределено Тогда
			ВызватьИсключение Нстр("ru = 'Не удалось создать COM-объект Microsoft Excel.'");
		КонецЕсли;
		
		Workbook = ExcelApplication.Workbooks.Open(ИмяВременногоФайла);
		
		Если ПустаяСтрока(ОбъектРасчета.ИмяЛиста) Тогда
			Если Workbook.Sheets.Count = 1 Тогда
				Sheet = Workbook.Sheets(1);
			Иначе
				ВызватьИсключение Нстр("ru = 'Не указано имя листа файла Microsoft Excel'");
			КонецЕсли;
		Иначе
			Sheet = Workbook.Sheets(ОбъектРасчета.ИмяЛиста);
		КонецЕсли;
			
		Если НЕ ПустаяСтрока(ОбъектРасчета.Пароль) И Sheet.ProtectContents Тогда
			Sheet.Unprotect(ОбъектРасчета.Пароль);
		КонецЕсли;
				
	Исключение
		
		ТекстСообщения=СтрШаблон(Нстр("ru = 'Ошибка разбора файла Microsoft Excel: %1'"), 
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())); 
		
		ПротоколируемыеСобытияВызовСервераУХ.ДобавитьЗаписьОшибка(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,,,ТекстСообщения);
		
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения,,,СтатусСообщения.Важное);
		
		Sheet 				= Неопределено;
		Workbook 			= Неопределено;
		ExcelApplication 	= Неопределено;
		
		Возврат;
		
	КонецПопытки;
	
	РазобратьДанныеЛиста(ОбъектРасчета,ExcelApplication,Sheet,ТаблицаСтрок,ТаблицаПоказателей,СтруктураДанных);
	
	ОбщегоНазначенияMicrosoftExcelКлиентСерверУХ.Закрыть(ExcelApplication, Excel_Настройки);
	
	Sheet 		= Неопределено;
	Workbook 	= Неопределено;
	
	Попытка
		РаботаСФайламиУХ.УдалитьФайлыАсинхронно(ИмяВременногоФайла);
	Исключение
		ПротоколируемыеСобытияВызовСервераУХ.ДобавитьЗаписьИнформация(ПРОТОКОЛИРУЕМОЕ_СОБЫТИЕ,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;	
	
КонецПроцедуры // ПолучитьДанныеИзФайла()

Процедура РазобратьДанныеЛиста(ОбъектРасчета,ExcelApplication,Sheet,ТаблицаСтрок,ТаблицаПоказателей,СтруктураДанных)
	
	UsedRange = Sheet.UsedRange;
	
	ВсегоКолонок = Sheet.UsedRange.Column + Sheet.UsedRange.Columns.Count - 1;
	ВсегоСтрок = Sheet.UsedRange.Row + Sheet.UsedRange.Rows.Count - 1;
	
	ТаблицаСтрок.Колонки.Добавить("СтрокаДанныеНачало");
	ТаблицаСтрок.Колонки.Добавить("СтрокаДанныеОкончание");
	
	РабочаяСтрока=ТаблицаСтрок[0];
	РабочаяСтрока.СтрокаДанныеНачало=СтруктураДанных.НомерСтрокиНачало;
	
	ТекНаименованиеСтроки=РабочаяСтрока.СтрокаОтчетаНаименование;
	
	ОбластьСтрок=Sheet.Range(Sheet.Cells(СтруктураДанных.НомерСтрокиНачало, СтруктураДанных.НомерКолонкиНачало),Sheet.Cells(ВсегоСтрок, СтруктураДанных.НомерКолонкиНачало));
	
	// Разбиранм файл по областям, относящимся к данным каждой строки.
	
	НачалоПоиска=СтруктураДанных.НомерСтрокиНачало;
	
	Для Индекс=1 ПО ТаблицаСтрок.Количество()-1 Цикл
		
		РабочаяСтрока=ТаблицаСтрок[Индекс];
		
		Результат=ОбластьСтрок.Find(РабочаяСтрока.СтрокаОтчетаНаименование,Sheet.Cells(НачалоПоиска, СтруктураДанных.НомерКолонкиНачало),-4123,1,1);
		
		Если НЕ Результат=Неопределено Тогда
			
			РабочаяСтрока.СтрокаДанныеНачало=Результат.Row;
			НачалоПоиска=РабочаяСтрока.СтрокаДанныеНачало;
			
			ТаблицаСтрок[Индекс-1].СтрокаДанныеОкончание=РабочаяСтрока.СтрокаДанныеНачало-1;
			
			
		Иначе
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'В файле %1 не найдена строка %2. Импорт остановлен.'"), 
				ОбъектРасчета.ХранимыйФайл.Наименование, 
				РабочаяСтрока.СтрокаОтчетаНаименование),,,СтатусСообщения.Важное);
			UsedRange=Неопределено;
			
			Возврат;
			
		КонецЕсли;
		
		Результат=Неопределено;
			
	КонецЦикла;
	
	ОбластьСтрок=Неопределено;
	
	РабочаяСтрока.СтрокаДанныеОкончание=ВсегоСтрок;	
	
	// Получаем и записываем значения. 
	
	ИмяОбработки="ЗаписьПоказателяСРасчетомЗависимых";
	
	ОбработкаОбъект=Обработки[ИмяОбработки].Создать();
	ОбработкаОбъект.ВидОтчета=ОбъектРасчета.ВидОтчета;
	ОбработкаОбъект.ВалютаОтображения=ОбъектРасчета.ОсновнаяВалюта;
	ОбработкаОбъект.Регистратор=ОбъектРасчета.Ссылка;
	
	Для Каждого Период ИЗ ОбъектРасчета.МассивПериодов Цикл
		
		НоваяСтрока=ОбработкаОбъект.ВалютыОтчетности.Добавить();
		
		НоваяСтрока.Организация		= ОбъектРасчета.Организация;
		НоваяСтрока.Сценарий		= ОбъектРасчета.Сценарий;
		НоваяСтрока.Валюта			= ОбъектРасчета.ОсновнаяВалюта;
		НоваяСтрока.ПериодОтчета	= Период;
		НоваяСтрока.ОсновнаяВалюта	= Истина;
		
	КонецЦикла;
	
	ОбъектРасчета.Свойство("ИдентификаторСеанса",ОбработкаОбъект.ИдентификаторСеанса);
	
	Для ИндексСтроки=0 ПО ТаблицаСтрок.Количество()-1 Цикл

		Строка=ТаблицаСтрок[ИндексСтроки];
		
		ШаблонТаблицыПоказателей=Новый ТаблицаЗначений;
		
		ПоказателиСтроки=ТаблицаПоказателей.Скопировать(Новый Структура("СтрокаОтчета",Строка.СтрокаОтчета));
	
		Для Каждого Показатель ИЗ ПоказателиСтроки Цикл
			
			ШаблонТаблицыПоказателей.Колонки.Добавить(Показатель.ИмяКолонки,КэшируемыеПроцедурыУХ.ПолучитьОписаниеТипаПоТипуПоказателя(Показатель.ПоказательОтчета.ТипЗначения));
			
		КонецЦикла;

		// Записываем синтетические значения
		
		ТекТаблицаПоказателейСинтетика=ШаблонТаблицыПоказателей.Скопировать();
		СтрокаСинтетика=ТекТаблицаПоказателейСинтетика.Добавить();
		
		Если СтруктураДанных.НомерКолонкиНачалоПоказателей=СтруктураДанных.НомерКолонкиОкончаниеПоказателей Тогда
			
			ТекТаблицаПоказателейСинтетика[0][0]=Sheet.Cells(Строка.СтрокаДанныеНачало, СтруктураДанных.НомерКолонкиНачалоПоказателей).Value;
			
		Иначе
			
			Для Каждого СтрПоказатель ИЗ ПоказателиСтроки Цикл
				
				ТекТаблицаПоказателейСинтетика[0][СтрПоказатель.ИмяКолонки]=Sheet.Range(Sheet.Cells(Строка.СтрокаДанныеНачало, СтрПоказатель.НомерКолонки),Sheet.Cells(Строка.СтрокаДанныеНачало, СтрПоказатель.НомерКолонки)).Value;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ДобавитьСтрокиДляЗаписи(ОбъектРасчета,ОбработкаОбъект,ТекТаблицаПоказателейСинтетика,ПоказателиСтроки);
		
		Если Строка.СтрокаДанныеНачало=Строка.СтрокаДанныеОкончание
			ИЛИ Строка.ПравилаИспользованияПолейЗапроса.Количество()=0 Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		// Синхронизируем значения аналитических раскрытий
		
		НомерКолонкиНачало		= Строка.ПравилаИспользованияПолейЗапроса[0].НомерКолонки;
		НомерКолонкиОкончание	= Строка.ПравилаИспользованияПолейЗапроса[Строка.ПравилаИспользованияПолейЗапроса.Количество()-1].НомерКолонки;
		
		Если ИндексСтроки=ТаблицаСтрок.Количество()-1 Тогда
			
			ЕстьЗаполненнаяАналитика=Ложь;
			
			Для НомерКолонкиПроверка=НомерКолонкиНачало ПО НомерКолонкиОкончание Цикл
				
				Если ЗначениеЗаполнено(Sheet.Cells(Строка.СтрокаДанныеНачало+1, НомерКолонкиПроверка).Text)
					ИЛИ ЗначениеЗаполнено(Sheet.Cells(Строка.СтрокаДанныеНачало+1, НомерКолонкиПроверка).Value) Тогда
					
					ЕстьЗаполненнаяАналитика=Истина;
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если НЕ ЕстьЗаполненнаяАналитика Тогда
				
				Продолжить;
				
			КонецЕсли;
			
		КонецЕсли;
					
		
		ТаблицаАналитики=Новый ТаблицаЗначений;
		
		Для Индекс=0 ПО Строка.ПравилаИспользованияПолейЗапроса.Количество()-1  Цикл
			
			ТаблицаАналитики.Колонки.Добавить(Строка.ПравилаИспользованияПолейЗапроса[Индекс].Синоним,Строка.ПравилаИспользованияПолейЗапроса[Индекс].ТипЗначения);
			
		КонецЦикла;
		
		Для Индекс=(Строка.СтрокаДанныеНачало+1) ПО Строка.СтрокаДанныеОкончание Цикл
			
			СтрАналитика=ТаблицаАналитики.Добавить();
			
		КонецЦикла;
				
		Если НомерКолонкиНачало=НомерКолонкиОкончание
			И (Строка.СтрокаДанныеНачало+1)=Строка.СтрокаДанныеОкончание Тогда // Одна ячейка
			
			Если ТаблицаАналитики.Колонки[0].ТипЗначения.Типы()[0]=Тип("Строка") Тогда
				
				ТаблицаАналитики[0][0]=Sheet.Cells(Строка.СтрокаДанныеНачало+1, НомерКолонкиНачало).Text;
				
			Иначе
				
				ТаблицаАналитики[0][0]=Sheet.Cells(Строка.СтрокаДанныеНачало+1, НомерКолонкиНачало).Value;
				
			КонецЕсли;
			
		Иначе
			
			CurrentValue=Sheet.Range(Sheet.Cells(Строка.СтрокаДанныеНачало+1, НомерКолонкиНачало),Sheet.Cells(Строка.СтрокаДанныеОкончание,НомерКолонкиОкончание)).Value;
			
			Если ТипЗнч(CurrentValue)=Тип("Число") Тогда
				
				МассивАналитик=Новый Массив;
				МассивКолонка=Новый Массив;
				МассивКолонка.Добавить(CurrentValue);
				МассивАналитик.Добавить(МассивКолонка);
				
			ИначеЕсли CurrentValue=Неопределено Тогда
				
				Продолжить;
				
			Иначе
				
				МассивАналитик=CurrentValue.Unload();
				
			КонецЕсли;
			
			CurrentValue=Неопределено;
			
			Для Индекс=0 По МассивАналитик.Количество()-1 Цикл
				
				Если ТаблицаАналитики.Колонки[Индекс].ТипЗначения.Типы()[0]=Тип("Строка") Тогда
					
					Для НомСтр=0 ПО ТаблицаАналитики.Количество()-1 Цикл
						
						ТаблицаАналитики[НомСтр][Индекс]=Sheet.Cells(Строка.СтрокаДанныеНачало+1+НомСтр, НомерКолонкиНачало+Индекс).Text;
						
					КонецЦикла;
					
				Иначе
					
					ТаблицаАналитики.ЗагрузитьКолонку(МассивАналитик[Индекс],Индекс);
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
		ДобавитьКолонкуНомерСтроки(ТаблицаАналитики);
		
		Если ТаблицаАналитики.Количество()>0 Тогда
			
			ТабГруппыРаскрытия = ИмпортДанныхБланкУХ.ТрансформироватьВнешниеДанные(ОбъектРасчета,ТаблицаАналитики,Строка.ПравилаИспользованияПолейЗапроса);
			
			Если ТабГруппыРаскрытия.Количество()=0 Тогда // ошибки при синхронизации аналитик
				
				UsedRange=Неопределено;
				Возврат;
				
			КонецЕсли;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
						
		// Получаем таблицу значений показателей
		
		ТекТаблицаПоказателейАналитика=ШаблонТаблицыПоказателей.СкопироватьКолонки();
		
		Для Индекс=(Строка.СтрокаДанныеНачало+1) ПО Строка.СтрокаДанныеОкончание Цикл
			
			СтрАналитика=ТекТаблицаПоказателейАналитика.Добавить();
			
		КонецЦикла;
		
		Если (Строка.СтрокаДанныеНачало+1)=Строка.СтрокаДанныеОкончание
			И СтруктураДанных.НомерКолонкиНачалоПоказателей=СтруктураДанных.НомерКолонкиОкончаниеПоказателей Тогда
			
			ТекТаблицаПоказателейАналитика[0][0]=Sheet.Cells(Строка.СтрокаДанныеОкончание, СтруктураДанных.НомерКолонкиНачалоПоказателей).Value;
			
		Иначе
			
			Для Каждого СтрПоказатель ИЗ ПоказателиСтроки Цикл
				
				CurrentValue=Sheet.Range(Sheet.Cells(Строка.СтрокаДанныеНачало+1, СтрПоказатель.НомерКолонки),Sheet.Cells(Строка.СтрокаДанныеОкончание, СтрПоказатель.НомерКолонки)).Value;
				
				Если ОбщегоНазначенияУХ.ПримитивныйТип(ТипЗнч(CurrentValue)) Тогда
					
					МассивПоказателей=Новый Массив;
					МассивКолонка=Новый Массив;
					МассивКолонка.Добавить(CurrentValue);
					МассивПоказателей.Добавить(МассивКолонка);
					
				ИначеЕсли CurrentValue=Неопределено Тогда
					
					Продолжить;
					
				Иначе
					
					МассивПоказателей=CurrentValue.Unload();
					
				КонецЕсли;
				
				CurrentValue=Неопределено;
				
				ТекТаблицаПоказателейАналитика.ЗагрузитьКолонку(МассивПоказателей[0],СтрПоказатель.ИмяКолонки);
				
			КонецЦикла;
							
		КонецЕсли;
		
		ДобавитьКолонкуНомерСтроки(ТекТаблицаПоказателейАналитика);
		
		ДобавитьСтрокиДляЗаписи(ОбъектРасчета,ОбработкаОбъект,ТекТаблицаПоказателейАналитика,ПоказателиСтроки,ТабГруппыРаскрытия);
				
	КонецЦикла;
	
	ОбработкаОбъект.ЗаписатьЗначенияТаблицыПоказателей();
	ОбъектРасчета.Вставить("ИмпортВыполнен");
	
	UsedRange=Неопределено;
		
КонецПроцедуры // РазобратьДанныеЛиста() 

Процедура ДобавитьКолонкуНомерСтроки(ТаблицаДанных)
	
	ТаблицаДанных.Колонки.Добавить("НомерСтроки",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10));
	
	Для Индекс=0 ПО ТаблицаДанных.Количество()-1 Цикл
		
		ТаблицаДанных[Индекс].НомерСтроки=Индекс;
		
	КонецЦикла;
		
КонецПроцедуры // РазобратьДанныеЛиста()

Процедура ДобавитьСтрокиДляЗаписи(ОбъектРасчета,ОбработкаОбъект,ТаблицаПоказателей,ПоказателиСтроки,ТаблицаРаскрытий=Неопределено)
	
	Если ТаблицаРаскрытий=Неопределено Тогда // Пишем синтетические значения;
		
		РабочаяТаблица=ТаблицаПоказателей;
		СинтетическоеЗначение=Истина;
		
	Иначе
		
		Запрос=Новый Запрос;
		Запрос.Текст="Выбрать * Поместить ТаблицаПоказателей ИЗ &ТаблицаПоказателей КАК ТаблицаПоказателей
		|Индексировать ПО ТаблицаПоказателей.НомерСтроки
		|;
		|Выбрать * Поместить ТаблицаРаскрытий ИЗ &ТаблицаРаскрытий КАК ТаблицаРаскрытий
		|Индексировать ПО ТаблицаРаскрытий.НомерСтроки
		|;
		|ВЫБРАТЬ";
		
		ТекстПоля="";
		
		Для Индекс=1 По 6 Цикл
			
			Если НЕ ТаблицаРаскрытий.Колонки.Найти("Аналитика"+Индекс)=Неопределено Тогда
				
				ТекстПоля=ТекстПоля+",
				|ТаблицаРаскрытий.Аналитика"+Индекс;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ ТаблицаРаскрытий.Колонки.Найти("АналитикаВалюта")=Неопределено Тогда
			
			ТекстПоля=ТекстПоля+",
			|ТаблицаРаскрытий.АналитикаВалюта";
			
		КонецЕсли;
		
		Для Каждого Показатель ИЗ ПоказателиСтроки Цикл
			
			ТекстПоля=ТекстПоля+",
			|ТаблицаПоказателей."+Показатель.ИмяКолонки;
			
		КонецЦикла;
		
		Запрос.Текст=Запрос.Текст+Сред(ТекстПоля,2)+"
		|ИЗ ТаблицаРаскрытий КАК ТаблицаРаскрытий
		|Внутреннее соединение ТаблицаПоказателей КАК ТаблицаПоказателей
		|ПО ТаблицаРаскрытий.НомерСтроки=ТаблицаПоказателей.НомерСтроки";
		
		Запрос.УстановитьПараметр("ТаблицаПоказателей",	ТаблицаПоказателей);
		Запрос.УстановитьПараметр("ТаблицаРаскрытий",	ТаблицаРаскрытий);
		
		РабочаяТаблица=Запрос.Выполнить().Выгрузить();
		
		СинтетическоеЗначение=Ложь;
		
	КонецЕсли;
	
	Для Каждого Строка ИЗ РабочаяТаблица Цикл
		
		Для Каждого Показатель ИЗ ПоказателиСтроки Цикл
			
			ЗначениеПоказателя=Строка[Показатель.ИмяКолонки];
			
			Если НЕ ЗначениеЗаполнено(ЗначениеПоказателя) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НоваяСтрока=ОбработкаОбъект.ТаблицаИзмененныхПоказателей.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,ОбъектРасчета);
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			
			НоваяСтрока.ПериодОтчета		=Показатель.ПериодОтчета;;
			НоваяСтрока.ПоказательОтчета	=Показатель.ПоказательОтчета;
						
			Если ТипЗнч(ЗначениеПоказателя)=Тип("Число") Тогда
				
				НоваяСтрока.Значение=ЗначениеПоказателя;
				
			Иначе
				
				НоваяСтрока.ЗначениеНечисловое=ЗначениеПоказателя;
				
			КонецЕсли;
			
			НоваяСтрока.СинтетическоеЗначение=СинтетическоеЗначение;
			
		КонецЦикла;
		
	КонецЦикла;
				
КонецПроцедуры // ДобавитьСтрокиДляЗаписи() 
	