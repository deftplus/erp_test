////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ и ФУНКЦИИ ИНФОРМИРОВАНИЯ ПОЛЬЗОВАТЕЛЯ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПОДГОТОВКИ ИНФОРМАЦИИ В ФОРМЕ


#Если ТолстыйКлиентОбычноеПриложение Тогда
Функция ПолучитьСписокЭлементовКонсолидации(ИмяСправочника, ОтборПоВладельцу,ТекСписокЗначений) Экспорт
	
КонецФункции // ПолучитьСписокЭлементовКонсолидации() 
#КонецЕсли

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ВСТРОЕННОЙ СПРАВКИ

Процедура УстановитьВидимостьТекста(Документ, Ид, ВключитьВидимость, Параметр = "inline") Экспорт
	
	// Документ должен быть всегда загружен и в нем должен найтись нужный нам элемент
	// Пользователь может увидеть данные сообщения только в том случае, если при кодировании
	// механизма были допущены ошибки
	
	// Данное сообщение будет выведено, если мы пытаемся обновить справку ПриОткрытии формы
	// Обновлять справку в этом событии не нужно, так как текст справки был изначально
	// сформирован правильно
	Если Документ.readyState <> "complete" Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(Нстр("ru = 'Справка: справка еще не загружена'"));
		Возврат;
	КонецЕсли;
	
	// Данное сообщение будет выведено, если мы пытаемся переключить видимость элемента
	// которого нет в справке. Такое может только в случае, если бы допустили ошибку в коде
	Элемент = Документ.getElementById(Ид);
	Если Элемент = Неопределено Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(Нстр("ru = 'Справка: не найден элемент %1'"), Ид));
		Возврат;
	КонецЕсли;
	
	Элемент.style.display = ?(ВключитьВидимость, Параметр, "none");
	
КонецПроцедуры

Процедура ПолеHTMLДокументаOnClick(Элемент, pEvtObj, Форма) Экспорт
	
	ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если ЭлементHTML = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементHTML.id = "Команда" Тогда
		Попытка
			Форма.ВыполнитьКомандуФормы(ЭлементHTML.pathname, ЭлементHTML.target);
		Исключение
			// в случае неверной или недоступной по правам команды ничего не делаем
		КонецПопытки;
		pEvtObj.returnValue = Ложь;
		
	ИначеЕсли ЭлементHTML.id = "ОткрытьСписок" Тогда
		Менеджер = Вычислить(ЭлементHTML.pathname);
		Попытка
			ФормаСписка = Менеджер.ПолучитьФормуСписка();
			ФормаСписка.Открыть();
		Исключение
			// в случае неверной или недоступной по правам команды ничего не делаем
		КонецПопытки;
		
		pEvtObj.returnValue = Ложь;
		
	ИначеЕсли ЭлементHTML.id = "АктивизироватьЭУ" Тогда
		Форма.ТекущийЭлемент = Вычислить("Форма.ЭлементыФормы." + ЭлементHTML.pathname);
		pEvtObj.returnValue = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

Функция НайтиЭлемент(ЭлементHTML, НазваниеТега)
	
	ТекущийЭлементHTML = ЭлементHTML;
	Пока Истина Цикл
		Если ТекущийЭлементHTML.tagName = "BODY" Тогда
			Возврат Неопределено;
		ИначеЕсли ТекущийЭлементHTML.tagName = НазваниеТега Тогда
			Возврат ТекущийЭлементHTML;
		Иначе
			ТекущийЭлементHTML = ТекущийЭлементHTML.parentNode;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Процедура ПолеHTMLДокументаOnMouseOver(Элемент, pEvtObj, ВыделятьРазделы = Ложь) Экспорт
	
	Если ВыделятьРазделы Тогда
		ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "DIV");
		Если ЭлементHTML <> Неопределено Тогда
			ЭлементHTML.style.paddingtop		= 0;
			ЭлементHTML.style.paddingright		= 3;
			ЭлементHTML.style.paddingbottom		= 2;
			ЭлементHTML.style.paddingleft		= 3;
			ЭлементHTML.style.borderwidth		= 1;
			ЭлементHTML.style.borderstyle		= "solid";
			ЭлементHTML.style.backgroundcolor	= "#FFFBF0";
		КонецЕсли;
	КонецЕсли;
	ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если ЭлементHTML <> Неопределено Тогда
		ЭлементHTML.style.backgroundcolor	= ВернутьШестнадцатиричноеПредставлениеЦвета(ВстроеннаяСправка_ФонВыделеннойСсылки());
		ЭлементHTML.style.color				= ВернутьШестнадцатиричноеПредставлениеЦвета(ВстроеннаяСправка_ЦветВыделеннойСсылки());
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолеHTMLДокументаOnMouseOut(Элемент, pEvtObj, ВыделятьРазделы = Ложь) Экспорт
	
	Если ВыделятьРазделы Тогда
		ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "DIV");
		Если ЭлементHTML <> Неопределено Тогда
			ЭлементHTML.style.paddingtop		= 1;
			ЭлементHTML.style.paddingright		= 4;
			ЭлементHTML.style.paddingbottom		= 3;
			ЭлементHTML.style.paddingleft		= 4;
			ЭлементHTML.style.borderstyle		= "none";
			ЭлементHTML.style.backgroundcolor	= "";
		КонецЕсли;
	КонецЕсли;
	ЭлементHTML = НайтиЭлемент(pEvtObj.srcElement, "A");
	Если ЭлементHTML <> Неопределено Тогда
		ЭлементHTML.style.backgroundcolor	= "";
		ЭлементHTML.style.color				= "";
	КонецЕсли;
	
КонецПроцедуры

Функция ВстроеннаяСправка_ЦветФона() Экспорт
	
	Возврат Новый Цвет(255, 255, 255);
	
КонецФункции

Функция ВстроеннаяСправка_ЦветРамки() Экспорт
	
	Возврат Новый Цвет(137, 132, 119);
	
КонецФункции

Функция ВстроеннаяСправка_ЦветСсылки() Экспорт
	
	Возврат Новый Цвет(0, 0, 0);
	
КонецФункции

Функция ВстроеннаяСправка_ЦветВыделеннойСсылки() Экспорт
	
	Возврат Новый Цвет(255, 255, 255);
	
КонецФункции

Функция ВстроеннаяСправка_ФонВыделеннойСсылки() Экспорт
	
	Возврат Новый Цвет(64, 94, 172);
	
КонецФункции

// Возвращает описание стилей, используемых при показе встроенной ситуационно-зависимой справки
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   строка
//
Функция ВстроеннаяСправка_СтилиДокумента() Экспорт

	Возврат "
	|		<STYLE type=text/css>
	|			DIV.top {
	|				PADDING: 0;
	|			}
	|			DIV {
	|				PADDING: 3px 0px 3px 3px;
	|				BORDER-TOP-COLOR: #dadac4;
	|				BORDER-RIGHT-COLOR: #dadac4;
	|				BORDER-BOTTOM-COLOR: #dadac4;
	|				BORDER-LEFT-COLOR: #dadac4;
	|			}
	|			A {
	|				PADDING-TOP: 1px;
	|				PADDING-BOTTOM: 1px;
	|			}
	|			BODY {
	|				SCROLLBAR-FACE-COLOR: #fffbf0;
	|				SCROLLBAR-HIGHLIGHT-COLOR: #dadac4;
	|				SCROLLBAR-3DLIGHT-COLOR: #fff; MARGIN: 5px;
	|				SCROLLBAR-ARROW-COLOR: #708090;
	|				SCROLLBAR-TRACK-COLOR: #fffbf0;
	|				SCROLLBAR-DARKSHADOW-COLOR: #fff;
	|				MARGIN: 5px 0px 5px 5px;
	|			}
	|			IMG {
	|				MARGIN-LEFT: 3px;
	|			}
	|		</STYLE>";

КонецФункции // ()

////////////////////////////////////////////////////////////////////////////////
// АНАЛИЗ ИМПОРТИРУЕМЫХ ФАЙЛОВ.
//

Функция ВернутьСписокЛистов(ИмяФайла) Экспорт
	
	СписокЛистов = Новый СписокЗначений;
	
	Попытка
		Ексел = Новый COMОбъект("Excel.Application");
		РабочаяКнига  = Ексел.Workbooks.Open(ИмяФайла);
		Ексел.Visible = Ложь;
		Для Инд = 1 По РабочаяКнига.Sheets.Count Цикл
			СписокЛистов.Добавить(Инд, РабочаяКнига.Sheets(Инд).Name, РабочаяКнига.Sheets(Инд).ProtectContents);
		КонецЦикла;
		РабочаяКнига.Close(0);
	Исключение
		ТекстыОшибки = Новый Массив;
		ТекстыОшибки.Добавить(Нстр("ru = 'Не удалось открыть файл XLS.'"));
		ТекстыОшибки.Добавить(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстыОшибки.Добавить(Нстр("ru = 'Возможные причины ошибки описаны в справке к документу ""Экземпляр отчета"" в разделе ""Импорт""'"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрСоединить(ТекстыОшибки, Символы.ПС));
	КонецПопытки;
	
	Если Ексел <> Неопределено Тогда
		Ексел.Quit();
		Ексел = Неопределено;
	КонецЕсли;
	
	Возврат СписокЛистов;
	
КонецФункции
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДЕРЕВОМ ЗНАЧЕНИЙ В УПРАВЛЯЕМОМ ПРИЛОЖЕНИИ.
//

Процедура МножественныйПоискПоДеревуЗначенийНезаполненныхСтрок(МассивНайденныхСтрок, ДеревоЗначений, СписокКолонок, ТолькоТекущийУровень = Ложь) Экспорт
	
	Если ТипЗнч(МассивНайденныхСтрок) <> Тип("Массив") Тогда
		Возврат;
	КонецЕсли;
	
	МассивИменКолонок = ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(СписокКолонок, ",");
	
	Элементы = ДеревоЗначений.ПолучитьЭлементы();
	
	Для Каждого Элемент Из Элементы Цикл
		
		ЗначениеНайдено = Истина;
		
		Для Каждого Колонка Из МассивИменКолонок Цикл
			Если ЗначениеЗаполнено(Элемент[Колонка]) Тогда
				ЗначениеНайдено = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеНайдено Тогда
			
			МассивНайденныхСтрок.Добавить(Элемент);
			
		КонецЕсли;
		
		Если НЕ ТолькоТекущийУровень Тогда
			МножественныйПоискПоДеревуЗначенийНезаполненныхСтрок(МассивНайденныхСтрок, Элемент, СписокКолонок, ТолькоТекущийУровень);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


Функция ПоискПоДеревуЗначений(ДеревоЗначений, СтруктураПоиска, ТолькоТекущийУровень = Ложь) Экспорт
	
	Элементы = ДеревоЗначений.ПолучитьЭлементы();
	
	Для Каждого Элемент Из Элементы Цикл
		
		ЗначениеНайдено = Истина;
		
		Для Каждого Условие Из СтруктураПоиска Цикл
			Если Элемент[Условие.Ключ] <> Условие.Значение Тогда
				ЗначениеНайдено = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеНайдено Тогда
			Возврат Элемент;
		КонецЕсли;
		
		Если НЕ ТолькоТекущийУровень Тогда
			НайденноеЗначение = ПоискПоДеревуЗначений(Элемент, СтруктураПоиска, ТолькоТекущийУровень);
			Если НайденноеЗначение <> Неопределено Тогда
				Возврат НайденноеЗначение;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Функция ОпределитьУровеньЗаписи(ЭлементДерева) Экспорт
	
	Перем Уровень;
	
	Уровень = 0;
	ТекРодитель = ЭлементДерева.ПолучитьРодителя();
	
	Пока ТекРодитель <> Неопределено Цикл
		Уровень = Уровень + 1;
		ТекРодитель = ТекРодитель.ПолучитьРодителя();
	КонецЦикла;
	
	Возврат Уровень;
	
КонецФункции

Функция ПолучитьВерхнийУровень(ЭлементДерева, Предел = 0) Экспорт
	
	МассивРодителей = Новый Массив;
	
	ТекРодитель = ЭлементДерева.ПолучитьРодителя();
	
	Пока ТекРодитель <> Неопределено Цикл
		МассивРодителей.Добавить(ТекРодитель);
		ТекРодитель = ТекРодитель.ПолучитьРодителя();
	КонецЦикла;
	
	ВерхняяГраница = МассивРодителей.ВГраница();
	Индекс         = ВерхняяГраница - Предел;
	
	Если Индекс < 0 Тогда
		Возврат ЭлементДерева;
	Иначе
		Возврат МассивРодителей[Индекс];
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С ОТБОРАМИ В ФОРМЕ СПИСКА ЭЛЕМЕНТА
//

// Добавляет отбор в набор отборов компоновщика или группы отборов
Функция ДобавитьОтбор(Отбор, Знач Поле, Значение, ВидСравнения = Неопределено) Экспорт
	
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	ЭлементОтбора = Неопределено;
	
	Для Каждого Элемент Из Отбор.Элементы Цикл
		
		Если Элемент.ЛевоеЗначение = Поле Тогда
			ЭлементОтбора = Элемент;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЭлементОтбора = Неопределено Тогда
		ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Поле;
	КонецЕсли;
	
	ЭлементОтбора.ВидСравнения   = ВидСравнения;
	ЭлементОтбора.ПравоеЗначение = Значение;
	ЭлементОтбора.Использование  = Истина;
	
	Возврат ЭлементОтбора;
	
КонецФункции
// Удаляет отбор из компоновщика настроек, если поле не указано, очищает отбор
Функция УдалитьОтбор(Отбор, Знач Поле = Неопределено) Экспорт
	
	Если Поле = Неопределено Тогда
		Отбор.Элементы.Очистить();
		Возврат Истина;
	КонецЕсли;
	Если ТипЗнч(Поле) = Тип("Строка") Тогда
		Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЕсли;
	
	ПолеУдалено = Ложь;
	Элементы = ПолучитьЭлементыОтбора(Отбор);
	МассивУдаляемыхЭлементов = Новый Массив;
	Для Каждого Элемент Из Элементы Цикл
		Если Элемент.ЛевоеЗначение = Поле Тогда
			МассивУдаляемыхЭлементов.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивУдаляемыхЭлементов.Количество() = 0 Тогда
		Возврат Ложь;
	Иначе
		Для Каждого Элемент Из МассивУдаляемыхЭлементов Цикл
			Отбор.Элементы.Удалить(Элемент);
		КонецЦикла;
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьЭлементыОтбора(ЭлементСтруктуры, ТолькоГруппы = Ложь) Экспорт
	
	Если ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Отбор = ЭлементСтруктуры.Настройки.Отбор;
	Иначе
		Отбор = ЭлементСтруктуры;
	КонецЕсли;
	
	МассивПолей = Новый Массив;
	
	ДобавитьЭлементыОтбораВМассив(ЭлементСтруктуры.Элементы, МассивПолей, ТолькоГруппы);
	Возврат МассивПолей;
	
КонецФункции

Процедура ДобавитьЭлементыОтбораВМассив(Элементы, МассивПолей, ТолькоГруппы = Ложь)
	
	Для каждого Элемент Из Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			Если ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
			ДобавитьЭлементыОтбораВМассив(Элемент.Элементы, МассивПолей, ТолькоГруппы);
		Иначе
			Если Не ТолькоГруппы Тогда
				МассивПолей.Добавить(Элемент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ РАБОТЫ С НОВЫМ ЭЛЕМЕНТОМ СПРАВОЧНИКА

////////////////////////////////////////////////////////////////////////////////
// ПРОЧИЕ ФУНКЦИИ.
//

#Если ТолстыйКлиентОбычноеПриложение Тогда
Функция ПолучитьПутьККартинкеДляHTML(Картинка, ПолеHTMLДокумента) Экспорт
	
	МетаУрл	= ПолеHTMLДокумента.ПолучитьURL(Метаданные);
	МетаУрл	= Лев(МетаУрл, СтрНайти(МетаУрл,"mdobject")-1);
	КартИД	= ЗначениеВСтрокуВнутр(Картинка);
	КартИД	= Сред(КартИД, СтрНайти(КартИД,"{")+1);
	КартИД	= Сред(КартИД, СтрНайти(КартИД,"{")+1);
	КартИД	= Сред(КартИД, СтрНайти(КартИД,"{")+1);
	КартИД	= Лев(КартИД, СтрНайти(КартИД,"}")-1);
	
	Если Лев(КартИД,1) = "-" Тогда
		КартИд	= "n"+КартИД;
	Иначе
		КартИД	= Сред(КартИД,3);
	КонецЕсли;
	
	Возврат МетаУрл+"mdpicture/id" + КартИД;
	
КонецФункции // КартинкаУрл()
#КонецЕсли

Функция ВернутьШестнадцатиричноеПредставлениеЦвета(ВыбранныйЦвет) Экспорт
	
	Если ТипЗнч(ВыбранныйЦвет) <> Тип("Цвет") Тогда
		Возврат "";
	КонецЕсли;
	
	Красный	= ОбщегоНазначенияУХ.ДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Красный);
	Зеленый	= ОбщегоНазначенияУХ.ДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Зеленый);
	Синий	= ОбщегоНазначенияУХ.ДесятичноеВШестнадцатиричное(ВыбранныйЦвет.Синий);
	
	Возврат "#" + Красный + Зеленый + Синий;
	
КонецФункции

// Возвращает признак того, что переданная в качестве параметра строка
// может быть использована в качестве кода объекта.
//
Функция СтрокаМожетИспользоватьсяВКачествеКода(Знач Стр) Экспорт
	
	Если ПустаяСтрока(Стр) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Стр = ВРЕГ(СокрЛП(Стр));
	
	РусАнглАлфавит = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ";
	РусАнглАлфавитИВспомогательныеСимволы = "АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789";
	
	Если СтрНайти(РусАнглАлфавит, Сред(Стр, 1, 1)) = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Инд = 2 По СтрДлина(Стр) Цикл
		Если СтрНайти(РусАнглАлфавитИВспомогательныеСимволы, Сред(Стр, Инд, 1)) = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Возвращает номер картинки в коллекции картинок Организации по типу организации 
// (Копия аналогичной модуля РаботаСДиалогамиСервер)
Функция ПолучитьКартинкуСтрокПоТипуОрганизации(ТипОрганизации, ПометкаУдаления = Ложь) Экспорт
	
	Если ТипОрганизации = ПредопределенноеЗначение("Перечисление.ТипыОрганизационныхЕдиниц.Консолидирующая") Тогда
		Результат = 0;
	ИначеЕсли ТипОрганизации = ПредопределенноеЗначение("Перечисление.ТипыОрганизационныхЕдиниц.Элиминирующая") Тогда
		Результат = 2;
	ИначеЕсли ТипОрганизации = ПредопределенноеЗначение("Перечисление.ТипыОрганизационныхЕдиниц.Обычная") Тогда
		Результат = 1;
	Иначе                    
		Результат = 10;
	КонецЕсли;
	
	Результат = Результат + ?(ПометкаУдаления, 3, 0);
	
	Возврат Результат;
	
КонецФункции
