#Область СведенияОБиблиотекеИлиКонфигурации

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   * Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   * Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   * ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                    Обработчики обновления таких библиотек должны быть вызваны ранее
//                                    обработчиков обновления данной библиотеки.
//                                    При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                    порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                    в процедуре ПриДобавленииПодсистем общего модуля
//                                    ПодсистемыКонфигурацииПереопределяемый.
//   * РежимВыполненияОтложенныхОбработчиков - Строка - "Последовательно" - отложенные обработчики обновления выполняются
//                                    последовательно в интервале от номера версии информационной базы до номера
//                                    версии конфигурации включительно или "Параллельно" - отложенный обработчик после
//                                    обработки первой порции данных передает управление следующему обработчику, а после
//                                    выполнения последнего обработчика цикл повторяется заново.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "Локализация" + ?(СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации(), "Базовая", "");
	Описание.Версия = "2.5.7.366";
	Описание.РежимВыполненияОтложенныхОбработчиков = "Параллельно";
	
КонецПроцедуры

// См. ОбновлениеИнформационнойБазыПереопределяемый.ПриОпределенииНастроек
Процедура ПриОпределенииНастроек(Параметры) Экспорт
	
	//++ Локализация
	
	Объекты = Параметры.ОбъектыСНачальнымЗаполнением;
	
	ЭлектронноеВзаимодействие.ПриОпределенииНастроекОбновленияИнформационнойБазы(Параметры);
	
	//++ НЕ УТ
	Объекты.Добавить(Метаданные.Справочники.ДрагоценныеМатериалы);
	//-- НЕ УТ
	
	//-- Локализация
		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОбновленияИнформационнойБазы

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

//++ Локализация
	Документы.ВводОстатков.ПриДобавленииОбработчиковОбновления(Обработчики);
//++ НЕ УТ
	Документы.ВводОстатковВнеоборотныхАктивов.ПриДобавленииОбработчиковОбновления(Обработчики);
//++ НЕ УТКА
	Документы.ВводОстатковНМАМеждународныйУчет.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВводОстатковОСМеждународныйУчет.ПриДобавленииОбработчиковОбновления(Обработчики);
//-- НЕ УТКА
	Документы.ВводОстатковРасходовПриУСН.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВыбытиеДенежныхДокументов.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ВыпускПродукции.ПриДобавленииОбработчиковОбновления(Обработчики);
//-- НЕ УТ
	Документы.ЗаписьКнигиПокупок.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ЗаписьКнигиПродаж.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ЗаявлениеОВвозеТоваров.ПриДобавленииОбработчиковОбновления(Обработчики);
//++ НЕ УТ
	Документы.ИнвентаризацияОС.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.НаработкаТМЦВЭксплуатации.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.НачислениеДивидендов.ПриДобавленииОбработчиковОбновления(Обработчики);
//-- НЕ УТ
	Документы.ОперацияПоЯндексКассе.ПриДобавленииОбработчиковОбновления(Обработчики);
//++ НЕ УТ
	Документы.ОтчетОператораСистемыПлатон.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПеремещениеВЭксплуатации.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПогашениеСтоимостиТМЦВЭксплуатации.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПодготовкаКПередачеОС.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПоступлениеДенежныхДокументов.ПриДобавленииОбработчиковОбновления(Обработчики);
//++ НЕ УТКА
	Документы.ПринятиеКУчетуНМАМеждународныйУчет.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.ПринятиеКУчетуОСМеждународныйУчет.ПриДобавленииОбработчиковОбновления(Обработчики);
//-- НЕ УТКА
	Документы.РасходныйКассовыйОрдер.ПриДобавленииОбработчиковОбновленияКА(Обработчики);
	Документы.РегистрацияПрочихКонтролируемыхСделок.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СписаниеБезналичныхДенежныхСредств.ПриДобавленииОбработчиковОбновленияКА(Обработчики);
	Документы.СписаниеИзЭксплуатации.ПриДобавленииОбработчиковОбновления(Обработчики);
//-- НЕ УТ
	Документы.СчетФактураВыданный.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СчетФактураКомиссионеру.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СчетФактураКомитента.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СчетФактураНалоговыйАгент.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СчетФактураНаНеподтвержденнуюРеализацию0.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СчетФактураПолученный.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.СчетФактураПолученныйНалоговыйАгент.ПриДобавленииОбработчиковОбновления(Обработчики);
//++ НЕ УТ
	Документы.ТаможеннаяДекларацияЭкспорт.ПриДобавленииОбработчиковОбновления(Обработчики);
	Документы.УведомлениеОКонтролируемыхСделках.ПриДобавленииОбработчиковОбновления(Обработчики);
	ВнеоборотныеАктивыЛокализация.ПриДобавленииОбработчиковОбновления(Обработчики);
	ИнтеграцияБЗК.ПриДобавленииОбработчиковОбновления(Обработчики);
//-- НЕ УТ
	КоммерческиеПредложенияДокументыЛокализация.ПриДобавленииОбработчиковОбновления(Обработчики);
	ОбновлениеИнформационнойБазыЛокализация.ПриДобавленииОбработчиковОбновленияЛокализация(Обработчики);
	ТМЦВЭксплуатацииСервер.ПриДобавленииОбработчиковОбновления(Обработчики);
	УчетНДСРФ.ПриДобавленииОбработчиковОбновления(Обработчики);
//++ НЕ УТ
	УчетУСНПСНСервер.ПриДобавленииОбработчиковОбновления(Обработчики);
//-- НЕ УТ
	ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ПриДобавленииОбработчиковОбновления(Обработчики);
//++ НЕ УТ
	ПланыСчетов.Хозрасчетный.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыБухгалтерии.Хозрасчетный.ПриДобавленииОбработчиковОбновления(Обработчики);
//-- НЕ УТ
	РегистрыНакопления.НДСАвансыВыданные.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.НДСАвансыПолученные.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыНакопления.НДСПредъявленный.ПриДобавленииОбработчиковОбновления(Обработчики);
//++ НЕ УТ
	РегистрыНакопления.ТМЦВЭксплуатации.ПриДобавленииОбработчиковОбновления(Обработчики);
//-- НЕ УТ
	РегистрыСведений.ДанныеОснованийСчетовФактур.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ЗаданияКФормированиюДвиженийПоНДС.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.НастройкиСистемыНалогообложения.ПриДобавленииОбработчиковОбновления(Обработчики);
//++ НЕ УТ
	РегистрыСведений.НастройкиУчетаНалогаНаПрибыль.ПриДобавленииОбработчиковОбновления(Обработчики);
//-- НЕ УТ
	РегистрыСведений.НастройкиУчетаНДС.ПриДобавленииОбработчиковОбновленияЛокализация(Обработчики);
	РегистрыСведений.НастройкиУчетаУСН.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.НДССостояниеРеализации0.ПриДобавленииОбработчиковОбновления(Обработчики);
//++ НЕ УТКА
	РегистрыСведений.НематериальныеАктивыМеждународныйУчет.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ОсновныеСредстваМеждународныйУчет.ПриДобавленииОбработчиковОбновления(Обработчики);
//-- НЕ УТКА
//++ НЕ УТ
	РегистрыСведений.ОтражениеДокументовВРеглУчете.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ПараметрыАмортизацииНМАБУ.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ПараметрыАмортизацииОСБУ.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ПорядокОтраженияНаСчетахУчета.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ПорядокУчетаНМАБУ.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.ПорядокУчетаОСБУ.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.СобытияОСОрганизаций.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.СтатусыПроверкиДокументов.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.СчетаРеглУчетаТребующиеНастройки.ПриДобавленииОбработчиковОбновления(Обработчики);
	РегистрыСведений.УчетнаяПолитикаБухУчета.ПриДобавленииОбработчиковОбновления(Обработчики);
//-- НЕ УТ
	РегистрыСведений.УчетнаяПолитикаФинансовогоУчета.ПриДобавленииОбработчиковОбновления(Обработчики);
//++ НЕ УТ
	Справочники.ДрагоценныеМатериалы.ПриДобавленииОбработчиковОбновления(Обработчики);
//-- НЕ УТ
	Справочники.Патенты.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.ПравилаИнтеграцииС1СДокументооборотом.ПриДобавленииОбработчиковОбновления(Обработчики);
//++ НЕ УТКА
	Справочники.СоответствияОборотовМеждународногоУчета.ПриДобавленииОбработчиковОбновления(Обработчики);
	Справочники.СоответствияСчетовМеждународногоУчета.ПриДобавленииОбработчиковОбновления(Обработчики);
//-- НЕ УТКА
//++ НЕ УТ
	Справочники.СпособыОтраженияЗарплатыВБухУчете.ПриДобавленииОбработчиковОбновления(Обработчики);
//-- НЕ УТ
//-- Локализация

КонецПроцедуры

// Позволяет переопределить очередь отложенных обработчиков обновления, выполняемых в
// параллельном режиме. Может понадобиться, когда отложенные обработчики библиотек
// обрабатывают те же данные, что и обработчики основной конфигурации.
// Например, есть обработчики библиотеки и конфигурации, которые обрабатывают справочник
// Контрагенты, при этом обработчик конфигурации должен выполниться раньше, чтобы данные
// обновились корректно. В таком случае в данной процедуре нужно указать новый номер очереди
// для обработчика библиотеки, который будет больше, чем у обработчика конфигурации.
//
// Параметры:
//  ОбработчикИОчередь - Соответствие - где:
//    * Ключ     - Строка - полное имя обработчика обновления.
//    * Значение - Число  - номер очереди, который необходимо установить обработчику.
//
Процедура ПриФормированииОчередейОтложенныхОбработчиков(ОбработчикИОчередь) Экспорт

	//++ Локализация
	//-- Локализация
	Возврат;

КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры
//++ НЕ УТ

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаНаКА(Обработчики) Экспорт
	
	//++ Локализация
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлей";
	Обработчик.Процедура = "ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ПереходСУправлениеТорговлей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлей";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЛокализация.ОбновлениеУТДоКА";
	
	ДобавитьОбработчикиНачальногоЗаполненияЗарплаты(Обработчики);
	//-- Локализация
	
КонецПроцедуры
//++ НЕ УТКА

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаНаУП(Обработчики) Экспорт
	
	//++ Локализация
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлей";
	Обработчик.Процедура = "ПланыОбмена.СинхронизацияДанныхЧерезУниверсальныйФормат.ПереходСУправлениеТорговлей";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлей";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЛокализация.ОбновлениеУТДоERP";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "КомплекснаяАвтоматизация";
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЛокализация.ОбновлениеКАДоERP";
	//-- Локализация
	
КонецПроцедуры
//-- НЕ УТКА
//-- НЕ УТ

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
	
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует
//        указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, 
	Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область ПереименованныеОбъектыМетаданных

// Заполняет переименования объектов метаданных (подсистемы и роли).
// Подробнее см. ОбщегоНазначенияПереопределяемый.ПриДобавленииПереименованийОбъектовМетаданных().
// 
// Параметры:
//   Итог	- Структура - передается в процедуру подсистемой БазоваяФункциональность.
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	ОписаниеПодсистемы = Новый Структура("Имя, Версия, РежимВыполненияОтложенныхОбработчиков");
	ПриДобавленииПодсистемы(ОписаниеПодсистемы);
	
	//++ Локализация
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.3.1.13",
		"Роль.БазовыеПраваЕГАИС",
		"Роль.ВыполнениеСинхронизацииСЕГАИС",
		ОписаниеПодсистемы.Имя);
	//++ НЕ УТ
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.1.1.69",
		"Роль.ПроверкаДокументовПравоИзменения",
		"Роль.ИзменениеРазрешатьИзменятьПроверенныеДокументыПоРеглУчету",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.4.2.32",
		"Роль.ДобавлениеИзменениеПогашенийСтоимостиТМЦВЭксплуатации",
		"Роль.ДобавлениеИзменениеПогашенийСтоимостиТМЦВЭксплуатации",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.4.7.14",
		"Роль.ИзменениеРазрешатьИзменятьПроверенныеДокументыПоРеглУчету",
		"Роль.ИзменениеСтатусыПроверкиДокументов",
		ОписаниеПодсистемы.Имя);
		
	ОбщегоНазначения.ДобавитьПереименование(Итог,
		"2.5.2.10",
		"Роль.ДобавлениеИзменениеРегистрацийНаработокТМЦВЭксплуатации",
		"Роль.ДобавлениеИзменениеНаработкиТМЦВЭксплуатации",
		ОписаниеПодсистемы.Имя);	
		
	//-- НЕ УТ
	//-- Локализация
		
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ЗаполненияПустойИБ

// Обработчик первого запуска УП (ERP).
//
Процедура ПервыйЗапуск() Экспорт
	
	//++ Локализация
	Справочники.КодыВалютныхОпераций.ЗаполнитьПредопределенныеЭлементы();
	ИнициализироватьПоддержкаПлатежейРФ();
	//++ НЕ УТ
	ЗаполнитьКонстантуИспользоватьРеглУчет();
	Справочники.ТипыПлатежейФЗ275.ЗаполнитьПредопределенныеЭлементы();
	ПланыСчетов.Хозрасчетный.ЗаполнитьПредопределенныеНастройки();
	Справочники.ВидыПодтверждающихДокументов.ЗаполнитьПредопределенныеЭлементы();
	УправлениеДоступомЛокализация.УстановитьРодителяПрофилейДоступаЗарплатаИКадры();
	Справочники.ДрагоценныеМатериалы.ЗаполнитьПредопределенныеДрагоценныеМатериалы();
	//++ НЕ УТКА
	Константы.ИсточникСуммыДляПересчетаВВалютуФинОтчетности.Установить(Перечисления.ИсточникиСуммыДляПересчетаВВалютуФинОтчетности.БУ);
	//-- НЕ УТКА
	//-- НЕ УТ
	//-- Локализация
	
КонецПроцедуры
//++ НЕ УТ

Процедура ОбновлениеУТДоКА() Экспорт
	
	//++ Локализация
	УправлениеДоступомЛокализация.УстановитьРодителяПрофилейДоступаЗарплатаИКадры();
	Справочники.ТипыПлатежейФЗ275.ЗаполнитьПредопределенныеЭлементы();
	Справочники.ВидыПодтверждающихДокументов.ЗаполнитьПредопределенныеЭлементы();
	ПланыСчетов.Хозрасчетный.ЗаполнитьПредопределенныеНастройки();
	Справочники.ДрагоценныеМатериалы.ЗаполнитьПредопределенныеДрагоценныеМатериалы();
	
	ОбновитьПовторноИспользуемыеЗначения();
	//-- Локализация
	
КонецПроцедуры

Процедура ОбновлениеУТДоERP() Экспорт
	
	//++ Локализация
	УправлениеДоступомЛокализация.УстановитьРодителяПрофилейДоступаЗарплатаИКадры();
	Справочники.ТипыПлатежейФЗ275.ЗаполнитьПредопределенныеЭлементы();
	Справочники.ВидыПодтверждающихДокументов.ЗаполнитьПредопределенныеЭлементы();
	Справочники.СтатистическиеПоказатели.ЗаполнитьПоставляемымиПравилами();
	Справочники.ДрагоценныеМатериалы.ЗаполнитьПредопределенныеДрагоценныеМатериалы();
	ПланыСчетов.Хозрасчетный.ЗаполнитьПредопределенныеНастройки();
	Константы.ИсточникСуммыДляПересчетаВВалютуФинОтчетности.Установить(Перечисления.ИсточникиСуммыДляПересчетаВВалютуФинОтчетности.БУ);
	ОбновитьПовторноИспользуемыеЗначения();
	//-- Локализация
	
КонецПроцедуры

Процедура ОбновлениеКАДоERP() Экспорт
	
	//++ Локализация
	//++ НЕ УТКА
	Константы.ИсточникСуммыДляПересчетаВВалютуФинОтчетности.Установить(Перечисления.ИсточникиСуммыДляПересчетаВВалютуФинОтчетности.БУ);
	//-- НЕ УТКА
	ОбновитьПовторноИспользуемыеЗначения();
	//-- Локализация
	
КонецПроцедуры
//++ Локализация

// Обработчики инициализации зарплатной подсистемы при переходе с УТ
Процедура ДобавитьОбработчикиНачальногоЗаполненияЗарплаты(Обработчики)
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлей";
	Обработчик.Процедура = "УправлениеСвойствамиСлужебный.СоздатьПредопределенныеНаборыСвойств";
	
	ВсеОбработчикиЗарплаты = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();
	ОбновлениеИнформационнойБазыЗарплатаКадрыБазовый.ПриДобавленииОбработчиковОбновления(ВсеОбработчикиЗарплаты);
	ОбновлениеИнформационнойБазыЗарплатаКадрыРасширенный.ПриДобавленииОбработчиковОбновления(ВсеОбработчикиЗарплаты);
	
	ОбработчикиНачальногоЗаполнения = ВсеОбработчикиЗарплаты.НайтиСтроки(Новый Структура("НачальноеЗаполнение", Истина));
	Для Каждого ОбработчикНачальногоЗаполнения Из ОбработчикиНачальногоЗаполнения Цикл
		Обработчик = Обработчики.Добавить();
		Обработчик.ПредыдущееИмяКонфигурации = "УправлениеТорговлей";
		Обработчик.Процедура = ОбработчикНачальногоЗаполнения.Процедура;
	КонецЦикла;
	
КонецПроцедуры

// Обработчик первого запуска КА.
// Включает константу "ИспользоватьРеглУчет".
//
Процедура ЗаполнитьКонстантуИспользоватьРеглУчет() Экспорт
	
	Если ПолучитьФункциональнуюОпцию("УправлениеТорговлей") Тогда
		Возврат;
	КонецЕсли;
	
	Константы.ИспользоватьРеглУчет.Установить(Истина);
	
КонецПроцедуры

//-- Локализация
//-- НЕ УТ

#КонецОбласти

#Область Прочее

//++ Локализация

// Возвращаемое значение:
// 	Структура Из КлючИЗначение - где:
// 		* Ключ - Строка - 
// 		* Значение - Массив из Строка -
Функция ЗаменяемыеРоли() 	
	
	Возврат Новый Структура();
	
КонецФункции

Процедура ДополнитьПользовательскиеПрофилиРолямиСчетовФактур() Экспорт
	
	ЗаменяемыеРоли = ЗаменяемыеРоли();
	
	// Все роли предоставляющие доступ к счетам-фактурам
	ЗаменяемыеРоли.Вставить("ЧтениеАвансовыхОтчетов",                                          Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеАктовВыполненныхРабот",                                     Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеВозвратовТоваровОтКлиентов",                                Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеДокументовПередачиТоваровМеждуОрганизациями",               Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеДокументовПоУчетуНДС",                                      Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеКорректировокПриобретений",                                 Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеКорректировокРеализаций",                                   Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеОтчетовКомиссионеров",                                      Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеОтчетовКомитенту",                                          Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеПоступленийТоваровНаСклад",                                 Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеПриобретенийТоваровУслугВозвратовПоставщикам",              Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеПриобретенийУслугПрочихАктивов",                            Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеРеализацийТоваровУслуг",                                    Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеРеализацийУслугПрочихАктивов",                              Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеАвансовыхОтчетов",                             Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеАктовВыполненныхРабот",                        Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеВозвратовТоваровОтКлиентов",                   Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеДокументовПередачиТоваровМеждуОрганизациями",  Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеДокументовРегламентированногоУчета",           Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеКорректировокПриобретений",                    Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеКорректировокРеализаций",                      Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеОтчетовКомиссионеров",                         Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеОтчетовКомитенту",                             Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеПоступленийТоваровНаСклад",                    Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеПриобретенийТоваровУслугВозвратовПоставщикам", Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеПриобретенийУслугПрочихАктивов",               Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеРеализацийТоваровУслуг",                       Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеРеализацийУслугПрочихАктивов",                 Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеВыкуповПринятыхНаХранениеТоваров",                          Новый Массив);
	ЗаменяемыеРоли.Вставить("ЧтениеВыкуповТоваровХранителем",                                  Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеВыкуповПринятыхНаХранениеТоваров",             Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеВыкуповТоваровХранителем",                     Новый Массив);
	//++ НЕ УТ
	ЗаменяемыеРоли.Вставить("ЧтениеДокументовПоПроизводствуНаСтороне",                         Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеОтчетовПереработчиков",                        Новый Массив);
	//++ НЕ УТКА
	ЗаменяемыеРоли.Вставить("ЧтениеДокументовПоПереработкеДавальческогоСырья",                 Новый Массив);
	ЗаменяемыеРоли.Вставить("ДобавлениеИзменениеОтчетовДавальцам",                             Новый Массив);
	//-- НЕ УТКА
	//-- НЕ УТ
	
	// Добавляем саму роль, чтобы не удалилась
	Для Каждого КлючИЗначение Из ЗаменяемыеРоли Цикл
		КлючИЗначение.Значение.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	#Область Доступ_к_счетам_фактурам_выданным
	ЗаменяемыеРоли.ЧтениеАктовВыполненныхРабот.Добавить("ЧтениеСчетовФактурВыданных");
	ЗаменяемыеРоли.ЧтениеДокументовПередачиТоваровМеждуОрганизациями.Добавить("ЧтениеСчетовФактурВыданных");
	ЗаменяемыеРоли.ЧтениеДокументовПоУчетуНДС.Добавить("ЧтениеСчетовФактурВыданных");
	ЗаменяемыеРоли.ЧтениеКорректировокРеализаций.Добавить("ЧтениеСчетовФактурВыданных");
	ЗаменяемыеРоли.ЧтениеОтчетовКомиссионеров.Добавить("ЧтениеСчетовФактурВыданных");
	ЗаменяемыеРоли.ЧтениеОтчетовКомитенту.Добавить("ЧтениеСчетовФактурВыданных");
	ЗаменяемыеРоли.ЧтениеПоступленийТоваровНаСклад.Добавить("ЧтениеСчетовФактурВыданных");
	ЗаменяемыеРоли.ЧтениеПриобретенийТоваровУслугВозвратовПоставщикам.Добавить("ЧтениеСчетовФактурВыданных");
	ЗаменяемыеРоли.ЧтениеРеализацийТоваровУслуг.Добавить("ЧтениеСчетовФактурВыданных");
	ЗаменяемыеРоли.ЧтениеРеализацийУслугПрочихАктивов.Добавить("ЧтениеСчетовФактурВыданных");
	ЗаменяемыеРоли.ДобавлениеИзменениеАктовВыполненныхРабот.Добавить("ДобавлениеИзменениеСчетовФактурВыданных");
	ЗаменяемыеРоли.ДобавлениеИзменениеДокументовПередачиТоваровМеждуОрганизациями.Добавить("ДобавлениеИзменениеСчетовФактурВыданных");
	ЗаменяемыеРоли.ДобавлениеИзменениеДокументовРегламентированногоУчета.Добавить("ДобавлениеИзменениеСчетовФактурВыданных");
	ЗаменяемыеРоли.ДобавлениеИзменениеКорректировокРеализаций.Добавить("ДобавлениеИзменениеСчетовФактурВыданных");
	ЗаменяемыеРоли.ДобавлениеИзменениеОтчетовКомиссионеров.Добавить("ДобавлениеИзменениеСчетовФактурВыданных");
	ЗаменяемыеРоли.ДобавлениеИзменениеОтчетовКомитенту.Добавить("ДобавлениеИзменениеСчетовФактурВыданных");
	ЗаменяемыеРоли.ДобавлениеИзменениеПоступленийТоваровНаСклад.Добавить("ДобавлениеИзменениеСчетовФактурВыданных");
	ЗаменяемыеРоли.ДобавлениеИзменениеПриобретенийТоваровУслугВозвратовПоставщикам.Добавить("ДобавлениеИзменениеСчетовФактурВыданных");
	ЗаменяемыеРоли.ДобавлениеИзменениеРеализацийТоваровУслуг.Добавить("ДобавлениеИзменениеСчетовФактурВыданных");
	ЗаменяемыеРоли.ДобавлениеИзменениеРеализацийУслугПрочихАктивов.Добавить("ДобавлениеИзменениеСчетовФактурВыданных");
	ЗаменяемыеРоли.ЧтениеВыкуповТоваровХранителем.Добавить("ЧтениеСчетовФактурВыданных");
	ЗаменяемыеРоли.ДобавлениеИзменениеВыкуповТоваровХранителем.Добавить("ДобавлениеИзменениеСчетовФактурВыданных");
	//++ НЕ УТ
	//++ НЕ УТКА
	ЗаменяемыеРоли.ЧтениеДокументовПоПереработкеДавальческогоСырья.Добавить("ЧтениеСчетовФактурВыданных");
	ЗаменяемыеРоли.ДобавлениеИзменениеОтчетовДавальцам.Добавить("ДобавлениеИзменениеСчетовФактурВыданных");
	//-- НЕ УТКА
	//-- НЕ УТ
	#КонецОбласти
	
	#Область Доступ_к_счетам_фактурам_выданным_на_аванс
	ЗаменяемыеРоли.ЧтениеДокументовПоУчетуНДС.Добавить("ЧтениеСчетовФактурВыданныхНаАванс");
	ЗаменяемыеРоли.ДобавлениеИзменениеДокументовРегламентированногоУчета.Добавить("ДобавлениеИзменениеСчетовФактурВыданныхНаАванс");
	#КонецОбласти
	
	#Область Доступ_к_счетам_фактурам_комиссионеру
	ЗаменяемыеРоли.ДобавлениеИзменениеОтчетовКомитенту.Добавить("ЧтениеСчетовФактурКомиссионеру");
	ЗаменяемыеРоли.ЧтениеДокументовПоУчетуНДС.Добавить("ЧтениеСчетовФактурКомиссионеру");
	ЗаменяемыеРоли.ДобавлениеИзменениеДокументовПередачиТоваровМеждуОрганизациями.Добавить("ДобавлениеИзменениеСчетовФактурКомиссионеру");
	ЗаменяемыеРоли.ДобавлениеИзменениеДокументовРегламентированногоУчета.Добавить("ДобавлениеИзменениеСчетовФактурКомиссионеру");
	ЗаменяемыеРоли.ДобавлениеИзменениеОтчетовКомиссионеров.Добавить("ДобавлениеИзменениеСчетовФактурКомиссионеру");
	#КонецОбласти
	
	#Область Доступ_к_счетам_фактурам_комитента
	ЗаменяемыеРоли.ЧтениеДокументовПоУчетуНДС.Добавить("ЧтениеСчетовФактурКомитента");
	ЗаменяемыеРоли.ДобавлениеИзменениеДокументовРегламентированногоУчета.Добавить("ДобавлениеИзменениеСчетовФактурКомитента");
	ЗаменяемыеРоли.ДобавлениеИзменениеОтчетовКомитенту.Добавить("ДобавлениеИзменениеСчетовФактурКомитента");
	#КонецОбласти
	
	#Область Доступ_к_счетам_фактурам_налогового_агента
	ЗаменяемыеРоли.ЧтениеДокументовПоУчетуНДС.Добавить("ЧтениеСчетовФактурНалоговогоАгента");
	ЗаменяемыеРоли.ДобавлениеИзменениеДокументовРегламентированногоУчета.Добавить("ДобавлениеИзменениеСчетовФактурНалоговогоАгента");
	#КонецОбласти
	
	#Область Доступ_к_счетам_фактурам_на_неподтвержденную_реализацию_0
	ЗаменяемыеРоли.ЧтениеДокументовПоУчетуНДС.Добавить("ЧтениеСчетовФактурНаНеподтвержденнуюРеализацию0");
	ЗаменяемыеРоли.ДобавлениеИзменениеДокументовРегламентированногоУчета.Добавить("ДобавлениеИзменениеСчетовФактурНаНеподтвержденнуюРеализацию0");
	#КонецОбласти
	
	#Область Доступ_к_счетам_фактурам_полученным
	ЗаменяемыеРоли.ЧтениеАвансовыхОтчетов.Добавить("ЧтениеСчетовФактурПолученных");
	ЗаменяемыеРоли.ЧтениеВозвратовТоваровОтКлиентов.Добавить("ЧтениеСчетовФактурПолученных");
	ЗаменяемыеРоли.ЧтениеВыкуповПринятыхНаХранениеТоваров.Добавить("ЧтениеСчетовФактурПолученных");
	ЗаменяемыеРоли.ДобавлениеИзменениеВыкуповПринятыхНаХранениеТоваров.Добавить("ДобавлениеИзменениеСчетовФактурПолученных");
	
	//++ НЕ УТ
	ЗаменяемыеРоли.ЧтениеДокументовПоПроизводствуНаСтороне.Добавить("ЧтениеСчетовФактурПолученных");
	ЗаменяемыеРоли.ДобавлениеИзменениеОтчетовПереработчиков.Добавить("ДобавлениеИзменениеСчетовФактурПолученных");
	//-- НЕ УТ
	ЗаменяемыеРоли.ЧтениеДокументовПередачиТоваровМеждуОрганизациями.Добавить("ЧтениеСчетовФактурПолученных");
	ЗаменяемыеРоли.ЧтениеДокументовПоУчетуНДС.Добавить("ЧтениеСчетовФактурПолученных");
	ЗаменяемыеРоли.ЧтениеКорректировокПриобретений.Добавить("ЧтениеСчетовФактурПолученных");
	ЗаменяемыеРоли.ЧтениеОтчетовКомиссионеров.Добавить("ЧтениеСчетовФактурПолученных");
	ЗаменяемыеРоли.ЧтениеПоступленийТоваровНаСклад.Добавить("ЧтениеСчетовФактурПолученных");
	ЗаменяемыеРоли.ЧтениеПриобретенийТоваровУслугВозвратовПоставщикам.Добавить("ЧтениеСчетовФактурПолученных");
	ЗаменяемыеРоли.ЧтениеПриобретенийУслугПрочихАктивов.Добавить("ЧтениеСчетовФактурПолученных");
	ЗаменяемыеРоли.ДобавлениеИзменениеАвансовыхОтчетов.Добавить("ДобавлениеИзменениеСчетовФактурПолученных");
	ЗаменяемыеРоли.ДобавлениеИзменениеВозвратовТоваровОтКлиентов.Добавить("ДобавлениеИзменениеСчетовФактурПолученных");
	ЗаменяемыеРоли.ДобавлениеИзменениеДокументовПередачиТоваровМеждуОрганизациями.Добавить("ДобавлениеИзменениеСчетовФактурПолученных");
	ЗаменяемыеРоли.ДобавлениеИзменениеДокументовРегламентированногоУчета.Добавить("ДобавлениеИзменениеСчетовФактурПолученных");
	ЗаменяемыеРоли.ДобавлениеИзменениеКорректировокПриобретений.Добавить("ДобавлениеИзменениеСчетовФактурПолученных");
	ЗаменяемыеРоли.ДобавлениеИзменениеОтчетовКомиссионеров.Добавить("ДобавлениеИзменениеСчетовФактурПолученных");
	ЗаменяемыеРоли.ДобавлениеИзменениеПоступленийТоваровНаСклад.Добавить("ДобавлениеИзменениеСчетовФактурПолученных");
	ЗаменяемыеРоли.ДобавлениеИзменениеПриобретенийТоваровУслугВозвратовПоставщикам.Добавить("ДобавлениеИзменениеСчетовФактурПолученных");
	ЗаменяемыеРоли.ДобавлениеИзменениеПриобретенийУслугПрочихАктивов.Добавить("ДобавлениеИзменениеСчетовФактурПолученных");
	#КонецОбласти
	
	#Область Доступ_к_счетам_фактурам_полученным_на_аванс
	ЗаменяемыеРоли.ЧтениеДокументовПоУчетуНДС.Добавить("ЧтениеСчетовФактурПолученныхНаАванс");
	ЗаменяемыеРоли.ДобавлениеИзменениеДокументовРегламентированногоУчета.Добавить("ДобавлениеИзменениеСчетовФактурПолученныхНаАванс");
	#КонецОбласти
	
	#Область Доступ_к_счетам_фактурам_полученным_от_налогового_агента
	ЗаменяемыеРоли.ЧтениеВозвратовТоваровОтКлиентов.Добавить("ЧтениеСчетовФактурПолученныхНалоговогоАгента");
	ЗаменяемыеРоли.ЧтениеКорректировокПриобретений.Добавить("ЧтениеСчетовФактурПолученныхНалоговогоАгента");
	ЗаменяемыеРоли.ДобавлениеИзменениеДокументовРегламентированногоУчета.Добавить("ДобавлениеИзменениеСчетовФактурПолученныхНалоговогоАгента");
	ЗаменяемыеРоли.ДобавлениеИзменениеКорректировокПриобретений.Добавить("ДобавлениеИзменениеСчетовФактурПолученныхНалоговогоАгента");
	ЗаменяемыеРоли.ДобавлениеИзменениеПриобретенийТоваровУслугВозвратовПоставщикам.Добавить("ДобавлениеИзменениеСчетовФактурПолученныхНалоговогоАгента");
	#КонецОбласти
	
	УправлениеДоступом.ЗаменитьРолиВПрофилях(ЗаменяемыеРоли);
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновленияЛокализация(Обработчики) Экспорт

#Область ВыводИзОборотаИСМП_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЛокализация.ВыводИзОборотаИСМП_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.4.65";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a754b849-ce84-49bf-b6f7-ec4d648e35c2");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыЛокализация.ВыводИзОборотаИСМП_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит ""Ставка НДС""';
									|en = 'Fills in ""VAT rate"" attribute'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ВыводИзОборотаИСМП.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.СтавкиНДС.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Документы.ВыводИзОборотаИСМП.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Документы.ВыводИзОборотаИСМП.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "МультиязычностьСервер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Патенты.ДобавитьПродажаПоПатентуВСтавкуБезНДС";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область ДатаНачалаПримененияСводныхСправок_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЛокализация.ДатаНачалаПримененияСводныхСправок_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.3.19";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ae7016cf-c3e5-4efd-99e6-545a38b7ef75");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыЛокализация.ДатаНачалаПримененияСводныхСправок_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Установка константы ДатаНачалаПримененияСводныхСправок';
									|en = 'Setup of the constant ДатаНачалаПримененияСводныхСправок'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Константы.ДатаНачалаПримененияСводныхСправок.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ДатаНачалаПримененияСводныхСправок.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Константы.ДатаНачалаПримененияСводныхСправок.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

#КонецОбласти

#Область ДополнитьПользовательскиеПрофилиРолямиСчетовФактур

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЛокализация.ДополнитьПользовательскиеПрофилиРолямиСчетовФактур";
	Обработчик.Версия = "2.5.2.16";
	Обработчик.РежимВыполнения = "Оперативно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("51ce4c39-f98d-4c4c-8c78-468791f2e8b3");
	Обработчик.Комментарий = НСтр("ru = 'Дополняет пользовательские профили групп доступа новыми ролями для счетов-фактур.';
									|en = 'Adds new roles for tax invoices to user profiles of access groups.'");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ПрофилиГруппДоступа.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

#КонецОбласти

#Область ИнициализироватьЛокализацияРФ

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЛокализация.ИнициализироватьЛокализацияРФ";
	Обработчик.Версия = "2.5.6.197";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("c67f9a6a-272c-4471-8550-55c1ca9ebc55");
	Обработчик.Комментарий = НСтр("ru = 'Задается значение по умолчанию для константы ЛокализацияРФ.';
									|en = 'Default value for the ЛокализацияРФ constant is specified.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Константы.ЛокализацияРФ.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ЛокализацияРФ.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

#КонецОбласти

#Область ИнициализироватьПоддержкаПлатежейРФ

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЛокализация.ИнициализироватьПоддержкаПлатежейРФ";
	Обработчик.Версия = "2.5.6.197";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("975c0e15-27f1-4b29-af8f-98978da2c0e0");
	Обработчик.Комментарий = НСтр("ru = 'Задается значение по умолчанию для константы ПоддержкаПлатежейРФ.';
									|en = 'Default value for the ПоддержкаПлатежейРФ constant is specified.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Константы.ПоддержкаПлатежейРФ.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ПоддержкаПлатежейРФ.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

#КонецОбласти

#Область ИспользоватьАктыРасхожденийКорректировки_ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЛокализация.ИспользоватьАктыРасхожденийКорректировки_ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.6.58";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("429ad8b8-7129-4e3e-a152-21ddf2a1dfa5");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "ОбновлениеИнформационнойБазыЛокализация.ИспользоватьАктыРасхожденийКорректировки_ОбработатьДанныеДляПереходаНаНовуюВерсию_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Анализирует использование учета по маркируемой продукции и заполняется связанные константы для использования актов о расхождниях и корректировочных документов при отгрузке и поступлении';
									|en = 'Analyzes the use of accounting for marked products and populates related constants for the use of discrepancy reports and adjustment documents upon shipment and receipt'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Константы.ВестиУчетМаркируемойПродукцииИСМП.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеОтгрузкиПоВозвратам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеОтгрузкиПоРеализациям.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеПриемкиПоВозвратам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеПриемкиПоПриобретениям.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьКорректировкиПриобретений.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Константы.ИспользоватьКорректировкиРеализаций.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеОтгрузкиПоВозвратам.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеОтгрузкиПоРеализациям.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеПриемкиПоВозвратам.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеПриемкиПоПриобретениям.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьКорректировкиПриобретений.ПолноеИмя());
	Изменяемые.Добавить(Метаданные.Константы.ИспользоватьКорректировкиРеализаций.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеОтгрузкиПоВозвратам.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеОтгрузкиПоРеализациям.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеПриемкиПоВозвратам.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Константы.ИспользоватьАктыРасхожденийПослеПриемкиПоПриобретениям.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Константы.ИспользоватьКорректировкиПриобретений.ПолноеИмя());
	Блокируемые.Добавить(Метаданные.Константы.ИспользоватьКорректировкиРеализаций.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");

#КонецОбласти

#Область ПервыйЗапуск

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "ОбновлениеИнформационнойБазыЛокализация.ПервыйЗапуск";
	Обработчик.Версия = "";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Комментарий = "";

#КонецОбласти

КонецПроцедуры

Процедура ИнициализироватьЛокализацияРФ() Экспорт
	
	Если Константы.ЛокализацияРФ.Получить() = Ложь Тогда
		МенеджерЗначения = Константы.ЛокализацияРФ.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Истина;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьПоддержкаПлатежейРФ() Экспорт
	
	Если Константы.ПоддержкаПлатежейРФ.Получить() = Ложь Тогда
		МенеджерЗначения = Константы.ПоддержкаПлатежейРФ.СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = Истина;
		
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	
КонецПроцедуры

#Область УстановкаКонстанты_ДатаНачалаПримененияСводныхСправок

Процедура ДатаНачалаПримененияСводныхСправок_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура ДатаНачалаПримененияСводныхСправок_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МенеджерЗначения = Константы.ДатаНачалаПримененияСводныхСправок.СоздатьМенеджерЗначения();
	МенеджерЗначения.Прочитать();
	Если Не ЗначениеЗаполнено(МенеджерЗначения.Значение) Тогда
		МенеджерЗначения.Значение = ДобавитьМесяц(НачалоКвартала(ТекущаяДатаСеанса()),3); // начало следующего квартала
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	Параметры.ОбработкаЗавершена = Истина
	
КонецПроцедуры

#КонецОбласти
//++ НЕ УТ

#Область УстановкаКонстанты_ДатаНачалаПризнанияДоходовОтчетомОРозничныхПродажах

Процедура ДатаНачалаПризнанияДоходовОтчетомОРозничныхПродажах_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура ДатаНачалаПризнанияДоходовОтчетомОРозничныхПродажах_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МенеджерЗначения = Константы.ДатаНачалаПризнанияДоходовОтчетомОРозничныхПродажах.СоздатьМенеджерЗначения();
	Запрос = Новый Запрос;
	МассивТекстовЗапроса = Новый Массив;
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОрганизацииНаУСН.Организация КАК Организация,
	|	ОрганизацииНаУСН.Период КАК НачалоПериода,
	|	МИНИМУМ(ЕСТЬNULL(ОстальныеОрганизации.Период, ДАТАВРЕМЯ(2120, 1, 1))) КАК КонецПериода
	|ПОМЕСТИТЬ ВТДанныеПоОрганизациямНаУСН
	|ИЗ
	|	РегистрСведений.НастройкиСистемыНалогообложения КАК ОрганизацииНаУСН
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСистемыНалогообложения КАК ОстальныеОрганизации
	|		ПО ОрганизацииНаУСН.Организация = ОстальныеОрганизации.Организация
	|			И ОрганизацииНаУСН.Период < ОстальныеОрганизации.Период
	|			И (НЕ ОстальныеОрганизации.ПрименяетсяУСН)
	|ГДЕ
	|	ОрганизацииНаУСН.ПрименяетсяУСН
	|
	|СГРУППИРОВАТЬ ПО
	|	ОрганизацииНаУСН.Организация,
	|	ОрганизацииНаУСН.Период
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация";
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	МАКСИМУМ(ЕСТЬNULL(ВложенныйЗапрос.Дата, ДАТАВРЕМЯ(1,1,1))) КАК Дата
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		МАКСИМУМ(КнигаУчетаДоходовИРасходов.Период) КАК Дата
	|	ИЗ
	|		РегистрНакопления.КнигаУчетаДоходовИРасходов КАК КнигаУчетаДоходовИРасходов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПриходныйКассовыйОрдер КАК ПриходныйКассовыйОрдер
	|			ПО (ПриходныйКассовыйОрдер.Ссылка = КнигаУчетаДоходовИРасходов.Регистратор)
	|				И (ПриходныйКассовыйОрдер.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзКассыККМ)
	|					ИЛИ ПриходныйКассовыйОрдер.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ПоступлениеДенежныхСредствИзДругойКассы)
	|						И ПриходныйКассовыйОрдер.КассаОтправитель ССЫЛКА Справочник.КассыККМ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		МАКСИМУМ(ОтчетОРозничныхПродажах.Дата)
	|	ИЗ
	|		ВТДанныеПоОрганизациямНаУСН КАК ОрганизациямНаУСН
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ОтчетОРозничныхПродажах КАК ОтчетОРозничныхПродажах
	|			ПО ОрганизациямНаУСН.Организация = ОтчетОРозничныхПродажах.Организация
	|				И (ОтчетОРозничныхПродажах.Дата >= ОрганизациямНаУСН.НачалоПериода)
	|				И (ОтчетОРозничныхПродажах.Дата < ОрганизациямНаУСН.КонецПериода)) КАК ВложенныйЗапрос";
	МассивТекстовЗапроса.Добавить(ТекстЗапроса);
	Запрос.Текст = СтрСоединить(МассивТекстовЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		НовоеЗначение = ?(ЗначениеЗаполнено(Выборка.Дата), ДобавитьМесяц(НачалоМесяца(Выборка.Дата),1), Выборка.Дата); // начало следующего месяца
		МенеджерЗначения.Значение = НовоеЗначение;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
	КонецЕсли;
	Параметры.ОбработкаЗавершена = Истина
	
КонецПроцедуры

#КонецОбласти
//-- НЕ УТ

#Область ВыводИзОборотаИСМП_ЗаполнениеРеквизитаСтавкаНДС

Процедура ВыводИзОборотаИСМП_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Документ.ВыводИзОборотаИСМП";
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Дата УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыводИзОборотаИСМПТовары.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ВыводИзОборотаИСМП.Товары КАК ВыводИзОборотаИСМПТовары
	|ГДЕ
	|	НЕ ВыводИзОборотаИСМПТовары.СтавкаНДС ССЫЛКА Справочник.СтавкиНДС";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ВыводИзОборотаИСМП_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "Документ.ВыводИзОборотаИСМП";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Для Каждого Документ Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", Документ.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			ДокументОбъект = Документ.Ссылка.ПолучитьОбъект();
			
			ОбъектИзменен = Ложь;
			
			Если ДокументОбъект <> Неопределено Тогда
				
				Для Каждого СтрокаТЧ Из ДокументОбъект.Товары Цикл
					Если ТипЗнч(СтрокаТЧ.СтавкаНДС) <> Тип("СправочникСсылка.СтавкиНДС") Тогда
						СтрокаТЧ.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(СтрокаТЧ.СтавкаНДС);
						ОбъектИзменен = Истина;
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			Если ОбъектИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(ДокументОбъект);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ДокументОбъект.Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Документ.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#Область УстановкаКонстанты_ИспользоватьАктыРасхожденийКорректировки

Процедура ИспользоватьАктыРасхожденийКорректировки_ОбработатьДанныеДляПереходаНаНовуюВерсию_ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	// Регистрация не требуется
	Возврат;
	
КонецПроцедуры

Процедура ИспользоватьАктыРасхожденийКорректировки_ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИспользоватьАктыРасхожденийПослеОтгрузкиПоРеализациям.Значение  КАК ИспользоватьАктыПоРеализациям,
	|	ИспользоватьАктыРасхожденийПослеПриемкиПоПриобретениям.Значение КАК ИспользоватьАктыПоПриобретениям,
	|	ИспользоватьКорректировкиПриобретений.Значение                  КАК ИспользоватьКорректировкиПриобретений,
	|	ИспользоватьКорректировкиРеализаций.Значение                    КАК ИспользоватьКорректировкиРеализаций,
	|	ИспользоватьАктыРасхожденийПослеОтгрузкиПоВозвратам.Значение    КАК ИспользоватьАктыРасхожденийПоВозвратамПослеОтгрузки,
	|	ИспользоватьАктыРасхожденийПослеПриемкиПоВозвратам.Значение     КАК ИспользоватьАктыРасхожденийПоВозвратамПослеПриемки
	|ИЗ
	|	Константа.ИспользоватьАктыРасхожденийПослеОтгрузкиПоРеализациям КАК
	|		ИспользоватьАктыРасхожденийПослеОтгрузкиПоРеализациям,
	|	Константа.ВестиУчетМаркируемойПродукцииИСМП КАК ВестиУчетМаркируемойПродукцииИСМП,
	|	Константа.ИспользоватьАктыРасхожденийПослеПриемкиПоПриобретениям КАК
	|		ИспользоватьАктыРасхожденийПослеПриемкиПоПриобретениям,
	|	Константа.ИспользоватьКорректировкиПриобретений КАК ИспользоватьКорректировкиПриобретений,
	|	Константа.ИспользоватьКорректировкиРеализаций КАК ИспользоватьКорректировкиРеализаций,
	|	Константа.ИспользоватьАктыРасхожденийПослеОтгрузкиПоВозвратам КАК
	|		ИспользоватьАктыРасхожденийПослеОтгрузкиПоВозвратам,
	|	Константа.ИспользоватьАктыРасхожденийПослеПриемкиПоВозвратам КАК ИспользоватьАктыРасхожденийПослеПриемкиПоВозвратам
	|ГДЕ
	|	(ВестиУчетМаркируемойПродукцииИСМП.Значение)
	|	И НЕ (ИспользоватьАктыРасхожденийПослеОтгрузкиПоРеализациям.Значение
	|	И ИспользоватьАктыРасхожденийПослеПриемкиПоПриобретениям.Значение
	|	И ИспользоватьКорректировкиПриобретений.Значение
	|	И ИспользоватьКорректировкиРеализаций.Значение
	|	И ИспользоватьАктыРасхожденийПослеОтгрузкиПоВозвратам.Значение
	|	И ИспользоватьАктыРасхожденийПослеПриемкиПоВозвратам.Значение)";
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		НачатьТранзакцию();
		Попытка
			
			Если Не Выборка.ИспользоватьАктыПоРеализациям Тогда
				МенеджерЗначения = Константы.ИспользоватьАктыРасхожденийПослеОтгрузкиПоРеализациям.СоздатьМенеджерЗначения();
				МенеджерЗначения.Значение = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
			КонецЕсли;
			
			Если Не Выборка.ИспользоватьАктыПоПриобретениям Тогда
				МенеджерЗначения = Константы.ИспользоватьАктыРасхожденийПослеПриемкиПоПриобретениям.СоздатьМенеджерЗначения();
				МенеджерЗначения.Значение = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
			КонецЕсли;
			
			Если Не Выборка.ИспользоватьАктыРасхожденийПоВозвратамПослеОтгрузки Тогда
				МенеджерЗначения = Константы.ИспользоватьАктыРасхожденийПослеОтгрузкиПоВозвратам.СоздатьМенеджерЗначения();
				МенеджерЗначения.Значение = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
			КонецЕсли;
			
			Если Не Выборка.ИспользоватьАктыРасхожденийПоВозвратамПослеПриемки Тогда
				МенеджерЗначения = Константы.ИспользоватьАктыРасхожденийПослеПриемкиПоВозвратам.СоздатьМенеджерЗначения();
				МенеджерЗначения.Значение = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
			КонецЕсли;
			
			Если Не Выборка.ИспользоватьКорректировкиПриобретений Тогда
				МенеджерЗначения = Константы.ИспользоватьКорректировкиПриобретений.СоздатьМенеджерЗначения();
				МенеджерЗначения.Значение = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
			КонецЕсли;
			
			Если Не Выборка.ИспользоватьКорректировкиРеализаций Тогда
				МенеджерЗначения = Константы.ИспользоватьКорректировкиРеализаций.СоздатьМенеджерЗначения();
				МенеджерЗначения.Значение = Истина;
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(МенеджерЗначения);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ТекстСообщения = НСтр("ru = 'Не удалось включить использование актов о расхождениях или корректировок при использовании маркируемой продукции: %Причина%';
									|en = 'Cannot enable the use of discrepancy reports or adjustments when using marked products: %Причина%'",
				ОбщегоНазначения.КодОсновногоЯзыка());
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Причина%", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,,,
				ТекстСообщения);
				
			Возврат;
			
		КонецПопытки;
		
	КонецЕсли;
	
	Параметры.ОбработкаЗавершена = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
//-- Локализация

#КонецОбласти

#КонецОбласти
