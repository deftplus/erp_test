////////////////////////////////////////////////////////////////////////////////
// Модуль содержит методы, используемые обработчиками событий модулей объектов
// финансовых инструментов
//  
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

Процедура ОбновитьКолонкиЗадолженности(Таблица, ОписаниеГрафика, СортироватьТаблицу = Истина) Экспорт
	
	Если СортироватьТаблицу Тогда
		Таблица.Сортировать("Дата");
	КонецЕсли;
	
	Для Каждого ТекСекцияГрафика Из ОписаниеГрафика Цикл
		
		ОписаниеСекции = ТекСекцияГрафика.Значение;
		Остаток = 0;
		
		Для Каждого ТекСтрокаТаблицы Из Таблица Цикл
			Остаток = Остаток + ТекСтрокаТаблицы[ОписаниеСекции.КолонкаПриход] - ТекСтрокаТаблицы[ОписаниеСекции.КолонкаРасход];
			ТекСтрокаТаблицы[ОписаниеСекции.КолонкаОстаток] = Остаток;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаИзмененияБазыИзГрафика(ГрафикРасчетов, Знач ОписаниеГрафика, Знач СекцияОписанияОсновнойДолг = Неопределено) Экспорт
	
	Если СекцияОписанияОсновнойДолг = Неопределено Тогда
		СекцияОписанияОсновнойДолг = ОписаниеГрафика["ОсновнойДолг"];
	КонецЕсли;
	
	ОперацииИзмененияБазы = НовыйОперацииИзмененияБазы();
	
	СтруктураПоиска = Новый Структура("ЭлементСтруктурыЗадолженности");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, СекцияОписанияОсновнойДолг);
	СтрокиГрафика = ГрафикРасчетов.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого ТекСтрокаГрафика Из СтрокиГрафика Цикл
		
		НовОперацияИзмененияБазы = ОперацииИзмененияБазы.Добавить();
		НовОперацияИзмененияБазы.Дата = ТекСтрокаГрафика.Дата;
		
		Если ТекСтрокаГрафика.КолонкаСекции = Перечисления.ВидыДвиженийПриходРасход.Приход Тогда
			НовОперацияИзмененияБазы.Приход = ТекСтрокаГрафика.Сумма;
		Иначе
			НовОперацияИзмененияБазы.Расход = ТекСтрокаГрафика.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	ОперацииИзмененияБазы.Свернуть("Дата","Приход,Расход");
	
	Возврат ОперацииИзмененияБазы;
	
КонецФункции

Функция ТаблицаИзмененияБазы(Сумма, ДатаНачала, ДатаОкончания) Экспорт

	ОперацииИзмененияБазы = НовыйОперацииИзмененияБазы();
	
	Строка1 = ОперацииИзмененияБазы.Добавить();
	Строка1.Дата = ДатаНачала;
	Строка1.Приход = Сумма;
	
	Строка2 = ОперацииИзмененияБазы.Добавить();
	Строка2.Дата = ДатаОкончания;
	Строка2.Расход = Сумма;
	
	
	Возврат ОперацииИзмененияБазы;

КонецФункции // ТаблицаИзмененияБазы()

Процедура ОбновитьОсновнойДолгПоДаннымОбъекта(Объект, Знач ОписаниеГрафика, Знач СекцияОписанияГрафика = Неопределено, Знач ДанныеЗаполнения = Неопределено, Знач ОперацииГрафика = Неопределено) Экспорт
	
	Если СекцияОписанияГрафика = Неопределено Тогда
		СекцияОписанияГрафика = ОписаниеГрафика["ОсновнойДолг"];
	КонецЕсли;
	
	Если ДанныеЗаполнения = Неопределено Тогда
		ДанныеЗаполнения = Объект;
	КонецЕсли;
	
	КолонкаПриход = СекцияОписанияГрафика.КолонкаПриход;
	КолонкаРасход = СекцияОписанияГрафика.КолонкаРасход;
	
	СтрокиОсновногоДолга = СтрокиСекцииГрафика(Объект.ГрафикРасчетов, СекцияОписанияГрафика);
	
	РабочаяТаблицаГрафика = Объект.ГрафикРасчетов.Выгрузить(СтрокиОсновногоДолга);
	РабочаяТаблицаГрафика.Сортировать("Дата");
	
	КоличествоСтрокРабочейТаблицы = РабочаяТаблицаГрафика.Количество();
	
	ИтогоПриход = 0;
	ИтогоРасход = 0;
	
	Для Сч = 1 По КоличествоСтрокРабочейТаблицы Цикл
		
		ТекСтрокаГрафика = РабочаяТаблицаГрафика[КоличествоСтрокРабочейТаблицы - Сч];
		
		Если ТекСтрокаГрафика.Дата <= ДанныеЗаполнения.ДатаНачалаДействия
			Или ТекСтрокаГрафика.Дата >= ДанныеЗаполнения.ДатаОкончанияДействия Тогда
			
			// Суммы, которые выходят за границы действия инструмента, надо удалить
			РабочаяТаблицаГрафика.Удалить(ТекСтрокаГрафика);
			
		Иначе
			
			Если ЭтоСтрокаПриходнойКолонкиГрафика(ТекСтрокаГрафика) Тогда
				ИтогоПриход = ИтогоПриход + ТекСтрокаГрафика.Сумма;
			Иначе
				ИтогоРасход = ИтогоРасход + ТекСтрокаГрафика.Сумма;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// На случай пролонгации инструмента, поставим последний возврат на крайнюю дату.
	// Учтем, что мы уже отсортировали график по дате.
	Если ИтогоРасход = ДанныеЗаполнения.Сумма Тогда
		
		ДатаПоследнегоВозврата = Дата(1,1,1);
		КоличествоСтрокРабочейТаблицы = РабочаяТаблицаГрафика.Количество();
		
		Для Сч = 1 По КоличествоСтрокРабочейТаблицы Цикл
			ТекСтрокаГрафика = РабочаяТаблицаГрафика[КоличествоСтрокРабочейТаблицы - Сч];
			Если Не ЭтоСтрокаПриходнойКолонкиГрафика(ТекСтрокаГрафика) Тогда
				Если ТекСтрокаГрафика.Дата >= ДатаПоследнегоВозврата Тогда
					ДатаПоследнегоВозврата = ТекСтрокаГрафика.Дата;
					ТекСтрокаГрафика.Дата = ДанныеЗаполнения.ДатаОкончанияДействия;
				Иначе
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	КРаспределениюПриход = ДанныеЗаполнения.Сумма - ИтогоПриход;
	КРаспределениюРасход = ДанныеЗаполнения.Сумма - ИтогоРасход;
	
	Если КРаспределениюПриход > 0  Тогда
		// Сумма увеличилась. Добавим значение.
		СтруктураПоиска = Новый Структура("КолонкаСекции,Дата", Перечисления.ВидыДвиженийПриходРасход.Приход, ДанныеЗаполнения.ДатаНачалаДействия);
		СтрокиПервойВыборки = РабочаяТаблицаГрафика.НайтиСтроки(СтруктураПоиска);
		Если СтрокиПервойВыборки.Количество() Тогда
			СтрокиПервойВыборки[0].Сумма = СтрокиПервойВыборки[0].Сумма +  КРаспределениюПриход
		Иначе
			
			РаботаСДоговорамиКонтрагентовУХ.ДобавитьПозициюВГрафик(РабочаяТаблицаГрафика, 
																	КРаспределениюПриход, 
																	ДанныеЗаполнения.ДатаНачалаДействия,, 
																	?(ОперацииГрафика = Неопределено, Неопределено, ОперацииГрафика[СекцияОписанияГрафика.КолонкаПриходОперация]));
		КонецЕсли;
	Иначе
		// Сумма уменьшилась. Будем списывать снизу вверх.
		КРаспределениюПриход = -КРаспределениюПриход;
		КоличествоСтрокРабочейТаблицы = РабочаяТаблицаГрафика.Количество();
		
		Для Сч = 1 По КоличествоСтрокРабочейТаблицы Цикл
			
			Если КРаспределениюПриход = 0 Тогда
				Прервать;
			КонецЕсли;
			
			СтрокаГрафика = РабочаяТаблицаГрафика[КоличествоСтрокРабочейТаблицы - Сч];
			Если ЭтоСтрокаПриходнойКолонкиГрафика(СтрокаГрафика) Тогда
				СуммаРаспределения = Мин(СтрокаГрафика.Сумма, КРаспределениюПриход);
				Если СуммаРаспределения = СтрокаГрафика.Сумма Тогда
					РабочаяТаблицаГрафика.Удалить(СтрокаГрафика);
				Иначе
					СтрокаГрафика.Сумма = СтрокаГрафика.Сумма - СуммаРаспределения;
				КонецЕсли;
				КРаспределениюПриход = КРаспределениюПриход - СуммаРаспределения;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если КРаспределениюРасход > 0  Тогда
		РаботаСДоговорамиКонтрагентовУХ.ДобавитьПозициюВГрафик(РабочаяТаблицаГрафика, 
																КРаспределениюРасход, 
																ДанныеЗаполнения.ДатаОкончанияДействия,, 
																?(ОперацииГрафика = Неопределено, Неопределено, ОперацииГрафика[СекцияОписанияГрафика.КолонкаРасходОперация]));
	Иначе
		// Сумма уменьшилась. Будем списывать снизу вверх.
		КРаспределениюРасход = -КРаспределениюРасход;
		КоличествоСтрокРабочейТаблицы = РабочаяТаблицаГрафика.Количество();
		
		Для Сч = 1 По КоличествоСтрокРабочейТаблицы Цикл
			
			Если КРаспределениюРасход = 0 Тогда
				Прервать;
			КонецЕсли;
			
			СтрокаГрафика = РабочаяТаблицаГрафика[КоличествоСтрокРабочейТаблицы - Сч];
			Если Не ЭтоСтрокаПриходнойКолонкиГрафика(СтрокаГрафика) Тогда
				
				СуммаРаспределения = Мин(СтрокаГрафика.Сумма, КРаспределениюРасход);
				Если СуммаРаспределения = СтрокаГрафика.Сумма Тогда
					РабочаяТаблицаГрафика.Удалить(СтрокаГрафика);
				Иначе
					СтрокаГрафика.Сумма = СтрокаГрафика.Сумма - СуммаРаспределения;
				КонецЕсли;
				
				КРаспределениюРасход = КРаспределениюРасход - СуммаРаспределения;

			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	// Заместим старую секцию графика новой
	Для Каждого ТекСтрокаОсновногоДолга из СтрокиОсновногоДолга Цикл
		Объект.ГрафикРасчетов.Удалить(ТекСтрокаОсновногоДолга);
	КонецЦикла;
	
	Для Каждого ТекСтрокаРабочейТаблицы из РабочаяТаблицаГрафика Цикл
		ЗаполнитьЗначенияСвойств(Объект.ГрафикРасчетов.Добавить(), ТекСтрокаРабочейТаблицы);
	КонецЦикла;
	
КонецПроцедуры

Процедура НачальноеЗаполнениеОсновногоДолга(Объект, ИмяСекции, ОписаниеГрафика, ОперацииГрафика, Знач СуммаОбязательств = Неопределено) Экспорт
	
	Если СуммаОбязательств = Неопределено Тогда
		СуммаОбязательств = Объект.Сумма;
	КонецЕсли;
	
	РабочаяТаблицаГрафика = Объект.ГрафикРасчетов;
	СекцияОписанияГрафика = ОписаниеГрафика[ИмяСекции];
	
	ОперацияПриход = ?(ОперацииГрафика <> Неопределено, 
			ОперацииГрафика[СекцияОписанияГрафика.КолонкаПриходОперация], Неопределено);
	РаботаСДоговорамиКонтрагентовУХ.ДобавитьПозициюВГрафик(РабочаяТаблицаГрафика, СуммаОбязательств, 
		Объект.ДатаНачалаДействия,,ОперацияПриход);
	
	ОперацияРасход = ?(ОперацииГрафика <> Неопределено, 
		ОперацииГрафика[СекцияОписанияГрафика.КолонкаРасходОперация], Неопределено);
	РаботаСДоговорамиКонтрагентовУХ.ДобавитьПозициюВГрафик(РабочаяТаблицаГрафика, СуммаОбязательств, 
			Объект.ДатаОкончанияДействия,,ОперацияРасход);
	
КонецПроцедуры

Функция ЭтоПустойГрафик(График) Экспорт
	
	ПустыеСтроки = График.НайтиСтроки(Новый Структура("ПустаяСтрока", Истина));
	
	Возврат (ПустыеСтроки.Количество() = График.Количество());
	
КонецФункции

Функция ЧисловыеКолонкиГрафика(ОписаниеГрафика) Экспорт
	
	МассивКолонок = Новый Массив;
	Для Каждого КлючИЗначение Из ОписаниеГрафика Цикл
		СекцияГрафика = КлючИЗначение.Значение;
		
		МассивКолонок.Добавить(СекцияГрафика.КолонкаПриход);
		МассивКолонок.Добавить(СекцияГрафика.КолонкаРасход);
		
		Если СекцияГрафика.ЭтоРасчетнаяСекция Тогда
			МассивКолонок.Добавить(СекцияГрафика.КолонкаПриход + "Расчет");
			МассивКолонок.Добавить(СекцияГрафика.КолонкаПриход + "Корректировка");
			МассивКолонок.Добавить(СекцияГрафика.КолонкаРасход + "Расчет");
			МассивКолонок.Добавить(СекцияГрафика.КолонкаРасход + "Корректировка");
		КонецЕсли;
		
		МассивКолонок.Добавить(СекцияГрафика.КолонкаОстаток);
	КонецЦикла;
	
	Возврат СтрСоединить(МассивКолонок, ",");
КонецФункции

// Процедура обеспечивает выполнение различных действий по пересчету графика в корректной последовательности.
//
// Параметры:
//  Объект				 - 	ДанныеФормыСтруктура,ДокументОбъект.ВерсияСоглашенияКредит, ДокументОбъект.ВерсияСоглашенияДепозит и т.д. - 
//		версия графика, которую требуется обработать
//  ТекущаяСтрокаГрафика - 	 - Текущая строка графика.
//  ОписаниеГрафика		 - 	Структура - Описание графика конкретного вида ФИ, генерируемое методом ОписаниеГрафика() модуля менеджера
//		соответствующего документа
//  СтруктураДействий	 - 	Структура - Ключами структуры являются действия, которые необходимо выполнить. Значениями - структуры с дополнительными параметрами.
//		Перечень действий следующий:
//			Замкнуть - скорректировать секцию так, чтобы вся задолженность была погашена.
//			Пересчитать - выполнить пересчет секции графика.
//			Свернуть - свернуть график по дате.
//			Сортировать - сортировать график по дате.
//
Процедура ПересчетГрафика(Объект, ИндексТекущейСтрокиГрафика, ОписаниеГрафика, ОперацииГрафика, СтруктураДействий, Отказ = Ложь) Экспорт
	
	Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
		ТипОбъекта = "ДокументОбъект." + Объект.Ссылка.Метаданные().Имя;
		ОбъектРасчет = ДанныеФормыВЗначение(Объект, Тип(ТипОбъекта));
	Иначе
		ОбъектРасчет = Объект;
	КонецЕсли;
	
	
	График = ОбъектРасчет.ГрафикРасчетов;
	
	// "Замкнем" недостающие секции.
	Если СтруктураДействий.Свойство("Замкнуть") Тогда
		Для Каждого ИмяСекцииГрафика Из СтруктураДействий.Замкнуть.СекцииГрафика Цикл
			СекцияГрафика = ОписаниеГрафика[ИмяСекцииГрафика];
			
			Если СекцияГрафика.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.ОсновнойДолг
				ИЛИ СекцияГрафика.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.ОсновнойДолгКонтрагента Тогда
				// в первую очередь корректируем последнюю операцию.
				ДатаОтсчета = ОбъектРасчет.ДатаОкончанияДействия;
				НаправлениеСписания = "Назад";
				СдвигИндекса = 0; // Всегда считаем от последней строки графика.
			ИначеЕсли СекцияГрафика.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.Проценты
				ИЛИ СекцияГрафика.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.ПроцентыКонтрагента Тогда
				// в первую очередь корректируем первую операцию. Предположим, что график упорядочен.
				ДатаОтсчета = График[ИндексТекущейСтрокиГрафика].Дата;
				Для Сч = ИндексТекущейСтрокиГрафика по График.Количество()-1 Цикл
					Если График[Сч][СекцияГрафика.КолонкаРасход] > 0  Тогда
						ДатаОтсчета =  График[Сч].Дата;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				НаправлениеСписания = "Вперед";
				СдвигИндекса = ИндексТекущейСтрокиГрафика;
			Иначе
				// комиссии, штрафы.
				ДатаОтсчета = График[ИндексТекущейСтрокиГрафика].Дата;
				НаправлениеСписания = "Вперед";
				СдвигИндекса = ИндексТекущейСтрокиГрафика;
			КонецЕсли;
			
			СбалансироватьСекциюГрафика(График, СекцияГрафика, ДатаОтсчета, НаправлениеСписания, СдвигИндекса);
		КонецЦикла;
	КонецЕсли;
	
	// Пересчет секций
	Если СтруктураДействий.Свойство("Пересчитать") Тогда
		
		ДопПараметры = Неопределено;
		СтруктураДействий.Пересчитать.Свойство("ДопПараметры", ДопПараметры);
		
		Для Каждого ИмяСекцииГрафика Из СтруктураДействий.Пересчитать.СекцииГрафика Цикл
			ОбъектРасчет.ПересчитатьСекциюГрафика(ИмяСекцииГрафика, ОписаниеГрафика, ОперацииГрафика, ДопПараметры, Отказ);
			Если Отказ тогда
				Возврат;
			КонецЕсли;
		КонецЦикла;
		
		ОбработатьПустыеСтрокиГрафика(График);
		
	КонецЕсли;
	
	
	// Сортировка по дате.
	Если СтруктураДействий.Свойство("Пересчитать") ИЛИ СтруктураДействий.Свойство("Сортировать") Тогда
		График.Сортировать("Дата");
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда
		ЗначениеВДанныеФормы(ОбъектРасчет,Объект);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПересчитатьСекциюГрафика(Объект, ИмяСекции, ОписаниеГрафика, ОперацииГрафика, ДопПараметры = Неопределено, Отказ = Ложь) Экспорт
	
	СекцияГрафика = ОписаниеГрафика[ИмяСекции];
	
	ТаблицаРасшифровка = Объект[ИмяСекции];
	КолонкаПриход = СекцияГрафика.КолонкаПриход;
	КолонкаРасход = СекцияГрафика.КолонкаРасход;
	
	ТекстОшибки = "";
	
	
	ПараметрыРасчета = Объект.ПараметрыРасчетаСекции(ИмяСекции, ОписаниеГрафика);
	ТаблицаПроцентов = ФинансоваяМатематика.ПолучитьТаблицуПроцентов(ПараметрыРасчета,ТекстОшибки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) тогда
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ДатаНачалаПересчета = Дата(1, 1, 1);
	Если ДопПараметры <> Неопределено И ДопПараметры.Свойство("ДатаНачалаПересчета") Тогда
		ДатаНачалаПересчета = ДопПараметры.ДатаНачалаПересчета;
	КонецЕсли;

	Если ТаблицаПроцентов.Количество() Тогда
		
		// Перенесем таблицу процентов в таблицу графика.
		ТаблицаПроцентов.Колонки.База.Имя = "СуммаЗадолженности";
		
		ТаблицаРасшифровка.Очистить(); 
		
		СтрокиГрафикаТекущейСекции = СтрокиСекцииГрафика(Объект.ГрафикРасчетов, СекцияГрафика);
		
		РазницаСуммУплат = 0; // разница уплаченных процентов по расчету и по факту
		РазницаСуммНачислений = 0; // разница рассчитанных начислений процентов и по факту
		Если ЗначениеЗаполнено(ДатаНачалаПересчета) Тогда		
			
			СуммаУплатыРасчет = 0;
			СуммаУплатыНакопленная = 0;
			СуммаНачисленийРасчет = 0;
			Для каждого СтрокаПроцентов ИЗ ТаблицаПроцентов Цикл
				
				Если ЗначениеЗаполнено(СтрокаПроцентов.ДатаНачисления)
					И СтрокаПроцентов.ДатаНачисления < ДатаНачалаПересчета Тогда
					СуммаУплатыНакопленная = СуммаУплатыНакопленная + СтрокаПроцентов.Сумма;
					СуммаНачисленийРасчет = СуммаНачисленийРасчет + СтрокаПроцентов.Сумма;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СтрокаПроцентов.ДатаПлатежа)
					И СтрокаПроцентов.ДатаПлатежа < ДатаНачалаПересчета Тогда
					
					СуммаУплатыРасчет = СуммаУплатыРасчет + СуммаУплатыНакопленная;
					СуммаУплатыНакопленная = 0;
				КонецЕсли;			
			КонецЦикла;
			
			СуммаУплатыПоФакту = 0;
			СуммаНачисленийПоФакту = 0;
			Для Каждого ТекСтрокаГрафика Из СтрокиГрафикаТекущейСекции Цикл
				Если ТекСтрокаГрафика.Дата < ДатаНачалаПересчета Тогда
					Если ТекСтрокаГрафика.ОперацияГрафика = СекцияГрафика.КолонкаРасходОперация Тогда // уплата процентов
						СуммаУплатыПоФакту = СуммаУплатыПоФакту + ТекСтрокаГрафика.Сумма;
					ИначеЕсли ТекСтрокаГрафика.ОперацияГрафика = СекцияГрафика.КолонкаПриходОперация Тогда
						СуммаНачисленийПоФакту = СуммаНачисленийПоФакту + ТекСтрокаГрафика.Сумма;
					КонецЕсли;	
				КонецЕсли;	
			КонецЦикла;
			
			РазницаСуммУплат = СуммаУплатыРасчет - СуммаУплатыПоФакту;
			РазницаСуммНачислений = СуммаНачисленийРасчет - СуммаНачисленийПоФакту;
		КонецЕсли;
			
		Для Каждого ТекСтрокаГрафика Из СтрокиГрафикаТекущейСекции Цикл
			Если ТекСтрокаГрафика.Дата >= ДатаНачалаПересчета Тогда
				Объект.ГрафикРасчетов.Удалить(ТекСтрокаГрафика);
			КонецЕсли;	
		КонецЦикла;
				
		СуммаКУплате = 0;
		Для Каждого ТекСтрокаТаблицыПроцентов Из ТаблицаПроцентов Цикл 
			
			Если ТекСтрокаТаблицыПроцентов.ДатаНачисления <> Дата(1,1,1) Тогда
				
				// добавим начисление
				НоваяСтрока = ТаблицаРасшифровка.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаТаблицыПроцентов);
				НоваяСтрока.Дата = ТекСтрокаТаблицыПроцентов.ДатаНачисления;
				НоваяСтрока[КолонкаПриход +"Расчет"] = ТекСтрокаТаблицыПроцентов.Сумма;
				
				СуммаКУплате = СуммаКУплате + ТекСтрокаТаблицыПроцентов.Сумма;
				
				Если ТекСтрокаТаблицыПроцентов.ДатаНачисления = ТекСтрокаТаблицыПроцентов.ДатаПлатежа
					И ТекСтрокаТаблицыПроцентов.ДатаПлатежа >= Объект.ГраницаФактическихДанных Тогда
					// добавим уплату
					НоваяСтрока[КолонкаРасход +"Расчет"] = СуммаКУплате;
				КонецЕсли;

				
			КонецЕсли;
			
			Если ТекСтрокаТаблицыПроцентов.ДатаНачисления <> ТекСтрокаТаблицыПроцентов.ДатаПлатежа 
				И ЗначениеЗаполнено(ТекСтрокаТаблицыПроцентов.ДатаПлатежа) Тогда
						
				// добавим уплату
				НоваяСтрока = ТаблицаРасшифровка.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаТаблицыПроцентов);
				НоваяСтрока.Дата = ТекСтрокаТаблицыПроцентов.ДатаПлатежа;
				НоваяСтрока[КолонкаРасход +"Расчет"] = СуммаКУплате;
			
			КонецЕсли;
			
			Если ТекСтрокаТаблицыПроцентов.ДатаНачисления >= ДатаНачалаПересчета Тогда
				
				СуммаНачисления = ТекСтрокаТаблицыПроцентов.Сумма;
				Если РазницаСуммНачислений > 0 Тогда // добавляем не начисленные по факту
					СуммаНачисления = СуммаНачисления + РазницаСуммНачислений;
					РазницаСуммНачислений = 0;
				ИначеЕсли РазницаСуммНачислений < 0 Тогда
					
					Если СуммаНачисления + РазницаСуммНачислений >= 0 Тогда
						СуммаНачисления = СуммаНачисления + РазницаСуммНачислений;
						РазницаСуммНачислений = 0;
					Иначе
						СуммаНачисления = 0;
						РазницаСуммНачислений = РазницаСуммНачислений + СуммаНачисления;
					КонецЕсли;
					
				КонецЕсли;
				
				РаботаСДоговорамиКонтрагентовУХ.ДобавитьПозициюВГрафик(
					Объект.ГрафикРасчетов,
					СуммаНачисления,
					ТекСтрокаТаблицыПроцентов.ДатаНачисления,
					,
					ОперацииГрафика[СекцияГрафика.КолонкаПриходОперация]);
					
			КонецЕсли;	

			Если ЗначениеЗаполнено(ТекСтрокаТаблицыПроцентов.ДатаПлатежа) Тогда
				
				Если ТекСтрокаТаблицыПроцентов.ДатаПлатежа >= ДатаНачалаПересчета Тогда	
				
					Если РазницаСуммУплат > 0 Тогда // надо доплатить
						СуммаКУплате = СуммаКУплате + РазницаСуммУплат;
						РазницаСуммУплат = 0;
					ИначеЕсли РазницаСуммУплат < 0 Тогда		
						Если СуммаКУплате + РазницаСуммУплат >= 0 Тогда 
							СуммаКУплате = СуммаКУплате + РазницаСуммУплат;
							РазницаСуммУплат = 0;
						Иначе
							РазницаСуммУплат = РазницаСуммУплат + СуммаКУплате;
							СуммаКУплате = 0;
						КонецЕсли;	
					КонецЕсли;	
					
					РаботаСДоговорамиКонтрагентовУХ.ДобавитьПозициюВГрафик(
						Объект.ГрафикРасчетов,
						СуммаКУплате,
						ТекСтрокаТаблицыПроцентов.ДатаПлатежа,
						,
						ОперацииГрафика[СекцияГрафика.КолонкаРасходОперация]);
						
				КонецЕсли;	
				
				СуммаКУплате = 0;
			КонецЕсли;	
			
		КонецЦикла;
				
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьЛинейныйГрафикИзТаблицы(ГрафикРасчетовЛинейный, ТаблицаЗагрузкиГрафика, ОписаниеГрафика, ОперацииГрафика) Экспорт
	
	// Колонки таблицы соответствуют именам секций графика: Дата, ОсновнойДолгПолучение, ОсновнойДолгВозврат и т.д.
	Для каждого СтрокаЗагрузки Из ТаблицаЗагрузкиГрафика Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаЗагрузки.Дата) Тогда
			Продолжить;
		КонецЕСли;
		
		Для каждого СекцияОписанияГрафика Из ОписаниеГрафика Цикл
			
			// 1. Приход
			СуммаПриход = СтрокаЗагрузки[СекцияОписанияГрафика.Значение.КолонкаПриход];
			Если СуммаПриход <> 0 Тогда
				ОперацияПриход = ОперацииГрафика[СекцияОписанияГрафика.Значение.КолонкаПриходОперация];
				РаботаСДоговорамиКонтрагентовУХ.ДобавитьПозициюВГрафик(ГрафикРасчетовЛинейный, 
					СуммаПриход, СтрокаЗагрузки.Дата,,ОперацияПриход);
			КонецЕсли;	
			
			// 2. Расход
			СуммаРасход = СтрокаЗагрузки[СекцияОписанияГрафика.Значение.КолонкаРасход];
			Если СуммаРасход <> 0 Тогда
				ОперацияРасход = ОперацииГрафика[СекцияОписанияГрафика.Значение.КолонкаРасходОперация];
				РаботаСДоговорамиКонтрагентовУХ.ДобавитьПозициюВГрафик(ГрафикРасчетовЛинейный, 
					СуммаРасход, СтрокаЗагрузки.Дата,,ОперацияРасход);
			КонецЕсли;	
		КонецЦикла;
	КонецЦИкла;

КонецПроцедуры	

// Функция возвращает вид операции бюджетирования для заданной операции финансового инструмента,
// определяемой через свои свойства.
//
// Параметры:
//  ВидФинансовогоИнструмента		 - ПеречислениеСсылка.ВидыФинансовыхИнструментов	 - вид финансового инструмента искомой операции
//  ЭлементСтруктурыЗадолженности	 - ПеречислениеСсылка.ЭлементыСтруктурыЗадолженности	 - элемент структуры задолженности искомой операции
//  ПриходРасход					 - ПеречислениеСсылка.ВидыДвиженийПриходРасход	 - Увеличивает ли операция задолженность по инструменту (Приход) или уменьшает (Расход)
// 
// Возвращаемое значение:
//  Структура:
//    ВидОперацииУХ - СправочникСсылка.ВидыОперацийУХ - заданный в настройках вид операции.
//    СтатьяБюджета - Статья бюджета, соответствующая данной операции.
//
Функция НастройкиОперацииФинансовогоИнструмента(ВидФинансовогоИнструмента, ЭлементСтруктурыЗадолженности, ПриходРасход) Экспорт
	
	Результат = Новый Структура("ВидОперацииУХ,СтатьяБюджета");
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	НастройкиФинансовыхИнструментов.Операция.ВидОперацииУХ КАК ВидОперацииУХ,
	|	НастройкиФинансовыхИнструментов.СтатьяБюджета КАК СтатьяБюджета
	|ИЗ
	|	РегистрСведений.НастройкиФинансовыхИнструментов КАК НастройкиФинансовыхИнструментов
	|ГДЕ
	|	НастройкиФинансовыхИнструментов.Операция.ВидФинансовогоИнструмента = &ВидФинансовогоИнструмента
	|	И НастройкиФинансовыхИнструментов.Операция.КолонкаСекции = &ПриходРасход
	|	И НастройкиФинансовыхИнструментов.Операция.ЭлементСтруктурыЗадолженности = &ЭлементСтруктурыЗадолженности";

	Запрос.УстановитьПараметр("ВидФинансовогоИнструмента", ВидФинансовогоИнструмента);
	Запрос.УстановитьПараметр("ПриходРасход", ПриходРасход);
	Запрос.УстановитьПараметр("ЭлементСтруктурыЗадолженности", ЭлементСтруктурыЗадолженности);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ОбработатьПустыеСтрокиГрафика(График) Экспорт
	
	КоличествоЭлементовКоллекции = График.Количество();
	
	Для ОбратныйИндекс = 1 По КоличествоЭлементовКоллекции Цикл
	
		Индекс = КоличествоЭлементовКоллекции - ОбратныйИндекс;
		
		СтрокаГрафика = График[Индекс];
		СостояниеЗаполнения = СостояниеЗаполненияСтрокиГрафика(СтрокаГрафика);
		
		Если СостояниеЗаполнения = СостояниеСтрокиГрафикаНеЗаполнена() Тогда
			График.Удалить(Индекс);
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

Функция СтрокиСекцииГрафика(ГрафикРасчетов, ОписаниеСекции) Экспорт
	
	СтруктураПоиска = Новый Структура("ЭлементСтруктурыЗадолженности");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ОписаниеСекции);
	
	Возврат ГрафикРасчетов.НайтиСтроки(СтруктураПоиска);
	
КонецФункции

Процедура УдалитьСтрокиСекцииГрафика(ГрафикРасчетов, ОписаниеСекции) Экспорт
	
	СтрокиСекции = СтрокиСекцииГрафика(ГрафикРасчетов, ОписаниеСекции);
	Для каждого Строка Из СтрокиСекции Цикл
		ГрафикРасчетов.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

Функция ОстатокЗадолженностиСекцииГрафика(ГрафикРасчетов, ОписаниеСекции, ДатаЗадолженности = Неопределено) Экспорт
	
	СтруктураПоиска = Новый Структура("ЭлементСтруктурыЗадолженности");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ОписаниеСекции);
	СтрокиГрафика = ГрафикРасчетов.НайтиСтроки(СтруктураПоиска);
	
	Результат = 0;
	Для Каждого ТекНайденнаяСтрока Из СтрокиГрафика Цикл
		
		Если ДатаЗадолженности <> Неопределено И ТекНайденнаяСтрока.Дата > ДатаЗадолженности Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоСтрокаПриходнойКолонкиГрафика(ТекНайденнаяСтрока) Тогда
			Результат = Результат + ТекНайденнаяСтрока.Сумма;
		Иначе
			Результат = Результат - ТекНайденнаяСтрока.Сумма;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ДатаПоследнегоНачисленияСекцииГрафика(ГрафикРасчетов, ОписаниеСекции, ДатаЗадолженности = Неопределено) Экспорт
	
	СтруктураПоиска = Новый Структура("ЭлементСтруктурыЗадолженности");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ОписаниеСекции);
	СтрокиГрафика = ГрафикРасчетов.НайтиСтроки(СтруктураПоиска);
	
	ДатаНачисления = Дата(1,1,1);
	
	Для Каждого ТекНайденнаяСтрока Из СтрокиГрафика Цикл
		
		Если ДатаЗадолженности <> Неопределено И ТекНайденнаяСтрока.Дата > ДатаЗадолженности Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЭтоСтрокаПриходнойКолонкиГрафика(ТекНайденнаяСтрока) Тогда
			Если ДатаНачисления < ТекНайденнаяСтрока.Дата Тогда
				ДатаНачисления = ТекНайденнаяСтрока.Дата;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДатаНачисления;
	
КонецФункции

Функция СекцияГрафикаЗамкнута(ГрафикРасчетов, ОписаниеСекции) Экспорт
	
	Результат = (ОстатокЗадолженностиСекцииГрафика(ГрафикРасчетов, ОписаниеСекции) = 0);
	Возврат Результат;
	
КонецФункции

Функция ЕстьСтрокиГрафикаССуммой(ГрафикРасчетов, ЭлементСтруктурыЗадолженности) Экспорт
	
	СтрокиГрафика = ГрафикРасчетов.НайтиСтроки(Новый Структура("ЭлементСтруктурыЗадолженности", ЭлементСтруктурыЗадолженности));
	Для каждого Строка Из СтрокиГрафика Цикл
		Если ЗначениеЗаполнено(Строка.Сумма) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ОбщаяСуммаКолонкиСекции(ГрафикРасчетов, ЭлементСтруктурыЗадолженности = Неопределено, КолонкаСекции) Экспорт
	
	СтруктураПоиска = Новый Структура;
	Если ЭлементСтруктурыЗадолженности <> Неопределено Тогда
		СтруктураПоиска.Вставить("ЭлементСтруктурыЗадолженности", ЭлементСтруктурыЗадолженности);
	КонецЕсли;
	СтруктураПоиска.Вставить("КолонкаСекции", КолонкаСекции);
		
	СтрокиГрафика = ГрафикРасчетов.Выгрузить(СтруктураПоиска, "Сумма");
	Возврат СтрокиГрафика.Итог("Сумма");
	
КонецФункции

Функция МаксимальнаяСуммаЗадолженностиСекцииГрафика(ГрафикРасчетов, ЭлементСтруктурыЗадолженности) Экспорт
	
	СтруктураПоиска = Новый Структура("ЭлементСтруктурыЗадолженности", ЭлементСтруктурыЗадолженности);
	СтрокиГрафика = ГрафикРасчетов.НайтиСтроки(СтруктураПоиска);
	ТекущаяЗадолженность = 0;
	МаксимальнаяЗадолженность = 0;
	Для Каждого ТекНайденнаяСтрока Из СтрокиГрафика Цикл
		
		Если ТекНайденнаяСтрока.КолонкаСекции = Перечисления.ВидыДвиженийПриходРасход.Приход Тогда
			ТекущаяЗадолженность = ТекущаяЗадолженность + ТекНайденнаяСтрока.Сумма;
		Иначе
			ТекущаяЗадолженность = ТекущаяЗадолженность - ТекНайденнаяСтрока.Сумма;
		КонецЕсли;
		
		Если ТекущаяЗадолженность > МаксимальнаяЗадолженность Тогда
			МаксимальнаяЗадолженность = ТекущаяЗадолженность;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МаксимальнаяЗадолженность;
	
КонецФункции

Функция ЭтоСтрокаПриходнойКолонкиГрафика(СтрокаГрафика) Экспорт

	Возврат СтрокаГрафика.КолонкаСекции = Перечисления.ВидыДвиженийПриходРасход.Приход;
	
КонецФункции

Процедура ОбработкаПроверкиЗаполнения_СчетаУчета(Объект, Отказ, ПроверяемыеРеквизиты) Экспорт

	СчетНоминала = Справочники.ВидыСчетовФИ.СчетНоминала;
	
	Для каждого СтрокаСчетУчета Из Объект.СчетаУчета Цикл
		
		Если Не СтрокаСчетУчета.Счет.Пустая() Тогда
			Продолжить;
		КонецЕсли;
		
		Если СчетНоминала = СтрокаСчетУчета.ВидСчетаФИ Тогда
			Продолжить;//счет номинала не обязателен		
		КонецЕсли;
		
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Не заполнен <%1> в счетах учета'"), СтрокаСчетУчета.ВидСчетаФИ);
		ОбщегоНазначения.СообщитьПользователю(ТекстОшибки, Объект.Ссылка, ,, Отказ);
		
	КонецЦикла;
	
	МассивНепроверяемыхРеквизитов = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве("СчетаУчета.Счет");
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ОчиститьНеиспользуемыеРеквизитыДокументовЦБ(Объект) Экспорт
	
	// очищаем неиспользуемые реквизиты
	ВидФинансовогоИнструмента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ФинансовыйИнструмент, "ВидФинансовогоИнструмента");
	Если ВидФинансовогоИнструмента <> Перечисления.ВидыФинансовыхИнструментов.Облигация Тогда
		Объект.ЦФО = Неопределено;
		Объект.Проект = Неопределено;
		Объект.СчетОрганизации = Неопределено;
		Объект.СчетКонтрагента = Неопределено;
		Объект.ПараметрыОпераций.Очистить();
	КонецЕсли;
	
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция НовыйОперацииИзмененияБазы()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Дата", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	Результат.Колонки.Добавить("Приход", РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
	Результат.Колонки.Добавить("Расход", РаботаСКурсамиВалют.ОписаниеТипаДенежногоПоля());
	
	Возврат Результат;
	
КонецФункции

Процедура СбалансироватьСекциюГрафика(График, ТекСекцияГрафика, ДатаОтсчета, НаправлениеПересчета, ТекущийИндекс = 0)
	
	ГрафикСекции = График.НайтиСтроки(Новый Структура("ЭлементСтруктурыЗадолженности", ТекСекцияГрафика.ЭлементСтруктурыЗадолженности));
	
	СуммаККорректировке = 0;
	
	Для Каждого ТекСтрокаГрафика Из ГрафикСекции Цикл
		
		Если ТекСтрокаГрафика.КолонкаСекции = Перечисления.ВидыДвиженийПриходРасход.Приход Тогда
			СуммаККорректировке = СуммаККорректировке + ТекСтрокаГрафика.Сумма;
		Иначе
			СуммаККорректировке = СуммаККорректировке - ТекСтрокаГрафика.Сумма
		КонецЕсли;
		
	КонецЦикла;
	
	Если СуммаККорректировке = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если СуммаККорректировке > 0 Тогда
		// Поставим сумму на дату завершения.
		СтрокаГрафика = Неопределено;
		СтруктураПоиска = Новый Структура("ЭлементСтруктурыЗадолженности,КолонкаСекции,Дата",
			ТекСекцияГрафика.ЭлементСтруктурыЗадолженности, 
			Перечисления.ВидыДвиженийПриходРасход.Расход,
			ДатаОтсчета);
		ЗавершающиеСтроки = График.НайтиСтроки(СтруктураПоиска);
		Если ЗавершающиеСтроки.Количество() Тогда
			СтрокаГрафика = ЗавершающиеСтроки[0];
		КонецЕсли;
		
		Если СтрокаГрафика = Неопределено Тогда
			СтрокаГрафика = График.Добавить();
			СтрокаГрафика.Дата = ДатаОтсчета;
			СтрокаГрафика.ОперацияГрафика = ТекСекцияГрафика.КолонкаРасходОперация;
			// !!!
		КонецЕсли;
		
		СтрокаГрафика.Сумма = СтрокаГрафика.Сумма + СуммаККорректировке;
		Если ТекСекцияГрафика.ЭтоРасчетнаяСекция Тогда
			СтрокаГрафика.СуммаКорректировка = СтрокаГрафика.СуммаКорректировка + СуммаККорректировке;
		КонецЕсли;
	Иначе
		// Будем списывать сумму согласно нашему алгоритму - вперед или назад.
		ОсталосьРаспределить = - СуммаККорректировке;
		СтрокиГрафика = График.НайтиСтроки(
			Новый Структура("ЭлементСтруктурыЗадолженности,КолонкаСекции,Дата", ТекСекцияГрафика.ЭлементСтруктурыЗадолженности, Перечисления.ВидыДвиженийПриходРасход.Расход,ДатаОтсчета));
		КоличествоСтрокГрафика = СтрокиГрафика.Количество();
		Для Сч = 1 по КоличествоСтрокГрафика - ТекущийИндекс Цикл
			
			Если НаправлениеПересчета = "Вперед" Тогда
				ИндексСтроки = ТекущийИндекс + Сч - 1;
			Иначе
				// "Назад"
				ИндексСтроки = КоличествоСтрокГрафика - Сч;
			КонецЕсли;
			
			СтрокаГрафика = СтрокиГрафика[ИндексСтроки];
			
			Если СтрокаГрафика.Сумма > 0 Тогда
				СуммаКСписанию = Мин(СтрокаГрафика.Сумма, ОсталосьРаспределить);
				СтрокаГрафика.Сумма = СтрокаГрафика.Сумма - СуммаКСписанию;
				Если ТекСекцияГрафика.ЭтоРасчетнаяСекция Тогда
					СтрокаГрафика.СуммаКорректировка = СтрокаГрафика.СуммаКорректировка - СуммаКСписанию;
				КонецЕсли;
				
				ОсталосьРаспределить = ОсталосьРаспределить - СуммаКСписанию;
				
				Если ОсталосьРаспределить = 0 Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция РасчетныеКолонкиДДС(ОписаниеГрафика)
	
	Результат = Новый Массив;
	Для Каждого ТекСекция Из ОписаниеГрафика Цикл
		СекцияГрафика = ТекСекция.Значение;
		Если СекцияГрафика.ЭтоРасчетнаяСекция Тогда
			
			Если СекцияГрафика.КолонкаПриходДДС Тогда
				Результат.Добавить(СекцияГрафика.КолонкаПриход);
			КонецЕсли;
			Если СекцияГрафика.КолонкаРасходДДС Тогда
				Результат.Добавить(СекцияГрафика.КолонкаРасход);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

Функция КолонкиГрафикаДДС(ОписаниеГрафика)
	
	Результат = Новый Массив;
	Для Каждого ТекСекция Из ОписаниеГрафика Цикл
		СекцияГрафика = ТекСекция.Значение;
		Если СекцияГрафика.КолонкаПриходДДС Тогда
			Результат.Добавить(СекцияГрафика.КолонкаПриход);
		КонецЕсли;
		Если СекцияГрафика.КолонкаРасходДДС Тогда
			Результат.Добавить(СекцияГрафика.КолонкаРасход);
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;
	
КонецФункции

Функция СостояниеЗаполненияСтрокиГрафика(СтрокаГрафика)
	
	СостояниеЗаполнения = СостояниеСтрокиГрафикаНеЗаполнена();
	
	Если СтрокаГрафика.Сумма <> 0 Тогда
		СостояниеЗаполнения = СостояниеСтрокиГрафикаЗаполнена();
	КонецЕсли;
		
	Возврат СостояниеЗаполнения;
	
КонецФункции

Функция СостояниеСтрокиГрафикаНеЗаполнена()
	
	Возврат "НеЗаполнена";
	
КонецФункции

Функция СостояниеСтрокиГрафикаНетЗначимыхДанных()
	Возврат "НетЗначимыхДанных";
КонецФункции

Функция СостояниеСтрокиГрафикаЗаполнена()
	Возврат "Заполнена";
КонецФункции


#КонецОбласти

#Область СтандартныеПодсистемы_ВариантыОтчетов

// Определяет объекты конфигурации, в модулях менеджеров которых предусмотрена процедура ДобавитьКомандыОтчетов,
// описывающая команды открытия контекстных отчетов.
// Синтаксис процедуры ДобавитьКомандыОтчетов см. в документации.
//
// Параметры:
//   Объекты - Массив - объекты метаданных (ОбъектМетаданных) с командами отчетов.
//
Процедура ОпределитьОбъектыСКомандамиОтчетов(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Справочники.ЦенныеБумаги);
	
	Объекты.Добавить(Метаданные.Документы.АкцептПротестПереводногоВекселя);
	Объекты.Добавить(Метаданные.Документы.ВыбытиеВекселей);
	Объекты.Добавить(Метаданные.Документы.ВыбытиеИнвестиций);
	Объекты.Добавить(Метаданные.Документы.ВыкупЦеннойБумаги);
	Объекты.Добавить(Метаданные.Документы.ВыпускЦеннойБумаги);
	Объекты.Добавить(Метаданные.Документы.НачисленияПоФинансовымИнструментам);
	Объекты.Добавить(Метаданные.Документы.ПоступлениеВекселя);
	Объекты.Добавить(Метаданные.Документы.ПоступлениеИнвестиций);
	Объекты.Добавить(Метаданные.Документы.ПриобретениеЦеннойБумаги);
	Объекты.Добавить(Метаданные.Документы.ПродажаЦеннойБумаги);

	Объекты.Добавить(Метаданные.ЖурналыДокументов.ДвижениеИнвестиций);
	Объекты.Добавить(Метаданные.ЖурналыДокументов.ОперацииСВекселями);
	Объекты.Добавить(Метаданные.ЖурналыДокументов.ОперацииСЦеннымиБумагами);
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетовФИ(КомандыОтчетов, Параметры) Экспорт
	
	ВстраиваниеУХ.ДобавитьКомандуОбработчик(КомандыОтчетов, "КарточкаФинансовогоИнструмента", НСтр("ru = 'Карточка ценной бумаги'"));
	ВстраиваниеУХ.ДобавитьКомандуОбработчик(КомандыОтчетов, "ВзаиморасчетыПоДоговору", НСтр("ru = 'Взаиморасчеты по договору'"));
	//ДобавитьКомандуОбработчик(КомандыОтчетов, "ГрафикНоминалаФИ", НСтр("ru = 'График номинала финансового инструмента'"));
	
	Команда = ДобавитьКомандуОтчет(КомандыОтчетов, "Отчет.ГрафикиЦенныхБумаг", НСтр("ru = 'График ценной бумаги'"));
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ФинансовыйИнструмент.ВидФинансовогоИнструмента", ПредопределенноеЗначение("Перечисление.ВидыФинансовыхИнструментов.Вексель"));
	
	Команда = ДобавитьКомандуОтчет(КомандыОтчетов, "Отчет.ГрафикиЦенныхБумаг", НСтр("ru = 'График ценной бумаги'"));
	ПодключаемыеКоманды.ДобавитьУсловиеВидимостиКоманды(Команда, "ФинансовыйИнструмент.ВидФинансовогоИнструмента", ПредопределенноеЗначение("Перечисление.ВидыФинансовыхИнструментов.Вексель"));
	
	ДобавитьКомандуОтчет(КомандыОтчетов, "Отчет.ВедомостьПоПартиямЦенныхБумаг", НСтр("ru = 'Ведомость по партиям ценной бумаги'"));
	ДобавитьКомандуОтчет(КомандыОтчетов, "Отчет.РасчетыСБрокером", НСтр("ru = 'Расчеты с брокером'"));
	//ДобавитьКомандуОтчет(КомандыОтчетов, "Отчет.АнализГрафикаФинансовогоИнструмента", НСтр("ru = 'Сводный график'"));
	
КонецПроцедуры

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетовИнвестиции(КомандыОтчетов, Параметры) Экспорт
	
	//** структура подчиненности
	//** расчеты с Контрагент
	//** карточка субконто РСБУ, МСФО
	//** графики ФИ казна, МСФО
	
	ВстраиваниеУХ.ДобавитьКомандуОбработчик(КомандыОтчетов, "КарточкаФинансовогоИнструмента", НСтр("ru = 'Карточка субконто по объекту инвестирования'"));
	ВстраиваниеУХ.ДобавитьКомандуОбработчик(КомандыОтчетов, "ВзаиморасчетыПоДоговору", НСтр("ru = 'Взаиморасчеты по договору'"));
		
КонецПроцедуры

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
//
Функция ДобавитьКомандуОтчет(КомандыОтчетов, Менеджер, Представление, ИмяКоманды = Неопределено) Экспорт
	
	КомандаОтчет = КомандыОтчетов.Добавить();
	
	КомандаОтчет.Менеджер = Менеджер;
	КомандаОтчет.Представление = Представление;
	КомандаОтчет.МножественныйВыбор = Истина;
	
	Если ИмяКоманды <> Неопределено Тогда
		КомандаОтчет.ДополнительныеПараметры.Вставить("ИмяКоманды", ИмяКоманды);
	КонецЕсли;
	
	Возврат КомандаОтчет;
	
КонецФункции

// Добавляет команду отчета в список команд.
// 
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - состав полей см. в функции МенюОтчеты.СоздатьКоллекциюКомандОтчетов.
//
Функция ДобавитьКомандуОбработчик(КомандыОтчетов, Идентификатор, Представление) Экспорт
	
	КомандаОтчет = КомандыОтчетов.Добавить();
	КомандаОтчет.Обработчик = "ФинансовыеИнструментыФормыКлиент.Подключаемый_ОткрытьФорму";
	КомандаОтчет.Представление = Представление;
	КомандаОтчет.Идентификатор = Идентификатор;
	КомандаОтчет.МножественныйВыбор = Ложь;
	
	Возврат КомандаОтчет;
	
КонецФункции

#КонецОбласти

#Область СтандартныеПодсистемы_СозданиеНаОсновании

Процедура ПриОпределенииОбъектовСКомандамиСозданияНаОсновании(Объекты) Экспорт

	Объекты.Добавить(Метаданные.Справочники.ЦенныеБумаги);
	
	Объекты.Добавить(Метаданные.Документы.АкцептПротестПереводногоВекселя);
	Объекты.Добавить(Метаданные.Документы.ВыбытиеВекселей);
	Объекты.Добавить(Метаданные.Документы.ПоступлениеВекселя);
	
	Объекты.Добавить(Метаданные.Документы.ВыкупЦеннойБумаги);
	Объекты.Добавить(Метаданные.Документы.ВыпускЦеннойБумаги);
	Объекты.Добавить(Метаданные.Документы.ПриобретениеЦеннойБумаги);
	Объекты.Добавить(Метаданные.Документы.ПродажаЦеннойБумаги);
	
	Объекты.Добавить(Метаданные.Документы.ПоступлениеИнвестиций);
	Объекты.Добавить(Метаданные.Документы.ВыбытиеИнвестиций);	

КонецПроцедуры

Функция УсловиеВидимостиКоманды() Экспорт

	

КонецФункции

Функция ДобавитьКомандуСоздатьНаОсновании(КомандыСозданияНаОсновании, Идентификатор, Представление) Экспорт

	КомандаСоздатьНаОсновании = КомандыСозданияНаОсновании.Добавить();
	
	КомандаСоздатьНаОсновании.Обработчик = "ФинансовыеИнструментыФормыКлиент.Подключаемый_ОткрытьФормуСозданияНаОсновании";
	КомандаСоздатьНаОсновании.Идентификатор = Идентификатор;
	КомандаСоздатьНаОсновании.Представление = Представление;
	КомандаСоздатьНаОсновании.РежимЗаписи = "Проводить";
	
	Возврат КомандаСоздатьНаОсновании;

КонецФункции

#КонецОбласти

#Область Проведение

Функция ТекстЗапросаВерсияГрафика(НомераТаблиц, ИмяДокумента, ИмяТаблицы, ВерсияЦеннойБумаги = Ложь) Экспорт

	НомераТаблиц.Вставить(ИмяТаблицы, НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВерсияФИ.Дата КАК Период,
	|	&ДоговорКонтрагента КАК ПредметГрафика,
	|	&Организация КАК Организация,	
	|	ВерсияФИ.ОпорныйГрафик КАК ОпорныйГрафик	
	|ИЗ
	|	Документ.ВерсияСоглашенияКредит КАК ВерсияФИ
	|ГДЕ
	|	ВерсияФИ.Ссылка = &Ссылка";
	
	Если ВерсияЦеннойБумаги = Истина Тогда//у ценных бумаг график всегда опорный
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВерсияФИ.ОпорныйГрафик", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ДоговорКонтрагента", "ФинансовыйИнструмент");
	КонецЕсли;
	
	Возврат СтрЗаменить(ТекстЗапроса, "ВерсияСоглашенияКредит", ИмяДокумента);

КонецФункции

#КонецОбласти

#Область ПроведениеФИ

Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ, ОписаниеГрафика = Неопределено) Экспорт
	
	ИмяДокумента = ДокументСсылка.Метаданные().Имя;
	
	ИмяРегистраВерсий = "ВерсииРасчетов";
	ИмяРегистраЗадолженность = "РасчетыСКонтрагентамиГрафики";
	
	ТаблицыДляДвижений = Новый Структура;		
	ДополнительныеСвойства = Новый Структура;
	НомераТаблиц = Новый Структура;
	
	// Реквизиты документа.
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = ТекстЗапросаРеквизитыДокументаФИ(, ИмяДокумента);
	Реквизиты = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Запрос.Выполнить().Выгрузить()[0]);
	
	ДополнительныеСвойства.Вставить("Реквизиты", Реквизиты);
	
	Если Отказ Тогда
		Возврат ДополнительныеСвойства;
	КонецЕсли;
	
	Для Каждого ТекРеквизит Из Реквизиты Цикл
		Запрос.УстановитьПараметр(ТекРеквизит.Ключ, ТекРеквизит.Значение);
	КонецЦикла;
	
	УстановитьПараметрыСтатьиБюджетов(Запрос);
	
	Запрос.Текст = 
	ТекстЗапросаВерсияГрафика(НомераТаблиц, ИмяДокумента, ИмяРегистраВерсий)
	+ ОбщегоНазначенияУХ.ТекстРазделителяЗапросовПакета()
	+ ТекстЗапросаЗадолженностьПоГрафикам(НомераТаблиц, ИмяДокумента, ИмяРегистраЗадолженность, ОписаниеГрафика, Реквизиты.ВидФинансовогоИнструмента);
	
	Результат = Запрос.ВыполнитьПакет();

	Для Каждого НомерТаблицы Из НомераТаблиц Цикл
		Если СтрНачинаетсяС(НомерТаблицы.Ключ, "Таблица")
			ИЛИ СтрНачинаетсяС(НомерТаблицы.Ключ, "ВТ_") Тогда
			Продолжить;
		КонецЕсли;
		ТаблицыДляДвижений.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
	КонецЦикла;
			
	ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", ТаблицыДляДвижений);
	
	Возврат ДополнительныеСвойства;

КонецФункции

Функция ТекстЗапросаРеквизитыДокументаФИ(НомераТаблиц = Неопределено, ИмяДокумента) Экспорт 

	Если НомераТаблиц <> Неопределено Тогда
		НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());	
	КонецЕсли;	
	
	ТекстЗапроса =
	"ВЫБРАТЬ	
	|	Реквизиты.Ссылка КАК Ссылка,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	Реквизиты.ВидДоговораУХ.ВидФинансовогоИнструмента КАК ВидФинансовогоИнструмента,	
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.Контрагент КАК Контрагент,
	|	Реквизиты.ВалютаВзаиморасчетов КАК Валюта
	|ИЗ
	|	Документ.ВерсияСоглашенияКредит КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Возврат СтрЗаменить(ТекстЗапроса, "ВерсияСоглашенияКредит", ИмяДокумента);

КонецФункции

Функция ТекстЗапросаЗадолженностьПоГрафикам(НомераТаблиц, ИмяДокумента, ИмяТаблицы, ОписаниеГрафика, ВидФинансовогоИнструмента) Экспорт
	
	НомераТаблиц.Вставить(ИмяТаблицы, НомераТаблиц.Количество());
	
	Возврат ПолучитьТекстЗапросаРасчетыПоГрафикамФИ(ИмяДокумента, ВидФинансовогоИнструмента, ОписаниеГрафика);
	
КонецФункции

Функция ПолучитьТекстЗапросаРасчетыПоГрафикамФИ(ИмяДокумента,ВидФинансовогоИнструмента,ОписаниеГрафика) Экспорт
	
	ЭтоДоходныйИнструмент = УправлениеДоговорамиУХКлиентСерверПовтИсп.ЭтоДоходныйИнструмент(ВидФинансовогоИнструмента);
	
	Если ЭтоДоходныйИнструмент Тогда
		ИмяВидаДвиженияПриходнойКолонки = "Приход";
		ИмяВидаДвиженияРасходнойКолонки = "Расход";
	Иначе
		ИмяВидаДвиженияПриходнойКолонки = "Расход";
		ИмяВидаДвиженияРасходнойКолонки = "Приход";
	КонецЕсли;
	
	ШаблонТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ДоговорКонтрагента КАК ПредметГрафика,
	|	&Ссылка КАК ВерсияГрафика,
	|	&ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности,
	|	&ВидДвиженияНакопления КАК ВидДвижения,
	|	График.Дата КАК Период,
	|	&Валюта КАК Валюта,
	|	&СтатьяБюджетаПараметр КАК СтатьяБюджета,
	|	&ОперацияПараметр КАК Операция,
	|	&ПриходРасходПараметр КАК ПриходРасход,
	|	&Организация КАК Организация,
	|	&Контрагент КАК Контрагент,
	|	График.ОсновнойДолгПолучение КАК Сумма,
	|	График.ОсновнойДолгПолучение КАК СуммаПлатежа,
	|	&Валюта КАК ВалютаПлатежа,
	|	1 КАК КурсПлатежа,
	|	1 КАК КратностьПлатежа
	|	
	|ИЗ
	|	Документ.ВерсияСоглашенияКредит.График КАК График
	|ГДЕ
	|	График.ОсновнойДолгПолучение <> 0
	|	И График.Ссылка = &Ссылка";
	
	ШаблонТекстЗапроса = СтрЗаменить(ШаблонТекстЗапроса, "ВерсияСоглашенияКредит", ИмяДокумента);	
	
	ТекстЗапроса = "";
	
	МассивФрагментовЗапроса = Новый Массив;
	СтрокаРазделитель = Символы.ПС + "ОБЪЕДИНИТЬ ВСЕ" + Символы.ПС;
	
	Для Каждого ТекСекцияГрафика Из ОписаниеГрафика Цикл
		
		ОписаниеСекции = ТекСекцияГрафика.Значение;
		
		Если Не ОписаниеСекции.ЭтоСекцияВзаиморасчетов Тогда
			Продолжить;
		КонецЕсли;
		
		// добавим две секции - "приходную" и "расходную".
		// Установим предопределенные ЭлементСтруктурыЗадолженности и ВидДвиженияНакопления,
		
		ИмяЭлементаСтруктурыЗадолженности = ОбщегоНазначения.ИмяЗначенияПеречисления(ОписаниеСекции.ЭлементСтруктурыЗадолженности);
		// заменим поле ОсновнойДолгПолучение.
		ТекстСекции = СтрЗаменить(ШаблонТекстЗапроса, "&ЭлементСтруктурыЗадолженности", 
			СтрШаблон("ЗНАЧЕНИЕ(Перечисление.ЭлементыСтруктурыЗадолженности.%1)", ИмяЭлементаСтруктурыЗадолженности));
			
		ТекстПриход = СтрЗаменить(ТекстСекции, "&ВидДвиженияНакопления", СтрШаблон("Значение(ВидДвиженияНакопления.%1)", ИмяВидаДвиженияПриходнойКолонки));
		ТекстПриход = СтрЗаменить(ТекстПриход, "ОсновнойДолгПолучение", ОписаниеСекции.КолонкаПриход);
		ТекстПриход = СтрЗаменить(ТекстПриход, "СтатьяБюджетаПараметр", "СтатьяБюджета" + ИмяЭлементаСтруктурыЗадолженности + "Приход");
		ТекстПриход = СтрЗаменить(ТекстПриход, "ОперацияПараметр", "Операция" + ИмяЭлементаСтруктурыЗадолженности + "Приход");
		ЭтоОсновнойДолг = (ОписаниеСекции.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.ОсновнойДолг);
		ЭтоПриходнаяОперация = (ЭтоДоходныйИнструмент И Не ЭтоОсновнойДолг) ИЛИ (ЭтоОсновнойДолг И Не ЭтоДоходныйИнструмент);
		ТекстПриход = СтрЗаменить(ТекстПриход, "&ПриходРасходПараметр", СтрШаблон("ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.%1)", ?(ЭтоПриходнаяОперация, "Приход", "Расход")));
		
		МассивФрагментовЗапроса.Добавить(ТекстПриход);
		
		ТекстРасход = СтрЗаменить(ТекстСекции, "&ВидДвиженияНакопления", СтрШаблон("Значение(ВидДвиженияНакопления.%1)", ИмяВидаДвиженияРасходнойКолонки));
		ТекстРасход = СтрЗаменить(ТекстРасход, "ОсновнойДолгПолучение", ОписаниеСекции.КолонкаРасход);
		ТекстРасход = СтрЗаменить(ТекстРасход, "СтатьяБюджетаПараметр", "СтатьяБюджета" + ИмяЭлементаСтруктурыЗадолженности + "Расход");
		ТекстРасход = СтрЗаменить(ТекстРасход, "ОперацияПараметр", "Операция" + ИмяЭлементаСтруктурыЗадолженности + "Расход");
		ТекстРасход = СтрЗаменить(ТекстРасход, "&ПриходРасходПараметр", СтрШаблон("ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.%1)", ?(ЭтоДоходныйИнструмент, "Приход", "Расход")));

		МассивФрагментовЗапроса.Добавить(ТекстРасход);
		
	КонецЦикла;
	
	ТекстЗапроса = СтрСоединить(МассивФрагментовЗапроса, СтрокаРазделитель);
		
	Возврат ТекстЗапроса;
	
КонецФункции

Процедура УстановитьПараметрыСтатьиБюджетов(ЗапросВход) 
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОперацииФинансовыхИнструментов.ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности,
	|	ОперацииФинансовыхИнструментов.КолонкаСекции КАК ПриходРасход,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(НастройкиФинансовыхИнструментов.СтатьяБюджета, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|			ТОГДА ВЫБОР
	|					КОГДА ОперацииФинансовыхИнструментов.ВидБюджета = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияДенежныхСредств.ПустаяСсылка)
	|					КОГДА ОперацииФинансовыхИнструментов.ВидБюджета = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыБюджетов.БюджетДоходовИРасходов)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиДоходовИРасходов.ПустаяСсылка)
	|					КОГДА ОперацииФинансовыхИнструментов.ВидБюджета = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыБюджетов.БюджетДвиженияРесурсов)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.СтатьиДвиженияРесурсов.ПустаяСсылка)
	|					ИНАЧЕ НЕОПРЕДЕЛЕНО
	|				КОНЕЦ
	|		ИНАЧЕ НастройкиФинансовыхИнструментов.СтатьяБюджета
	|	КОНЕЦ КАК СтатьяБюджета,
	|	ОперацииФинансовыхИнструментов.Ссылка КАК Операция
	|ИЗ
	|	Справочник.ОперацииГрафиковДоговоров КАК ОперацииФинансовыхИнструментов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиФинансовыхИнструментов КАК НастройкиФинансовыхИнструментов
	|		ПО (НастройкиФинансовыхИнструментов.Операция = ОперацииФинансовыхИнструментов.Ссылка)
	|ГДЕ
	|	ОперацииФинансовыхИнструментов.ВидФинансовогоИнструмента = &ВидФинансовогоИнструмента";

	
	Запрос.УстановитьПараметр("ВидФинансовогоИнструмента", ЗапросВход.Параметры.ВидФинансовогоИнструмента);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ЗапросВход.УстановитьПараметр("СтатьяБюджета" + ОбщегоНазначения.ИмяЗначенияПеречисления(Выборка.ЭлементСтруктурыЗадолженности) + Выборка.ПриходРасход, Выборка.СтатьяБюджета);
		ЗапросВход.УстановитьПараметр("Операция" + ОбщегоНазначения.ИмяЗначенияПеречисления(Выборка.ЭлементСтруктурыЗадолженности) + Выборка.ПриходРасход, Выборка.Операция);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаполнениеДокументовФИ

Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения = Неопределено, ТекстЗаполнения = Неопределено, СтандартнаяОбработка = Истина) Экспорт
	
	ТипЗнчДанныеЗаполнения = ТипЗнч(ДанныеЗаполнения);
	
	Если ТипЗнчДанныеЗаполнения = Тип("Структура") Тогда
		Если ДанныеЗаполнения.Свойство("ФинансовыйИнструмент") Тогда
			ЗаполнитьЗначенияСвойств(Объект, ДанныеЗаполнения.ФинансовыйИнструмент, ,);
		КонецЕсли;
	ИначеЕсли ОбщегоНазначения.ЗначениеСсылочногоТипа(ДанныеЗаполнения) Тогда
		ЗаполнитьЗначенияСвойств(Объект, ДанныеЗаполнения, , "Дата,Номер,Ответственный,Комментарий,СчетаУчета");
	КонецЕсли;
	
	МСФОУХ.ОбработкаЗаполнения(Объект, ДанныеЗаполнения, Неопределено);
	
КонецПроцедуры

#КонецОбласти

#Область Проведение_СчетаУчета

Функция ТекстЗапроса_Хозрасчетный(НомераТаблиц, СписокФИ = Ложь) Экспорт
	
	НомераТаблиц.Вставить("Хозрасчетный", НомераТаблиц.Количество());
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&ФинансовыйИнструмент КАК ФИ,
	|	&Период КАК Период,
	|	&Организация КАК Организация,
	|	втСчетДт.Подразделение КАК ПодразделениеДт,
	|	втСчетДт.НаправлениеДеятельности КАК НаправлениеДеятельностиДт,
	|	втСчетКт.Подразделение КАК ПодразделениеКт,
	|	втСчетКт.НаправлениеДеятельности КАК НаправлениеДеятельностиКт,
	|	ВЫБОР
	|		КОГДА втСчетДт.СчетВалютный
	|			ТОГДА ТаблицаПроводок.Валюта
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВалютаДт,
	|	ВЫБОР
	|		КОГДА втСчетКт.СчетВалютный
	|			ТОГДА ТаблицаПроводок.Валюта
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА втСчетДт.СчетКоличественный
	|			ТОГДА ТаблицаПроводок.Количество
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК КоличествоДт,
	|	ВЫБОР
	|		КОГДА втСчетКт.СчетКоличественный
	|			ТОГДА ТаблицаПроводок.Количество
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК КоличествоКт,
	|	ВЫРАЗИТЬ(ТаблицаПроводок.Сумма * ЕСТЬNULL(КотировкаВалюты.Курс, 1) / ЕСТЬNULL(КотировкаВалюты.Кратность, 1) КАК ЧИСЛО(18, 2)) КАК Сумма,
	|	ВЫБОР
	|		КОГДА втСчетДт.СчетВалютный
	|			ТОГДА ТаблицаПроводок.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВалютнаяСуммаДт,
	|	ВЫБОР
	|		КОГДА втСчетКт.СчетВалютный
	|			ТОГДА ТаблицаПроводок.Сумма
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВалютнаяСуммаКт,
	|	втСчетДт.Счет КАК СчетДт,
	|	втСчетДт.Субконто1 КАК СубконтоДт1,
	|	втСчетДт.Субконто2 КАК СубконтоДт2,
	|	втСчетДт.Субконто3 КАК СубконтоДт3,
	|	ЕСТЬNULL(втСчетДт.ВидСубконто1, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоДт1,
	|	ЕСТЬNULL(втСчетДт.ВидСубконто2, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоДт2,
	|	ЕСТЬNULL(втСчетДт.ВидСубконто3, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоДт3,
	|	втСчетКт.Счет КАК СчетКт,
	|	втСчетКт.Субконто1 КАК СубконтоКт1,
	|	втСчетКт.Субконто2 КАК СубконтоКт2,
	|	втСчетКт.Субконто3 КАК СубконтоКт3,
	|	ЕСТЬNULL(втСчетКт.ВидСубконто1, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоКт1,
	|	ЕСТЬNULL(втСчетКт.ВидСубконто2, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоКт2,
	|	ЕСТЬNULL(втСчетКт.ВидСубконто3, ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка)) КАК ВидСубконтоКт3,
	|	ТаблицаПроводок.Комментарий КАК Содержание
	|ИЗ
	|	втТаблицаПроводок КАК ТаблицаПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСчетаФИ КАК втСчетДт
	|		ПО ТаблицаПроводок.СчетДт = втСчетДт.ВидСчетаФИ
	|			И &УсловиеСчетДт
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСчетаФИ КАК втСчетКт
	|		ПО ТаблицаПроводок.СчетКт = втСчетКт.ВидСчетаФИ
	|			И &УсловиеСчетКт
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КотировкаВалюты
	|		ПО ТаблицаПроводок.Период = КотировкаВалюты.Период
	|			И ТаблицаПроводок.Валюта = КотировкаВалюты.Валюта
	|ГДЕ
	|	ТаблицаПроводок.Сумма <> 0
	|	И НЕ втСчетДт.Счет ЕСТЬ NULL
	|	И НЕ втСчетКт.Счет ЕСТЬ NULL";

	Если СписокФИ Тогда //НачисленияПоФинансовымИнструментам
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСчетДт", "ТаблицаПроводок.ФИ = втСчетДт.ФИ");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСчетКт", "ТаблицаПроводок.ФИ = втСчетКт.ФИ");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ФинансовыйИнструмент", "ТаблицаПроводок.ФИ");
		
	Иначе 
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСчетДт", "ИСТИНА");
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеСчетКт", "ИСТИНА");
				
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область Проведение_ИнициализироватьДанныеДокумента

#Область ЗаполнитьПараметрыИнициализации

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка) Экспорт
	
	Если Запрос.Параметры.Свойство("ИмяДокумента") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ИмяДокумента", Метаданные.НайтиПоТипу(ТипЗнч(ДокументСсылка)).Имя);
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст = ТекстЗапросаРеквизитыДокументаЦБ(, Запрос.Параметры.ИмяДокумента, ДокументСсылка.Метаданные());
	
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();

	РеквизитыДокумента = ПолучениеДанныхУчетнойСистемыПереопределяемыйУХ.СтрокаТаблицыЗначенийВСтруктуру(Реквизиты);
	ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(Запрос.Параметры, РеквизитыДокумента, Ложь);
	
	ВстраиваниеУХФинансовыеИнструменты.УстановитьПараметры(Запрос);		
	УстановитьПараметрыДокументаФИ(Запрос);	
	
КонецПроцедуры

Функция ТекстЗапросаРеквизитыДокументаЦБ(НомераТаблиц = Неопределено, ИмяДокумента, МетаданныеДокумента) Экспорт 

	Если НомераТаблиц <> Неопределено Тогда
		НомераТаблиц.Вставить("Реквизиты", НомераТаблиц.Количество());	
	КонецЕсли;	
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка КАК Ссылка,
	|	НАЧАЛОПЕРИОДА(Реквизиты.Дата,ДЕНЬ) КАК ДатаНачала,
	|	Реквизиты.Дата КАК Период,
	|	Реквизиты.Организация КАК Организация,
	|	Реквизиты.ЦФО КАК ЦФО,
	|	Реквизиты.Проект КАК Проект,
	|	Реквизиты.СчетОрганизации КАК СчетОрганизации,
	|	Реквизиты.СчетКонтрагента КАК СчетКонтрагента	
	|ИЗ
	|	Документ.ПриобретениеЦеннойБумаги КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	ЗаПериод = (ИмяДокумента = "НачисленияПоФинансовымИнструментам");
	Если ЗаПериод Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "НАЧАЛОПЕРИОДА(Реквизиты.Дата,ДЕНЬ)", "НАЧАЛОПЕРИОДА(Реквизиты.ДатаНачала,ДЕНЬ)");	
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("ЦФО") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Реквизиты.ЦФО", "Неопределено");
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("Проект") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Реквизиты.Проект", "Неопределено");
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("СчетОрганизации") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Реквизиты.СчетОрганизации", "Неопределено");
	КонецЕсли;
	
	Если МетаданныеДокумента.Реквизиты.Найти("СчетКонтрагента") = Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Реквизиты.СчетКонтрагента", "Неопределено");
	КонецЕсли;
	
	Возврат СтрЗаменить(ТекстЗапроса, "ПриобретениеЦеннойБумаги", ИмяДокумента);

КонецФункции

Функция ПолучитьВыданнаяЦБ(ИмяДокумента)
	
	ВыданнаяЦБ = Неопределено;
	Если (ИмяДокумента = "ВыпускЦеннойБумаги") Или (ИмяДокумента = "ВыкупЦеннойБумаги") Тогда
		ВыданнаяЦБ = Истина;
	ИначеЕсли (ИмяДокумента = "ПриобретениеЦеннойБумаги") Или (ИмяДокумента = "ПродажаЦеннойБумаги") 
		Или (ИмяДокумента = "ВерсияГрафикаЦеннойБумаги")Тогда
		ВыданнаяЦБ = Ложь;	
	КонецЕсли;
	
	Возврат ВыданнаяЦБ;

КонецФункции

Процедура УстановитьПараметрыДокументаФИ(Запрос)
	
	Параметры = Запрос.Параметры;
	
	ЭтоНачисление = (Параметры.ИмяДокумента = "НачисленияПоФинансовымИнструментам");
	//ВыданнаяЦБ = ПолучитьВыданнаяЦБ(Параметры.ИмяДокумента);
	//ЭтоПродажа = (Параметры.ИмяДокумента = "ПродажаЦеннойБумаги");
	//
	МоментДокумента = Новый МоментВремени(Параметры.Период, Параметры.Ссылка);
	
	Запрос.УстановитьПараметр("ТекущаяДата",		ТекущаяДата());
	Запрос.УстановитьПараметр("ДатаОперации",		НачалоДня(Параметры.Период));
	Запрос.УстановитьПараметр("НачалоПериода",		Новый Граница(МоментДокумента, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ПериодДокумента", 	Новый Граница(МоментДокумента, ВидГраницы.Включая));
	Запрос.УстановитьПараметр("ПериодДоДокумента",	Новый Граница(МоментДокумента, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("УчетПоФИФО",			Истина);
	//Запрос.УстановитьПараметр("ЭтоПродажа",			ЭтоПродажа);
	//Запрос.УстановитьПараметр("ВыданнаяЦБ",			ВыданнаяЦБ);
	
	Запрос.УстановитьПараметр("ДатаНачала",		Параметры.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",	КонецДня(Параметры.Период));
		
	Запрос.УстановитьПараметр("ПустаяСсылкаРБП", 	ВстраиваниеУХКлиентСервер.ПолучитьПустуюСсылкуРБП());
	Запрос.УстановитьПараметр("ТипСсылкаРБП", 		ТипЗнч(Запрос.Параметры.ПустаяСсылкаРБП));
	
КонецПроцедуры

#КонецОбласти

#Область ДвиженияРегистровУХ

Процедура ТекстЗапроса_ДанныеЦБ(Запрос, МассивТекстовЗапроса, НомераТаблиц) Экспорт
	
	Параметры = Запрос.Параметры;
	
	МассивТекстовЗапроса.Добавить(ТекстЗапроса_втГрафикНоминала(НомераТаблиц));
	МассивТекстовЗапроса.Добавить(ТекстЗапроса_втВерсияДоДокумента(НомераТаблиц));	
	МассивТекстовЗапроса.Добавить(ТекстЗапроса_втГрафикДоДокумента(НомераТаблиц));
	МассивТекстовЗапроса.Добавить(ТекстЗапроса_втГрафикЦБ(НомераТаблиц, Параметры.ИмяДокумента));
	
	МассивТекстовЗапроса.Добавить(ТекстЗапроса_ВерсииРасчетов(НомераТаблиц));
	ДобавитьТекстЗапроса_втПараметрыОпераций(МассивТекстовЗапроса, НомераТаблиц, Параметры.ИмяДокумента);	
	МассивТекстовЗапроса.Добавить(ТекстЗапроса_РасчетыСКонтрагентамиГрафики(НомераТаблиц, Параметры.ИмяДокумента));
	МассивТекстовЗапроса.Добавить(ТекстЗапроса_РасшифровкиГрафиковЦБ(НомераТаблиц));	
	
	МассивТекстовЗапроса.Добавить(ТекстЗапроса_втПартииКСписанию(НомераТаблиц));
	МассивТекстовЗапроса.Добавить(ТекстЗапроса_втСписаниеПартий(НомераТаблиц));	
	МассивТекстовЗапроса.Добавить(ТекстЗапроса_ПартииЦенныхБумагСобытия(НомераТаблиц));
	МассивТекстовЗапроса.Добавить(ТекстЗапроса_БрокерскиеСчета(НомераТаблиц));
	
	МассивТекстовЗапроса.Добавить(Документы[Параметры.ИмяДокумента].ТекстЗапроса_СчетаДокумента(НомераТаблиц));
	МассивТекстовЗапроса.Добавить(ВстраиваниеУХФинансовыеИнструменты.ТекстЗапроса_СчетаУчета(НомераТаблиц));
	МассивТекстовЗапроса.Добавить(ТекстЗапроса_ОстаткиПоФИ(НомераТаблиц));
	МассивТекстовЗапроса.Добавить(Документы[Параметры.ИмяДокумента].ТекстЗапроса_Проводки(НомераТаблиц));
	
	ВстраиваниеУХФинансовыеИнструменты.ТекстЗапроса_Проводки(МассивТекстовЗапроса, НомераТаблиц, Параметры.ИмяДокумента);
	
	МассивТекстовЗапроса.Добавить(ТекстЗапроса_ОшибкиПроводок(НомераТаблиц));

КонецПроцедуры

#Область ТекстыЗапросов_Графики

Функция ТекстЗапроса_втГрафикНоминала(НомераТаблиц)

	НомераТаблиц.Вставить("втГрафикНоминала", НомераТаблиц.Количество());
	Возврат
	"ВЫБРАТЬ
	|	втСобытия.ДоговорКонтрагента КАК Договор,
	|	втСобытия.ФинансовыйИнструмент КАК ФинансовыйИнструмент,
	|	ГрафикиНоминалаЦенныхБумаг.ДатаОперации КАК ДатаОперации,
	|	ГрафикиНоминалаЦенныхБумаг.КолонкаГрафика КАК КолонкаГрафика,
	|	ГрафикиНоминалаЦенныхБумаг.Сумма КАК Сумма
	|ПОМЕСТИТЬ втГрафикНоминала
	|ИЗ
	|	втСобытия КАК втСобытия
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВерсияГрафикаЦеннойБумаги.ГрафикНоминалаЛинейный КАК ГрафикиНоминалаЦенныхБумаг
	|		ПО (ГрафикиНоминалаЦенныхБумаг.Ссылка = втСобытия.ПараметрыЦеннойБумаги)";

КонецФункции

Функция ТекстЗапроса_втВерсияДоДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("втВерсияДоДокумента", НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ
	|	Версии.ПредметГрафика КАК ФинансовыйИнструмент,
	|	МАКСИМУМ(Версии.Регистратор) КАК Регистратор,
	|	ЕстьNULL(МАКСИМУМ(ВерсииПоступлений.Регистратор), МАКСИМУМ(Версии.Регистратор)) КАК РегистраторПоступления
	|ПОМЕСТИТЬ втВерсияДоДокумента
	|ИЗ
	|	РегистрСведений.ВерсииРасчетов.СрезПоследних(
	|			&ПериодДоДокумента,
	|			Организация = &Организация
	|				И ПредметГрафика В
	|					(ВЫБРАТЬ
	|						т.ФинансовыйИнструмент
	|					ИЗ
	|						втСобытия КАК т)) КАК Версии
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВерсииРасчетов.СрезПоследних(
	|				&ПериодДоДокумента,
	|				Организация = &Организация
	|					И ПредметГрафика В
	|						(ВЫБРАТЬ
	|							т.ФинансовыйИнструмент
	|						ИЗ
	|							втСобытия КАК т)
	|					И ТИПЗНАЧЕНИЯ(Регистратор) В (ТИП(Документ.АкцептПротестПереводногоВекселя), ТИП(Документ.ВыпускЦеннойБумаги), ТИП(Документ.ПоступлениеВекселя), ТИП(Документ.ПриобретениеЦеннойБумаги))) КАК ВерсииПоступлений
	|		ПО Версии.ПредметГрафика = ВерсииПоступлений.ПредметГрафика
	|			И (НЕ ТИПЗНАЧЕНИЯ(Версии.Регистратор) В (ТИП(Документ.АкцептПротестПереводногоВекселя), ТИП(Документ.ВыпускЦеннойБумаги), ТИП(Документ.ПоступлениеВекселя), ТИП(Документ.ПриобретениеЦеннойБумаги)))
	|
	|СГРУППИРОВАТЬ ПО
	|	Версии.ПредметГрафика";

КонецФункции

Функция ТекстЗапроса_втГрафикДоДокумента(НомераТаблиц)

	НомераТаблиц.Вставить("втГрафикДоДокумента", НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ
	|	втВерсияДоДокумента.ФинансовыйИнструмент КАК ФинансовыйИнструмент,
	|	График.ДатаОперации КАК ДатаОперации,
	|	График.КолонкаГрафика КАК КолонкаГрафика,
	|	График.Сумма КАК Сумма,
	|	График.Договор КАК Договор
	|ПОМЕСТИТЬ втГрафикДоДокумента
	|ИЗ
	|	РегистрСведений.РасшифровкиГрафиковЦБ КАК График
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втВерсияДоДокумента КАК втВерсияДоДокумента
	|		ПО График.Регистратор = втВерсияДоДокумента.Регистратор";

КонецФункции

Функция ТекстЗапроса_втГрафикЦБ(НомераТаблиц, ИмяДокумента)
	
	НомераТаблиц.Вставить("втГрафикЦБ",	НомераТаблиц.Количество());
		
	ТекстЗапроса =  
	"ВЫБРАТЬ
	|	График.ФинансовыйИнструмент КАК ФинансовыйИнструмент,
	|	График.ФинансовыйИнструмент В
	|		(ВЫБРАТЬ
	|			т.ФинансовыйИнструмент
	|		ИЗ
	|			втСобытия КАК т
	|		ГДЕ
	|			т.ВыданнаяЦБ) КАК ВыданнаяЦБ,
	|	График.Договор КАК Договор,
	|	График.ДатаОперации КАК ДатаОперации,
	|	График.КолонкаГрафика КАК КолонкаГрафика,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.ОсновнойДолгПоступление)
	|					ИЛИ График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.НКДПриПокупке)
	|					ИЛИ График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.ПремияПриПокупке)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ОперацииГрафиковДоговоров.ОблигацияКупленная_ОсновнойДолгПолучение)
	|			КОГДА График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.ОсновнойДолгСписание)
	|					ИЛИ График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.НКДПриПродаже)
	|					ИЛИ График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.ПремияПриПродаже)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ОперацииГрафиковДоговоров.ОблигацияКупленная_ОсновнойДолгВозврат)
	|			КОГДА График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.ПроцентыКупоныНачисление)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ОперацииГрафиковДоговоров.ОблигацияКупленная_ПроцентыНачислено)
	|			КОГДА График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.ПроцентыКупоныСписание)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ОперацииГрафиковДоговоров.ОблигацияКупленная_ПроцентыУплачено)
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК ОперацияФИ,
	|	СУММА(График.Сумма) КАК Сумма
	|ПОМЕСТИТЬ втГрафикЦБ
	|ИЗ
	|	(ВЫБРАТЬ
	|		втГрафикДоДокумента.ФинансовыйИнструмент КАК ФинансовыйИнструмент,
	|		втГрафикДоДокумента.ДатаОперации КАК ДатаОперации,
	|		втГрафикДоДокумента.КолонкаГрафика КАК КолонкаГрафика,
	|		втГрафикДоДокумента.Сумма КАК Сумма,
	|		втГрафикДоДокумента.Договор КАК Договор
	|	ИЗ
	|		втГрафикДоДокумента КАК втГрафикДоДокумента
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		втГрафикНоминала.ФинансовыйИнструмент,
	|		втГрафикНоминала.ДатаОперации,
	|		втГрафикНоминала.КолонкаГрафика,
	|		ВЫБОР
	|			КОГДА втСобытия.ЭтоПродажа = ИСТИНА
	|				ТОГДА -втГрафикНоминала.Сумма * втСобытия.Количество
	|			ИНАЧЕ втГрафикНоминала.Сумма * втСобытия.Количество
	|		КОНЕЦ,
	|		втГрафикНоминала.Договор
	|	ИЗ
	|		втГрафикНоминала КАК втГрафикНоминала
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСобытия КАК втСобытия
	|			ПО втГрафикНоминала.ФинансовыйИнструмент = втСобытия.ФинансовыйИнструмент
	|	ГДЕ
	|		втГрафикНоминала.ДатаОперации >= втСобытия.ДатаОперации
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		втСобытия.ФинансовыйИнструмент,
	|		втСобытия.ДатаОперации,
	|		ВЫБОР
	|			КОГДА втСобытия.ЭтоПродажа = ИСТИНА
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.НКДПриПродаже)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.НКДПриПокупке)
	|		КОНЕЦ,
	|		втСобытия.НКД,
	|		втСобытия.ДоговорКонтрагента
	|	ИЗ
	|		втСобытия КАК втСобытия
	|	ГДЕ
	|		втСобытия.НКД <> 0
	|		И втСобытия.ЭтоПродажа <> НЕОПРЕДЕЛЕНО
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		втСобытия.ФинансовыйИнструмент,
	|		втСобытия.ДатаОперации,
	|		ВЫБОР
	|			КОГДА втСобытия.ЭтоПродажа = ИСТИНА
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.ПремияПриПродаже)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.ПремияПриПокупке)
	|		КОНЕЦ,
	|		втСобытия.Премия,
	|		втСобытия.ДоговорКонтрагента
	|	ИЗ
	|		втСобытия КАК втСобытия
	|	ГДЕ
	|		втСобытия.Премия <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		втСобытия.ФинансовыйИнструмент,
	|		втСобытия.ДатаОперации,
	|		ВЫБОР
	|			КОГДА втСобытия.ЭтоПродажа = ИСТИНА
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.КоличествоСписание)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.КоличествоПоступление)
	|		КОНЕЦ,
	|		втСобытия.Количество,
	|		втСобытия.ДоговорКонтрагента
	|	ИЗ
	|		втСобытия КАК втСобытия
	|	ГДЕ
	|		втСобытия.Количество <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		втСобытия.ФинансовыйИнструмент,
	|		втСобытия.СрокПогашения,
	|		ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.КоличествоСписание),
	|		ВЫБОР
	|			КОГДА втСобытия.ЭтоПродажа = ИСТИНА
	|				ТОГДА -втСобытия.Количество
	|			ИНАЧЕ втСобытия.Количество
	|		КОНЕЦ,
	|		втСобытия.ДоговорКонтрагента
	|	ИЗ
	|		втСобытия КАК втСобытия
	|	ГДЕ
	|		втСобытия.Количество <> 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		втСобытия.ФинансовыйИнструмент,
	|		втСобытия.ДатаОперации,
	|		ВЫБОР
	|			КОГДА втСобытия.ЭтоПродажа = ИСТИНА
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.ОсновнойДолгСписание)
	|			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.ОсновнойДолгПоступление)
	|		КОНЕЦ,
	|		втСобытия.Сумма - втСобытия.Премия - втСобытия.НКД,
	|		втСобытия.ДоговорКонтрагента
	|	ИЗ
	|		втСобытия КАК втСобытия
	|	ГДЕ
	|		втСобытия.Сумма - втСобытия.Премия - втСобытия.НКД <> 0) КАК График
	|
	|СГРУППИРОВАТЬ ПО
	|	График.КолонкаГрафика,
	|	График.ДатаОперации,
	|	График.Договор,
	|	График.ФинансовыйИнструмент";
	
	Если ИмяДокумента = "ВыпускЦеннойБумаги" ИЛИ ИмяДокумента = "ВыкупЦеннойБумаги" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.ОперацииГрафиковДоговоров.ОблигацияКупленная_",
			"Справочник.ОперацииГрафиковДоговоров.ОблигацияВыпущенная_");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область ТекстыЗапросов_Движения

Функция ТекстЗапроса_ВерсииРасчетов(НомераТаблиц) Экспорт

	НомераТаблиц.Вставить("ВерсииРасчетов", НомераТаблиц.Количество());
	
	Возврат 
	"ВЫБРАТЬ
	|	т.Дата КАК Период,
	|	т.ФинансовыйИнструмент КАК ФинансовыйИнструмент,
	|	т.ФинансовыйИнструмент КАК ПредметГрафика,
	|	&Организация КАК Организация,
	|	ИСТИНА КАК ОпорныйГрафик,
	|	т.Ссылка КАК ВерсияГрафика
	|ИЗ
	|	втСобытия КАК т
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(т.ФинансовыйИнструмент) = ТИП(Справочник.ЦенныеБумаги)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	т.Дата,
	|	т.ДоговорКонтрагента,
	|	т.ДоговорКонтрагента,
	|	&Организация,
	|	ИСТИНА,
	|	т.Ссылка
	|ИЗ
	|	втСобытия КАК т
	|ГДЕ
	|	т.ДоговорКонтрагента <> т.ФинансовыйИнструмент
	|	И т.ДоговорКонтрагента.Организация = &Организация";
	
КонецФункции

Функция ТекстЗапроса_втПартииКСписанию(НомераТаблиц)

	НомераТаблиц.Вставить("втПартииКСписанию", НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ
	|	ПартииЦенныхБумагОстатки.ФинансовыйИнструмент КАК ФинансовыйИнструмент,
	|	ПартииЦенныхБумагОстатки.Договор КАК Договор,
	|	ПартииЦенныхБумагОстатки.КоличествоОстаток КАК Количество,
	|	ПартииЦенныхБумагОстатки.СтоимостьОстаток КАК Стоимость,
	|	ПартииЦенныхБумагОстатки.НоминалОстаток КАК Номинал,
	|	ПартииЦенныхБумагОстатки.Партия.Дата КАК ПартияДата,
	|	ПартииЦенныхБумагОстатки.Партия КАК Партия,
	|	ПартииЦенныхБумагОстатки.РыночнаяСтоимостьОстаток КАК РыночнаяСтоимость
	|ПОМЕСТИТЬ втПартииКСписанию
	|ИЗ
	|	РегистрНакопления.ПартииЦенныхБумаг.Остатки(
	|			&ПериодДоДокумента,
	|			(ФинансовыйИнструмент, Договор) В
	|					(ВЫБРАТЬ
	|						т.ФинансовыйИнструмент,
	|						т.ДоговорКонтрагента
	|					ИЗ
	|						втСобытия КАК т
	|					ГДЕ
	|						т.ЭтоПродажа
	|						И т.ВыданнаяЦБ
	|						И т.ВидФИ В (ЗНАЧЕНИЕ(Перечисление.ВидыФинансовыхИнструментов.Облигация)))
	|				И &УчетПоФИФО) КАК ПартииЦенныхБумагОстатки
	|ГДЕ
	|	ПартииЦенныхБумагОстатки.КоличествоОстаток <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПартияДата,
	|	Партия";

КонецФункции

Функция ТекстЗапроса_втСписаниеПартий(НомераТаблиц)

	НомераТаблиц.Вставить("втСписаниеПартий", НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ
	|	втСобытия.Дата КАК Период,
	|	ОценкаПоСредней.ФинансовыйИнструмент КАК ФинансовыйИнструмент,
	|	ОценкаПоСредней.Договор КАК Договор,
	|	НЕОПРЕДЕЛЕНО КАК Партия,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	втСобытия.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА втСобытия.Количество >= ОценкаПоСредней.КоличествоКонечныйОстаток
	|			ТОГДА ОценкаПоСредней.НоминалКонечныйОстаток
	|		ИНАЧЕ втСобытия.Сумма
	|	КОНЕЦ КАК Номинал,
	|	ВЫБОР
	|		КОГДА втСобытия.Количество >= ОценкаПоСредней.КоличествоКонечныйОстаток
	|			ТОГДА ОценкаПоСредней.СтоимостьКонечныйОстаток
	|		ИНАЧЕ (ОценкаПоСредней.СтоимостьНачальныйОстаток + ОценкаПоСредней.СтоимостьПриход) * втСобытия.Количество / ОценкаПоСредней.КоличествоКонечныйОстаток
	|	КОНЕЦ КАК Стоимость,
	|	ВЫБОР
	|		КОГДА втСобытия.Количество >= ОценкаПоСредней.КоличествоКонечныйОстаток
	|			ТОГДА ОценкаПоСредней.РыночнаяСтоимостьКонечныйОстаток
	|		ИНАЧЕ (ОценкаПоСредней.РыночнаяСтоимостьНачальныйОстаток + ОценкаПоСредней.РыночнаяСтоимостьПриход) * втСобытия.Количество / ОценкаПоСредней.КоличествоКонечныйОстаток
	|	КОНЕЦ КАК РыночнаяСтоимость
	|ПОМЕСТИТЬ втСписаниеПартий
	|ИЗ
	|	РегистрНакопления.ПартииЦенныхБумаг.ОстаткиИОбороты(
	|			&НачалоПериода,
	|			&ПериодДоДокумента,
	|			,
	|			,
	|			(ФинансовыйИнструмент, Договор) В
	|					(ВЫБРАТЬ
	|						т.ФинансовыйИнструмент,
	|						т.ДоговорКонтрагента
	|					ИЗ
	|						втСобытия КАК т
	|					ГДЕ
	|						т.ЭтоПродажа
	|						И НЕ т.ВыданнаяЦБ
	|						И т.ВидФИ В (ЗНАЧЕНИЕ(Перечисление.ВидыФинансовыхИнструментов.Облигация)))
	|				И НЕ &УчетПоФИФО) КАК ОценкаПоСредней
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСобытия КАК втСобытия
	|		ПО ОценкаПоСредней.ФинансовыйИнструмент = втСобытия.ФинансовыйИнструмент
	|			И ОценкаПоСредней.Договор = втСобытия.ДоговорКонтрагента
	|ГДЕ
	|	НЕ &УчетПоФИФО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втСобытия.Дата,
	|	ПартияСписания.ФинансовыйИнструмент,
	|	ПартияСписания.Договор,
	|	ПартияСписания.Партия,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ВЫБОР
	|		КОГДА втСобытия.Количество >= ЕСТЬNULL(СУММА(втПартииДоПартииСпасания.Количество), 0) + ПартияСписания.Количество
	|			ТОГДА ПартияСписания.Количество
	|		КОГДА втСобытия.Количество > ЕСТЬNULL(СУММА(втПартииДоПартииСпасания.Количество), 0)
	|			ТОГДА втСобытия.Количество - ЕСТЬNULL(СУММА(втПартииДоПартииСпасания.Количество), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА втСобытия.Количество >= ЕСТЬNULL(СУММА(втПартииДоПартииСпасания.Количество), 0) + ПартияСписания.Количество
	|			ТОГДА ПартияСписания.Номинал
	|		КОГДА втСобытия.Количество > ЕСТЬNULL(СУММА(втПартииДоПартииСпасания.Количество), 0)
	|				И ПартияСписания.Количество <> 0
	|			ТОГДА ПартияСписания.Номинал * втСобытия.Количество / ПартияСписания.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА втСобытия.Количество >= ЕСТЬNULL(СУММА(втПартииДоПартииСпасания.Количество), 0) + ПартияСписания.Количество
	|			ТОГДА ПартияСписания.Стоимость
	|		КОГДА втСобытия.Количество > ЕСТЬNULL(СУММА(втПартииДоПартииСпасания.Количество), 0)
	|				И ПартияСписания.Количество <> 0
	|			ТОГДА ПартияСписания.Стоимость * втСобытия.Количество / ПартияСписания.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА втСобытия.Количество >= ЕСТЬNULL(СУММА(втПартииДоПартииСпасания.Количество), 0) + ПартияСписания.Количество
	|			ТОГДА ПартияСписания.РыночнаяСтоимость
	|		КОГДА втСобытия.Количество > ЕСТЬNULL(СУММА(втПартииДоПартииСпасания.Количество), 0)
	|				И ПартияСписания.Количество <> 0
	|			ТОГДА ПартияСписания.РыночнаяСтоимость * втСобытия.Количество / ПартияСписания.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	втПартииКСписанию КАК ПартияСписания
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПартииКСписанию КАК втПартииДоПартииСпасания
	|		ПО (ВЫБОР
	|				КОГДА ПартияСписания.ПартияДата > втПартииДоПартииСпасания.ПартияДата
	|					ТОГДА ИСТИНА
	|				КОГДА ПартияСписания.ПартияДата = втПартииДоПартииСпасания.ПартияДата
	|					ТОГДА ПартияСписания.Партия > втПартииДоПартииСпасания.Партия
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСобытия КАК втСобытия
	|		ПО ПартияСписания.ФинансовыйИнструмент = втСобытия.ФинансовыйИнструмент
	|			И ПартияСписания.Договор = втСобытия.ДоговорКонтрагента
	|ГДЕ
	|	&УчетПоФИФО
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартияСписания.ФинансовыйИнструмент,
	|	ПартияСписания.Договор,
	|	ПартияСписания.Количество,
	|	ПартияСписания.Стоимость,
	|	ПартияСписания.РыночнаяСтоимость,
	|	ПартияСписания.Номинал,
	|	ПартияСписания.ПартияДата,
	|	ПартияСписания.Партия,
	|	втСобытия.Дата,
	|	втСобытия.Количество
	|
	|ИМЕЮЩИЕ
	|	ВЫБОР
	|		КОГДА втСобытия.Количество >= ЕСТЬNULL(СУММА(втПартииДоПартииСпасания.Количество), 0) + ПартияСписания.Количество
	|			ТОГДА ПартияСписания.Количество
	|		КОГДА втСобытия.Количество > ЕСТЬNULL(СУММА(втПартииДоПартииСпасания.Количество), 0)
	|			ТОГДА втСобытия.Количество - ЕСТЬNULL(СУММА(втПартииДоПартииСпасания.Количество), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ > 0";
	
КонецФункции

Функция ТекстЗапроса_ПартииЦенныхБумагСобытия(НомераТаблиц)
	
	НомераТаблиц.Вставить("ПартииЦенныхБумаг", НомераТаблиц.Количество());
	
	Возврат 
	"ВЫБРАТЬ
	|	втСписаниеПартий.Период КАК Период,
	|	втСписаниеПартий.ФинансовыйИнструмент КАК ФинансовыйИнструмент,
	|	втСписаниеПартий.Партия КАК Партия,
	|	втСписаниеПартий.ВидДвижения КАК ВидДвижения,
	|	втСписаниеПартий.Договор КАК Договор,
	|	втСписаниеПартий.Количество КАК Количество,
	|	втСписаниеПартий.Номинал КАК Номинал,
	|	втСписаниеПартий.Стоимость КАК Стоимость,
	|	втСписаниеПартий.РыночнаяСтоимость КАК РыночнаяСтоимость
	|ИЗ
	|	втСписаниеПартий КАК втСписаниеПартий
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	т.Дата,
	|	т.ФинансовыйИнструмент,
	|	ВЫБОР
	|		КОГДА &УчетПоФИФО
	|			ТОГДА т.Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	т.ДоговорКонтрагента,
	|	т.Количество,
	|	т.Сумма - т.НКД - т.Премия,
	|	т.Сумма,
	|	т.Сумма - т.НКД
	|ИЗ
	|	втСобытия КАК т
	|ГДЕ
	|	НЕ т.ЭтоПродажа
	|	И НЕ т.ВыданнаяЦБ
	|	И т.ВидФИ В (ЗНАЧЕНИЕ(Перечисление.ВидыФинансовыхИнструментов.Облигация))";

КонецФункции

Процедура ДобавитьТекстЗапроса_втПараметрыОпераций(МассивТекстовЗапроса, НомераТаблиц, ИмяДокумента)

	Если Метаданные.Документы.Найти(ИмяДокумента).ТабличныеЧасти.Найти("ПараметрыОпераций") <> Неопределено Тогда
		
		НомераТаблиц.Вставить("ВТ_ПараметрыОпераций", НомераТаблиц.Количество());
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ПараметрыОпераций.ОперацияГрафика КАК ОперацияГрафика,
		|	ПараметрыОпераций.СтатьяБюджета КАК СтатьяБюджета,
		|	ПараметрыОпераций.Аналитика1 КАК Аналитика1,
		|	ПараметрыОпераций.Аналитика2 КАК Аналитика2,
		|	ПараметрыОпераций.Аналитика3 КАК Аналитика3,
		|	ПараметрыОпераций.Аналитика4 КАК Аналитика4,
		|	ПараметрыОпераций.Аналитика5 КАК Аналитика5,
		|	ПараметрыОпераций.Аналитика6 КАК Аналитика6
		|ПОМЕСТИТЬ ВТ_ПараметрыОпераций
		|ИЗ
		|	Документ.ВыпускЦеннойБумаги.ПараметрыОпераций КАК ПараметрыОпераций
		|ГДЕ
		|	ПараметрыОпераций.Ссылка = &Ссылка";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Документ.ВыпускЦеннойБумаги.ПараметрыОпераций", 
			"Документ." + ИмяДокумента + ".ПараметрыОпераций");
		
		МассивТекстовЗапроса.Добавить(ТекстЗапроса);
		
	КонецЕсли;
	
КонецПроцедуры
	
Функция ТекстЗапроса_РасчетыСКонтрагентамиГрафики(НомераТаблиц, ИмяДокумента)

	НомераТаблиц.Вставить("РасчетыСКонтрагентамиГрафики", НомераТаблиц.Количество());
	
	Если Метаданные.Документы.Найти(ИмяДокумента).ТабличныеЧасти.Найти("ПараметрыОпераций") <> Неопределено Тогда 
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Ссылка КАК ВерсияГрафика,
		|	&Организация КАК Организация,
		|	График.ФинансовыйИнструмент КАК ПредметГрафика,
		|	График.Договор.Контрагент КАК Контрагент,
		|	ВЫБОР
		|		КОГДА График.ОперацияФИ.НаправлениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
		|	КОНЕЦ КАК ВидДвижения,
		|	ВЫБОР
		|		КОГДА График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.ОсновнойДолгПоступление)
		|				ИЛИ График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.НКДПриПокупке)
		|				ИЛИ График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.ПремияПриПокупке)
		|			ТОГДА ВЫБОР
		|					КОГДА График.ВыданнаяЦБ
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
		|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
		|				КОНЕЦ
		|		КОГДА График.ВыданнаяЦБ
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
		|	КОНЕЦ КАК ПриходРасход,
		|	График.ДатаОперации КАК Период,
		|	ВТ_ПараметрыОпераций.СтатьяБюджета КАК СтатьяБюджета,
		|	График.ОперацияФИ КАК Операция,
		|	График.ОперацияФИ.ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности,
		|	СУММА(График.Сумма) КАК Сумма,
		|	ВТ_ПараметрыОпераций.Аналитика1 КАК Аналитика1,
		|	ВТ_ПараметрыОпераций.Аналитика2 КАК Аналитика2,
		|	ВТ_ПараметрыОпераций.Аналитика3 КАК Аналитика3,
		|	ВТ_ПараметрыОпераций.Аналитика4 КАК Аналитика4,
		|	ВТ_ПараметрыОпераций.Аналитика5 КАК Аналитика5,
		|	ВТ_ПараметрыОпераций.Аналитика6 КАК Аналитика6,
		|	&ЦФО КАК ЦФО,
		|	&Проект КАК Проект,
		|	&СчетОрганизации КАК СчетОрганизации,
		|	&СчетКонтрагента КАК СчетКонтрагента
		|ИЗ
		|	втГрафикЦБ КАК График
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПараметрыОпераций КАК ВТ_ПараметрыОпераций
		|		ПО (ВТ_ПараметрыОпераций.ОперацияГрафика = График.ОперацияФИ)
		|ГДЕ
		|	График.ФинансовыйИнструмент.ВидФинансовогоИнструмента = ЗНАЧЕНИЕ(Перечисление.ВидыФинансовыхИнструментов.Облигация)
		|	И График.ОперацияФИ <> ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ПараметрыОпераций.СтатьяБюджета,
		|	График.ФинансовыйИнструмент,
		|	График.ДатаОперации,
		|	ВЫБОР
		|		КОГДА График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.ОсновнойДолгПоступление)
		|				ИЛИ График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.НКДПриПокупке)
		|				ИЛИ График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.ПремияПриПокупке)
		|			ТОГДА ВЫБОР
		|					КОГДА График.ВыданнаяЦБ
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
		|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
		|				КОНЕЦ
		|		КОГДА График.ВыданнаяЦБ
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
		|	КОНЕЦ,
		|	График.ОперацияФИ,
		|	График.Договор.Контрагент,
		|	График.ОперацияФИ.ЭлементСтруктурыЗадолженности,
		|	ВТ_ПараметрыОпераций.Аналитика1,
		|	ВТ_ПараметрыОпераций.Аналитика2,
		|	ВТ_ПараметрыОпераций.Аналитика3,
		|	ВТ_ПараметрыОпераций.Аналитика4,
		|	ВТ_ПараметрыОпераций.Аналитика5,
		|	ВТ_ПараметрыОпераций.Аналитика6,
		|	ВЫБОР
		|		КОГДА График.ОперацияФИ.НаправлениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
		|	КОНЕЦ";
			
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ
		|	&Ссылка КАК ВерсияГрафика,
		|	&Организация КАК Организация,
		|	График.ФинансовыйИнструмент КАК ПредметГрафика,
		|	График.Договор.Контрагент КАК Контрагент,
		|	ВЫБОР
		|		КОГДА График.ОперацияФИ.НаправлениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
		|	КОНЕЦ КАК ВидДвижения,
		|	ВЫБОР
		|		КОГДА График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.ОсновнойДолгПоступление)
		|				ИЛИ График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.НКДПриПокупке)
		|				ИЛИ График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.ПремияПриПокупке)
		|			ТОГДА ВЫБОР
		|					КОГДА График.ВыданнаяЦБ
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
		|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
		|				КОНЕЦ
		|		КОГДА График.ВыданнаяЦБ
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
		|	КОНЕЦ КАК ПриходРасход,
		|	График.ДатаОперации КАК Период,
		|	НастройкиФинансовыхИнструментов.СтатьяБюджета КАК СтатьяБюджета,
		|	График.ОперацияФИ КАК Операция,
		|	График.ОперацияФИ.ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности,
		|	СУММА(График.Сумма) КАК Сумма
		|ИЗ
		|	втГрафикЦБ КАК График
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиФинансовыхИнструментов КАК НастройкиФинансовыхИнструментов
		|		ПО (ВЫБОР
		|				КОГДА График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.ОсновнойДолгПоступление)
		|						ИЛИ График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.НКДПриПокупке)
		|						ИЛИ График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.ПремияПриПокупке)
		|					ТОГДА НастройкиФинансовыхИнструментов.Операция В (ЗНАЧЕНИЕ(Справочник.ОперацииГрафиковДоговоров.ОблигацияКупленная_ОсновнойДолгПолучение), ЗНАЧЕНИЕ(Справочник.ОперацииГрафиковДоговоров.ОблигацияВыпущенная_ОсновнойДолгПолучение))
		|				КОГДА График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.ОсновнойДолгСписание)
		|						ИЛИ График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.НКДПриПродаже)
		|						ИЛИ График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.ПремияПриПродаже)
		|					ТОГДА НастройкиФинансовыхИнструментов.Операция В (ЗНАЧЕНИЕ(Справочник.ОперацииГрафиковДоговоров.ОблигацияКупленная_ОсновнойДолгВозврат), ЗНАЧЕНИЕ(Справочник.ОперацииГрафиковДоговоров.ОблигацияВыпущенная_ОсновнойДолгВозврат))
		|				КОГДА График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.ПроцентыКупоныНачисление)
		|					ТОГДА НастройкиФинансовыхИнструментов.Операция В (ЗНАЧЕНИЕ(Справочник.ОперацииГрафиковДоговоров.ОблигацияКупленная_ПроцентыНачислено), ЗНАЧЕНИЕ(Справочник.ОперацииГрафиковДоговоров.ОблигацияВыпущенная_ПроцентыНачислено))
		|				КОГДА График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.ПроцентыКупоныСписание)
		|					ТОГДА НастройкиФинансовыхИнструментов.Операция В (ЗНАЧЕНИЕ(Справочник.ОперацииГрафиковДоговоров.ОблигацияКупленная_ПроцентыУплачено), ЗНАЧЕНИЕ(Справочник.ОперацииГрафиковДоговоров.ОблигацияВыпущенная_ПроцентыУплачено))
		|				ИНАЧЕ ЛОЖЬ
		|			КОНЕЦ)
		|ГДЕ
		|	График.ФинансовыйИнструмент.ВидФинансовогоИнструмента = ЗНАЧЕНИЕ(Перечисление.ВидыФинансовыхИнструментов.Облигация)
		|
		|СГРУППИРОВАТЬ ПО
		|	НастройкиФинансовыхИнструментов.СтатьяБюджета,
		|	График.ФинансовыйИнструмент,
		|	График.ДатаОперации,
		|	ВЫБОР
		|		КОГДА График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.ОсновнойДолгПоступление)
		|				ИЛИ График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.НКДПриПокупке)
		|				ИЛИ График.КолонкаГрафика = ЗНАЧЕНИЕ(Перечисление.КолонкиГрафика.ПремияПриПокупке)
		|			ТОГДА ВЫБОР
		|					КОГДА График.ВыданнаяЦБ
		|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
		|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
		|				КОНЕЦ
		|		КОГДА График.ВыданнаяЦБ
		|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход)
		|	КОНЕЦ,
		|	График.ОперацияФИ,
		|	График.Договор.Контрагент,
		|	График.ОперацияФИ.ЭлементСтруктурыЗадолженности,
		|	ВЫБОР
		|		КОГДА График.ОперацияФИ.НаправлениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход)
		|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДВиженияНакопления.Расход)
		|	КОНЕЦ";
			
	КонецЕсли;
	
	Если Не ИдентификацияПродуктаУХКлиентСервер.ЭтоЕХ() Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Договор.Контрагент", "Договор.Владелец");
	КонецЕсли;

	Возврат ТекстЗапроса;
	
КонецФункции
	
Функция ТекстЗапроса_РасшифровкиГрафиковЦБ(НомераТаблиц)

	НомераТаблиц.Вставить("РасшифровкиГрафиковЦБ",	НомераТаблиц.Количество());
		
	Возврат 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	График.Договор,
	|	График.ДатаОперации,
	|	График.КолонкаГрафика,
	|	СУММА(График.Сумма) КАК Сумма
	|ИЗ
	|	втГрафикЦБ КАК График
	|
	|СГРУППИРОВАТЬ ПО
	|	График.ДатаОперации,
	|	График.КолонкаГрафика,
	|	График.Договор";

КонецФункции

Функция ТекстЗапроса_БрокерскиеСчета(НомераТаблиц)

	НомераТаблиц.Вставить("БрокерскиеСчета", НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ
	|	т.Дата КАК Период,
	|	т.ФинансовыйИнструмент КАК _ФинансовыйИнструмент,
	|	т.ДоговорКонтрагента КАК ДоговорБрокерскогоСчета,
	|	ВЫБОР
	|		КОГДА т.ЭтоПродажа
	|			ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	КОНЕЦ КАК ВидДвижения,
	|	т.Сумма КАК Сумма
	|ИЗ
	|	втСобытия КАК т
	|ГДЕ
	|	т.Биржа <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И НЕ т.ВыданнаяЦБ";	

КонецФункции

#КонецОбласти

#Область ТекстыЗапросов_Проводки

Функция ТекстЗапроса_ОстаткиПоФИ(НомераТаблиц)

	//если счет НКД и счет учета ФИ совпадают, тогда возможен остаток НКД на счете ФИ, его спишем отдельно, для этого отделим рыночную стоимость от НКД
	НомераТаблиц.Вставить("втОстатки", НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ
	|	втСобытия.Дата КАК Дата,
	|	втСобытия.ВидОперации КАК ВидОперации,
	|	ХозрасчетныйОстатки.Субконто1 КАК ФинансовыйИнструмент,
	|	ХозрасчетныйОстатки.Валюта КАК Валюта,
	|	ХозрасчетныйОстатки.Счет КАК Счет,
	|	ЕСТЬNULL(ХозрасчетныйОстатки.Подразделение, НЕОПРЕДЕЛЕНО) КАК Подразделение,
	|	ВЫБОР
	|		КОГДА ХозрасчетныйОстатки.Счет.Валютный
	|			ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|		ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
	|	КОНЕЦ КАК СуммаОстаток,
	|	НЕ СовпадаютСчета_ФИ_НКД.Счет ЕСТЬ NULL КАК ЭтоСчетФИ,
	|	втСписаниеПартийДляДисконта.РыночнаяСтоимость КАК РыночнаяСтоимостьПартий,
	|	ХозрасчетныйОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втСписаниеПартийДляДисконта.РыночнаяСтоимость, 0) <> 0
	|			ТОГДА втСписаниеПартийДляДисконта.РыночнаяСтоимость
	|		КОГДА ЕСТЬNULL(ХозрасчетныйОстатки.КоличествоОстаток, 0) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА ХозрасчетныйОстатки.Счет.Валютный
	|						ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|					ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
	|				КОНЕЦ
	|		ИНАЧЕ ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА ХозрасчетныйОстатки.Счет.Валютный
	|						ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|					ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
	|				КОНЕЦ * втСобытия.Количество / ХозрасчетныйОстатки.КоличествоОстаток КАК ЧИСЛО(18, 2))
	|	КОНЕЦ КАК РыночнаяСтоимостьОстаток,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втСписаниеПартийДляДисконта.РыночнаяСтоимость, 0) = 0
	|				ИЛИ СовпадаютСчета_ФИ_НКД.СчетНКД ЕСТЬ NULL
	|			ТОГДА 0
	|		КОГДА ХозрасчетныйОстатки.КоличествоОстаток = 0
	|			ТОГДА ВЫБОР
	|					КОГДА ХозрасчетныйОстатки.Счет.Валютный
	|						ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|					ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
	|				КОНЕЦ - втСписаниеПартийДляДисконта.РыночнаяСтоимость
	|		ИНАЧЕ (ВЫРАЗИТЬ(ВЫБОР
	|					КОГДА ХозрасчетныйОстатки.Счет.Валютный
	|						ТОГДА ХозрасчетныйОстатки.ВалютнаяСуммаОстаток
	|					ИНАЧЕ ХозрасчетныйОстатки.СуммаОстаток
	|				КОНЕЦ * втСобытия.Количество / ХозрасчетныйОстатки.КоличествоОстаток КАК ЧИСЛО(18, 2))) - втСписаниеПартийДляДисконта.РыночнаяСтоимость
	|	КОНЕЦ КАК ОстатокНКД
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(
	|			&ПериодДоДокумента,
	|			Счет В
	|				(ВЫБРАТЬ
	|					т.Ссылка
	|				ИЗ
	|					ПланСчетов.Хозрасчетный.ВидыСубконто КАК т
	|				ГДЕ
	|					т.ВидСубконто = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги)),
	|			ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ЦенныеБумаги),
	|			Организация = &Организация
	|				И Субконто1 В
	|					(ВЫБРАТЬ
	|						т.ФинансовыйИнструмент
	|					ИЗ
	|						втСобытия КАК т
	|					ГДЕ
	|						т.ЭтоПродажа)) КАК ХозрасчетныйОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ ПЕРВЫЕ 1
	|			СчетУчетаФИ.Счет КАК Счет,
	|			СчетУчетаФИ.Счет КАК СчетНКД
	|		ИЗ
	|			втСчетаДокумента КАК СчетУчетаФИ
	|				ЛЕВОЕ СОЕДИНЕНИЕ втСчетаДокумента КАК СчетНКД
	|				ПО СчетУчетаФИ.Счет = СчетНКД.Счет
	|					И (СчетНКД.ВидСчетаФИ = ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетНКД))
	|		ГДЕ
	|			СчетУчетаФИ.ВидСчетаФИ = ЗНАЧЕНИЕ(Справочник.ВидыСчетовФИ.СчетУчетаФИ)) КАК СовпадаютСчета_ФИ_НКД
	|		ПО ХозрасчетныйОстатки.Счет = СовпадаютСчета_ФИ_НКД.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СУММА(т.Стоимость) КАК Стоимость,
	|			СУММА(т.РыночнаяСтоимость) КАК РыночнаяСтоимость
	|		ИЗ
	|			втСписаниеПартий КАК т) КАК втСписаниеПартийДляДисконта
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСобытия КАК втСобытия
	|		ПО ХозрасчетныйОстатки.Субконто1 = втСобытия.ФинансовыйИнструмент";

КонецФункции

Функция ТекстЗапроса_ОшибкиПроводок(НомераТаблиц, СписокФИ = Ложь) Экспорт

	НомераТаблиц.Вставить("ОшибкиПроводок", НомераТаблиц.Количество());

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаПроводок.ФинансовыйИнструмент КАК ФинансовыйИнструмент,
	|	&Ссылка КАК Ссылка,
	|	втСчетДт.Счет КАК СчетДт,
	|	втСчетКт.Счет КАК СчетКт,
	|	ТаблицаПроводок.СчетДт КАК ВидСчетаДт,
	|	ТаблицаПроводок.СчетКт КАК ВидСчетаКт,
	|	ТаблицаПроводок.Комментарий КАК Комментарий
	|ИЗ
	|	втТаблицаПроводок КАК ТаблицаПроводок
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСчетаФИ КАК втСчетДт
	|		ПО ТаблицаПроводок.СчетДт = втСчетДт.ВидСчетаФИ
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСчетаФИ КАК втСчетКт
	|		ПО ТаблицаПроводок.СчетКт = втСчетКт.ВидСчетаФИ
	|ГДЕ
	|	(ЕСТЬNULL(втСчетДт.Счет, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)
	|			ИЛИ ЕСТЬNULL(втСчетКт.Счет, ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка)) = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПустаяСсылка))
	|	И ТаблицаПроводок.Сумма <> 0";
		
	Если СписокФИ Тогда //НачисленияПоФинансовымИнструментам
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ФинансовыйИнструмент", "ТаблицаПроводок.ФИ");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
		
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ПроведениеЦБ_Устарело

Процедура ПроверитьДатуЦБ(ДокументОбъект, Отказ, Выданный = Истина, Погашение = Истина, РежимЗаписи = Неопределено) Экспорт

	Если (РежимЗаписи <> Неопределено) И (РежимЗаписи <> РежимЗаписиДокумента.Проведение) Тогда
		Возврат;
	КонецЕсли;

	Если (Не Выданный) И (ДокументОбъект.Дата < НачалоДня(ДокументОбъект.ФинансовыйИнструмент.ДатаВыпуска)) Тогда
		ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Дата операции по полученной ценной бумаге не может быть раньше даты выпуска'"), Отказ);
	ИначеЕсли (Выданный) И (Не Погашение) И (ДокументОбъект.Дата > КонецДня(ДокументОбъект.ФинансовыйИнструмент.ДатаВыпуска)) Тогда 
		ТекстСообщения = НСтр("ru = 'Дата операции (%ДатаОперации%) по выданной ценной бумаге не может быть позже даты выпуска (%ДатаВыпуска%)'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДатаОперации%", Строка(ДокументОбъект.Дата));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ДатаВыпуска%", Строка(КонецДня(ДокументОбъект.ФинансовыйИнструмент.ДатаВыпуска)));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, Отказ);
	КонецЕсли;
	
	Если Погашение Тогда
		
		Если Выданный И (ДокументОбъект.Дата < НачалоДня(ДокументОбъект.ФинансовыйИнструмент.СрокПогашения)) Тогда
		    //ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Дата операции погашения по выданной ценной бумаге не может быть раньше срока погашения'"), Отказ);
		ИначеЕсли (Не Выданный) И (ДокументОбъект.Дата > КонецДня(ДокументОбъект.ФинансовыйИнструмент.СрокПогашения)) Тогда
			
			Если ДокументОбъект.ФинансовыйИнструмент.ВидФинансовогоИнструмента = Перечисления.ВидыФинансовыхИнструментов.Облигация Тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Дата операции погашения по полученной облигации не может позже срока погашения'"), Отказ);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
