////////////////////////////////////////////////////////////////////////////////
// Модуль содержит процедуры и функции общего назначения, 
// результат которых используется повторно.
////////////////////////////////////////////////////////////////////////////////
#Область ПрограммныйИнтерфейс
Функция ВернутьСписокРеквизитов(ВидСубконто) Экспорт
	
	Реквизиты = Новый СписокЗначений;

	Тип = ВидСубконто.ТипЗначения.Типы()[0];
	
	ЭтоАналитикаПримитивногоТипа = (Тип = Тип("Строка") ИЛИ Тип = Тип("Дата") ИЛИ Тип = Тип("Булево") ИЛИ Тип = Тип("Число"));
	Если ЭтоАналитикаПримитивногоТипа Тогда
		Реквизиты.Добавить("", Нстр("ru = '<Значение>'"));
		Возврат Реквизиты;
	КонецЕсли;
	
	НовыйОбъектТекущегоТипа = Новый(Тип);
	МетаданныеТекущегоТипа = НовыйОбъектТекущегоТипа.Метаданные();
	
	Если Метаданные.Справочники.Содержит(МетаданныеТекущегоТипа) Тогда
		РеквизитОсновногоПредставления = ?(МетаданныеТекущегоТипа.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеСправочника.ВВидеКода, "Код", "Наименование");
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеТекущегоТипа) Тогда
		РеквизитОсновногоПредставления = ?(МетаданныеТекущегоТипа.ОсновноеПредставление = Метаданные.СвойстваОбъектов.ОсновноеПредставлениеВидаХарактеристики.ВВидеКода, "Код", "Наименование");		
	ИначеЕсли Метаданные.Перечисления.Содержит(МетаданныеТекущегоТипа) Тогда
		РеквизитОсновногоПредставления = "Наименование";
	Иначе
		РеквизитОсновногоПредставления = Неопределено;
	КонецЕсли;
	
	Если НЕ РеквизитОсновногоПредставления = Неопределено Тогда
		Реквизиты.Добавить("", СтрШаблон(Нстр("ru = '<Основное представление (%1)>'"), РеквизитОсновногоПредставления));
	КонецЕсли;
	
	Если Метаданные.Справочники.Содержит(МетаданныеТекущегоТипа) ИЛИ Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеТекущегоТипа) Тогда
		
		Если МетаданныеТекущегоТипа.ДлинаКода > 0 Тогда
			Реквизит = МетаданныеТекущегоТипа.СтандартныеРеквизиты.Код;
			Реквизиты.Добавить(Реквизит.Имя, ?(ПустаяСтрока(Реквизит.Синоним), Реквизит.Имя, Реквизит.Синоним));
		КонецЕсли;
		
		Если МетаданныеТекущегоТипа.ДлинаНаименования > 0 Тогда
			Реквизит = МетаданныеТекущегоТипа.СтандартныеРеквизиты.Наименование;
			Реквизиты.Добавить(Реквизит.Имя, ?(ПустаяСтрока(Реквизит.Синоним), Реквизит.Имя, Реквизит.Синоним));
		КонецЕсли;
		
		Для Каждого Реквизит Из МетаданныеТекущегоТипа.Реквизиты Цикл
			Если СтрНайти(Реквизит.Имя,"НСИ_")>0 ИЛИ Реквизит.Тип.Типы().Количество() > 1 Тогда
				Продолжить;
			КонецЕсли;
			ТипРеквизита = Реквизит.Тип.Типы()[0];
			Если ТипРеквизита = Тип("Строка") ИЛИ ТипРеквизита = Тип("Число") ИЛИ ТипРеквизита = Тип("Дата") ИЛИ ТипРеквизита = Тип("Булево") Тогда
				Реквизиты.Добавить(Реквизит.Имя, ?(ПустаяСтрока(Реквизит.Синоним), Реквизит.Имя, Реквизит.Синоним));
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

// Возвращает объект типа ОписаниеТипов, соответствующий указанному значению 
// типа ПеречислениеСсылка.ТипыЗначенийПоказателейОтчетов.
//
Функция ПолучитьОписаниеТиповПоТипуЗначения(ТипЗначения,Размерность=0,УровеньТочности=0) Экспорт
	
	Если ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда
		
		Возврат Новый ОписаниеТипов("Булево");
		
	ИначеЕсли ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда
		
		Возврат Новый ОписаниеТипов("Дата");
		
	ИначеЕсли ТипЗначения = Перечисления.ТипыЗначенийПоказателейОтчетов.Строка Тогда
		
		Возврат Новый ОписаниеТипов("Строка");
		
	Иначе
		
		Возврат Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(?(Размерность=0,18,Размерность), ?(УровеньТочности=0,5,УровеньТочности)));
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПустоеЗначениеПоТипуПоказателя(ТипЗначенияПоказателя) Экспорт
	
	Возврат ПолучитьОписаниеТиповПоТипуЗначения(ТипЗначенияПоказателя).ПривестиЗначение();
	
КонецФункции // ПолучитьОписаниеТипаПоТипуПоказателя()

Функция ПолучитьПустоеЗначениеПоВидуАналитики(ВидАналитики) Экспорт
	
	Возврат ВидАналитики.ТипЗначения.ПривестиЗначение(Неопределено);
	
КонецФункции // ПолучитьОписаниеТипаПоТипуПоказателя()

Функция ПолучитьОписаниеТипаПоТипуПоказателя(ТипЗначенияПоказателя) Экспорт
	
	Если ТипЗначенияПоказателя=Перечисления.ТипыЗначенийПоказателейОтчетов.Булево Тогда
		Возврат ПолучитьОписаниеТиповБулево();
	ИначеЕсли ТипЗначенияПоказателя=Перечисления.ТипыЗначенийПоказателейОтчетов.Дата Тогда
		Возврат ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя);
	ИначеЕсли ТипЗначенияПоказателя=Перечисления.ТипыЗначенийПоказателейОтчетов.Строка Тогда
		Возврат ПолучитьОписаниеТиповСтроки(500);
	ИначеЕсли ТипЗначенияПоказателя=Перечисления.ТипыЗначенийПоказателейОтчетов.Число Тогда
		Возврат ПолучитьОписаниеТиповЧисла(18,5);
	КонецЕсли;
	
КонецФункции // ПолучитьОписаниеТипаПоТипуПоказателя()

Функция ПолучитьПустуюСсылкуПоТаблицеАналитики(ТаблицаАналитики) Экспорт
	
	МетаданныеОбъекта=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ТаблицаАналитики,".");
	
	ТипОбъектаМетаданных=МетаданныеОбъекта[0];
	ИмяОбъектаМетаданных=МетаданныеОбъекта[1];
	
	Если ТипОбъектаМетаданных="Справочник" Тогда
		
		Возврат Справочники[ИмяОбъектаМетаданных].ПустаяСсылка();
		
	ИначеЕсли ТипОбъектаМетаданных="Документ" Тогда
		
		Возврат Документы[ИмяОбъектаМетаданных].ПустаяСсылка();
		
	ИначеЕсли ТипОбъектаМетаданных="ПланСчетов" Тогда
		
		Возврат ПланыСчетов[ИмяОбъектаМетаданных].ПустаяСсылка();
		
	ИначеЕсли ТипОбъектаМетаданных="ПланВидовХарактеристик" Тогда
		
		Возврат ПланыВидовХарактеристик[ИмяОбъектаМетаданных].ПустаяСсылка();
		
	ИначеЕсли ТипОбъектаМетаданных="Перечисление" Тогда
		
		Возврат Перечисления[ИмяОбъектаМетаданных].ПустаяСсылка();
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
КонецФункции // ПолучитьПустуюСсылкуПоТаблицеАналитики() 

Функция ВернутьМакетПоБланкуОтчета(БланкОтчета) Экспорт
	
	Возврат БланкОтчета.Макет.Получить();
	
КонецФункции

Функция ПолучитьПустоеЗначениеУникальногоИдентификатора() Экспорт
	
	ОписаниеТипа = Новый ОписаниеТипов("УникальныйИдентификатор");
	
	Возврат ОписаниеТипа.ПривестиЗначение();
	
КонецФункции

Функция ДлинаКодаСправочника(Имя) Экспорт
	
	Возврат Метаданные.Справочники[Имя].ДлинаКода;
	
Конецфункции

Функция ПолучитьПараметрыОбъектаДляЗаписи(ИмяОбъекта, Повторно = Неопределено) Экспорт

	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	СправочникиБД.СоздаватьПриНеудачномПоискеПриИмпорте,
	|	СправочникиБД.Реквизиты.(
	|		Имя,
	|		Обязательный,
	|		Синоним
	|	) КАК Реквизиты,
	|	СправочникиБД.Владельцы.(
	|		Имя
	|	) КАК Владельцы
	|ИЗ
	|	Справочник.СправочникиБД КАК СправочникиБД
	|ГДЕ
	|	СправочникиБД.Наименование = &Наименование";
	
	Запрос.УстановитьПараметр("Наименование",ИмяОбъекта);
	
	Результат=Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		
		Возврат Результат;
		
	ИначеЕсли Повторно = Неопределено Тогда
		
		ОбщегоНазначенияУХ.ОбновитьОписаниеОбъектаБД(Неопределено,"Справочник",ИмяОбъекта,Справочники.ТипыБазДанных.ТекущаяИБ);
		Возврат ПолучитьПараметрыОбъектаДляЗаписи(ИмяОбъекта, Новый УникальныйИдентификатор());
		
	Иначе
	
		Возврат Неопределено;
		
	КонецЕсли;
		
КонецФункции // ПолучитьПараметрыОбъектаДляЗаписи()

Функция ПолучитьДанныеПараметрическойНастройки(ПравилоОбработки,ДатаАктуальности) Экспорт
	
	Запрос=Новый Запрос;
	
	Запрос.Текст="ВЫБРАТЬ
	|	ХранилищаПараметрическойНастройки.ДанныеПараметрическойНастройки
	|ИЗ
	|	РегистрСведений.ХранилищаПараметрическойНастройки КАК ХранилищаПараметрическойНастройки
	|ГДЕ
	|	ХранилищаПараметрическойНастройки.ПравилоОбработки = &ПравилоОбработки";
	
	Запрос.УстановитьПараметр("ПравилоОбработки",ПравилоОбработки);
	
	Результат=Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	Возврат Результат.ДанныеПараметрическойНастройки.Получить();
		
КонецФункции // ПолучитьДанныеПараметрическойНастройки()

Функция ПолучитьДанныеПараметрическойНастройкиРасширенный(ПравилоОбработки,Уровень,ДатаАктуальности) Экспорт
	
	Запрос = Новый Запрос;	
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ХранилищаПараметрическойНастройкиРасширенный.ДанныеПараметрическойНастройки
		|ИЗ
		|	РегистрСведений.ХранилищаПараметрическойНастройкиРасширенный КАК ХранилищаПараметрическойНастройкиРасширенный
		|ГДЕ
		|	ХранилищаПараметрическойНастройкиРасширенный.ПравилоОбработки = &ПравилоОбработки
		|	И ХранилищаПараметрическойНастройкиРасширенный.Уровень = &Уровень";
	
	Запрос.УстановитьПараметр("ПравилоОбработки",ПравилоОбработки);
	Запрос.УстановитьПараметр("Уровень",Уровень);
	
	Результат = Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	Возврат Результат.ДанныеПараметрическойНастройки.Получить();
		
КонецФункции 

Функция ПолучитьПравилаПересчетаПоказателей(ПравилоОбработки,ДатаАктуальности) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ХранилищаПравилПересчета.ПравилаПересчетаПоказателей
	|ИЗ
	|	РегистрСведений.ХранилищаПравилПересчета КАК ХранилищаПравилПересчета
	|ГДЕ
	|	ХранилищаПравилПересчета.ПравилоОбработки = &ПравилоОбработки";
	
	Запрос.УстановитьПараметр("ПравилоОбработки",ПравилоОбработки);
	
	Результат=Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	Возврат Результат.ПравилаПересчетаПоказателей.Получить();
		
КонецФункции // ПолучитьДанныеПараметрическойНастройки()

Функция ЕстьРеквизитОбъектаВИБ(ВИБ,ТаблицаАналитики,ИмяРеквизита) Экспорт
	
	ДанныеТаблицы=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ТаблицаАналитики,".");
	
	ТипОбъектаМетаданных=ДанныеТаблицы[0];
	ИмяОбъектаМетаданных=ДанныеТаблицы[1];
	
	Если ТипОбъектаМетаданных="Справочник" Тогда
		
		ОписаниеОбъекта="СправочникиБД";
		
	ИначеЕсли ТипОбъектаМетаданных="Документ" Тогда
		
		ОписаниеОбъекта="ДокументыБД";
		
	ИначеЕсли ТипОбъектаМетаданных="ПланВидовХарактеристик" Тогда
		
		ОписаниеОбъекта="ПланыВидовХарактеристикБД";
		
	КонецЕсли;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	СправочникиБДРеквизиты.Ссылка
	|ИЗ
	|	Справочник."+ОписаниеОбъекта+".Реквизиты КАК СправочникиБДРеквизиты
	|ГДЕ
	|	СправочникиБДРеквизиты.Ссылка.Владелец = &Владелец
	|	И СправочникиБДРеквизиты.Ссылка.Наименование = &ИмяОбъектаМетаданных
	|	И СправочникиБДРеквизиты.Имя = &Имя";
	
	Запрос.УстановитьПараметр("Владелец",ВИБ.ТипБД);
	Запрос.УстановитьПараметр("ИмяОбъектаМетаданных",ИмяОбъектаМетаданных);
	Запрос.УстановитьПараметр("Имя",ИмяРеквизита);
	
	Результат=Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции // ЕстьРеквизитОбъектаВИБ() 

Функция ПолучитьСчетТР(ВидОтчета) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВидыОтчетов.ПланСчетов.СчетТР КАК СчетТР
	|ИЗ
	|	Справочник.ВидыОтчетов КАК ВидыОтчетов
	|ГДЕ
	|	ВидыОтчетов.Ссылка = &ВидОтчета
	|	И ВидыОтчетов.ПланСчетов <> ЗНАЧЕНИЕ(Справочник.ПланыСчетовБД.ПустаяСсылка)
	|	И ВидыОтчетов.ПланСчетов.СчетТР <> ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)");
	
	Запрос.УстановитьПараметр("ВидОтчета", ВидОтчета);
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Неопределено;// не задан план счетов или счет ТР
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.СчетТР;

КонецФункции

Функция ПолучитьПоказателиТР(ВидОтчета, СчетТР) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА т.Колонка.ВидИтогаПоСчету = ЗНАЧЕНИЕ(Перечисление.ВидыБухгалтерскихИтогов.СКД)
	|				ТОГДА т.Ссылка
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК СКД,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА т.Колонка.ВидИтогаПоСчету = ЗНАЧЕНИЕ(Перечисление.ВидыБухгалтерскихИтогов.СКК)
	|				ТОГДА т.Ссылка
	|			ИНАЧЕ NULL
	|		КОНЕЦ) КАК СКК
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК т
	|ГДЕ
	|	т.СчетБД = &СчетТР
	|	И т.Владелец = &ВидОтчета
	|	И НЕ т.ПометкаУдаления
	|	И т.Колонка.ВидИтогаПоСчету В (ЗНАЧЕНИЕ(Перечисление.ВидыБухгалтерскихИтогов.СКД), ЗНАЧЕНИЕ(Перечисление.ВидыБухгалтерскихИтогов.СКК))");
	
	Запрос.УстановитьПараметр("ВидОтчета", ВидОтчета);
	Запрос.УстановитьПараметр("СчетТР", СчетТР);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Новый Структура("СКД,СКК", Выборка.СКД, Выборка.СКК);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ИнициализироватьТаблицуОперандов(ЧислоДопАналитик) Экспорт
	
	мЗначенияОперандов=Новый ТаблицаЗначений;
	мЗначенияОперандов.Колонки.Добавить("КодОперанда",ПолучитьОписаниеТиповСтроки(Метаданные.Справочники.ИсточникиДанныхДляРасчетов.ДлинаКода));
	
	Для Индекс=1 По ЧислоДопАналитик Цикл
		
		мЗначенияОперандов.Колонки.Добавить("Аналитика"+Индекс,Метаданные.ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Тип);
		
	КонецЦикла;
	
	мЗначенияОперандов.Колонки.Добавить("АналитикаВалюта",Новый ОписаниеТипов("СправочникСсылка.Валюты"));
	
	мЗначенияОперандов.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка, Число, Булево, Дата", Новый КвалификаторыЧисла(18, 5), Новый КвалификаторыСтроки(500), Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	мЗначенияОперандов.Колонки.Добавить("ЗначениеВалюта",ПолучитьОписаниеТиповЧисла(18,5));
	
	мЗначенияОперандов.Колонки.Добавить("ИтогПоПоказателю",ПолучитьОписаниеТиповБулево());
	мЗначенияОперандов.Индексы.Добавить("КодОперанда");
	
	Возврат мЗначенияОперандов;
		
КонецФункции // ИнициализироватьТаблицуОперандов()

Функция ИнициализироватьТаблицуПротокола() Экспорт
	
	ТаблицаПротокола=Новый ТаблицаЗначений;
	ТаблицаПротокола.Колонки.Добавить("Событие",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаПротокола.Колонки.Добавить("ТипЗаписи",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.ТипыЗаписейПротоколируемыхСобытий"));
	ТаблицаПротокола.Колонки.Добавить("Дата",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	ТаблицаПротокола.Колонки.Добавить("ВремяMs",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18));
	ТаблицаПротокола.Колонки.Добавить("Пользователь",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.Пользователи"));
	ТаблицаПротокола.Колонки.Добавить("Сообщение",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаПротокола.Колонки.Добавить("ОбъектМетаданных",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(280));
	ТаблицаПротокола.Колонки.Добавить("ОбъектДанных");
	ТаблицаПротокола.Колонки.Добавить("ТехническаяИнформацияСтрокаВнутр",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
	ТаблицаПротокола.Колонки.Добавить("ПоказательОтчета",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("СправочникСсылка.ПоказателиОтчетов"));
	ТаблицаПротокола.Колонки.Добавить("КонтекстСобытия",ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСсылка("ПеречислениеСсылка.КонтекстПротоколируемогоСобытия"));	
	ТаблицаПротокола.Колонки.Добавить("КлючЗаписи",Новый ОписаниеТипов("УникальныйИдентификатор"));
		
	Возврат ТаблицаПротокола;
	
КонецФункции // ИнициализироватьТаблицуПротокола()

Функция ПолучитьСинонимКлючевогоРеквизита(ИмяРеквизита) Экспорт
	
	СтруктураРеквизитов=Новый Структура("ВидОтчета,Организация,ПериодОтчета,Сценарий,Проект,ПравилоОбработки,ШаблонКорректировки,ИспользуемаяИБ,ВерсияХранимогоФайла,Ссылка,ПоказательОтчета,КонтекстСобытия",
										Нстр("ru = 'Вид отчета: '"),
										Нстр("ru = 'Организация:'"),
										Нстр("ru = 'Период отчета'"),
										Нстр("ru = 'Сценарий'"),
										Нстр("ru = 'Проект'"),
										Нстр("ru = 'Правило расчета'"),
										Нстр("ru = 'Шаблон корректировки'"),
										Нстр("ru = 'Внешняя ИБ'"),
										Нстр("ru = 'Версия файла'"),
										Нстр("ru = 'Ссылка'"),
										Нстр("ru = 'Показатель'"),
										Нстр("ru = 'Контекст события'"));
										
	Если СтруктураРеквизитов.Свойство(ИмяРеквизита) Тогда
		
		Возврат СтруктураРеквизитов[ИмяРеквизита];
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
														
КонецФункции // ПолучитьСинонимКлючевогоРеквизита(ИмяРеквизита) 

Функция ИспользоватьУправлениеНСИ() Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("УправлениеНСИ");
		
КонецФункции // ИспользоватьУправлениеНСИ() 

Функция ПолучитьОписаниеРегистраТекущейИБ(ИмяРегистра) Экспорт
	
	Возврат Справочники.РегистрыБухгалтерииБД.НайтиПоНаименованию(ИмяРегистра,Истина,,Справочники.ТипыБазДанных.ТекущаяИБ);	
	
КонецФункции // ПолучитьОписаниеРегистраТекущейИБ()

///////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции получения описаний типов значений

// Служебная функция, предназначенная для получения описания типов строки, заданной длины.
// 
// Параметры:
//  ДлинаСтроки - число, длина строки.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для строки указанной длины.
//
Функция ПолучитьОписаниеТиповСтроки(ДлинаСтроки) Экспорт
	
	Массив = Новый Массив; 
	Массив.Добавить(Тип("Строка"));
	КвалификаторСтроки = Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная);
	Возврат Новый ОписаниеТипов(Массив, , КвалификаторСтроки);
	
КонецФункции // ПолучитьОписаниеТиповСтроки()	 

// Служебная функция, предназначенная для получения описания типов числа, заданной разрядности.
// 
// Параметры:
//  Разрядность 			- число, разряд числа.
//  РазрядностьДробнойЧасти - число, разряд дробной части.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для числа указанной разрядности.
//
Функция ПолучитьОписаниеТиповЧисла(Знач Разрядность, Знач РазрядностьДробнойЧасти=0, Знач ДопустимыйЗнакЧисла = Неопределено) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	Если ДопустимыйЗнакЧисла = Неопределено Тогда
		ДопустимыйЗнакЧисла = ДопустимыйЗнак.Любой;
	КонецЕсли;
	КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность,РазрядностьДробнойЧасти, ДопустимыйЗнакЧисла);
	Возврат Новый ОписаниеТипов(Массив, КвалификаторЧисла);
	
КонецФункции	// ПолучитьОписаниеТиповЧисла()

// Служебная функция, предназначенная для получения описания типов ссылочного значения
// по переданному строковому описанию
// 
// Параметры:
//  ТекстОписание 			- строка
// Возвращаемое значение:
//  Объект "ОписаниеТипов" описанного ссылочного объекта метаданных.
//
Функция ПолучитьОписаниеТиповСсылка(ТекстОписание) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Тип(ТекстОписание));
	Возврат Новый ОписаниеТипов(Массив);
	
КонецФункции	// ПолучитьОписаниеТиповЧисла()

// Служебная функция, предназначенная для получения описания типов булево.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" булева типа.
//
Функция ПолучитьОписаниеТиповБулево() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Булево"));
	Возврат Новый ОписаниеТипов(Массив);
	
КонецФункции // ПолучитьОписаниеТиповБулево() 

// Служебная функция, предназначенная для получения описания типов таблица значений.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" булева типа.
//
Функция ПолучитьОписаниеТиповТЗ() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("ТаблицаЗначений"));
	Возврат Новый ОписаниеТипов(Массив);
	
КонецФункции // ПолучитьОписаниеТиповБулево()

// Служебная функция, предназначенная для получения описания типов список значений.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" булева типа.
//
Функция ПолучитьОписаниеТиповСписокЗначений() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("СписокЗначений"));
	Возврат Новый ОписаниеТипов(Массив);
	
КонецФункции // ПолучитьОписаниеТиповБулево()

// Служебная функция, предназначенная для получения описания типов структура.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" типа Структура
//
Функция ПолучитьОписаниеТиповСтруктура() Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(Тип("Структура"));
	Возврат Новый ОписаниеТипов(Массив);
	
КонецФункции // ПолучитьОписаниеТиповСтруктура()

// Служебная функция, определяющая примитивность переданного типа
//
Функция ПримитивныйТипСтрока(СтрокаТип) Экспорт
	
	Возврат (СтрокаТип = "Строка"
		ИЛИ СтрНачинаетсяС(СтрокаТип,"Строка(")
		ИЛИ СтрокаТип = "Дата"
		ИЛИ СтрНачинаетсяС(СтрокаТип,"Дата(")
		ИЛИ СтрокаТип = "Число"
		ИЛИ СтрНачинаетсяС(СтрокаТип,"Число(")
		ИЛИ СтрокаТип = "Булево");
	
КонецФункции

Функция ПолучитьТипЗначенияПоказателяПоСтроке(СтрокаТип) Экспорт
	
	Если СтрокаТип="Строка" Тогда
		Возврат Перечисления.ТипыЗначенийПоказателейОтчетов.Строка;
	ИначеЕсли СтрокаТип="Дата" Тогда
		Возврат Перечисления.ТипыЗначенийПоказателейОтчетов.Дата;
	ИначеЕсли СтрокаТип="Булево" Тогда
		Возврат Перечисления.ТипыЗначенийПоказателейОтчетов.Булево;
	Иначе
		Возврат Перечисления.ТипыЗначенийПоказателейОтчетов.Число;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьОбъектМетаданныхПоТаблицеАналитики(ТаблицаАналитики) Экспорт
	
	МассивПоиска=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ТаблицаАналитики,".");
	СтруктураДанных=Новый Структура;
	
	Если МассивПоиска.Количество()=2 Тогда
		
		ТипОбъектаМетаданных=МассивПоиска[0];
		ИмяОбъектаМетаданных=МассивПоиска[1];
		
		Если ТипОбъектаМетаданных="Справочник" Тогда
			
			ОбъектМетаданных=Метаданные.Справочники.Найти(ИмяОбъектаМетаданных);
			
		ИначеЕсли ТипОбъектаМетаданных="Документ" Тогда
			
			ОбъектМетаданных=Метаданные.Документы.Найти(ИмяОбъектаМетаданных);
			
		ИначеЕсли ТипОбъектаМетаданных="Перечисление" Тогда
			
			ОбъектМетаданных=Метаданные.Перечисления.Найти(ИмяОбъектаМетаданных);
			
		ИначеЕсли ТипОбъектаМетаданных="ПланСчетов" Тогда
			
			ОбъектМетаданных=Метаданные.ПланыСчетов.Найти(ИмяОбъектаМетаданных);
			
		ИначеЕсли ТипОбъектаМетаданных="ПланВидовХарактеристик" Тогда
			
			ОбъектМетаданных=Метаданные.ПланыВидовХарактеристик.Найти(ИмяОбъектаМетаданных);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ОбъектМетаданных;	
	
КонецФункции // ПолучитьОбъектМетаданныхПоТаблице() 

Функция ПолучитьОписаниеПримитивногоТипаИзСтроки(МассивТиповВИБ) Экспорт
	
	МассивТипов=Новый Массив;
	
	ТК_Числа = Новый КвалификаторыЧисла(18, 5, ДопустимыйЗнак.Любой);	
	ТК_Строки = Новый КвалификаторыСтроки(150, ДопустимаяДлина.Переменная);
	ТК_Даты   = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	
	Для Каждого СтрТип Из МассивТиповВИБ Цикл
		
		Если СтрТип="Строка" ИЛИ СтрТип = "Число" ИЛИ СтрТип = "Дата" ИЛИ СтрТип = "Булево" ИЛИ СтрТип = "ДатаВремя" Тогда
			
			МассивТипов.Добавить(Тип(СтрТип))
			
		КонецЕсли;	
		
	КонецЦикла;
	
	Если МассивТипов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
		
	Возврат Новый ОписаниеТипов(МассивТипов, ТК_Числа, ТК_Строки, ТК_Даты);
	
КонецФункции

Функция ПолучитьДанныеТипа(СтрокаТип) Экспорт
	
	МассивСтрок=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(СтрокаТип,".");
	
	СтруктураТипа=Новый Структура;
	
	Если МассивСтрок.Количество()=2 Тогда 
		
		СтруктураТипа.Вставить("ТипМетаДанных",МассивСтрок[0]);
		СтруктураТипа.Вставить("СправочникБД",МассивСтрок[1]);
		
	Иначе
		
		СтруктураТипа.Вставить("ТипМетаДанных");
		СтруктураТипа.Вставить("СправочникБД");
		
	КонецЕсли;
	
	Возврат СтруктураТипа;
	
КонецФункции // ПолучитьДанныеТипа()

Функция ПолучитьОписаниеТиповИзСтрокиТипов(СтрокаТипов) Экспорт
	
	МассивСтрок=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(СтрокаТипов,";");
	
	МассивТипов=Новый Массив;
	
	Для Каждого СтрокаТип ИЗ МассивСтрок Цикл
		
		РабочийТип=ПреобразоватьТипИзСтроки(СтрокаТип,Истина,Ложь);
		
		Если НЕ РабочийТип=Неопределено Тогда
			
			МассивТипов.Добавить(РабочийТип);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если МассивТипов.Количество()=0 Тогда 
		
		Возврат Неопределено;
		
	Иначе
		
		Возврат Новый ОписаниеТипов(МассивТипов);
		
	КонецЕсли;
		
КонецФункции // ПолучитьОписаниеТиповИзСтрокиТипов() 

Функция ПреобразоватьТипИзСтроки(Тип,ВозвращатьТип=Истина,ТолькоПримитивные=Истина) Экспорт
	
	Если Тип="Строка" Тогда
		
		Возврат ?(ВозвращатьТип,Тип("Строка"),"Строка");
		
	ИначеЕсли Тип="Число" Тогда
		
		Возврат ?(ВозвращатьТип,Тип("Число"),"Число");
		
	ИначеЕсли Тип="Дата" Тогда
		
		Возврат ?(ВозвращатьТип,Тип("Дата"),"Дата");
		
	ИначеЕсли Тип="Булево" Тогда
		
		Возврат ?(ВозвращатьТип,Тип("Булево"),"Булево");
		
	ИначеЕсли ТолькоПримитивные Тогда
		
		Возврат Неопределено;
		
	Иначе
		
		ДанныеТипа=ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(Тип,".");
		
		Если ДанныеТипа.Количество()=2 Тогда
			
			Если НЕ (Метаданные.Справочники.Найти(ДанныеТипа[1])=Неопределено
				И Метаданные.Документы.Найти(ДанныеТипа[1])=Неопределено
				И Метаданные.Перечисления.Найти(ДанныеТипа[1])=Неопределено
				И Метаданные.ПланыВидовХарактеристик.Найти(ДанныеТипа[1])=Неопределено
				И Метаданные.ПланыСчетов.Найти(ДанныеТипа[1])=Неопределено) Тогда
								
				Возврат Тип(ДанныеТипа[0]+"Ссылка."+ДанныеТипа[1]);
				
			Иначе
				
				Возврат Неопределено;
				
			КонецЕсли;
			
		Иначе
			
			Возврат Неопределено;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции // ПреобразоватьТИПизВИБ()

Функция ПолучитьОписаниеТиповРесурсаЗначение() Экспорт
	
	МассивТипов=Новый Массив;
	МассивТипов.Добавить(Тип("Число"));
	МассивТипов.Добавить(Тип("Строка"));
	МассивТипов.Добавить(Тип("Дата"));
	МассивТипов.Добавить(Тип("Булево"));
	
	КвалификаторЧисла = Новый КвалификаторыЧисла(18,5);
	КвалификаторСтроки = Новый КвалификаторыСтроки(1000, ДопустимаяДлина.Переменная);
	КвалификаторДаты = Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя);
	
	Возврат Новый ОписаниеТипов(МассивТипов,КвалификаторЧисла,КвалификаторСтроки,КвалификаторДаты);

КонецФункции // ПолучитьОписаниеТиповРесурсаЗначение()

Функция ПолучитьНомерВерсии(Версия) Экспорт
	
	Возврат Версия.Код;
		
КонецФункции // ПолучитьНомерВерсии()

/////////////////////////////////////////////////////////////
/// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПЕРИОДАМИ

Функция глОтносительныйПериодПоДате(ДатаНачала, Периодичность, Знач Смещение, ТихийРежим = Ложь, Реструктурировать = Истина) Экспорт
	
	Если Не ЗначениеЗаполнено(Периодичность) Тогда
		
		Если НЕ ТихийРежим Тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Не указана периодичность для получения относительного периода'"));
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Если Смещение = Неопределено Тогда
		Смещение = 0;
	КонецЕсли;
	
	ДатаНачалаОтносительногоПериода = ВернутьОтносительнуюДату(ДатаНачалаПериода(ДатаНачала, Периодичность), Периодичность, Смещение);
	
	Если Не ЗначениеЗаполнено(ДатаНачалаОтносительногоПериода) Тогда
		
		Если НЕ ТихийРежим Тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(НСтр("ru = 'Не удалось определить начало относительного периода'"));
		КонецЕсли;
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
		|	Периоды.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Периоды КАК Периоды
		|ГДЕ
		|	Периоды.ДатаНачала = &ДатаНачала
		|	И Периоды.Периодичность = &Периодичность
		|	И НЕ Периоды.Произвольный
		|	И НЕ Периоды.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("ДатаНачала", ДатаНачалаОтносительногоПериода);
	Запрос.УстановитьПараметр("Периодичность", Периодичность);
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		
		ОбъектПериод = Справочники.Периоды.СоздатьЭлемент();
		ОбъектПериод.ДатаНачала=ДатаНачалаОтносительногоПериода;
		ОбъектПериод.Периодичность=Периодичность;
		ОбъектПериод.Заполнить(Неопределено);
		
		НачатьТранзакцию();
		
		Попытка
			
			ОбъектПериод.Записать();
			
			Если Реструктурировать тогда
				Справочники.Периоды.РеструктурироватьПериоды();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
			Возврат ОбъектПериод.Ссылка;

		Исключение
			
			ОтменитьТранзакцию();
			
			Если Не ТихийРежим Тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(
					НСтр("ru = 'Невозможно определить относительный период (смещение = '") + Смещение + НСтр("ru = '): не существует искомый период в справочнике ""Периоды""'")
					, , , СтатусСообщения.Важное);
			КонецЕсли;
			
			Возврат Справочники.Периоды.ПустаяСсылка();

		КонецПопытки;
		
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Получить(0);
		
	КонецЕсли;
	
КонецФункции

Функция ВернутьОтносительнуюДату(ДатаНачала, Периодичность,Знач Смещение) Экспорт
	
	Если Смещение=Неопределено Тогда
		Смещение=0;
	КонецЕсли;
	
	Если Периодичность		= Перечисления.Периодичность.Год 
		ИЛИ Периодичность      = Перечисления.Периодичность.ДевятьМесяцев Тогда
		ДатаНачалаОтносительногоПериода		= ДобавитьМесяц(ДатаНачала, 12 * Смещение);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Полугодие Тогда
		ДатаНачалаОтносительногоПериода		= ДобавитьМесяц(ДатаНачала, 6 * Смещение);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ДатаНачалаОтносительногоПериода		= ДобавитьМесяц(ДатаНачала, 3 * Смещение);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		ДатаНачалаОтносительногоПериода		= ДобавитьМесяц(ДатаНачала, Смещение);
	ИначеЕсли Периодичность = Перечисления.Периодичность.Декада Тогда
		
		// анализируем
		ГодДатыНачала						= Год(ДатаНачала);
		МесяцДатыНачала						= Месяц(ДатаНачала);
		ДеньДатыНачала						= День(ДатаНачала);
		ДекадаДатыНачала					= Цел((ДеньДатыНачала - 1) / 10) + 1;
		ДекадаДатыНачала					= ?(ДекадаДатыНачала = 4, 3, ДекадаДатыНачала);
		НомерДекадыНЭ						= ГодДатыНачала * 36 + (МесяцДатыНачала - 1) * 3 + (ДекадаДатыНачала - 1);
		
		// изменяем
		НомерДекадыНЭ						= НомерДекадыНЭ + Смещение;
		
		// синтезируем
		ГодДатыНачалаОтнПериода				= Цел((НомерДекадыНЭ)/ 36);
		ДекадаВГоду							= НомерДекадыНЭ % 36;
		МесяцВГодуДатыНачалаОтнПериода		= Цел(ДекадаВГоду / 3) + 1;
		ДекадаВМесяце						= ДекадаВГоду % 3;
		ДеньВМесяцеДатыНачалаОтнПериода		= ДекадаВМесяце * 10 + 1;
		
		ДатаНачалаОтносительногоПериода		= Дата(ГодДатыНачалаОтнПериода, МесяцВГодуДатыНачалаОтнПериода, ДеньВМесяцеДатыНачалаОтнПериода);
		
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		ДатаНачалаОтносительногоПериода 	= УправлениеОтчетамиУХ.ПолучитьДатуСоСмещениемДляНедели(ДатаНачала, Смещение);
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		ОдинДень							= НачалоДня(Дата(2000, 1, 2)) - НачалоДня(Дата(2000, 1, 1));
		ДатаНачалаОтносительногоПериода		= ДатаНачала + ОдинДень * Смещение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат НачалоДня(ДатаНачалаОтносительногоПериода);
	
КонецФункции

// Функция возвращает ближайшую дату начала периода планирования
//
// Параметры
//	Периодичность (Перечисления.Периодичность)	- периодичность планирования по сценарию.
//	ДатаВПериоде (Дата)							- произвольная дата
//
// Возвращаемое значение:
//	ДатаНачалаПериода		– ближайшая дата начала периода планирования
//
Функция ДатаНачалаПериода(ДатаВПериоде,Периодичность) Экспорт
	
	Если НЕ ТипЗнч(ДатаВПериоде)=Тип("Дата") Тогда
		Возврат '00010101';
	КонецЕсли;
	
	Если Периодичность=Перечисления.Периодичность.День Тогда
		Возврат НачалоДня(ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Неделя Тогда
		Возврат НачалоНеделиПоМесяцу(ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Декада Тогда
		Возврат НачалоДекады(ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Месяц Тогда
		Возврат НачалоМесяца (ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Квартал Тогда
		Возврат НачалоКвартала (ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Полугодие Тогда
		МесяцПериода = Месяц(ДатаВПериоде);		
		Возврат ?(МесяцПериода <= 6, НачалоГода(ДатаВПериоде), Дата(Год(ДатаВПериоде),7,1));
	ИначеЕсли Периодичность=Перечисления.Периодичность.Год Тогда
		Возврат НачалоГода (ДатаВПериоде);
	Иначе
		Возврат НачалоДня(ДатаВПериоде);
	КонецЕсли;
	
КонецФункции // ДатаНачалаПериода()

// Функция возвращает ближайшую дату окончания периода планирования
//
// Параметры
//	Периодичность (Перечисления.Периодичность)	- периодичность планирования по сценарию.
//	ДатаВПериоде (Дата)							- произвольная дата
//
// Возвращаемое значение:
//	ДатаКонцаПериода	– ближайшая дата окончания периода планирования
//
Функция ДатаКонцаПериода(ДатаВПериоде,Периодичность) Экспорт
	
	Если Периодичность=Перечисления.Периодичность.День Тогда
		Возврат КонецДня(ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Неделя Тогда
		Возврат КонецНедели (ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Декада Тогда
		Возврат КонецДекады(ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Месяц Тогда
		Возврат КонецМесяца (ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Квартал Тогда
		Возврат КонецКвартала (ДатаВПериоде);
	ИначеЕсли Периодичность=Перечисления.Периодичность.Полугодие Тогда
		Если Месяц(ДатаВПериоде) > 6 Тогда
			Возврат КонецГода (ДатаВПериоде);
		Иначе
			Возврат ДобавитьМесяц(КонецГода(ДатаВПериоде),-6);
		КонецЕсли;	
	ИначеЕсли Периодичность=Перечисления.Периодичность.Год Тогда
		Возврат КонецГода (ДатаВПериоде);
	Иначе
		Возврат КонецДня(ДатаВПериоде);
	КонецЕсли;
	
КонецФункции // ДатаКонцаПериода()

Функция НачалоНеделиПоМесяцу(ДатаНачала) Экспорт
	
	Если День(ДатаНачала) < 7 Тогда
		Возврат ?(День(НачалоНедели(ДатаНачала))>День(ДатаНачала),НачалоМесяца(ДатаНачала),НачалоНедели(ДатаНачала));
	Иначе
		Возврат НачалоНедели(ДатаНачала);
	КонецЕсли;
	
КонецФункции // НачалоНеделиПоМесяцу

Функция КонецНеделиПоМесяцу(ДатаНачала) Экспорт
	
	Возврат ?(День(ДатаНачала)<День(КонецНедели(ДатаНачала)),КонецНедели(ДатаНачала),КонецМесяца(ДатаНачала));	
	
КонецФункции // КонецНеделиПоМесяцу()

Функция НачалоДекады(ДатаНачала) Экспорт
	
	Если День(ДатаНачала) < 10 Тогда
		Возврат НачалоМесяца(ДатаНачала);
	ИначеЕсли День(ДатаНачала) < 20 Тогда
		Возврат ОбщегоНазначенияУХ.ДобавитьДень(НачалоМесяца(ДатаНачала), 10);
	Иначе 
		Возврат ОбщегоНазначенияУХ.ДобавитьДень(НачалоМесяца(ДатаНачала), 20);
	КонецЕсли;
	
КонецФункции // НачалоДекады()

Функция КонецДекады(ДатаНачала) Экспорт
	
	Если День(ДатаНачала) < 10 Тогда
		Возврат ОбщегоНазначенияУХ.ДобавитьДень(ДатаНачала, 10) - 1;
	ИначеЕсли День(ДатаНачала) < 20 Тогда
		Возврат ОбщегоНазначенияУХ.ДобавитьДень(ДатаНачала, 10) - 1;
	Иначе 
		Возврат КонецМесяца(ДатаНачала);
	КонецЕсли;
	
КонецФункции // КонецДекады()

Функция ДатаНачалаПериодаОтчета(ПериодОтчета) Экспорт
	
	Возврат ПериодОтчета.ДатаНачала;
	
КонецФункции // ДатаНачалаПериода()

Функция ДатаОкончанияПериодаОтчета(ПериодОтчета) Экспорт
	
	Возврат ПериодОтчета.ДатаОкончания;
	
КонецФункции // ДатаНачалаПериода()

Функция НачалоГодаПериода(ПериодОтчета) Экспорт
	
	Возврат НачалоГода(ПериодОтчета.ДатаНачала);
	
КонецФункции // НачалоГодаПериода(ПериодОтчета)

Функция КонецГодаПериода(ПериодОтчета) Экспорт
	
	Возврат КонецГода(ПериодОтчета.ДатаОкончания);
	
КонецФункции // КонецГодаПериода() 

Функция ПериодПринадлежитГодуРасчета(ТекущийПериод,ПериодРасчета) Экспорт
	
	Возврат ТекущийПериод.ДатаОкончания<КонецГода(ПериодРасчета.ДатаОкончания) И ТекущийПериод.ДатаНачала>НачалоГода(ПериодРасчета.ДатаНачала);
	
КонецФункции // ПериодПринадлежитГодуРасчета()

Функция ПолучитьВсеПериоды(ТекстОтбора="",ПараметрОтбора=Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Периоды.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ
	|	НЕ Периоды.ПометкаУдаления
	|	" + ТекстОтбора;
	
	Запрос.УстановитьПараметр("ПараметрОтбора",ПараметрОтбора);
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	СписокПериодов = Новый СписокЗначений;
	Пока ВыборкаЗапроса.Следующий() Цикл		
		СписокПериодов.Добавить(ВыборкаЗапроса.Ссылка);		
	КонецЦикла;
	
	Возврат СписокПериодов;	
	
КонецФункции

Функция ПолучитьПериодичностьТрансляцииПроводок() Экспорт
	
	ПериодичностьТрансляции=Константы.ПериодичностьТрансляцииПроводок.Получить();
	
	Возврат ?(ЗначениеЗаполнено(ПериодичностьТрансляции),ПериодичностьТрансляции,Перечисления.Периодичность.Месяц);
	
КонецФункции // ПолучитьПериодичностьТрансляцииПроводок()

Функция МассивРегистровФинансовогоУчета() Экспорт
	
	Если НЕ Метаданные.Перечисления.Найти("ОбъектыБухгалтерскогоУчета")=Неопределено Тогда
		
		ТаблицаОбъектов= Перечисления["ОбъектыБухгалтерскогоУчета"].ОписаниеОбъектовБухгалтерскогоУчета();
		
		ОстаточныеРегистры = ТаблицаОбъектов.Скопировать(,"ИсточникДанных");
		
		СлужебныеСтроки = ОстаточныеРегистры.НайтиСтроки(Новый Структура("ИсточникДанных", ""));
		Для Каждого СлужебнаяСтрока Из СлужебныеСтроки Цикл
			ОстаточныеРегистры.Удалить(СлужебнаяСтрока);
		КонецЦикла;
		
		ОстаточныеРегистры.Свернуть("ИсточникДанных");
		
		ОстаточныеРегистры.Свернуть("ИсточникДанных");
		Возврат ОстаточныеРегистры.ВыгрузитьКолонку("ИсточникДанных"); 
		
	Иначе
		
		Возврат Новый Массив;
		
	КонецЕсли;
		
КонецФункции // МассивРегистровФинансовогоУчета()

#КонецОбласти

