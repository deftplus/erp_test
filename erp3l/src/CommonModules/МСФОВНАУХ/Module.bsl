
#Область ПодпискиНаСобытия

Процедура ПриЗаписиОбъектаОСвМСФОПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ВстраиваниеУХ.ПроверитьУникальностьНомераВНА(Источник, Отказ);

КонецПроцедуры

Процедура ОбновлениеМестоположенияОбъектовМСФОПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.Количество() = 0 Тогда
		ДокументИсточник = Источник.Отбор.Регистратор.Значение;
		Запрос = Новый Запрос;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	МестонахождениеВНА.Период КАК Период,
			|	МестонахождениеВНА.ВНА КАК ВНА
			|ИЗ
			|	РегистрСведений.МестонахождениеВНА КАК МестонахождениеВНА
			|ГДЕ
			|	МестонахождениеВНА.ДокументИсточник = &ДокументИсточник";
		
		Запрос.УстановитьПараметр("ДокументИсточник", ДокументИсточник);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			МенеджерРС = РегистрыСведений.МестонахождениеВНА.СоздатьМенеджерЗаписи();
			МенеджерРС.Период 	= ВыборкаДетальныеЗаписи.Период;
			МенеджерРС.ВНА 		= ВыборкаДетальныеЗаписи.ВНА;
			МенеджерРС.Удалить();
		КонецЦикла;
	Иначе
		Для каждого Запись Из Источник Цикл
			МенеджерРС = РегистрыСведений.МестонахождениеВНА.СоздатьМенеджерЗаписи();
			МенеджерРС.Период 				= Запись.Период;
			МенеджерРС.ВНА 					= Запись.ОсновноеСредство;
			МенеджерРС.ДокументИсточник 	= Запись.Регистратор;
			МенеджерРС.Организация 			= Запись.Организация;
			МенеджерРС.МОЛ		 			= Запись.МОЛ;
			МенеджерРС.Подразделение		= Запись.Местонахождение;
			МенеджерРС.Записать(Истина);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ПараметрыПроведения

#Область ПараметрыПроведения_Параметры

Функция ПолучитьКлючевыеСубконтоВНА() Экспорт

	КлючевыеСубконто = Новый Соответствие;
	КлючевыеСубконто.Вставить(Тип("СправочникСсылка.ГруппыВНАМСФО"), 					"ГруппаВНА");
	КлючевыеСубконто.Вставить(ВстраиваниеУХКлиентСервер.ПолучитьТипОС(),"ВНА");
	КлючевыеСубконто.Вставить(Тип("СправочникСсылка.НематериальныеАктивы"),				"ВНА");
	КлючевыеСубконто.Вставить(Тип("СправочникСсылка.ОбъектыСтроительства"),				"ВНА");
	КлючевыеСубконто.Вставить(Тип("СправочникСсылка.Номенклатура"),						"ВНА");
	
	Возврат КлючевыеСубконто;

КонецФункции

Функция ПолучитьОписаниеТаблицыПроводок()

	отЧисло = Новый ОписаниеТипов("Число", , , Новый КвалификаторыЧисла(18,2));
	
	ТаблицаПроводок = Новый ТаблицаЗначений;
	
	ТаблицаПроводок.Колонки.Добавить("Период"); 
	ТаблицаПроводок.Колонки.Добавить("ВНА");
	ТаблицаПроводок.Колонки.Добавить("ГруппаВНА");
	ТаблицаПроводок.Колонки.Добавить("ВидОперации", Новый ОписаниеТипов("СправочникСсылка.ВидыОпераций"));
	
	ТаблицаПроводок.Колонки.Добавить("ПодразделениеДт");			// для РБ.МСФО
	ТаблицаПроводок.Колонки.Добавить("НаправлениеДеятельностиДт"); 	// для РБ.МСФО
	ТаблицаПроводок.Колонки.Добавить("ПодразделениеКт");			// для РБ.МСФО
	ТаблицаПроводок.Колонки.Добавить("НаправлениеДеятельностиКт"); 	// для РБ.МСФО
		
	ТаблицаПроводок.Колонки.Добавить("СчетДт");// для ТК
	ТаблицаПроводок.Колонки.Добавить("СчетДтМСФО"); // для РБ.МСФО
	ТаблицаПроводок.Колонки.Добавить("СубконтоДт1");
	ТаблицаПроводок.Колонки.Добавить("СубконтоДт2");
	ТаблицаПроводок.Колонки.Добавить("СубконтоДт3");
	
	ТаблицаПроводок.Колонки.Добавить("СчетКт"); // для ТК
	ТаблицаПроводок.Колонки.Добавить("СчетКтМСФО"); // для РБ.МСФО
	ТаблицаПроводок.Колонки.Добавить("СубконтоКт1");
	ТаблицаПроводок.Колонки.Добавить("СубконтоКт2");
	ТаблицаПроводок.Колонки.Добавить("СубконтоКт3");
	
	ТаблицаПроводок.Колонки.Добавить("КоличествоДт", отЧисло); //для РБ.МСФО
	ТаблицаПроводок.Колонки.Добавить("КоличествоКт", отЧисло); //для РБ.МСФО
	
	ТаблицаПроводок.Колонки.Добавить("СуммаОперацииНСБУ", отЧисло); //для РБ.МСФО, ТК
	ТаблицаПроводок.Колонки.Добавить("СуммаОперацииМСФО", отЧисло); //для РБ.МСФО, ТК
	
	ТаблицаПроводок.Колонки.Добавить("СуммаВВалютеНСБУ", отЧисло); //для РБ.МСФО, ТК
	ТаблицаПроводок.Колонки.Добавить("СуммаВВалютеМСФО", отЧисло); //для РБ.МСФО, ТК
	ТаблицаПроводок.Колонки.Добавить("Валюта"); //для РБ.МСФО, ТК
		
	Возврат ТаблицаПроводок;
	
КонецФункции

#КонецОбласти

#Область ПараметрыПроведения_ОтражениеДвижений

Функция ПолучитьНастройкиОтражения() Экспорт

	Возврат Новый Структура(
	"ПервоначальныеСведенияВНАМСФО,СтоимостьВНАМСФО,ПараметрыУчетаВНАМСФО,
	|ПараметрыАмортизацииВНАМСФО,СписатьИсточник,НачисленнаяАмортизацияВНАМСФО,
	|АрендованныеВНА",
	Ложь, Ложь, Ложь, Ложь, Ложь, Ложь, Ложь);
	
КонецФункции

Процедура ОтразитьДвиженияПараметровУчетаВНА(Движения, Реквизиты, ТаблицаИсточник, НастройкиОтражения) Экспорт

	КэшЗапасов = Новый Соответствие;
	КэшСнятыхСУчета = новый Соответствие;
	
	ЕстьПризнакПоступления		= ТаблицаИсточник.Колонки.Найти("ПоступилВПериоде") <> Неопределено;
	ЕстьСписатьИсточник 		= ТаблицаИсточник.Колонки.Найти("СписатьИсточник") <> Неопределено;
	ЕстьИсточникКоличество 		= ТаблицаИсточник.Колонки.Найти("ИсточникКоличество") <> Неопределено;
	ЕстьИсточникСостояние 		= ТаблицаИсточник.Колонки.Найти("ИсточникСостояние") <> Неопределено;
	ЕстьДатаПартии 				= ТаблицаИсточник.Колонки.Найти("ДатаПартии") <> Неопределено;
	ЕстьИсточникДатаПартии		= ТаблицаИсточник.Колонки.Найти("ИсточникДатаПартии") <> Неопределено;
	ЕстьДатаПараметровРасчета 	= ТаблицаИсточник.Колонки.Найти("ДатаРасчетаАмортизации") <> Неопределено;
	ЕстьПериодПараметрыУчетаВНАМСФО = ТаблицаИсточник.Колонки.Найти("ПериодПараметрыУчетаВНАМСФО") <> Неопределено;
	
	Для каждого СтрокаИсточник Из ТаблицаИсточник Цикл
		
		Если НастройкиОтражения.ПервоначальныеСведенияВНАМСФО ИЛИ (ЕстьПризнакПоступления И СтрокаИсточник.ПоступилВПериоде) Тогда
			
			Движение = Движения.ПервоначальныеСведенияВНАМСФО.Добавить();
			Движение.Сценарий 		= Реквизиты.Сценарий;			
			Движение.Организация 	= Реквизиты.Организация;
			ЗаполнитьЗначенияСвойств(Движение, СтрокаИсточник);
			
		КонецЕсли;
		
		Если НастройкиОтражения.ПараметрыУчетаВНАМСФО Тогда
			
			Движение = Движения.ПараметрыУчетаВНАМСФО.Добавить();
			Движение.Сценарий 		= Реквизиты.Сценарий;
			Движение.Организация 	= Реквизиты.Организация;
			ЗаполнитьЗначенияСвойств(Движение, СтрокаИсточник);
			Если ЕстьПериодПараметрыУчетаВНАМСФО Тогда
				Движение.Период = СтрокаИсточник.ПериодПараметрыУчетаВНАМСФО;//для начальных остатков - дата ввода ВНА
			КонецЕсли;
			
		КонецЕсли;
		
		Если НастройкиОтражения.ПараметрыАмортизацииВНАМСФО Тогда
			
			Если СтрокаИсточник.НачислятьАмортизацию = Истина Тогда
				
				Движение = Движения.ПараметрыАмортизацииВНАМСФО.Добавить();
				Движение.Сценарий 		= Реквизиты.Сценарий;				
				Движение.Организация 	= Реквизиты.Организация;
				ЗаполнитьЗначенияСвойств(Движение, СтрокаИсточник);
				
			КонецЕсли;
						
		КонецЕсли;		
		
		Если НастройкиОтражения.СтоимостьВНАМСФО Тогда
			
			Движение = Движения.СтоимостьВНАМСФО.Добавить();
			Движение.Сценарий 		= Реквизиты.Сценарий;			
			Движение.Организация 	= Реквизиты.Организация;
			
			ЗаполнитьЗначенияСвойств(Движение, СтрокаИсточник);
			
			//Если Не ЕстьДатаПартии Тогда
			//	Движение.ДатаПартии = Движение.Период;
			//КонецЕсли;
						
		КонецЕсли;		
		
		Если НастройкиОтражения.СписатьИсточник И ЗначениеЗаполнено(СтрокаИсточник.ИсточникВНА) Тогда
			
			Если НЕ ЕстьСписатьИсточник Или (СтрокаИсточник.СписатьИсточник = Истина) Тогда
			
				Движение = Движения.СтоимостьВНАМСФО.Добавить();
				ЗаполнитьЗначенияСвойств(Движение, СтрокаИсточник);
				
				Движение.Период 			= Реквизиты.Период;
				Движение.Сценарий 			= Реквизиты.Сценарий;
				Движение.Организация 		= Реквизиты.Организация;
				Движение.ВидОперации 		= Справочники.ВидыОпераций.ВыбытиеВНА;
				
				Движение.ГруппаВНА 			= СтрокаИсточник.ИсточникГруппаВНА;
				Движение.ВНА 				= СтрокаИсточник.ИсточникВНА;
				
				Движение.Амортизация			= 0;
				Движение.ПереоценкаАмортизации	= 0;
								
				Движение.СуммаВВалютеУчета 	= - СтрокаИсточник.СуммаВВалютеУчета;
				Движение.Количество 		= ?(ЕстьИсточникКоличество, - СтрокаИсточник.ИсточникКоличество, 0);
				Движение.ДатаПартии			= ?(ЕстьИсточникДатаПартии И ЗначениеЗаполнено(СтрокаИсточник.ИсточникДатаПартии), 
														СтрокаИсточник.ИсточникДатаПартии, Движение.Период);
				
			КонецЕсли;
			
		КонецЕсли;
		
		//Если НастройкиОтражения.НачисленнаяАмортизацияВНАМСФО Тогда 
		//	
		//	Движение = Движения.НачисленнаяАмортизацияВНАМСФО.Добавить();
		//	Движение.Сценарий 		= Реквизиты.Сценарий;			
		//	Движение.Организация 	= Реквизиты.Организация;
		//	ЗаполнитьЗначенияСвойств(Движение, СтрокаИсточник);
		//	
		//КонецЕсли;
		
		//Если НастройкиОтражения.АрендованныеВНА Тогда
		//
		//	Движение = Движения.АрендованныеВНА.Добавить();
		//	Движение.Сценарий 		= Реквизиты.Сценарий;			
		//	Движение.Организация 	= Реквизиты.Организация;
		//	ЗаполнитьЗначенияСвойств(Движение, СтрокаИсточник);	
		//
		//КонецЕсли;
		
	КонецЦикла;
	
	Для каждого НастройкаОтражения Из НастройкиОтражения Цикл
	
		Если НастройкаОтражения.Значение <> Истина Тогда
			Продолжить;
		КонецЕсли;	
			
		НаборДвижений = Движения.Найти(НастройкаОтражения.Ключ);
		Если НаборДвижений = Неопределено Тогда
			Продолжить;
		КонецЕсли;	
		
		НаборДвижений.Записывать = Истина;
		
	КонецЦикла;

КонецПроцедуры

Процедура ОтразитьПроводкиВНА(Движения, Реквизиты, ТаблицаПроводкиВНА, Отказ, НастройкиОтражения = Неопределено) Экспорт

	ИспользоватьСтандартныйПериод = (ТаблицаПроводкиВНА.Колонки.Найти("Период") = Неопределено);
	ИспользоватьКлючевыеСубконтоПоСтроке = (ТаблицаПроводкиВНА.Колонки.Найти("ИсточникВНА") <> Неопределено);
	
	ИспользоватьКлючевыеСубконто	 		= Истина;
	ИспользоватьКлючевыеСубконтоИсточника	= Ложь;
	ИспользоватьКлючевыеСубконтоФИ 			= Ложь;
	ПересчитатьВалютныеСуммы 				= Ложь;
	ПересчитатьВФункциональнуюВалюту 		= Ложь;
	
	Если НастройкиОтражения <> Неопределено Тогда
		
		Если НастройкиОтражения.Свойство("ИспользоватьКлючевыеСубконто") Тогда
			ИспользоватьКлючевыеСубконто = НастройкиОтражения.ИспользоватьКлючевыеСубконто;
		КонецЕсли;
		
		Если НастройкиОтражения.Свойство("ИспользоватьКлючевыеСубконтоИсточника") Тогда
			ИспользоватьКлючевыеСубконтоИсточника = НастройкиОтражения.ИспользоватьКлючевыеСубконтоИсточника;
		КонецЕсли;
		
		Если НастройкиОтражения.Свойство("ИспользоватьКлючевыеСубконтоФИ") Тогда
			ИспользоватьКлючевыеСубконтоФИ = НастройкиОтражения.ИспользоватьКлючевыеСубконтоФИ;			
		КонецЕсли;
		
		Если НастройкиОтражения.Свойство("ПересчитатьВалютныеСуммы") Тогда
			ПересчитатьВалютныеСуммы = НастройкиОтражения.ПересчитатьВалютныеСуммы;
		КонецЕсли;
		
		Если НастройкиОтражения.Свойство("ПересчитатьВФункциональнуюВалюту") Тогда
			ПересчитатьВФункциональнуюВалюту = НастройкиОтражения.ПересчитатьВФункциональнуюВалюту;
		КонецЕсли;
		
	КонецЕсли;
	
	ТаблицаПроводок = ПолучитьОписаниеТаблицыПроводок();
	
	Для каждого СтрокаИсточник Из ТаблицаПроводкиВНА Цикл	
		
		Если ПересчитатьВФункциональнуюВалюту И (СтрокаИсточник.СуммаВВалютеМСФО = 0) Тогда 
			Продолжить;
		ИначеЕсли НЕ ПересчитатьВФункциональнуюВалюту И (СтрокаИсточник.СуммаОперацииМСФО = 0) И (СтрокаИсточник.СуммаОперацииНСБУ = 0) Тогда
			Продолжить;
		КонецЕсли;
		
		Движение = ТаблицаПроводок.Добавить();
		
		ЗаполнитьЗначенияСвойств(Движение, СтрокаИсточник);
		
		ОперацияСторноНСБУ = (СтрокаИсточник.СуммаОперацииМСФО = 0) И (СтрокаИсточник.СуммаОперацииНСБУ <> 0);
		
		Если ИспользоватьКлючевыеСубконто И Не ОперацияСторноНСБУ Тогда
			
			Если ИспользоватьКлючевыеСубконтоИсточника Тогда
				
				МСФОКлиентСерверУХ.УстановитьКлючевыеСубконтоВНА(Движение, СтрокаИсточник, Истина, Ложь);
				Если ИспользоватьКлючевыеСубконтоПоСтроке Тогда
					СтрокаИсточникСубконто = Новый Структура("ГруппаВНА,ВНА", СтрокаИсточник.ИсточникГруппаВНА, СтрокаИсточник.ИсточникВНА);
					МСФОКлиентСерверУХ.УстановитьКлючевыеСубконтоВНА(Движение, СтрокаИсточникСубконто, Ложь, Истина);				
				КонецЕсли;
				
			ИначеЕсли ИспользоватьКлючевыеСубконтоПоСтроке Тогда
				
				СтрокаИсточникСубконто = Новый Структура("ГруппаВНА,ВНА", СтрокаИсточник.ИсточникГруппаВНА, СтрокаИсточник.ИсточникВНА);
				
				Если СтрокаИсточник.ИсточникВНАДт = Истина Тогда
					МСФОКлиентСерверУХ.УстановитьКлючевыеСубконтоВНА(Движение, СтрокаИсточникСубконто, Истина, Ложь);
				ИначеЕсли СтрокаИсточник.ИсточникВНАДт = Ложь Тогда
					МСФОКлиентСерверУХ.УстановитьКлючевыеСубконтоВНА(Движение, СтрокаИсточник, Истина, Ложь);
				КонецЕсли;
				
				Если СтрокаИсточник.ИсточникВНАКт = Истина Тогда
					МСФОКлиентСерверУХ.УстановитьКлючевыеСубконтоВНА(Движение, СтрокаИсточникСубконто, Ложь, Истина);
				ИначеЕсли СтрокаИсточник.ИсточникВНАКт = Ложь Тогда
					МСФОКлиентСерверУХ.УстановитьКлючевыеСубконтоВНА(Движение, СтрокаИсточник, Ложь, Истина);
				КонецЕсли;
								
			Иначе
				МСФОКлиентСерверУХ.УстановитьКлючевыеСубконтоВНА(Движение, СтрокаИсточник);
			КонецЕсли;
			
			Если ИспользоватьКлючевыеСубконтоФИ Тогда
				МСФОКлиентСерверУХ.УстановитьКлючевыеСубконтоФИ(Движение, СтрокаИсточник);
			КонецЕсли;
		
		КонецЕсли;
		
		Если ПересчитатьВФункциональнуюВалюту Тогда
			
			Если СтрокаИсточник.Валюта = Реквизиты.ФункциональнаяВалюта Тогда
				Движение.СуммаОперацииНСБУ = СтрокаИсточник.СуммаВВалютеНСБУ;
				Движение.СуммаОперацииМСФО = СтрокаИсточник.СуммаВВалютеМСФО;
			Иначе	
				
				Движение.СуммаОперацииНСБУ = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
									СтрокаИсточник.СуммаВВалютеНСБУ, 
									РаботаСКурсамиВалютУХ.ПолучитьКурсВалюты(СтрокаИсточник.Валюта, СтрокаИсточник.Период),
									РаботаСКурсамиВалютУХ.ПолучитьКурсВалюты(Реквизиты.ФункциональнаяВалюта, СтрокаИсточник.Период)
								);
				
				Движение.СуммаОперацииМСФО = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
									СтрокаИсточник.СуммаВВалютеМСФО, 
									РаботаСКурсамиВалютУХ.ПолучитьКурсВалюты(СтрокаИсточник.Валюта, СтрокаИсточник.Период),
									РаботаСКурсамиВалютУХ.ПолучитьКурсВалюты(Реквизиты.ФункциональнаяВалюта, СтрокаИсточник.Период)
								);
								
			КонецЕсли;			
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОтразитьДвиженияПоТаблицеПроводок(Движения, ТаблицаПроводок, Реквизиты, НЕ ИспользоватьСтандартныйПериод);
	
КонецПроцедуры

Процедура ОтразитьДвиженияПоТаблицеПроводок(Движения, ТаблицаПроводок, Реквизиты, ПериодВТаблице = Ложь, ЗаписатьДвижения = Истина, ЗаполненоСодержание = Ложь) Экспорт 
	
	Если Реквизиты.ФормироватьПроводкиМСФО Тогда
		
		ДоступноКоличестоДт = (ТаблицаПроводок.Колонки.Найти("КоличествоДт") <> Неопределено);
		ДоступноКоличестоКт = (ТаблицаПроводок.Колонки.Найти("КоличествоКт") <> Неопределено);
		ЕстьКолонкаВидОперации = (ТаблицаПроводок.Колонки.Найти("ВидОперации") <> Неопределено);
		
		ТекстСверткиДаты = ?(ПериодВТаблице, "Период,", "") 
			+ ?(ТаблицаПроводок.Колонки.Найти("ПодразделениеДт") = Неопределено, "", "ПодразделениеДт,ПодразделениеКт,НаправлениеДеятельностиДт,НаправлениеДеятельностиКт,");
		
		ТекстКолонкиСуммирования = "СуммаОперацииМСФО,СуммаВВалютеМСФО" + ?(ДоступноКоличестоДт, ",КоличествоДт", "") + ?(ДоступноКоличестоКт, ",КоличествоКт", "");
		
		ТаблицаПроводок.Свернуть(ТекстСверткиДаты + "Валюта,ВидОперации,СчетДт,СубконтоДт1,СубконтоДт2,СубконтоДт3,СчетКт,СубконтоКт1,СубконтоКт2,СубконтоКт3", ТекстКолонкиСуммирования);
				
		Для каждого Проводка Из ТаблицаПроводок Цикл
			
			Если Не ЗначениеЗаполнено(Проводка.СчетДт) Или Не ЗначениеЗаполнено(Проводка.СчетКт) Тогда
				Продолжить;
			КонецЕсли;
			
			Движение = Движения.МСФО.Добавить();
			
			ЗаполнитьЗначенияСвойств(Движение, Реквизиты, "Период,Организация,Сценарий");
			Если ПериодВТаблице Тогда
				Движение.Период = Проводка.Период;
			Иначе
				Движение.Период = Реквизиты.Период;
			КонецЕсли;
			
			СвойстваСчетаДт = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(Проводка.СчетДт);
			СвойстваСчетаКт = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(Проводка.СчетКт);
			// Проверим заполнение счетов
			Если НЕ ЗначениеЗаполнено(СвойстваСчетаДт.СчетМСФО) Тогда
				ТекстСообщения = НСтр("ru = 'Для счёта %Счёт% не указана ссылка на план счетов. Проведение по регистру МСФО невозможно.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Счёт%", Строка(Проводка.СчетДт));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Иначе
				// Проверка пройдена.
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СвойстваСчетаКт.СчетМСФО) Тогда
				ТекстСообщения = НСтр("ru = 'Для счёта %Счёт% не указана ссылка на план счетов. Проведение по регистру МСФО невозможно.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Счёт%", Строка(Проводка.СчетКт));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Иначе
				// Проверка пройдена.
			КонецЕсли;
			
			Движение.СчетДт = СвойстваСчетаДт.СчетМСФО;
			МСФОВызовСервераУХ.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 1, Проводка.СубконтоДт1);
			МСФОВызовСервераУХ.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 2, Проводка.СубконтоДт2);
			МСФОВызовСервераУХ.УстановитьСубконто(Движение.СчетДт, Движение.СубконтоДт, 3, Проводка.СубконтоДт3);
			
			Движение.СчетКт = СвойстваСчетаКт.СчетМСФО;
			МСФОВызовСервераУХ.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 1, Проводка.СубконтоКт1);
			МСФОВызовСервераУХ.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 2, Проводка.СубконтоКт2);
			МСФОВызовСервераУХ.УстановитьСубконто(Движение.СчетКт, Движение.СубконтоКт, 3, Проводка.СубконтоКт3);

			Если СвойстваСчетаДт.Валютный Тогда
				Движение.ВалютаДт = Проводка.Валюта;
				Движение.СуммаВВалютеДт = Проводка.СуммаВВалютеМСФО;
			КонецЕсли;
			
			Если СвойстваСчетаКт.Валютный Тогда
				Движение.ВалютаКт = Проводка.Валюта;
				Движение.СуммаВВалютеКт = Проводка.СуммаВВалютеМСФО;
			КонецЕсли;
			
			Если ДоступноКоличестоДт И СвойстваСчетаДт.Количественный Тогда
				Движение.КоличествоДт = Проводка.КоличествоДт;
			КонецЕсли;

			Если ДоступноКоличестоКт И СвойстваСчетаКт.Количественный Тогда
				Движение.КоличествоКт = Проводка.КоличествоКт;
			КонецЕсли;
			
			Если Реквизиты.Свойство("ВалютаПредставления") Тогда
				
				Если Реквизиты.ВалютаПредставления = Проводка.Валюта Тогда
					Движение.СуммаВВалютеОтчетности = Проводка.СуммаВВалютеМСФО;
				ИначеЕсли Реквизиты.ВалютаПредставления = Реквизиты.ФункциональнаяВалюта Тогда
					Движение.СуммаВВалютеОтчетности = Проводка.СуммаОперацииМСФО;
				Иначе
					
					Движение.СуммаВВалютеОтчетности = РаботаСКурсамиВалютКлиентСервер.ПересчитатьПоКурсу(
							Проводка.СуммаОперацииМСФО, 
							РаботаСКурсамиВалют.ПолучитьКурсВалюты(Реквизиты.ФункциональнаяВалюта, Проводка.Период),
							РаботаСКурсамиВалют.ПолучитьКурсВалюты(Реквизиты.ВалютаПредставления, Проводка.Период)
							);
							
				КонецЕсли;
				
			КонецЕсли;

			Движение.СуммаВВалютеУчета	= Проводка.СуммаОперацииМСФО;
			Движение.ВидОперации		= Проводка.ВидОперации;
			
			МСФОВызовСервераУХ.ЗаполнитьПодразделенияНаправленияДеятельности(Движение, Проводка, СвойстваСчетаДт, СвойстваСчетаКт);
					
		КонецЦикла;
		
		Если Движения.МСФО.Количество() Тогда
			Движения.МСФО.Записывать = Истина
		КонецЕсли;

	Иначе
		
		Если НЕ ПериодВТаблице Тогда
			ТаблицаПроводок.ЗаполнитьЗначения(Реквизиты.Период,	"Период");
		КонецЕсли;
		
		ТаблицаПроводок.Колонки.Добавить("Организация");
		ТаблицаПроводок.Колонки.Добавить("Сценарий");
		
		ТаблицаПроводок.ЗаполнитьЗначения(Реквизиты.Организация, 	"Организация");
		ТаблицаПроводок.ЗаполнитьЗначения(Реквизиты.Сценарий, 		"Сценарий");
		
		Если Движения.РасчетныеДанныеВНА.Количество() Тогда
			ОбщегоНазначенияУХ.ЗагрузитьВТаблицуЗначений(ТаблицаПроводок, Движения.РасчетныеДанныеВНА);
		Иначе
			Движения.РасчетныеДанныеВНА.Загрузить(ТаблицаПроводок);
		КонецЕсли;
		Движения.РасчетныеДанныеВНА.Записывать = Истина;
				
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

Функция ПолучитьСобытияДокументовВНА() Экспорт
	Возврат УчетМСФОПовтИспУХ.ПолучитьВидыСобытийВНАПоДокументам();
КонецФункции

#КонецОбласти

#Область ШаблоныПроводокВНА

Функция ТекстЗапроса_НачислениеАмортизацииМСФО(ТаблицаДляПомещения = Неопределено, ТекстЗаменыПериода = Неопределено) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	втТаблицаВНА.ВНА КАК ВНА,
	|	втТаблицаВНА.ГруппаВНА КАК ГруппаВНА,
	|	ЗНАЧЕНИЕ(Справочник.ВидыОпераций.НачислениеАмортизации) КАК ВидОперации,
	|	0 КАК СуммаОперацииНСБУ,
	|	втТаблицаВНА.АмортизацияРасчет * Способы.Коэффициент / 100 КАК СуммаОперацииМСФО,
	|	ВЫБОР
	|		КОГДА Способы.Подразделение = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА втТаблицаВНА.ПодразделениеДт
	|		ИНАЧЕ Способы.Подразделение
	|	КОНЕЦ КАК ПодразделениеДт,
	|	ВЫБОР
	|		КОГДА Способы.НаправлениеДеятельности = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА втТаблицаВНА.НаправлениеДеятельностиДт
	|		ИНАЧЕ Способы.НаправлениеДеятельности
	|	КОНЕЦ КАК НаправлениеДеятельностиДт,
	|	втТаблицаВНА.ПодразделениеКт КАК ПодразделениеКт,
	|	втТаблицаВНА.НаправлениеДеятельностиКт КАК НаправлениеДеятельностиКт,
	|	ЕСТЬNULL(Способы.СчетЗатрат, НЕОПРЕДЕЛЕНО) КАК СчетДт,
	|	ЕСТЬNULL(Способы.СчетЗатрат.СчетСсылка, НЕОПРЕДЕЛЕНО) КАК СчетДтМСФО,
	|	Способы.Субконто1 КАК СубконтоДт1,
	|	Способы.Субконто2 КАК СубконтоДт2,
	|	Способы.Субконто3 КАК СубконтоДт3,
	|	втТаблицаВНА.СчетНакопленнойАмортизации КАК СчетКт,
	|	втТаблицаВНА.СчетНакопленнойАмортизации.СчетСсылка КАК СчетКтМСФО,
	|	втТаблицаВНА.СчетНакопленнойАмортизацииСубконто1 КАК СубконтоКт1,
	|	втТаблицаВНА.СчетНакопленнойАмортизацииСубконто2 КАК СубконтоКт2,
	|	втТаблицаВНА.СчетНакопленнойАмортизацииСубконто3 КАК СубконтоКт3
	|ПОМЕСТИТЬ ТаблицаДляПомещения
	|ИЗ
	|	втТаблицаВНА КАК втТаблицаВНА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияРасходовПоАмортизацииМСФО.Способы КАК Способы
	|		ПО втТаблицаВНА.ПрофильРаспределения = Способы.Ссылка
	|ГДЕ
	|	втТаблицаВНА.АмортизацияРасчет <> 0
	|	И втТаблицаВНА.ВидУчета = ЗНАЧЕНИЕ(Перечисление.ВидыУчета.МСФО)";
	
	Если ТекстЗаменыПериода <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Период", ТекстЗаменыПериода);
	КонецЕсли;
	
	Если ТаблицаДляПомещения = Неопределено Тогда
		Возврат СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаДляПомещения", "");
	Иначе		
		Возврат СтрЗаменить(ТекстЗапроса, "ПОМЕСТИТЬ ТаблицаДляПомещения", "ПОМЕСТИТЬ " + ТаблицаДляПомещения);		
	КонецЕсли;

КонецФункции 

Функция ТекстЗапроса_НачислениеРезерваПереоценкиМСФО(ТекстЗаменыПериода = Неопределено) Экспорт
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	втТаблицаВНА.ВНА КАК ВНА,
	|	втТаблицаВНА.ГруппаВНА КАК ГруппаВНА,
	|	ЗНАЧЕНИЕ(Справочник.ВидыОпераций.ПереоценкаВНА) КАК ВидОперации,
	|	0 КАК СуммаОперацииНСБУ,
	|	втТаблицаВНА.РезервПереоценкиРасчет КАК СуммаОперацииМСФО,
	|	втТаблицаВНА.ПодразделениеДт КАК ПодразделениеДт,
	|	втТаблицаВНА.НаправлениеДеятельностиДт КАК НаправлениеДеятельностиДт,
	|	втТаблицаВНА.ПодразделениеКт КАК ПодразделениеКт,
	|	втТаблицаВНА.НаправлениеДеятельностиКт КАК НаправлениеДеятельностиКт,
	|	втТаблицаВНА.ГруппаВНА.ПараметрыПереоценки.СчетУчетаРезерва КАК СчетДт,
	|	втТаблицаВНА.ГруппаВНА.ПараметрыПереоценки.СчетУчетаРезерва.СчетСсылка КАК СчетДтМСФО,
	|	втТаблицаВНА.ГруппаВНА.ПараметрыПереоценки.СчетУчетаРезерваСубконто1 КАК СубконтоДт1,
	|	втТаблицаВНА.ГруппаВНА.ПараметрыПереоценки.СчетУчетаРезерваСубконто2 КАК СубконтоДт2,
	|	втТаблицаВНА.ГруппаВНА.ПараметрыПереоценки.СчетУчетаРезерваСубконто3 КАК СубконтоДт3,
	|	СчетНРП.Счет КАК СчетКт,
	|	СчетНРП.Счет.СчетСсылка КАК СчетКтМСФО,
	|	СчетНРП.Субконто1 КАК СубконтоКт1,
	|	СчетНРП.Субконто2 КАК СубконтоКт2,
	|	СчетНРП.Субконто3 КАК СубконтоКт3
	|ИЗ
	|	втТаблицаВНА КАК втТаблицаВНА
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФиксированныеСчетаУчетаБД КАК СчетНРП
	|	ПО СчетНРП.Ссылка = ЗНАЧЕНИЕ(Справочник.ФиксированныеСчетаУчетаБД.НераспределеннаяПрибыльНепокрытыйУбытокОтчетногоПериода)
	|ГДЕ
	|	втТаблицаВНА.РезервПереоценкиРасчет <> 0
	|	И втТаблицаВНА.ВидУчета = ЗНАЧЕНИЕ(Перечисление.ВидыУчета.МСФО)";
	
	Если ТекстЗаменыПериода <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Период", ТекстЗаменыПериода);
	КонецЕсли;
	
	Документы.УчетнаяПолитикаМСФО.ЗаменитьФиксированныеСчетаУчетаБД(ТекстЗапроса);
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапроса_ПараметрыВНА(НомераТаблиц = Неопределено, 
	ТекстЗапросаВНА = "ВЫБРАТЬ т.ВНА ИЗ втТаблицаВНА КАК т", АлгоритмРСБУ = Истина,
	втТаблицаРасчетВНА =  "втТаблицаРасчетВНА") Экспорт
	
	//ВНА,ГруппаВНА,ВидУчета,Стоимость,Амортизация,АмортизацияРасчет, Переоценка, ПереоценкаРасчет, Обесценение, ОбесценениеРасчет
	ПоляВыбораСтрокой = 
	"ВНА,
	|ГруппаВНА,
	|ПрофильРаспределения,
	|ВидУчета,
	|БалансоваяСтоимость,
	|ПервоначальнаяСтоимость,
	|Амортизация,
	|Переоценка,
	|Обесценение,
	|РезервПереоценки,
	|АмортизацияРасчет,
	|РезервПереоценкиРасчет,
	|Подразделение,
	|НаправлениеДеятельности,
			
	|ДатаВвода,
	|ЛиквидационнаяСтоимость,
	|КоэффициентУскорения,
	|ЛиквидационнаяСтоимость,
	|НачислятьАмортизацию,
	|ОбъемПродукцииРабот,
	|ПараметрВыработки,
	|СПИ,
	|СпособНачисленияАмортизации,
	|ПрофильРаспределения,
	
	|СчетУчетаПервоначальнойСтоимости,
	|СчетУчетаПервоначальнойСтоимостиСубконто1,
	|СчетУчетаПервоначальнойСтоимостиСубконто2, 
	|СчетУчетаПервоначальнойСтоимостиСубконто3,	
	|СчетНакопленнойАмортизации,
	|СчетНакопленнойАмортизацииСубконто1,
	|СчетНакопленнойАмортизацииСубконто2, 
	|СчетНакопленнойАмортизацииСубконто3";
	
	ЗапросПараметрыВНА = УчетМСФОПовтИспУХ.ПолучитьКэшированныйТекстЗапросаВНА(ПоляВыбораСтрокой, втТаблицаРасчетВНА); 
	
	ТекущийНомер = НомераТаблиц.Количество();	
	Для каждого НомерТаблицы Из ЗапросПараметрыВНА.НомераТаблиц Цикл		
		НомераТаблиц.Вставить(НомерТаблицы.Ключ, ТекущийНомер + НомерТаблицы.Значение);	
	КонецЦикла;
	
	Если АлгоритмРСБУ Тогда
		Возврат СтрЗаменить(ЗапросПараметрыВНА.Текст, "&ВНА", ТекстЗапросаВНА);
	Иначе	
		Возврат ЗапросПараметрыВНА.Текст;
	КонецЕсли;

КонецФункции

#КонецОбласти

#Область ОшибкиПроведенияВНА

Функция ТекстЗапроса_втСтоимостьВНА(НомераТаблиц, ИмяТаблицы = Неопределено) Экспорт 
	
	НомераТаблиц.Вставить("втСтоимостьВНА", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СтоимостьВНАМСФООбороты.ВНА КАК ВНА,
	|	СтоимостьВНАМСФООбороты.ГруппаВНА КАК ГруппаВНА,
	|	ВЫБОР
	|		КОГДА СтоимостьВНАМСФООбороты.ГруппаВНА.КлассВНА <> ЗНАЧЕНИЕ(Перечисление.КлассыВНА.НезавершенноеСтроительство)
	|			ТОГДА СтоимостьВНАМСФООбороты.ВНА В
	|					(ВЫБРАТЬ
	|						т.ВНА
	|					ИЗ
	|						втТаблицаВНА КАК т)
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВведенВЭксплуатацию,
	|	СтоимостьВНАМСФООбороты.ВидУчета КАК ВидУчета,
	|	СтоимостьВНАМСФООбороты.СуммаВВалютеУчетаОборот КАК Стоимость,
	|	СтоимостьВНАМСФООбороты.АмортизацияОборот КАК НакопленнаяАмортизация
	|ПОМЕСТИТЬ втСтоимостьВНА
	|ИЗ
	|	РегистрНакопления.СтоимостьВНАМСФО.Обороты(
	|			,
	|			&ГраницаДоДокумента,
	|			,
	|			Организация = &Организация
	|				И Сценарий = &Сценарий
	|				И ВНА В
	|					(ВЫБРАТЬ
	|						т.ВНА
	|					ИЗ
	|						втТаблицаВНА КАК т
	|			
	|					ОБЪЕДИНИТЬ ВСЕ
	|			
	|					ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						т.ИсточникВНА
	|					ИЗ
	|						втТаблицаВНА КАК т
	|					ГДЕ
	|						т.ИсточникВНА <> НЕОПРЕДЕЛЕНО)) КАК СтоимостьВНАМСФООбороты
	|ГДЕ
	|	СтоимостьВНАМСФООбороты.СуммаВВалютеУчетаОборот <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВНА,
	|	ВидУчета";

	Если ИмяТаблицы = Неопределено Тогда	
		Возврат ТекстЗапроса;
	Иначе 
		Возврат СтрЗаменить(ТекстЗапроса, "втТаблицаВНА", ИмяТаблицы);
	КонецЕсли;
	
КонецФункции

Функция ТекстЗапроса_ПроверкаДублейВНА(НомераТаблиц = Неопределено, ИмяТаблицы = Неопределено) Экспорт

	Если НомераТаблиц <> Неопределено Тогда
		НомераТаблиц.Вставить("ОшибкиПроведения", НомераТаблиц.Количество());
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	""Объект <"" + ТаблицаВНА.ВНА.Наименование + ""> повторяется в строках документа"" КАК ТекстОшибки,
	|	ТаблицаВНА.ВНА КАК ВНА
	|ИЗ
	|	втТаблицаВНА КАК ТаблицаВНА
	|ГДЕ
	|	ТаблицаВНА.ВидУчета = ЗНАЧЕНИЕ(Перечисление.ВидыУчета.МСФО)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаВНА.ВНА,
	|	""Объект <"" + ТаблицаВНА.ВНА.Наименование + ""> повторяется в строках документа""
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ТаблицаВНА.ВНА) > 1";
	
	Если ИмяТаблицы = Неопределено Тогда	
		Возврат ТекстЗапроса;
	Иначе 
		Возврат СтрЗаменить(ТекстЗапроса, "втТаблицаВНА", ИмяТаблицы);
	КонецЕсли;	
	
КонецФункции

Функция ТекстЗапроса_ОбъектыНеДолжныБытьПринятыКУчету(НомераТаблиц) Экспорт

	Возврат
	"ВЫБРАТЬ
	|	""Объект <"" + т.ВНА.Наименование + ""> уже введен в эксплуатацию"" КАК ТекстОшибки,
	|	т.ВНА КАК ВНА
	|ИЗ
	|	втСтоимостьВНА КАК т
	|ГДЕ
	|	т.ВидУчета = ЗНАЧЕНИЕ(Перечисление.ВидыУчета.МСФО)
	|	И т.ВведенВЭксплуатацию";

КонецФункции

Функция ТекстЗапроса_ПроверкаНаБалансе(НомераТаблиц = Неопределено, ИмяТаблицы = Неопределено) Экспорт

	Если НомераТаблиц <> Неопределено Тогда
		НомераТаблиц.Вставить("ОшибкиПроведения", НомераТаблиц.Количество());
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	""Объект <"" + ТаблицаВНА.ВНА.Наименование + ""> не состоит на балансе в организации <"" + ВЫРАЗИТЬ(&Организация КАК Справочник.Организации).Наименование + "">"" КАК ТекстОшибки,
	|	ТаблицаВНА.ВНА КАК ВНА
	|ИЗ
	|	втТаблицаВНА КАК ТаблицаВНА
	|ГДЕ
	|	ЕСТЬNULL(ТаблицаВНА.ВидУчета,ЗНАЧЕНИЕ(Перечисление.ВидыУчета.МСФО)) В (ЗНАЧЕНИЕ(Перечисление.ВидыУчета.МСФО), ЗНАЧЕНИЕ(Перечисление.ВидыУчета.ПустаяСсылка))
	|	И ЕСТЬNULL(ТаблицаВНА.ПервоначальнаяСтоимость, 0) <= 0";
	
	Если ИмяТаблицы = Неопределено Тогда	
		Возврат ТекстЗапроса;
	Иначе 
		Возврат СтрЗаменить(ТекстЗапроса, "втТаблицаРасчетВНА", ИмяТаблицы);
	КонецЕсли;	
	
КонецФункции

Функция ТекстЗапроса_ПроверкаСчетаЗатратПрофиляРаспределения(НомераТаблиц = Неопределено, ИмяТаблицы = Неопределено) Экспорт

	Если НомераТаблиц <> Неопределено Тогда
		НомераТаблиц.Вставить("ОшибкиПроведения", НомераТаблиц.Количество());
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	""Счет <"" + ЕСТЬNULL(Способы.СчетЗатрат.Код, ""..."") + ""> не может быть указан в профиле распределения амортизации <"" + ТаблицаВНА.ПрофильРаспределения.Наименование + ""> для объекта <"" + ТаблицаВНА.ВНА.Наименование + "">"" КАК ТекстОшибки,
	|	ТаблицаВНА.ВНА КАК ВНА
	|ИЗ
	|	втТаблицаВНА КАК ТаблицаВНА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СпособыОтраженияРасходовПоАмортизацииМСФО.Способы КАК Способы
	|		ПО ТаблицаВНА.ПрофильРаспределения = Способы.Ссылка
	|ГДЕ
	|	(ЕСТЬNULL(ТаблицаВНА.ВидУчета, ЗНАЧЕНИЕ(Перечисление.ВидыУчета.МСФО)) В (ЗНАЧЕНИЕ(Перечисление.ВидыУчета.МСФО), ЗНАЧЕНИЕ(Перечисление.ВидыУчета.ПустаяСсылка))
	|				И Способы.СчетЗатрат.Забалансовый
	|			ИЛИ Способы.СчетЗатрат = ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)
	|			ИЛИ Способы.СчетЗатрат.Владелец <> &ПланСчетовМСФО)";
	
	Если ИмяТаблицы = Неопределено Тогда	
		Возврат ТекстЗапроса;
	Иначе 
		Возврат СтрЗаменить(ТекстЗапроса, "втТаблицаРасчетВНА", ИмяТаблицы);
	КонецЕсли;	
	
КонецФункции

Функция ЕстьОшибкиПроведения(ДополнительныеСвойства, Отказ) Экспорт

	Если ДополнительныеСвойства.Свойство("ТаблицыДляДвижений")
		И ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ОшибкиПроведения") 
		И ДополнительныеСвойства.ТаблицыДляДвижений.ОшибкиПроведения.Количество() Тогда		
		
		Для каждого СтрокаОшибка Из ДополнительныеСвойства.ТаблицыДляДвижений.ОшибкиПроведения Цикл
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрокаОшибка.ТекстОшибки, Отказ);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Отказ;

КонецФункции

#КонецОбласти

#Область ВнеоборотныеАктивы_ДокументыГрупповогоВвода

Процедура СформироватьДокументыСобытия(ДокументСсылка, ДополнительныеСвойства, Отказ = Ложь) Экспорт

	Перем ТаблицаТипаДокумента;
	
	Реквизиты = ДополнительныеСвойства.ДляПроведения.Реквизиты;
	
	Реквизиты.Вставить("ДокументыНеТребующиеДозаполненияНСБУ", Новый Структура("ВводВНАВЭксплуатациюМСФО"));
	Реквизиты.Вставить("ДокументыВНА", Новый Структура("НачислениеАмортизацииВНАМСФО", "РаспределениеАмортизации"));
	
	ДокументыДляПроведения = Новый Массив;
	ИмяТЧ = "ВНА";
	
	Очередь = ДополнительныеСвойства.ТаблицыДляДвижений.ОчередьСобытий;	
	ДополнитьОчередьСобытиямиНачисленияАмортизацииПоМесяцам(Очередь, Реквизиты);

	РазмерОчереди = Очередь.Количество();
	ДокументыСОшибкой = Новый Массив;
	
	НачатьТранзакцию();
	
	СозданныеДокументы = МСФОУХ.ПолучитьДокументыСобытияПоОснованию(ДополнительныеСвойства);
	
	Для ИндексСобытия = 0 По (РазмерОчереди - 1) Цикл
		
		СобытиеОчереди = Очередь.Получить(ИндексСобытия);
		Если СобытиеОчереди.ИмяДокумента = "НачислениеАмортизацииВНАМСФО" Тогда
			
			ДокументОбъект = МСФОУХ.ПолучитьДокументСобытие(
									СобытиеОчереди.ИмяДокумента, 
									СобытиеОчереди.ДатаСобытия, 
									ДополнительныеСвойства, 
									СозданныеДокументы,
									СобытиеОчереди.РежимЗаполнения
								);
								
			ДокументОбъект.ДокументОснование = ДокументСсылка;		
			ЗаписатьПровестиДокументСобытие(ДокументОбъект, СобытиеОчереди, ДокументыСОшибкой);
			
			Продолжить;
			
		КонецЕсли;
				
		Если НЕ ДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаВНА_"+СобытиеОчереди.ИмяДокумента, ТаблицаТипаДокумента) 
			ИЛИ (ТаблицаТипаДокумента = Неопределено) Тогда
			Сообщить(НСтр("ru = 'Не задан документ-событие для вида события ВНА:'") + СобытиеОчереди.ВидСобытияВНА);
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("ДатаДокумента", СобытиеОчереди.ДатаСобытия);
		
		ДокументОбъект = МСФОУХ.ПолучитьДокументСобытие(
								СобытиеОчереди.ИмяДокумента, 
								СобытиеОчереди.ДатаСобытия, 
								ДополнительныеСвойства, 
								СозданныеДокументы, 
								СобытиеОчереди.РежимЗаполнения
							);
		
		//Основания
		
		ДокументОбъект.ДокументыОснования.Очистить();
		ДокументОбъект.ДокументыОснования.Добавить().ДокументОснование = ДокументСсылка;
		
		ДокументОбъект.ВНА.Загрузить(ТаблицаТипаДокумента.Скопировать(Отбор));
		
		ЗаполнитьДокументСобытие(ДокументОбъект, СобытиеОчереди, ИмяТЧ, Реквизиты);
		
		Если ДокументОбъект.ВНА.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ЗаписатьПровестиДокументСобытие(ДокументОбъект, СобытиеОчереди, ДокументыСОшибкой);
		
	КонецЦикла; 
	
	ПометитьНаУдалениеНеиспользованныеСобытия(СозданныеДокументы);
		
	ЗафиксироватьТранзакцию();

КонецПроцедуры

Процедура ЗаписатьПровестиДокументСобытие(ДокументОбъект, СобытиеОчереди, ДокументыСОшибкой)
	
	ОтказДокумента = Ложь;
	ЗаписатьДокументСобытие(ДокументОбъект, СобытиеОчереди, ОтказДокумента);
	Если Не ОтказДокумента Тогда
		ПровестиДокументСобытие(ДокументОбъект, ОтказДокумента);
	КонецЕсли;
	
	Если ОтказДокумента Тогда
		ДокументыСОшибкой.Добавить(ДокументОбъект);			
	КонецЕсли;

КонецПроцедуры

Процедура ДополнитьОчередьСобытиямиНачисленияАмортизацииПоМесяцам(Очередь, Реквизиты)
	
	КоличествоСобытий = Очередь.Количество();
	Если КоличествоСобытий = 0 Тогда
		Возврат;
	КонецЕсли;
	
	МесяцыНСБУ = Новый Соответствие;
	СобытияАмортизации = Очередь.НайтиСтроки(Новый Структура("ИмяДокумента", "НачислениеАмортизацииВНАМСФО"));
	
	Для каждого СтрокаТаб Из СобытияАмортизации Цикл
		МесяцыНСБУ.Вставить(Месяц(СтрокаТаб.ДатаСобытия), СтрокаТаб.ДатаСобытия);
	КонецЦикла;
	
	ШаблонСобытия = Новый Структура("ИмяДокумента,ВидСобытияВНА,ПорядокСобытий,РежимЗаполнения", 
										"НачислениеАмортизацииВНАМСФО",
										"НачислениеАмортизацииВНАМСФО",
										5,
										ПредопределенноеЗначение("Перечисление.РежимЗаполненияВидовУчета.ПустаяСсылка")
									);

	НачалоГодаПериода = НачалоГода(Реквизиты.ПериодОтчета.ДатаНачала);
	Для НомерМесяца = Месяц(Реквизиты.ПериодОтчета.ДатаНачала) По Месяц(Реквизиты.ПериодОтчета.ДатаОкончания) Цикл
		
		Если МесяцыНСБУ.Получить(НомерМесяца) = Неопределено Тогда
			СобытиеОчереди = Очередь.Добавить();
			ЗаполнитьЗначенияСвойств(СобытиеОчереди, ШаблонСобытия);
			СобытиеОчереди.ДатаСобытия = НачалоЧаса((КонецМесяца(ДобавитьМесяц(НачалоГодаПериода, НомерМесяца-1))));
		КонецЕсли;
		
	КонецЦикла;
	
	Очередь.Сортировать("ДатаСобытия Возр, ПорядокСобытий Возр");
	
КонецПроцедуры

Процедура ЗаполнитьДокументСобытие(ДокументОбъект, СобытиеОчереди, ИмяТЧ, Реквизиты)
	
	ИмяДокумента = СобытиеОчереди.ИмяДокумента;
			
	ПараметрыЗаполненияТЧ = Новый Структура;
	ПараметрыЗаполненияТЧ.Вставить("ЗаполнитьРеквизиты", Ложь);
	ПараметрыЗаполненияТЧ.Вставить("ЗаполнитьНСБУ",  НЕ Реквизиты.ДокументыНеТребующиеДозаполненияНСБУ.Свойство(ИмяДокумента));
	ПараметрыЗаполненияТЧ.Вставить("ЗаполнитьМСФО", Реквизиты.ДанныеРежимаЗаполнения.ЕстьМСФО);
	ПараметрыЗаполненияТЧ.Вставить("ИсточникНСБУ", Реквизиты.Ссылка);
	
	ДокументОбъект.Заполнить(Новый Структура("СтруктураДействий", ПараметрыЗаполненияТЧ));
	
КонецПроцедуры

Процедура ЗаписатьДокументСобытие(ДокументОбъект, СобытиеОчереди, Отказ)
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		
		ОбщегоНазначенияКлиентСерверУХ.СообщитьПользователю(НСтр("ru = 'Не удалось создать документ '") + СобытиеОчереди.ИмяДокумента, ДокументОбъект.Ссылка);
		ОбщегоНазначенияКлиентСерверУХ.СообщитьПользователю(ОписаниеОшибки(), ДокументОбъект.Ссылка);
		
		Отказ = Истина;
		
	КонецПопытки;

КонецПроцедуры

Процедура ПровестиДокументСобытие(ДокументОбъект, Отказ) Экспорт
	
	ПроверкаЗаполненияПройдена = ДокументОбъект.ПроверитьЗаполнение();
	
	Если ПроверкаЗаполненияПройдена Тогда
		
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			Отказ = Истина;
			Сообщить(ОписаниеОшибки());
			ОбщегоНазначенияКлиентСерверУХ.СообщитьПользователю(СтрШаблон(НСтр("ru = 'Документ <%1> не удалось провести'"), ДокументОбъект) , ДокументОбъект.Ссылка);
		КонецПопытки;
		
	Иначе 
		
		ОбщегоНазначенияКлиентСерверУХ.СообщитьПользователю(НСтр("ru = 'Сформирован документ, требующий дозаполнения: '") + ДокументОбъект, ДокументОбъект.Ссылка);
		
	КонецЕсли;
 	
КонецПроцедуры

Процедура ПометитьНаУдалениеНеиспользованныеСобытия(СозданныеДокументы)
	
	Для каждого ДокументСобытие Из СозданныеДокументы Цикл
		Если НЕ ДокументСобытие.Перезаполнен Тогда
			
			Попытка
				ДокументСобытие.ДокументСобытие.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
				ОбщегоНазначенияКлиентСерверУХ.СообщитьПользователю(НСтр("ru = 'Документ-событие созданный ранее помечен на удаление: '") 
				+ ДокументСобытие.ДокументСобытие, ДокументСобытие.ДокументСобытие);
			Исключение
				ОбщегоНазначенияКлиентСерверУХ.СообщитьПользователю(НСтр("ru = 'Не удалось пометить на удаление документ:'") 
				+ ДокументСобытие.ДокументСобытие, ДокументСобытие.ДокументСобытие);
				Сообщить(ОписаниеОшибки());
			КонецПопытки;
			
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура СинхронизироватьСостояниеДокументовСобытий(Ссылка, ДокументыСобытия = Неопределено, Отказ = Ложь) Экспорт

	Основание = ОбщегоНазначенияУХ.ПолучитьЗначенияРеквизитов(Ссылка, "Проведен,ПометкаУдаления");
	
	Если ДокументыСобытия = Неопределено Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ДокументыВНАПоОснованию.Ссылка КАК ДокументСобытие
		|ИЗ
		|	КритерийОтбора.ДокументыВНАПоОснованию(&Основание) КАК ДокументыВНАПоОснованию
		|ГДЕ
		|	ДокументыВНАПоОснованию.Ссылка.ПометкаУдаления <> &ПометкаУдаления
		|	ИЛИ ДокументыВНАПоОснованию.Ссылка.Проведен <> &Проведен");
		
		Запрос.УстановитьПараметр("ПометкаУдаления",	Основание.ПометкаУдаления);
		Запрос.УстановитьПараметр("Проведен", 			Основание.Проведен);
		Запрос.УстановитьПараметр("Основание", 			Ссылка);
		
		ДокументыСобытия = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ДокументСобытие");
		
	КонецЕсли;
	
	Для Каждого ДокументСобытие Из ДокументыСобытия Цикл
		
		ОбъектСобытие = ДокументСобытие.ПолучитьОбъект();
		
		Если ОбъектСобытие.ПометкаУдаления <> Основание.ПометкаУдаления Тогда
			Попытка
				ОбъектСобытие.УстановитьПометкуУдаления(Основание.ПометкаУдаления);
			Исключение
				
				ОбщегоНазначенияУХ.СообщитьОбОшибке(
										НСтр("ru = 'Не удалось обновить пометку удаления для документа:'") + ДокументСобытие,
										Отказ);
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
		
		Если (ОбъектСобытие.Проведен <> Основание.Проведен) Тогда
			
			РежимЗаписиСобытия = ?(Основание.Проведен, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.ОтменаПроведения);
			
			Попытка
				ОбъектСобытие.Записать(РежимЗаписиСобытия);
			Исключение
				
				ТекстДействие = ?(Основание.Проведен, 
									НСтр("ru = 'Не удалось провести документ:'"), 
									НСтр("ru = 'Не удалось отменить проведение документа:'"));

				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстДействие, Отказ);
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ОписаниеОшибки());
				
			КонецПопытки;
		
		КонецЕсли;
 	
	КонецЦикла;
 
КонецПроцедуры

Функция ПолучитьСтруктуруДействийДокумента(ТребуемаяСтруктураДействий, СтруктураДействийДокумента = Неопределено) Экспорт

	Результат = Новый Структура;
	
	Если СтруктураДействийДокумента = Неопределено Тогда
		СтруктураДействийДокумента = Новый Структура;
	КонецЕсли;
	
	ТекущееЗначение = Неопределено;
	Для каждого ТекущееДействие Из ТребуемаяСтруктураДействий Цикл
		Если СтруктураДействийДокумента.Свойство(ТекущееДействие.Ключ, ТекущееЗначение) Тогда
			Результат.Вставить(ТекущееДействие.Ключ, ТекущееЗначение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;

КонецФункции

#КонецОбласти

#Область ЗаполнениеИзРСБУ

#Область ПолучениеДанных_ВНА

Функция ПолучитьДанные_ПоступлениеВНА(ПараметрыЗаполнения, Отказ = Ложь) Экспорт
	
	ДополнительныеПоля = Новый Структура();
	
	ДополнительныеПоля.Вставить("ПараметрыУчетаВНА",			"ПараметрыУчетаВНА");	
	ДополнительныеПоля.Вставить("ДатаПринятияКУчетуНСБУ", 		"ДатаСобытияНСБУ");
	ДополнительныеПоля.Вставить("ПервоначальнаяСтоимостьНСБУ", 	"СуммаНСБУ");
	
	ДополнительныеПоля.Вставить("СчетУчетаНСБУ", 		"СчетДт");
	ДополнительныеПоля.Вставить("СчетПоступленияНСБУ", 	"СчетКт");
	ДополнительныеПоля.Вставить("СчетУчетаМСФО", 		"СчетДтМСФО");
	ДополнительныеПоля.Вставить("СчетПоступленияМСФО", 	"СчетКтМСФО");
	
	ДополнительныеПоля.Вставить("ДатаПринятияКУчетуНСБУ", 		"ДатаСобытияНСБУ");
	ДополнительныеПоля.Вставить("ПервоначальнаяСтоимостьНСБУ", 	"СуммаНСБУ");
	ДополнительныеПоля.Вставить("ДатаПринятияКУчетуНСБУ", 		"ДатаСобытияНСБУ");
	ДополнительныеПоля.Вставить("ПервоначальнаяСтоимостьНСБУ", 	"СуммаНСБУ");
	
	ДополнительныеПоля.Вставить("СчетУчетаСубконто1НСБУ", 		"СубконтоДт1");
	ДополнительныеПоля.Вставить("СчетУчетаСубконто2НСБУ", 		"СубконтоДт2");
	ДополнительныеПоля.Вставить("СчетУчетаСубконто3НСБУ", 		"СубконтоДт3");
	ДополнительныеПоля.Вставить("СчетПоступленияСубконто1НСБУ", "СубконтоКт1");
	ДополнительныеПоля.Вставить("СчетПоступленияСубконто2НСБУ", "СубконтоКт2");
	ДополнительныеПоля.Вставить("СчетПоступленияСубконто3НСБУ", "СубконтоКт3");
	
	ДополнительныеПоля.Вставить("КоличествоНСБУ",	"КоличествоДт");
		
	ПараметрыЗаполнения.Вставить("ПоляВыбора", ДополнительныеПоля);
	ПараметрыЗаполнения.Вставить("ТипДокумента", Тип("ДокументСсылка.ПоступлениеВНАМСФО"));
	
	Результат = ПолучитьТаблицуВНА(ПараметрыЗаполнения, Отказ);	
	
	ТаблицаВНА = Результат.ТаблицаВНА;
	
	Возврат Новый Структура("ВНА,ДокументыОснования", ТаблицаВНА, Результат.ДокументыОснования);
	
КонецФункции

Функция ПолучитьДанные_ВводВЭксплуатациюВНА(ПараметрыЗаполнения, Отказ = Ложь) Экспорт
	
	ДополнительныеПоля = Новый Структура();
	
	ДополнительныеПоля.Вставить("ПараметрыУчетаВНА",			"ПараметрыУчетаВНА");	
	ДополнительныеПоля.Вставить("ДатаПринятияКУчетуНСБУ", 		"ДатаСобытияНСБУ");
	ДополнительныеПоля.Вставить("ПервоначальнаяСтоимостьНСБУ", 	"СуммаНСБУ");
	
	ДополнительныеПоля.Вставить("СчетУчетаНСБУ", 		"СчетДт");
	ДополнительныеПоля.Вставить("СчетПоступленияНСБУ", 	"СчетКт");
	ДополнительныеПоля.Вставить("СчетУчетаМСФО", 		"СчетДтМСФО");
	ДополнительныеПоля.Вставить("СчетПоступленияМСФО", 	"СчетКтМСФО");
	
	ДополнительныеПоля.Вставить("ДатаПринятияКУчетуНСБУ", 		"ДатаСобытияНСБУ");
	ДополнительныеПоля.Вставить("ПервоначальнаяСтоимостьНСБУ", 	"СуммаНСБУ");
	
	ДополнительныеПоля.Вставить("СчетУчетаСубконто1НСБУ", 		"СубконтоДт1");
	ДополнительныеПоля.Вставить("СчетУчетаСубконто2НСБУ", 		"СубконтоДт2");
	ДополнительныеПоля.Вставить("СчетУчетаСубконто3НСБУ", 		"СубконтоДт3");
	ДополнительныеПоля.Вставить("СчетПоступленияСубконто1НСБУ", "СубконтоКт1");
	ДополнительныеПоля.Вставить("СчетПоступленияСубконто2НСБУ", "СубконтоКт2");
	ДополнительныеПоля.Вставить("СчетПоступленияСубконто3НСБУ", "СубконтоКт3");
		
	ДополнительныеПоля.Вставить("СчетАмортизацииМСФО", 	"СчетАмортизацииМСФО");		
	ДополнительныеПоля.Вставить("СпособОтраженияРасходовПоАмортизацииМСФО", "СпособОтраженияРасходовПоАмортизацииМСФО");
	
	ПараметрыЗаполнения.Вставить("ПоляВыбора", ДополнительныеПоля);
	ПараметрыЗаполнения.Вставить("ТипДокумента", Тип("ДокументСсылка.ВводВНАВЭксплуатациюМСФО"));
	
	Результат = ПолучитьТаблицуВНА(ПараметрыЗаполнения, Отказ);	
	
	ТаблицаВНА = Результат.ТаблицаВНА;
	
	ВстраиваниеУХ.СформироватьПрофилиРаспределения(ТаблицаВНА, "СпособОтраженияРасходовПоАмортизацииМСФО", "СпособОтраженияРасходовПоАмортизацииНСБУ", ПараметрыЗаполнения.ШаблонТрансляции, Отказ);
	
	Возврат Новый Структура("ВНА,ДокументыОснования", ТаблицаВНА, Результат.ДокументыОснования);
	
КонецФункции

Функция ПолучитьДанные_МодернизацияВНА(ПараметрыЗаполнения, Отказ = Ложь) Экспорт
			
	ДополнительныеПоля = Новый Структура();
	
	ДополнительныеПоля.Вставить("ПараметрыУчетаВНА",	"ПараметрыУчетаВНА");	
	ДополнительныеПоля.Вставить("ДатаСобытияНСБУ", 		"ДатаСобытияНСБУ");	
	ДополнительныеПоля.Вставить("СчетДтМСФО", 			"СчетДтМСФО");
	ДополнительныеПоля.Вставить("СчетКтМСФО", 			"СчетКтМСФО");	
	ДополнительныеПоля.Вставить("СчетДт", 				"СчетДт");
		
	ДополнительныеПоля.Вставить("СубконтоДт1", 			"СубконтоДт1");
	ДополнительныеПоля.Вставить("СубконтоДт2", 			"СубконтоДт2");
	ДополнительныеПоля.Вставить("СубконтоДт3", 			"СубконтоДт3");
	ДополнительныеПоля.Вставить("СубконтоКт1", 			"СубконтоКт1");
	ДополнительныеПоля.Вставить("СубконтоКт2", 			"СубконтоКт2");
	ДополнительныеПоля.Вставить("СубконтоКт3", 			"СубконтоКт3");
	
	ДополнительныеПоля.Вставить("СчетКт",				"СчетКт");	
	ДополнительныеПоля.Вставить("СрокПолезногоИспользованияНСБУ",	"СрокПолезногоИспользованияНСБУ");
			
	ДополнительныеПоля.Вставить("СчетУчетаВНАМСФО", 	"СчетУчетаВНАМСФО");	
	ДополнительныеПоля.Вставить("СчетАмортизацииНСБУ",	"СчетАмортизацииНСБУ");
	ДополнительныеПоля.Вставить("СчетАмортизацииМСФО", 	"СчетАмортизацииМСФО");		
	ДополнительныеПоля.Вставить("СпособОтраженияРасходовПоАмортизацииМСФО", "СпособОтраженияРасходовПоАмортизацииМСФО");
	ДополнительныеПоля.Вставить("СпособОтраженияРасходовПоАмортизацииНСБУ", "СпособОтраженияРасходовПоАмортизацииНСБУ");
	
	ДополнительныеПоля.Вставить("СпособНачисленияАмортизацииНСБУ", "СпособНачисленияАмортизацииНСБУ");
	ДополнительныеПоля.Вставить("СпособНачисленияАмортизацииМСФО", "СпособНачисленияАмортизацииМСФО");
	
	ДополнительныеПоля.Вставить("КоличествоДт",	"КоличествоДт");
	
	ПараметрыЗаполнения.Вставить("ПоляВыбора", ДополнительныеПоля);
	ПараметрыЗаполнения.Вставить("ТипДокумента", Тип("ДокументСсылка.ВводСобытийВНАМСФО"));
	
	Результат = ПолучитьТаблицуВНА(ПараметрыЗаполнения, Отказ);	
	
	ТаблицаВНА = Результат.ТаблицаВНА;	
		
	ТаблицаВНА.Колонки.СрокПолезногоИспользованияНСБУ.Имя = "НовыйСПИНСБУ";
	ТаблицаВНА.Колонки.СуммаНСБУ.Имя = "СуммаМодернизацииНСБУ";
	
	ТаблицаВНА.Колонки.СчетДт.Имя = "СчетУчетаНСБУ";
	ТаблицаВНА.Колонки.СубконтоДт1.Имя = "СчетУчетаСубконто1НСБУ";
	ТаблицаВНА.Колонки.СубконтоДт2.Имя = "СчетУчетаСубконто2НСБУ";
	ТаблицаВНА.Колонки.СубконтоДт3.Имя = "СчетУчетаСубконто3НСБУ";
	
	ТаблицаВНА.Колонки.СчетКт.Имя = "СчетЗатратНСБУ";
	ТаблицаВНА.Колонки.СубконтоКт1.Имя = "СчетЗатратСубконто1НСБУ";
	ТаблицаВНА.Колонки.СубконтоКт2.Имя = "СчетЗатратСубконто2НСБУ";
	ТаблицаВНА.Колонки.СубконтоКт3.Имя = "СчетЗатратСубконто3НСБУ";
	
	ВстраиваниеУХ.СформироватьПрофилиРаспределения(ТаблицаВНА, "СпособОтраженияРасходовПоАмортизацииМСФО", "СпособОтраженияРасходовПоАмортизацииНСБУ", ПараметрыЗаполнения.ШаблонТрансляции, Отказ);
	
	Возврат Новый Структура("ВНА,ДокументыОснования", ТаблицаВНА, Результат.ДокументыОснования);
	
КонецФункции

Функция ПолучитьДанные_ВыбытиеВНА(ПараметрыЗаполнения, Отказ = Ложь) Экспорт

	//ПараметрыЗаполнения.Вставить("ТипДокумента", ПолучитьДокументы_ВыбытиеВНАМСФО());
	
	//Амортизация начисляется документом нач.амортизации
	СчетаАмортизации = Новый СписокЗначений;	
	СчетаАмортизации.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств);
	СчетаАмортизации.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов);	
	ОтборСчетДт = Новый Структура("Значение,ВидСравнения", СчетаАмортизации, ВидСравнения.НеВСпискеПоИерархии);
	
	СчетаУчета = Новый СписокЗначений;
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ВыбытиеОС);
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ВыбытиеМЦ);
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивыОрганизации);
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаНИОКР);
	
	ПараметрыЗаполнения.Вставить("ОтборПостроителя", Новый Структура("СчетДт,СчетКт", ОтборСчетДт, СчетаУчета));
	ПараметрыЗаполнения.Вставить("ПараметрыВНА", Ложь);
	ПараметрыЗаполнения.Вставить("ТипДокумента", Тип("ДокументСсылка.ВыбытиеВНАМСФО"));
		
	ДополнительныеПоля = Новый Структура();
	
	ДополнительныеПоля.Вставить("ПараметрыУчетаВНА",	"ПараметрыУчетаВНА");	
	ДополнительныеПоля.Вставить("СчетДт",  				"СчетДт");
	ДополнительныеПоля.Вставить("СубконтоДт1",  		"СубконтоДт1");
	ДополнительныеПоля.Вставить("СубконтоДт2",  		"СубконтоДт2");
	ДополнительныеПоля.Вставить("СубконтоДт3",  		"СубконтоДт3");
	ДополнительныеПоля.Вставить("СчетАмортизацииМСФО", 	"СчетАмортизацииМСФО");
	ДополнительныеПоля.Вставить("АмортизацияНСБУ",		"АмортизацияНСБУ");
	ДополнительныеПоля.Вставить("ВидОперации", 			"ВидОперации");
	ДополнительныеПоля.Вставить("СпособОтраженияРасходовПоАмортизацииМСФО", "СпособОтраженияРасходовПоАмортизацииМСФО");
	
	ПараметрыЗаполнения.Вставить("ПоляВыбора", ДополнительныеПоля);
	
	Результат = ПолучитьТаблицуВНА(ПараметрыЗаполнения, Отказ);	
	
	ТаблицаВНА = Результат.ТаблицаВНА;
	
	ТаблицаВНА.Колонки.СуммаНСБУ.Имя = "ВыбытиеСтоимостиНСБУ";
	
	ТаблицаВНА.Колонки.СчетДт.Имя = "СчетРасходаНСБУ";	
	ТаблицаВНА.Колонки.СубконтоДт1.Имя = "СчетРасходаСубконто1НСБУ";
	ТаблицаВНА.Колонки.СубконтоДт2.Имя = "СчетРасходаСубконто2НСБУ";
	ТаблицаВНА.Колонки.СубконтоДт3.Имя = "СчетРасходаСубконто3НСБУ";
	
	Возврат Новый Структура("ВНА,ДокументыОснования", ТаблицаВНА, Результат.ДокументыОснования);
	
КонецФункции

Функция ПолучитьДанные_НачислениеАмортизациВНА(ПараметрыЗаполнения, Отказ = Ложь) Экспорт
	    
	ДополнительныеПоля = Новый Структура();
	
	ДополнительныеПоля.Вставить("ГруппаВНА", 		"ПараметрыУчетаВНА");
	ДополнительныеПоля.Вставить("ДатаСобытияНСБУ",	"ДатаСобытияНСБУ");	
	ДополнительныеПоля.Вставить("СчетДтМСФО", 		"СчетДтМСФО");
	ДополнительныеПоля.Вставить("СчетКтМСФО", 		"СчетКтМСФО");	
	ДополнительныеПоля.Вставить("СчетДтНСБУ", 		"СчетДт");
	ДополнительныеПоля.Вставить("СчетКтНСБУ", 		"СчетКт");	
	
	ДополнительныеПоля.Вставить("СчетДтСубконто1НСБУ",	"СубконтоДт1");
	ДополнительныеПоля.Вставить("СчетДтСубконто2НСБУ",	"СубконтоДт2");
	ДополнительныеПоля.Вставить("СчетДтСубконто3НСБУ",	"СубконтоДт3");
	ДополнительныеПоля.Вставить("СчетКтСубконто1НСБУ",	"СубконтоКт1");
	ДополнительныеПоля.Вставить("СчетКтСубконто2НСБУ",	"СубконтоКт2");
	ДополнительныеПоля.Вставить("СчетКтСубконто3НСБУ",	"СубконтоКт3");
		
	ПараметрыЗаполнения.Вставить("ПоляВыбора", ДополнительныеПоля);
	ПараметрыЗаполнения.Вставить("ТипДокумента", Тип("ДокументСсылка.ПризнаниеРасходовПоАмортизацииНСБУ"));
	
	Результат = ПолучитьТаблицуВНА(ПараметрыЗаполнения, Отказ);	
	
	ТаблицаВНА = Результат.ТаблицаВНА;	
	ТаблицаВНА.Колонки.СуммаНСБУ.Имя = "Сумма";
		
	//не требуется ЗаполнитьСчетаСубконтоПоСобытиям(ТаблицаВНА);	
		
	Возврат Новый Структура("ВНА,ДокументыОснования", ТаблицаВНА, Результат.ДокументыОснования);
	
КонецФункции

Функция ПолучитьДанные_ИзменениеПараметровВНА(ПараметрыЗаполнения, Отказ = Ложь) Экспорт
			
	//ИзменениеПараметровВНАМСФО - Журнал
	
	ДополнительныеПоля = Новый Структура();
	
	ДополнительныеПоля.Вставить("ПараметрыУчетаВНА",	"ПараметрыУчетаВНА");	
	ДополнительныеПоля.Вставить("ДатаСобытияНСБУ", 		"ДатаСобытияНСБУ");	
	ДополнительныеПоля.Вставить("СчетДтМСФО", 			"СчетДтМСФО");
	ДополнительныеПоля.Вставить("СчетКтМСФО", 			"СчетКтМСФО");	
	ДополнительныеПоля.Вставить("СчетДт", 				"СчетДт");
	ДополнительныеПоля.Вставить("СчетКт", 				"СчетКт");	
	
	ДополнительныеПоля.Вставить("СубконтоДт1", 			"СубконтоДт1");
	ДополнительныеПоля.Вставить("СубконтоДт2", 			"СубконтоДт2");
	ДополнительныеПоля.Вставить("СубконтоДт3", 			"СубконтоДт3");
	ДополнительныеПоля.Вставить("СубконтоКт1", 			"СубконтоКт1");
	ДополнительныеПоля.Вставить("СубконтоКт2", 			"СубконтоКт2");
	ДополнительныеПоля.Вставить("СубконтоКт3", 			"СубконтоКт3");
		
	ДополнительныеПоля.Вставить("СчетУчетаВНАМСФО", 	"СчетУчетаВНАМСФО");	
	ДополнительныеПоля.Вставить("СчетАмортизацииНСБУ",	"СчетАмортизацииНСБУ");
	ДополнительныеПоля.Вставить("СчетАмортизацииМСФО", 	"СчетАмортизацииМСФО");		
	ДополнительныеПоля.Вставить("СпособОтраженияРасходовПоАмортизацииМСФО", "СпособОтраженияРасходовПоАмортизацииМСФО");
	ДополнительныеПоля.Вставить("СпособОтраженияРасходовПоАмортизацииНСБУ", "СпособОтраженияРасходовПоАмортизацииНСБУ");
	
	ДополнительныеПоля.Вставить("СпособНачисленияАмортизацииНСБУ", "СпособНачисленияАмортизацииНСБУ");
	ДополнительныеПоля.Вставить("СпособНачисленияАмортизацииМСФО", "СпособНачисленияАмортизацииМСФО");
		
	ДополнительныеПоля.Вставить("СрокПолезногоИспользованияНСБУ",	"СрокПолезногоИспользованияНСБУ");	
	ДополнительныеПоля.Вставить("КоличествоДт",	"КоличествоДт");
	
	ПараметрыЗаполнения.Вставить("ПоляВыбора", ДополнительныеПоля);
	ПараметрыЗаполнения.Вставить("ТипДокумента", Тип("ДокументСсылка.ИзменениеПараметровВНАМСФО"));
	
	Результат = ПолучитьТаблицуВНА(ПараметрыЗаполнения, Отказ);	
	
	ТаблицаВНА = Результат.ТаблицаВНА;	
	
	ВстраиваниеУХ.СформироватьПрофилиРаспределения(ТаблицаВНА, "СпособОтраженияРасходовПоАмортизацииМСФО", "СпособОтраженияРасходовПоАмортизацииНСБУ", ПараметрыЗаполнения.ШаблонТрансляции, Отказ);
	
	Возврат Новый Структура("ВНА,ДокументыОснования", ТаблицаВНА, Результат.ДокументыОснования);

КонецФункции

Функция ПолучитьДанные_ВыработкаВНА(ПараметрыЗаполнения, Отказ = Ложь) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДокументыОснования.Ссылка КАК ДокументОснование,
	|	ИСТИНА КАК ПоОС
	|ПОМЕСТИТЬ втДокументыОснования
	|ИЗ
	|	Документ.ВыработкаОС КАК ДокументыОснования
	|ГДЕ
	|	ДокументыОснования.Организация = &Организация
	|	И ДокументыОснования.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И ДокументыОснования.Проведен
	|{ГДЕ
	|	ДокументыОснования.Ссылка.* КАК ДокументОснование}
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументыОснования.Ссылка,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.ВыработкаНМА КАК ДокументыОснования
	|ГДЕ
	|	ДокументыОснования.Проведен
	|	И ДокументыОснования.Организация = &Организация
	|	И ДокументыОснования.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|{ГДЕ
	|	ДокументыОснования.Ссылка.* КАК ДокументОснование}
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(ПараметрыВыработкиВНА.Ссылка) КАК ПараметрВыработкиМСФО,
	|	ПараметрыВыработкиВНА.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ втПараметрыВыработкиМСФО
	|ИЗ
	|	Справочник.ПараметрыВыработкиВНА КАК ПараметрыВыработкиВНА
	|ГДЕ
	|	ПараметрыВыработкиВНА.ЕдиницаИзмерения В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				ПараметрыВыработкиОС.ЕдиницаИзмерения
	|			ИЗ
	|				Справочник.ПараметрыВыработкиОС КАК ПараметрыВыработкиОС
	|			ГДЕ
	|				НЕ ПараметрыВыработкиОС.ПометкаУдаления)
	|	И НЕ ПараметрыВыработкиВНА.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	ПараметрыВыработкиВНА.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДокументыОснования.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	втДокументыОснования КАК втДокументыОснования
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВыработкаОС.ОсновноеСредство КАК ВНА,
	|	ВыработкаОС.ПараметрВыработки КАК ПараметрВыработкиНСБУ,
	|	втПараметрыВыработкиМСФО.ПараметрВыработкиМСФО КАК ПараметрВыработки,
	|	СУММА(ВыработкаОС.Количество) КАК КоличествоНСБУ,
	|	СУММА(ВыработкаОС.Количество) КАК КоличествоМСФО
	|ИЗ
	|	РегистрНакопления.ВыработкаОС КАК ВыработкаОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПараметрыВыработкиМСФО КАК втПараметрыВыработкиМСФО
	|		ПО ВыработкаОС.ПараметрВыработки.ЕдиницаИзмерения = втПараметрыВыработкиМСФО.ЕдиницаИзмерения
	|ГДЕ
	|	ВыработкаОС.Регистратор В
	|			(ВЫБРАТЬ
	|				втДокументыОснования.ДокументОснование
	|			ИЗ
	|				втДокументыОснования КАК втДокументыОснования)
	|	И ВыработкаОС.Активность
	|	И ВыработкаОС.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыработкаОС.ОсновноеСредство,
	|	ВыработкаОС.ПараметрВыработки,
	|	втПараметрыВыработкиМСФО.ПараметрВыработкиМСФО
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВыработкаОС.НематериальныйАктив,
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО,
	|	СУММА(ВыработкаОС.Количество),
	|	СУММА(ВыработкаОС.Количество)
	|ИЗ
	|	РегистрНакопления.ВыработкаНМА КАК ВыработкаОС
	|ГДЕ
	|	ВыработкаОС.Регистратор В
	|			(ВЫБРАТЬ
	|				втДокументыОснования.ДокументОснование
	|			ИЗ
	|				втДокументыОснования КАК втДокументыОснования)
	|	И ВыработкаОС.Активность
	|	И ВыработкаОС.Организация = &Организация
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыработкаОС.НематериальныйАктив");
						  
	Запрос.УстановитьПараметр("Организация", 	ПараметрыЗаполнения.Организация);
	Запрос.УстановитьПараметр("ДатаНачала", 	ПараметрыЗаполнения.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", 	ПараметрыЗаполнения.ДатаОкончания);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	ЧислоЗапросов = РезультатЗапроса.Количество();
	ТаблицаВНА = РезультатЗапроса[ЧислоЗапросов-1].Выгрузить();
	ТаблицаОснования = РезультатЗапроса[ЧислоЗапросов-2].Выгрузить();
	
	Возврат Новый Структура("ВНА,ДокументыОснования", ТаблицаВНА, ТаблицаОснования); 
	
КонецФункции

Функция ПолучитьДанные_ВводСведенийОФинансовыхИнструментах(ПараметрыЗаполнения, Отказ = Ложь) Экспорт
	
	ДополнительныеПоля = Новый Структура();
	
	ДополнительныеПоля.Вставить("ФИ", "ФИ");
	
	ДополнительныеПоля.Вставить("ПараметрыУчетаВНА",	"ПараметрыУчетаВНА");	
	ДополнительныеПоля.Вставить("Дата", 				"ДатаСобытияНСБУ");
	
	ДополнительныеПоля.Вставить("СчетУчетаНСБУ", 		"СчетДт");
	ДополнительныеПоля.Вставить("СчетПоступленияНСБУ", 	"СчетКт");
	ДополнительныеПоля.Вставить("СчетУчетаМСФО", 		"СчетДтМСФО");
	ДополнительныеПоля.Вставить("СчетПоступленияМСФО", 	"СчетКтМСФО");
		
	ДополнительныеПоля.Вставить("СчетУчетаСубконто1НСБУ", 		"СубконтоДт1");
	ДополнительныеПоля.Вставить("СчетУчетаСубконто2НСБУ", 		"СубконтоДт2");
	ДополнительныеПоля.Вставить("СчетУчетаСубконто3НСБУ", 		"СубконтоДт3");
	ДополнительныеПоля.Вставить("СчетПоступленияСубконто1НСБУ", "СубконтоКт1");
	ДополнительныеПоля.Вставить("СчетПоступленияСубконто2НСБУ", "СубконтоКт2");
	ДополнительныеПоля.Вставить("СчетПоступленияСубконто3НСБУ", "СубконтоКт3");
		
	ДополнительныеПоля.Вставить("СчетУчетаВНАМСФО", 	"СчетУчетаВНАМСФО");	
	ДополнительныеПоля.Вставить("СчетАмортизацииНСБУ",	"СчетАмортизацииНСБУ");
	ДополнительныеПоля.Вставить("СчетАмортизацииМСФО", 	"СчетАмортизацииМСФО");		
	
	ДополнительныеПоля.Вставить("СпособОтраженияРасходовПоАмортизацииНСБУ", "СпособОтраженияРасходовПоАмортизацииНСБУ");
	ДополнительныеПоля.Вставить("СпособОтраженияРасходовПоАмортизацииМСФО", "СпособОтраженияРасходовПоАмортизацииМСФО");
	ДополнительныеПоля.Вставить("СрокПолезногоИспользованияНСБУ",	"СрокПолезногоИспользованияНСБУ");
	ДополнительныеПоля.Вставить("СрокПолезногоИспользованияМСФО",	"СрокПолезногоИспользованияНСБУ");
	ДополнительныеПоля.Вставить("СпособНачисленияАмортизацииНСБУ", "СпособНачисленияАмортизацииНСБУ");
	ДополнительныеПоля.Вставить("СпособНачисленияАмортизацииМСФО", "СпособНачисленияАмортизацииМСФО");
	
	ДополнительныеПоля.Вставить("КоличествоДт",	"КоличествоДт");
	
	ПараметрыЗаполнения.Вставить("ПоляВыбора", ДополнительныеПоля);
	ПараметрыЗаполнения.Вставить("ТипДокумента", Тип("ДокументСсылка.ВводСведенийОФинансовыхИнструментах"));
	
	Результат = ПолучитьТаблицуВНА(ПараметрыЗаполнения, Отказ);	
	
	ТаблицаВНА = Результат.ТаблицаВНА;
				
	//ЗаполнитьСчетаСубконтоПоСобытиям(ТаблицаВНА);	
	ВстраиваниеУХ.СформироватьПрофилиРаспределения(ТаблицаВНА, "СпособОтраженияРасходовПоАмортизацииМСФО", "СпособОтраженияРасходовПоАмортизацииНСБУ", ПараметрыЗаполнения.ШаблонТрансляции, Отказ);
	
	Возврат Новый Структура("ВНА,ДокументыОснования", ТаблицаВНА, Результат.ДокументыОснования);
	
КонецФункции

#КонецОбласти

#Область ВНА_Прочие

Функция ПолучитьДанные_НачальныеОстаткиВНА(ПараметрыЗаполнения, Отказ = Ложь) Экспорт
	
	ПараметрыЗаполнения.Вставить("ТипДокумента", ВстраиваниеУХ.ПолучитьТипыДокументовНачальныеОстаткиВНА());
	
	СчетаУчета = Новый СписокЗначений;
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.МЦвОрганизации);
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы);
			
	ПараметрыЗаполнения.Вставить("СчетДт", 			СчетаУчета);	
	ПараметрыЗаполнения.Вставить("ПараметрыВНА", 	Ложь);
	
	ДополнительныеПоля = Новый Структура();
	//ДополнительныеПоля.Вставить("ВНА", 				"ОбъектВНАДт");
	ДополнительныеПоля.Вставить("СуммаВВалютеНСБУ", "ВалютнаяСуммаКт");
	ДополнительныеПоля.Вставить("Валюта", 			"ВалютаКт");
	ДополнительныеПоля.Вставить("КоличествоНСБУ", 	"КоличествоДт");
	ДополнительныеПоля.Вставить("СчетУчетаМСФО", 	"СчетДтМСФО");
	ДополнительныеПоля.Вставить("КоррСчетМСФО", 	"СчетКтМСФО");
	ДополнительныеПоля.Вставить("СпособОтраженияРасходовПоАмортизацииМСФО", "СпособОтраженияРасходовПоАмортизацииМСФО");
	
	ДополнительныеПоля.Вставить("СчетДт", 				"СчетДт");
	ДополнительныеПоля.Вставить("СчетКт", 				"СчетКт");	
	
	ДополнительныеПоля.Вставить("СубконтоДт1", 			"СубконтоДт1");
	ДополнительныеПоля.Вставить("СубконтоДт2", 			"СубконтоДт2");
	ДополнительныеПоля.Вставить("СубконтоДт3", 			"СубконтоДт3");
	ДополнительныеПоля.Вставить("СубконтоКт1", 			"СубконтоКт1");
	ДополнительныеПоля.Вставить("СубконтоКт2", 			"СубконтоКт2");
	ДополнительныеПоля.Вставить("СубконтоКт3", 			"СубконтоКт3");
	
	ПараметрыЗаполнения.Вставить("ПоляВыбора", ДополнительныеПоля);
	
	Результат = ПолучитьТаблицуВНА(ПараметрыЗаполнения, Отказ);	
	
	ТаблицаВНА = Результат.ТаблицаВНА;		
	
	ТаблицаВНА.Колонки.СчетДт.Имя = "СчетУчетаНСБУ";
	ТаблицаВНА.Колонки.СубконтоДт1.Имя = "СчетУчетаСубконто1НСБУ";
	ТаблицаВНА.Колонки.СубконтоДт2.Имя = "СчетУчетаСубконто2НСБУ";
	ТаблицаВНА.Колонки.СубконтоДт3.Имя = "СчетУчетаСубконто3НСБУ";
	
	ТаблицаВНА.Колонки.СчетКт.Имя = "КоррСчетНСБУ";
	ТаблицаВНА.Колонки.СубконтоКт1.Имя = "КоррСчетСубконто1НСБУ";
	ТаблицаВНА.Колонки.СубконтоКт2.Имя = "КоррСчетСубконто2НСБУ";
	ТаблицаВНА.Колонки.СубконтоКт3.Имя = "КоррСчетСубконто3НСБУ";
		
	ТаблицаВНА.Колонки.Добавить("ГруппаВНАМСФО");	
	
	СформироватьГруппыВНА(ТаблицаВНА, "ВНА", "ГруппаВНАМСФО", Перечисления.КлассыВНА.НезавершенноеСтроительство, "СчетУчетаМСФО", "СчетАмортизацииМСФО", "НачислятьАмортизациюНСБУ", Отказ);
	
	Возврат Новый Структура("ВНА,ДокументыОснования", ТаблицаВНА, Результат.ДокументыОснования);
	
КонецФункции

Функция ПолучитьДанные_ВводСведенийВНА(ПараметрыЗаполнения, Отказ = Ложь) Экспорт
	
	ДокументСобытиеВНА = Новый СписокЗначений;
	
	ПараметрыЗаполнения.Вставить("ТипДокумента", Тип("ДокументСсылка.ВводСведенийВНАМСФО"));
	
	СчетаУчета = Новый СписокЗначений;
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы);
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.ОсновныеСредства);
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.НематериальныеАктивы);
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияОсновныхСредств);
	СчетаУчета.Добавить(ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов);
	
	ОтборСчетаВыбытия = Новый Структура("Значение,ВидСравнения", Истина, ВидСравнения.Равно);
	
	ПараметрыЗаполнения.Вставить("ОтборПостроителя", 	Новый Структура("Счет,ИсключитьПроводкиСчетаВыбытия", СчетаУчета, ОтборСчетаВыбытия));
	ПараметрыЗаполнения.Вставить("Счет",				СчетаУчета);
	ПараметрыЗаполнения.Вставить("ПараметрыВНА",		Истина);
	ПараметрыЗаполнения.Вставить("ЖурналОпераций",		Истина);
	
	ДополнительныеПоля = Новый Структура();
	
	ДополнительныеПоля.Вставить("ВНА", 						"ОбъектВНА");
	ДополнительныеПоля.Вставить("ВидОперации", 				"ВидОперации");
	ДополнительныеПоля.Вставить("СчетДтМСФО", 				"СчетДтМСФО");
	ДополнительныеПоля.Вставить("СчетКтМСФО", 				"СчетКтМСФО");	
	ДополнительныеПоля.Вставить("СчетУчетаВНАМСФО", 		"СчетУчетаВНАМСФО");
	ДополнительныеПоля.Вставить("СчетУчетаВНАНСБУ", 		"СчетУчетаВНАНСБУ");
	ДополнительныеПоля.Вставить("АмортизацияНСБУ", 			"АмортизацияНСБУ");
	ДополнительныеПоля.Вставить("СчетАмортизацииНСБУ", 		"СчетАмортизацииНСБУ");
	ДополнительныеПоля.Вставить("СчетАмортизацииМСФО", 		"СчетАмортизацииМСФО");
	ДополнительныеПоля.Вставить("КлассВНАИсточник", 		"КлассВНАИсточник");
	ДополнительныеПоля.Вставить("СпособОтраженияРасходовПоАмортизацииМСФО", "СпособОтраженияРасходовПоАмортизацииМСФО");
		
	ПараметрыЗаполнения.Вставить("ДополнительныеПоля", ДополнительныеПоля);
	
	Результат = ПолучитьТаблицуВНА(ПараметрыЗаполнения, Отказ);	
	
	ТаблицаВНА = Результат.ТаблицаВНА;	
	ТаблицаВНА.Колонки.СуммаНСБУ.Имя = "СтоимостьНСБУ";
	
	ЗаполнитьСчетаСубконтоПоСобытиям(ТаблицаВНА);
	
	ТаблицаВНА.Колонки.Добавить("ГруппаВНА");		
	СформироватьГруппыВНА(ТаблицаВНА, "ВНА", "ГруппаВНА", "КлассВНА", "СчетУчетаВНАМСФО", "СчетАмортизацииМСФО", "НачислятьАмортизациюНСБУ", Отказ);
	ВстраиваниеУХ.СформироватьПрофилиРаспределения(ТаблицаВНА, "СпособОтраженияРасходовПоАмортизацииМСФО", "СпособОтраженияРасходовПоАмортизацииНСБУ", ПараметрыЗаполнения.ШаблонТрансляции, Отказ);
	
	ТаблицаСведенийВНА = ПолучитьТаблицуСведенийВНА(ТаблицаВНА);
		
	Возврат Новый Структура("ВНА,ДокументыОснования", ТаблицаСведенийВНА, Результат.ДокументыОснования);

КонецФункции

Функция ПолучитьДанные_ВводСобытийВНА(ПараметрыЗаполнения, Отказ = Ложь) Экспорт
	
	//ВводВНАВЭксплуатациюМСФО - Журнал
	//ВыбытиеВНАМСФО - Журнал
	//ИзменениеПараметровВНАМСФО - Журнал
	//МодернизацияВНАМСФО - Журнал
	//ПризнаниеРасходовПоАмортизацииНСБУ - Хозрасчетный
	
	ДополнительныеПоля = Новый Структура();
	
	ДополнительныеПоля.Вставить("ПараметрыУчетаВНА",	"ПараметрыУчетаВНА");	
	ДополнительныеПоля.Вставить("ДатаСобытияНСБУ", 		"ДатаСобытияНСБУ");	
	ДополнительныеПоля.Вставить("СчетДтМСФО", 			"СчетДтМСФО");
	ДополнительныеПоля.Вставить("СчетКтМСФО", 			"СчетКтМСФО");	
	ДополнительныеПоля.Вставить("СчетДт", 				"СчетДт");
	ДополнительныеПоля.Вставить("СчетКт", 				"СчетКт");	
	
	ДополнительныеПоля.Вставить("СубконтоДт1", 			"СубконтоДт1");
	ДополнительныеПоля.Вставить("СубконтоДт2", 			"СубконтоДт2");
	ДополнительныеПоля.Вставить("СубконтоДт3", 			"СубконтоДт3");
	ДополнительныеПоля.Вставить("СубконтоКт1", 			"СубконтоКт1");
	ДополнительныеПоля.Вставить("СубконтоКт2", 			"СубконтоКт2");
	ДополнительныеПоля.Вставить("СубконтоКт3", 			"СубконтоКт3");
		
	ДополнительныеПоля.Вставить("СчетУчетаВНАМСФО", 	"СчетУчетаВНАМСФО");	
	ДополнительныеПоля.Вставить("СчетАмортизацииНСБУ",	"СчетАмортизацииНСБУ");
	ДополнительныеПоля.Вставить("СчетАмортизацииМСФО", 	"СчетАмортизацииМСФО");		
	ДополнительныеПоля.Вставить("СпособОтраженияРасходовПоАмортизацииМСФО", "СпособОтраженияРасходовПоАмортизацииМСФО");
	ДополнительныеПоля.Вставить("СпособОтраженияРасходовПоАмортизацииНСБУ", "СпособОтраженияРасходовПоАмортизацииНСБУ");
	
	ДополнительныеПоля.Вставить("СпособНачисленияАмортизацииНСБУ", "СпособНачисленияАмортизацииНСБУ");
	ДополнительныеПоля.Вставить("СпособНачисленияАмортизацииМСФО", "СпособНачисленияАмортизацииМСФО");
		
	ДополнительныеПоля.Вставить("СрокПолезногоИспользованияНСБУ",	"СрокПолезногоИспользованияНСБУ");	
	ДополнительныеПоля.Вставить("КоличествоДт",	"КоличествоДт");
	
	ПараметрыЗаполнения.Вставить("ПоляВыбора", ДополнительныеПоля);
	ПараметрыЗаполнения.Вставить("ТипДокумента", Тип("ДокументСсылка.ВводСобытийВНАМСФО"));
	
	Результат = ПолучитьТаблицуВНА(ПараметрыЗаполнения, Отказ);	
	
	ТаблицаВНА = Результат.ТаблицаВНА;	
			
	ЗаполнитьСчетаСубконтоПоСобытиям(ТаблицаВНА);	
	ВстраиваниеУХ.СформироватьПрофилиРаспределения(ТаблицаВНА, "СпособОтраженияРасходовПоАмортизацииМСФО", "СпособОтраженияРасходовПоАмортизацииНСБУ", ПараметрыЗаполнения.ШаблонТрансляции, Отказ);
	
	Возврат Новый Структура("ВНА,ДокументыОснования", ТаблицаВНА, Результат.ДокументыОснования);
	
КонецФункции
 
#КонецОбласти

#Область ВНА_ВспомогательныеФункции

Функция ПолучитьТаблицуВНА(ПараметрыЗаполнения, Отказ)
	
	ЗначенияУП = МСФОВызовСервераУХ.РеквизитыДляФормыУП(ПараметрыЗаполнения.Организация,
		ПараметрыЗаполнения.ДатаОкончания, ПараметрыЗаполнения.Сценарий);
	
	ОтчетВНА = Отчеты.ЗаполнениеДокументовВНА_ИзБП.Создать();
	
	МакетСКД = ОтчетВНА.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	МакетСКД.НаборыДанных[0].Запрос = ТекстЗапроса_ЗаполненияИзРСБУ();
	
	НастройкиСКД = ОтчетВНА.КомпоновщикНастроек.Настройки;	
	НастройкиСКД.Выбор.Элементы.Очистить();
	
	ТиповыеОтчетыУХ.ДобавитьВыбранноеПоле(НастройкиСКД.Выбор, "ВНА");
	ТиповыеОтчетыУХ.ДобавитьВыбранноеПоле(НастройкиСКД.Выбор, "СуммаНСБУ");
	ТиповыеОтчетыУХ.ДобавитьВыбранноеПоле(НастройкиСКД.Выбор, "ДокументОснование");	
	ТиповыеОтчетыУХ.ДобавитьВыбранноеПоле(НастройкиСКД.Выбор, "ВидОперации");
	
	ВстраиваниеУХ.ДоработатьПараметрыЗаполненияВНА(ПараметрыЗаполнения);
	
	Если ПараметрыЗаполнения.Свойство("ПоляВыбора") Тогда 
		Для каждого ПолеИсточник Из ПараметрыЗаполнения.ПоляВыбора Цикл		
			ТиповыеОтчетыУХ.ДобавитьВыбранноеПоле(НастройкиСКД.Выбор, ПолеИсточник.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыИсточники = Новый Структура("Сценарий,Организация,ДатаНачала,ДатаОкончания,ШаблонТрансляции,ТипДокумента,Ссылка");
	Для каждого ТекущийПараметр Из ПараметрыЗаполнения Цикл
		Если ПараметрыИсточники.Свойство(ТекущийПараметр.Ключ) Тогда
			НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра(ТекущийПараметр.Ключ, ТекущийПараметр.Значение);
		КонецЕсли;		
	КонецЦикла;

	Если ПараметрыЗаполнения.Свойство("ДокументОснование") Тогда
		
		Основания = Новый СписокЗначений;
		
		Если ТипЗнч(ПараметрыЗаполнения.ДокументОснование) = Тип("Массив") Тогда 
			Основания.ЗагрузитьЗначения(ПараметрыЗаполнения.ДокументОснование);
		Иначе
			Основания.Добавить(ПараметрыЗаполнения.ДокументОснование);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
			НастройкиСКД.Отбор, "ДокументОснование", ВидСравненияКомпоновкиДанных.ВСписке, Основания); 
			
	КонецЕсли;
	
	ОтчетВНА.ЗаполнитьПараметрыПоТипуДокумента(НастройкиСКД, Истина);
	
	УстановитьПривилегированныйРежим(Истина);
 	ТаблицаВНА = ТиповыеОтчетыУХ.ПолучитьКоллекциюРезультат(МакетСКД, НастройкиСКД, , , , , , новый ТаблицаЗначений);
	УстановитьПривилегированныйРежим(Ложь);
	//ТиповыеОтчетыУХ.МакетКомпоновкиВXML(ТиповыеОтчетыУХ.ПолучитьМакетКомпоновкиДанныхКоллекции(МакетСКД, НастройкиСКД));
	
	ТаблицаОснования = ТаблицаВНА.Скопировать(,"ДокументОснование");
	ТаблицаОснования.Свернуть("ДокументОснование");
	
	Если ПараметрыЗаполнения.Свойство("Организация") И НЕ ЗначенияУП.ФормироватьПроводкиМСФО Тогда
		ТаблицаВНА.Колонки.Добавить("СторнироватьДанныеНСБУ", Новый ОписаниеТипов("Булево"));
		ТаблицаВНА.ЗаполнитьЗначения(Истина, "СторнироватьДанныеНСБУ");
	КонецЕсли;
	
	Если ПараметрыЗаполнения.Свойство("ПоляВыбора") И (ПараметрыЗаполнения.ПоляВыбора <> Неопределено) Тогда
		Для каждого ПолеИсточник Из ПараметрыЗаполнения.ПоляВыбора Цикл
			ТаблицаВНА.Колонки[СтрЗаменить(ПолеИсточник.Значение,".","")].Имя = ПолеИсточник.Ключ;
		КонецЦикла;
	КонецЕсли;
		
	Возврат Новый Структура("ТаблицаВНА,ДокументыОснования", ТаблицаВНА, ТаблицаОснования);

КонецФункции

Процедура ЗаполнитьСчетаСубконтоПоСобытиям(ТаблицаВНА)
		
	ТаблицаВНА.Колонки.Добавить("СчетУчетаНСБУ");
	ТаблицаВНА.Колонки.Добавить("СчетУчетаМСФО");
	ТаблицаВНА.Колонки.Добавить("СчетУчетаПодразделениеНСБУ");
	ТаблицаВНА.Колонки.Добавить("СчетУчетаНаправлениеДеятельностиНСБУ");
	ТаблицаВНА.Колонки.Добавить("СчетУчетаСубконто1НСБУ");
	ТаблицаВНА.Колонки.Добавить("СчетУчетаСубконто2НСБУ");
	ТаблицаВНА.Колонки.Добавить("СчетУчетаСубконто3НСБУ");
	
	//ТаблицаВНА.Колонки.Добавить("СчетАмортизацииНСБУ");
	//ТаблицаВНА.Колонки.Добавить("СчетАмортизацииМСФО");
	ТаблицаВНА.Колонки.Добавить("СчетАмортизацииСубконто1НСБУ");
					
	ТаблицаВНА.Колонки.Добавить("СчетВыбытияВНАНСБУ");
	ТаблицаВНА.Колонки.Добавить("СчетВыбытияВНАМСФО");
	ТаблицаВНА.Колонки.Добавить("СчетВыбытияВНАСубконто1НСБУ");
		
	ТаблицаВНА.Колонки.Добавить("КоррСчетНСБУ");
	ТаблицаВНА.Колонки.Добавить("КоррСчетМСФО");//СчетРасходаМСФО
	ТаблицаВНА.Колонки.Добавить("КоррСчетСубконто1НСБУ");
	ТаблицаВНА.Колонки.Добавить("КоррСчетСубконто2НСБУ");
	ТаблицаВНА.Колонки.Добавить("КоррСчетСубконто3НСБУ");
	
	ТаблицаВНА.Колонки.Добавить("КоличествоНСБУ");
	
	Для каждого СтрокаВНА Из ТаблицаВНА Цикл
		
		Если СтрокаВНА.ВидОперации = Справочники.ВидыОпераций.СторноАмортизацииНСБУ Тогда
			
			СтрокаВНА.КоррСчетНСБУ = СтрокаВНА.СчетДт;
			СтрокаВНА.КоррСчетМСФО = СтрокаВНА.СчетДтМСФО;
			СтрокаВНА.КоррСчетСубконто1НСБУ = СтрокаВНА.СубконтоДт1;
			СтрокаВНА.КоррСчетСубконто2НСБУ = СтрокаВНА.СубконтоДт2;
			СтрокаВНА.КоррСчетСубконто3НСБУ = СтрокаВНА.СубконтоДт3;
			
			СтрокаВНА.СчетАмортизацииНСБУ = СтрокаВНА.СчетКт;
			СтрокаВНА.СчетАмортизацииМСФО = ПолучитьСчет(СтрокаВНА.ПараметрыУчетаВНА.СчетНакопленнойАмортизации, СтрокаВНА.СчетКтМСФО);
			СтрокаВНА.СчетАмортизацииСубконто1НСБУ = СтрокаВНА.СубконтоКт1;	
		
		ИначеЕсли (СтрокаВНА.ВидОперации = Справочники.ВидыОпераций.ВводВЭксплуатацию)
			Или (СтрокаВНА.ВидОперации = Справочники.ВидыОпераций.МодернизацияВНА) Тогда
			
			СтрокаВНА.СчетУчетаНСБУ = СтрокаВНА.СчетДт;
			СтрокаВНА.СчетУчетаМСФО = ПолучитьСчет(СтрокаВНА.ПараметрыУчетаВНА.СчетУчетаПервоначальнойСтоимости, СтрокаВНА.СчетДтМСФО);
			СтрокаВНА.СчетУчетаСубконто1НСБУ = СтрокаВНА.СубконтоДт1;
			СтрокаВНА.СчетУчетаСубконто2НСБУ = СтрокаВНА.СубконтоДт2;
			СтрокаВНА.СчетУчетаСубконто3НСБУ = СтрокаВНА.СубконтоДт3;
			
			СтрокаВНА.СчетАмортизацииНСБУ = СтрокаВНА.СчетАмортизацииНСБУ;
			СтрокаВНА.СчетАмортизацииМСФО = ПолучитьСчет(СтрокаВНА.ПараметрыУчетаВНА.СчетНакопленнойАмортизации, СтрокаВНА.СчетАмортизацииМСФО);
			СтрокаВНА.СчетАмортизацииСубконто1НСБУ = СтрокаВНА.СчетАмортизацииСубконто1НСБУ;
			
			СтрокаВНА.КоррСчетНСБУ = СтрокаВНА.СчетКт;
			СтрокаВНА.КоррСчетМСФО = СтрокаВНА.СчетКтМСФО;
			СтрокаВНА.КоррСчетСубконто1НСБУ = СтрокаВНА.СубконтоКт1;
			СтрокаВНА.КоррСчетСубконто2НСБУ = СтрокаВНА.СубконтоКт2;
			СтрокаВНА.КоррСчетСубконто3НСБУ = СтрокаВНА.СубконтоКт3;
			
		ИначеЕсли СтрокаВНА.ВидОперации = Справочники.ВидыОпераций.ПринятиеКУчетуВНА Тогда
			
			СтрокаВНА.СчетУчетаНСБУ = СтрокаВНА.СчетДт;
			СтрокаВНА.СчетУчетаМСФО = ПолучитьСчет(СтрокаВНА.ПараметрыУчетаВНА.СчетУчетаПервоначальнойСтоимости, СтрокаВНА.СчетДтМСФО);
			СтрокаВНА.СчетУчетаСубконто1НСБУ = СтрокаВНА.СубконтоДт1;
			СтрокаВНА.СчетУчетаСубконто2НСБУ = СтрокаВНА.СубконтоДт2;
			СтрокаВНА.СчетУчетаСубконто3НСБУ = СтрокаВНА.СубконтоДт3;
			
			СтрокаВНА.КоррСчетНСБУ = СтрокаВНА.СчетКт;
			СтрокаВНА.КоррСчетМСФО = СтрокаВНА.СчетКтМСФО;
			СтрокаВНА.КоррСчетСубконто1НСБУ = СтрокаВНА.СубконтоКт1;
			СтрокаВНА.КоррСчетСубконто2НСБУ = СтрокаВНА.СубконтоКт2;
			СтрокаВНА.КоррСчетСубконто3НСБУ = СтрокаВНА.СубконтоКт3;
			
			СтрокаВНА.КоличествоНСБУ = СтрокаВНА.КоличествоДт;
									
		ИначеЕсли СтрокаВНА.ВидОперации = Справочники.ВидыОпераций.ВыбытиеВНА Тогда	
			
			СтрокаВНА.КоррСчетНСБУ = СтрокаВНА.СчетДт;
			СтрокаВНА.КоррСчетМСФО = СтрокаВНА.СчетДтМСФО;
			СтрокаВНА.КоррСчетСубконто1НСБУ = СтрокаВНА.СубконтоДт1;
			СтрокаВНА.КоррСчетСубконто2НСБУ = СтрокаВНА.СубконтоДт2;
			СтрокаВНА.КоррСчетСубконто3НСБУ = СтрокаВНА.СубконтоДт3;
			
			СтрокаВНА.СчетВыбытияВНАНСБУ = СтрокаВНА.СчетКт;
			СтрокаВНА.СчетВыбытияВНАМСФО = ПолучитьСчет(СтрокаВНА.ПараметрыУчетаВНА.ПараметрыВыбытия.СчетВыбытияВНА, СтрокаВНА.ПараметрыУчетаВНА.СчетУчетаПервоначальнойСтоимости);
			СтрокаВНА.СчетВыбытияВНАСубконто1НСБУ = СтрокаВНА.СубконтоКт1;
			
			СтрокаВНА.СуммаНСБУ = - СтрокаВНА.СуммаНСБУ;
			
		ИначеЕсли СтрокаВНА.ВидОперации = Справочники.ВидыОпераций.ИзменениеПараметровАмортизации Тогда
			
			СтрокаВНА.СчетУчетаНСБУ = СтрокаВНА.СчетДт;
			СтрокаВНА.СчетУчетаМСФО = ПолучитьСчет(СтрокаВНА.ПараметрыУчетаВНА.СчетУчетаПервоначальнойСтоимости, СтрокаВНА.СчетДтМСФО);
			СтрокаВНА.СчетУчетаСубконто1НСБУ = СтрокаВНА.СубконтоДт1;
			СтрокаВНА.СчетУчетаСубконто2НСБУ = СтрокаВНА.СубконтоДт2;
			СтрокаВНА.СчетУчетаСубконто3НСБУ = СтрокаВНА.СубконтоДт3;
			
			СтрокаВНА.КоррСчетНСБУ = СтрокаВНА.СчетКт;
			СтрокаВНА.КоррСчетМСФО = СтрокаВНА.СчетКтМСФО;
			СтрокаВНА.КоррСчетСубконто1НСБУ = СтрокаВНА.СубконтоКт1;
			СтрокаВНА.КоррСчетСубконто2НСБУ = СтрокаВНА.СубконтоКт2;
			СтрокаВНА.КоррСчетСубконто3НСБУ = СтрокаВНА.СубконтоКт3;
			
		ИначеЕсли СтрокаВНА.ВидОперации = Справочники.ВидыОпераций.ПереоценкаВНА Тогда
			
			СтрокаВНА.СчетУчетаНСБУ = СтрокаВНА.СчетДт;
			СтрокаВНА.СчетУчетаМСФО = ПолучитьСчет(СтрокаВНА.ПараметрыУчетаВНА.СчетУчетаПервоначальнойСтоимости, СтрокаВНА.СчетДтМСФО);
			СтрокаВНА.СчетУчетаСубконто1НСБУ = СтрокаВНА.СубконтоДт1;
			СтрокаВНА.СчетУчетаСубконто2НСБУ = СтрокаВНА.СубконтоДт2;
			СтрокаВНА.СчетУчетаСубконто3НСБУ = СтрокаВНА.СубконтоДт3;
			
			СтрокаВНА.КоррСчетНСБУ = СтрокаВНА.СчетКт;
			СтрокаВНА.КоррСчетМСФО = СтрокаВНА.СчетКтМСФО;
			СтрокаВНА.КоррСчетСубконто1НСБУ = СтрокаВНА.СубконтоКт1;
			СтрокаВНА.КоррСчетСубконто2НСБУ = СтрокаВНА.СубконтоКт2;
			СтрокаВНА.КоррСчетСубконто3НСБУ = СтрокаВНА.СубконтоКт3;	
				
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСчет(ОсновнойСчет, ДополнительныйСчет)
	Возврат ?(ЗначениеЗаполнено(ОсновнойСчет), ОсновнойСчет, ДополнительныйСчет); 
КонецФункции

Функция ПолучитьТаблицуСведенийВНА(ТаблицаВНА, Отказ = Ложь)
	
	ТаблицаСведений = Документы.ВводСведенийВНАМСФО.ПустаяСсылка().ВНА.ВыгрузитьКолонки();
	
	КэшСтрокПоВНА = Новый Соответствие; // считаем, что 1 ВНА в двух группах бывает редко
	КэшСтрокПоВНАПоГруппам = Новый Соответствие;// медленнее, но учитывает группы
	
	Для каждого СтрокаИсточникВНА Из ТаблицаВНА Цикл
		
		СтрокаСведений = ПолучитьСтрокуИзКэша(СтрокаИсточникВНА, ТаблицаСведений, КэшСтрокПоВНА, КэшСтрокПоВНАПоГруппам);
		
		Если СтрокаИсточникВНА.ВидОперации = Справочники.ВидыОпераций.ВводВЭксплуатацию Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаСведений, СтрокаИсточникВНА);			
			СтрокаСведений.ДатаВводаНСБУ = СтрокаИсточникВНА.ДатаСобытияНСБУ;
			
			СтрокаСведений.КоррСчетПриобретениеНСБУ 			= СтрокаИсточникВНА.КорСчетНСБУ;
			СтрокаСведений.КоррСчетПриобретениеСубконто1НСБУ 	= СтрокаИсточникВНА.КорСчетСубконто1НСБУ;
			СтрокаСведений.КоррСчетПриобретениеСубконто2НСБУ	= СтрокаИсточникВНА.КорСчетСубконто2НСБУ;
			СтрокаСведений.КоррСчетПриобретениеСубконто2НСБУ	= СтрокаИсточникВНА.КорСчетСубконто3НСБУ;
			СтрокаСведений.КоррСчетПриобретениеМСФО 			= СтрокаИсточникВНА.КорСчетМСФО;
			
		ИначеЕсли СтрокаИсточникВНА.ВидОперации = Справочники.ВидыОпераций.МодернизацияВНА Тогда
			
			ЗаполнитьЗначенияСвойств(СтрокаСведений, СтрокаИсточникВНА, "НачислятьАмортизациюНСБУ,КоэффициентУскоренияНСБУ,СпособНачисленияАмортизацииНСБУ,СрокПолезногоИспользованияНСБУ");
			
			СтрокаСведений.ДатаМодернизацииНСБУ = СтрокаИсточникВНА.ДатаСобытияНСБУ;
			СтрокаСведений.МодернизацияНСБУ = СтрокаСведений.МодернизацияНСБУ + СтрокаИсточникВНА.СтоимостьНСБУ;
			
			СтрокаСведений.КоррСчетМодернизацияНСБУ 			= СтрокаИсточникВНА.КорСчетНСБУ;
			СтрокаСведений.КоррСчетМодернизацияСубконто1НСБУ 	= СтрокаИсточникВНА.КорСчетСубконто1НСБУ;
			СтрокаСведений.КоррСчетМодернизацияСубконто2НСБУ	= СтрокаИсточникВНА.КорСчетСубконто2НСБУ;
			СтрокаСведений.КоррСчетМодернизацияСубконто2НСБУ	= СтрокаИсточникВНА.КорСчетСубконто3НСБУ;
			СтрокаСведений.КоррСчетМодернизацияМСФО 			= СтрокаИсточникВНА.КорСчетМСФО;
			
		ИначеЕсли СтрокаИсточникВНА.ВидОперации = Справочники.ВидыОпераций.НачислениеАмортизации Тогда
			
			СтрокаСведений.АмортизацияНСБУ = СтрокаСведений.АмортизацияНСБУ + СтрокаИсточникВНА.АмортизацияНСБУ;
			
			Если СтрокаСведений.СчетУчетаНСБУ.Пустая() Тогда 
				СтрокаСведений.СчетУчетаНСБУ = СтрокаИсточникВНА.СчетУчетаВНАНСБУ;
			КонецЕсли;
			
			Если СтрокаСведений.СчетУчетаМСФО.Пустая() Тогда 
				СтрокаСведений.СчетУчетаМСФО = СтрокаИсточникВНА.СчетУчетаВНАМСФО;
			КонецЕсли;
			
			Если СтрокаСведений.СчетАмортизацииНСБУ.Пустая() Тогда 
				СтрокаСведений.СчетАмортизацииНСБУ = СтрокаИсточникВНА.СчетАмортизацииНСБУ;
			КонецЕсли;
			
			Если СтрокаСведений.СпособНачисленияАмортизацииНСБУ.Пустая() Тогда 
				СтрокаСведений.СпособНачисленияАмортизацииНСБУ = СтрокаИсточникВНА.СпособНачисленияАмортизацииНСБУ;
			КонецЕсли;
			
			ПоляЗаполнения = "СчетЗатратНСБУ,СчетЗатратМСФО,СчетЗатратСубконто1НСБУ,СчетЗатратСубконто2НСБУ,СчетЗатратСубконто3НСБУ";			
			ЗаполнитьЗначенияСвойств(СтрокаСведений, СтрокаИсточникВНА, ПоляЗаполнения);
						
		ИначеЕсли СтрокаИсточникВНА.ВидОперации = Справочники.ВидыОпераций.ВыбытиеВНА Тогда	
			
			СтрокаСведений.СобытиеВыбытия = СтрокаИсточникВНА.ВидОперации;
			СтрокаСведений.ДатаВыбытияНСБУ = СтрокаИсточникВНА.ДатаСобытияНСБУ;
			СтрокаСведений.ВыбытиеНСБУ = СтрокаСведений.ВыбытиеНСБУ - СтрокаИсточникВНА.СтоимостьНСБУ;
			
			СтрокаСведений.СчетВыбытияВНАНСБУ 				= СтрокаИсточникВНА.СчетВыбытияВНАНСБУ;
			СтрокаСведений.КоррСчетВыбытиеНСБУ 				= СтрокаИсточникВНА.КорСчетНСБУ;
			СтрокаСведений.КоррСчетВыбытиеСубконто1НСБУ 	= СтрокаИсточникВНА.КорСчетСубконто1НСБУ;
			СтрокаСведений.КоррСчетВыбытиеСубконто2НСБУ 	= СтрокаИсточникВНА.КорСчетСубконто2НСБУ;
			СтрокаСведений.КоррСчетВыбытиеСубконто3НСБУ 	= СтрокаИсточникВНА.КорСчетСубконто3НСБУ;
			СтрокаСведений.КоррСчетВыбытиеМСФО 				= СтрокаИсточникВНА.КорСчетМСФО;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ТаблицаСведений;
	
КонецФункции

Функция ПолучитьСтрокуИзКэша(СтрокаИсточникВНА, ТаблицаСведений, КэшСтрокПоВНА, КэшСтрокПоВНАПоГруппам)

	СтрокиВНА = КэшСтрокПоВНАПоГруппам.Получить(СтрокаИсточникВНА.ВНА);
	Если СтрокиВНА = Неопределено Тогда
		
		//Используем простой поиск 
		СтрокаСведений = КэшСтрокПоВНА.Получить(СтрокаИсточникВНА.ВНА);
		Если СтрокаСведений = Неопределено Тогда 
			
			//Добавляем новую строку
			СтрокаСведений = ТаблицаСведений.Добавить();
			СтрокаСведений.ВНА = СтрокаИсточникВНА.ВНА;
			СтрокаСведений.ГруппаВНА = СтрокаИсточникВНА.ГруппаВНА;
			
			КэшСтрокПоВНА.Вставить(СтрокаИсточникВНА.ВНА, СтрокаСведений);
			
		ИначеЕсли СтрокаСведений.ГруппаВНА <> СтрокаИсточникВНА.ГруппаВНА 
			И ЗначениеЗаполнено(СтрокаИсточникВНА.ГруппаВНА) Тогда 
			
			//Добавляем новую строку
			СтрокаСведений = ТаблицаСведений.Добавить();
			СтрокаСведений.ВНА = СтрокаИсточникВНА.ВНА;
			СтрокаСведений.ГруппаВНА = СтрокаИсточникВНА.ГруппаВНА;
			
			//Переносим в сложный поиск, добавляем вторую группу ВНА
			СтрокаСведенийПред = СтрокаСведений;	
			
			КэшГруппыВНА = Новый Соответствие;
			КэшГруппыВНА.Вставить(СтрокаСведенийПред.ГруппаВНА, СтрокаСведенийПред);
			КэшГруппыВНА.Вставить(СтрокаСведений.ГруппаВНА, СтрокаСведений);
			
			КэшСтрокПоВНАПоГруппам.Вставить(СтрокаИсточникВНА.ВНА, КэшГруппыВНА);								
			КэшСтрокПоВНА.Удалить(СтрокаИсточникВНА.ВНА);
			
		КонецЕсли;
		
	Иначе
		
		//Добавляем новую строку
		СтрокаСведений = ТаблицаСведений.Добавить();
		СтрокаСведений.ВНА = СтрокаИсточникВНА.ВНА;
		СтрокаСведений.ГруппаВНА = СтрокаИсточникВНА.ГруппаВНА;

		КэшСтрокПоВНАПоГруппам[СтрокаИсточникВНА.ВНА].Вставить(СтрокаИсточникВНА.ГруппаВНА, СтрокаСведений);
		
	КонецЕсли;
	
	Возврат СтрокаСведений;

КонецФункции

#КонецОбласти

#Область ВНА_ФормированиеОбъектов

Функция СформироватьГруппыВНА(ТаблицаВНА, КолонкаВНА, КолонкаГруппаВНА, КолонкаКлассВНА = Неопределено, КолонкаСчетУчетаВНА = Неопределено, 
								КолонкаСчетАмортизацииВНА = Неопределено, КолонкаНачислятьАмортизацию = Неопределено, Отказ);

	КэшГруппыВНА = Новый ТаблицаЗначений;
	КэшГруппыВНА.Колонки.Добавить("ГруппаВНА");
	КэшГруппыВНА.Колонки.Добавить("КлассВНА");
	КэшГруппыВНА.Колонки.Добавить("СчетУчетаПервоначальнойСтоимости");
	КэшГруппыВНА.Колонки.Добавить("СчетНакопленнойАмортизации");
	КэшГруппыВНА.Колонки.Добавить("НачислятьАмортизацию");
	
	ОбщийКлассВНА = ?(ТипЗнч(КолонкаКлассВНА) = Тип("ПеречислениеСсылка.КлассыВНА"), КолонкаКлассВНА, Неопределено); 
		
	Для каждого СтрокаВНА Из ТаблицаВНА Цикл
		
		Если ЗначениеЗаполнено(СтрокаВНА[КолонкаГруппаВНА]) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОбщийКлассВНА = Неопределено Тогда
		    КлассВНА = СтрокаВНА[КолонкаКлассВНА];
		Иначе			
			КлассВНА = ОбщийКлассВНА;
		КонецЕсли;
		
		Если КлассВНА = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаВНА[КолонкаВНА]) 
			И НЕ СтрокаВНА[КолонкаВНА].ГруппаВНА.Пустая() 
			И (КлассВНА = СтрокаВНА[КолонкаВНА].ГруппаВНА) Тогда
			
			СтрокаВНА[КолонкаГруппаВНА] = СтрокаВНА[КолонкаВНА].ГруппаВНА;
			Продолжить;
			
		КонецЕсли;
				
		СчетУчетаВНА = ?(КолонкаСчетУчетаВНА = Неопределено, Справочники.СчетаБД.ПустаяСсылка(), СтрокаВНА[КолонкаСчетУчетаВНА]);		
		СчетАмортизации = ?(КолонкаСчетАмортизацииВНА = Неопределено, Справочники.СчетаБД.ПустаяСсылка(), СтрокаВНА[КолонкаСчетАмортизацииВНА]);
		
		НачислятьАмортизацию = ?(КолонкаНачислятьАмортизацию = Неопределено Или КолонкаНачислятьАмортизацию = Ложь, Ложь, ?(КолонкаНачислятьАмортизацию = Истина, Истина, СтрокаВНА[КолонкаНачислятьАмортизацию]));
						
		СтрокаВНА[КолонкаГруппаВНА] = Справочники.ГруппыВНАМСФО.ПолучитьСоздатьГруппуВНА(
											КлассВНА, 
											СчетУчетаВНА, 
											СчетАмортизации,
											НачислятьАмортизацию, 
											КэшГруппыВНА, 
											Отказ);	
		
	КонецЦикла;	
	
КонецФункции

#КонецОбласти

#Область Запрос_ЗаполненияИзРСБУ

Функция ТекстЗапроса_ЗаполненияИзРСБУ(НомераТаблиц = Неопределено) Экспорт
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоЕХ() Тогда
		Возврат МСФОВстраиваниеУХ.ТекстЗапроса_ЗаполненияИзРСБУ(НомераТаблиц);	
	КонецЕсли;
	
	Если НомераТаблиц = Неопределено Тогда
	    НомераТаблиц = новый Структура;
	КонецЕсли;
	
	ТекстЗапроса = Новый Массив;
	
	ТекстЗапроса.Добавить(ТекстЗапроса_втДокументыОснования(НомераТаблиц));
	ТекстЗапроса.Добавить(ТекстЗапроса_втСчетаВНА(НомераТаблиц));
	ТекстЗапроса.Добавить(ТекстЗапроса_втОбороты(НомераТаблиц));
	ТекстЗапроса.Добавить(ТекстЗапроса_втПринятиеИВводВПериоде(НомераТаблиц));
	ТекстЗапроса.Добавить(ТекстЗапроса_втПараметрыВНА(НомераТаблиц));
	ТекстЗапроса.Добавить(ТекстЗапроса_втСчетаБД(НомераТаблиц));
	ТекстЗапроса.Добавить(ТекстЗапроса_втПрофили(НомераТаблиц));
	ТекстЗапроса.Добавить(ТекстЗапроса_втУчитываемыеВНА(НомераТаблиц));
	ТекстЗапроса.Добавить(ТекстЗапроса_втПустыеТипы(НомераТаблиц));
	ТекстЗапроса.Добавить(ТекстЗапроса_втПриоритеты(НомераТаблиц));
	ТекстЗапроса.Добавить(ТекстЗапроса_втПараметрыДляЗаполненияВНА(НомераТаблиц));
	ТекстЗапроса.Добавить(ТекстЗапроса_СобытияВНА(НомераТаблиц));
	
	Возврат СтрСоединить(ТекстЗапроса, ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета());

КонецФункции

Функция ТекстЗапроса_втДокументыОснования(НомераТаблиц)

	 НомераТаблиц.Вставить("втДокументыОснования", НомераТаблиц.Количество());

	 Возврат 
	 "ВЫБРАТЬ
	 |	ДокументыОснования.Ссылка КАК ДокументОснование,
	 |	МАКСИМУМ(ДокументыОснования.КлассВНА) КАК КлассВНА,
	 |	ДокументыОснования.Тип КАК Тип
	 |ПОМЕСТИТЬ втДокументыОснования
	 |ИЗ
	 |	(ВЫБРАТЬ
	 |		ДокументыОснования.Ссылка КАК Ссылка,
	 |		ЗНАЧЕНИЕ(Перечисление.КлассыВНА.ОсновноеСредство) КАК КлассВНА,
	 |		ДокументыОснования.Тип КАК Тип
	 |	ИЗ
	 |		ЖурналДокументов.ДокументыПоОС КАК ДокументыОснования
	 |	ГДЕ
	 |		ДокументыОснования.Тип В(&ТипДокумента)
	 |		И ДокументыОснования.Проведен
	 |		И ДокументыОснования.Организация = &Организация
	 |		И ДокументыОснования.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	 |	{ГДЕ
	 |		ДокументыОснования.Ссылка.*}
	 |	
	 |	ОБЪЕДИНИТЬ ВСЕ
	 |	
	 |	ВЫБРАТЬ
	 |		ДокументыОснования.Ссылка,
	 |		ВЫБОР
	 |			КОГДА ДокументыОснования.Ссылка ССЫЛКА Документ.ПоступлениеНМА
	 |				ТОГДА ЗНАЧЕНИЕ(Перечисление.КлассыВНА.НезавершенноеСтроительство)
	 |			ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.КлассыВНА.НематериальныйАктив)
	 |		КОНЕЦ,
	 |		ДокументыОснования.Тип
	 |	ИЗ
	 |		ЖурналДокументов.ДокументыПоНМА КАК ДокументыОснования
	 |	ГДЕ
	 |		ДокументыОснования.Тип В(&ТипДокумента)
	 |		И ДокументыОснования.Проведен
	 |		И ДокументыОснования.Организация = &Организация
	 |		И ДокументыОснования.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	 |	{ГДЕ
	 |		ДокументыОснования.Ссылка.*}
	 |	
	 |	ОБЪЕДИНИТЬ ВСЕ
	 |	
	 |	ВЫБРАТЬ
	 |		ДокументыОснования.Ссылка,
	 |		ЗНАЧЕНИЕ(Перечисление.КлассыВНА.ОсновноеСредство),
	 |		ДокументыОснования.Тип
	 |	ИЗ
	 |		ЖурналДокументов.ПараметрыАмортизацииОС КАК ДокументыОснования
	 |	ГДЕ
	 |		ДокументыОснования.Тип В(&ТипДокумента)
	 |		И ДокументыОснования.Проведен
	 |		И ДокументыОснования.Организация = &Организация
	 |		И ДокументыОснования.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	 |	{ГДЕ
	 |		ДокументыОснования.Ссылка.*}
	 |	
	 |	ОБЪЕДИНИТЬ ВСЕ
	 |	
	 |	ВЫБРАТЬ
	 |		ДокументыОснования.Ссылка,
	 |		ЗНАЧЕНИЕ(Перечисление.КлассыВНА.НематериальныйАктив),
	 |		ДокументыОснования.Тип
	 |	ИЗ
	 |		ЖурналДокументов.ПараметрыАмортизацииНМА КАК ДокументыОснования
	 |	ГДЕ
	 |		ДокументыОснования.Тип В(&ТипДокумента)
	 |		И ДокументыОснования.Проведен
	 |		И ДокументыОснования.Организация = &Организация
	 |		И ДокументыОснования.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	 |	{ГДЕ
	 |		ДокументыОснования.Ссылка.*}
	 |	
	 |	ОБЪЕДИНИТЬ ВСЕ
	 |	
	 |	ВЫБРАТЬ
	 |		ДокументыОснования.Ссылка,
	 |		ВЫБОР
	 |			КОГДА ДокументыОснования.Ссылка ССЫЛКА Документ.ПоступлениеТоваровУслуг
	 |					И ДокументыОснования.Ссылка.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства)
	 |				ТОГДА ЗНАЧЕНИЕ(Перечисление.КлассыВНА.НезавершенноеСтроительство)
	 |			ИНАЧЕ NULL
	 |		КОНЕЦ,
	 |		ДокументыОснования.Тип
	 |	ИЗ
	 |		ЖурналДокументов.ЖурналОпераций КАК ДокументыОснования
	 |	ГДЕ
	 |		ДокументыОснования.Тип В(&ТипДокумента)
	 |		И НЕ ДокументыОснования.ПометкаУдаления
	 |		И ВЫБОР
	 |				КОГДА ДокументыОснования.Ссылка ССЫЛКА Документ.ПоступлениеТоваровУслуг
	 |					ТОГДА ВЫБОР
	 |							КОГДА ДокументыОснования.Ссылка.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.Оборудование), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства), ЗНАЧЕНИЕ(Перечисление.ВидыОперацийПоступлениеТоваровУслуг.ОсновныеСредства))
	 |								ТОГДА ИСТИНА
	 |							КОГДА &ДокументПриемник = ""ВосстановлениеВНАИзРасходов""
	 |								ТОГДА ИСТИНА
	 |							КОГДА &ДокументПриемник = ""РеклассВосстановлениеИзРБП""
	 |								ТОГДА ИСТИНА
	 |							ИНАЧЕ ЛОЖЬ
	 |						КОНЕЦ
	 |				КОГДА ДокументыОснования.Ссылка ССЫЛКА Документ.РегламентнаяОперация
	 |					ТОГДА ВЫБОР
	 |							КОГДА ДокументыОснования.Ссылка.ВидОперации В (ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.АмортизацияИИзносОС), ЗНАЧЕНИЕ(Перечисление.ВидыРегламентныхОпераций.АмортизацияНМАИсписаниеРасходовПоНИОКР))
	 |								ТОГДА ИСТИНА
	 |							ИНАЧЕ ЛОЖЬ
	 |						КОНЕЦ
	 |				ИНАЧЕ ИСТИНА
	 |			КОНЕЦ
	 |		И ДокументыОснования.Организация = &Организация
	 |		И ДокументыОснования.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	 |		И &ЖурналОпераций = ИСТИНА
	 |	{ГДЕ
	 |		ДокументыОснования.Ссылка.*}) КАК ДокументыОснования
	 |
	 |СГРУППИРОВАТЬ ПО
	 |	ДокументыОснования.Ссылка,
	 |	ДокументыОснования.Тип";

КонецФункции

Функция ТекстЗапроса_втСчетаВНА(НомераТаблиц)

	 НомераТаблиц.Вставить("втСчетаВНА", НомераТаблиц.Количество());

	 Возврат
	 "ВЫБРАТЬ
	 |	т.Ссылка КАК Счет,
	 |	ИСТИНА КАК НЗС,
	 |	ЛОЖЬ КАК ОС,
	 |	ЛОЖЬ КАК НМА,
	 |	ЛОЖЬ КАК Амортизация
	 |ПОМЕСТИТЬ втСчетаВНА
	 |ИЗ
	 |	ПланСчетов.Хозрасчетный КАК т
	 |ГДЕ
	 |	т.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОборудованиеКУстановке), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы))
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	т.Ссылка,
	 |	ЛОЖЬ,
	 |	ИСТИНА,
	 |	ЛОЖЬ,
	 |	т.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияОсновныхСредств))
	 |ИЗ
	 |	ПланСчетов.Хозрасчетный КАК т
	 |ГДЕ
	 |	т.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОсновныеСредства), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияОсновныхСредств), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ДоходныеВложенияВ_МЦ))
	 |
	 |ОБЪЕДИНИТЬ ВСЕ
	 |
	 |ВЫБРАТЬ
	 |	т.Ссылка,
	 |	ЛОЖЬ,
	 |	ЛОЖЬ,
	 |	ИСТИНА,
	 |	т.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов))
	 |ИЗ
	 |	ПланСчетов.Хозрасчетный КАК т
	 |ГДЕ
	 |	т.Ссылка В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.НематериальныеАктивы), ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов))";

КонецФункции

Функция ТекстЗапроса_втОбороты(НомераТаблиц)

	НомераТаблиц.Вставить("втОбороты", НомераТаблиц.Количество());

	Возврат
	"ВЫБРАТЬ
	|	Обороты.Регистратор КАК ДокументОснование,
	|	ВЫБОР
	|		КОГДА втСчетДт.Счет ЕСТЬ NULL
	|			ТОГДА Обороты.СубконтоКт1
	|		ИНАЧЕ Обороты.СубконтоДт1
	|	КОНЕЦ КАК ВНА,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втСчетДт.ОС, ЛОЖЬ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КлассыВНА.ОсновноеСредство)
	|		КОГДА ЕСТЬNULL(втСчетДт.НМА, ЛОЖЬ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КлассыВНА.НематериальныйАктив)
	|		КОГДА ЕСТЬNULL(втСчетДт.НЗС, ЛОЖЬ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КлассыВНА.НезавершенноеСтроительство)
	|		КОГДА ЕСТЬNULL(втСчетКт.ОС, ЛОЖЬ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КлассыВНА.ОсновноеСредство)
	|		КОГДА ЕСТЬNULL(втСчетКт.НМА, ЛОЖЬ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КлассыВНА.НематериальныйАктив)
	|		КОГДА ЕСТЬNULL(втСчетКт.НЗС, ЛОЖЬ)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.КлассыВНА.НезавершенноеСтроительство)
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК КлассВНА,
	|	Обороты.Период КАК ДатаСобытияНСБУ,
	|	Обороты.Сумма КАК СуммаНСБУ,
	|	Обороты.СчетДт КАК СчетДт,
	|	Обороты.СубконтоДт1 КАК СубконтоДт1,
	|	Обороты.СубконтоДт2 КАК СубконтоДт2,
	|	Обороты.СубконтоДт3 КАК СубконтоДт3,
	|	Обороты.СчетКт КАК СчетКт,
	|	Обороты.СубконтоКт1 КАК СубконтоКт1,
	|	Обороты.СубконтоКт2 КАК СубконтоКт2,
	|	Обороты.СубконтоКт3 КАК СубконтоКт3,
	|	Обороты.ВалютаДт КАК ВалютаДт,
	|	Обороты.ВалютаКт КАК ВалютаКт,
	|	Обороты.КоличествоДт КАК КоличествоДт,
	|	Обороты.КоличествоКт КАК КоличествоКт,
	|	Обороты.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Обороты.Регистратор) В (&Документы_ВводВЭксплуатациюВНАМСФО)
	|				И (ЕСТЬNULL(втСчетКт.ОС, ЛОЖЬ)
	|					ИЛИ ЕСТЬNULL(втСчетКт.НЗС, ЛОЖЬ)
	|					ИЛИ ЕСТЬNULL(втСчетКт.НМА, ЛОЖЬ)
	|					ИЛИ Обороты.Регистратор ССЫЛКА Документ.ПринятиеКУчетуОС)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыОпераций.ВводВЭксплуатацию)
	|		КОГДА ТИПЗНАЧЕНИЯ(Обороты.Регистратор) В (&Документы_ПоступлениеВНАМСФО)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыОпераций.ПринятиеКУчетуВНА)
	|		КОГДА ТИПЗНАЧЕНИЯ(Обороты.Регистратор) В (&Документы_МодернизацияВНАМСФО)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыОпераций.МодернизацияВНА)
	|		КОГДА ТИПЗНАЧЕНИЯ(Обороты.Регистратор) В (&Документы_ИзменениеПараметровВНАМСФО)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыОпераций.ИзменениеПараметровАмортизации)
	|		КОГДА ТИПЗНАЧЕНИЯ(Обороты.Регистратор) В (&Документы_НачислениеАмортизацииВНАМСФО)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыОпераций.СторноАмортизацииНСБУ)
	|		КОГДА ТИПЗНАЧЕНИЯ(Обороты.Регистратор) В (&Документы_ВыбытиеВНАМСФО)
	|			ТОГДА ВЫБОР
	|					КОГДА ЕСТЬNULL(втСчетКт.Амортизация, ЛОЖЬ)
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыОпераций.СторноАмортизацииНСБУ)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыОпераций.ВыбытиеВНА)
	|				КОНЕЦ
	|		ИНАЧЕ ""Прочее""
	|	КОНЕЦ КАК СобытиеВНА,
	|	Обороты.Регистратор ССЫЛКА Документ.ПеремещениеОС
	|		И ЕСТЬNULL(втСчетКт.Амортизация, ЛОЖЬ)
	|		И втСчетДт.Счет ЕСТЬ NULL КАК АмортизацияПриПеремещении,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(Обороты.Регистратор) В (&Документы_ВыбытиеВНАМСФО)
	|				И ЕСТЬNULL(втСчетДт.Амортизация, ЛОЖЬ)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК АмортизацияПриВыбытии,
	|	Обороты.ПодразделениеДт КАК ПодразделениеДт,
	|	Обороты.ПодразделениеКт КАК ПодразделениеКт
	|ПОМЕСТИТЬ втОбороты
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	|			{(&ДатаНачала)},
	|			{(&ДатаОкончания)},
	|			Организация = &Организация
	|				И Активность
	|				И Регистратор В
	|					(ВЫБРАТЬ
	|						втДокументыОснования.ДокументОснование
	|					ИЗ
	|						втДокументыОснования)
	|				И ВЫБОР
	|					КОГДА СчетДт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеОС)
	|						ТОГДА НЕ СчетКт В
	|									(ВЫБРАТЬ
	|										т.Счет
	|									ИЗ
	|										втСчетаВНА КАК т
	|									ГДЕ
	|										т.ОС)
	|					КОГДА СчетКт = ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ВыбытиеОС)
	|						ТОГДА НЕ СчетДт В
	|									(ВЫБРАТЬ
	|										т.Счет
	|									ИЗ
	|										втСчетаВНА КАК т
	|									ГДЕ
	|										т.ОС)
	|					ИНАЧЕ Счет В
	|							(ВЫБРАТЬ
	|								т.Счет
	|							ИЗ
	|								втСчетаВНА КАК т)
	|				КОНЕЦ
	|				И Сумма <> 0 {(ВЫРАЗИТЬ(СубконтоДт1 КАК Справочник.Номенклатура).МОС) КАК МОС},
	|			,
	|			) КАК Обороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСчетаВНА КАК втСчетДт
	|		ПО Обороты.СчетДт = втСчетДт.Счет
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСчетаВНА КАК втСчетКт
	|		ПО Обороты.СчетКт = втСчетКт.Счет
	|ГДЕ
	|	Обороты.Сумма <> 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	АмортизацияПриВыбытии,
	|	КлассВНА,
	|	ВНА,
	|	ДокументОснование
	|";

КонецФункции

Функция ТекстЗапроса_втПринятиеИВводВПериоде(НомераТаблиц)

	НомераТаблиц.Вставить("втПринятиеИВводВПериоде", НомераТаблиц.Количество());

	Возврат
	"ВЫБРАТЬ
	|	втОборотыНЗС.СчетКт КАК СчетКт,
	|	втОборотыОС.ВНА КАК ПриемникВНА,
	|	втОборотыНЗС.ВНА КАК ИсточникВНА,
	|	втОборотыОС.ДокументОснование КАК ПриемникДокументОснование,
	|	втОборотыНЗС.ДокументОснование КАК ИсточникДокументОснование,
	|	втОборотыНЗС.СубконтоКт1 КАК СубконтоКт1,
	|	втОборотыНЗС.СубконтоКт2 КАК СубконтоКт2,
	|	втОборотыНЗС.СубконтоКт3 КАК СубконтоКт3,
	|	втОборотыНЗС.ВалютаКт КАК ВалютаКт,
	|	втОборотыНЗС.КоличествоКт КАК КоличествоКт,
	|	втОборотыНЗС.ДатаСобытияНСБУ КАК ДатаСобытияНСБУ,
	|	втОборотыНЗС.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
	|	втОборотыНЗС.СуммаНСБУ КАК СуммаНСБУ
	|ПОМЕСТИТЬ втПринятиеИВводВПериоде
	|ИЗ
	|	втОбороты КАК втОборотыОС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОбороты КАК втОборотыНЗС
	|		ПО втОборотыОС.СчетКт = втОборотыНЗС.СчетДт
	|			И (ЕСТЬNULL(втОборотыОС.СубконтоКт1, НЕОПРЕДЕЛЕНО) = ЕСТЬNULL(втОборотыНЗС.СубконтоДт1, НЕОПРЕДЕЛЕНО))
	|			И (ЕСТЬNULL(втОборотыОС.СубконтоКт2, НЕОПРЕДЕЛЕНО) = ЕСТЬNULL(втОборотыНЗС.СубконтоДт2, НЕОПРЕДЕЛЕНО))
	|			И (ЕСТЬNULL(втОборотыОС.СубконтоКт3, НЕОПРЕДЕЛЕНО) = ЕСТЬNULL(втОборотыНЗС.СубконтоДт3, НЕОПРЕДЕЛЕНО))
	|			И втОборотыОС.СуммаНСБУ = втОборотыНЗС.СуммаНСБУ
	|			И (НЕ втОборотыНЗС.ВНА ССЫЛКА Справочник.ОбъектыСтроительства)
	|			И (НЕ втОборотыНЗС.ВНА ССЫЛКА Справочник.Номенклатура)
	|			И (втОборотыОС.СчетДт В
	|				(ВЫБРАТЬ
	|					т.Счет
	|				ИЗ
	|					втСчетаВНА КАК т))
	|			И втОборотыОС.ПодразделениеКт = втОборотыНЗС.ПодразделениеДт
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетКт,
	|	ИсточникВНА,
	|	ИсточникДокументОснование
	|";

КонецФункции

Функция ТекстЗапроса_втПараметрыВНА(НомераТаблиц)

	НомераТаблиц.Вставить("втПараметрыВНА", НомераТаблиц.Количество());

	Возврат
	"ВЫБРАТЬ
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство КАК ВНА,
	|	НачислениеАмортизацииОСБухгалтерскийУчет.НачислятьАмортизацию КАК НачислятьАмортизациюНСБУ,
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.СрокПолезногоИспользования КАК СрокПолезногоИспользованияНСБУ,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.СпособНачисленияАмортизации КАК СпособНачисленияАмортизацииНСБУ,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияОСБухгалтерскийУчет.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииОС.Линейный)
	|			ТОГДА ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииВНА.Линейный)
	|		КОГДА ПервоначальныеСведенияОСБухгалтерскийУчет.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка)
	|			ТОГДА ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииВНА.УменьшаемогоОстатка)
	|		КОГДА ПервоначальныеСведенияОСБухгалтерскийУчет.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции)
	|			ТОГДА ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииВНА.ПропорциональноОбъемуПродукции)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииВНА.Линейный)
	|	КОНЕЦ КАК СпособНачисленияАмортизацииМСФО,
	|	СпособыОтраженияРасходовОС.СпособыОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации,
	|	СчетаБухгалтерскогоУчетаОС.СчетУчета КАК СчетУчетаНСБУ,
	|	СчетаБухгалтерскогоУчетаОС.СчетНачисленияАмортизации КАК СчетАмортизацииНСБУ,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.СпособПоступления КАК СпособПоступления,
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.КоэффициентУскорения КАК КоэффициентУскоренияНСБУ,
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.ОбъемПродукцииРаботДляВычисленияАмортизации КАК ПредполагаемыйОбъемПродукцииНСБУ,
	|	ПервоначальныеСведенияОСБухгалтерскийУчет.ПараметрВыработки КАК ПараметрВыработкиНСБУ,
	|	ПараметрыАмортизацииОСБухгалтерскийУчет.ЛиквидационнаяСтоимость КАК ЛиквидационнаяСтоимостьНСБУ
	|ПОМЕСТИТЬ втПараметрыВНА
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(
	|			{(&ДатаОкончания)},
	|			Организация = &Организация
	|				И ОсновноеСредство В
	|					(ВЫБРАТЬ
	|						т.ВНА
	|					ИЗ
	|						втОбороты КАК т)) КАК ПервоначальныеСведенияОСБухгалтерскийУчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|				{(&ДатаОкончания)},
	|				Организация = &Организация
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							т.ВНА
	|						ИЗ
	|							втОбороты КАК т)) КАК ПараметрыАмортизацииОСБухгалтерскийУчет
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчет.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|				{(&ДатаОкончания)},
	|				Организация = &Организация
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							т.ВНА
	|						ИЗ
	|							втОбороты КАК т)) КАК СпособыОтраженияРасходовОС
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство = СпособыОтраженияРасходовОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
	|				{(&ДатаОкончания)},
	|				Организация = &Организация
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							т.ВНА
	|						ИЗ
	|							втОбороты КАК т)) КАК СчетаБухгалтерскогоУчетаОС
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство = СчетаБухгалтерскогоУчетаОС.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОСБухгалтерскийУчет.СрезПоследних(
	|				{(&ДатаОкончания)},
	|				Организация = &Организация
	|					И ОсновноеСредство В
	|						(ВЫБРАТЬ
	|							т.ВНА
	|						ИЗ
	|							втОбороты КАК т)
	|					И НЕ(Регистратор ССЫЛКА Документ.СписаниеОС
	|							ИЛИ Регистратор ССЫЛКА Документ.ПередачаОС)) КАК НачислениеАмортизацииОСБухгалтерскийУчет
	|		ПО ПервоначальныеСведенияОСБухгалтерскийУчет.ОсновноеСредство = НачислениеАмортизацииОСБухгалтерскийУчет.ОсновноеСредство
	|ГДЕ
	|	&ПараметрыВНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПервоначальныеСведенияНМАБухгалтерскийУчет.НематериальныйАктив,
	|	ИСТИНА,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчет.СрокПолезногоИспользования,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчет.СпособНачисленияАмортизации,
	|	ВЫБОР
	|		КОГДА ПервоначальныеСведенияНМАБухгалтерскийУчет.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииНМА.Линейный)
	|			ТОГДА ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииВНА.Линейный)
	|		КОГДА ПервоначальныеСведенияНМАБухгалтерскийУчет.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка)
	|			ТОГДА ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииВНА.УменьшаемогоОстатка)
	|		КОГДА ПервоначальныеСведенияНМАБухгалтерскийУчет.СпособНачисленияАмортизации = ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции)
	|			ТОГДА ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииВНА.ПропорциональноОбъемуПродукции)
	|		ИНАЧЕ ЗНАЧЕНИЕ(ПЕРЕЧИСЛЕНИЕ.СпособыНачисленияАмортизацииВНА.Линейный)
	|	КОНЕЦ,
	|	СпособыОтраженияРасходовНМА.СпособОтраженияРасходов,
	|	СчетаБухгалтерскогоУчетаНМА.СчетУчета,
	|	СчетаБухгалтерскогоУчетаНМА.СчетНачисленияАмортизации,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчет.СпособПоступления,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчет.Коэффициент,
	|	ПервоначальныеСведенияНМАБухгалтерскийУчет.ОбъемПродукцииРаботДляВычисленияАмортизации,
	|	""ПервоначальныеСведенияОСБухгалтерскийУчет.ПараметрВыработки"",
	|	NULL
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияНМАБухгалтерскийУчет.СрезПоследних(
	|			{(&ДатаОкончания)},
	|			Организация = &Организация
	|				И НематериальныйАктив В
	|					(ВЫБРАТЬ
	|						т.ВНА
	|					ИЗ
	|						втОбороты КАК т)) КАК ПервоначальныеСведенияНМАБухгалтерскийУчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииНМАБухгалтерскийУчет.СрезПоследних(
	|				{(&ДатаОкончания)},
	|				Организация = &Организация
	|					И НематериальныйАктив В
	|						(ВЫБРАТЬ
	|							т.ВНА
	|						ИЗ
	|							втОбороты КАК т)) КАК СпособыОтраженияРасходовНМА
	|		ПО ПервоначальныеСведенияНМАБухгалтерскийУчет.НематериальныйАктив = СпособыОтраженияРасходовНМА.НематериальныйАктив
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаНМА.СрезПоследних(
	|				{(&ДатаОкончания)},
	|				Организация = &Организация
	|					И НематериальныйАктив В
	|						(ВЫБРАТЬ
	|							т.ВНА
	|						ИЗ
	|							втОбороты КАК т)) КАК СчетаБухгалтерскогоУчетаНМА
	|		ПО ПервоначальныеСведенияНМАБухгалтерскийУчет.НематериальныйАктив = СчетаБухгалтерскогоУчетаНМА.НематериальныйАктив
	|ГДЕ
	|	&ПараметрыВНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВНА";

КонецФункции

Функция ТекстЗапроса_СчетаИсточникиТрансляции(НомераТаблиц)

	//**
	
	НомераТаблиц.Вставить("СчетаИсточникиТрансляции", НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ
	|	МАКСИМУМ(СчетаБД.Ссылка) КАК СчетБД,
	|	СчетаБД.СчетСсылка КАК СчетИсточник
	|ПОМЕСТИТЬ СчетаИсточникиТрансляции
	|ИЗ
	|	Справочник.СчетаБД КАК СчетаБД
	|ГДЕ
	|	(СчетаБД.СчетСсылка В
	|				(ВЫБРАТЬ
	|					т.СчетДт
	|				ИЗ
	|					втОбороты КАК т)
	|			ИЛИ СчетаБД.СчетСсылка В
	|				(ВЫБРАТЬ
	|					т.СчетКт
	|				ИЗ
	|					втОбороты КАК т)
	|			ИЛИ СчетаБД.СчетСсылка В
	|				(ВЫБРАТЬ
	|					втПараметрыВНА.СчетАмортизацииНСБУ
	|				ИЗ
	|					втПараметрыВНА КАК втПараметрыВНА))
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаБД.СчетСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетИсточник";

КонецФункции

Функция ТекстЗапроса_втСчетаБД(НомераТаблиц)

	НомераТаблиц.Вставить("втСчетаБД", НомераТаблиц.Количество());

	Возврат
	"ВЫБРАТЬ
	|	МАКСИМУМ(СчетаБД.Ссылка) КАК СчетБД,
	|	СчетаБД.СчетСсылка КАК СчетИсточник,
	|	ЕСТЬNULL(МАКСИМУМ(СоответствияСчетовДляТрансляции.СчетПриемник), ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)) КАК СчетБДМСФО
	|ПОМЕСТИТЬ втСчетаБД
	|ИЗ
	|	Справочник.СчетаБД КАК СчетаБД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоответствияСчетовДляТрансляции КАК СоответствияСчетовДляТрансляции
	|		ПО (СоответствияСчетовДляТрансляции.СчетИсточник = СчетаБД.Ссылка)
	|			И (СоответствияСчетовДляТрансляции.Владелец = &ШаблонТрансляции)
	|ГДЕ
	|	(СчетаБД.СчетСсылка В
	|				(ВЫБРАТЬ
	|					т.СчетДт
	|				ИЗ
	|					втОбороты КАК т)
	|			ИЛИ СчетаБД.СчетСсылка В
	|				(ВЫБРАТЬ
	|					т.СчетКт
	|				ИЗ
	|					втОбороты КАК т)
	|			ИЛИ СчетаБД.СчетСсылка В
	|				(ВЫБРАТЬ
	|					втПараметрыВНА.СчетАмортизацииНСБУ
	|				ИЗ
	|					втПараметрыВНА КАК втПараметрыВНА))
	|
	|СГРУППИРОВАТЬ ПО
	|	СчетаБД.СчетСсылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетИсточник";

КонецФункции

Функция ТекстЗапроса_втПрофили(НомераТаблиц)

	НомераТаблиц.Вставить("втПрофили", НомераТаблиц.Количество());

	Возврат
	"ВЫБРАТЬ
	|	МАКСИМУМ(СпособыОтраженияРасходовПоАмортизацииМСФО.Ссылка) КАК СпособОтраженияРасходовМСФО,
	|	СпособыОтраженияРасходовПоАмортизацииМСФО.ПрофильРаспределенияНСБУ КАК СпособОтраженияРасходовНСБУ
	|ПОМЕСТИТЬ втПрофили
	|ИЗ
	|	Справочник.СпособыОтраженияРасходовПоАмортизацииМСФО КАК СпособыОтраженияРасходовПоАмортизацииМСФО
	|ГДЕ
	|	СпособыОтраженияРасходовПоАмортизацииМСФО.ПрофильРаспределенияНСБУ В
	|			(ВЫБРАТЬ
	|				втПараметрыВНА.СпособОтраженияРасходовПоАмортизации
	|			ИЗ
	|				втПараметрыВНА КАК втПараметрыВНА)
	|	И НЕ СпособыОтраженияРасходовПоАмортизацииМСФО.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	СпособыОтраженияРасходовПоАмортизацииМСФО.ПрофильРаспределенияНСБУ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СпособОтраженияРасходовНСБУ
	|";

КонецФункции

Функция ТекстЗапроса_втУчитываемыеВНА(НомераТаблиц)

	НомераТаблиц.Вставить("втУчитываемыеВНА", НомераТаблиц.Количество());

	Возврат
	"ВЫБРАТЬ
	|	СтоимостьВНАМСФООбороты.ВНА КАК ВНА,
	|	СтоимостьВНАМСФООбороты.ГруппаВНА КАК ГруппаВНА
	|ПОМЕСТИТЬ втУчитываемыеВНА
	|ИЗ
	|	РегистрНакопления.СтоимостьВНАМСФО.Обороты(
	|			,
	|			{(&ДатаОкончания)},
	|			,
	|			Организация = &Организация
	|				И Сценарий = &Сценарий
	|				И ВНА В
	|					(ВЫБРАТЬ
	|						т.ВНА
	|					ИЗ
	|						втОбороты КАК т)) КАК СтоимостьВНАМСФООбороты
	|ГДЕ
	|	СтоимостьВНАМСФООбороты.СуммаВВалютеУчетаОборот <> 0
	|	И СтоимостьВНАМСФООбороты.ГруппаВНА <> ЗНАЧЕНИЕ(Справочник.ГруппыВНАМСФО.ПустаяСсылка)
	|	И НЕ СтоимостьВНАМСФООбороты.ВНА В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					т.ВНА
	|				ИЗ
	|					РегистрНакопления.СтоимостьВНАМСФО КАК т
	|				ГДЕ
	|					т.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	|					И т.Регистратор В
	|						(ВЫБРАТЬ
	|							т.Ссылка
	|						ИЗ
	|							КритерийОтбора.ДокументыВНАПоОснованию(&Ссылка) КАК т))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВНА
	|";

КонецФункции

Функция ТекстЗапроса_втПустыеТипы(НомераТаблиц)

	НомераТаблиц.Вставить("втПустыеТипы", НомераТаблиц.Количество());

	Возврат
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ОсновныеСредства.ПустаяСсылка) КАК Ссылка
	|ПОМЕСТИТЬ втПустыеТипы
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.НематериальныеАктивы.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.ОбъектыСтроительства.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Справочник.РасходыБудущихПериодов.ПустаяСсылка)
	|";

КонецФункции

Функция ТекстЗапроса_втПриоритеты(НомераТаблиц)

	НомераТаблиц.Вставить("втПриоритеты", НомераТаблиц.Количество());

	Возврат
	"ВЫБРАТЬ
	|	ТаблицаВНА.ВНА КАК ВНА,
	|	ПараметрыУчетаВНАПоУмолчанию.ПараметрыУчетаВНА КАК ПараметрыУчетаВНА,
	|	ВЫБОР
	|		КОГДА ТаблицаВНА.ВНА = ПараметрыУчетаВНАПоУмолчанию.ВНА
	|			ТОГДА 0
	|		КОГДА ТаблицаВНА.ВНА.Родитель В
	|				(ВЫБРАТЬ
	|					т.Ссылка
	|				ИЗ
	|					втПустыеТипы КАК т)
	|			ТОГДА 1
	|		КОГДА ТаблицаВНА.ВНА.Родитель.Родитель В
	|				(ВЫБРАТЬ
	|					т.Ссылка
	|				ИЗ
	|					втПустыеТипы КАК т)
	|			ТОГДА 2
	|		КОГДА ТаблицаВНА.ВНА.Родитель.Родитель.Родитель В
	|				(ВЫБРАТЬ
	|					т.Ссылка
	|				ИЗ
	|					втПустыеТипы КАК т)
	|			ТОГДА 3
	|		КОГДА ТаблицаВНА.ВНА.Родитель.Родитель.Родитель.Родитель.Родитель В
	|				(ВЫБРАТЬ
	|					т.Ссылка
	|				ИЗ
	|					втПустыеТипы КАК т)
	|			ТОГДА 4
	|		КОГДА ТаблицаВНА.ВНА.Родитель.Родитель.Родитель.Родитель.Родитель.Родитель В
	|				(ВЫБРАТЬ
	|					т.Ссылка
	|				ИЗ
	|					втПустыеТипы КАК т)
	|			ТОГДА 5
	|		ИНАЧЕ 6
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ втПриоритеты
	|ИЗ
	|	втОбороты КАК ТаблицаВНА
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыУчетаВНАПоУмолчанию КАК ПараметрыУчетаВНАПоУмолчанию
	|		ПО (ТаблицаВНА.ВНА = ПараметрыУчетаВНАПоУмолчанию.ВНА
	|				ИЛИ ТаблицаВНА.ВНА.Родитель = ПараметрыУчетаВНАПоУмолчанию.ВНА
	|				ИЛИ ТаблицаВНА.ВНА.Родитель.Родитель = ПараметрыУчетаВНАПоУмолчанию.ВНА
	|				ИЛИ ТаблицаВНА.ВНА.Родитель.Родитель.Родитель = ПараметрыУчетаВНАПоУмолчанию.ВНА
	|				ИЛИ ТаблицаВНА.ВНА.Родитель.Родитель.Родитель.Родитель = ПараметрыУчетаВНАПоУмолчанию.ВНА)
	|ГДЕ
	|	НЕ ТаблицаВНА.ВНА В
	|				(ВЫБРАТЬ
	|					т.ВНА
	|				ИЗ
	|					втУчитываемыеВНА КАК т)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВНА,
	|	Приоритет
	|";

КонецФункции

Функция ТекстЗапроса_втПараметрыДляЗаполненияВНА(НомераТаблиц)

	НомераТаблиц.Вставить("втПараметрыДляЗаполненияВНА", НомераТаблиц.Количество());

	Возврат
	"ВЫБРАТЬ
	|	втПриоритеты.ВНА КАК ВНА,
	|	МАКСИМУМ(втПриоритеты.ПараметрыУчетаВНА) КАК ГруппаВНА,
	|	ЛОЖЬ КАК ЕстьВУчете
	|ПОМЕСТИТЬ втПараметрыДляЗаполненияВНА
	|ИЗ
	|	(ВЫБРАТЬ
	|		втПриоритеты.ВНА КАК ВНА,
	|		МИНИМУМ(втПриоритеты.Приоритет) КАК Приоритет
	|	ИЗ
	|		втПриоритеты КАК втПриоритеты
	|	
	|	СГРУППИРОВАТЬ ПО
	|		втПриоритеты.ВНА) КАК МинПриоритет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПриоритеты КАК втПриоритеты
	|		ПО МинПриоритет.ВНА = втПриоритеты.ВНА
	|			И МинПриоритет.Приоритет = втПриоритеты.Приоритет
	|
	|СГРУППИРОВАТЬ ПО
	|	втПриоритеты.ВНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втУчитываемыеВНА.ВНА,
	|	втУчитываемыеВНА.ГруппаВНА,
	|	ИСТИНА
	|ИЗ
	|	втУчитываемыеВНА КАК втУчитываемыеВНА
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВНА";

КонецФункции

Функция ТекстЗапроса_СобытияВНА(НомераТаблиц)

	НомераТаблиц.Вставить("СобытияВНА", НомераТаблиц.Количество());

	Возврат
	"ВЫБРАТЬ
	|	втОбороты.КлассВНА КАК КлассВНА,
	|	втОбороты.ДокументОснование КАК ДокументОснование,
	|	втОбороты.ВНА КАК ВНА,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втПараметрыДляЗаполненияВНА.ГруппаВНА, ЗНАЧЕНИЕ(Справочник.ГруппыВНАМСФО.ПустаяСсылка)) = ЗНАЧЕНИЕ(Справочник.ГруппыВНАМСФО.ПустаяСсылка)
	|			ТОГДА ""Трансляция""
	|		ИНАЧЕ ""Параллельный учет""
	|	КОНЕЦ КАК ВариантУчета,
	|	ЕСТЬNULL(втПринятиеИВводВПериоде.ДатаСобытияНСБУ, втОбороты.ДатаСобытияНСБУ) КАК ДатаСобытияНСБУ,
	|	втОбороты.СуммаНСБУ КАК СуммаНСБУ,
	|	ЕСТЬNULL(втПараметрыВНА.НачислятьАмортизациюНСБУ, ЛОЖЬ) КАК НачислятьАмортизациюНСБУ,
	|	втПараметрыВНА.СрокПолезногоИспользованияНСБУ КАК СрокПолезногоИспользованияНСБУ,
	|	втПараметрыВНА.СпособНачисленияАмортизацииМСФО КАК СпособНачисленияАмортизацииНСБУ,
	|	втПараметрыВНА.СпособНачисленияАмортизацииМСФО КАК СпособНачисленияАмортизацииМСФО,
	|	втПараметрыВНА.СпособОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизацииНСБУ,
	|	втПрофили.СпособОтраженияРасходовМСФО КАК СпособОтраженияРасходовПоАмортизацииМСФО,
	|	ВЫБОР втПараметрыВНА.СпособПоступления
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПоступленияАктивов.ПриобретениеЗаПлату)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПоступленияОбъектовВНА.Приобретено)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПоступленияАктивов.Строительство)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПоступленияОбъектовВНА.СтроительствоСоздание)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПоступленияАктивов.ВкладВУставныйКапитал)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПоступленияОбъектовВНА.ПолученоВКачествеВзносаВУК)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПоступленияАктивов.ВОбменНаДругоеИмущество)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПоступленияОбъектовВНА.ПолученоПоДоговоруМены)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПоступленияАктивов.БезвозмездноеПоступление)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПоступленияОбъектовВНА.БезвозмездноеПоступление)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПоступленияАктивов.ПоДоговоруАренды)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПоступленияОбъектовВНА.ПоДоговоруАренды)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПоступленияАктивов.ПоступлениеВДоверительноеУправление)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПоступленияОбъектовВНА.ПоступлениеВДоверительноеУправление)
	|		КОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПоступленияАктивов.ВкладВСовместнуюДеятельность)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыПоступленияОбъектовВНА.ВкладВСовместнуюДеятельность)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыПоступленияОбъектовВНА.Иное)
	|	КОНЕЦ КАК СпособПоступления,
	|	втПараметрыВНА.КоэффициентУскоренияНСБУ КАК КоэффициентУскоренияНСБУ,
	|	втПараметрыВНА.ПредполагаемыйОбъемПродукцииНСБУ КАК ПредполагаемыйОбъемПродукцииНСБУ,
	|	втПараметрыВНА.ПараметрВыработкиНСБУ КАК ПараметрВыработкиНСБУ,
	|	втПараметрыВНА.ЛиквидационнаяСтоимостьНСБУ КАК ЛиквидационнаяСтоимостьНСБУ,
	|	втСчетДт.СчетБД КАК СчетДт,
	|	втОбороты.СубконтоДт1 КАК ОбъектВНАДт,
	|	ЕСТЬNULL(втПринятиеИВводВПериоде.СубконтоКт1, втОбороты.СубконтоКт1) КАК ОбъектВНАКт,
	|	втОбороты.КоличествоДт КАК КоличествоДт,
	|	ЕСТЬNULL(втПринятиеИВводВПериоде.КоличествоКт, втОбороты.КоличествоКт) КАК КоличествоКт,
	|	ЕСТЬNULL(втПринятиеИВводВПериоде.ВалютнаяСуммаКт, втОбороты.ВалютнаяСуммаКт) КАК ВалютнаяСуммаКт,
	|	втОбороты.ВалютаДт КАК ВалютаДт,
	|	ЕСТЬNULL(втПринятиеИВводВПериоде.ВалютаКт, втОбороты.ВалютаКт) КАК ВалютаКт,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(втПараметрыДляЗаполненияВНА.ЕстьВУчете, ЛОЖЬ)
	|				И втОбороты.СобытиеВНА В (ЗНАЧЕНИЕ(Справочник.ВидыОпераций.ВводВЭксплуатацию), ЗНАЧЕНИЕ(Справочник.ВидыОпераций.ПринятиеКУчетуВНА))
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.ВидыОпераций.МодернизацияВНА)
	|		ИНАЧЕ втОбороты.СобытиеВНА
	|	КОНЕЦ КАК ВидОперации,
	|	ЕСТЬNULL(втПараметрыДляЗаполненияВНА.ЕстьВУчете, ЛОЖЬ) КАК ПринятРанееКУчетуМСФО,
	|	втСчетДт.СчетБДМСФО КАК СчетДтМСФО,
	|	ЕСТЬNULL(втСчетКтПринятие.СчетБДМСФО, втСчетКт.СчетБДМСФО) КАК СчетКтМСФО,
	|	ЕСТЬNULL(втСчетУчетаНСБУ.СчетБД, втСчетДт.СчетБД) КАК СчетУчетаВНАНСБУ,
	|	ЕСТЬNULL(втСчетУчетаНСБУ.СчетБДМСФО, втСчетДт.СчетБДМСФО) КАК СчетУчетаВНАМСФО,
	|	ЕСТЬNULL(втСчетАмортизацииНСБУ.СчетБД, ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)) КАК СчетАмортизацииНСБУ,
	|	ЕСТЬNULL(втСчетАмортизацииНСБУ.СчетБДМСФО, ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка)) КАК СчетАмортизацииМСФО,
	|	-втОборотыАмортизацияПриВыбытии.СуммаНСБУ КАК АмортизацияНСБУ,
	|	втПараметрыДляЗаполненияВНА.ГруппаВНА КАК ПараметрыУчетаВНА,
	|	втОбороты.СубконтоДт1 КАК СубконтоДт1,
	|	втОбороты.СубконтоДт2 КАК СубконтоДт2,
	|	втОбороты.СубконтоДт3 КАК СубконтоДт3,
	|	ЕСТЬNULL(втСчетКтПринятие.СчетБД, втСчетКт.СчетБД) КАК СчетКт,
	|	ЕСТЬNULL(втПринятиеИВводВПериоде.СубконтоКт1, втОбороты.СубконтоКт1) КАК СубконтоКт1,
	|	ЕСТЬNULL(втПринятиеИВводВПериоде.СубконтоКт2, втОбороты.СубконтоКт2) КАК СубконтоКт2,
	|	ЕСТЬNULL(втПринятиеИВводВПериоде.СубконтоКт3, втОбороты.СубконтоКт3) КАК СубконтоКт3,
	|	ОбъектыАрендыПоУмолчаниюМСФО.ФИ КАК ФИ,
	|	НЕ ОбъектыАрендыПоУмолчаниюМСФО.ФИ ЕСТЬ NULL
	|		И НЕ ЕСТЬNULL(втПараметрыДляЗаполненияВНА.ЕстьВУчете, ЛОЖЬ)
	|		И втОбороты.СобытиеВНА В (ЗНАЧЕНИЕ(Справочник.ВидыОпераций.ВводВЭксплуатацию)) КАК ПризнаетсяКакЛизинг,
	|	втОбороты.ПодразделениеДт КАК ПодразделениеДт,
	|	втОбороты.ПодразделениеКт КАК ПодразделениеКт
	|ИЗ
	|	втОбороты КАК втОбороты
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПараметрыДляЗаполненияВНА КАК втПараметрыДляЗаполненияВНА
	|		ПО втОбороты.ВНА = втПараметрыДляЗаполненияВНА.ВНА
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПараметрыВНА КАК втПараметрыВНА
	|			ЛЕВОЕ СОЕДИНЕНИЕ втСчетаБД КАК втСчетУчетаНСБУ
	|			ПО втПараметрыВНА.СчетУчетаНСБУ = втСчетУчетаНСБУ.СчетИсточник
	|			ЛЕВОЕ СОЕДИНЕНИЕ втСчетаБД КАК втСчетАмортизацииНСБУ
	|			ПО втПараметрыВНА.СчетАмортизацииНСБУ = втСчетАмортизацииНСБУ.СчетИсточник
	|			ЛЕВОЕ СОЕДИНЕНИЕ втПрофили КАК втПрофили
	|			ПО втПараметрыВНА.СпособОтраженияРасходовПоАмортизации = втПрофили.СпособОтраженияРасходовНСБУ
	|		ПО втОбороты.ВНА = втПараметрыВНА.ВНА
	|			И (втОбороты.КлассВНА <> ЗНАЧЕНИЕ(Перечисление.КлассыВНА.НезавершенноеСтроительство))
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСчетаБД КАК втСчетДт
	|		ПО втОбороты.СчетДт = втСчетДт.СчетИсточник
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСчетаБД КАК втСчетКт
	|		ПО втОбороты.СчетКт = втСчетКт.СчетИсточник
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОбороты КАК втОборотыАмортизацияПриВыбытии
	|		ПО втОбороты.ВНА = втОборотыАмортизацияПриВыбытии.ВНА
	|			И втОбороты.ДокументОснование = втОборотыАмортизацияПриВыбытии.ДокументОснование
	|			И (втОборотыАмортизацияПриВыбытии.АмортизацияПриВыбытии)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПринятиеИВводВПериоде КАК втПринятиеИВводВПериоде
	|			ЛЕВОЕ СОЕДИНЕНИЕ втСчетаБД КАК втСчетКтПринятие
	|			ПО втПринятиеИВводВПериоде.СчетКт = втСчетКтПринятие.СчетИсточник
	|		ПО втОбороты.ВНА = втПринятиеИВводВПериоде.ПриемникВНА
	|			И втОбороты.ДокументОснование = втПринятиеИВводВПериоде.ПриемникДокументОснование
	|			И (НЕ втОбороты.АмортизацияПриПеремещении)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОбъектыАрендыПоУмолчаниюМСФО КАК ОбъектыАрендыПоУмолчаниюМСФО
	|		ПО втОбороты.ВНА = ОбъектыАрендыПоУмолчаниюМСФО.ВНА
	|ГДЕ
	|	НЕ втОбороты.АмортизацияПриВыбытии
	|	И ВЫБОР
	|			КОГДА втОбороты.АмортизацияПриПеремещении
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ НЕ (втОбороты.ВНА, втОбороты.ДокументОснование, втОбороты.СчетКт) В
	|						(ВЫБРАТЬ
	|							т.ИсточникВНА,
	|							т.ИсточникДокументОснование,
	|							т.СчетКт
	|						ИЗ
	|							втПринятиеИВводВПериоде КАК т)
	|		КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаСобытияНСБУ,
	|	ВНА";

КонецФункции

#КонецОбласти

#КонецОбласти



