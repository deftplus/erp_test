
#Область ПрограммныйИнтерфейс

#Область ПроцедурыКроссТаблиц

// Заполнить таблицу из кросс-таблицы с переносом значений из колонок кросс-таблицы в реквизиты таблицы.
//
// Параметры:
//  Таблица              - ДанныеФормы.Коллекция - Табличная часть объекта
//	ОписаниеКТ			 - Структура - Описание кросс-таблицы
//  КроссТаблица         - ДанныеФормы.Коллекция - Кросс-таблица в форме
//  ТаблицаРасшифровки   - ДанныеФормы.Коллекция - Расшифровка кросс-таблицы
//  Периоды              - ДанныеФормы.Коллекция - Периоды кросс-таблицы
//
Процедура ЗаполнитьТаблицуИзКроссТаблицы(Объект, ОписаниеКТ, КроссТаблица, ТаблицаРасшифровки, Периоды) Экспорт
	
	ТаблицаПериоды             = Периоды;
	
	Если ОписаниеКТ.Свойство("СтруктураДействийСохранениеВОбъект") Тогда
		СтруктураДействий = ОписаниеКТ.СтруктураДействийСохранениеВОбъект;
	 Иначе
		СтруктураДействий = Новый Структура;
	КонецЕсли;
	
	Таблица = Объект[ОписаниеКТ.ИмяТабличнойЧасти];
	
	Таблица.Очистить();
	
	АктивныеПериоды = ТаблицаПериоды.НайтиСтроки(Новый Структура("Активная", Истина));
	
	//
	ПоляШапкиДляЗаполнения = ОписаниеКТ.Схема.Аналитики.Шапка;
	
	ЕстьВалютаВШапке = ЕстьАналитикаШапки(ОписаниеКТ, "Валюта");
	Если ЕстьВалютаВШапке Тогда
		ПоляШапкиДляЗаполнения = СтрЗаменить(ПоляШапкиДляЗаполнения, "Валюта,", "");
		ПоляШапкиДляЗаполнения = СтрЗаменить(ПоляШапкиДляЗаполнения, ",Валюта", "");
		ПоляШапкиДляЗаполнения = СтрЗаменить(ПоляШапкиДляЗаполнения, ",Валюта,", "");
		ПоляШапкиДляЗаполнения = СтрЗаменить(ПоляШапкиДляЗаполнения, "Валюта", ""); // Если она одна в шапке
	КонецЕсли; 
	
	ВалютаДокумента = Объект.ВалютаДокумента;
	
	ДанныеШапки = Новый Структура(ПоляШапкиДляЗаполнения);
	ЗаполнитьЗначенияСвойств(ДанныеШапки, Объект, ПоляШапкиДляЗаполнения);
	
	ДанныеНеИспользуется = Новый Структура(ОписаниеКТ.Схема.Аналитики.НеИспользуется);
	
	// Доп.реквизиты Номенклатуры
	НоменклатураВШапке = ОписаниеКТ.Схема.Аналитики.мШапка.Найти("Номенклатура") <> неопределено;
	НоменклатураВСтроке = ОписаниеКТ.Схема.Аналитики.мСтрока.Найти("Номенклатура") <> неопределено;
	НоменклатураВРасшифровке = ОписаниеКТ.Схема.Аналитики.мРасшифровка.Найти("Номенклатура") <> неопределено;
	СписокДопРеквизитовНоменклатуры = "ИсходнаяНоменклатура,ЕдиницаИзмерения,Коэффициент,Цена";
	ДопРеквизитыНоменклатурыВШапке = Новый Структура(СписокДопРеквизитовНоменклатуры);
	ЗаполнитьЗначенияСвойств(ДопРеквизитыНоменклатурыВШапке, Объект, СписокДопРеквизитовНоменклатуры);
	
	Параметры = Новый Структура;
	Параметры.Вставить("НоменклатураВШапке", 				НоменклатураВШапке);
	Параметры.Вставить("НоменклатураВСтроке", 				НоменклатураВСтроке);
	Параметры.Вставить("НоменклатураВРасшифровке", 			НоменклатураВРасшифровке);
	Параметры.Вставить("СписокДопРеквизитовНоменклатуры",	СписокДопРеквизитовНоменклатуры);
	Параметры.Вставить("ДопРеквизитыНоменклатурыВШапке",	ДопРеквизитыНоменклатурыВШапке);
	Параметры.Вставить("ДанныеНеИспользуется", 				ДанныеНеИспользуется);
	Параметры.Вставить("ВалютаДокумента", 					ВалютаДокумента);
	Параметры.Вставить("ЕстьВалютаВШапке",					ЕстьВалютаВШапке);
	Параметры.Вставить("ПоляШапкиДляЗаполнения",			ПоляШапкиДляЗаполнения);
	
	Для каждого СтрокаКТ Из КроссТаблица Цикл
			
		Для каждого СтрокаПериод Из АктивныеПериоды Цикл
		
			Если СтрокаПериод.НомерКолонки <= 0 Тогда 
				Продолжить 
			КонецЕсли;
			
			//Если ВсеРеквизитыПусты(ОписаниеКТ, СтрокаПериод.ИмяКолонки, СтрокаКТ) Тогда
			//	Продолжить;
			//КонецЕсли;
			
			Если ОписаниеКТ.ЕстьРасшифровка Тогда
			
				ИДПериода = Новый УникальныйИдентификатор(СтрЗаменить(СтрокаПериод.ИмяКолонки, "_", "-"));
				СтруктураПоискаРасшифровки = Новый Структура("ИДСтроки, ИДПериода", СтрокаКТ.ИДСтроки, ИДПериода);
				
				СтрокиРасшифровки = ТаблицаРасшифровки.НайтиСтроки(СтруктураПоискаРасшифровки);
				
				ДобавитьВТаблицуКТИРасшифровку(ОписаниеКТ, Таблица, Параметры, ДанныеШапки, СтрокаПериод, СтрокаКТ, СтрокиРасшифровки);
				
			Иначе
				
				НоваяСтрока = Таблица.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКТ, 	ОписаниеКТ.Схема.Аналитики.Строка);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПериод,	ОписаниеКТ.Схема.Аналитики.Колонка);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеШапки, 	Параметры.ПоляШапкиДляЗаполнения);

				Если Параметры.ЕстьВалютаВШапке Тогда
					НоваяСтрока.Валюта = Параметры.ВалютаДокумента;
				КонецЕсли;

				ЗаполнитьЗначенияСвойств(НоваяСтрока, Параметры.ДанныеНеИспользуется,
																	ОписаниеКТ.Схема.Аналитики.НеИспользуется);
				// Заполняем реквизиты строки табличной части
				
				Для каждого КлючЗначение Из ОписаниеКТ.Схема.Поля Цикл
					ОписаниеПоля = КлючЗначение.Значение;
					
					НоваяСтрока[ОписаниеПоля.ИмяРеквизитаТЧ] = СтрокаКТ[ОписаниеПоля.ПрефиксРеквизитаКолонки + СтрокаПериод.ИмяКолонки];
					
					// Изменение при переносе между резервами отображается как +, а хранится как -
					Если ОписаниеКТ.Схема.ЭтоПереносМеждуДокументамиРезервирования
						И ОписаниеПоля.ИмяПоказателя = ОписаниеКТ.Схема.Показатели.Изменение.Имя Тогда
						НоваяСтрока[ОписаниеПоля.ИмяРеквизитаТЧ] = -НоваяСтрока[ОписаниеПоля.ИмяРеквизитаТЧ];
					КонецЕсли;
					
				КонецЦикла;

				// копируем связанные с номенклатурой колонки 
				Если ОписаниеКТ.Схема.Ресурсы.Свойство("Количество") Тогда
					Если Параметры.НоменклатураВШапке Тогда
						ЗаполнитьЗначенияСвойств(НоваяСтрока, Параметры.ДопРеквизитыНоменклатурыВШапке, Параметры.СписокДопРеквизитовНоменклатуры);
					ИначеЕсли Параметры.НоменклатураВСтроке Тогда
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКТ, Параметры.СписокДопРеквизитовНоменклатуры);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры 

// Процедура рассчитывает добавленное поле "Номер строки" для кросс-таблицы
//
// Параметры:
//  Форма                    - УправляемаяФорма - Форма в которой есть кросс-таблица
//  ИмяРеквизитаКроссТаблицы - Строка - Имя кросс-таблицы в форме
//
Процедура РассчитатьНомерСтрокиКроссТаблицы(ОписаниеКТ, Форма) Экспорт 
	
	КроссТаблица = Форма[ОписаниеКТ.Реквизиты.КроссТаблица];
	НомерСтроки = 0;
	Для каждого СтрокаТЧ Из КроссТаблица Цикл
		
		НомерСтроки = НомерСтроки + 1;
		СтрокаТЧ.НомерСтроки = НомерСтроки;
	
	КонецЦикла; 

КонецПроцедуры

// Процедура рассчитывает итоги ресурсов кросс-таблицы
//
// Параметры:
//  Форма                    - УправляемаяФорма - Форма в которой есть кросс-таблица
//	ОписаниеКТ				 - Структура - Описание кросс-таблицы
//  РассчитыватьСтроки		 - Булево - Признак необходимости расчета строк
//
Процедура РассчитатьИтогиКолонокИОбщие(ОписаниеКТ, Форма, РассчитыватьСтроки = Истина) Экспорт

	ИмяРеквизитаКроссТаблицы = ОписаниеКТ.Реквизиты.КроссТаблица;
	ИтогиТолькоЛимитируемымСтатьям = ИтогиТолькоЛимитируемымСтатьям(ОписаниеКТ, Форма);
	Если ИтогиТолькоЛимитируемымСтатьям Тогда
		
		СтруктураПоиска = Новый Структура("УровеньКонтроляСтатьиБюджета", 
			ПредопределенноеЗначение("Перечисление.УровниКонтроляЛимитовСтатей.ПоБюджетамИРезервам"));
		ДанныеКТ = Форма[ИмяРеквизитаКроссТаблицы].НайтиСтроки(СтруктураПоиска);

	Иначе
		ДанныеКТ = Форма[ИмяРеквизитаКроссТаблицы];
	КонецЕсли;
	
	Итоги = Новый Структура;
	
	АктивныеПериоды = ПолучитьАктивныеПериоды(ОписаниеКТ, Форма);
	
	Для Каждого КлючЗначение Из ОписаниеКТ.Схема.Поля Цикл
		
		ОписаниеПоля = КлючЗначение.Значение;
		
		ПрефиксДляКолонки = ИмяРеквизитаКроссТаблицы + ОписаниеПоля.ПрефиксРеквизитаКолонки;
		
		ИмяИтогПоля = ПрефиксДляКолонки + "Итог";
		
		// Создаем колонки итогов
		Итоги.Вставить(ИмяИтогПоля, 0);
		Для каждого СтрокаПериода Из АктивныеПериоды Цикл
			Итоги.Вставить(ПрефиксДляКолонки + СтрокаПериода.ИмяКолонки, 0);
		КонецЦикла;
		
		Для каждого СтрокаТЧ Из ДанныеКТ Цикл
			
			Если РассчитыватьСтроки Тогда
				СтрокаТЧ.Сумма = 0;
			КонецЕсли;
			
			Для каждого СтрокаПериода Из АктивныеПериоды Цикл
				ЗначениеРесурса = СтрокаТЧ[ОписаниеПоля.ПрефиксРеквизитаКолонки + СтрокаПериода.ИмяКолонки];
				
				Если РассчитыватьСтроки Тогда
					СтрокаТЧ.Сумма = СтрокаТЧ.Сумма + ЗначениеРесурса;
				КонецЕсли;
				
				ИмяИтогКолонки = ПрефиксДляКолонки + СтрокаПериода.ИмяКолонки;
				Итоги[ИмяИтогКолонки] = Итоги[ИмяИтогКолонки] + ЗначениеРесурса;
				Итоги[ИмяИтогПоля] = Итоги[ИмяИтогПоля] + ЗначениеРесурса;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла; 
	
	ЗаполнитьЗначенияСвойств(Форма, Итоги);
	
КонецПроцедуры

// 
Функция ПолучитьКнопкуУправленияЛимитированиемСтроки(ОписаниеКТ, Форма) экспорт
	
	Если НЕ ОписаниеКТ.Элементы.Свойство("КнопкаТолькоЛимитируемыеСтатьи") Тогда
		Возврат неопределено;
	КонецЕсли;
	
	Возврат Форма.Элементы.Найти(ОписаниеКТ.Элементы.КнопкаТолькоЛимитируемыеСтатьи);

КонецФункции

// Процедура рассчитывает итоги по строкеКТ (Сумма, кол-во)
Процедура РассчитатьИтогиПоСтрокеКТ(ОписаниеКТ, СтрокаКТ, МассивАктивныПериодов) Экспорт

	СтруктураИтоговПоСтроке = Новый Структура;
	Для каждого КлючЗначениеРесурс Из ОписаниеКТ.Схема.Ресурсы Цикл
		СтруктураИтоговПоСтроке.Вставить(КлючЗначениеРесурс.Значение.Имя, 0);
	КонецЦикла; 
	
	Для каждого СтрокаПериода Из МассивАктивныПериодов Цикл
		
		Для каждого СтрокаИтога Из СтруктураИтоговПоСтроке Цикл
			СтруктураИтоговПоСтроке[СтрокаИтога.Ключ] = СтруктураИтоговПоСтроке[СтрокаИтога.Ключ] 
				+ СтрокаКТ[СтрокаИтога.Ключ+"Результат_"+СтрокаПериода.ИмяКолонки];
		КонецЦикла; 
		
	КонецЦикла;
	
	Для каждого СтрокаИтога Из СтруктураИтоговПоСтроке Цикл
		СтрокаКТ[СтрокаИтога.Ключ] = СтрокаИтога.Значение;
	КонецЦикла; 
		
КонецПроцедуры
 
#КонецОбласти

Процедура СохранитьДанныеКроссТаблицыВОбъект(ДокументОбъект, ОписаниеКТ, Форма) экспорт
	
	ЗаполнитьТаблицуИзКроссТаблицы(
		ДокументОбъект,
		ОписаниеКТ,
		Форма[ОписаниеКТ.Реквизиты.КроссТаблица],
		Форма[ОписаниеКТ.Реквизиты.Расшифровка],
		Форма[ОписаниеКТ.Реквизиты.Периоды]);
	
КонецПроцедуры

Функция ПолучитьОписаниеПериодаПоИмениЭлемента(ТаблицаПериодов, ИмяЭлемента) Экспорт
	
	ИДПериода = Прав(СокрЛП(ИмяЭлемента), 36);
	
	Строки = ТаблицаПериодов.НайтиСтроки(Новый Структура("ИмяКолонки", ИДПериода));
	
	Если Строки.Количество() = 0 Тогда
		Возврат неопределено;
	Иначе
		Возврат Строки[0];
	КонецЕсли;
	
КонецФункции

Функция Ресурс(СтрокаКТ, ПериодКТ, ПрефиксРесурса) экспорт
	
	Возврат СтрокаКТ[ПрефиксРесурса + ПериодКТ.ИмяКолонки];
	
КонецФункции

Процедура УстановитьРесурс(СтрокаКТ, ПериодКТ, ПрефиксРесурса, Значение) экспорт
	
	СтрокаКТ[ПрефиксРесурса + ПериодКТ.ИмяКолонки] = Значение;
	
КонецПроцедуры

Процедура ИзменитьВидимостьКолонки(Форма, ОписаниеКТ, ИмяЭлементаУправления, ВидимостьКолонкиКТ) экспорт
	
	ТаблицаПериодов = Форма[ОписаниеКТ.Реквизиты.Периоды];
	
	Для Каждого ОписаниеПоля Из ОписаниеКТ.Схема.Поля Цикл
		
		Поле = ОписаниеПоля.Значение;
		
		Если Поле.КнопкаВидимости <> ИмяЭлементаУправления Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяГруппыФормыГруппаРеквизитов = ОписаниеКТ.Реквизиты.КроссТаблица + "ГруппаРеквизитов";
		
		ПрефиксИмениЭлемента = ОписаниеКТ.Реквизиты.КроссТаблица + Поле.ПрефиксРеквизитаКолонки;
		
		Для Каждого СтрокаПериод Из ТаблицаПериодов Цикл
			
			ИмяЭлемента = ПрефиксИмениЭлемента + СтрокаПериод.ИмяКолонки;
			Форма.Элементы[ИмяЭлемента].Видимость = ВидимостьКолонкиКТ;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьИмяЭлементаГруппаПоПериоду(ОписаниеКТ, ОписаниеПериода) экспорт

	Возврат ОписаниеКТ.Элементы.КроссТаблица + "Группа"+ОписаниеПериода.ИмяКолонки;

КонецФункции // ПолучитьИмяЭлементаГруппаПоРесурсуПоказателю()

Функция ПолучитьИмяЭлементаГруппаПоПериодуПоказателю(ОписаниеКТ, ОписаниеПериода, ОписаниеПоказателя) экспорт

	Возврат ОписаниеКТ.Элементы.КроссТаблица + "Группа"+ОписаниеПериода.ИмяКолонки+ОписаниеПоказателя.Имя;

КонецФункции // ПолучитьИмяЭлементаГруппаПоРесурсуПоказателю()

// Функция возвращает активные периоды кросс-таблицы
Функция ПолучитьАктивныеПериоды(ОписаниеКТ, Форма) экспорт
	
	СтруктураПоиска = Новый Структура("Активная", Истина);
	
	Возврат Форма[ОписаниеКТ.Реквизиты.Периоды].НайтиСтроки(СтруктураПоиска);
	
КонецФункции

// Функция возвращает таблицу периодов указанной кросс-таблицы
Функция ПолучитьТаблицуАктивныхПериодовФормы(ОписаниеКТ, Форма) экспорт
	
	ТаблицаПериодов = Форма[ОписаниеКТ.Реквизиты.Периоды];
	АктивныеПериоды = ПолучитьАктивныеПериоды(ОписаниеКТ, Форма);
	
	Возврат ТаблицаПериодов.Выгрузить(АктивныеПериоды,"Период");
	
КонецФункции

// Функция возвращает массив реквизитов кросс-таблицы по заданным в параметрах массивах ресурсов, показателей и периодов.
Функция ПолучитьРеквизиты(Ресурсы, Показатели, Периоды) экспорт

	ПериодыЭтоСтруктура = ТипЗнч(Периоды) = Тип("Структура");
	РесурсыЭтоСтруктура = ТипЗнч(Ресурсы) = Тип("Структура");
	ПоказателиЭтоСтруктура = ТипЗнч(Показатели) = Тип("Структура");
	
	Результат = Новый массив;
	Для каждого ОписаниеРесурса Из Ресурсы Цикл
		
		Если РесурсыЭтоСтруктура Тогда
			ИмяРесурса = ОписаниеРесурса.Значение.Имя;
		Иначе
			ИмяРесурса = ОписаниеРесурса.Имя;
		КонецЕсли; 
				
		Для каждого ОписаниеПоказателя Из Показатели Цикл
			
			Если ПоказателиЭтоСтруктура Тогда
				ИмяПоказателя = ОписаниеПоказателя.Значение.Имя;
			Иначе
				ИмяПоказателя = ОписаниеПоказателя.Имя;
			КонецЕсли; 
			
			Для каждого ОписаниеПериода Из Периоды Цикл
				
				Если ПериодыЭтоСтруктура Тогда
					ИмяПериода = ОписаниеПериода.Значение.ИмяКолонки;
				Иначе
					ИмяПериода = ОписаниеПериода.ИмяКолонки;
				КонецЕсли; 
				
				Результат.Добавить(ИмяРесурса+ИмяПоказателя+"_"+ИмяПериода);
			
			КонецЦикла; 
		
		КонецЦикла; 
	
	КонецЦикла; 
	
	Возврат Результат;

КонецФункции // ПолучитьРеквизиты()

//
Функция ПолучитьИмяЭлемента_Измерение(ОписаниеКТ, УникальноеИмяЭлемента, Постфикс="") экспорт

	Возврат ОписаниеКТ.Элементы.КроссТаблица + ОписаниеКТ.ПрефиксыЭлементов.Измерение + УникальноеИмяЭлемента + Постфикс;

КонецФункции // ПолучитьИмяЭлемента_Измерение()

//
Функция ПолучитьИмяЭлемента_ДопРеквизит(ОписаниеКТ, УникальноеИмяЭлемента) экспорт

	Возврат ОписаниеКТ.Элементы.КроссТаблица + ОписаниеКТ.ПрефиксыЭлементов.Реквизит + УникальноеИмяЭлемента;

КонецФункции // ПолучитьИмяЭлемента_Измерение()

// Имя элемента из таблицы экспресс-расшифровки
Функция ПолучитьИмяЭлемента_Расшифровка(ОписаниеКТ, УникальноеИмяЭлемента, Постфикс="") экспорт

	Возврат ОписаниеКТ.Элементы.КроссТаблица+ОписаниеКТ.ПрефиксыЭлементов.ИзмерениеРасшифровки+УникальноеИмяЭлемента+Постфикс;

КонецФункции // ПолучитьИмяЭлемента_Измерение()

// Получить имя элемента ресурса
Функция ПолучитьИмяЭлемента_Ресурс(ОписаниеКТ, УникальноеИмяЭлемента, Постфикс="") экспорт

	Возврат ОписаниеКТ.Элементы.КроссТаблица+ОписаниеКТ.ПрефиксыЭлементов.Ресурс+УникальноеИмяЭлемента+Постфикс;

КонецФункции // ПолучитьИмяЭлемента_Измерение()

Функция ЕстьАналитикаШапки(ОписаниеКТ, ИмяАналитики) экспорт
	
	Возврат ОписаниеКТ.Схема.Аналитики.мШапка.Найти(ИмяАналитики)<>неопределено;
	
КонецФункции

Функция ЕстьАналитикаСтроки(ОписаниеКТ, ИмяАналитики) экспорт
	
	Возврат ОписаниеКТ.Схема.Аналитики.мСтрока.Найти(ИмяАналитики)<>неопределено;
	
КонецФункции

Функция ЕстьАналитикаРасшифровки(ОписаниеКТ, ИмяАналитики) экспорт
	
	Возврат ОписаниеКТ.Схема.Аналитики.мРасшифровка.Найти(ИмяАналитики)<>неопределено;
	
КонецФункции

Функция АналитикиСтрокиКТ(ОписаниеКТ, Форма, ТекущиеДанные, ОбязательныеРеквизитыШапки="") экспорт
	
	//
	Объект = Форма.Объект;
	
	//
	ИменаПараметров = ОбязательныеРеквизитыШапки;
	ПараметрыШапки = ОписаниеКТ.Схема.Аналитики.Шапка;
	Если СтрНайти(ПараметрыШапки, "Валюта") > 0 Тогда
		ПараметрыШапки = СтрЗаменить(ПараметрыШапки, "Валюта", "ВалютаДокумента");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыШапки) Тогда
		ИменаПараметров = ИменаПараметров + "," + ПараметрыШапки;
	КонецЕсли;
	
	ПараметрыШапки = ИменаПараметров; // Чтобы были с ВидБюджета
	
	// Строки
	Если ЗначениеЗаполнено(ОписаниеКТ.Схема.Аналитики.Строка) Тогда
		ИменаПараметров = ИменаПараметров + "," + ОписаниеКТ.Схема.Аналитики.Строка;
	КонецЕсли;
	
	// ДопРеквизиты номенклатуры в строке
	ДопРеквизитыНоменклатуры = "";
	Если ОписаниеКТ.Схема.Аналитики.мСтрока.Найти("Номенклатура") <> неопределено Тогда
		ДопРеквизитыНоменклатуры = "ЭтоКатегорияНоменклатуры, Цена, Коэффициент, ЕдиницаИзмерения, ИсходнаяНоменклатура";
		ИменаПараметров = ИменаПараметров + "," + ДопРеквизитыНоменклатуры;
	КонецЕсли;
	
	ДопПараметры = Новый Структура(ИменаПараметров);
	ЗаполнитьЗначенияСвойств(ДопПараметры, Объект, ПараметрыШапки);
	ЗаполнитьЗначенияСвойств(ДопПараметры, ТекущиеДанные, ОписаниеКТ.Схема.Аналитики.Строка);
	Если ДопРеквизитыНоменклатуры <> "" Тогда
		ЗаполнитьЗначенияСвойств(ДопПараметры, ТекущиеДанные, ДопРеквизитыНоменклатуры);
	КонецЕсли;
	
	Возврат ДопПараметры;
	
КонецФункции

// Процедура добавляет/заменяет параметр выбора у поля ввода формы
Процедура УстановитьПараметрВыбора(Элемент, ИмяПараметраВыбора, Ограничение) экспорт
	
	МассивПараметровВыбора = Новый Массив(Элемент.ПараметрыВыбора);
	УдалитьПараметрВыбораИзМассива(МассивПараметровВыбора, ИмяПараметраВыбора);
	
	МассивПараметровВыбора.Добавить(
		Новый ПараметрВыбора(ИмяПараметраВыбора, Ограничение));
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПараметровВыбора);
	
КонецПроцедуры

// Процедура удаляет по имени параметр выбора из массива параметров выбора 
Процедура УдалитьПараметрВыбораИзМассива(МассивПараметровВыбора, ИмяПараметраВыбора) экспорт
	
	Поз = 0;
	Пока Поз < МассивПараметровВыбора.Количество() Цикл
	
		Если МассивПараметровВыбора[Поз].Имя = ИмяПараметраВыбора Тогда
			МассивПараметровВыбора.Удалить(Поз);
			Прервать;
		КонецЕсли;
		
		Поз = Поз + 1;
	
	КонецЦикла; 
	
КонецПроцедуры

// Процедура устанавливает видимость колонок ресурса кросс-таблицы
Процедура УстановитьВидимостьКолонкиРесурса(Форма, ОписаниеКТ, ОписаниеРесурса, ВидимостьКолонкиКТ) экспорт
	
	ИмяЭлемента = ОписаниеРесурса.УправлениеВидимостью.ИмяЭлемента;
	Элемент = Форма.Элементы[ИмяЭлемента];
	
	Форма.Элементы[ИмяЭлемента].Пометка = ВидимостьКолонкиКТ;
	
	ТаблицаПериодов = Форма[ОписаниеКТ.Реквизиты.Периоды];
	
	ШаблонИмениЭлементаРесурса = ОписаниеКТ.Элементы.КроссТаблица+ОписаниеРесурса.Имя;
	
	Для Каждого СтрокаПериод Из ТаблицаПериодов Цикл
		
		Если НЕ СтрокаПериод.Активная Тогда
		
			Продолжить;
		
		КонецЕсли; 
		
		ИмяГруппы = КроссТаблицыУХКлиентСервер.ПолучитьИмяЭлементаГруппаПоПериоду(ОписаниеКТ, СтрокаПериод);
		ЭлементГруппаПериод = Форма.Элементы[ИмяГруппы];
		
		Для каждого ЭлементГруппаПоказатель Из ЭлементГруппаПериод.ПодчиненныеЭлементы Цикл
			
			Для каждого ЭлементРесурс Из ЭлементГруппаПоказатель.ПодчиненныеЭлементы Цикл
			
				Если СтрНайти(ЭлементРесурс.Имя, ШаблонИмениЭлементаРесурса) > 0 Тогда
					ЭлементРесурс.Видимость = ВидимостьКолонкиКТ;
				КонецЕсли; 
			
			КонецЦикла; 
		
		КонецЦикла; 
		
	КонецЦикла;
	
	// Итоговые значения
	ГруппаИтого = Форма.Элементы.Найти(ОписаниеКТ.ИмяГруппыРесурсы);
	Если ГруппаИтого <> неопределено Тогда
	
		ИмяЭлемента = ОписаниеКТ.Элементы.КроссТаблица + ОписаниеКТ.ПрефиксыЭлементов.Ресурс+ОписаниеРесурса.Имя;
		
		Элемент = Форма.Элементы.Найти(ИмяЭлемента);
		Если Элемент <> неопределено Тогда
			Элемент.Видимость = ВидимостьКолонкиКТ;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура устанавливает видимость колонок показателей кросс-таблицы
Процедура УстановитьВидимостьКолонкиПоказателя(Форма, ОписаниеКТ, ОписаниеПоказателя, ВидимостьКолонкиКТ) экспорт
	
	ИмяЭлемента = ОписаниеПоказателя.УправлениеВидимостью.ИмяЭлемента;
	Элемент = Форма.Элементы[ИмяЭлемента];
	
	Форма.Элементы[ИмяЭлемента].Пометка = ВидимостьКолонкиКТ;
	
	ТаблицаПериодов = Форма[ОписаниеКТ.Реквизиты.Периоды];
	
	Для Каждого СтрокаПериод Из ТаблицаПериодов Цикл
		
		Если НЕ СтрокаПериод.Активная Тогда
			Продолжить;
		КонецЕсли; 
		
		ИмяГруппы = КроссТаблицыУХКлиентСервер.ПолучитьИмяЭлементаГруппаПоПериодуПоказателю(ОписаниеКТ, СтрокаПериод, ОписаниеПоказателя);
		ЭлементГруппа = Форма.Элементы[ИмяГруппы];
		ЭлементГруппа.Видимость = ВидимостьКолонкиКТ;
		ЭлементГруппа.Заголовок = ОписаниеПоказателя.Заголовок; // Устанавливаем заголовок для режима смены выбора документа планирования
		
		// Устанавливаем видимость подчиненных элементов
		Для каждого КлючЗначениеРесурс Из ОписаниеКТ.Схема.Ресурсы Цикл
			ОписаниеРесурса = КлючЗначениеРесурс.Значение;
			
			Для каждого ПодчиненныйЭлемент Из ЭлементГруппа.ПодчиненныеЭлементы Цикл
				
				Если СтрНайти(ПодчиненныйЭлемент.Имя, ОписаниеКТ.Элементы.КроссТаблица+ОписаниеРесурса.Имя) > 0 Тогда
					
					ПодчиненныйЭлемент.Видимость = ВидимостьКолонкиКТ;
					
				КонецЕсли; 
				
			КонецЦикла; 
			
		КонецЦикла; 
		
	КонецЦикла;
	
	// колонки расшифровки
	Если ОписаниеКТ.Схема.Аналитики.мРасшифровка.Количество() > 0 Тогда
	
		Для каждого КлючЗначениеРесурс Из ОписаниеКТ.Схема.Ресурсы Цикл
			ОписаниеРесурса = КлючЗначениеРесурс.Значение;
			
			ЭлементРасшифровка = Форма.Элементы[ОписаниеКТ.Элементы.Расшифровка];
			Для каждого ПодчиненныйЭлемент Из ЭлементРасшифровка.ПодчиненныеЭлементы Цикл
				
				Если СтрНайти(ПодчиненныйЭлемент.Имя, ОписаниеКТ.Элементы.Расшифровка+"_"+ОписаниеРесурса.Имя+ОписаниеПоказателя.Имя) > 0 Тогда
					
					ПодчиненныйЭлемент.Видимость = ВидимостьКолонкиКТ;
					Прервать;
					
				КонецЕсли; 
				
			КонецЦикла; 
			
		КонецЦикла; 
		
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьВТаблицуКТИРасшифровку(ОписаниеКТ, Таблица, Параметры, ДанныеШапки, СтрокаПериод, СтрокаКТ, СтрокиРасшифровки)
	
	//
	Для каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
	
		//
		НоваяСтрока = Таблица.Добавить();

		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеШапки, 			Параметры.ПоляШапкиДляЗаполнения);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПериод,			ОписаниеКТ.Схема.Аналитики.Колонка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКТ, 			ОписаниеКТ.Схема.Аналитики.Строка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасшифровки,	ОписаниеКТ.Схема.Аналитики.Расшифровка);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Параметры.ДанныеНеИспользуется,
															ОписаниеКТ.Схема.Аналитики.НеИспользуется);
		Если Параметры.ЕстьВалютаВШапке Тогда
			НоваяСтрока.Валюта = Параметры.ВалютаДокумента;
		КонецЕсли;

		Для каждого КлючЗначение Из ОписаниеКТ.Схема.Поля Цикл
			ОписаниеПоля = КлючЗначение.Значение;
			НоваяСтрока[ОписаниеПоля.ИмяРеквизитаТЧ] = СтрокаРасшифровки[ОписаниеПоля.ИмяРеквизитаТЧ];
		КонецЦикла;

		// копируем связанные с номенклатурой колонки 
		Если Параметры.НоменклатураВШапке Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Параметры.ДопРеквизитыНоменклатурыВШапке, Параметры.СписокДопРеквизитовНоменклатуры);
		ИначеЕсли Параметры.НоменклатураВСтроке Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКТ, Параметры.СписокДопРеквизитовНоменклатуры);
		ИначеЕсли Параметры.НоменклатураВРасшифровке Тогда
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРасшифровки, Параметры.СписокДопРеквизитовНоменклатуры);
		КонецЕсли;
		
	КонецЦикла; 
	
КонецПроцедуры

Функция ВсеРеквизитыПусты(ОписаниеКТ, ИмяКолонки, СтрокаКроссТаблицы)
	
	Результат = Истина;
	
	Для каждого КлючЗначение Из ОписаниеКТ.Схема.Поля Цикл
		Результат = Результат И НЕ ЗначениеЗаполнено(СтрокаКроссТаблицы[КлючЗначение.Значение.ПрефиксРеквизитаКолонки + ИмяКолонки]);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ИтогиТолькоЛимитируемымСтатьям(ОписаниеКТ, Форма)
	
	// Нет такого свойства - не работаем
	СтатьяОтсутствуетВСтроке = ОписаниеКТ.Схема.Аналитики.мСтрока.Найти("СтатьяБюджета") = неопределено;
	//
	КнопкаУправления = ПолучитьКнопкуУправленияЛимитированиемСтроки(ОписаниеКТ, Форма);
	
	Если СтатьяОтсутствуетВСтроке ИЛИ КнопкаУправления = неопределено Тогда
		Возврат Ложь;
	Иначе
		Возврат КнопкаУправления.Пометка;
	КонецЕсли;
	
КонецФункции

#КонецОбласти
