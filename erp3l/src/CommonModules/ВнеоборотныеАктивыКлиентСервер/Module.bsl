////////////////////////////////////////////////////////////////////////////////
// Процедуры подсистемы "Внеоборотные активы".
// 
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Формирует представление количества месяцев в виде строки "Х лет Х месяцев".
//
// Параметры:
//  КоличествоМесяцев	- Число		- Количество месяцев.
//  ЗаключитьВСкобки	- Булево	- Истина, если срок нужно заключить в скобки.
// 
// Возвращаемое значение:
//  Строка - расшифровка срока полезного использования в годах и месяцах.
//
Функция ПредставлениеКоличестваМесяцевСтрокой(КоличествоМесяцев, ЗаключитьВСкобки = Истина) Экспорт

	Если НЕ ЗначениеЗаполнено(КоличествоМесяцев) Тогда
		Возврат "";
	КонецЕсли;
	
	ЧислоЛет = Цел(КоличествоМесяцев / 12);
	ЧислоМесяцев = (КоличествоМесяцев % 12);
	
	РасшифровкаСрокаПолезногоИспользования = "";
	
	Если ЧислоЛет <> 0 Тогда
		РасшифровкаСрокаПолезногоИспользования =
			СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru = ';%1 год;;%1 года;%1 лет;%1 года';
																			|en = ';%1 year;;%1 years;%1 years;%1 years'"), ЧислоЛет);
	КонецЕсли;
	
	Если ЧислоМесяцев <> 0 Тогда
		РасшифровкаСрокаПолезногоИспользования =
			РасшифровкаСрокаПолезногоИспользования
			+ ?(ЧислоЛет <> 0, " ", "")
			+ СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru = ';%1 месяц;;%1 месяца;%1 месяцев;%1 месяца';
																			|en = ';%1 month;;%1 month;%1 months;%1 months'"), ЧислоМесяцев);
	КонецЕсли;
	
	Если ЗаключитьВСкобки Тогда
		РасшифровкаСрокаПолезногоИспользования = "(" + РасшифровкаСрокаПолезногоИспользования + ")";
	КонецЕсли;
		
	Возврат РасшифровкаСрокаПолезногоИспользования;
	
КонецФункции

// Формирует представление срока в виде строки "Х лет Х месяцев Х дней".
// 
// Параметры:
// 	КоличествоЛет - Число -
// 	КоличествоМесяцев - Число -
// 	КоличествоДней - Число -
// Возвращаемое значение:
// 	Строка - 
Функция ПредставлениеСрокаСтрокой(Знач КоличествоЛет, Знач КоличествоМесяцев, Знач КоличествоДней) Экспорт

	Если КоличествоЛет + КоличествоМесяцев + КоличествоДней = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	РасшифровкаСрокаПолезногоИспользования =
		?(КоличествоЛет <> 0, СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru = ';%1 год;;%1 года;%1 лет;%1 года';
																							|en = ';%1 year;;%1 years;%1 years;%1 years'"), КоличествоЛет), "")
		+ ?(КоличествоЛет <> 0 И КоличествоМесяцев <> 0, " ", "")
		+ ?(КоличествоМесяцев <> 0, СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru = ';%1 месяц;;%1 месяца;%1 месяцев;%1 месяца';
																									|en = ';%1 month;;%1 month;%1 months;%1 months'"), КоличествоМесяцев), "")
		+ ?(КоличествоЛет + КоличествоМесяцев <> 0 И КоличествоДней <> 0, " ", "")
		+ ?(КоличествоДней <> 0, СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru = ';%1 день;;%1 дня;%1 дней;%1 дня';
																								|en = ';%1 day;;%1 day;%1 days;%1 day'"), КоличествоДней), "");
	
	Возврат РасшифровкаСрокаПолезногоИспользования;

КонецФункции

// Формирует представление срока в виде строки "с 01.01.2020 по 31.12.2020 (Х лет Х месяцев Х дней)".
// 
// Параметры:
// 	КоличествоЛет - Число -
// 	КоличествоМесяцев - Число -
// 	КоличествоДней - Число -
// 	ДатаНачала - Дата -
// 	ТолькоПросмотр - Булево - 
// Возвращаемое значение:
// 	ФорматированнаяСтрока - 
Функция ПредставлениеСрокаФорматированнойСтрокой(Знач КоличествоЛет, Знач КоличествоМесяцев, Знач КоличествоДней, Знач ДатаНачала, Знач ТолькоПросмотр) Экспорт
	
	СтрокиЗаголовкаСрока = Новый Массив;
	
	Если КоличествоЛет + КоличествоМесяцев + КоличествоДней = 0
		И НЕ ЗначениеЗаполнено(ДатаНачала) Тогда
		
		СтрокиЗаголовкаСрока.Добавить(НСтр("ru = '<не указан>';
											|en = '<not specified>'"));
	
	ИначеЕсли КоличествоЛет + КоличествоМесяцев + КоличествоДней > 0 Тогда
		
		ДатаОкончания = ДатаОкончанияПоСроку(ДатаНачала, КоличествоЛет, КоличествоМесяцев, КоличествоДней);
					 
		ТекстЗаголовка = СтрШаблон(НСтр("ru = 'с %1 по %2';
										|en = 'from %1 to %2'"), Формат(ДатаНачала, "ДЛФ=D;"), Формат(ДатаОкончания, "ДЛФ=D;"));
		СтрокиЗаголовкаСрока.Добавить(ТекстЗаголовка);
				
		ТекстЗаголовка = ПредставлениеСрокаСтрокой(
							КоличествоЛет,
							КоличествоМесяцев,
							КоличествоДней);
							
		СтрокиЗаголовкаСрока.Добавить(" (");
		СтрокиЗаголовкаСрока.Добавить(ТекстЗаголовка);
		СтрокиЗаголовкаСрока.Добавить(")");
			
	Иначе
		
		ТекстЗаголовка = СтрШаблон(НСтр("ru = 'с %1';
										|en = 'from %1'"), Формат(ДатаНачала, "ДЛФ=D;"));
		СтрокиЗаголовкаСрока.Добавить(ТекстЗаголовка);
		
	КонецЕсли;
	
	ТекстСсылки = ?(НЕ ТолькоПросмотр, "#Редактировать", "");
	
	Возврат  Новый ФорматированнаяСтрока(СтрокиЗаголовкаСрока,,,, ТекстСсылки);
	
КонецФункции

// Расчитывает дату окончания по сроку.
// 
// Параметры:
// 	ДатаНачала - Дата - 
// 	СрокЛет - Число - 
// 	СрокМес - Число - 
// 	СрокДней - Число - 
// 	ПроверитьСрок - Булево -
// 	
// Возвращаемое значение:
// 	Дата - Дата окончания.
Функция ДатаОкончанияПоСроку(ДатаНачала, СрокЛет, СрокМес, СрокДней, ПроверитьСрок = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала)
		ИЛИ ПроверитьСрок И СрокЛет = 0 И СрокМес = 0 И СрокДней = 0 Тогда
		Возврат '000101010000';
	КонецЕсли;
	
	ДатаОкончания = НачалоДня(ДатаНачала);
	
	Если СрокЛет <> 0 Тогда
		ДатаОкончания = Дата(Год(ДатаНачала) + СрокЛет, Месяц(ДатаНачала), День(ДатаНачала));
		Если ДатаНачала = КонецМесяца(ДатаНачала) Тогда
			ДатаОкончания = КонецМесяца(ДатаОкончания);
		КонецЕсли;
	КонецЕсли;
	
	Если СрокМес <> 0 Тогда
		ДатаОкончания = ДобавитьМесяц(ДатаОкончания, СрокМес);
		Если ДатаНачала = КонецМесяца(ДатаНачала) Тогда
			ДатаОкончания = КонецМесяца(ДатаОкончания);
		КонецЕсли;
	КонецЕсли;
	
	Если СрокДней <> 0 Тогда
		ДатаОкончания = ДатаОкончания + 86400 * СрокДней;
	КонецЕсли;
	
	ДатаОкончания = Макс(ДатаОкончания - 86400, ДатаНачала);
	
	Возврат ДатаОкончания;
	
КонецФункции

// Рассчитывает срок по периоду.
// Считается, что между 01.01.2021 и 02.01.2021 срок равен двум дням.
// 
// Параметры:
// 	ДатаНачала - Дата - 
// 	ДатаОкончания - Дата - 
// 	СрокЛет - Число - 
// 	СрокМес - Число - 
// 	СрокДней - Число -
// 
Процедура РассчитатьСрокПоПериоду(ДатаНачала, ДатаОкончания, СрокЛет, СрокМес, СрокДней) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ДатаНачала) 
		ИЛИ НЕ ЗначениеЗаполнено(ДатаОкончания)
		ИЛИ ДатаНачала > ДатаОкончания Тогда
		Возврат;
	КонецЕсли;
	
	СрокЛет = 0;
	НачалоСледующейДаты = ДобавитьМесяц(ДатаНачала, 12) - 86400;
	Пока НачалоСледующейДаты <= ДатаОкончания Цикл
		СрокЛет = СрокЛет + 1;
		НачалоСледующейДаты = ДобавитьМесяц(НачалоСледующейДаты, 12);
	КонецЦикла;
	
	СрокМес = 0;
	НачалоСледующейДаты = ДобавитьМесяц(ДатаНачала, 12 * СрокЛет + 1) - 86400;
	ЭтоКонецМесяца = (КонецДня(НачалоСледующейДаты) = КонецМесяца(НачалоСледующейДаты));
	Пока НачалоСледующейДаты <= ДатаОкончания Цикл
		СрокМес = СрокМес + 1;
		НачалоСледующейДаты = ДобавитьМесяц(НачалоСледующейДаты, 1);
		Если ЭтоКонецМесяца Тогда
			НачалоСледующейДаты = НачалоДня(КонецМесяца(НачалоСледующейДаты));
		КонецЕсли;
	КонецЦикла;
	
	СрокДней = 0;
	НачалоСледующейДаты = ДобавитьМесяц(ДатаНачала, 12 * СрокЛет + СрокМес);
	Пока НачалоСледующейДаты <= ДатаОкончания Цикл
		СрокДней = СрокДней + 1;
		НачалоСледующейДаты = НачалоСледующейДаты + 86400;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает текст подсказки срока использования в годах и месяцах.
//
// Параметры:
//  СрокиИспользования	 - Соответствие	 - Ключ содержит элемент формы, Значение содержит срок использования.
//
Процедура УстановитьТекстПодсказкиСрокИспользования(СрокиИспользования) Экспорт
	
	Для каждого ЭлементСрокИспользования Из СрокиИспользования Цикл
		ЭлементФормы = ЭлементСрокИспользования.Ключ;
		РасшифровкаСрока = ПредставлениеКоличестваМесяцевСтрокой(ЭлементСрокИспользования.Значение);
		Если ЗначениеЗаполнено(РасшифровкаСрока) Тогда
			ЭлементФормы.Подсказка = РасшифровкаСрока;
			ЭлементФормы.ОтображениеПодсказки = ОтображениеПодсказки.ОтображатьСправа;
		Иначе
			ЭлементФормы.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Формирует параметры для подбора элементов на основании параметров указанных для элемента формы.
// Используется для подбора в формах выбора с такими же параметрами выбора, как и при выборе.
//
// Параметры:
//  ЭлементФормы - ПолеФормы - Элемент формы в котором указаны параметры подбора.
//  Форма		 - ФормаКлиентскогоПриложения - Форма на которой расположен элемент. Используется для получения параметров.
// 
// Возвращаемое значение:
//  Структура - параметры подбора.
//
Функция ПараметрыПодбора(ЭлементФормы, Форма) Экспорт

	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыПодбора.Вставить("МножественныйВыбор", Истина);
	
	ОбщегоНазначенияУТКлиентСервер.ДополнитьПараметрыПодбораПараметрамиВыбора(
		ЭлементФормы.ПараметрыВыбора, ПараметрыПодбора);
		
	СвязиПараметровВыбора = Новый Структура;
	ОбщегоНазначенияУТКлиентСервер.ДополнитьПараметрыПодбораСвязьюПараметровВыбора(
		ЭлементФормы.СвязиПараметровВыбора, Форма, СвязиПараметровВыбора);
	
	Для Каждого ПараметрВыбора Из СвязиПараметровВыбора Цикл
		Если ПараметрВыбора.Ключ = "Отбор" И ПараметрыПодбора.Свойство(ПараметрВыбора.Ключ) Тогда
			Для Каждого ЭлементОтбора Из ПараметрВыбора.Значение Цикл
				ПараметрыПодбора.Отбор.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			КонецЦикла;
		Иначе
			ПараметрыПодбора.Вставить(ПараметрВыбора.Ключ, ПараметрВыбора.Значение);
		КонецЕсли;
	КонецЦикла;
		
	Возврат ПараметрыПодбора;

КонецФункции

// Формирует параметры для выбора элемента на основании параметров указанных для элемента формы.
//
// Параметры:
//  ЭлементФормы - ПолеФормы - Элемент формы в котором указаны параметры подбора.
//  Форма		 - ФормаКлиентскогоПриложения - Форма на которой расположен элемент. Используется для получения параметров.
// 
// Возвращаемое значение:
//  Структура - параметры подбора.
//
Функция ПараметрыВыбора(ЭлементФормы, Форма) Экспорт

	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("ЗакрыватьПриВыборе", Истина);
	ПараметрыПодбора.Вставить("МножественныйВыбор", Ложь);
	
	ОбщегоНазначенияУТКлиентСервер.ДополнитьПараметрыПодбораПараметрамиВыбора(
		ЭлементФормы.ПараметрыВыбора, ПараметрыПодбора);
		
	СвязиПараметровВыбора = Новый Структура;
	ОбщегоНазначенияУТКлиентСервер.ДополнитьПараметрыПодбораСвязьюПараметровВыбора(
		ЭлементФормы.СвязиПараметровВыбора, Форма, СвязиПараметровВыбора);
	
	Для Каждого ПараметрВыбора Из СвязиПараметровВыбора Цикл
		Если ПараметрВыбора.Ключ = "Отбор" И ПараметрыПодбора.Свойство(ПараметрВыбора.Ключ) Тогда
			Для Каждого ЭлементОтбора Из ПараметрВыбора.Значение Цикл
				ПараметрыПодбора.Отбор.Вставить(ЭлементОтбора.Ключ, ЭлементОтбора.Значение);
			КонецЦикла;
		Иначе
			ПараметрыПодбора.Вставить(ПараметрВыбора.Ключ, ПараметрВыбора.Значение);
		КонецЕсли;
	КонецЦикла;
		
	Возврат ПараметрыПодбора;

КонецФункции

// Определяет в каких учетах учитываются предметы аренды.
// 
// Параметры:
// 	ИспользуетсяУчетАрендыПоФСБУ25_2018 - Булево -
// 	РеквизитыДоговора - Структура - содержит свойства:
// 		* Балансодержатель - ПеречислениеСсылка.БалансодержательПредметовАренды -
// 		* УчитыватьПредметыАрендыВУпрУчете - Булево -
// 		* УчитыватьПредметыАрендыВРеглУчете - Булево -
// 		
// Возвращаемое значение:
// 	Структура - Описание:
// 		* ЕстьУчетУУ - Булево - Истина, если предметы аренды учитываются в упр. учете
// 		* ЕстьУчетБУ - Булево - Истина, если предметы аренды учитываются в бух. учете
// 		* ЕстьУчетНУ - Булево - Истина, если предметы аренды учитываются в налоговом учете
Функция ПараметрыУчетаПредметовАренды(ИспользуетсяУчетАрендыПоФСБУ25_2018, РеквизитыДоговора) Экспорт

	ПараметрыУчетаПредметовАренды = Новый Структура;
	
	ЗначениеПараметра = 
		НЕ ИспользуетсяУчетАрендыПоФСБУ25_2018
			И РеквизитыДоговора.Балансодержатель = ПредопределенноеЗначение("Перечисление.БалансодержательПредметовАренды.Арендатор")
		ИЛИ ИспользуетсяУчетАрендыПоФСБУ25_2018
			И РеквизитыДоговора.УчитыватьПредметыАрендыВУпрУчете = Истина;
	ПараметрыУчетаПредметовАренды.Вставить("ЕстьУчетУУ", ЗначениеПараметра);
	
	ЗначениеПараметра = 
		НЕ ИспользуетсяУчетАрендыПоФСБУ25_2018
			И РеквизитыДоговора.Балансодержатель = ПредопределенноеЗначение("Перечисление.БалансодержательПредметовАренды.Арендатор")
		ИЛИ ИспользуетсяУчетАрендыПоФСБУ25_2018
			И РеквизитыДоговора.УчитыватьПредметыАрендыВРеглУчете = Истина;
	ПараметрыУчетаПредметовАренды.Вставить("ЕстьУчетБУ", ЗначениеПараметра);
	
	ЗначениеПараметра = 
		РеквизитыДоговора.Балансодержатель = ПредопределенноеЗначение("Перечисление.БалансодержательПредметовАренды.Арендатор")
		И РеквизитыДоговора.УчитыватьПредметыАрендыВРеглУчете = Истина;
	ПараметрыУчетаПредметовАренды.Вставить("ЕстьУчетНУ", ЗначениеПараметра);
	
	Возврат ПараметрыУчетаПредметовАренды;
	
КонецФункции

// Форматирует строку в соответствии с заданным шаблоном.
// Возможные значения тегов в шаблоне:
// - <b> Строка </b> - выделяет строку жирным шрифтом.
// - <a href = "Ссылка"> Строка </a> - добавляет гиперссылку.
// Например, "Минимальная версия программы <b>1.1</b>. <a href = "Обновление">Обновите</a> программу.".
//
// Параметры:
//  СтрокаСТегами - Строка - строка, содержащая теги форматирования.
//
// Возвращаемое значение:
//  ФорматированнаяСтрока - преобразованная строка.
//
Функция ФорматированнаяСтрока(Знач СтрокаСТегами) Экспорт
	
	НаборСтрок = Новый Массив;
	
	ТекущийШрифт  = Неопределено;
	ТекущийЦвет   = Неопределено;
	ТекущийФон    = Неопределено;
	ТекущаяСсылка = Неопределено;
	
	ФрагментыСтроки = СтрРазделить(СтрокаСТегами, "<", Истина);
	Для каждого Фрагмент Из ФрагментыСтроки Цикл
		
		ТелоСтроки = "";
		ПозицияТэг = СтрНайти(Фрагмент, ">");
		
		Если ПозицияТэг = 0 Тогда
			ТелоСтроки = Фрагмент;
			
		ИначеЕсли СтрНачинаетсяС(Фрагмент, "/") Тогда
			ТелоСтроки = Сред(Фрагмент, ПозицияТэг + 1);
			
			ТекущийШрифт  = Неопределено;
			ТекущийЦвет   = Неопределено;
			ТекущийФон    = Неопределено;
			ТекущаяСсылка = Неопределено;
			
		Иначе
			
			ОписаниеТэга = Лев(Фрагмент, ПозицияТэг - 1);
			ПервыйПробел = СтрНайти(ОписаниеТэга, " ");
			
			Если ПервыйПробел > 0 Тогда
				ИмяТега = СокрЛП(Лев(ОписаниеТэга, ПервыйПробел));
				
				ОписаниеАтрибутов = Сред(ОписаниеТэга, ПервыйПробел + 1);
				ОписаниеАтрибутов = СтрЗаменить(ОписаниеАтрибутов , """", "'");
				
				ПозицияРавно = СтрНайти(ОписаниеАтрибутов, "=");
				Пока ПозицияРавно > 0 Цикл
					
					ИмяАтрибута = СокрЛП(Лев(ОписаниеАтрибутов, ПозицияРавно - 1));
					ПозицияПерваяКавычка = СтрНайти(ОписаниеАтрибутов, "'",, ПозицияРавно + 1);
					Если ПозицияПерваяКавычка = 0 Тогда
						ПозицияПерваяКавычка = ПозицияРавно;
					КонецЕсли;
					ПозицияВтораяКавычка = СтрНайти(ОписаниеАтрибутов, "'",, ПозицияПерваяКавычка + 1);
					Если ПозицияВтораяКавычка = 0 Тогда
						ПозицияВтораяКавычка = СтрДлина(ОписаниеАтрибутов) + 1;
					КонецЕсли;
					ЗначениеАтрибута  = СокрЛП(Сред(ОписаниеАтрибутов, ПозицияПерваяКавычка + 1,  ПозицияВтораяКавычка - ПозицияПерваяКавычка - 1));
					
					Если СтрСравнить(ИмяАтрибута, "href") = 0 И СтрСравнить(ИмяТега, "a") = 0 Тогда
						ТекущаяСсылка = ЗначениеАтрибута;
					ИначеЕсли СтрСравнить(ИмяАтрибута, "src") = 0 И СтрСравнить(ИмяТега, "img") = 0 Тогда
						НаборСтрок.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок[ЗначениеАтрибута], ТекущийШрифт, ТекущийЦвет, ТекущийФон, ТекущаяСсылка));
					КонецЕсли;
					
					ОписаниеАтрибутов = Сред(ОписаниеАтрибутов, ПозицияВтораяКавычка + 1);
					ПозицияРавно = СтрНайти(ОписаниеАтрибутов, "=");
					
				КонецЦикла;
			Иначе
				ИмяТега = ОписаниеТэга;
			КонецЕсли;
			
			Если ИмяТега = "b" Тогда
				ТекущийШрифт = Новый Шрифт(,, Истина,,,,);
			КонецЕсли;
			
			ТелоСтроки = Сред(Фрагмент, ПозицияТэг + 1);
			
		КонецЕсли;
		
		ТелоСтроки = СтрЗаменить(ТелоСтроки, "&lt;", "<");
		Если СтрДлина(ТелоСтроки) > 0 Тогда
			НаборСтрок.Добавить(Новый ФорматированнаяСтрока(ТелоСтроки, ТекущийШрифт, ТекущийЦвет, ТекущийФон, ТекущаяСсылка));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый ФорматированнаяСтрока(НаборСтрок);
	
КонецФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Заполняет заголовок элемента или скрывает элемент, если заголовок пустой.
// 
// Параметры:
// 	ЭлементФормы - ДекорацияФормы - Элемент формы.
// 	ЗаголовокЭлемента - Массив, Неопределено - Массив строк для формирования заголовка элемента.
Процедура ЗаполнитьСведенияЭлемента(ЭлементФормы, ЗаголовокЭлемента) Экспорт

	Если ЗаголовокЭлемента <> Неопределено И ЗаголовокЭлемента.Количество() <> 0 Тогда
		ЭлементФормы.Заголовок = Новый ФорматированнаяСтрока(ЗаголовокЭлемента);
		ЭлементФормы.Видимость = Истина;
	Иначе
		ЭлементФормы.Видимость = Ложь;
	КонецЕсли; 

КонецПроцедуры

// Добавляет в табличную часть выбранные ОС / НМА.
//
// Параметры:
//  ТабличнаяЧасть		 - ДанныеФормыКоллекция	 - Табличная часть основных средств.
//  ИмяРеквизита		 - Строка				 - Имя реквизита табличной части.
//  ВыбранноеЗначение	 - Массив				 - Выбранные основные средства (параметр события ОбработкаВыбора).
// 
// Возвращаемое значение:
//  Массив - Список добавленных строк.
//
Функция ОбработкаВыбораЭлемента(ТабличнаяЧасть, ИмяРеквизита, ВыбранноеЗначение) Экспорт

	Если ВыбранноеЗначение.Количество() = 0 Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ДобавленныеСтроки = Новый Массив;
	Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
		СтруктураПоиска = Новый Структура(ИмяРеквизита, ЭлементМассива);
		СписокСтрок = ТабличнаяЧасть.НайтиСтроки(СтруктураПоиска);
		Если СписокСтрок.Количество() = 0 Тогда
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			НоваяСтрока[ИмяРеквизита] = ЭлементМассива;
			ДобавленныеСтроки.Добавить(НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДобавленныеСтроки;

КонецФункции

Функция ЗначениеСвойстваРеквизитаОбъекта(ИмяРеквизита, Свойство, ПараметрыРеквизитовОбъекта) Экспорт

	Для каждого ПараметрыРеквизита Из ПараметрыРеквизитовОбъекта Цикл
		Если ПараметрыРеквизита.ИмяРеквизита = ИмяРеквизита И ПараметрыРеквизита.Свойство = Свойство Тогда
			Возврат ПараметрыРеквизита.Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

Процедура УстановитьВидимостьЗначенияСпискаВыбора(СписокВыбора, ЗначениеВидно, ЗначениеЭлемента, ПредставлениеЭлемента = "", Позиция = Неопределено) Экспорт

	ЭлементСписка = СписокВыбора.НайтиПоЗначению(ЗначениеЭлемента);
	
	Если ЗначениеВидно Тогда
		Если ЭлементСписка = Неопределено Тогда
			Если Позиция <> Неопределено Тогда
				СписокВыбора.Вставить(Позиция, ЗначениеЭлемента, ПредставлениеЭлемента);
			Иначе
				СписокВыбора.Добавить(ЗначениеЭлемента, ПредставлениеЭлемента);
			КонецЕсли;
		Иначе
			ЭлементСписка.Представление = ПредставлениеЭлемента;
		КонецЕсли; 
	ИначеЕсли ЭлементСписка <> Неопределено Тогда
		СписокВыбора.Удалить(ЭлементСписка);
	КонецЕсли; 

КонецПроцедуры

Процедура УстановитьПредставлениеЗначенияСпискаВыбора(СписокВыбора, ЗначениеЭлемента, ПредставлениеЭлемента) Экспорт
	
	ЭлементСписка = СписокВыбора.НайтиПоЗначению(ЗначениеЭлемента);
	Если ЭлементСписка <> Неопределено Тогда
		ЭлементСписка.Представление = ПредставлениеЭлемента;
	КонецЕсли;
	
КонецПроцедуры

Функция ПараметрыПринятияКУчетуОС(Объект, ВспомогательныеРеквизиты) Экспорт

	ПараметрыПринятияКУчетуОС = ПараметрыПринятияКУчетуОСИВводаОстатков(Объект, ВспомогательныеРеквизиты);	

	//
	ФактическаяСтоимость =
		Объект.ЧастичныйВводВЭксплуатацию 
		ИЛИ Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.АмортизацияНачислена")
		ИЛИ НЕ ВспомогательныеРеквизиты.ЕстьУчетСебестоимости
		ИЛИ ПринятиеКУчетуОСКлиентСерверЛокализация.ПрименяетсяФактическаяСтоимость(Объект);
		
	//
	СтоимостьУУДоступна = 
		Объект.ОтражатьВУпрУчете 
		И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
			ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
			
	//
	ПараметрыПринятияКУчетуОС.Вставить("ФактическаяСтоимость", ФактическаяСтоимость);
	ПараметрыПринятияКУчетуОС.Вставить("СтоимостьУУДоступна", СтоимостьУУДоступна);
	ПараметрыПринятияКУчетуОС.Вставить("СтоимостьБУДоступна", Истина);
	
	ПринятиеКУчетуОСКлиентСерверЛокализация.ДополнитьПараметрыПринятияКУчетуОС(
		Объект, ВспомогательныеРеквизиты, ПараметрыПринятияКУчетуОС);
	
	Возврат ПараметрыПринятияКУчетуОС;
	
КонецФункции

Функция ПараметрыПринятияКУчетуУзловКомпонентовАмортизации(Объект, ВспомогательныеРеквизиты) Экспорт
	
	ДоступныПараметрыАмортизацииУУ = 
		(Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию")
				ИЛИ Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.АмортизацияНачислена")
				ИЛИ Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.ПустаяСсылка"))
			И ВспомогательныеРеквизиты.ОтражатьВУпрУчете;
	
	ДоступноОтражениеРасходовУУ = 
		ВспомогательныеРеквизиты.ОтражатьВУпрУчете
		И (Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию")
			ИЛИ Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислитьАмортизациюПриПринятииКУчету"));
			
	АмортизацияУУДоступна = 
		(Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию")
				ИЛИ Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислитьАмортизациюПриПринятииКУчету"))
			И ВспомогательныеРеквизиты.ОтражатьВУпрУчете;
							
	
	ПоНаработке = (Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции"));
		
	ПараметрыПринятияКУчету = Новый Структура;
	ПараметрыПринятияКУчету.Вставить("ДоступныПараметрыАмортизацииУУ", ДоступныПараметрыАмортизацииУУ);
	ПараметрыПринятияКУчету.Вставить("ДоступноОтражениеРасходовУУ", ДоступноОтражениеРасходовУУ);
	ПараметрыПринятияКУчету.Вставить("АмортизацияУУДоступна", АмортизацияУУДоступна);
	ПараметрыПринятияКУчету.Вставить("АмортизацияБУДоступна", Ложь);
	ПараметрыПринятияКУчету.Вставить("ПоНаработке", ПоНаработке);
	
	СтоимостьУУДоступна = 
		Объект.ОтражатьВУпрУчете 
		И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
			ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
			
	ПараметрыПринятияКУчету.Вставить("СтоимостьУУДоступна", СтоимостьУУДоступна);
	ПараметрыПринятияКУчету.Вставить("СтоимостьБУДоступна", Истина);
	
	ПринятиеКУчетуУзловКомпонентовАмортизацииКлиентСерверЛокализация.ДополнитьПараметрыПринятияКУчету(
		Объект, ВспомогательныеРеквизиты, ПараметрыПринятияКУчету);
	
	Возврат ПараметрыПринятияКУчету;
	
КонецФункции

Функция ПараметрыПринятияКУчетуНМА(Объект, ВспомогательныеРеквизиты) Экспорт

	ДоступныПараметрыАмортизацииУУ = (Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию")
										ИЛИ Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.ПустаяСсылка"))
									И ВспомогательныеРеквизиты.ОтражатьВУпрУчете;
									
	ДоступноОтражениеРасходовУУ = (Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию")
										ИЛИ Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.СписыватьПриПринятииКУчету")
										ИЛИ Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.ПустаяСсылка"))
									И ВспомогательныеРеквизиты.ОтражатьВУпрУчете;
									
	ПоНаработке = 
		ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию")
			И Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции");
				
	ПараметрыПринятияКУчетуНМА = Новый Структура;
	ПараметрыПринятияКУчетуНМА.Вставить("ДоступныПараметрыАмортизацииУУ", ДоступныПараметрыАмортизацииУУ);
	ПараметрыПринятияКУчетуНМА.Вставить("ДоступноОтражениеРасходовУУ", ДоступноОтражениеРасходовУУ);
	ПараметрыПринятияКУчетуНМА.Вставить("ПоНаработке", ПоНаработке);
	ПараметрыПринятияКУчетуНМА.Вставить("ПоИнвентаризации", Ложь);
	ПараметрыПринятияКУчетуНМА.Вставить("НаправлениеДеятельностиОбязательно", Ложь);
	ПараметрыПринятияКУчетуНМА.Вставить("АмортизацияБУДоступна", Ложь);
	
	ПринятиеКУчетуНМАКлиентСерверЛокализация.ДополнитьПараметрыПринятияКУчетуНМА(Объект, ВспомогательныеРеквизиты, ПараметрыПринятияКУчетуНМА);
	
	Возврат ПараметрыПринятияКУчетуНМА;

КонецФункции

Функция ПараметрыВводаОстатковОС(Объект, ВспомогательныеРеквизиты) Экспорт

	ПараметрыВводаОстатковОС = ПараметрыПринятияКУчетуОСИВводаОстатков(Объект, ВспомогательныеРеквизиты);
	
	ПараметрыВводаОстатковОС.Вставить("ДоступныПараметрыУчета", ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
	
	ВводОстатковВнеоборотныхАктивовКлиентСерверЛокализация.ДополнитьПараметрыВводаОстатковОС(
		Объект, ВспомогательныеРеквизиты, ПараметрыВводаОстатковОС);

	Возврат ПараметрыВводаОстатковОС;

КонецФункции

Функция ПараметрыВводаОстатковНМА(Объект, ВспомогательныеРеквизиты) Экспорт
	
	ПараметрыВводаОстатковНМА = ПараметрыПринятияКУчетуНМА(Объект, ВспомогательныеРеквизиты);
	
	ВводОстатковВнеоборотныхАктивовКлиентСерверЛокализация.ДополнитьПараметрыВводаОстатковНМА(
		Объект, ВспомогательныеРеквизиты, ПараметрыВводаОстатковНМА);
	
	Возврат ПараметрыВводаОстатковНМА;

КонецФункции

Функция ПараметрыОбъединенияОС(Объект, ВспомогательныеРеквизиты) Экспорт

	ПараметрыОбъединенияОС = ПараметрыПринятияКУчетуОСИВводаОстатков(Объект, ВспомогательныеРеквизиты);	
	
	Возврат ПараметрыОбъединенияОС;
	
КонецФункции

Функция ПараметрыВыкупаОС(Объект, ВспомогательныеРеквизиты) Экспорт

	ПараметрыВыкупаОС = Новый Структура;
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьПараметрыВыкупаОС(Объект, ВспомогательныеРеквизиты, ПараметрыВыкупаОС);
	
	Возврат ПараметрыВыкупаОС;
	
КонецФункции

Функция ЗаполнитьРеквизитыВЗависимостиОтСвойств_ОбъединениеОС(Объект, ПараметрыРеквизитовОбъекта) Экспорт

	ИзмененныеРеквизиты = Новый Массив;
	
	Для каждого ПараметрыРеквизита Из ПараметрыРеквизитовОбъекта Цикл
		
		Если НЕ ЗначениеЗаполнено(ПараметрыРеквизита.ИмяРеквизита)
			ИЛИ СтрРазделить(ПараметрыРеквизита.ИмяРеквизита, ".").ВГраница() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Действие = ОчиститьИлиЗаполнить(Объект, ПараметрыРеквизита);
		
		Если НЕ ЗначениеЗаполнено(Действие) Тогда
			Продолжить;
		КонецЕсли;
		
		#Область СтраницаУчет
		
		Если ПараметрыРеквизита.ИмяРеквизита = "НачислятьАмортизациюУУ" Тогда
			Объект[ПараметрыРеквизита.ИмяРеквизита] = ?(Действие = "Заполнить", Истина, Ложь);
			ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "ПорядокУчетаУУ"
			И Действие = "Заполнить" Тогда
			Объект[ПараметрыРеквизита.ИмяРеквизита] = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию");
			ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "МетодНачисленияАмортизацииУУ"
			И Действие = "Заполнить" Тогда
			Объект[ПараметрыРеквизита.ИмяРеквизита] = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный");
			ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
		КонецЕсли;
		
		#КонецОбласти
		
		#Область СтраницаОтражениеРасходов
		
		Если ПараметрыРеквизита.ИмяРеквизита = "СтатьяРасходовУУ" Тогда
			Если Действие = "Очистить" Тогда
				Объект.СтатьяРасходовУУ = Неопределено;
				Объект.АналитикаРасходовУУ = Неопределено;
				ИзмененныеРеквизиты.Добавить("СтатьяРасходовУУ");
				ИзмененныеРеквизиты.Добавить("АналитикаРасходовУУ");
			КонецЕсли;
		КонецЕсли;
		
		#КонецОбласти
		
		ВнеоборотныеАктивыКлиентСерверЛокализация.ЗаполнитьРеквизитыВЗависимостиОтСвойств_ОбъединениеОС(
			Объект, ПараметрыРеквизита, Действие, ИзмененныеРеквизиты);
		
	КонецЦикла; 
	
	Возврат СтрСоединить(ИзмененныеРеквизиты, ",");
	
КонецФункции

// Устанавливает видимость элемента.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - 
// 	ИмяЭлемента - Строка -
// 	ИменаРеквизитовДанныеФлаг - Структура -
// 	ИмяТЧ - Строка -
// 	СтруктураИзмененныхРеквизитов- Структура - 
Процедура УстановитьВидимостьТекущегоЗначенияПараметраПриИзмененииПараметров(Форма, ИмяЭлемента, ИменаРеквизитовДанныеФлаг, ИмяТЧ, СтруктураИзмененныхРеквизитов) Экспорт

	Если СтруктураИзмененныхРеквизитов.Количество() = 0 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПоказатьТекущиеЗначения") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство(ИменаРеквизитовДанныеФлаг.ИмяРеквизитаФлаг) Тогда
			
		ЭлементФормы = Форма.Элементы[?(ИмяЭлемента = Неопределено, ИмяТЧ + ИменаРеквизитовДанныеФлаг.ИмяРеквизита, ИмяЭлемента)];
		ЭлементФормы.Видимость = Форма.Объект[ИменаРеквизитовДанныеФлаг.ИмяРеквизитаФлаг] И Форма.ПоказатьТекущиеЗначения;
			
	КонецЕсли;

КонецПроцедуры

Функция ИменаРеквизитовДанныеФлаг(ИмяРеквизита, ИмяРеквизитаФлаг) Экспорт
	
	ИментаРеквизитовДанныеФлаг = Новый Структура;
	ИментаРеквизитовДанныеФлаг.Вставить("ИмяРеквизита", ИмяРеквизита);
	ИментаРеквизитовДанныеФлаг.Вставить("ИмяРеквизитаФлаг", ИмяРеквизитаФлаг);
	
	Возврат ИментаРеквизитовДанныеФлаг; 
	
КонецФункции

#Область ОпределениеСвойствЗависимыхРеквизитовОбъекта

// 
// Параметры:
//  Объект - ДокументОбъект.ПринятиеКУчетуОС2_4, ДанныеФормыСтруктура - 
// 	ВспомогательныеРеквизиты - Структура - 
// 	ИзмененныеРеквизиты - Строка - список измененных реквизитов.
// 	
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.НовыйПараметрРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ПринятиеКУчетуОС(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	ПараметрыПринятияКУчетуОС = ПараметрыПринятияКУчетуОС(Объект, ВспомогательныеРеквизиты);
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_ПринятиеКУчетуОС(
		Объект, ВспомогательныеРеквизиты, ПараметрыПринятияКУчетуОС, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	#Область Основное
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОС")
										И ВспомогательныеРеквизиты.ИспользоватьОбъектыСтроительства);
										
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ВидАналитикиКапитализацииРасходов", 
			"ВидАналитикиРасходовОсновныеСредства", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ВидАналитикиКапитализацииРасходов", 
			"ВидАналитикиРасходовОбъектыСтроительства", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъектСтроительства", 
			"ОбъектСтроительства", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЧастичныйВводВЭксплуатацию", 
			"ЧастичныйВводВЭксплуатацию", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);

		//
		ЗначениеСвойства = (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуПредметовАренды"));
										
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Договор", 
			"Договор", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ВидАналитикиКапитализацииРасходов")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОС")
							ИЛИ Объект.ВидАналитикиКапитализацииРасходов <> ПредопределенноеЗначение("Перечисление.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства");
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЧастичныйВводВЭксплуатацию", 
			"ЧастичныйВводВЭксплуатацию", 
			"ТолькоПросмотр", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ВидАналитикиКапитализацииРасходов")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = (Объект.ВидАналитикиКапитализацииРасходов <> ПредопределенноеЗначение("Перечисление.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства"));
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъектСтроительства", 
			"ОбъектСтроительства", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ВариантПримененияЦелевогоФинансирования")
		ИЛИ ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НаправлениеДеятельности", 
			"НаправлениеДеятельности", 
			"АвтоОтметкаНезаполненного", 
			ПараметрыПринятияКУчетуОС.НаправлениеДеятельностиОбязательно, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли; 
	
	#КонецОбласти
	
	#Область ОС
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ПараметрыПринятияКУчетуОС.СтоимостьУУДоступна;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СтоимостьУУ", 
			"", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства = НЕ ВспомогательныеРеквизиты.ВалютыСовпадают;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОСЛиквидационнаяСтоимость", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
				
	Если СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииБУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ") 
		ИЛИ ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.ПоказательНаработки", 
			"ОСПоказательНаработки", 
			"Видимость", 
			ПараметрыПринятияКУчетуОС.ПоНаработке, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОСПоказательНаработкиЕдиницаИзмерения", 
			"Видимость", 
			ПараметрыПринятияКУчетуОС.ПоНаработке, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.ОбъемНаработки", 
			"ОСОбъемНаработки", 
			"Видимость", 
			ПараметрыПринятияКУчетуОС.ПоНаработке, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПараметрыУчета
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПорядокУчетаУУ", 
			"ПорядокУчетаУУ", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"Видимость", 
			ПараметрыПринятияКУчетуОС.ДоступныПараметрыАмортизацииУУ, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"СрокИспользованияУУРасшифровка", 
			"Видимость", 
			ПараметрыПринятияКУчетуОС.ДоступныПараметрыАмортизацииУУ, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НачислятьАмортизациюУУ", 
			"НачислятьАмортизациюУУ", 
			"Видимость", 
			ПараметрыПринятияКУчетуОС.ДоступныПараметрыАмортизацииУУ, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"МетодНачисленияАмортизацииУУ", 
			"МетодНачисленияАмортизацииУУ", 
			"Видимость", 
			ПараметрыПринятияКУчетуОС.ДоступныПараметрыАмортизацииУУ, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ПараметрыПринятияКУчетуОС.ДоступныПараметрыАмортизацииУУ
							И (Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный")
								ИЛИ Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка"));
							
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
											
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = (ПараметрыПринятияКУчетуОС.ДоступныПараметрыАмортизацииУУ
							И Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка"));
							
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"КоэффициентУскоренияУУ", 
			"КоэффициентУскоренияУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
											
	КонецЕсли;
		
	#КонецОбласти
	
	#Область ОтражениеРасходов
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ПараметрыПринятияКУчетуОС.ДоступноОтражениеРасходовУУ
			ИЛИ Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НеПриниматьКУчетуВключитьВРасходы");
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовУУ", 
			"СтатьяРасходовУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаРасходовУУ", 
			"АналитикаРасходовУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
		
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
//  Объект - ДокументОбъект.ПринятиеКУчетуУзловКомпонентовАмортизации, ДанныеФормыСтруктура - 
// 	ВспомогательныеРеквизиты - Структура - 
// 	ИзмененныеРеквизиты - Строка - список измененных реквизитов.
// 	
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.НовыйПараметрРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ПринятиеКУчетуУзловКомпонентовАмортизации(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	ПараметрыПринятияКУчету = ПараметрыПринятияКУчетуУзловКомпонентовАмортизации(Объект, ВспомогательныеРеквизиты);
	
	Если ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НаправлениеДеятельности", 
			"НаправлениеДеятельности", 
			"АвтоОтметкаНезаполненного", 
			Ложь, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли; 

	#Область КомпонентыАмортизации
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ПараметрыПринятияКУчету.СтоимостьУУДоступна;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"КомпонентыАмортизации.СтоимостьУУ", 
			"", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства = НЕ ВспомогательныеРеквизиты.ВалютыСовпадают;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"КомпонентыАмортизацииЛиквидационнаяСтоимость", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
				
	Если СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииБУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ") 
		ИЛИ ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"КомпонентыАмортизации.ПоказательНаработки", 
			"КомпонентыАмортизацииПоказательНаработки", 
			"Видимость", 
			ПараметрыПринятияКУчету.ПоНаработке, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"КомпонентыАмортизацииПоказательНаработкиЕдиницаИзмерения", 
			"Видимость", 
			ПараметрыПринятияКУчету.ПоНаработке, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"КомпонентыАмортизации.ОбъемНаработки", 
			"КомпонентыАмортизацииОбъемНаработки", 
			"Видимость", 
			ПараметрыПринятияКУчету.ПоНаработке, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПараметрыУчета
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПорядокУчетаУУ", 
			"ПорядокУчетаУУ", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"Видимость", 
			ПараметрыПринятияКУчету.ДоступныПараметрыАмортизацииУУ, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"СрокИспользованияУУРасшифровка", 
			"Видимость", 
			ПараметрыПринятияКУчету.ДоступныПараметрыАмортизацииУУ, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НачислятьАмортизациюУУ", 
			"НачислятьАмортизациюУУ", 
			"Видимость", 
			ПараметрыПринятияКУчету.ДоступныПараметрыАмортизацииУУ, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"МетодНачисленияАмортизацииУУ", 
			"МетодНачисленияАмортизацииУУ", 
			"Видимость", 
			ПараметрыПринятияКУчету.ДоступныПараметрыАмортизацииУУ, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ПараметрыПринятияКУчету.ДоступныПараметрыАмортизацииУУ
							И (Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный")
								ИЛИ Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка"));
							
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
											
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = (ПараметрыПринятияКУчету.ДоступныПараметрыАмортизацииУУ
							И Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка"));
							
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"КоэффициентУскоренияУУ", 
			"КоэффициентУскоренияУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
											
	КонецЕсли;
		
	#КонецОбласти
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_ПринятиеКУчетуУзловКомпонентовАмортизации(
		Объект, ВспомогательныеРеквизиты, ПараметрыПринятияКУчету, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
//  Объект - ДокументОбъект.СписаниеОС2_4, ДанныеФормыСтруктура - 
// 	ВспомогательныеРеквизиты - Структура - 
// 	ИзмененныеРеквизиты - Строка - список измененных реквизитов.
// 	
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.НовыйПараметрРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_СписаниеОС(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.ОтражатьВРеглУчете 
			И Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеОСЧастичное");
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СуммаСписанияБУ", 
			"", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.ОтражатьВУпрУчете 
			И Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеОСЧастичное")
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СуммаСписанияУУ", 
			"ОССуммаСписанияУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОсновноеСредство")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = Объект.ОС.Количество() > 1;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ПриходуемыеМЦОсновноеСредство", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПриходуемыеМЦ.ОсновноеСредство", 
			"ПриходуемыеМЦОсновноеСредство", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация")
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства = 
			Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеОСЧастичное");
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.ЛиквидационнаяСтоимостьРегл", 
			"ОСЛиквидационнаяСтоимостьРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		//
		ЗначениеСвойства = 
			Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеОСЧастичное")
			И НЕ ВспомогательныеРеквизиты.ВалютыСовпадают;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.ЛиквидационнаяСтоимость", 
			"ОСЛиквидационнаяСтоимость", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
		
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_СписаниеОС(
		Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
//  Объект - ДокументОбъект.ИзменениеПараметровОС2_4, ДанныеФормыСтруктура - 
// 	ВспомогательныеРеквизиты - Структура - 
// 	ИзмененныеРеквизиты - Строка - список измененных реквизитов.
// 	
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.НовыйПараметрРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ИзменениеПараметровОС(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
		
	#Область Учет
	
	Если СтруктураИзмененныхРеквизитов.Свойство("НачислятьАмортизациюУУФлаг")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НачислятьАмортизациюУУ", 
			"НачислятьАмортизациюУУ", 
			"ТолькоПросмотр", 
			НЕ Объект.НачислятьАмортизациюУУФлаг, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НачислятьАмортизациюУУ", 
			"НачислятьАмортизациюУУ", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НачислятьАмортизациюУУФлаг",
			"НачислятьАмортизациюУУФлаг",
			"Видимость",
			Объект.ОтражатьВУпрУчете,
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУФлаг")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"МетодНачисленияАмортизацииУУ", 
			"МетодНачисленияАмортизацииУУ", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			НЕ Объект.МетодНачисленияАмортизацииУУФлаг, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"МетодНачисленияАмортизацииУУ", 
			"МетодНачисленияАмортизацииУУ", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"МетодНачисленияАмортизацииУУФлаг", 
			"МетодНачисленияАмортизацииУУФлаг", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("СрокИспользованияУУФлаг")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			НЕ Объект.СрокИспользованияУУФлаг, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУФлаг", 
			"СрокИспользованияУУФлаг", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"СрокИспользованияУУРасшифровка", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"УказанОстаточныйСрокУУ", 
			"УказанОстаточныйСрокУУ", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			НЕ Объект.СрокИспользованияУУФлаг, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"УказанОстаточныйСрокУУ", 
			"УказанОстаточныйСрокУУ", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("КоэффициентУскоренияУУФлаг")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"КоэффициентУскоренияУУ", 
			"КоэффициентУскоренияУУ", 
			"ТолькоПросмотр", 
			НЕ Объект.КоэффициентУскоренияУУФлаг, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"КоэффициентУскоренияУУ", 
			"КоэффициентУскоренияУУ", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"КоэффициентУскоренияУУФлаг", 
			"КоэффициентУскоренияУУФлаг", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ЛиквидационнаяСтоимостьФлаг")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = НЕ Объект.ЛиквидационнаяСтоимостьФлаг;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимость", 
			"ЛиквидационнаяСтоимость", 
			"ТолькоПросмотр", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
			
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства = НЕ ВспомогательныеРеквизиты.ВалютыСовпадают;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимость", 
			"ЛиквидационнаяСтоимость", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимостьФлаг", 
			"ЛиквидационнаяСтоимостьФлаг", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ЛиквидационнаяСтоимостьРеглФлаг")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = НЕ Объект.ЛиквидационнаяСтоимостьРеглФлаг;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимостьРегл", 
			"ЛиквидационнаяСтоимостьРегл", 
			"ТолькоПросмотр", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = Объект.ОтражатьВУпрУчете ИЛИ Объект.ОтражатьВБУ И Объект.ОтражатьВНУ;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГруппаФинансовогоУчета", 
			"ГруппаФинансовогоУчета", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГруппаФинансовогоУчетаФлаг", 
			"ГруппаФинансовогоУчетаФлаг", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НаправлениеДеятельности", 
			"НаправлениеДеятельности", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НаправлениеДеятельностиФлаг", 
			"НаправлениеДеятельностиФлаг", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = Объект.ОтражатьВУпрУчете ИЛИ Объект.ОтражатьВБУ;

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПоказательНаработки", 
			"ПоказательНаработки", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПоказательНаработкиФлаг", 
			"ПоказательНаработкиФлаг", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъемНаработки", 
			"ОбъемНаработки", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъемНаработкиФлаг", 
			"ОбъемНаработкиФлаг", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ГруппаФинансовогоУчетаФлаг")
		ИЛИ ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГруппаФинансовогоУчета", 
			"ГруппаФинансовогоУчета", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			НЕ Объект.ГруппаФинансовогоУчетаФлаг, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("НаправлениеДеятельностиФлаг")
		ИЛИ ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НаправлениеДеятельности",
			"НаправлениеДеятельности",
			"ТолькоПросмотр", 
			НЕ Объект.НаправлениеДеятельностиФлаг,
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПоказательНаработкиФлаг")
		ИЛИ ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПоказательНаработки",
			"ПоказательНаработки",
			"ТолькоПросмотрБезОтметкиНезаполненного",
			НЕ Объект.ПоказательНаработкиФлаг,
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОбъемНаработкиФлаг")
		ИЛИ ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъемНаработки",
			"ОбъемНаработки",
			"ТолькоПросмотрБезОтметкиНезаполненного",
			НЕ Объект.ОбъемНаработкиФлаг, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	// При изменении параметров только в налоговом учете, изменение ЕГДС не имеет смысла.
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		Если (Объект.ОтражатьВБУ = Ложь И Объект.ОтражатьВУпрУчете = Ложь)
			 И (Объект.ОтражатьВНУ И Объект.ОтражатьВРеглУчете) Тогда // Изменение параметров только в налоговом учете.
			 	ВидимостьЕГДС = Ложь;
		Иначе 														// Все прочие варианты изменения параметров.
				ВидимостьЕГДС = Истина;
		КонецЕсли;

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЕГДС",
			"ЕГДС",
			"Видимость",
			ВидимостьЕГДС,
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЕГДСФлаг",
			"ЕГДСФлаг",
			"Видимость",
			ВидимостьЕГДС,
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Амортизация
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражениеАмортизационныхРасходовФлаг")
		ИЛИ ОбновитьВсе Тогда
	
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Амортизация",
			"Амортизация",
			"ТолькоПросмотрБезОтметкиНезаполненного",
			НЕ Объект.ОтражениеАмортизационныхРасходовФлаг, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	#КонецОбласти
		
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_ИзменениеПараметровОС(
		Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;

КонецФункции

// 
// Параметры:
//  Объект - ДокументОбъект.МодернизацияОС2_4, ДанныеФормыСтруктура - 
// 	ВспомогательныеРеквизиты - Структура - 
// 	ИзмененныеРеквизиты - Строка - список измененных реквизитов.
// 	
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.НовыйПараметрРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_МодернизацияОС(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	#Область Основное
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ВидАналитикиКапитализацииРасходов")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = (Объект.ВидАналитикиКапитализацииРасходов <> ПредопределенноеЗначение("Перечисление.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства"));
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъектСтроительства", 
			"ОбъектСтроительства", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЧастичнаяМодернизация", 
			"ЧастичнаяМодернизация", 
			"ТолькоПросмотр", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если ОбновитьВсе Тогда
		
		ЗначениеСвойства = ВспомогательныеРеквизиты.ИспользоватьОбъектыСтроительства;
										
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ВидАналитикиКапитализацииРасходов", 
			"ВидАналитикиРасходовОсновныеСредства", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ВидАналитикиКапитализацииРасходов", 
			"ВидАналитикиРасходовОбъектыСтроительства", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъектСтроительства", 
			"ОбъектСтроительства", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЧастичнаяМодернизация", 
			"ЧастичнаяМодернизация", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ВариантПримененияЦелевогоФинансирования")
		ИЛИ ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НаправлениеДеятельности", 
			"НаправлениеДеятельности", 
			"Видимость", 
			ВспомогательныеРеквизиты.НаправлениеДеятельностиОбязательно, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли; 
	
	#КонецОбласти
	
	#Область ОС
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.ОтражатьВУпрУчете
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СтоимостьУУ", 
			"ОССтоимостьУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	#КонецОбласти
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_МодернизацияОС(
		Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;

КонецФункции

// 
// Параметры:
//  Объект - ДокументОбъект.ПереоценкаОС2_4, ДанныеФормыСтруктура - 
// 	ВспомогательныеРеквизиты - Структура - 
// 	ИзмененныеРеквизиты - Строка - список измененных реквизитов.
// 	
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.НовыйПараметрРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ПереоценкаОС(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.ОтражатьВУпрУчете
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СтоимостьУУ", 
			"ОССтоимостьУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_ПереоценкаОС(
		Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
//  Объект - ДокументОбъект.РазукомплектацияОС, ДанныеФормыСтруктура - 
// 	ВспомогательныеРеквизиты - Структура - 
// 	ИзмененныеРеквизиты - Строка - список измененных реквизитов.
// 	
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.НовыйПараметрРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_РазукомплектацияОС(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете 
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтоимостьУУ", 
			"СтоимостьУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
			
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства = НЕ ВспомогательныеРеквизиты.ВалютыСовпадают;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ЛиквидационнаяСтоимость", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И ВспомогательныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыделениеУзловКомпонентовАмортизации");
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"МетодНачисленияАмортизацииУУ", 
			"МетодНачисленияАмортизацииУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства =  ВспомогательныеРеквизиты.ОтражатьВУпрУчете
					И (Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный")
					ИЛИ Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка"))
					И ВспомогательныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыделениеУзловКомпонентовАмортизации");
							
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"СрокИспользованияУУРасшифровка", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ЗначениеСвойства = ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка")
			И ВспомогательныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыделениеУзловКомпонентовАмортизации");
	
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"КоэффициентУскоренияУУ",
			"КоэффициентУскоренияУУ",
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
	
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииБУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства =
			Объект.МетодНачисленияАмортизацииБУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции")
			ИЛИ Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции")
			И ВспомогательныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыделениеУзловКомпонентовАмортизации");
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПоказательНаработки", 
			"ПоказательНаработки", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъемНаработки", 
			"ОбъемНаработки", 
			"Видимость", 
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если ОбновитьВсе Тогда
		
		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВыделениеУзловКомпонентовАмортизации");
	
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГруппаФинансовогоУчета",
			"ГруппаФинансовогоУчета",
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
	
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГрафикАмортизации",
			"ГрафикАмортизации",
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
	
	КонецЕсли;
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_РазукомплектацияОС(
		Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
//  Объект - ДокументОбъект.ВводОстатковВнеоборотныхАктивов2_4, ДанныеФормыСтруктура - 
// 	ВспомогательныеРеквизиты - Структура - 
// 	ИзмененныеРеквизиты - Строка - список измененных реквизитов.
// 	
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.НовыйПараметрРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ВводОстатков(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	ПараметрыРеквизитовОбъекта = Неопределено;
	
	Если ВспомогательныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковОсновныхСредств")
		ИЛИ ВспомогательныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуОС")
		ИЛИ ВспомогательныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуПредметовЛизингаНаБалансе")
		ИЛИ ВспомогательныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАрендованныхОСНаБалансе") Тогда
		
		ПараметрыРеквизитовОбъекта = ЗначенияСвойствЗависимыхРеквизитов_ВводОстатков_ОС(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты);
		
	ИначеЕсли ВспомогательныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковНМАиРасходовНаНИОКР") Тогда
		
		ПараметрыРеквизитовОбъекта = ЗначенияСвойствЗависимыхРеквизитов_ВводОстатков_НМА(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты);
		
	ИначеЕсли ВспомогательныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковВзаиморасчетовПоДоговорамАренды") Тогда
		
		ПараметрыРеквизитовОбъекта = ЗначенияСвойствЗависимыхРеквизитов_ВводОстатков_РасчетыПоАренде(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты);
		
	КонецЕсли;
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
//  Объект - ДокументОбъект.ПринятиеКУчетуНМА2_4, ДанныеФормыСтруктура - 
// 	ВспомогательныеРеквизиты - Структура - 
// 	ИзмененныеРеквизиты - Строка - список измененных реквизитов.
// 	
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.НовыйПараметрРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ПринятиеКУчетуНМА(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	ПараметрыПринятияКУчетуНМА = ПараметрыПринятияКУчетуНМА(Объект, ВспомогательныеРеквизиты);
		
	#Область Основное
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете") 
		Или ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.ОтражатьВУпрУчете
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПервоначальнаяСтоимостьУУ", 
			"ПервоначальнаяСтоимостьУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимость", 
			"ЛиквидационнаяСтоимость", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//	
		ЗначениеСвойства = Объект.ОтражатьВУпрУчете И НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимостьРегл", 
			"ЛиквидационнаяСтоимостьРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ВариантПримененияЦелевогоФинансирования") 
		Или ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НаправлениеДеятельности", 
			"НаправлениеДеятельности", 
			"АвтоОтметкаНезаполненного", 
			ПараметрыПринятияКУчетуНМА.НаправлениеДеятельностиОбязательно, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПараметрыУчета
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете") 
		Или ОбновитьВсе Тогда
		
		ЗначениеСвойства = Объект.ОтражатьВУпрУчете;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПорядокУчетаУУ", 
			"ПорядокУчетаУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		Или СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		Или ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"МетодНачисленияАмортизацииУУ", 
			"МетодНачисленияАмортизацииУУ", 
			"Видимость", 
			ПараметрыПринятияКУчетуНМА.ДоступныПараметрыАмортизацииУУ, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"Видимость", 
			ПараметрыПринятияКУчетуНМА.ДоступныПараметрыАмортизацииУУ, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ПараметрыПринятияКУчетуНМА.ДоступныПараметрыАмортизацииУУ
							И (Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.Линейный")
								ИЛИ Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка"));
							
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
											
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		Или СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		Или СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		Или ОбновитьВсе Тогда
		
		ЗначениеСвойства = Объект.ОтражатьВУпрУчете
			И Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию")
			И Объект.МетодНачисленияАмортизацииУУ =
				ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка");
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"КоэффициентУскоренияУУ", 
			"КоэффициентУскоренияУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		Или СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		Или СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		Или СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		Или СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ")
		Или СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииБУ")
		Или СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		Или ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъемНаработки", 
			"ОбъемНаработки", 
			"Видимость", 
			ПараметрыПринятияКУчетуНМА.ПоНаработке, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтражениеРасходов
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовУУ", 
			"СтатьяРасходовУУ", 
			"Видимость", 
			ПараметрыПринятияКУчетуНМА.ДоступноОтражениеРасходовУУ, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаРасходовУУ", 
			"АналитикаРасходовУУ", 
			"Видимость", 
			ПараметрыПринятияКУчетуНМА.ДоступноОтражениеРасходовУУ, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	#КонецОбласти
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_ПринятиеКУчетуНМА(
		Объект, ПараметрыПринятияКУчетуНМА, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
//  Объект - ДокументОбъект.СписаниеНМА2_4, ДанныеФормыСтруктура - 
// 	ВспомогательныеРеквизиты - Структура - 
// 	ИзмененныеРеквизиты - Строка - список измененных реквизитов.
// 	
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.НовыйПараметрРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_СписаниеНМА(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		Или СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация")
		Или ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.ОтражатьВУпрУчете 
			И Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеНМАЧастичное")
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НМА.СуммаСписанияУУ", 
			"НМАСуммаСписанияУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		Или СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация")
		Или ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.ОтражатьВРеглУчете 
			И Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.СписаниеНМАЧастичное");
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НМА.СуммаСписанияБУ", 
			"НМАСуммаСписанияБУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_СписаниеНМА(
		Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
//  Объект - ДокументОбъект.ПереоценкаНМА2_4, ДанныеФормыСтруктура - 
// 	ВспомогательныеРеквизиты - Структура - 
// 	ИзмененныеРеквизиты - Строка - список измененных реквизитов.
// 	
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.НовыйПараметрРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ПереоценкаНМА(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		Или ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.ОтражатьВУпрУчете
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НМА.СтоимостьУУ", 
			"НМАСтоимостьУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		Или ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НМА.СтоимостьБУ", 
			"НМАСтоимостьБУ", 
			"Видимость", 
			Объект.ОтражатьВРеглУчете, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
		
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
//  Объект - ДокументОбъект.ПеремещениеНМА2_4, ДанныеФормыСтруктура - 
// 	ИзмененныеРеквизиты - Строка - список измененных реквизитов.
// 	
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.НовыйПараметрРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ПеремещениеНМА(Объект, ИзмененныеРеквизиты = "") Экспорт
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_ПеремещениеНМА(
		Объект, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
//  Объект - ДокументОбъект.ИзменениеПараметровНМА2_4, ДанныеФормыСтруктура - 
// 	ВспомогательныеРеквизиты - Структура - 
// 	ИзмененныеРеквизиты - Строка - список измененных реквизитов.
// 	
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.НовыйПараметрРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ИзменениеПараметровНМА(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	#Область СтраницаОсновное
	
	Если ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДокументОснование", 
			"ДокументОснование", 
			"Видимость", 
			ЗначениеЗаполнено(Объект.ДокументОснование), 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СтраницаУчет
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете") 
		Или ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПорядокУчета", 
			"ПорядокУчета", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПорядокУчетаФлаг", 
			"ПорядокУчетаФлаг", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
			
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаФлаг") 
		Или ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПорядокУчета", 
			"ПорядокУчета", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			НЕ Объект.ПорядокУчетаФлаг, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
		
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете") 
		Или ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.ОтражатьВУпрУчете
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимость", 
			"ЛиквидационнаяСтоимость", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимостьФлаг", 
			"ЛиквидационнаяСтоимостьФлаг", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ЛиквидационнаяСтоимостьФлаг") 
		Или ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимость", 
			"ЛиквидационнаяСтоимость", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			НЕ Объект.ЛиквидационнаяСтоимостьФлаг, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
			
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете") 
		Или ОбновитьВсе Тогда
		
		ЗначениеСвойства = Объект.ОтражатьВУпрУчете И НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимостьРегл", 
			"ЛиквидационнаяСтоимостьРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимостьРеглФлаг", 
			"ЛиквидационнаяСтоимостьРеглФлаг", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете") 
		Или ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимостьРегл", 
			"ЛиквидационнаяСтоимостьРегл", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			НЕ Объект.ЛиквидационнаяСтоимостьРеглФлаг, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
		
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете") 
		Или ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"МетодНачисленияАмортизацииУУ", 
			"МетодНачисленияАмортизацииУУ", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"МетодНачисленияАмортизацииУУФлаг", 
			"МетодНачисленияАмортизацииУУФлаг", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУФлаг") 
		Или ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"МетодНачисленияАмортизацииУУ", 
			"МетодНачисленияАмортизацииУУ", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			НЕ Объект.МетодНачисленияАмортизацииУУФлаг, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете") 
		Или ОбновитьВсе Тогда

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУФлаг", 
			"СрокИспользованияУУФлаг", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"СрокИспользованияУУРасшифровка", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("СрокИспользованияУУФлаг") 
		Или ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			НЕ Объект.СрокИспользованияУУФлаг, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
			
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете") 
		Или ОбновитьВсе Тогда

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"КоэффициентУскоренияУУ", 
			"КоэффициентУскоренияУУ", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"КоэффициентУскоренияУУФлаг", 
			"КоэффициентУскоренияУУФлаг", 
			"Видимость", 
			Объект.ОтражатьВУпрУчете, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
		
	Если СтруктураИзмененныхРеквизитов.Свойство("КоэффициентУскоренияУУФлаг") 
		Или ОбновитьВсе Тогда

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"КоэффициентУскоренияУУ", 
			"КоэффициентУскоренияУУ", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			НЕ Объект.КоэффициентУскоренияУУФлаг, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете") 
		Или СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете") 
		Или ОбновитьВсе Тогда
		
		ЗначениеСвойства = Объект.ОтражатьВУпрУчете ИЛИ Объект.ОтражатьВБУ И Объект.ОтражатьВНУ;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГруппаФинансовогоУчета", 
			"ГруппаФинансовогоУчета", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГруппаФинансовогоУчетаФлаг", 
			"ГруппаФинансовогоУчетаФлаг", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НаправлениеДеятельности", 
			"НаправлениеДеятельности", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НаправлениеДеятельностиФлаг", 
			"НаправлениеДеятельностиФлаг", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
	
		//
		ЗначениеСвойства = Объект.ОтражатьВУпрУчете ИЛИ Объект.ОтражатьВБУ;

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъемНаработки", 
			"ОбъемНаработки", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъемНаработкиФлаг", 
			"ОбъемНаработкиФлаг", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ГруппаФинансовогоУчетаФлаг")
		Или ОбновитьВсе Тогда

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГруппаФинансовогоУчета",
			"ГруппаФинансовогоУчета",
			"ТолькоПросмотрБезОтметкиНезаполненного",
			НЕ Объект.ГруппаФинансовогоУчетаФлаг, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОбъемНаработкиФлаг")
		Или ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъемНаработки",
			"ОбъемНаработки",
			"ТолькоПросмотрБезОтметкиНезаполненного",
			НЕ Объект.ОбъемНаработкиФлаг,
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("НаправлениеДеятельностиФлаг")
		Или ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НаправлениеДеятельности",
			"НаправлениеДеятельности",
			"ТолькоПросмотр",
			НЕ Объект.НаправлениеДеятельностиФлаг,
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	// При изменении параметров только в налоговом учете, изменение ЕГДС не имеет смысла.
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		Если (Объект.ОтражатьВБУ = Ложь И Объект.ОтражатьВУпрУчете = Ложь)
			 И (Объект.ОтражатьВНУ И Объект.ОтражатьВРеглУчете) Тогда // Изменение параметров только в налоговом учете.
			 	ВидимостьЕГДС = Ложь;
		Иначе 														// Все прочие варианты изменения параметров.
				ВидимостьЕГДС = Истина;
		КонецЕсли;

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЕГДС",
			"ЕГДС",
			"Видимость",
			ВидимостьЕГДС,
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЕГДСФлаг",
			"ЕГДСФлаг",
			"Видимость",
			ВидимостьЕГДС,
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	#КонецОбласти
	
	#Область Амортизация
	
	Если СтруктураИзмененныхРеквизитов.Свойство("АмортизационныеРасходыФлаг")
		ИЛИ ОбновитьВсе Тогда
	
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АмортизационныеРасходы", 
			"АмортизационныеРасходы", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			НЕ Объект.АмортизационныеРасходыФлаг, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	#КонецОбласти
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_ИзменениеПараметровНМА(
		Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
		
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
//  Объект - ДокументОбъект.РеализацияУслугПрочихАктивов, ДанныеФормыСтруктура - 
// 	ВспомогательныеРеквизиты - Структура - 
// 	ИзмененныеРеквизиты - Строка - список измененных реквизитов.
// 	
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.НовыйПараметрРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_РеализацияУслугПрочихАктивов(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_РеализацияУслугПрочихАктивов(
		Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
		
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
//  Объект - ДокументОбъект.ОбъединениеОС, ДанныеФормыСтруктура - 
// 	ВспомогательныеРеквизиты - Структура - 
// 	ИзмененныеРеквизиты - Строка - список измененных реквизитов.
// 	
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.НовыйПараметрРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ОбъединениеОС(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	ПараметрыОбъединенияОС = ПараметрыОбъединенияОС(Объект, ВспомогательныеРеквизиты);
	
	#Область Основное
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОбъединениеОС"));
										
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъединениеОднотипныхОС", 
			"ОбъединениеОднотипныхОС", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЕГДС", 
			"ЕГДС", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ПараметрыУчета
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОбъединениеОднотипныхОС")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОбъединениеОС") 
			И НЕ Объект.ОбъединениеОднотипныхОС;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГруппаФинансовогоУчета", 
			"ГруппаФинансовогоУчета", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОбъединениеОднотипныхОС")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.ОтражатьВУпрУчете 
			И НЕ Объект.ОбъединениеОднотипныхОС;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПорядокУчетаУУ", 
			"ПорядокУчетаУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОбъединениеОднотипныхОС")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОсновноеСредство")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ПараметрыОбъединенияОС.ДоступныПараметрыАмортизацииУУ 
			И НЕ Объект.ОбъединениеОднотипныхОС;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"СрокИспользованияУУРасшифровка", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НачислятьАмортизациюУУ", 
			"НачислятьАмортизациюУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"МетодНачисленияАмортизацииУУ", 
			"МетодНачисленияАмортизацииУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОбъединениеОднотипныхОС")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОсновноеСредство")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ПараметрыОбъединенияОС.ДоступныПараметрыАмортизацииУУ
							И НЕ Объект.ОбъединениеОднотипныхОС
							И (Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный")
								ИЛИ Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка"));
							
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
											
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОбъединениеОднотипныхОС")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОсновноеСредство")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ПараметрыОбъединенияОС.ДоступныПараметрыАмортизацииУУ
							И НЕ Объект.ОбъединениеОднотипныхОС
							И Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка");
							
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"КоэффициентУскоренияУУ", 
			"КоэффициентУскоренияУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
											
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииБУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОбъединениеОднотипныхОС")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ПараметрыОбъединенияОС.ПоНаработке
							И НЕ Объект.ОбъединениеОднотипныхОС;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПоказательНаработки", 
			"ПоказательНаработки", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ПоказательНаработкиЕдиницаИзмерения", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъемНаработки", 
			"ОбъемНаработки", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОбъединениеОднотипныхОС")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОсновноеСредство")
		ИЛИ ОбновитьВсе Тогда
		    
		ЗначениеСвойства = 
			Объект.ОтражатьВУпрУчете
			И Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОбъединениеОС")
			И (НЕ Объект.ОбъединениеОднотипныхОС 
					И ПараметрыОбъединенияОС.ДоступныПараметрыАмортизацииУУ
					И Объект.МетодНачисленияАмортизацииУУ <> ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции")
				ИЛИ Объект.ОбъединениеОднотипныхОС
					И НЕ ВспомогательныеРеквизиты.ПоНаработкеУУ
					И ВспомогательныеРеквизиты.ДоступныПараметрыАмортизацииУУ);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияОстаточныйУУ",
			"",
			"Видимость",
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			Объект.ОтражатьВУпрУчете
			И Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОбъединениеОС")
			И НЕ Объект.ОбъединениеОднотипныхОС 
			И ПараметрыОбъединенияОС.ДоступныПараметрыАмортизацииУУ
			И Объект.МетодНачисленияАмортизацииУУ <> ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции");
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"",
			"СрокИспользованияОстаточныйУУ",
			"Видимость",
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"",
			"СрокИспользованияОстаточныйУУРасшифровка",
			"Видимость",
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			Объект.ОтражатьВУпрУчете
			И Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОбъединениеОС")
			И Объект.ОбъединениеОднотипныхОС 
			И ВспомогательныеРеквизиты.ДоступныПараметрыАмортизацииУУ
			И НЕ ВспомогательныеРеквизиты.ПоНаработкеУУ;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"",
			"СрокИспользованияОстаточныйУУ_ОбъединениеОднотипныхОС",
			"Видимость",
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"",
			"СрокИспользованияОстаточныйУУРасшифровка_ОбъединениеОднотипныхОС",
			"Видимость",
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОбъединениеОС")
			И (НЕ Объект.ОбъединениеОднотипныхОС 
					И ПараметрыОбъединенияОС.ПоНаработке
					И (ПараметрыОбъединенияОС.ДоступныПараметрыАмортизацииУУ ИЛИ ПараметрыОбъединенияОС.ДоступныПараметрыАмортизацииБУ)
				ИЛИ Объект.ОбъединениеОднотипныхОС
					И (ВспомогательныеРеквизиты.ДоступныПараметрыАмортизацииУУ ИЛИ ВспомогательныеРеквизиты.ДоступныПараметрыАмортизацииБУ)
					И (ВспомогательныеРеквизиты.ПоНаработкеУУ ИЛИ ВспомогательныеРеквизиты.ПоНаработкеБУ));
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъемНаработкиОстаточный",
			"",
			"Видимость",
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
	
		//
		ЗначениеСвойства = 
			Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОбъединениеОС")
			И НЕ Объект.ОбъединениеОднотипныхОС 
			И (ПараметрыОбъединенияОС.ДоступныПараметрыАмортизацииУУ ИЛИ ПараметрыОбъединенияОС.ДоступныПараметрыАмортизацииБУ)
			И ПараметрыОбъединенияОС.ПоНаработке;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"",
			"ОбъемНаработкиОстаточный",
			"Видимость",
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
	
		//
		ЗначениеСвойства = 
			Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОбъединениеОС")
			И Объект.ОбъединениеОднотипныхОС 
			И (ВспомогательныеРеквизиты.ДоступныПараметрыАмортизацииУУ ИЛИ ВспомогательныеРеквизиты.ДоступныПараметрыАмортизацииБУ)
			И (ВспомогательныеРеквизиты.ПоНаработкеУУ ИЛИ ВспомогательныеРеквизиты.ПоНаработкеБУ);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"",
			"ОбъемНаработкиОстаточный_ОбъединениеОднотипныхОС",
			"Видимость",
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
	
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОбъединениеОднотипныхОС")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОбъединениеОС")
			И НЕ Объект.ОбъединениеОднотипныхОС
			И НЕ ВспомогательныеРеквизиты.ВалютыСовпадают;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ЛиквидационнаяСтоимость", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ЛиквидационнаяСтоимостьВалюта", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
			
	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОбъединениеОднотипныхОС")
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства =
			Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОбъединениеОС") 
			И НЕ Объект.ОбъединениеОднотипныхОС;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимостьРегл", 
			"ЛиквидационнаяСтоимостьРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ЛиквидационнаяСтоимостьРеглВалюта", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОбъединениеОднотипныхОС")
		ИЛИ ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НаправлениеДеятельности", 
			"НаправлениеДеятельности", 
			"Видимость", 
			НЕ Объект.ОбъединениеОднотипныхОС, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;

	Если ОбновитьВсе Тогда
		
		Если НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА Тогда
			ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
				"НаправлениеДеятельности", 
				"НаправлениеДеятельности", 
				"АвтоотметкаНезаполненного", 
				Ложь, 
				ПараметрыРеквизитовОбъекта);
		КонецЕсли; 
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтражениеРасходов
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОбъединениеОднотипныхОС")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ПараметрыОбъединенияОС.ДоступноОтражениеРасходовУУ
							И НЕ Объект.ОбъединениеОднотипныхОС;
							
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовУУ", 
			"СтатьяРасходовУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаРасходовУУ", 
			"АналитикаРасходовУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаНУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СтатьяРасходовБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОбъединениеОднотипныхОС")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ПараметрыОбъединенияОС.СтатьяРасходовУУОбязательна
							И НЕ Объект.ОбъединениеОднотипныхОС;
							
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовУУ", 
			"СтатьяРасходовУУ", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОсновноеСредство") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.ОтражатьВРеглУчете
			И Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ОбъединениеОС")
			И ВспомогательныеРеквизиты.ИспользуетсяЦФ;
							
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяДоходов", 
			"СтатьяДоходов", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаДоходов", 
			"АналитикаДоходов", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	#КонецОбласти
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_ОбъединениеОС(
		Объект, ВспомогательныеРеквизиты, ПараметрыОбъединенияОС, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
//  Объект - ДокументОбъект.КорректировкаСтоимостиИАмортизацииОС, ДанныеФормыСтруктура - 
// 	ВспомогательныеРеквизиты - Структура - 
// 	ИзмененныеРеквизиты - Строка - список измененных реквизитов.
// 	
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.НовыйПараметрРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_КорректировкаСтоимостиИАмортизацииОС(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	#Область СтраницаОсновное
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ДокументОснование")
		ИЛИ ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДокументОснование", 
			"ДокументОснование", 
			"Видимость", 
			ЗначениеЗаполнено(Объект.ДокументОснование), 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
		
	#Область СтраницаОС
	
	#Область УУ
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ВидИмущества")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ ОбновитьВсе Тогда
		
		СтоимостьИАмортизацияУУДоступна = 
			Объект.ОтражатьВУпрУчете 
			И Объект.ВидИмущества = ПредопределенноеЗначение("Перечисление.ВидыИмущества.Собственное")
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
					И НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СтоимостьУУ", 
			"", 
			"Видимость", 
			СтоимостьИАмортизацияУУДоступна, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.АмортизацияУУ", 
			"", 
			"Видимость", 
			СтоимостьИАмортизацияУУДоступна, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.ПервоначальнаяСтоимостьУУ", 
			"", 
			"Видимость", 
			СтоимостьИАмортизацияУУДоступна, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ПоказатьПолеОтдельно = 
			НЕ Объект.ОтражатьВРеглУчете
			ИЛИ НЕ ВспомогательныеРеквизиты.ПлательщикНалогаНаПрибыль
			ИЛИ НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОССтоимостьУУ", 
			"Видимость", 
			СтоимостьИАмортизацияУУДоступна И НЕ ПоказатьПолеОтдельно, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОССтоимостьУУ_Отдельно", 
			"Видимость", 
			СтоимостьИАмортизацияУУДоступна И ПоказатьПолеОтдельно, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОСАмортизацияУУ", 
			"Видимость", 
			СтоимостьИАмортизацияУУДоступна И НЕ ПоказатьПолеОтдельно, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОСАмортизацияУУ_Отдельно", 
			"Видимость", 
			СтоимостьИАмортизацияУУДоступна И ПоказатьПолеОтдельно, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОСПервоначальнаяСтоимостьУУ", 
			"Видимость", 
			СтоимостьИАмортизацияУУДоступна И НЕ ПоказатьПолеОтдельно, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОСПервоначальнаяСтоимостьУУ_Отдельно", 
			"Видимость", 
			СтоимостьИАмортизацияУУДоступна И ПоказатьПолеОтдельно, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СтоимостьДляВычисленияАмортизацииУУ", 
			"", 
			"Видимость", 
			СтоимостьИАмортизацияУУДоступна, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			СтоимостьИАмортизацияУУДоступна
			И (ВспомогательныеРеквизиты.ПорядокУчетаВНА = ПредопределенноеЗначение("Перечисление.ПорядокУчетаВНА.ПоСтандартамРегл")
				ИЛИ НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
					И НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОССтоимостьДляВычисленияАмортизацииУУ", 
			"Видимость", 
			ЗначениеСвойства И НЕ ПоказатьПолеОтдельно, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОССтоимостьДляВычисленияАмортизацииУУ_Отдельно", 
			"Видимость", 
			ЗначениеСвойства И ПоказатьПолеОтдельно, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	#КонецОбласти
	
	#Область БУ
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ВидИмущества")
		ИЛИ ОбновитьВсе Тогда
		
		СтоимостьИАмортизацияБУДоступна = 
			Объект.ОтражатьВРеглУчете
			И Объект.ВидИмущества = ПредопределенноеЗначение("Перечисление.ВидыИмущества.Собственное");
										
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СтоимостьБУ", 
			"", 
			"Видимость", 
			СтоимостьИАмортизацияБУДоступна, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.АмортизацияБУ", 
			"", 
			"Видимость", 
			СтоимостьИАмортизацияБУДоступна, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.ПервоначальнаяСтоимостьБУ", 
			"", 
			"Видимость", 
			СтоимостьИАмортизацияБУДоступна, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СтоимостьДляВычисленияАмортизацииБУ", 
			"", 
			"Видимость", 
			СтоимостьИАмортизацияБУДоступна, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОССтоимостьБУ", 
			"ОтметкаНезаполненного", 
			НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА И СтоимостьИАмортизацияБУДоступна, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ПоказатьПолеОтдельно = 
			НЕ ВспомогательныеРеквизиты.ПлательщикНалогаНаПрибыль
			ИЛИ НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОССтоимостьБУ", 
			"Видимость", 
			СтоимостьИАмортизацияБУДоступна И НЕ ПоказатьПолеОтдельно, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОСАмортизацияБУ", 
			"Видимость", 
			СтоимостьИАмортизацияБУДоступна И НЕ ПоказатьПолеОтдельно, 
			ПараметрыРеквизитовОбъекта);
										
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОСПервоначальнаяСтоимостьБУ", 
			"Видимость", 
			СтоимостьИАмортизацияБУДоступна И НЕ ПоказатьПолеОтдельно, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОССтоимостьБУ_Отдельно", 
			"Видимость", 
			СтоимостьИАмортизацияБУДоступна И ПоказатьПолеОтдельно, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОСАмортизацияБУ_Отдельно", 
			"Видимость", 
			СтоимостьИАмортизацияБУДоступна И ПоказатьПолеОтдельно, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОСПервоначальнаяСтоимостьБУ_Отдельно", 
			"Видимость", 
			СтоимостьИАмортизацияБУДоступна И ПоказатьПолеОтдельно, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОССтоимостьДляВычисленияАмортизацииБУ", 
			"Видимость", 
			СтоимостьИАмортизацияБУДоступна И НЕ ПоказатьПолеОтдельно, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОССтоимостьДляВычисленияАмортизацииБУ_Отдельно", 
			"Видимость", 
			СтоимостьИАмортизацияБУДоступна И ПоказатьПолеОтдельно, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;

	#КонецОбласти
	
	#КонецОбласти
		
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_КорректировкаСтоимостиИАмортизацииОС(
		Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;

КонецФункции

// 
// Параметры:
//  Объект - ДокументОбъект.КорректировкаСтоимостиИАмортизацииНМА, ДанныеФормыСтруктура - 
// 	ВспомогательныеРеквизиты - Структура - 
// 	ИзмененныеРеквизиты - Строка - список измененных реквизитов.
// 	
// Возвращаемое значение:
// 	Массив из см. НовыйПараметрРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_КорректировкаСтоимостиИАмортизацииНМА(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	ЭтоНМА = (Объект.ВидОбъектовУчета = ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.НематериальныйАктив"));
	
	#Область СтраницаОсновное
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ДокументОснование")
		ИЛИ ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДокументОснование", 
			"ДокументОснование", 
			"Видимость", 
			ЗначениеЗаполнено(Объект.ДокументОснование), 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
		
	#Область СтраницаНМА
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ВидОбъектовУчета")
		ИЛИ ОбновитьВсе Тогда
		
		#Область УУ
		
		СтоимостьИАмортизацияУУДоступна = 
			Объект.ОтражатьВУпрУчете 
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
					И НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НМА.СтоимостьУУ", 
			"", 
			"Видимость", 
			СтоимостьИАмортизацияУУДоступна, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НМА.ПервоначальнаяСтоимостьУУ", 
			"", 
			"Видимость", 
			СтоимостьИАмортизацияУУДоступна, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НМА.АмортизацияУУ", 
			"", 
			"Видимость", 
			СтоимостьИАмортизацияУУДоступна И ЭтоНМА, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ПоказатьПолеОтдельно = 
			НЕ Объект.ОтражатьВРеглУчете
			ИЛИ НЕ ВспомогательныеРеквизиты.ПлательщикНалогаНаПрибыль
			ИЛИ НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"НМАСтоимостьУУ", 
			"Видимость", 
			СтоимостьИАмортизацияУУДоступна И НЕ ПоказатьПолеОтдельно, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"НМАПервоначальнаяСтоимостьУУ", 
			"Видимость", 
			СтоимостьИАмортизацияУУДоступна И НЕ ПоказатьПолеОтдельно, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"НМАСтоимостьУУ_Отдельно", 
			"Видимость", 
			СтоимостьИАмортизацияУУДоступна И ПоказатьПолеОтдельно, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"НМАПервоначальнаяСтоимостьУУ_Отдельно", 
			"Видимость", 
			СтоимостьИАмортизацияУУДоступна И ПоказатьПолеОтдельно, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"НМААмортизацияУУ", 
			"Видимость", 
			СтоимостьИАмортизацияУУДоступна И НЕ ПоказатьПолеОтдельно И ЭтоНМА, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"НМААмортизацияУУ_Отдельно", 
			"Видимость", 
			СтоимостьИАмортизацияУУДоступна И ПоказатьПолеОтдельно И ЭтоНМА, 
			ПараметрыРеквизитовОбъекта);
			
		#КонецОбласти
		
	#Область БУ
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ВидОбъектовУчета")
		ИЛИ ОбновитьВсе Тогда
		
		СтоимостьИАмортизацияБУДоступна = 
			Объект.ОтражатьВРеглУчете;
										
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НМА.СтоимостьБУ", 
			"", 
			"Видимость", 
			СтоимостьИАмортизацияБУДоступна, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НМА.ПервоначальнаяСтоимостьБУ", 
			"", 
			"Видимость", 
			СтоимостьИАмортизацияБУДоступна, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НМА.АмортизацияБУ", 
			"", 
			"Видимость", 
			СтоимостьИАмортизацияБУДоступна И ЭтоНМА, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"НМАСтоимостьБУ", 
			"ОтметкаНезаполненного", 
			НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА И СтоимостьИАмортизацияБУДоступна, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ПоказатьПолеОтдельно = 
			НЕ ВспомогательныеРеквизиты.ПлательщикНалогаНаПрибыль
			ИЛИ НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"НМАСтоимостьБУ", 
			"Видимость", 
			СтоимостьИАмортизацияБУДоступна И НЕ ПоказатьПолеОтдельно, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"НМАПервоначальнаяСтоимостьБУ", 
			"Видимость", 
			СтоимостьИАмортизацияБУДоступна И НЕ ПоказатьПолеОтдельно, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"НМААмортизацияБУ", 
			"Видимость", 
			СтоимостьИАмортизацияБУДоступна И НЕ ПоказатьПолеОтдельно И ЭтоНМА, 
			ПараметрыРеквизитовОбъекта);
										
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"НМАСтоимостьБУ_Отдельно", 
			"Видимость", 
			СтоимостьИАмортизацияБУДоступна И ПоказатьПолеОтдельно, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"НМАПервоначальнаяСтоимостьБУ_Отдельно", 
			"Видимость", 
			СтоимостьИАмортизацияБУДоступна И ПоказатьПолеОтдельно, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"НМААмортизацияБУ_Отдельно", 
			"Видимость", 
			СтоимостьИАмортизацияБУДоступна И ПоказатьПолеОтдельно И ЭтоНМА, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;

	#КонецОбласти
			
	КонецЕсли;
	
	#КонецОбласти
		
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_КорректировкаСтоимостиИАмортизацииНМА(
		Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;

КонецФункции

// 
// Параметры:
//  Объект - СправочникОбъект.ДоговорыАренды, ДанныеФормыСтруктура - 
// 	ВспомогательныеРеквизиты - Структура - содержит свойства:
// 			* ИспользуетсяУчетАрендыПоФСБУ25_2018 - Булево -
// 	ИзмененныеРеквизиты - Строка - список измененных реквизитов.
// 	
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.НовыйПараметрРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ДоговорыАренды(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	ЭтоДоговорЛизинга = (Объект.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Лизинг"));
	
	ОтразитьУслугиВРасходах =
		Объект.Балансодержатель = ПредопределенноеЗначение("Перечисление.БалансодержательПредметовАренды.Арендодатель")
		ИЛИ ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
			И НЕ Объект.УчитыватьПредметыАрендыВРеглУчете
		ИЛИ ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
			И НЕ Объект.УчитыватьПредметыАрендыВУпрУчете;

	#Область СтраницаОсновное
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДатаНачалаДействия")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДатаОкончанияДействия")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ТипДоговора", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);

	КонецЕсли;

	#КонецОбласти
	
	#Область СтраницаПараметрыДоговора
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДатаНачалаДействия")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДатаОкончанияДействия")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ТипДоговора")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Балансодержатель")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ЭтоДоговорЛизинга
			И (ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
				ИЛИ Объект.Балансодержатель = ПредопределенноеЗначение("Перечисление.БалансодержательПредметовАренды.Арендатор"));
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЕстьВыкупПредметовАренды", 
			"ЕстьВыкупПредметовАренды", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ТипДоговора")
		ИЛИ ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"Балансодержатель", 
			"ВидимостьЭлемента", 
			ЭтоДоговорЛизинга, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ВариантОтраженияВУчетеВсе", 
			"ВидимостьЭлемента", 
			НЕ ЭтоДоговорЛизинга, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ВариантОтраженияВУчетеРегл", 
			"ВидимостьЭлемента", 
			НЕ ЭтоДоговорЛизинга, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ВариантОтраженияВУчетеУпр", 
			"ВидимостьЭлемента", 
			НЕ ЭтоДоговорЛизинга, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"СпособОпределенияСтоимостиАктивовДисконтирование", 
			"ВидимостьЭлемента", 
			НЕ ЭтоДоговорЛизинга, 
			ПараметрыРеквизитовОбъекта);

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"СпособОпределенияСтоимостиАктивовПоФактическойСтоимости", 
			"ВидимостьЭлемента", 
			НЕ ЭтоДоговорЛизинга, 
			ПараметрыРеквизитовОбъекта);

	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДатаНачалаДействия")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДатаОкончанияДействия")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ТипДоговора")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ЕстьВыкупПредметовАренды")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Балансодержатель")
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства = 
			Объект.ЕстьВыкупПредметовАренды
			И ЭтоДоговорЛизинга
			И (ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
				ИЛИ Объект.Балансодержатель = ПредопределенноеЗначение("Перечисление.БалансодержательПредметовАренды.Арендатор"));
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЕстьАвансированиеВыкупнойСтоимости", 
			"ЕстьАвансированиеВыкупнойСтоимости", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;

	#КонецОбласти
	
	#Область СтраницаУчетнаяИнформация
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Статус")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Балансодержатель")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("УчитыватьПредметыАрендыВРеглУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("УчитыватьПредметыАрендыВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ОтразитьУслугиВРасходах;

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовУслуги", 
			"СтатьяРасходовУслуги", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаРасходовУслуги", 
			"АналитикаРасходовУслуги", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПодразделениеУслуги", 
			"ПодразделениеУслуги", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДатаНачалаДействия")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДатаОкончанияДействия")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Статус")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовПроценты", 
			"СтатьяРасходовПроценты", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаРасходовПроценты", 
			"АналитикаРасходовПроценты", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПодразделениеПроценты", 
			"ПодразделениеПроценты", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		//	
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
			И (Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.Действует")
				ИЛИ Объект.Статус = ПредопределенноеЗначение("Перечисление.СтатусыДоговоровКонтрагентов.Закрыт"));
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовПроценты", 
			"СтатьяРасходовПроценты", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
//  Объект - ДокументОбъект.ПередачаОСВАренду2_4, ДанныеФормыСтруктура - 
// 	ВспомогательныеРеквизиты - Структура - содержит свойства:
// 			* ИспользуетсяУчетАрендыПоФСБУ25_2018 - Булево -
// 	ИзмененныеРеквизиты - Строка - список измененных реквизитов.
// 	
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.НовыйПараметрРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ПередачаОСВАренду(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = НЕ ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;
		 
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"РасчетыМеждуОрганизациямиАрендатор", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
		
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("РасчетыМеждуОрганизациямиАрендатор")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства =
			НЕ Объект.РасчетыМеждуОрганизациямиАрендатор 
			ИЛИ ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;
		 
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Договор", 
			"Договор", 
			"Видимость", 
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("РасчетыМеждуОрганизациямиАрендатор") 
		ИЛИ ОбновитьВсе Тогда
		
		АрендаторОрганизация = 
			Объект.РасчетыМеждуОрганизациямиАрендатор
			И НЕ ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;
		
		ТипСсылкаКонтрагенты = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		ТипСсылкаОрганизации = Новый ОписаниеТипов("СправочникСсылка.Организации");
		ТипАрендатора = ?(АрендаторОрганизация, ТипСсылкаОрганизации, ТипСсылкаКонтрагенты);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Арендатор", 
			"Арендатор", 
			"ОграничениеТипа", 
			ТипАрендатора, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПодразделениеАрендатора", 
			"ПодразделениеАрендатора", 
			"Видимость", 
			АрендаторОрганизация, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"МОЛАрендатора", 
			"МОЛАрендатора", 
			"Видимость", 
			АрендаторОрганизация, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АдресМестонахождения", 
			"АдресМестонахождения", 
			"Видимость", 
			АрендаторОрганизация, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("НачислениеАмортизацииБУ") 
		ИЛИ ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовБУ", 
			"СтатьяРасходовБУ", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			Объект.НачислениеАмортизацииБУ <> ПредопределенноеЗначение("Перечисление.ВариантыИзмененияНачисленияАмортизации.Действует"), 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаРасходовБУ", 
			"АналитикаРасходовБУ", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			Объект.НачислениеАмортизацииБУ <> ПредопределенноеЗначение("Перечисление.ВариантыИзмененияНачисленияАмортизации.Действует"), 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("НачислениеАмортизацииУУ") 
		ИЛИ ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовУУ", 
			"СтатьяРасходовУУ", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			Объект.НачислениеАмортизацииУУ <> ПредопределенноеЗначение("Перечисление.ВариантыИзмененияНачисленияАмортизации.Действует"), 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаРасходовУУ", 
			"АналитикаРасходовУУ", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			Объект.НачислениеАмортизацииУУ <> ПредопределенноеЗначение("Перечисление.ВариантыИзмененияНачисленияАмортизации.Действует"), 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
//  Объект - ДокументОбъект.ВозвратОСИзАренды2_4, ДанныеФормыСтруктура - 
// 	ВспомогательныеРеквизиты - Структура - содержит свойства:
// 			* ИспользуетсяУчетАрендыПоФСБУ25_2018 - Булево -
// 	ИзмененныеРеквизиты - Строка - список измененных реквизитов.
// 	
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.НовыйПараметрРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ВозвратОСИзАренды(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = НЕ ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;
		 
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"РасчетыМеждуОрганизациямиАрендатор", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("РасчетыМеждуОрганизациямиАрендатор")
		ИЛИ ОбновитьВсе Тогда
		
		АрендаторОрганизация = Объект.РасчетыМеждуОрганизациямиАрендатор;
		
		ТипСсылкаКонтрагенты = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		ТипСсылкаОрганизации = Новый ОписаниеТипов("СправочникСсылка.Организации");
		ТипАрендатора = ?(АрендаторОрганизация, ТипСсылкаОрганизации, ТипСсылкаКонтрагенты);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Арендатор", 
			"Арендатор", 
			"ОграничениеТипа", 
			ТипАрендатора, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("НачислениеАмортизацииБУ") 
		ИЛИ ОбновитьВсе Тогда

		ЗначениеСвойства = Объект.НачислениеАмортизацииБУ <> ПредопределенноеЗначение("Перечисление.ВариантыИзмененияНачисленияАмортизации.Действует");
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовБУ", 
			"СтатьяРасходовБУ", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаРасходовБУ", 
			"АналитикаРасходовБУ", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("НачислениеАмортизацииУУ") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = Объект.НачислениеАмортизацииУУ <> ПредопределенноеЗначение("Перечисление.ВариантыИзмененияНачисленияАмортизации.Действует");
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовУУ", 
			"СтатьяРасходовУУ", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаРасходовУУ", 
			"АналитикаРасходовУУ", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
//  Объект - ДокументОбъект.ВыкупАрендованныхОС, ДанныеФормыСтруктура - 
// 	ВспомогательныеРеквизиты - Структура - содержит свойства:
// 			* ИспользуетсяУчетАрендыПоФСБУ25_2018 - Булево -
// 	ИзмененныеРеквизиты - Строка - список измененных реквизитов.
// 			
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.НовыйПараметрРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ВыкупАрендованныхОС(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ПараметрыВыкупаОС = ПараметрыВыкупаОС(Объект, ВспомогательныеРеквизиты);
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_ВыкупАрендованныхОС(
		Объект, ВспомогательныеРеквизиты, ПараметрыВыкупаОС, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
// 	Объект - ДокументОбъект.ВводОстатковВзаиморасчетовПоАренде - 
// 	ВспомогательныеРеквизиты - Структура - 
// 	ИзмененныеРеквизиты - Строка - 
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ВводОстатковВзаиморасчетовПоАренде(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	РеквизитыДоговора = ВспомогательныеРеквизиты.РеквизитыДоговора;
	
	УчетЗаБалансом = 
		РеквизитыДоговора.Балансодержатель = ПредопределенноеЗначение("Перечисление.БалансодержательПредметовАренды.Арендодатель")
		И НЕ ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;

	ПоФактическойСтоимости = (РеквизитыДоговора.СпособОпределенияСтоимостиАктивов = ПредопределенноеЗначение("Перечисление.СпособыОпределенияСтоимостиПредметовАренды.ПоФактическойСтоимости"));

	#Область СтраницаОстаткиРасчетов
	
	#Область АрендныеОбязательства
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВБУиНУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			НЕ УчетЗаБалансом
			И (ВспомогательныеРеквизиты.ОтражатьВБУиНУ
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АрендныеОбязательстваОстаток", 
			"АрендныеОбязательстваОстаток", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АрендныеОбязательстваОстатокРегл", 
			"АрендныеОбязательстваОстатокРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			НЕ УчетЗаБалансом
			И (ВспомогательныеРеквизиты.ОтражатьВУУ 
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АрендныеОбязательстваОстатокУпр", 
			"АрендныеОбязательстваОстатокУпр", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область УслугиПоАренде
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВБУиНУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") 
		ИЛИ ОбновитьВсе Тогда
	
		ЗначениеСвойства = 
			(ВспомогательныеРеквизиты.ОтражатьВБУиНУ 
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
				
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"УслугаПоАрендеОстаток", 
			"УслугаПоАрендеОстаток", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"УслугаПоАрендеОстатокРегл", 
			"УслугаПоАрендеОстатокРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			(ВспомогательныеРеквизиты.ОтражатьВУУ 
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"УслугаПоАрендеОстатокУпр", 
			"УслугаПоАрендеОстатокУпр", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	#КонецОбласти
	
	#Область ВыкупнаяСтоимость
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВБУиНУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор") 
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства = 
			НЕ УчетЗаБалансом
			И РеквизитыДоговора.ЕстьВыкупПредметовАренды
			И (ВспомогательныеРеквизиты.ОтражатьВБУиНУ 
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ВыкупнаяСтоимостьОстаток", 
			"ВыкупнаяСтоимостьОстаток", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ВыкупнаяСтоимостьОстатокРегл", 
			"ВыкупнаяСтоимостьОстатокРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			НЕ УчетЗаБалансом
			И РеквизитыДоговора.ЕстьВыкупПредметовАренды
			И (ВспомогательныеРеквизиты.ОтражатьВУУ 
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ВыкупнаяСтоимостьОстатокУпр", 
			"ВыкупнаяСтоимостьОстатокУпр", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
		
	#КонецОбласти

	#Область НДС
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВБУиНУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор") 
		ИЛИ ОбновитьВсе Тогда

		ЗначениеСвойства = 
			НЕ УчетЗаБалансом
			И (ВспомогательныеРеквизиты.ОтражатьВБУиНУ 
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
	
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НДСОстаток", 
			"НДСОстаток", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НДСОстатокРегл", 
			"НДСОстатокРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			НЕ УчетЗаБалансом
			И (ВспомогательныеРеквизиты.ОтражатьВУУ 
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НДСОстатокУпр", 
			"НДСОстатокУпр", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	#КонецОбласти
	
	#Область Проценты
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВБУиНУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор") 
		ИЛИ ОбновитьВсе Тогда
	
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
			И (ВспомогательныеРеквизиты.ОтражатьВБУиНУ 
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПроцентыОстаток", 
			"ПроцентыОстаток", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПроцентыОстатокРегл", 
			"ПроцентыОстатокРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
			И (ВспомогательныеРеквизиты.ОтражатьВУУ 
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПроцентыОстатокУпр", 
			"ПроцентыОстатокУпр", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	#КонецОбласти
	
	#КонецОбласти
	
	#Область СтраницаДисконтирование
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
			И НЕ (РеквизитыДоговора.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Аренда")
					И ПоФактическойСтоимости);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Стоимость", 
			"Стоимость", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
		
	#КонецОбласти
	
	#Область СтраницаДополнительно
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда

		ЗначениеСвойства =
			ВспомогательныеРеквизиты.РаздельныйУчетВНАПоНалогообложениюНДС
			И ВспомогательныеРеквизиты.ОтражатьВОперативномУчете 
			И НЕ УчетЗаБалансом;
	
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НалогообложениеНДС", 
			"НалогообложениеНДС", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
	
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЗакупкаПодДеятельность", 
			"ЗакупкаПодДеятельность", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	ДополнитьЗначенияСвойствЗависимыхРеквизитов_Аренда(
		Объект, 
		ВспомогательныеРеквизиты, 
		СтруктураИзмененныхРеквизитов, 
		ПараметрыРеквизитовОбъекта);
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_ВводОстатковВзаиморасчетовПоАренде(
		Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
// 	Объект - ДокументОбъект.ЗаключениеДоговораАренды - 
// 	ВспомогательныеРеквизиты - Структура - 
// 	ИзмененныеРеквизиты - Строка - 
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ЗаключениеДоговораАренды(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	РеквизитыДоговора = ВспомогательныеРеквизиты.РеквизитыДоговора;
	
	УчетЗаБалансом = 
		РеквизитыДоговора.Балансодержатель = ПредопределенноеЗначение("Перечисление.БалансодержательПредметовАренды.Арендодатель")
		И НЕ ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;

	СозданДляПерехода = (КонецДня(Объект.Дата) + 1 = ВспомогательныеРеквизиты.НачалоУчетаАрендыПоФСБУ25_2018);
	
	#Область СтраницаОсновное
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда

		ЗначениеСвойства = 
			НЕ ВспомогательныеРеквизиты.ИспользуетсяУправлениеВНА_2_4
			И УчетЗаБалансом;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СчетУчета", 
			"СчетУчета", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ИспользуетсяУправлениеВНА_2_4
			И УчетЗаБалансом;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГруппаФинансовогоУчета", 
			"ГруппаФинансовогоУчета", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = СозданДляПерехода;

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяДоходов", 
			"СтатьяДоходов", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаДоходов", 
			"АналитикаДоходов", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходов", 
			"СтатьяРасходов", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаРасходов", 
			"АналитикаРасходов", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;

	#КонецОбласти
	
	#Область СтраницаРасчетыПоДоговору
	
	Если СтруктураИзмененныхРеквизитов.Свойство("НалогообложениеНДС")
		ИЛИ ОбновитьВсе Тогда
	
		ЗначениеСвойства = 
			ЗначениеЗаполнено(Объект.НалогообложениеНДС)
			И УчетНДСУПКлиентСервер.ТипыНалогообложенияСкрывающиеРеквизитыНДС().Найти(Объект.НалогообложениеНДС) <> Неопределено;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтавкаНДС", 
			"СтавкаНДС", 
			"ТолькоПросмотрБезОчистки", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СтраницаОсновныеСредства
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018 
			ИЛИ НЕ УчетЗаБалансом;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СтатьяРасходов", 
			"ОССтатьяРасходов", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОСПодразделение", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОСПодразделениеЗабалансом", 
			"Видимость", 
			НЕ ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
			
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = СозданДляПерехода;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.ОстаточнаяСтоимость", 
			"ОСОстаточнаяСтоимость", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СтраницаДополнительно
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда

		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.РаздельныйУчетВНАПоНалогообложениюНДС
			И НЕ УчетЗаБалансом;
	
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НалогообложениеНДС", 
			"НалогообложениеНДС", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
	
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЗакупкаПодДеятельность", 
			"ЗакупкаПодДеятельность", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	ДополнитьЗначенияСвойствЗависимыхРеквизитов_Аренда(
		Объект, 
		ВспомогательныеРеквизиты, 
		СтруктураИзмененныхРеквизитов, 
		ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
// 	Объект - ДокументОбъект.ИзменениеУсловийДоговораАренды - 
// 	ВспомогательныеРеквизиты - Структура - 
// 	ИзмененныеРеквизиты - Строка - 
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ИзменениеУсловийДоговораАренды(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	РеквизитыДоговора = ВспомогательныеРеквизиты.РеквизитыДоговора;
	
	ПараметрыУчетаПредметовАренды = ПараметрыУчетаПредметовАренды(
		ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018, РеквизитыДоговора);
	
	#Область СтраницаОС
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ПараметрыУчетаПредметовАренды.ЕстьУчетУУ;

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СрокИспользованияУУ", 
			"ОССрокИспользованияУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ПараметрыУчетаПредметовАренды.ЕстьУчетУУ;
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СтоимостьУУ", 
			"ОССтоимостьУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		//
		ЗначениеСвойства = ПараметрыУчетаПредметовАренды.ЕстьУчетБУ;
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СтоимостьБУ", 
			"ОССтоимостьБУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		//
		ЗначениеСвойства = ПараметрыУчетаПредметовАренды.ЕстьУчетНУ;
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОС.СтоимостьНУ", 
			"ОССтоимостьНУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;

	#КонецОбласти
	
	ДополнитьЗначенияСвойствЗависимыхРеквизитов_Аренда(
		Объект, 
		ВспомогательныеРеквизиты, 
		СтруктураИзмененныхРеквизитов, 
		ПараметрыРеквизитовОбъекта);
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_ИзменениеУсловийДоговораАренды(
		Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

Функция ЗначенияСвойствЗависимыхРеквизитов_ПоступлениеАрендованныхОС(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СчетУчета", 
			"СчетУчета", 
			"Видимость", 
			НЕ ВспомогательныеРеквизиты.ИспользуетсяУчетВНА_2_4, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГруппаФинансовогоУчета", 
			"ГруппаФинансовогоУчета", 
			"Видимость", 
			ВспомогательныеРеквизиты.ИспользуетсяУчетВНА_2_4, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"МОЛ", 
			"МОЛ", 
			"Видимость", 
			ВспомогательныеРеквизиты.ИспользуетсяУчетВНА_2_4, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Договор", 
			"Договор", 
			"Видимость", 
			ВспомогательныеРеквизиты.ИспользуетсяУчетВНА_2_4, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

// 
// Параметры:
// 	Объект - ДокументОбъект.ПоступлениеУслугПоАренде - 
// 	ВспомогательныеРеквизиты - Структура - 
// 	ИзмененныеРеквизиты - Строка - 
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ПоступлениеУслугПоАренде(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	РеквизитыДоговора = ВспомогательныеРеквизиты.РеквизитыДоговора;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства = 
			РеквизитыДоговора.Балансодержатель = ПредопределенноеЗначение("Перечисление.БалансодержательПредметовАренды.Арендодатель");
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Начисления.Подразделение", 
			"НачисленияПодразделение", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Начисления.СтатьяРасходов", 
			"НачисленияСтатьяРасходов", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Начисления.АналитикаРасходов", 
			"НачисленияАналитикаРасходов", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Начисления.АналитикаАктивовПассивов", 
			"НачисленияАналитикаАктивовПассивов", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Начисления.НаправлениеДеятельности", 
			"НачисленияНаправлениеДеятельности", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
			
	Возврат ПараметрыРеквизитовОбъекта;

КонецФункции

Функция ЗаполнитьРеквизитыВЗависимостиОтСвойств_ИзменениеПараметровОС(Объект, ПараметрыРеквизитовОбъекта) Экспорт

	ИзмененныеРеквизиты = Новый Массив;
	
	Для каждого ПараметрыРеквизита Из ПараметрыРеквизитовОбъекта Цикл
		
		Если ПараметрыРеквизита.Свойство = "Видимость" И ПараметрыРеквизита.Значение = Ложь
			ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотр" И ПараметрыРеквизита.Значение = Истина
			ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотрБезОтметкиНезаполненного" И ПараметрыРеквизита.Значение = Истина Тогда
			Действие = "Очистить";
		ИначеЕсли ПараметрыРеквизита.Свойство = "Видимость" И ПараметрыРеквизита.Значение = Истина
			ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотр" И ПараметрыРеквизита.Значение = Ложь
			ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотрБезОтметкиНезаполненного" И ПараметрыРеквизита.Значение = Ложь Тогда
			Действие = "Заполнить";
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "ОтражениеАмортизационныхРасходовФлаг" Тогда
			Если Действие = "Очистить" Тогда
				Объект.Амортизация.Очистить();
				ИзмененныеРеквизиты.Добавить("Амортизация");
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "ОтражениеАмортизационнойПремииФлаг" Тогда
			Если Действие = "Очистить" Тогда
				Объект.АмортизационнаяПремия.Очистить();
				ИзмененныеРеквизиты.Добавить("АмортизационнаяПремия");
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "ОтражениеИмущественныхНалоговФлаг" Тогда
			Если Действие = "Очистить" Тогда
				Объект.ИмущественныеНалоги.Очистить();
				ИзмененныеРеквизиты.Добавить("ИмущественныеНалоги");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрСоединить(ИзмененныеРеквизиты, ",");

КонецФункции

Функция ЗаполнитьРеквизитыВЗависимостиОтСвойств_МодернизацияОС(Объект, ПараметрыРеквизитовОбъекта) Экспорт

	ИзмененныеРеквизиты = Новый Массив;
	
	Для каждого ПараметрыРеквизита Из ПараметрыРеквизитовОбъекта Цикл
		
		Если ПараметрыРеквизита.Свойство = "Видимость" И ПараметрыРеквизита.Значение = Ложь
			ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотр" И ПараметрыРеквизита.Значение = Истина
			ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотрБезОтметкиНезаполненного" И ПараметрыРеквизита.Значение = Истина Тогда
			Действие = "Очистить";
		ИначеЕсли ПараметрыРеквизита.Свойство = "Видимость" И ПараметрыРеквизита.Значение = Истина
			ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотр" И ПараметрыРеквизита.Значение = Ложь
			ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотрБезОтметкиНезаполненного" И ПараметрыРеквизита.Значение = Ложь Тогда
			Действие = "Заполнить";
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "НаправлениеДеятельности" Тогда
			Если Действие = "Очистить" Тогда
				Объект[ПараметрыРеквизита.ИмяРеквизита] = Неопределено;
				ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
			КонецЕсли;
		КонецЕсли; 
		
	КонецЦикла;
	
	Возврат СтрСоединить(ИзмененныеРеквизиты, ",");

КонецФункции

// 
// Параметры:
// 	Объект - СправочникОбъект.ОбъектыЭксплуатации - 
// 	ВспомогательныеРеквизиты - Структура - 
// 	ИзмененныеРеквизиты - Строка - 
// 	
// Возвращаемое значение:
// 	Массив из см. ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта 
Функция ЗначенияСвойствЗависимыхРеквизитов_ОбъектыЭксплуатации(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "") Экспорт

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_ОбъектыЭксплуатации(
		Объект, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ТипОС")
		ИЛИ ОбновитьВсе Тогда

		ЗначениеСвойства = 
			Объект.ТипОС = ПредопределенноеЗначение("Перечисление.ТипыОС.ОбъектЭксплуатации");

		ЗначениеСвойстваРасширенное = 
			Объект.ТипОС = ПредопределенноеЗначение("Перечисление.ТипыОС.ОбъектЭксплуатации")
			Или Объект.ТипОС = ПредопределенноеЗначение("Перечисление.ТипыОС.Узел");
			
		ЗначениеСвойстваНеГрупповойОС = 
			Объект.ТипОС = ПредопределенноеЗначение("Перечисление.ТипыОС.ОбъектЭксплуатации")
			Или Объект.ТипОС = ПредопределенноеЗначение("Перечисление.ТипыОС.Узел")
			Или Объект.ТипОС = ПредопределенноеЗначение("Перечисление.ТипыОС.КомпонентАмортизации");

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаВыпуска", 
			"ДатаВыпуска", 
			"Видимость", 
			ЗначениеСвойстваРасширенное, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаСведений", 
			"ДатаСведений", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЗаводскойНомер", 
			"ЗаводскойНомер", 
			"Видимость", 
			ЗначениеСвойстваРасширенное, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Изготовитель", 
			"Изготовитель", 
			"Видимость", 
			ЗначениеСвойстваРасширенное, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ИнвентарныйНомер", 
			"ИнвентарныйНомер", 
			"Видимость", 
			ЗначениеСвойстваНеГрупповойОС, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Класс", 
			"Класс", 
			"Видимость", 
			ЗначениеСвойстваРасширенное, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"КодПоОКОФ", 
			"КодПоОКОФ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Модель", 
			"Модель", 
			"Видимость", 
			ЗначениеСвойстваРасширенное, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НомерПаспорта", 
			"НомерПаспорта", 
			"Видимость", 
			ЗначениеСвойстваРасширенное, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Расположение", 
			"Расположение", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЭксплуатирующееПодразделение", 
			"ЭксплуатирующееПодразделение", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"РемонтирующееПодразделение", 
			"РемонтирующееПодразделение", 
			"Видимость", 
			ЗначениеСвойстваРасширенное, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СерийныйНомер", 
			"СерийныйНомер", 
			"Видимость", 
			ЗначениеСвойстваРасширенное, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СпособОтраженияЗарплаты", 
			"СпособОтраженияЗарплаты", 
			"Видимость", 
			ЗначениеСвойстваРасширенное, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходов", 
			"СтатьяРасходов", 
			"Видимость", 
			ЗначениеСвойстваРасширенное, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ШифрПоЕНАОФ", 
			"ШифрПоЕНАОФ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			Объект.ТипОС = ПредопределенноеЗначение("Перечисление.ТипыОС.ОбъектЭксплуатации")
			И ВспомогательныеРеквизиты.ИспользоватьУчетДрагоценныхМатериалов;

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДрагоценныеМатериалы", 
			"ДрагоценныеМатериалы", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);		
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"КлассификацияДМ4", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);		
		
		//
		ЗначениеСвойства = 
			(Объект.ТипОС = ПредопределенноеЗначение("Перечисление.ТипыОС.ОбъектЭксплуатации")
			Или Объект.ТипОС = ПредопределенноеЗначение("Перечисление.ТипыОС.Узел"))
			И ВспомогательныеРеквизиты.ИспользоватьУправлениеРемонтами;

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Статус", 
			"Статус", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);		
		
		//
		ЗначениеСвойства = 
			Объект.ТипОС = ПредопределенноеЗначение("Перечисление.ТипыОС.ОбъектЭксплуатации")
			И ВспомогательныеРеквизиты.ИспользоватьУправлениеРемонтами
			И ВспомогательныеРеквизиты.ИспользоватьПроизводство;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"РабочиеЦентры", 
			"РабочиеЦентры", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Класс")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ТипОС")
		ИЛИ ОбновитьВсе Тогда

		ЗначениеСвойства = 
			Объект.ТипОС = ПредопределенноеЗначение("Перечисление.ТипыОС.ОбъектЭксплуатации")
			И ВспомогательныеРеквизиты.ИспользуютсяПодклассы;

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Подкласс", 
			"Подкласс", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

#КонецОбласти

#Область Налоги

Функция МинимальнаяДатаРегистрации(Объект) Экспорт

	ДатаРегистрации = '000101010000';
	
	Для каждого ДанныеСтроки Из Объект.ОС Цикл
		Если ДанныеСтроки.ДатаРегистрации = '000101010000' Тогда
			ДатаРегистрации = ?(ДатаРегистрации <> '000101010000', Мин(Объект.Дата, ДатаРегистрации), Объект.Дата);
		Иначе
			ДатаРегистрации = ?(ДатаРегистрации <> '000101010000', Мин(ДанныеСтроки.ДатаРегистрации, ДатаРегистрации), ДанныеСтроки.ДатаРегистрации);
		КонецЕсли;
	КонецЦикла; 
	
	Если ДатаРегистрации = '000101010000' Тогда
		ДатаРегистрации = Объект.Дата;
	КонецЕсли; 

	Возврат ДатаРегистрации;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДействияВыполняемыеПриИзмененииРеквизитов

Процедура ПриИзмененииРеквизитов_ПринятиеКУчетуОС(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты) Экспорт

	Если НЕ ЗначениеЗаполнено(ИзмененныеРеквизиты) Тогда
		Возврат; 
	КонецЕсли; 
	
	СписокРеквизитов = СтрРазделить(ИзмененныеРеквизиты, ",");
	
	// ВАЖНО: Порядок имеет значение!
	
	Если СписокРеквизитов.Найти("ХозяйственнаяОперация") <> Неопределено
		ИЛИ СписокРеквизитов.Найти("ВидАналитикиКапитализацииРасходов") <> Неопределено Тогда
	
		Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОС")
			ИЛИ Объект.ВидАналитикиКапитализацииРасходов <> ПредопределенноеЗначение("Перечисление.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства") Тогда
			Объект.ЧастичныйВводВЭксплуатацию = Ложь;
			СписокРеквизитов.Добавить("ЧастичныйВводВЭксплуатацию");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СписокРеквизитов.Найти("ХозяйственнаяОперация") <> Неопределено Тогда
		
		Если Объект.ЧастичныйВводВЭксплуатацию
			И (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОСпоИнвентаризации")
				ИЛИ Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуПредметовАренды")) Тогда
			Объект.ЧастичныйВводВЭксплуатацию = Ложь;
			СписокРеквизитов.Добавить("ЧастичныйВводВЭксплуатацию");
		КонецЕсли;
		
		Если Объект.ВидАналитикиКапитализацииРасходов = ПредопределенноеЗначение("Перечисление.ВидыАналитикиКапитализацииРасходов.ОбъектСтроительства")
			И (Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуОСпоИнвентаризации")
				ИЛИ Объект.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПринятиеКУчетуПредметовАренды")) Тогда
			Объект.ВидАналитикиКапитализацииРасходов = ПредопределенноеЗначение("Перечисление.ВидыАналитикиКапитализацииРасходов.ОсновныеСредства");
			СписокРеквизитов.Добавить("ВидАналитикиКапитализацииРасходов");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СписокРеквизитов.Найти("ОтражатьВРеглУчете") <> Неопределено
		И ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА Тогда
		
		Объект.НачислятьАмортизациюБУ = Объект.ОтражатьВРеглУчете;
		Объект.НачислятьАмортизациюНУ = Объект.ОтражатьВРеглУчете;
		СписокРеквизитов.Добавить("НачислятьАмортизациюБУ");
		СписокРеквизитов.Добавить("НачислятьАмортизациюНУ");
	КонецЕсли;
	
	Если СписокРеквизитов.Найти("ОтражатьВУпрУчете") <> Неопределено Тогда
		Объект.НачислятьАмортизациюУУ = Объект.ОтражатьВУпрУчете;
		СписокРеквизитов.Добавить("НачислятьАмортизациюУУ");
	КонецЕсли;
	
	Если СписокРеквизитов.Найти("ОтражатьВРеглУчете") <> Неопределено И НЕ Объект.ОтражатьВРеглУчете
		ИЛИ СписокРеквизитов.Найти("ОтражатьВУпрУчете") <> Неопределено И НЕ Объект.ОтражатьВУпрУчете Тогда
		
		Для каждого СтрокаТаблицы Из Объект.ОС Цикл
			Если НЕ Объект.ОтражатьВРеглУчете Тогда
				СтрокаТаблицы.СтоимостьБУ = 0;
				СтрокаТаблицы.СтоимостьНУ = 0;
				СтрокаТаблицы.СтоимостьПР = 0;
				СтрокаТаблицы.СтоимостьВР = 0;
			КонецЕсли; 
			Если НЕ Объект.ОтражатьВУпрУчете Тогда
				СтрокаТаблицы.СтоимостьУУ = 0;
				СтрокаТаблицы.ЛиквидационнаяСтоимость = 0;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	ПринятиеКУчетуОСКлиентСерверЛокализация.ПриИзмененииРеквизитов(Объект, ВспомогательныеРеквизиты, СписокРеквизитов);
	
	ИзмененныеРеквизиты = СтрСоединить(СписокРеквизитов, ",");
	
КонецПроцедуры

Процедура ПриИзмененииРеквизитов_ПринятиеКУчетуУзловКомпонентовАмортизации(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты) Экспорт

	Если НЕ ЗначениеЗаполнено(ИзмененныеРеквизиты) Тогда
		Возврат; 
	КонецЕсли; 
	
	СписокРеквизитов = СтрРазделить(ИзмененныеРеквизиты, ",");
	
	// ВАЖНО: Порядок имеет значение!
	
	Если СписокРеквизитов.Найти("ОтражатьВРеглУчете") <> Неопределено
		И ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА Тогда
		
		Объект.НачислятьАмортизациюБУ = Объект.ОтражатьВРеглУчете;
		СписокРеквизитов.Добавить("НачислятьАмортизациюБУ");
	КонецЕсли;
	
	Если СписокРеквизитов.Найти("ОтражатьВУпрУчете") <> Неопределено Тогда
		Объект.НачислятьАмортизациюУУ = Объект.ОтражатьВУпрУчете;
		СписокРеквизитов.Добавить("НачислятьАмортизациюУУ");
	КонецЕсли;
	
	Если СписокРеквизитов.Найти("ОтражатьВРеглУчете") <> Неопределено И НЕ Объект.ОтражатьВРеглУчете
		ИЛИ СписокРеквизитов.Найти("ОтражатьВУпрУчете") <> Неопределено И НЕ Объект.ОтражатьВУпрУчете Тогда
		
		Для каждого СтрокаТаблицы Из Объект.КомпонентыАмортизации Цикл
			Если НЕ Объект.ОтражатьВРеглУчете Тогда
				СтрокаТаблицы.СтоимостьБУ = 0;
			КонецЕсли; 
			Если НЕ Объект.ОтражатьВУпрУчете Тогда
				СтрокаТаблицы.СтоимостьУУ = 0;
				СтрокаТаблицы.ЛиквидационнаяСтоимость = 0;
			КонецЕсли; 
		КонецЦикла; 
	КонецЕсли; 
	
	ИзмененныеРеквизиты = СтрСоединить(СписокРеквизитов, ",");
	
КонецПроцедуры

Процедура ПриИзмененииРеквизитов_МодернизацияОС(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты) Экспорт

	Если НЕ ЗначениеЗаполнено(ИзмененныеРеквизиты) Тогда
		Возврат; 
	КонецЕсли; 
	
	СписокРеквизитов = СтрРазделить(ИзмененныеРеквизиты, ",");
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ПриИзмененииРеквизитов_МодернизацияОС(Объект, ВспомогательныеРеквизиты, СписокРеквизитов);
	
	ИзмененныеРеквизиты = СтрСоединить(СписокРеквизитов, ",");
	
КонецПроцедуры

Процедура ПриИзмененииРеквизитов_ОбъединениеОС(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты) Экспорт

	Если НЕ ЗначениеЗаполнено(ИзмененныеРеквизиты) Тогда
		Возврат; 
	КонецЕсли; 
	
	СписокРеквизитов = СтрРазделить(ИзмененныеРеквизиты, ",");
	
	// ВАЖНО: Порядок имеет значение!
	
	Если СписокРеквизитов.Найти("ХозяйственнаяОперация") <> Неопределено Тогда
	
		Если Объект.ХозяйственнаяОперация <> ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ПрисоединениеОС") Тогда
			Объект.ОбъединениеОднотипныхОС = Истина;
			СписокРеквизитов.Добавить("ОбъединениеОднотипныхОС");
		КонецЕсли;
		
	КонецЕсли;
	
	Если СписокРеквизитов.Найти("ОтражатьВРеглУчете") <> Неопределено
		И ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА Тогда
		
		Объект.НачислятьАмортизациюБУ = Объект.ОтражатьВРеглУчете;
		Объект.НачислятьАмортизациюНУ = Объект.ОтражатьВРеглУчете;
		СписокРеквизитов.Добавить("НачислятьАмортизациюБУ");
		СписокРеквизитов.Добавить("НачислятьАмортизациюНУ");
	КонецЕсли;
	
	Если СписокРеквизитов.Найти("ОтражатьВУпрУчете") <> Неопределено Тогда
		Объект.НачислятьАмортизациюУУ = Объект.ОтражатьВУпрУчете;
		СписокРеквизитов.Добавить("НачислятьАмортизациюУУ");
	КонецЕсли;
	
	ОбъединениеОСКлиентСерверЛокализация.ПриИзмененииРеквизитов(Объект, ВспомогательныеРеквизиты, СписокРеквизитов);
	
	ИзмененныеРеквизиты = СтрСоединить(СписокРеквизитов, ",");
	
КонецПроцедуры

Процедура ПриИзмененииРеквизитов_КорректировкаСтоимостиИАмортизацииОС(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты) Экспорт

	Если НЕ ЗначениеЗаполнено(ИзмененныеРеквизиты) Тогда
		Возврат; 
	КонецЕсли; 
	
	СписокРеквизитов = СтрРазделить(ИзмененныеРеквизиты, ",");
	
	КорректировкаСтоимостиИАмортизацииОСКлиентСерверЛокализация.ПриИзмененииРеквизитов(Объект, ВспомогательныеРеквизиты, СписокРеквизитов);
	
	ИзмененныеРеквизиты = СтрСоединить(СписокРеквизитов, ",");
	
КонецПроцедуры
 
Функция ЗаполнитьРеквизитыВЗависимостиОтСвойств_ВводОстатков(Объект, ПараметрыРеквизитовОбъекта) Экспорт

	ИзмененныеРеквизиты = Новый Массив;
	
	Для каждого ПараметрыРеквизита Из ПараметрыРеквизитовОбъекта Цикл
		
		Действие = ОчиститьИлиЗаполнить(Объект, ПараметрыРеквизита);
		
		Если НЕ ЗначениеЗаполнено(Действие) Тогда
			Продолжить;
		КонецЕсли;
		
		#Область СтраницаАмортизация
		
		Если ПараметрыРеквизита.ИмяРеквизита = "НачислятьАмортизациюБУ"
			ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НачислятьАмортизациюНУ"
			ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НачислятьАмортизациюУУ" Тогда
				Объект[ПараметрыРеквизита.ИмяРеквизита] = ?(Действие = "Заполнить", Истина, Ложь);
			ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "ГрафикАмортизации" Тогда
			Если Действие = "Очистить" Тогда
				Объект[ПараметрыРеквизита.ИмяРеквизита] = Неопределено;
				ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);
			КонецЕсли; 
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "ВключитьАмортизационнуюПремиюВСоставРасходов" Тогда
			Если Действие = "Очистить" Тогда
				Объект.ВключитьАмортизационнуюПремиюВСоставРасходов = Ложь;
				Объект.СуммаКапитальныхВложенийВключаемыхВРасходыНУ = 0;
				ИзмененныеРеквизиты.Добавить("ВключитьАмортизационнуюПремиюВСоставРасходов");
				ИзмененныеРеквизиты.Добавить("СуммаКапитальныхВложенийВключаемыхВРасходыНУ");
			КонецЕсли; 
		КонецЕсли;
		
		#КонецОбласти
		
		#Область СтраницаСтоимость
		Если Действие = "Очистить" 
			И (ПараметрыРеквизита.ИмяРеквизита = "ТекущаяСтоимостьБУ"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "ТекущаяСтоимостьНУ"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "ТекущаяСтоимостьПР"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "ТекущаяСтоимостьВР"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "ТекущаяСтоимостьУУ"
			
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "ТекущаяСтоимостьБУЦФ"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "ТекущаяСтоимостьНУЦФ"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "ТекущаяСтоимостьПРЦФ"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "ТекущаяСтоимостьВРЦФ"
				
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НакопленнаяАмортизацияБУ"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НакопленнаяАмортизацияНУ"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НакопленнаяАмортизацияВР"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НакопленнаяАмортизацияПР"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НакопленнаяАмортизацияУУ"
				
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НакопленнаяАмортизацияБУЦФ"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НакопленнаяАмортизацияНУЦФ"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НакопленнаяАмортизацияПРЦФ"
				ИЛИ ПараметрыРеквизита.ИмяРеквизита = "НакопленнаяАмортизацияВРЦФ") Тогда

			Объект[ПараметрыРеквизита.ИмяРеквизита] = 0;
			ИзмененныеРеквизиты.Добавить(ПараметрыРеквизита.ИмяРеквизита);

		КонецЕсли;
		
		#КонецОбласти
		
		#Область СтраницаОтражениеРасходов
		
		Если ПараметрыРеквизита.ИмяРеквизита = "СтатьяРасходовБУ" Тогда
			Если Действие = "Очистить" Тогда
				Объект.СтатьяРасходовБУ = Неопределено;
				Объект.АналитикаРасходовБУ = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "СтатьяРасходовУУ" Тогда
			Если Действие = "Очистить" Тогда
				Объект.СтатьяРасходовУУ = Неопределено;
				Объект.АналитикаРасходовУУ = Неопределено;
				ИзмененныеРеквизиты.Добавить("СтатьяРасходовУУ");
				ИзмененныеРеквизиты.Добавить("АналитикаРасходовУУ");
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "СтатьяРасходовНалог" Тогда
			Если Действие = "Очистить" Тогда
				Объект.СтатьяРасходовНалог = Неопределено;
				Объект.АналитикаРасходовНалог = Неопределено;
				ИзмененныеРеквизиты.Добавить("СтатьяРасходовНалог");
				ИзмененныеРеквизиты.Добавить("АналитикаРасходовНалог");
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "СтатьяДоходов" Тогда
			Если Действие = "Очистить" Тогда
				Объект.СтатьяДоходов = Неопределено;
				Объект.АналитикаДоходов = Неопределено;
				ИзмененныеРеквизиты.Добавить("СтатьяДоходов");
				ИзмененныеРеквизиты.Добавить("АналитикаДоходов");
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "СтатьяРасходовАмортизационнойПремии" Тогда
			Если Действие = "Очистить" Тогда
				Объект.СтатьяРасходовАмортизационнойПремии = Неопределено;
				Объект.АналитикаРасходовАмортизационнойПремии = Неопределено;
				ИзмененныеРеквизиты.Добавить("СтатьяРасходовАмортизационнойПремии");
				ИзмененныеРеквизиты.Добавить("АналитикаРасходовАмортизационнойПремии");
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыРеквизита.ИмяРеквизита = "ПередаватьРасходыВДругуюОрганизацию" Тогда
			Если Действие = "Очистить" Тогда
				Объект.ПередаватьРасходыВДругуюОрганизацию = Ложь;
				Объект.ОрганизацияПолучательРасходов = Неопределено;
				ИзмененныеРеквизиты.Добавить("ПередаватьРасходыВДругуюОрганизацию");
				ИзмененныеРеквизиты.Добавить("ОрганизацияПолучательРасходов");
			КонецЕсли;
		КонецЕсли;
		
		#КонецОбласти
		
	КонецЦикла; 
	
	Возврат СтрСоединить(ИзмененныеРеквизиты, ",");
	
КонецФункции

Функция ОчиститьИлиЗаполнить(Объект, ПараметрыРеквизита) Экспорт

	Если НЕ ЗначениеЗаполнено(ПараметрыРеквизита.ИмяРеквизита) Тогда
		Возврат "";
	КонецЕсли;
	
	ЭтоБулево = ТипЗнч(Объект[ПараметрыРеквизита.ИмяРеквизита]) = Тип("Булево");
	
	Действие = "";
	
	Если ((ПараметрыРеквизита.Свойство = "Видимость" ИЛИ ПараметрыРеквизита.Свойство = "ВидимостьЭлемента") И ПараметрыРеквизита.Значение = Ложь
			ИЛИ (ПараметрыРеквизита.Свойство = "ТолькоПросмотр" ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотрБезОтметкиНезаполненного")
					И ПараметрыРеквизита.Значение = Истина)
		И (НЕ ЭтоБулево И ЗначениеЗаполнено(Объект[ПараметрыРеквизита.ИмяРеквизита]) 
			ИЛИ ЭтоБулево И Объект[ПараметрыРеквизита.ИмяРеквизита] = Истина) Тогда
		
		Действие = "Очистить";
	ИначеЕсли ((ПараметрыРеквизита.Свойство = "Видимость" ИЛИ ПараметрыРеквизита.Свойство = "ВидимостьЭлемента") И ПараметрыРеквизита.Значение = Истина
				ИЛИ (ПараметрыРеквизита.Свойство = "ТолькоПросмотр" ИЛИ ПараметрыРеквизита.Свойство = "ТолькоПросмотрБезОтметкиНезаполненного")
						И ПараметрыРеквизита.Значение = Ложь)
			И (НЕ ЭтоБулево И НЕ ЗначениеЗаполнено(Объект[ПараметрыРеквизита.ИмяРеквизита])
				ИЛИ ЭтоБулево И Объект[ПараметрыРеквизита.ИмяРеквизита] = Ложь) Тогда
			
		Действие = "Заполнить";
	КонецЕсли;

	Возврат Действие;
	
КонецФункции
 
#КонецОбласти

#Область ОпределениеСвойствЗависимыхРеквизитовОбъекта

Функция ЗначенияСвойствЗависимыхРеквизитов_ВводОстатков_ОС(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "")

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	ПараметрыВводаОстатковОС = ПараметрыВводаОстатковОС(Объект, ВспомогательныеРеквизиты);
	
	ПоНаработкеУУ = (Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции"));
	
	ЭтоАренда =	
		ВспомогательныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковАрендованныхОСНаБалансе")
		ИЛИ ВспомогательныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуПредметовЛизингаНаБалансе");
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") Тогда
		СтруктураИзмененныхРеквизитов.Вставить("ДоступныПараметрыУчета");
	КонецЕсли;
	
	#Область ПараметрыУчета
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета") 
		ИЛИ ОбновитьВсе Тогда
		
		// Для поддержки переноса данных
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВРеглУчете
			И ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета
			И ВспомогательныеРеквизиты.Дата >= ВспомогательныеРеквизиты.ДатаНачалаУчета
			И ВспомогательныеРеквизиты.ПараметрыУчетнойПолитикиНастройкиУчетаНДС <> Неопределено
			И ВспомогательныеРеквизиты.ПараметрыУчетнойПолитикиНастройкиУчетаНДС.РаздельныйУчетВНАПоНалогообложениюНДС;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ВариантРаздельногоУчетаНДС", 
			"", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ОтражатьВРеглУчете
			И ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета
			И ВспомогательныеРеквизиты.ПараметрыУчетнойПолитикиНастройкиУчетаНДС <> Неопределено
			И ВспомогательныеРеквизиты.ПараметрыУчетнойПолитикиНастройкиУчетаНДС.РаздельныйУчетВНАПоНалогообложениюНДС;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ВариантРаздельногоУчетаНДС", 
			"", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли; 
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПорядокУчетаУУ", 
			"ПорядокУчетаУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаПринятияКУчетуУУ", 
			"ДатаПринятияКУчетуУУ", 
			"Видимость", 
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			НЕ ВспомогательныеРеквизиты.ВалютыСовпадают
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета;
				
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ЛиквидационнаяСтоимость", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ПараметрыВводаОстатковОС.ДоступныПараметрыУчета;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"МОЛ", 
			"МОЛ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
	
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АдресМестонахождения", 
			"АдресМестонахождения", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если ОбновитьВсе Тогда
		
		Если НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА Тогда
			
			ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
				"НаправлениеДеятельности", 
				"НаправлениеДеятельности", 
				"АвтоОтметкаНезаполненного", 
				Ложь, 
				ПараметрыРеквизитовОбъекта);
				
		КонецЕсли; 
		
	КонецЕсли;
		
	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства =
			ЭтоАренда
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета;
							
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Договор", 
			"Договор", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ХозяйственнаяОперация")
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуОС")
				ИЛИ ВспомогательныеРеквизиты.ХозяйственнаяОперация = ПредопределенноеЗначение("Перечисление.ХозяйственныеОперации.ВводОстатковПереданныхВАрендуПредметовЛизингаНаБалансе");
				
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"Подразделение", 
			"Подразделение", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Стоимость
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ОтражатьВБУ
			ИЛИ НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ТекущаяСтоимостьБУ", 
			"ТекущаяСтоимостьБУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			ПараметрыВводаОстатковОС.ДоступныПараметрыУчета
			И (ВспомогательныеРеквизиты.ОтражатьВБУ
				ИЛИ НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПервоначальнаяСтоимостьБУ", 
			"ПервоначальнаяСтоимостьБУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ТекущаяСтоимостьУУ", 
			"ТекущаяСтоимостьУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПервоначальнаяСтоимостьУУ", 
			"ПервоначальнаяСтоимостьУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);

	КонецЕсли;
		
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И (ВспомогательныеРеквизиты.Дата >= ВспомогательныеРеквизиты.ДатаНачалаУчета)
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ТекущаяСтоимостьУУ", 
			"ТекущаяСтоимостьУУ", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
		
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			(ПараметрыВводаОстатковОС.АмортизацияУУДоступна
				ИЛИ НЕ ПараметрыВводаОстатковОС.ДоступныПараметрыУчета
					И ВспомогательныеРеквизиты.ОтражатьВУпрУчете)
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НакопленнаяАмортизацияУУ", 
			"НакопленнаяАмортизацияУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаНУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВБУ
				И (ПараметрыВводаОстатковОС.АмортизацияБУДоступна
					ИЛИ НЕ ПараметрыВводаОстатковОС.ДоступныПараметрыУчета)
			ИЛИ НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				И (ПараметрыВводаОстатковОС.АмортизацияУУДоступна
					ИЛИ НЕ ПараметрыВводаОстатковОС.ДоступныПараметрыУчета
						И ВспомогательныеРеквизиты.ОтражатьВУпрУчете);
						
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НакопленнаяАмортизацияБУ", 
			"НакопленнаяАмортизацияБУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ПараметрыВводаОстатковОС.ДоступныПараметрыУчета;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПервоначальнаяСтоимостьОтличается", 
			"ПервоначальнаяСтоимостьОтличается", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПервоначальнаяСтоимостьОтличается")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = НЕ Объект.ПервоначальнаяСтоимостьОтличается;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПервоначальнаяСтоимостьУУ", 
			"ПервоначальнаяСтоимостьУУ", 
			"ТолькоПросмотрБезОтметкиНезаполненногоБезОчистки", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПервоначальнаяСтоимостьБУ", 
			"ПервоначальнаяСтоимостьБУ", 
			"ТолькоПросмотрБезОтметкиНезаполненногоБезОчистки", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПервоначальнаяСтоимостьОтличается")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.ПервоначальнаяСтоимостьОтличается
			И ВспомогательныеРеквизиты.ОтражатьВУпрУчете 
			И ВспомогательныеРеквизиты.Дата >= ВспомогательныеРеквизиты.ДатаНачалаУчета;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПервоначальнаяСтоимостьУУ", 
			"ПервоначальнаяСтоимостьУУ", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область События
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЕстьИзменениеПараметровАмортизацииУУ", 
			"ЕстьИзменениеПараметровАмортизацииУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаИзмененияПараметровУУ", 
			"ДатаИзмененияПараметровУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ЕстьИзменениеПараметровАмортизацииУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства =
			Объект.ЕстьИзменениеПараметровАмортизацииУУ 
			И ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И ВспомогательныеРеквизиты.ПорядокУчетаВНА = ПредопределенноеЗначение("Перечисление.ПорядокУчетаВНА.ПоСтандартамРегл")
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтоимостьДляВычисленияАмортизацииУУ", 
			"СтоимостьДляВычисленияАмортизацииУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
		
	Если СтруктураИзмененныхРеквизитов.Свойство("ЕстьИзменениеПараметровАмортизацииУУ")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = НЕ Объект.ЕстьИзменениеПараметровАмортизацииУУ;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаИзмененияПараметровУУ", 
			"ДатаИзмененияПараметровУУ", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете
				И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета
			ИЛИ НЕ ПараметрыВводаОстатковОС.ДоступныПараметрыУчета
				И ВспомогательныеРеквизиты.ОтражатьВУУ;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЕстьРезервПереоценки", 
			"ЕстьРезервПереоценки", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"РезервПереоценкиЗнак", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"РезервПереоценкиАмортизации", 
			"", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"РезервПереоценкиСтоимости", 
			"", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета
			И (ВспомогательныеРеквизиты.Дата < ВспомогательныеРеквизиты.ДатаНачалаУчета);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДокументВводаВЭксплуатациюУУ", 
			"ДокументВводаВЭксплуатациюУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ЕстьИзменениеПараметровАмортизацииБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ЕстьИзменениеПараметровАмортизацииУУ")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			НЕ Объект.ЕстьИзменениеПараметровАмортизацииБУ
			И НЕ Объект.ЕстьИзменениеПараметровАмортизацииУУ;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СобытиеМодернизация", 
			"СобытиеМодернизация", 
			"ТолькоПросмотр", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ПараметрыВводаОстатковОС.ДоступныПараметрыУчета;

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СобытиеПринятиеКУчету", 
			"СобытиеПринятиеКУчету", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СобытиеМодернизация", 
			"СобытиеМодернизация", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Амортизация
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ПараметрыВводаОстатковОС.ДоступныПараметрыАмортизацииУУ
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
			
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ЕстьИзменениеПараметровАмортизацииУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства =
			ПараметрыВводаОстатковОС.ДоступныПараметрыАмортизацииУУ 
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета
			И Объект.ЕстьИзменениеПараметровАмортизацииУУ 
			И НЕ ПоНаработкеУУ;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУОстаточный", 
			"СрокИспользованияУУОстаточный", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства =
			ПараметрыВводаОстатковОС.ДоступныПараметрыАмортизацииУУ 
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета
			И Объект.ЕстьИзменениеПараметровАмортизацииУУ 
			И ПоНаработкеУУ
			И ВспомогательныеРеквизиты.ПорядокУчетаВНА = ПредопределенноеЗначение("Перечисление.ПорядокУчетаВНА.ПоСтандартамРегл");
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъемНаработкиОстаточныйУУ", 
			"ОбъемНаработкиОстаточныйУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ПараметрыВводаОстатковОС.ДоступныПараметрыАмортизацииУУ
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета
			И (Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.Линейный")
					ИЛИ Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка"));
							
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
											
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ПараметрыВводаОстатковОС.ДоступныПараметрыАмортизацииУУ
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НачислятьАмортизациюУУ", 
			"НачислятьАмортизациюУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"МетодНачисленияАмортизацииУУ", 
			"МетодНачисленияАмортизацииУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ПараметрыВводаОстатковОС.ДоступныПараметрыАмортизацииУУ
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета
			И Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка");
							
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"КоэффициентУскоренияУУ", 
			"КоэффициентУскоренияУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
											
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииБУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ПараметрыВводаОстатковОС.ПоНаработке
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПоказательНаработки", 
			"ПоказательНаработки", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъемНаработки", 
			"ОбъемНаработки", 
			"Видимость", 
			ЗначениеСвойства,
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтражениеРасходов
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ПараметрыВводаОстатковОС.ДоступноОтражениеРасходовУУ
			И ПараметрыВводаОстатковОС.ДоступныПараметрыУчета;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовУУ", 
			"СтатьяРасходовУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаРасходовУУ", 
			"АналитикаРасходовУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	#КонецОбласти
	
	ВводОстатковВнеоборотныхАктивовКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_ВводОстатков_ОС(
		Объект, ВспомогательныеРеквизиты, ПараметрыВводаОстатковОС, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

Функция ЗначенияСвойствЗависимыхРеквизитов_ВводОстатков_НМА(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "")

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	ПараметрыВводаОстатковНМА = ПараметрыВводаОстатковНМА(Объект, ВспомогательныеРеквизиты);
	ПараметрыВводаОстатковНМА.Вставить("ДоступныПараметрыУчета", ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
	
	АмортизацияУУДоступна = 
		ВспомогательныеРеквизиты.ОтражатьВУпрУчете
		И (Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию")
			ИЛИ Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.ПустаяСсылка"));
			
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") Тогда
		СтруктураИзмененныхРеквизитов.Вставить("ДоступныПараметрыУчета");
	КонецЕсли;
			
	#Область ПараметрыУчета
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ПараметрыВводаОстатковНМА.ДоступныПараметрыУчета;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаПриобретения", 
			"ДатаПриобретения", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И ПараметрыВводаОстатковНМА.ДоступныПараметрыУчета;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаПринятияКУчетуУУ", 
			"ДатаПринятияКУчетуУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
	
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПорядокУчетаУУ", 
			"ПорядокУчетаУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
	
		//	
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И ПараметрыВводаОстатковНМА.ДоступныПараметрыУчета
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимость", 
			"ЛиквидационнаяСтоимость", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//	
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете 
			И ПараметрыВводаОстатковНМА.ДоступныПараметрыУчета
			И НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЛиквидационнаяСтоимостьРегл", 
			"ЛиквидационнаяСтоимостьРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;

	Если ОбновитьВсе Тогда
		
		Если НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА Тогда
			
			ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
				"НаправлениеДеятельности", 
				"НаправлениеДеятельности", 
				"АвтоОтметкаНезаполненного", 
				Ложь, 
				ПараметрыРеквизитовОбъекта);
				
		КонецЕсли; 
		
	КонецЕсли;
	
	#КонецОбласти
									
	#Область Стоимость
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВРеглУчете
			ИЛИ НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ТекущаяСтоимостьБУ", 
			"ТекущаяСтоимостьБУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//	
		ЗначениеСвойства = 
			ПараметрыВводаОстатковНМА.ДоступныПараметрыУчета
			И (ВспомогательныеРеквизиты.ОтражатьВРеглУчете
				ИЛИ НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПервоначальнаяСтоимостьБУ", 
			"ПервоначальнаяСтоимостьБУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ТекущаяСтоимостьУУ", 
			"ТекущаяСтоимостьУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//	
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И ПараметрыВводаОстатковНМА.ДоступныПараметрыУчета
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПервоначальнаяСтоимостьУУ", 
			"ПервоначальнаяСтоимостьУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ВидОбъектаУчета")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаНУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.ВидОбъектаУчета <> ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР")
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА 
					И ПараметрыВводаОстатковНМА.АмортизацияБУДоступна
				ИЛИ НЕ ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА 
					И АмортизацияУУДоступна);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НакопленнаяАмортизацияБУ", 
			"НакопленнаяАмортизацияБУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		КонецЕсли;
		
	Если СтруктураИзмененныхРеквизитов.Свойство("ВидОбъектаУчета")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			(Объект.ВидОбъектаУчета <> ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР")
					И АмортизацияУУДоступна
				ИЛИ НЕ ПараметрыВводаОстатковНМА.ДоступныПараметрыУчета
					И ВспомогательныеРеквизиты.ОтражатьВУпрУчете)
			И (ВспомогательныеРеквизиты.ВедетсяРегламентированныйУчетВНА
				ИЛИ НЕ ВспомогательныеРеквизиты.ВалютыСовпадают);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НакопленнаяАмортизацияУУ", 
			"НакопленнаяАмортизацияУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("ПервоначальнаяСтоимостьОтличается")
		ИЛИ ОбновитьВсе Тогда
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПервоначальнаяСтоимостьУУ", 
			"ПервоначальнаяСтоимостьУУ", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			НЕ Объект.ПервоначальнаяСтоимостьОтличается, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПервоначальнаяСтоимостьБУ", 
			"ПервоначальнаяСтоимостьБУ", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			НЕ Объект.ПервоначальнаяСтоимостьОтличается, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ТекущаяСтоимостьБУ", 
			"ТекущаяСтоимостьБУ", 
			"АвтоОтметкаНезаполненного", 
			НЕ Объект.ПервоначальнаяСтоимостьОтличается И НЕ Объект.ПрименениеЦелевогоФинансирования, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПервоначальнаяСтоимостьОтличается")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства =
			НЕ Объект.ПервоначальнаяСтоимостьОтличается
			И ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И ВспомогательныеРеквизиты.Дата >= ВспомогательныеРеквизиты.ДатаНачалаУчета;
				
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ТекущаяСтоимостьУУ", 
			"ТекущаяСтоимостьУУ", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства =
			Объект.ПервоначальнаяСтоимостьОтличается
			И ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И ВспомогательныеРеквизиты.Дата >= ВспомогательныеРеквизиты.ДатаНачалаУчета;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПервоначальнаяСтоимостьУУ", 
			"ПервоначальнаяСтоимостьУУ", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ПараметрыВводаОстатковНМА.ДоступныПараметрыУчета;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПервоначальнаяСтоимостьОтличается", 
			"ПервоначальнаяСтоимостьОтличается", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область События
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ВидОбъектаУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = Объект.ВидОбъектаУчета <> ПредопределенноеЗначение("Перечисление.ВидыОбъектовУчетаНМА.РасходыНаНИОКР")
							И ВспомогательныеРеквизиты.ОтражатьВУпрУчете;
	
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ЕстьРезервПереоценки", 
			"ЕстьРезервПереоценки", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"РезервПереоценкиАмортизации", 
			"", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"РезервПереоценкиСтоимости", 
			"", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВУпрУчете
			И ПараметрыВводаОстатковНМА.ДоступныПараметрыУчета
			И (ВспомогательныеРеквизиты.Дата < ВспомогательныеРеквизиты.ДатаНачалаУчета);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДокументПринятияКУчетуУУ", 
			"ДокументПринятияКУчетуУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Амортизация
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ПараметрыВводаОстатковНМА.ДоступныПараметрыАмортизацииУУ
			И ПараметрыВводаОстатковНМА.ДоступныПараметрыУчета;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"МетодНачисленияАмортизацииУУ", 
			"МетодНачисленияАмортизацииУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = ПараметрыВводаОстатковНМА.ДоступныПараметрыАмортизацииУУ
							И (Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.Линейный")
								ИЛИ Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка"));
							
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СрокИспользованияУУ", 
			"СрокИспользованияУУ", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
											
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка")
			И ПараметрыВводаОстатковНМА.ДоступныПараметрыАмортизацииУУ
			И ПараметрыВводаОстатковНМА.ДоступныПараметрыУчета;
							
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"КоэффициентУскоренияУУ", 
			"КоэффициентУскоренияУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	// НАРАБОТКА
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВРеглУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииБУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("МетодНачисленияАмортизацииУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ПараметрыВводаОстатковНМА.ПоНаработке
			И ПараметрыВводаОстатковНМА.ДоступныПараметрыУчета;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОбъемНаработки", 
			"ОбъемНаработки", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ОтражениеДоходовИРасходов
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ПорядокУчетаУУ")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУпрУчете")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДоступныПараметрыУчета")
		ИЛИ ОбновитьВсе Тогда
	
		ЗначениеСвойства = 
			ПараметрыВводаОстатковНМА.ДоступныПараметрыАмортизацииУУ
			И ПараметрыВводаОстатковНМА.ДоступныПараметрыУчета;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтатьяРасходовУУ", 
			"СтатьяРасходовУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АналитикаРасходовУУ", 
			"АналитикаРасходовУУ", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);

	КонецЕсли;
	
	#КонецОбласти
	
	ВводОстатковВнеоборотныхАктивовКлиентСерверЛокализация.ДополнитьЗначенияСвойствЗависимыхРеквизитов_ВводОстатков_НМА(
		Объект, ВспомогательныеРеквизиты, ПараметрыВводаОстатковНМА, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта);
	
	Возврат ПараметрыРеквизитовОбъекта;

КонецФункции

Функция ЗначенияСвойствЗависимыхРеквизитов_ВводОстатков_РасчетыПоАренде(Объект, ВспомогательныеРеквизиты, ИзмененныеРеквизиты = "")

	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	ПараметрыРеквизитовОбъекта = Новый Массив;
	
	РеквизитыДоговора = ВспомогательныеРеквизиты.РеквизитыДоговора;
	
	УчетНаБалансе = 
		ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
		ИЛИ РеквизитыДоговора.Балансодержатель = ПредопределенноеЗначение("Перечисление.БалансодержательПредметовАренды.Арендатор")
		ИЛИ НЕ ЗначениеЗаполнено(Объект.Договор);
	
	#Область СтраницаОстаткиРасчетов
	
	#Область АрендныеОбязательства
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВБУиНУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			УчетНаБалансе
			И (ВспомогательныеРеквизиты.ОтражатьВБУиНУ
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АрендныеОбязательстваОстаток", 
			"АрендныеОбязательстваОстаток", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АрендныеОбязательстваОстатокРегл", 
			"АрендныеОбязательстваОстатокРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			УчетНаБалансе
			И (ВспомогательныеРеквизиты.ОтражатьВУУ 
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"АрендныеОбязательстваОстатокУпр", 
			"АрендныеОбязательстваОстатокУпр", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область УслугиПоАренде
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВБУиНУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") 
		ИЛИ ОбновитьВсе Тогда
	
		ЗначениеСвойства = 
			(ВспомогательныеРеквизиты.ОтражатьВБУиНУ 
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
				
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"УслугаПоАрендеОстаток", 
			"УслугаПоАрендеОстаток", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"УслугаПоАрендеОстатокРегл", 
			"УслугаПоАрендеОстатокРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			(ВспомогательныеРеквизиты.ОтражатьВУУ 
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"УслугаПоАрендеОстатокУпр", 
			"УслугаПоАрендеОстатокУпр", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	#КонецОбласти
	
	#Область ВыкупнаяСтоимость
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВБУиНУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор") 
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства = 
			УчетНаБалансе
			И РеквизитыДоговора.ЕстьВыкупПредметовАренды
			И (ВспомогательныеРеквизиты.ОтражатьВБУиНУ 
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ВыкупнаяСтоимостьОстаток", 
			"ВыкупнаяСтоимостьОстаток", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ВыкупнаяСтоимостьОстатокРегл", 
			"ВыкупнаяСтоимостьОстатокРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			УчетНаБалансе
			И РеквизитыДоговора.ЕстьВыкупПредметовАренды
			И (ВспомогательныеРеквизиты.ОтражатьВУУ 
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ВыкупнаяСтоимостьОстатокУпр", 
			"ВыкупнаяСтоимостьОстатокУпр", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
		
	#КонецОбласти

	#Область НДС
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВБУиНУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор") 
		ИЛИ ОбновитьВсе Тогда

		ЗначениеСвойства = 
			УчетНаБалансе
			И (ВспомогательныеРеквизиты.ОтражатьВБУиНУ 
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
	
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НДСОстаток", 
			"НДСОстаток", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НДСОстатокРегл", 
			"НДСОстатокРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			УчетНаБалансе
			И (ВспомогательныеРеквизиты.ОтражатьВУУ 
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НДСОстатокУпр", 
			"НДСОстатокУпр", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	#КонецОбласти
	
	#Область Проценты
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВБУиНУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВУУ") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор") 
		ИЛИ ОбновитьВсе Тогда
	
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
			И (ВспомогательныеРеквизиты.ОтражатьВБУиНУ 
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПроцентыОстаток", 
			"ПроцентыОстаток", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПроцентыОстатокРегл", 
			"ПроцентыОстатокРегл", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
			И (ВспомогательныеРеквизиты.ОтражатьВУУ 
				ИЛИ ВспомогательныеРеквизиты.ОтражатьВОперативномУчете);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПроцентыОстатокУпр", 
			"ПроцентыОстатокУпр", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	#КонецОбласти
	
	#КонецОбласти
	
	#Область СтраницаРасчетыПоДоговору
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") 
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства = ВспомогательныеРеквизиты.ОтражатьВОперативномУчете;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаУслугПоАренде", 
			"СуммаУслугПоАренде", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаНДС", 
			"СуммаНДС", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаПервогоПлатежа", 
			"ДатаПервогоПлатежа", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтавкаНДС", 
			"СтавкаНДС", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПериодичностьОплат", 
			"ПериодичностьОплат", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПериодичностьНачислений", 
			"ПериодичностьНачислений", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"СуммаУслугПоАрендеВалюта", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"СуммаНДСВалюта", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"СрокАренды", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаНачалаАренды", 
			"", 
			"ОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
			
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор") 
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И ВспомогательныеРеквизиты.РеквизитыДоговора.ЕстьОбеспечительныйПлатеж;
							
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаОбеспечительногоПлатежа", 
			"СуммаОбеспечительногоПлатежа", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаПервогоОбеспечительногоПлатежа", 
			"ДатаПервогоОбеспечительногоПлатежа", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"СуммаОбеспечительногоПлатежаВалюта", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И ВспомогательныеРеквизиты.РеквизитыДоговора.ЕстьВыкупПредметовАренды;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаВыкупаПредметовАренды", 
			"СуммаВыкупаПредметовАренды", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаВыкупа", 
			"ДатаВыкупа", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"СуммаВыкупаПредметовАрендыВалюта", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПериодичностьОплат") 
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И Объект.ПериодичностьОплат <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная");
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОплатаУслугиПоАренде", 
			"ОплатаУслугиПоАренде", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ОплатаУслугиПоАрендеВалюта", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПериодичностьНачислений") 
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И Объект.ПериодичностьНачислений <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная");
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НачислениеУслугиПоАренде", 
			"НачислениеУслугиПоАренде", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"НачислениеУслугиПоАрендеВалюта", 
			"ВидимостьЭлемента", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") 
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаУслугПоАренде", 
			"СуммаУслугПоАренде", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаПервогоПлатежа", 
			"ДатаПервогоПлатежа", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтавкаНДС", 
			"СтавкаНДС", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГрафикОплатУслуг", 
			"ГрафикОплатУслуг", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ГрафикНачисленияУслуг", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаПроцентов", 
			"СуммаПроцентов", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"", 
			"ГрафикНачисленияПроцентов", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтоимостьПредметовАренды", 
			"СтоимостьПредметовАренды", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПроцентнаяСтавка", 
			"ПроцентнаяСтавка", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
		
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор") 
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И ВспомогательныеРеквизиты.РеквизитыДоговора.ЕстьОбеспечительныйПлатеж
			И ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаОбеспечительногоПлатежа", 
			"СуммаОбеспечительногоПлатежа", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаПервогоОбеспечительногоПлатежа", 
			"ДатаПервогоОбеспечительногоПлатежа", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И ВспомогательныеРеквизиты.РеквизитыДоговора.ЕстьВыкупПредметовАренды
			И ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаВыкупаПредметовАренды", 
			"СуммаВыкупаПредметовАренды", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаВыкупа", 
			"ДатаВыкупа", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПериодичностьОплат") 
		ИЛИ ОбновитьВсе Тогда
	
		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И Объект.ПериодичностьОплат <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
			И ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОплатаУслугиПоАренде", 
			"ОплатаУслугиПоАренде", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НачислениеУслугиПоАренде") 
		ИЛИ ОбновитьВсе Тогда
	
		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И Объект.НачислениеУслугиПоАренде <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
			И ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НачислениеУслугиПоАренде", 
			"НачислениеУслугиПоАренде", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
		
	Возврат ПараметрыРеквизитовОбъекта;
	
КонецФункции

#КонецОбласти

#Область Аренда

// Выполняет настройку элементов формы, связанных с арендой.
// 
// Параметры:
// 	Форма - ФормаКлиентскогоПриложения - содержит:
// 		* Элементы - ВсеЭлементыФормы - содержит:
// 			** РассчитатьСтавкуИлиСтоимость - КомандаФормы -
// 			** ПодвалИнформация - ДекорацияФормы -
// 	ВспомогательныеРеквизиты - Структура -
// 	ИзмененныеРеквизиты - Строка - 
Процедура НастроитьЗависимыеЭлементыФормы_Аренда(Знач Форма, Знач ВспомогательныеРеквизиты, Знач ИзмененныеРеквизиты = "") Экспорт
	
	СтруктураИзмененныхРеквизитов = Новый Структура(ИзмененныеРеквизиты);
	
	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	СлужебныеПараметрыФормы = Форма.СлужебныеПараметрыФормы;
	РеквизитыДоговора = СлужебныеПараметрыФормы.РеквизитыДоговора;
	
	ПоФактическойСтоимости = 
		(РеквизитыДоговора.СпособОпределенияСтоимостиАктивов 
			= ПредопределенноеЗначение("Перечисление.СпособыОпределенияСтоимостиПредметовАренды.ПоФактическойСтоимости"));
	
	УчетЗаБалансом = (РеквизитыДоговора.Балансодержатель = ПредопределенноеЗначение("Перечисление.БалансодержательПредметовАренды.Арендодатель"));
	
	#Область СтраницаОсновное
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ ОбновитьВсе Тогда

		ПараметрыВыбора = Новый Массив;
		Если НЕ СлужебныеПараметрыФормы.ИспользуетсяУчетАрендыПоФСБУ25_2018 Тогда
			ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ТипДоговора", ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Лизинг")));
		КонецЕсли;
		Элементы.Договор.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СтраницаРасчетыПоДоговору
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда
	
		Элементы.СуммаОбеспечительногоПлатежаВалюта.Видимость = Элементы.СуммаОбеспечительногоПлатежа.Видимость;
		Элементы.СуммаУслугПоАрендеВалюта.Видимость = Элементы.СуммаУслугПоАренде.Видимость;
		Элементы.СуммаВыкупаПредметовАрендыВалюта.Видимость = Элементы.СуммаВыкупаПредметовАренды.Видимость;
		
		Элементы.СуммаНДСВыкупаПредметовАрендыВалюта.Видимость = 
			Элементы.СуммаНДСВыкупаПредметовАренды.Видимость
			И СлужебныеПараметрыФормы.ИспользоватьУчетНДС;
		
		Элементы.СуммаНДСВалюта.Видимость = 
			Элементы.СуммаНДС.Видимость
			И СлужебныеПараметрыФормы.ИспользоватьУчетНДС;
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПериодичностьОплат")
		ИЛИ ОбновитьВсе Тогда
		
		Элементы.ОплатаУслугиПоАрендеВалюта.Видимость = Элементы.ОплатаУслугиПоАренде.Видимость;
	КонецЕсли;
		
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПериодичностьНачислений")
		ИЛИ ОбновитьВсе Тогда
		
		Элементы.НачислениеУслугиПоАрендеВалюта.Видимость = Элементы.НачислениеУслугиПоАренде.Видимость;
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("ПериодичностьОплат")
		ИЛИ ОбновитьВсе Тогда
		
		Если Объект.ПериодичностьОплат = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.День") Тогда
			ТекстПодсказки = НСтр("ru = 'Ежедневная сумма оплаты';
									|en = 'Daily payment amount'");
		ИначеЕсли Объект.ПериодичностьОплат = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Неделя") Тогда
			ТекстПодсказки = НСтр("ru = 'Еженедельная сумма оплаты';
									|en = 'Weekly payment amount'");
		ИначеЕсли Объект.ПериодичностьОплат = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Месяц") Тогда
			ТекстПодсказки = НСтр("ru = 'Ежемесячная сумма оплаты';
									|en = 'Monthly payment amount'");
		ИначеЕсли Объект.ПериодичностьОплат = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Квартал") Тогда
			ТекстПодсказки = НСтр("ru = 'Ежеквартальная сумма оплаты';
									|en = 'Quarterly payment amount'");
		ИначеЕсли Объект.ПериодичностьОплат = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Полугодие") Тогда
			ТекстПодсказки = НСтр("ru = 'Полугодичная сумма оплаты';
									|en = 'Semiannual payment amount'");
		ИначеЕсли Объект.ПериодичностьОплат = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Год") Тогда
			ТекстПодсказки = НСтр("ru = 'Ежегодная сумма оплаты';
									|en = 'Annual payment amount'");
		Иначе
			ТекстПодсказки = "";
		КонецЕсли;
		
		Элементы.ОплатаУслугиПоАренде.Подсказка = ТекстПодсказки;
	
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("ПериодичностьНачислений")
		ИЛИ ОбновитьВсе Тогда
		
		Если Объект.ПериодичностьНачислений = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.День") Тогда
			ТекстПодсказки = НСтр("ru = 'Ежедневная сумма начислений';
									|en = 'Daily accrual amount'");
		ИначеЕсли Объект.ПериодичностьНачислений = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Неделя") Тогда
			ТекстПодсказки = НСтр("ru = 'Еженедельная сумма начислений';
									|en = 'Weekly accrual amount'");
		ИначеЕсли Объект.ПериодичностьНачислений = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Месяц") Тогда
			ТекстПодсказки = НСтр("ru = 'Ежемесячная сумма начислений';
									|en = 'Monthly accrual amount'");
		ИначеЕсли Объект.ПериодичностьНачислений = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Квартал") Тогда
			ТекстПодсказки = НСтр("ru = 'Ежеквартальная сумма начислений';
									|en = 'Quarterly accrual amount'");
		ИначеЕсли Объект.ПериодичностьНачислений = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Полугодие") Тогда
			ТекстПодсказки = НСтр("ru = 'Полугодичная сумма начислений';
									|en = 'Semiannual accrual amount'");
		ИначеЕсли Объект.ПериодичностьНачислений = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Год") Тогда
			ТекстПодсказки = НСтр("ru = 'Ежегодная сумма начислений';
									|en = 'Annual accrual amount'");
		Иначе
			ТекстПодсказки = "";
		КонецЕсли;
		
		Элементы.НачислениеУслугиПоАренде.Подсказка = ТекстПодсказки;
	
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СуммаОбеспечительногоПлатежа")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СуммаУслугПоАренде")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СуммаВыкупаПредметовАренды")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СуммаНДС")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СуммаНДСВыкупаПредметовАренды")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СтавкаНДС")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДатаПервогоОбеспечительногоПлатежа")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДатаПервогоПлатежа")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДатаНачалаАренды")
		
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПериодичностьОплат")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПериодичностьНачислений")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОплатаУслугиПоАренде")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("НачислениеУслугиПоАренде")
		
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ГрафикОплатУслуг")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ГрафикНачисленияУслуг")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ГрафикНачисленияПроцентов")
		
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ВерсияДокумента24")
		ИЛИ ОбновитьВсе Тогда

		СтрокиЗаголовка = Новый Массив;
		
		Если ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И (СлужебныеПараметрыФормы.ИспользуетсяУчетАрендыПоФСБУ25_2018 
				ИЛИ НЕ УчетЗаБалансом) Тогда
			
			РезультатПроверки = ПроверитьСоответствиеГрафиков(
				Объект, 
				РеквизитыДоговора,
				СлужебныеПараметрыФормы.НачалоУчетаАрендыПоФСБУ25_2018, 
				Форма.ВалютаДокументаПредставление);
		Иначе
			РезультатПроверки = Неопределено;
		КонецЕсли;
		
		УстановитьВидимостьИдикатораПроверкиГрафика(
			Элементы.СуммаОбеспечительногоПлатежаИндикатор,
			?(РезультатПроверки <> Неопределено, РезультатПроверки.СуммаОбеспечительногоПлатежа, Неопределено));
			
		УстановитьВидимостьИдикатораПроверкиГрафика(
			Элементы.СуммаУслугПоАрендеИндикатор,
			?(РезультатПроверки <> Неопределено, РезультатПроверки.СуммаУслугПоАренде, Неопределено));
			
		УстановитьВидимостьИдикатораПроверкиГрафика(
			Элементы.СуммаВыкупаПредметовАрендыИндикатор,
			?(РезультатПроверки <> Неопределено, РезультатПроверки.СуммаВыкупаПредметовАренды, Неопределено));
			
		УстановитьВидимостьИдикатораПроверкиГрафика(
			Элементы.ДатаПервогоОбеспечительногоПлатежаИндикатор,
			?(РезультатПроверки <> Неопределено, РезультатПроверки.ДатаПервогоОбеспечительногоПлатежа, Неопределено));
			
		УстановитьВидимостьИдикатораПроверкиГрафика(
			Элементы.ДатаПервогоПлатежаИндикатор,
			?(РезультатПроверки <> Неопределено, РезультатПроверки.ДатаПервогоПлатежа, Неопределено));
			
		УстановитьВидимостьИдикатораПроверкиГрафика(
			Элементы.ДатаВыкупаИндикатор,
			?(РезультатПроверки <> Неопределено, РезультатПроверки.ДатаВыкупа, Неопределено));
			
		УстановитьВидимостьИдикатораПроверкиГрафика(
			Элементы.СуммаНДСИндикатор,
			?(РезультатПроверки <> Неопределено, РезультатПроверки.СуммаНДС, Неопределено));
			
		УстановитьВидимостьИдикатораПроверкиГрафика(
			Элементы.СуммаНДСВыкупаПредметовАрендыИндикатор,
			?(РезультатПроверки <> Неопределено, РезультатПроверки.СуммаНДСВыкупаПредметовАренды, Неопределено));
			
		УстановитьВидимостьИдикатораПроверкиГрафика(
			Элементы.ПериодичностьОплатИндикатор,
			?(РезультатПроверки <> Неопределено, РезультатПроверки.ПериодичностьОплат, Неопределено));
			
		УстановитьВидимостьИдикатораПроверкиГрафика(
			Элементы.ОплатаУслугиПоАрендеИндикатор,
			?(РезультатПроверки <> Неопределено, РезультатПроверки.ОплатаУслугиПоАренде, Неопределено));
			
		УстановитьВидимостьИдикатораПроверкиГрафика(
			Элементы.ПериодичностьНачисленийИндикатор,
			?(РезультатПроверки <> Неопределено, РезультатПроверки.ПериодичностьНачислений, Неопределено));
			
		УстановитьВидимостьИдикатораПроверкиГрафика(
			Элементы.НачислениеУслугиПоАрендеИндикатор,
			?(РезультатПроверки <> Неопределено, РезультатПроверки.НачислениеУслугиПоАренде, Неопределено));
			
		Если РезультатПроверки <> Неопределено
			И РезультатПроверки.ЕстьРасхождения Тогда
			
			СтрокиЗаголовка.Добавить(НСтр("ru = 'График оплат и начислений не соответствует расчетам по договору';
											|en = 'The schedule of payments and accruals does not match the settlements under the contract'"));
			
			Если Объект.ПериодичностьОплат <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
				И ЗначениеЗаполнено(Объект.ПериодичностьОплат)
				И Объект.ПериодичностьНачислений <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
				И ЗначениеЗаполнено(Объект.ПериодичностьНачислений)
				И НЕ Форма.ТолькоПросмотр Тогда
			
				СтрокиЗаголовка.Добавить(Символы.ПС);
				ТекстНадписи = Новый ФорматированнаяСтрока(НСтр("ru = 'Заполнить график оплат и начислений';
																|en = 'Fill in the schedule of payments and accruals'"),,,, "#ЗаполнитьГрафик");
				СтрокиЗаголовка.Добавить(ТекстНадписи);
				СтрокиЗаголовка.Добавить(" / ");
				
			ИначеЕсли Объект.ПериодичностьОплат <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
				И ЗначениеЗаполнено(Объект.ПериодичностьОплат)
				И НЕ Форма.ТолькоПросмотр Тогда
					
				СтрокиЗаголовка.Добавить(Символы.ПС);
				ТекстНадписи = Новый ФорматированнаяСтрока(НСтр("ru = 'Заполнить график оплат';
																|en = 'Fill in the schedule of payments'"),,,, "#ЗаполнитьГрафик");
				СтрокиЗаголовка.Добавить(ТекстНадписи);
				СтрокиЗаголовка.Добавить(" / ");

			ИначеЕсли Объект.ПериодичностьНачислений <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
				И ЗначениеЗаполнено(Объект.ПериодичностьНачислений)
				И НЕ Форма.ТолькоПросмотр Тогда
				
				СтрокиЗаголовка.Добавить(Символы.ПС);
				ТекстНадписи = Новый ФорматированнаяСтрока(НСтр("ru = 'Заполнить график начислений';
																|en = 'Fill in the schedule of accruals'"),,,, "#ЗаполнитьГрафик");
				СтрокиЗаголовка.Добавить(ТекстНадписи);
				СтрокиЗаголовка.Добавить(" / ");
			
			КонецЕсли;
			
			Если НЕ Форма.ТолькоПросмотр Тогда
				Если СтрокиЗаголовка.Количество() = 1 Тогда
					СтрокиЗаголовка.Добавить(Символы.ПС);
				КонецЕсли;
				
				ТекстНадписи = Новый ФорматированнаяСтрока(НСтр("ru = 'Перезаполнить расчеты по договору';
																|en = 'Refill settlements under the contract'"),,,, "#ЗаполнитьРасчетыПоГрафику");
				СтрокиЗаголовка.Добавить(ТекстНадписи);
			КонецЕсли;

			Элементы.ПодвалИнформация.Заголовок = Новый ФорматированнаяСтрока(СтрокиЗаголовка);
		
		ИначеЕсли Объект.ГрафикОплатУслуг.Количество() = 0
			И Объект.ГрафикНачисленияУслуг.Количество() = 0
			И ВспомогательныеРеквизиты.ОтражатьВОперативномУчете Тогда			
				
			СтрокиЗаголовка.Добавить(НСтр("ru = 'График оплат и начислений не заполнен';
											|en = 'Schedule of payments and accruals is not filled in'"));
			
			Если Объект.ПериодичностьОплат <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
				И ЗначениеЗаполнено(Объект.ПериодичностьОплат)
				И Объект.ПериодичностьНачислений <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
				И ЗначениеЗаполнено(Объект.ПериодичностьНачислений)
				И НЕ Форма.ТолькоПросмотр Тогда
				
				СтрокиЗаголовка.Добавить(Символы.ПС);
				ТекстНадписи = Новый ФорматированнаяСтрока(НСтр("ru = 'Заполнить график оплат и начислений';
																|en = 'Fill in the schedule of payments and accruals'"),,,, "#ЗаполнитьГрафик");
				СтрокиЗаголовка.Добавить(ТекстНадписи);
			
			ИначеЕсли Объект.ПериодичностьОплат <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
				И ЗначениеЗаполнено(Объект.ПериодичностьОплат)
				И НЕ Форма.ТолькоПросмотр Тогда
				
				СтрокиЗаголовка.Добавить(Символы.ПС);
				ТекстНадписи = Новый ФорматированнаяСтрока(НСтр("ru = 'Заполнить график оплат';
																|en = 'Fill in the schedule of payments'"),,,, "#ЗаполнитьГрафик");
				СтрокиЗаголовка.Добавить(ТекстНадписи);
				
			ИначеЕсли Объект.ПериодичностьНачислений <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
				И ЗначениеЗаполнено(Объект.ПериодичностьНачислений)
				И НЕ Форма.ТолькоПросмотр Тогда
				
				СтрокиЗаголовка.Добавить(Символы.ПС);
				ТекстНадписи = Новый ФорматированнаяСтрока(НСтр("ru = 'Заполнить график начислений';
																|en = 'Fill in the schedule of accruals'"),,,, "#ЗаполнитьГрафик");
				СтрокиЗаголовка.Добавить(ТекстНадписи);
				
			КонецЕсли;
			
			Элементы.ПодвалИнформация.Заголовок = Новый ФорматированнаяСтрока(СтрокиЗаголовка);

		КонецЕсли;
		
		Если ВспомогательныеРеквизиты.ВерсияДокумента24 Тогда
			
			Если СтрокиЗаголовка.Количество() <> 0 Тогда
				СтрокиЗаголовка.Добавить(Символы.ПС);
			КонецЕсли;
			СтрокиЗаголовка.Добавить(НСтр("ru = 'Документ создан в версии 2.4';
											|en = 'Document has been created in version 2.4'"));
			Если НЕ Форма.ТолькоПросмотр Тогда
				СтрокиЗаголовка.Добавить(" (");
				ТекстНадписи = Новый ФорматированнаяСтрока(НСтр("ru = 'изменить на версию 2.5';
																|en = 'change for version 2.5'"),,,, "#ИзменитьВерсиюДокумента");
				СтрокиЗаголовка.Добавить(ТекстНадписи);
				СтрокиЗаголовка.Добавить(")");
			КонецЕсли;
			
		КонецЕсли;
			
		Если СтрокиЗаголовка.Количество() <> 0 Тогда
			Элементы.ПодвалИндикатор.Видимость = Истина;
			Элементы.ПодвалИнформация.Видимость = Истина;
			Элементы.ПодвалИнформация.Заголовок = Новый ФорматированнаяСтрока(СтрокиЗаголовка);
		Иначе
			Элементы.ПодвалИндикатор.Видимость = Ложь;
			Элементы.ПодвалИнформация.Видимость = Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("СрокЛет")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СрокМес")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("СрокДней")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ДатаНачалаАренды")
		ИЛИ ОбновитьВсе Тогда

		Форма.СрокАренды = ПредставлениеСрокаФорматированнойСтрокой(
								Объект.СрокЛет, 
								Объект.СрокМес, 
								Объект.СрокДней, 
								Объект.ДатаНачалаАренды, 
								Форма.ТолькоПросмотр);
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область СтраницаДисконтирование
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			СлужебныеПараметрыФормы.ИспользуетсяУчетАрендыПоФСБУ25_2018
			И ВспомогательныеРеквизиты.ОтражатьВОперативномУчете;
			
		Элементы.ПриведеннаяСтоимость.Видимость = ЗначениеСвойства;
		Элементы.ПриведеннаяСтоимостьВалюта.Видимость = ЗначениеСвойства;
		Элементы.ОткрытьГрафикНачисленияПроцентов.Видимость = ЗначениеСвойства;
		Элементы.РассчитатьСтавкуИлиСтоимость.Видимость = ЗначениеСвойства;
		
		//
		Элементы.СуммаПроцентовВалюта.Видимость = Элементы.СуммаПроцентов.Видимость;
		Элементы.ДекорацияПроцентнаяСтавка.Видимость = Элементы.ПроцентнаяСтавка.Видимость;
			
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ГрафикНачисленияПроцентовВведенВручную")
		ИЛИ ОбновитьВсе Тогда

		Если СлужебныеПараметрыФормы.ИспользуетсяУчетАрендыПоФСБУ25_2018 Тогда
			
			Если ПоФактическойСтоимости Тогда
				Элементы.РассчитатьСтавкуИлиСтоимость.Заголовок =
					?(Объект.ГрафикНачисленияПроцентовВведенВручную,
						НСтр("ru = 'Рассчитать ставку';
							|en = 'Calculate rate'"),
						НСтр("ru = 'Рассчитать ставку и проценты';
							|en = 'Calculate rate and interest'"));
			Иначе
				Элементы.РассчитатьСтавкуИлиСтоимость.Заголовок =
					?(Объект.ГрафикНачисленияПроцентовВведенВручную,
						НСтр("ru = 'Рассчитать стоимость';
							|en = 'Calculate cost'"),
						НСтр("ru = 'Рассчитать стоимость и проценты';
							|en = 'Calculate cost and interest'"));
			КонецЕсли;
					
		КонецЕсли;
		
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Прочее

	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ ОбновитьВсе Тогда
			
		Форма.СтоимостьРассчитываетсяАвтоматически = 
			СлужебныеПараметрыФормы.ИспользуетсяУчетАрендыПоФСБУ25_2018
			И РеквизитыДоговора.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Аренда");
	
	КонецЕсли;
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ДополнитьЗначенияСвойствЗависимыхРеквизитов_Аренда(Объект, ВспомогательныеРеквизиты, СтруктураИзмененныхРеквизитов, ПараметрыРеквизитовОбъекта) Экспорт

	ОбновитьВсе = СтруктураИзмененныхРеквизитов.Количество() = 0;

	РеквизитыДоговора = ВспомогательныеРеквизиты.РеквизитыДоговора;
	
	УчетЗаБалансом = 
		РеквизитыДоговора.Балансодержатель = ПредопределенноеЗначение("Перечисление.БалансодержательПредметовАренды.Арендодатель")
		И НЕ ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;
	
	ПоФактическойСтоимости = (РеквизитыДоговора.СпособОпределенияСтоимостиАктивов = ПредопределенноеЗначение("Перечисление.СпособыОпределенияСтоимостиПредметовАренды.ПоФактическойСтоимости"));
	
	ПутьКРеквизитамСтоимостиОС = 
		ВспомогательныеРеквизиты.ИмяТабличнойЧастиОС 
		+ ?(ЗначениеЗаполнено(ВспомогательныеРеквизиты.ИмяТабличнойЧастиОС), ".", "");
		
	ПутьКЭлементамСтоимостиОС = ВспомогательныеРеквизиты.ИмяТабличнойЧастиОС;
	
	#Область СтраницаРасчетыПоДоговору
	Если СтруктураИзмененныхРеквизитов.Свойство("ВерсияДокумента24") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") 
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			НЕ ВспомогательныеРеквизиты.ВерсияДокумента24
			И ВспомогательныеРеквизиты.ОтражатьВОперативномУчете;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаУслугПоАренде", 
			"СуммаУслугПоАренде", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаВыкупаПредметовАренды", 
			"СуммаВыкупаПредметовАренды", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаОбеспечительногоПлатежа", 
			"СуммаОбеспечительногоПлатежа", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаПервогоОбеспечительногоПлатежа", 
			"ДатаПервогоОбеспечительногоПлатежа", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаНачалаАренды", 
			"", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаПервогоПлатежа", 
			"ДатаПервогоПлатежа", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаВыкупа", 
			"ДатаВыкупа", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГрафикОплатУслуг", 
			"", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГрафикНачисленияУслуг", 
			"", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
		
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете")
		ИЛИ ОбновитьВсе Тогда

		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И (ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018 
				ИЛИ НЕ УчетЗаБалансом);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаУслугПоАренде", 
			"СуммаУслугПоАренде", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаПервогоПлатежа", 
			"ДатаПервогоПлатежа", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаНДС", 
			"СуммаНДС", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтавкаНДС", 
			"СтавкаНДС", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПериодичностьОплат", 
			"ПериодичностьОплат", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПериодичностьНачислений", 
			"ПериодичностьНачислений", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И РеквизитыДоговора.ЕстьОбеспечительныйПлатеж
			И (ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018 
				ИЛИ НЕ УчетЗаБалансом);
				
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаОбеспечительногоПлатежа", 
			"СуммаОбеспечительногоПлатежа", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаПервогоОбеспечительногоПлатежа", 
			"ДатаПервогоОбеспечительногоПлатежа", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И РеквизитыДоговора.ЕстьВыкупПредметовАренды
			И (ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018 
				ИЛИ НЕ УчетЗаБалансом);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаВыкупаПредметовАренды", 
			"СуммаВыкупаПредметовАренды", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаНДСВыкупаПредметовАренды", 
			"СуммаНДСВыкупаПредметовАренды", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ДатаВыкупа", 
			"ДатаВыкупа", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ВерсияДокумента24") 
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете") 
		ИЛИ ОбновитьВсе Тогда
			
		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете 
			И НЕ ВспомогательныеРеквизиты.ВерсияДокумента24
			И ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СтавкаНДС", 
			"СтавкаНДС", 
			"АвтоОтметкаНезаполненного", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
		
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПериодичностьОплат")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ГрафикОплатУслуг")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете")		
		ИЛИ ОбновитьВсе Тогда

		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И Объект.ПериодичностьОплат <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
			И Объект.ПериодичностьОплат <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.ПустаяСсылка")
			И (ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018 
				ИЛИ НЕ УчетЗаБалансом);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ОплатаУслугиПоАренде", 
			"ОплатаУслугиПоАренде", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
		
	КонецЕсли;
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ПериодичностьНачислений")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ГрафикНачисленияУслуг")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете")		
		ИЛИ ОбновитьВсе Тогда

		ЗначениеСвойства =
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И Объект.ПериодичностьНачислений <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная")
			И Объект.ПериодичностьНачислений <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.ПустаяСсылка")
			И (ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018 
				ИЛИ НЕ УчетЗаБалансом);
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"НачислениеУслугиПоАренде", 
			"НачислениеУслугиПоАренде", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;

	Если СтруктураИзмененныхРеквизитов.Свойство("СтавкаНДС")
		ИЛИ ОбновитьВсе Тогда

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаНДС", 
			"СуммаНДС", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			ВспомогательныеРеквизиты.НезначащаяСтавкаНДС, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаНДСВыкупаПредметовАренды", 
			"СуммаНДСВыкупаПредметовАренды", 
			"ТолькоПросмотрБезОтметкиНезаполненного", 
			ВспомогательныеРеквизиты.НезначащаяСтавкаНДС, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;

	#КонецОбласти
	
	#Область СтраницаОсновныеСредства

	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
			И РеквизитыДоговора.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Аренда")
			И ПоФактическойСтоимости;
	
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			ПутьКРеквизитамСтоимостиОС + "СправедливаяСтоимость", 
			ПутьКЭлементамСтоимостиОС + "СправедливаяСтоимость", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			ПутьКРеквизитамСтоимостиОС + "НегарантированнаяСтоимость", 
			ПутьКЭлементамСтоимостиОС + "НегарантированнаяСтоимость", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018
			И РеквизитыДоговора.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Аренда");
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			ПутьКРеквизитамСтоимостиОС + "Стоимость", 
			ПутьКЭлементамСтоимостиОС + "Стоимость", 
			"ТолькоПросмотрБезОчистки", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			ПутьКРеквизитамСтоимостиОС + "Стоимость", 
			ПутьКЭлементамСтоимостиОС + "Стоимость", 
			"АвтоОтметкаНезаполненного", 
			НЕ ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
			
	#КонецОбласти
	
	#Область СтраницаДисконтирование
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете")
		ИЛИ ОбновитьВсе Тогда
		
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"СуммаПроцентов", 
			"СуммаПроцентов", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПроцентнаяСтавка", 
			"ПроцентнаяСтавка", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПриведеннаяСтоимость", 
			"ПриведеннаяСтоимость", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И ПоФактическойСтоимости
			И ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;
		
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ПроцентнаяСтавка", 
			"ПроцентнаяСтавка", 
			"ТолькоПросмотрБезОчистки", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
	КонецЕсли;
	
	#КонецОбласти
	
	#Область ГрафикОплатИНачислений
	
	Если СтруктураИзмененныхРеквизитов.Свойство("Дата")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Организация")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("Договор")
		ИЛИ СтруктураИзмененныхРеквизитов.Свойство("ОтражатьВОперативномУчете")
		ИЛИ ОбновитьВсе Тогда
	
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И РеквизитыДоговора.ЕстьОбеспечительныйПлатеж;

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГрафикОплатУслуг.ОбеспечительныйПлатеж", 
			"", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГрафикНачисленияУслуг.ОбеспечительныйПлатеж", 
			"", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//	
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И РеквизитыДоговора.ЕстьВыкупПредметовАренды;

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГрафикОплатУслуг.ВыкупнаяСтоимость", 
			"", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);
			
		//
		ЗначениеСвойства = 
			ВспомогательныеРеквизиты.ОтражатьВОперативномУчете
			И ВспомогательныеРеквизиты.ИспользуетсяУчетАрендыПоФСБУ25_2018;

		ОбщегоНазначенияУТКлиентСервер.ДобавитьПараметрыРеквизитаОбъекта(
			"ГрафикНачисленияПроцентов", 
			"", 
			"Видимость", 
			ЗначениеСвойства, 
			ПараметрыРеквизитовОбъекта);

	КонецЕсли;

	#КонецОбласти
	
КонецПроцедуры

// Формирует сводные данные по графикам.
// 
// Параметры:
// 	Объект - ДокументОбъект.ЗаключениеДоговораАренды, ДокументОбъект.ИзменениеУсловийДоговораАренды -
// 	РеквизитыДоговора - Структура - 
// 	
// Возвращаемое значение:
// 	Структура - содержит свойства:
// 		* ГрафикОплатУслуг - см. ПараметрыГрафикаОплатУслуг
// 		* ГрафикНачисленияУслуг - см. ПараметрыГрафикаНачисленияУслуг
// 		* ГрафикиЗаполнены - Булево -
Функция ДанныеГрафиков(Объект, РеквизитыДоговора) Экспорт
	
	ПараметрыГрафикаОплатУслуг = ПараметрыГрафикаОплатУслуг(Объект.ГрафикОплатУслуг, Объект.ДатаНачалаАренды);
	ПараметрыГрафикаНачисленияУслуг = ПараметрыГрафикаНачисленияУслуг(Объект.ГрафикНачисленияУслуг, Объект.СуммаНДСВыкупаПредметовАренды);
	
	ГрафикиЗаполнены = 
		Объект.ГрафикОплатУслуг.Количество() <> 0
		ИЛИ Объект.ГрафикНачисленияУслуг.Количество() <> 0;
	
	ДанныеГрафиков = Новый Структура;
	ДанныеГрафиков.Вставить("ГрафикОплатУслуг", ПараметрыГрафикаОплатУслуг);
	ДанныеГрафиков.Вставить("ГрафикНачисленияУслуг", ПараметрыГрафикаНачисленияУслуг);
	ДанныеГрафиков.Вставить("ГрафикиЗаполнены", ГрафикиЗаполнены);
		
	Возврат ДанныеГрафиков;
	
КонецФункции

// Определяет параметры графика оплат услуг.
// 
// Параметры:
//  ГрафикОплатУслуг - ДокументТабличнаяЧасть.ЗаключениеДоговораАренды.ГрафикОплатУслуг, ДокументТабличнаяЧасть.ИзменениеУсловийДоговораАренды.ГрафикОплатУслуг - График оплат услуг
//  ДатаНачала - Дата - Дата начала аренды.
// 
// Возвращаемое значение:
//  Структура - Параметры графика оплат услуг:
// 		* ИтогоУслугаПоАренде - Число -
// 		* ИтогоОбеспечительныйПлатеж - Число -
// 		* ИтогоВыкупнаяСтоимость - Число -
// 		* ИтогоСуммаНДСВыкупаПредметовАренды - Число -
// 		* ДатаПервогоОбеспечительногоПлатежа - Дата -
// 		* ДатаПервогоПлатежа - Дата -
// 		* ОплатаУслугиПоАренде - Число -
// 		* Периодичность - Неопределено -
Функция ПараметрыГрафикаОплатУслуг(ГрафикОплатУслуг, ДатаНачала) Экспорт

	ПараметрыГрафика = Новый Структура;
	ПараметрыГрафика.Вставить("ИтогоУслугаПоАренде", 0);
	ПараметрыГрафика.Вставить("ИтогоОбеспечительныйПлатеж", 0);
	ПараметрыГрафика.Вставить("ИтогоВыкупнаяСтоимость", 0);
	ПараметрыГрафика.Вставить("ИтогоСуммаНДСВыкупаПредметовАренды", 0);
	ПараметрыГрафика.Вставить("ДатаПервогоОбеспечительногоПлатежа", '000101010000');
	ПараметрыГрафика.Вставить("ДатаПервогоПлатежа", '000101010000');
	ПараметрыГрафика.Вставить("ОплатаУслугиПоАренде", 0);
	ПараметрыГрафика.Вставить("ОплатаВыкупнойСтоимости", 0);
	ПараметрыГрафика.Вставить("Периодичность", Неопределено);

	ПредыдущаяДата = Неопределено;
	
	Для Каждого СтрокаГрафика Из ГрафикОплатУслуг Цикл
		
		// Итоговые суммы
		ПараметрыГрафика.ИтогоУслугаПоАренде = ПараметрыГрафика.ИтогоУслугаПоАренде + СтрокаГрафика.УслугаПоАренде;		
		ПараметрыГрафика.ИтогоОбеспечительныйПлатеж = ПараметрыГрафика.ИтогоОбеспечительныйПлатеж + СтрокаГрафика.ОбеспечительныйПлатеж;		
		ПараметрыГрафика.ИтогоВыкупнаяСтоимость = ПараметрыГрафика.ИтогоВыкупнаяСтоимость + СтрокаГрафика.ВыкупнаяСтоимость;
		ПараметрыГрафика.ИтогоСуммаНДСВыкупаПредметовАренды = ПараметрыГрафика.ИтогоСуммаНДСВыкупаПредметовАренды + СтрокаГрафика.ВыкупнаяСтоимостьНДС;

		// ДатаПервогоОбеспечительногоПлатежа
		Если ЗначениеЗаполнено(СтрокаГрафика.Дата)
			И СтрокаГрафика.ОбеспечительныйПлатеж <> 0 Тогда
				
			ПараметрыГрафика.ДатаПервогоОбеспечительногоПлатежа = 
				?(ПараметрыГрафика.ДатаПервогоОбеспечительногоПлатежа <> '000101010000', 
					Мин(СтрокаГрафика.Дата, ПараметрыГрафика.ДатаПервогоОбеспечительногоПлатежа), 
					СтрокаГрафика.Дата);
					
		КонецЕсли;
		
		// ДатаПервогоПлатежа
		Если ЗначениеЗаполнено(СтрокаГрафика.Дата)
			И СтрокаГрафика.УслугаПоАренде <> 0 Тогда
				
			ПараметрыГрафика.ДатаПервогоПлатежа = 
				?(ПараметрыГрафика.ДатаПервогоПлатежа <> '000101010000', 
					Мин(СтрокаГрафика.Дата, ПараметрыГрафика.ДатаПервогоПлатежа), 
					СтрокаГрафика.Дата);
					
		КонецЕсли;
		
		Если СтрокаГрафика.Дата >= ДатаНачала Тогда
			
			// Периодическая сумма оплаты суммы услуг
			Если СтрокаГрафика.УслугаПоАренде <> 0
				И ПараметрыГрафика.ОплатаУслугиПоАренде <> 0
				И ПараметрыГрафика.ОплатаУслугиПоАренде <> Неопределено
				И ПараметрыГрафика.ОплатаУслугиПоАренде <> СтрокаГрафика.УслугаПоАренде Тогда
					
				ПараметрыГрафика.ОплатаУслугиПоАренде = Неопределено; // Произвольные суммы
			
			ИначеЕсли СтрокаГрафика.УслугаПоАренде <> 0
				И ПараметрыГрафика.ОплатаУслугиПоАренде <> Неопределено Тогда
				
				ПараметрыГрафика.ОплатаУслугиПоАренде = СтрокаГрафика.УслугаПоАренде;		
			КонецЕсли;
			
			// Периодическая сумма оплаты выкупа
			Если СтрокаГрафика.ВыкупнаяСтоимость <> 0
				И ПараметрыГрафика.ОплатаУслугиПоАренде <> 0
				И ПараметрыГрафика.ОплатаУслугиПоАренде <> Неопределено
				И ПараметрыГрафика.ОплатаУслугиПоАренде <> СтрокаГрафика.ВыкупнаяСтоимость Тогда
					
				ПараметрыГрафика.ОплатаВыкупнойСтоимости = Неопределено; // Произвольные суммы
			
			ИначеЕсли СтрокаГрафика.ВыкупнаяСтоимость <> 0
				И ПараметрыГрафика.ОплатаВыкупнойСтоимости <> Неопределено Тогда
				
				ПараметрыГрафика.ОплатаВыкупнойСтоимости = СтрокаГрафика.ВыкупнаяСтоимость;		
			КонецЕсли;
			
			// Периодичность
			Если ПараметрыГрафика.ОплатаУслугиПоАренде <> Неопределено
				И ПараметрыГрафика.Периодичность <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная") Тогда
			
				Если ПредыдущаяДата <> Неопределено Тогда
				
					Периодичность = ПериодичностьГрафика(ПредыдущаяДата, СтрокаГрафика.Дата);
					
					Если ПараметрыГрафика.Периодичность = Неопределено Тогда
						ПараметрыГрафика.Периодичность = Периодичность;
					ИначеЕсли ПараметрыГрафика.Периодичность <> Периодичность Тогда
						ПараметрыГрафика.Периодичность = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная");
					КонецЕсли;
	
				КонецЕсли;
				
				ПредыдущаяДата = СтрокаГрафика.Дата;
				
			Иначе
				
				ПараметрыГрафика.Периодичность = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная");
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
	
	Возврат ПараметрыГрафика;
	
КонецФункции

// Определяет параметры графика начисления услуг.
// 
// Параметры:
//  ГрафикНачисленияУслуг - ДокументТабличнаяЧасть.ЗаключениеДоговораАренды.ГрафикНачисленияУслуг, ДокументТабличнаяЧасть.ИзменениеУсловийДоговораАренды.ГрафикНачисленияУслуг - График начисления услуг
//  СуммаНДСВыкупаПредметовАренды - Число - 
// 
// Возвращаемое значение:
//  Структура - Параметры графика оплат услуг:
// 		* ИтогоУслугаПоАренде - Число -
// 		* ИтогоОбеспечительныйПлатеж - Число -
// 		* ИтогоСуммаНДС - Число -
// 		* НачислениеУслугиПоАренде - Число -
// 		* Периодичность - Неопределено -
Функция ПараметрыГрафикаНачисленияУслуг(ГрафикНачисленияУслуг, СуммаНДСВыкупаПредметовАренды) Экспорт
	
	ПараметрыГрафика = Новый Структура;
	ПараметрыГрафика.Вставить("ИтогоУслугаПоАренде", 0);
	ПараметрыГрафика.Вставить("ИтогоОбеспечительныйПлатеж", 0);
	ПараметрыГрафика.Вставить("ИтогоСуммаНДС", 0);
	ПараметрыГрафика.Вставить("НачислениеУслугиПоАренде", 0);
	ПараметрыГрафика.Вставить("Периодичность", Неопределено);
	
	ПредыдущаяДата = Неопределено;
	
	Для Каждого СтрокаГрафика Из ГрафикНачисленияУслуг Цикл
		
		// Итоговые суммы
		ПараметрыГрафика.ИтогоУслугаПоАренде = ПараметрыГрафика.ИтогоУслугаПоАренде + СтрокаГрафика.УслугаПоАренде;		
		ПараметрыГрафика.ИтогоОбеспечительныйПлатеж = ПараметрыГрафика.ИтогоОбеспечительныйПлатеж + СтрокаГрафика.ОбеспечительныйПлатеж;		
		ПараметрыГрафика.ИтогоСуммаНДС = ПараметрыГрафика.ИтогоСуммаНДС + СтрокаГрафика.УслугаПоАрендеНДС + СтрокаГрафика.ОбеспечительныйПлатежНДС;

		Если ЗначениеЗаполнено(СтрокаГрафика.Дата) Тогда
			
			// Периодическая сумма оплаты суммы услуг
			Если СтрокаГрафика.УслугаПоАренде <> 0
				И ПараметрыГрафика.НачислениеУслугиПоАренде <> 0
				И ПараметрыГрафика.НачислениеУслугиПоАренде <> Неопределено
				И ПараметрыГрафика.НачислениеУслугиПоАренде <> СтрокаГрафика.УслугаПоАренде Тогда
					
				ПараметрыГрафика.НачислениеУслугиПоАренде = Неопределено; // Произвольные суммы
			
			ИначеЕсли СтрокаГрафика.УслугаПоАренде <> 0
				И ПараметрыГрафика.НачислениеУслугиПоАренде <> Неопределено Тогда
				
				ПараметрыГрафика.НачислениеУслугиПоАренде = СтрокаГрафика.УслугаПоАренде;		
			КонецЕсли;
						
			// Периодичность
			Если ПараметрыГрафика.НачислениеУслугиПоАренде <> Неопределено
				И ПараметрыГрафика.Периодичность <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная") Тогда
			
				Если ПредыдущаяДата <> Неопределено Тогда
				
					Периодичность = ПериодичностьГрафика(ПредыдущаяДата, СтрокаГрафика.Дата);
					
					Если ПараметрыГрафика.Периодичность = Неопределено Тогда
						ПараметрыГрафика.Периодичность = Периодичность;
					ИначеЕсли ПараметрыГрафика.Периодичность <> Периодичность Тогда
						ПараметрыГрафика.Периодичность = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная");
					КонецЕсли;
	
				КонецЕсли;
				
				ПредыдущаяДата = СтрокаГрафика.Дата;
				
			Иначе
				
				ПараметрыГрафика.Периодичность = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная");
				
			КонецЕсли;
			
		КонецЕсли;

	КонецЦикла;
	
	ПараметрыГрафика.ИтогоСуммаНДС = ПараметрыГрафика.ИтогоСуммаНДС + СуммаНДСВыкупаПредметовАренды;
	
	Возврат ПараметрыГрафика;
	
КонецФункции

// Определяет следующую дату.
// 
// Параметры:
// 	ТекущаяДата - Дата - 
// 	ПериодичностьГрафика - ПеречислениеСсылка.ПериодичностьГрафика -
// 	 
// Возвращаемое значение:
// 	Дата - 
Функция СледующаяДатаГрафика(ТекущаяДата, ПериодичностьГрафика) Экспорт
	
	Если ТекущаяДата = НачалоМесяца(ТекущаяДата) Тогда
		ВидДаты = "НачалоМесяца";
	ИначеЕсли КонецДня(ТекущаяДата) = КонецМесяца(ТекущаяДата) Тогда
		ВидДаты = "КонецМесяца";
	Иначе
		ВидДаты = "День";
	КонецЕсли;

	ДатаНачала_День = День(ТекущаяДата);

	Если ПериодичностьГрафика = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.День") Тогда
		
		СледующаяДата = НачалоДня(ТекущаяДата) + 86400;
		
	ИначеЕсли ПериодичностьГрафика = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Неделя") Тогда
		
		СледующаяДата = НачалоДня(ТекущаяДата) + 604800;
	
	ИначеЕсли ПериодичностьГрафика = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Месяц") Тогда
		
		СледующаяДата = ДобавитьМесяц(НачалоМесяца(ТекущаяДата), 1);
		
		Если ВидДаты = "КонецМесяца" Тогда
			СледующаяДата = КонецМесяца(СледующаяДата);
		ИначеЕсли ВидДаты = "День" Тогда
			СледующаяДата = СледующаяДата + 86400 * (ДатаНачала_День - 1);
		КонецЕсли;
		
		СледующаяДата = НачалоДня(СледующаяДата);
		
	ИначеЕсли ПериодичностьГрафика = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Квартал") Тогда
		
		СледующаяДата = ДобавитьМесяц(НачалоМесяца(ТекущаяДата), 3);
	
		Если ВидДаты = "КонецМесяца" Тогда
			СледующаяДата = КонецМесяца(СледующаяДата);
		ИначеЕсли ВидДаты = "День" Тогда
			СледующаяДата = СледующаяДата + 86400 * (ДатаНачала_День - 1);
		КонецЕсли;

		СледующаяДата = НачалоДня(СледующаяДата);

	ИначеЕсли ПериодичностьГрафика = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Полугодие") Тогда

		СледующаяДата = ДобавитьМесяц(НачалоМесяца(ТекущаяДата), 6);
	
		Если ВидДаты = "КонецМесяца" Тогда
			СледующаяДата = КонецМесяца(СледующаяДата);
		ИначеЕсли ВидДаты = "День" Тогда
			СледующаяДата = СледующаяДата + 86400 * (ДатаНачала_День - 1);
		КонецЕсли;

		СледующаяДата = НачалоДня(СледующаяДата);

	ИначеЕсли ПериодичностьГрафика = ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Год") Тогда

		СледующаяДата = ДобавитьМесяц(НачалоМесяца(ТекущаяДата), 12);
	
		Если ВидДаты = "КонецМесяца" Тогда
			СледующаяДата = КонецМесяца(СледующаяДата);
		ИначеЕсли ВидДаты = "День" Тогда
			СледующаяДата = СледующаяДата + 86400 * (ДатаНачала_День - 1);
		КонецЕсли;
		
		СледующаяДата = НачалоДня(СледующаяДата);

	Иначе
		
		СледующаяДата = '000101010000';
		
	КонецЕсли;
	
	Возврат СледующаяДата;
	
КонецФункции

// Проверяет соответствие расчетов и графика оплат и начислений.
// 
// Параметры:
// 	Объект - ДокументОбъект.ЗаключениеДоговораАренды, ДокументОбъект.ИзменениеУсловийДоговораАренды -
// 	РеквизитыДоговора - Структура -
// 	НачалоУчетаАрендыПоФСБУ25_2018 - Дата - 
// 	ВалютаДокументаПредставление - Строка -
// 	
// Возвращаемое значение:
// 	Структура - содержит свойства:
// 		* СуммаОбеспечительногоПлатежа - Строка, Неопределено -
// 		* СуммаУслугПоАренде - Строка, Неопределено -
// 		* СуммаВыкупаПредметовАренды - Строка, Неопределено -
// 		* СуммаНДС - Строка, Неопределено -
// 		* ДатаПервогоОбеспечительногоПлатежа - Строка, Неопределено -
// 		* ДатаПервогоПлатежа - Строка, Неопределено -
// 		* ПериодичностьОплат - Строка, Неопределено -
// 		* ПериодичностьНачислений - Строка, Неопределено -
// 		* ОплатаУслугиПоАренде - Строка, Неопределено -
// 		* НачислениеУслугиПоАренде - Строка, Неопределено -
// 		* ЕстьРасхождения - Булево -
Функция ПроверитьСоответствиеГрафиков(Объект, РеквизитыДоговора, НачалоУчетаАрендыПоФСБУ25_2018, ВалютаДокументаПредставление) Экспорт
	
	ДанныеГрафиков = ДанныеГрафиков(Объект, РеквизитыДоговора);
	
	РезультатПроверки = Новый Структура;
	РезультатПроверки.Вставить("СуммаОбеспечительногоПлатежа", Неопределено);
	РезультатПроверки.Вставить("СуммаУслугПоАренде", Неопределено);
	РезультатПроверки.Вставить("СуммаВыкупаПредметовАренды", Неопределено);
	РезультатПроверки.Вставить("СуммаНДС", Неопределено);
	РезультатПроверки.Вставить("СуммаНДСВыкупаПредметовАренды", Неопределено);
	РезультатПроверки.Вставить("ДатаПервогоОбеспечительногоПлатежа", Неопределено);
	РезультатПроверки.Вставить("ДатаПервогоПлатежа", Неопределено);
	РезультатПроверки.Вставить("ДатаВыкупа", Неопределено);
	РезультатПроверки.Вставить("ПериодичностьОплат", Неопределено);
	РезультатПроверки.Вставить("ПериодичностьНачислений", Неопределено);
	РезультатПроверки.Вставить("ОплатаУслугиПоАренде", Неопределено);
	РезультатПроверки.Вставить("НачислениеУслугиПоАренде", Неопределено);
	РезультатПроверки.Вставить("ЕстьРасхождения", Ложь);
	
	Если НЕ ДанныеГрафиков.ГрафикиЗаполнены Тогда
		Возврат РезультатПроверки;
	КонецЕсли;
	
	// СуммаОбеспечительногоПлатежа
	РезультатПроверки.СуммаОбеспечительногоПлатежа = СформироватьТекстПроверкиСуммыГрафика(
						Объект.СуммаОбеспечительногоПлатежа, 
						ДанныеГрафиков.ГрафикОплатУслуг.ИтогоОбеспечительныйПлатеж, 
						ДанныеГрафиков.ГрафикНачисленияУслуг.ИтогоОбеспечительныйПлатеж, 
						ВалютаДокументаПредставление);
	
	// СуммаУслугПоАренде 
	РезультатПроверки.СуммаУслугПоАренде = СформироватьТекстПроверкиСуммыГрафика(
						Объект.СуммаУслугПоАренде, 
						ДанныеГрафиков.ГрафикОплатУслуг.ИтогоУслугаПоАренде, 
						ДанныеГрафиков.ГрафикНачисленияУслуг.ИтогоУслугаПоАренде, 
						ВалютаДокументаПредставление);
	
	// СуммаВыкупаПредметовАренды 
	РезультатПроверки.СуммаВыкупаПредметовАренды = СформироватьТекстПроверкиСуммыГрафика(
						Объект.СуммаВыкупаПредметовАренды, 
						ДанныеГрафиков.ГрафикОплатУслуг.ИтогоВыкупнаяСтоимость, 
						Объект.СуммаВыкупаПредметовАренды, 
						ВалютаДокументаПредставление);
	
	// СуммаНДС, СуммаНДСВыкупаПредметовАренды
	Если ЗначениеЗаполнено(Объект.СтавкаНДС) Тогда
		
		РезультатПроверки.СуммаНДС = СформироватьТекстПроверкиСуммыГрафика(
							Объект.СуммаНДС, 
							Объект.СуммаНДС, 
							ДанныеГрафиков.ГрафикНачисленияУслуг.ИтогоСуммаНДС, 
							ВалютаДокументаПредставление);
							
		РезультатПроверки.СуммаНДСВыкупаПредметовАренды = СформироватьТекстПроверкиСуммыГрафика(
							Объект.СуммаНДСВыкупаПредметовАренды, 
							ДанныеГрафиков.ГрафикОплатУслуг.ИтогоСуммаНДСВыкупаПредметовАренды, 
							Объект.СуммаНДСВыкупаПредметовАренды, 
							ВалютаДокументаПредставление);
							
	КонецЕсли;
	
	// ОплатаУслугиПоАренде
	Если ЗначениеЗаполнено(Объект.ПериодичностьОплат)
		И Объект.ПериодичностьОплат <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная") Тогда
			
		РезультатПроверки.ОплатаУслугиПоАренде = СформироватьТекстПроверкиСуммыГрафика(
							Объект.ОплатаУслугиПоАренде, 
							ДанныеГрафиков.ГрафикОплатУслуг.ОплатаУслугиПоАренде, 
							Объект.ОплатаУслугиПоАренде, 
							ВалютаДокументаПредставление);
	КонецЕсли; 
	
	// НачислениеУслугиПоАренде 
	Если ЗначениеЗаполнено(Объект.ПериодичностьНачислений)
		И Объект.ПериодичностьНачислений <> ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная") Тогда
			
		РезультатПроверки.НачислениеУслугиПоАренде = СформироватьТекстПроверкиСуммыГрафика(
							Объект.НачислениеУслугиПоАренде, 
							Объект.НачислениеУслугиПоАренде, 
							ДанныеГрафиков.ГрафикНачисленияУслуг.НачислениеУслугиПоАренде, 
							ВалютаДокументаПредставление);
	КонецЕсли; 
						
	// ПериодичностьОплат
	РезультатПроверки.ПериодичностьОплат = СформироватьТекстПроверкиПериодичностиГрафика(
						Объект.ПериодичностьОплат, 
						ДанныеГрафиков.ГрафикОплатУслуг.Периодичность);
	
	// ПериодичностьНачислений
	РезультатПроверки.ПериодичностьНачислений = СформироватьТекстПроверкиПериодичностиГрафика(
						Объект.ПериодичностьНачислений, 
						ДанныеГрафиков.ГрафикНачисленияУслуг.Периодичность);
	
	// ДатаПервогоОбеспечительногоПлатежа
	Если ДанныеГрафиков.ГрафикОплатУслуг.ДатаПервогоОбеспечительногоПлатежа <> Объект.ДатаПервогоОбеспечительногоПлатежа
		И ДанныеГрафиков.ГрафикОплатУслуг.ДатаПервогоОбеспечительногоПлатежа <> Неопределено Тогда
			
		ТекстПроверки = НСтр("ru = 'Дата не совпадает с графиком оплат:
		|  - по графику дата %1';
		|en = 'Date does not match the payment schedule: 
		| - according to the schedule, date is %1'");
		ТекстПроверки = СтрШаблон(ТекстПроверки, Формат(ДанныеГрафиков.ГрафикОплатУслуг.ДатаПервогоОбеспечительногоПлатежа, "ДЛФ=D;"));
								
		РезультатПроверки.ДатаПервогоОбеспечительногоПлатежа = ТекстПроверки;
	КонецЕсли; 
	
	// ДатаПервогоОбеспечительногоПлатежа
	Если ДанныеГрафиков.ГрафикОплатУслуг.ДатаПервогоПлатежа <> Объект.ДатаПервогоПлатежа
		И ДанныеГрафиков.ГрафикОплатУслуг.ДатаПервогоПлатежа <> Неопределено Тогда
			
		ТекстПроверки = НСтр("ru = 'Дата не совпадает с графиком оплат:
		|  - по графику дата %1';
		|en = 'Date does not match the payment schedule: 
		| - according to the schedule, date is %1'");
		ТекстПроверки = СтрШаблон(ТекстПроверки, Формат(ДанныеГрафиков.ГрафикОплатУслуг.ДатаПервогоПлатежа, "ДЛФ=D;"));
								
		РезультатПроверки.ДатаПервогоПлатежа = ТекстПроверки;
	КонецЕсли; 
	
	РезультатПроверки.ЕстьРасхождения =
		РезультатПроверки.СуммаОбеспечительногоПлатежа <> Неопределено
		ИЛИ РезультатПроверки.СуммаУслугПоАренде <> Неопределено
		ИЛИ РезультатПроверки.СуммаВыкупаПредметовАренды <> Неопределено
		ИЛИ РезультатПроверки.СуммаНДС <> Неопределено
		ИЛИ РезультатПроверки.СуммаНДСВыкупаПредметовАренды <> Неопределено
		ИЛИ РезультатПроверки.ДатаПервогоОбеспечительногоПлатежа <> Неопределено
		ИЛИ РезультатПроверки.ДатаПервогоПлатежа <> Неопределено
		ИЛИ РезультатПроверки.ДатаВыкупа <> Неопределено
		ИЛИ РезультатПроверки.ПериодичностьОплат <> Неопределено
		ИЛИ РезультатПроверки.ПериодичностьНачислений <> Неопределено
		ИЛИ РезультатПроверки.ОплатаУслугиПоАренде <> Неопределено
		ИЛИ РезультатПроверки.НачислениеУслугиПоАренде <> Неопределено;
		
	Возврат РезультатПроверки;
	
КонецФункции

// Заполняет сумму НДС в документе аренды.
// 
// Параметры:
// 	Объект - ДокументОбъект.ЗаключениеДоговораАренды, ДокументОбъект.ИзменениеУсловийДоговораАренды -
Процедура ПересчитатьСуммуНДСВДокументеАренды(Объект) Экспорт

	Объект.СуммаНДС = СуммаНДСВДокументеАренды(
						Объект.ГрафикНачисленияУслуг,
						Объект.СуммаУслугПоАренде, 
						Объект.СуммаОбеспечительногоПлатежа, 
						Объект.СуммаНДСВыкупаПредметовАренды, 
						Объект.СтавкаНДС);
	
КонецПроцедуры

// Рассчитывает сумму НДС по графику начислений.
// 
// Параметры:
// 	ГрафикНачисленияУслуг - ДанныеФормыКоллекция -
// 	СуммаУслугПоАренде - Число -
// 	СуммаОбеспечительногоПлатежа - Число -
// 	СуммаНДСВыкупаПредметовАренды - Число
// 	СтавкаНДС - СправочникСсылка.СтавкиНДС -
// 	  
// Возвращаемое значение:
// 	Число - Сумма НДС
Функция СуммаНДСВДокументеАренды(ГрафикНачисленияУслуг, СуммаУслугПоАренде, СуммаОбеспечительногоПлатежа, СуммаНДСВыкупаПредметовАренды, СтавкаНДС) Экспорт

	ТекПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
	
	Если ТекПроцентНДС = 0 Тогда
		Возврат 0;
	КонецЕсли;

	Если ГрафикНачисленияУслуг = Неопределено Тогда
		ГрафикНачисленияУслуг = ГрафикНачисленияУслуг;
	КонецЕсли;
	
	СуммаНДС = 0;
	Если ГрафикНачисленияУслуг.Количество() <> 0 Тогда
		
		Для Каждого СтрокаГрафика Из ГрафикНачисленияУслуг Цикл
			СуммаНДС = СуммаНДС + СтрокаГрафика.УслугаПоАрендеНДС + СтрокаГрафика.ОбеспечительныйПлатежНДС;
		КонецЦикла;
		
	Иначе
	
		СуммаНДС = 
			УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СуммаОбеспечительногоПлатежа, ТекПроцентНДС, Истина)
			+ УчетНДСУПКлиентСервер.РассчитатьСуммуНДС(СуммаУслугПоАренде, ТекПроцентНДС, Истина);
		
	КонецЕсли;
	
	СуммаНДС = СуммаНДС + СуммаНДСВыкупаПредметовАренды;
					
	Возврат СуммаНДС;
	
КонецФункции

// Заполняет сумму и сумму с НДС в документе аренды.
// 
// Параметры:
// 	Объект - ДокументОбъект.ЗаключениеДоговораАренды, ДокументОбъект.ИзменениеУсловийДоговораАренды -
Процедура ПересчитатьСуммуДокументаАренды(Объект) Экспорт
	
	Объект.Сумма = 
		Объект.СуммаУслугПоАренде
		+ Объект.СуммаОбеспечительногоПлатежа
		+ Объект.СуммаВыкупаПредметовАренды;

	Объект.СуммаСНДС = Объект.Сумма;

КонецПроцедуры

Процедура УстановитьВидимостьИдикатораПроверкиГрафика(ЭлементИндикатор, РезультатПроверки)
	
	Если РезультатПроверки = Неопределено Тогда
		ЭлементИндикатор.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ЭлементИндикатор.Видимость = Истина;
	ЭлементИндикатор.Подсказка = РезультатПроверки;
	
КонецПроцедуры

Функция СформироватьТекстПроверкиСуммыГрафика(Сумма, ИтогоГрафикОплатУслуг, ИтогоГрафикНачисленияУслуг, ВалютаДокументаПредставление)
	
	ТекстПроверки = Неопределено;
	
	Если Сумма <> ИтогоГрафикОплатУслуг	
		И Сумма <> ИтогоГрафикНачисленияУслуг
		И ИтогоГрафикОплатУслуг <> Неопределено	
		И ИтогоГрафикНачисленияУслуг <> Неопределено Тогда
		
		ТекстПроверки = НСтр("ru = 'Сумма не совпадает с графиком оплат и начислений:
		|  - по графику оплат сумма %1 %2
		|  - по графику начислений сумма %3 %4';
		|en = 'The amount does not match the schedule of payments and accruals:
		| - according to the schedule of payments, amount is %1 %2
		| - according to the schedule of accruals, amount is %3 %4'");
		ТекстПроверки = СтрШаблон(ТекстПроверки, 
								Формат(ИтогоГрафикОплатУслуг, "ЧДЦ=2; ЧН=0;"),
								ВалютаДокументаПредставление,
								Формат(ИтогоГрафикНачисленияУслуг, "ЧДЦ=2; ЧН=0;"),
								ВалютаДокументаПредставление);
		
	ИначеЕсли Сумма <> ИтогоГрафикОплатУслуг Тогда
		
		Если ИтогоГрафикОплатУслуг <> Неопределено Тогда
			
			ТекстПроверки = НСтр("ru = 'Сумма не совпадает с графиком оплат:
			|  - по графику оплат сумма %1 %2';
			|en = 'The amount does not match the payment schedule:
			| - according to the payment schedule, the amount is %1 %2'");
			
			ТекстПроверки = СтрШаблон(ТекстПроверки, 
									Формат(ИтогоГрафикОплатУслуг, "ЧДЦ=2; ЧН=0;"),
									ВалютаДокументаПредставление);
		Иначе
			
			ТекстПроверки = НСтр("ru = 'Сумма не совпадает с графиком оплат:
			|  - по графику оплат сумма произвольная';
			|en = 'The amount does not match the payment schedule:
			| - according to the payment schedule, the amount is arbitrary'");
			
		КонецЕсли;
		
	ИначеЕсли Сумма <> ИтогоГрафикНачисленияУслуг Тогда
		
		Если ИтогоГрафикНачисленияУслуг <> Неопределено Тогда
			
			ТекстПроверки = НСтр("ru = 'Сумма не совпадает с графиком начислений:
			|  - по графику начислений сумма %1 %2';
			|en = 'The amount does not match the accruals schedule:
			| - according to the accruals schedule, the amount is %1 %2'");
			ТекстПроверки = СтрШаблон(ТекстПроверки, 
									Формат(ИтогоГрафикНачисленияУслуг, "ЧДЦ=2; ЧН=0;"),
									ВалютаДокументаПредставление);
		Иначе
		
			ТекстПроверки = НСтр("ru = 'Сумма не совпадает с графиком начислений:
			|  - по графику начислений сумма произвольная';
			|en = 'The amount does not match the accruals schedule:
			| - according to the accruals schedule, the amount is arbitrary'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекстПроверки;
	
КонецФункции

Функция СформироватьТекстПроверкиПериодичностиГрафика(Периодичность, ПериодичностьПоГрафику)

	ТекстПроверки = Неопределено;
	
	Если Периодичность <> ПериодичностьПоГрафику
		И ПериодичностьПоГрафику <> Неопределено Тогда
		
		ТекстПроверки = НСтр("ru = 'Периодичность не совпадает с графиком:
		|- по графику периодичность ""%1""';
		|en = 'The frequency does not match the schedule: 
		|- according to the schedule, the frequency is ""%1""'");
		ТекстПроверки = СтрШаблон(ТекстПроверки, Строка(ПериодичностьПоГрафику));
		
	КонецЕсли;
	
	Возврат ТекстПроверки;
	
КонецФункции

Функция ПериодичностьГрафика(ПредыдущаяДата, ТекущаяДата)

	СписокПериодичность = Новый Массив;
	СписокПериодичность.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.День"));
	СписокПериодичность.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Неделя"));
	СписокПериодичность.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Месяц"));
	СписокПериодичность.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Квартал"));
	СписокПериодичность.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Полугодие"));
	СписокПериодичность.Добавить(ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Год"));

	Для Сч = 0 По СписокПериодичность.ВГраница() Цикл
		
		Периодичность = СписокПериодичность[Сч];
		
		Если ТекущаяДата = СледующаяДатаГрафика(ПредыдущаяДата, Периодичность) Тогда
			Возврат Периодичность;
		КонецЕсли;
		 
	КонецЦикла;
	
	Возврат ПредопределенноеЗначение("Перечисление.ПериодичностьГрафика.Произвольная");
	
КонецФункции

Функция ПриведеннаяСтоимость(СтоимостьПредметовАренды, ГрафикОплатУслуг, ДатаНачалаАренды) Экспорт
	
	АвансыДоНачалаАрендыБезНДС = 0;
		
	Для Каждого СтрокаГрафика Из ГрафикОплатУслуг Цикл
		
		Если СтрокаГрафика.Дата >= ДатаНачалаАренды Тогда
			Продолжить;
		КонецЕсли;
		
		АвансыДоНачалаАрендыБезНДС =
			АвансыДоНачалаАрендыБезНДС 
			+ СтрокаГрафика.ОбеспечительныйПлатеж - СтрокаГрафика.ОбеспечительныйПлатежНДС
			+ СтрокаГрафика.УслугаПоАренде - СтрокаГрафика.УслугаПоАрендеНДС
			+ СтрокаГрафика.ВыкупнаяСтоимость - СтрокаГрафика.ВыкупнаяСтоимостьНДС;
		
	КонецЦикла;
	
	ПриведеннаяСтоимость = Макс(СтоимостьПредметовАренды - АвансыДоНачалаАрендыБезНДС, 0);
	
	Возврат ПриведеннаяСтоимость;
	
КонецФункции

Функция СтоимостьПредметовАренды(Объект, РеквизитыДоговора, ИмяТабличнойЧастиОС) Экспорт
	
	Если РеквизитыДоговора.ТипДоговора = ПредопределенноеЗначение("Перечисление.ТипыДоговоровАренды.Аренда")
		И РеквизитыДоговора.СпособОпределенияСтоимостиАктивов = ПредопределенноеЗначение("Перечисление.СпособыОпределенияСтоимостиПредметовАренды.ПоФактическойСтоимости") Тогда
		
		Если ЗначениеЗаполнено(ИмяТабличнойЧастиОС) Тогда
			СтоимостьПредметовАренды = Объект.ОС.Итог("СправедливаяСтоимость") - Объект.ОС.Итог("НегарантированнаяСтоимость");
		Иначе
			СтоимостьПредметовАренды = Объект.СправедливаяСтоимость - Объект.НегарантированнаяСтоимость;
		КонецЕсли;
		
	Иначе
		
		Если ЗначениеЗаполнено(ИмяТабличнойЧастиОС) Тогда
			СтоимостьПредметовАренды = Объект.ОС.Итог("Стоимость");
		Иначе
			СтоимостьПредметовАренды = Объект.Стоимость;
		КонецЕсли;
		
	КонецЕсли;

	Возврат СтоимостьПредметовАренды;
		
КонецФункции

Функция ВсегоПлатежейБезНДС(ГрафикОплатУслуг, ДатаНачалаАренды, СтавкаНДС) Экспорт
	
	ВсегоПлатежейБезНДС = 0;
	ПроцентНДС = Неопределено;
	
	Для Каждого ИсходнаяСтрокаГрафика Из ГрафикОплатУслуг Цикл		
		
		Если ИсходнаяСтрокаГрафика.Дата < ДатаНачалаАренды Тогда
			Продолжить;
		КонецЕсли;
		
		Если ПроцентНДС = Неопределено Тогда
			ПроцентНДС = УчетНДСУПКлиентСервер.ЗначениеСтавкиНДС(СтавкаНДС);
		КонецЕсли;
		
		ВсегоПлатежейБезНДС =
			ВсегоПлатежейБезНДС 
			+ Окр(ИсходнаяСтрокаГрафика.УслугаПоАренде * 100 / (100 + ПроцентНДС), 2)
			+ Окр(ИсходнаяСтрокаГрафика.ОбеспечительныйПлатеж * 100 / (100 + ПроцентНДС), 2)
			+ Окр(ИсходнаяСтрокаГрафика.ВыкупнаяСтоимость * 100 / (100 + ПроцентНДС), 2);
			
	КонецЦикла;
	
	Возврат ВсегоПлатежейБезНДС;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ПараметрыПринятияКУчетуОСИВводаОстатков(Объект, ВспомогательныеРеквизиты)

	//
	ДоступныПараметрыАмортизацииУУ = 
		(Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию")
				ИЛИ Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.АмортизацияНачислена")
				ИЛИ Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.ПустаяСсылка"))
			И ВспомогательныеРеквизиты.ОтражатьВУпрУчете;
	//		
	ДоступноОтражениеРасходовУУ = 
		ВспомогательныеРеквизиты.ОтражатьВУпрУчете
		И (Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию")
			ИЛИ Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислитьАмортизациюПриПринятииКУчету"));
			
	//
	АмортизацияУУДоступна = 
		(Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислятьАмортизацию")
				ИЛИ Объект.ПорядокУчетаУУ = ПредопределенноеЗначение("Перечисление.ПорядокУчетаСтоимостиВнеоборотныхАктивов.НачислитьАмортизациюПриПринятииКУчету"))
			И ВспомогательныеРеквизиты.ОтражатьВУпрУчете;
							
	//		
	АмортизацияБУДоступна = Ложь;
	
	//
	ПоНаработке = (Объект.МетодНачисленияАмортизацииУУ = ПредопределенноеЗначение("Перечисление.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции"));
		
	//
	ПараметрыПринятияКУчетуОС = Новый Структура;
	ПараметрыПринятияКУчетуОС.Вставить("ДоступныПараметрыАмортизацииУУ", ДоступныПараметрыАмортизацииУУ);
	ПараметрыПринятияКУчетуОС.Вставить("ДоступноОтражениеРасходовУУ", ДоступноОтражениеРасходовУУ);
	ПараметрыПринятияКУчетуОС.Вставить("АмортизацияУУДоступна", АмортизацияУУДоступна);
	ПараметрыПринятияКУчетуОС.Вставить("АмортизацияБУДоступна", АмортизацияБУДоступна);
	ПараметрыПринятияКУчетуОС.Вставить("ПоНаработке", ПоНаработке);
	ПараметрыПринятияКУчетуОС.Вставить("НаправлениеДеятельностиОбязательно", Ложь);
	ПараметрыПринятияКУчетуОС.Вставить("СтатьяРасходовУУОбязательна", Истина);
	
	ВнеоборотныеАктивыКлиентСерверЛокализация.ДополнитьПараметрыПринятияКУчетуОСИВводаОстатков(
		Объект, ВспомогательныеРеквизиты, ПараметрыПринятияКУчетуОС);
	
	Возврат ПараметрыПринятияКУчетуОС;

КонецФункции

// Добавляет описание ошибки.
// 
// Параметры:
//  СписокОшибок - Массив из Структура - Список ошибок
//  ТекстСообщения - Строка - Текст сообщения
//  Поле - Строка - Поле
//  ПутьКДанным - Строка - Путь к данным
//	ЕстьОшибки - Булево -
Процедура ДобавитьОписаниеОшибки(СписокОшибок, ТекстСообщения, Поле = Неопределено, ПутьКДанным = Неопределено, ЕстьОшибки = Ложь) Экспорт
	
	ЕстьОшибки = Истина;
	
	ОписаниеОшибки = Новый Структура;
	ОписаниеОшибки.Вставить("ТекстСообщения", ТекстСообщения);
	ОписаниеОшибки.Вставить("Поле", Поле);
	ОписаниеОшибки.Вставить("ПутьКДанным", ПутьКДанным);

	СписокОшибок.Добавить(ОписаниеОшибки);
	
КонецПроцедуры

Процедура ПриИзмененииВариантаОтраженияВУчете(Объект, ВариантОтраженияВУчете, ЕстьБУНУ = Ложь) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ВариантОтраженияВУчете) Тогда
		ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомУчете");
	КонецЕсли; 
	
	Объект.ОтражатьВУпрУчете = 
		(ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомУчете")
			ИЛИ ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИРегламентированномУчетах")
			ИЛИ ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИБухгалтерскомУчете")
			ИЛИ ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИНалоговомУчете"));
			
	Объект.ОтражатьВРеглУчете = 
		(ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.РегламентированномУчете")
			ИЛИ ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИРегламентированномУчетах")
			ИЛИ ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.БухгалтерскомУчете")
			ИЛИ ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.НалоговомУчете")
			ИЛИ ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИБухгалтерскомУчете")
			ИЛИ ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИНалоговомУчете"));
			
	Если ЕстьБУНУ Тогда
		
		Объект.ОтражатьВБУ = 
			(ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИРегламентированномУчетах")
				ИЛИ ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.РегламентированномУчете")
				ИЛИ ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.БухгалтерскомУчете")
				ИЛИ ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИБухгалтерскомУчете"));
				
		Объект.ОтражатьВНУ = 
			(ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИРегламентированномУчетах")
				ИЛИ ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.РегламентированномУчете")
				ИЛИ ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.НалоговомУчете")
				ИЛИ ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИНалоговомУчете"));
			
	КонецЕсли;
	
КонецПроцедуры

Функция ВариантОтраженияВУчете(Объект, ЕстьБУНУ = Ложь) Экспорт

	ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.ПустаяСсылка");
	
	Если Объект.ОтражатьВУпрУчете Тогда 
		
		Если ЕстьБУНУ 
			И Объект.ОтражатьВБУ 
			И Объект.ОтражатьВНУ Тогда
			
			ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИРегламентированномУчетах");
			
		ИначеЕсли ЕстьБУНУ 
			И Объект.ОтражатьВУпрУчете 
			И Объект.ОтражатьВБУ Тогда
			
			ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИБухгалтерскомУчете");
			
		ИначеЕсли ЕстьБУНУ 
			И Объект.ОтражатьВУпрУчете 
			И Объект.ОтражатьВНУ Тогда
			
			ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИНалоговомУчете");
			
		ИначеЕсли НЕ ЕстьБУНУ 
			И Объект.ОтражатьВРеглУчете Тогда
			
			ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомИРегламентированномУчетах");
			
		Иначе
			
			ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.УправленческомУчете");
			
		КонецЕсли;
		
	ИначеЕсли ЕстьБУНУ 
			И Объект.ОтражатьВБУ 
			И Объект.ОтражатьВНУ
		ИЛИ НЕ ЕстьБУНУ
			И Объект.ОтражатьВРеглУчете Тогда
		
		ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.РегламентированномУчете");
		
	ИначеЕсли ЕстьБУНУ 
		И Объект.ОтражатьВБУ Тогда
		
		ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.БухгалтерскомУчете");
		
	ИначеЕсли ЕстьБУНУ 
		И Объект.ОтражатьВНУ Тогда
		
		ВариантОтраженияВУчете = ПредопределенноеЗначение("Перечисление.ВариантыОтраженияВУчетеВнеоборотныхАктивов.НалоговомУчете");
		
	КонецЕсли; 
	
	Возврат ВариантОтраженияВУчете;
	
КонецФункции

#КонецОбласти

#КонецОбласти
