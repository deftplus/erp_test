// Добавляет в таблицу значений колонку с ABC классификацией поля по показателю
Процедура ДобавитьABCКлассификацию(Таблица, ИмяНовойКолонки, Показатель, Поле, Процент1, Процент2, Процент3, Приставка = "")
	
	Таблица.Колонки.Добавить(ИмяНовойКолонки);
	КопияТаблицы = Таблица.Скопировать(, "" + Поле + "," + Показатель);
	КопияТаблицы.Свернуть(Поле, Показатель);
	КопияТаблицы.Сортировать(Показатель + Нстр("ru = ' убыв,'"));
	ИтогПоКолонке = КопияТаблицы.Итог(Показатель);
	Сумма = 0;
	Для каждого Строка Из КопияТаблицы Цикл
		Если Сумма < Процент1 / 100 * ИтогПоКолонке Тогда
			Класс = Приставка + Нстр("ru = 'A - класс'");
		ИначеЕсли Сумма >= Процент1 / 100 * ИтогПоКолонке И Сумма < (Процент2 + Процент1) / 100 * ИтогПоКолонке Тогда
			Класс = Приставка + Нстр("ru = 'B - класс'");
		Иначе
			Класс = Приставка + Нстр("ru = 'C - класс'");
		КонецЕсли;
		СтруктураПоиска = Новый Структура(Поле, Строка[Поле]);
		НайденныеСтроки = Таблица.НайтиСтроки(СтруктураПоиска);
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			НайденнаяСтрока[ИмяНовойКолонки] = Класс;
		КонецЦикла;
		Сумма = Сумма + Строка[Показатель];
	КонецЦикла;
	
КонецПроцедуры

Функция ПолеДоступноВОтбореПостроителя(Поле, ПостроительЗапроса)
	
	Возврат ПостроительЗапроса.ДоступныеПоля.Найти(Поле) <> Неопределено
		ИЛИ Прав(Поле, 12) = ".Description" И ПостроительЗапроса.ДоступныеПоля.Найти(Лев(Поле, СтрНайти(Поле, ".Description") - 1)) <> Неопределено И ПостроительЗапроса.ДоступныеПоля.Найти(Лев(Поле, СтрНайти(Поле, ".Description") - 1)).Поля.Найти("Наименование") <> Неопределено
	    ИЛИ Прав(Поле, 5) = ".Code" И ПостроительЗапроса.ДоступныеПоля.Найти(Лев(Поле, СтрНайти(Поле, ".Code") - 1)) <> Неопределено И ПостроительЗапроса.ДоступныеПоля.Найти(Лев(Поле, СтрНайти(Поле, ".Code") - 1)).Поля.Найти("Код") <> Неопределено
		ИЛИ Прав(Поле, 6) = ".Owner" И ПостроительЗапроса.ДоступныеПоля.Найти(Лев(Поле, СтрНайти(Поле, ".Owner") - 1)) <> Неопределено И ПостроительЗапроса.ДоступныеПоля.Найти(Лев(Поле, СтрНайти(Поле, ".Owner") - 1)).Поля.Найти("Владелец") <> Неопределено;
		
		ПостроительЗапроса.ДоступныеПоля.Найти(Лев(Поле, СтрНайти(Поле, ".Owner") - 1)).Поля.Найти("Владелец")
		
КонецФункции

// Дорабатывает компоновщик настроек перед выводом в отчет
Процедура ДоработатьАналитическийОтчетПередВыводом(ОтчетОбъект, КомпоновщикНастроек, СхемаКомпоновкиДанных, ЗначенияНастроек = Неопределено) Экспорт
	
	Если ЗначенияНастроек = Неопределено Тогда
		ЗначенияНастроек = ТиповыеОтчетыУХ.ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ОтчетОбъект);
	КонецЕсли;
	
	Если ЗначенияНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Отбор Пользовательского поля Тренд (не используется в управляемом режиме).
	Если ЗначенияНастроек.АналитическиеОтборы.Свойство("ПолеОтборТренд") И Не ПустаяСтрока(ЗначенияНастроек.АналитическиеОтборы.ПолеОтборТренд) И ЗначениеЗаполнено(ЗначенияНастроек.АналитическиеОтборы.ЗначениеОтборТренд) Тогда
		ПользовательскоеПоле = ТиповыеОтчетыУХ.НайтиПользовательскоеПоле(КомпоновщикНастроек, Новый ПолеКомпоновкиДанных(ЗначенияНастроек.АналитическиеОтборы.ПолеОтборТренд));
		Для каждого Вариант Из ПользовательскоеПоле.Варианты.Элементы Цикл
			Если Вариант.Значение = ЗначенияНастроек.АналитическиеОтборы.ЗначениеОтборТренд Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ТиповыеОтчетыУХ.СкопироватьЭлементы(КомпоновщикНастроек.Настройки.Отбор, Вариант.Отбор, , Ложь);
	КонецЕсли;
	
	// Отбор Пользовательского поля Состояние (не используется в управляемом режиме).
	Если ЗначенияНастроек.АналитическиеОтборы.Свойство("ПолеОтборСостояние") И Не ПустаяСтрока(ЗначенияНастроек.АналитическиеОтборы.ПолеОтборСостояние) И ЗначениеЗаполнено(ЗначенияНастроек.АналитическиеОтборы.ЗначениеОтборСостояние) Тогда
		ПользовательскоеПоле = ТиповыеОтчетыУХ.НайтиПользовательскоеПоле(КомпоновщикНастроек, Новый ПолеКомпоновкиДанных(ЗначенияНастроек.АналитическиеОтборы.ПолеОтборСостояние));
		Для каждого Вариант Из ПользовательскоеПоле.Варианты.Элементы Цикл
			Если Вариант.Значение = ЗначенияНастроек.АналитическиеОтборы.ЗначениеОтборСостояние Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ТиповыеОтчетыУХ.СкопироватьЭлементы(КомпоновщикНастроек.Настройки.Отбор, Вариант.Отбор, , Ложь);
	КонецЕсли;
	
	// Отбор Пользовательского поля ABC классификация
	Если Не ПустаяСтрока(ЗначенияНастроек.АналитическиеОтборы.ПолеОтборABCКлассификация) И ЗначениеЗаполнено(ЗначенияНастроек.АналитическиеОтборы.ЗначениеОтборABCКлассификация) Тогда
		ПользовательскоеПоле = ТиповыеОтчетыУХ.НайтиПользовательскоеПоле(КомпоновщикНастроек, Новый ПолеКомпоновкиДанных(ЗначенияНастроек.АналитическиеОтборы.ПолеОтборABCКлассификация));
		Для каждого Вариант Из ПользовательскоеПоле.Варианты.Элементы Цикл
			Если Вариант.Значение = ЗначенияНастроек.АналитическиеОтборы.ЗначениеОтборABCКлассификация Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		ТиповыеОтчетыУХ.ДобавитьОтбор(КомпоновщикНастроек, ПользовательскоеПоле.ПутьКДанным, ЗначенияНастроек.АналитическиеОтборы.ЗначениеОтборABCКлассификация);
	КонецЕсли;
	
	// Оформление показателей
	ОформлениеПоказателей = ОтчетОбъект.ОформлениеПоказателей.Получить();
	Если ОформлениеПоказателей <> Неопределено И Не ОтчетОбъект.ОтрицательноеКрасным Тогда
		Для каждого ОформлениеПоказателя Из ОформлениеПоказателей Цикл
			// Меньше
			НовыйЭлемент = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
			// Настройка отбора
			ЭлементОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ОформлениеПоказателя.Показатель);
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
			ЭлементОтбора.ПравоеЗначение = ОформлениеПоказателя.НижняяГраница;
			// Настройка оформления
			ЗначениеПараметра = НовыйЭлемент.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TextColor"));
			ЗначениеПараметра.Использование = Истина;
			ЗначениеПараметра.Значение = ОформлениеПоказателя.ЦветМеньше;
			// Настройка полей
			Поле = НовыйЭлемент.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных(ОформлениеПоказателя.Показатель);
			
			// Между
			НовыйЭлемент = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
			// Настройка отбора
			// равно
			ГруппаЭлементовОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
			// 1 элемент
			ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ОформлениеПоказателя.Показатель);
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
			ЭлементОтбора.ПравоеЗначение = ОформлениеПоказателя.НижняяГраница;
			// 2 элемент
			ЭлементОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ОформлениеПоказателя.Показатель);
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
			ЭлементОтбора.ПравоеЗначение = ОформлениеПоказателя.ВерхняяГраница;
			// Настройка оформления
			ЗначениеПараметра = НовыйЭлемент.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TextColor"));
			ЗначениеПараметра.Использование = Истина;
			ЗначениеПараметра.Значение = ОформлениеПоказателя.ЦветРавно;
			// Настройка полей
			Поле = НовыйЭлемент.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных(ОформлениеПоказателя.Показатель);
			
			// Больше
			НовыйЭлемент = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
			// Настройка отбора
			ЭлементОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ОформлениеПоказателя.Показатель);
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
			ЭлементОтбора.ПравоеЗначение = ОформлениеПоказателя.ВерхняяГраница;
			// Настройка оформления
			ЗначениеПараметра = НовыйЭлемент.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TextColor"));
			ЗначениеПараметра.Использование = Истина;
			ЗначениеПараметра.Значение = ОформлениеПоказателя.ЦветБольше;
			// Настройка полей
			Поле = НовыйЭлемент.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных(ОформлениеПоказателя.Показатель);
				
		КонецЦикла;
	КонецЕсли;
	
	// Оформление индикаторов
	Для каждого ПользовательскоеПоле Из КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы Цикл
		Если ТиповыеОтчетыУХ.ПолучитьИмяФормыРедактированияПользовательскогоПоля(ПользовательскоеПоле) <> Неопределено 
		   И ТипЗнч(ПользовательскоеПоле) <> Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных")
		   И (ПользовательскоеПоле.Варианты.Элементы[0].Значение = "1Тренд" 
		   ИЛИ ПользовательскоеПоле.Варианты.Элементы[0].Значение = "1Состояние") Тогда
		    Поворачивать = (ПользовательскоеПоле.Варианты.Элементы[0].Значение = "1Тренд");
			// у индикаторов расположение по горизонтали сделаем по центру
			ЭлементУсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
			Поле = ЭлементУсловноеОформление.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных(ПользовательскоеПоле.ПутьКДанным);
			ЗначениеПараметра = ЭлементУсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("HorizontalAlign"));
			ЗначениеПараметра.Использование = Истина;
			ЗначениеПараметра.Значение = ГоризонтальноеПоложение.Центр;
			// меньше. Оформление
			ЭлементУсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
			Поле = ЭлементУсловноеОформление.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных(ПользовательскоеПоле.ПутьКДанным);
			ТиповыеОтчетыУХ.СкопироватьЭлементы(ЭлементУсловноеОформление.Отбор, ПользовательскоеПоле.Варианты.Элементы[0].Отбор);
			//ЭлементУсловноеОформление.Представление = "Оформление (" + Режим + " """ + Наименование + """)";
			// цвет
			ЗначениеПараметра = ЭлементУсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TextOrientation"));
			ЗначениеПараметра.Использование = Поворачивать;
			ЗначениеПараметра.Значение = -45;
			ЗначениеПараметра = ЭлементУсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TextColor"));
			ЗначениеПараметра.Использование = Истина;
			ЗначениеПараметра.Значение = WebЦвета.Желтый.Красный;
			// между. Оформление
			ЭлементУсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
			Поле = ЭлементУсловноеОформление.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных(ПользовательскоеПоле.ПутьКДанным);
			ТиповыеОтчетыУХ.СкопироватьЭлементы(ЭлементУсловноеОформление.Отбор, ПользовательскоеПоле.Варианты.Элементы[1].Отбор);
			//ЭлементУсловноеОформление.Представление = "Оформление (" + Режим + " """ + Наименование + """)";
			// цвет
			ЗначениеПараметра = ЭлементУсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TextColor"));
			ЗначениеПараметра.Использование = Истина;
			ЗначениеПараметра.Значение = WebЦвета.Черный;			
			// больше. Оформление
			ЭлементУсловноеОформление = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
			Поле = ЭлементУсловноеОформление.Поля.Элементы.Добавить();
			Поле.Поле = Новый ПолеКомпоновкиДанных(ПользовательскоеПоле.ПутьКДанным);
			ТиповыеОтчетыУХ.СкопироватьЭлементы(ЭлементУсловноеОформление.Отбор, ПользовательскоеПоле.Варианты.Элементы[2].Отбор);
			//ЭлементУсловноеОформление.Представление = "Оформление (" + Режим + " """ + Наименование + """)";
			// цвет
			ЗначениеПараметра = ЭлементУсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TextColor"));
			ЗначениеПараметра.Использование = Истина;
			ЗначениеПараметра.Значение = WebЦвета.Зеленый;
			ЗначениеПараметра = ЭлементУсловноеОформление.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TextOrientation"));
			ЗначениеПараметра.Использование = Поворачивать;
			ЗначениеПараметра.Значение = 45;			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры //ДоработатьАналитическийОтчетПередВыводом

Процедура ОставитьПервыеСтрокиТаблицы(Таблица, Знач Количество, Процент = Ложь)
	
	КоличествоСтрок = Таблица.Количество();
	
	// Переводим проценты в количество
	Если Процент Тогда 
		Количество = КоличествоСтрок * Количество / 100;
		Количество = Цел(Количество) + ?(Количество = Цел(Количество), 0, 1);
	КонецЕсли;
	
	// Если количество больше всех строк, то ничего не делаем
	Если Количество > КоличествоСтрок Тогда
		Возврат;
	КонецЕсли;
	
	Для Индекс = 1 По КоличествоСтрок - Количество Цикл
		ОбратныйИндекс = КоличествоСтрок - Индекс;
		Таблица.Удалить(ОбратныйИндекс);
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьABCКлассификация(КомпоновщикНастроек)

	Для каждого ПользовательскоеПоле Из КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы Цикл
		Если ТипЗнч(ПользовательскоеПоле) = Тип("ПользовательскоеПолеВыборКомпоновкиДанных")
		   И ПользовательскоеПоле.Варианты.Элементы.Количество() > 0 
		   И ТиповыеОтчетыУХ.ПолучитьПараметрИзСтроки(ПользовательскоеПоле.Варианты.Элементы[0].Значение) = "ДоработкаТаблицы" Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
	
КонецФункции

Функция ВОбъектеОдинНаборДанныхЗапрос(Объект)
	
	Если Объект.НаборыДанных.Количество() = 1 
	   И (ТипЗнч(Объект.НаборыДанных[0]) = Тип("НаборДанныхЗапросСхемыКомпоновкиДанных")
	   ИЛИ ТипЗнч(Объект.НаборыДанных[0]) = Тип("НаборДанныхЗапросМакетаКомпоновкиДанных")) Тогда
		Возврат Истина;
	Иначе 
		Возврат Ложь;
 	КонецЕсли;
	
КонецФункции

Функция ДобавитьЭлементСтруктурыДляABCКЛассификации(КомпоновщикНастроек)
	
	Для каждого ПользовательскоеПоле Из КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы Цикл
		
		ИмяКолонки = "ПользовательскоеПоле" + КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы.Индекс(ПользовательскоеПоле);
		Если ТиповыеОтчетыУХ.ПолучитьИмяФормыРедактированияПользовательскогоПоля(ПользовательскоеПоле) <> "ФормаABCКлассификация" Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяГруппировка = КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		
		ВыбранноеПоле = НоваяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		Значение = ПользовательскоеПоле.Варианты.Элементы[0].Отбор.Элементы[0].ПравоеЗначение;
		Поле = ТиповыеОтчетыУХ.ПолучитьПараметрИзСтроки(Значение, 2);
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(Поле);
		
		ВыбранноеПоле = НоваяГруппировка.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		Значение = ПользовательскоеПоле.Варианты.Элементы[0].Отбор.Элементы[0].ПравоеЗначение;
		Поле = ТиповыеОтчетыУХ.ПолучитьПараметрИзСтроки(Значение, 3);
		ВыбранноеПоле.Поле = Новый ПолеКомпоновкиДанных(Поле);
		
	КонецЦикла;
	
	Возврат НоваяГруппировка;
	
КонецФункции

Функция ПолучитьТаблицуРезультатПоМакетуКомпоновки(МакетКомпоновки, ИмяНабораДанных = Неопределено)
	
	Если ИмяНабораДанных = Неопределено Тогда
		// Получаем таблицу результата
		Запрос = Новый Запрос;
		Запрос.Текст = МакетКомпоновки.НаборыДанных[0].Запрос;
		Для каждого Параметр Из МакетКомпоновки.ЗначенияПараметров Цикл
			Запрос.УстановитьПараметр(Параметр.Имя, Параметр.Значение);
		КонецЦикла;
		ТЗ = Запрос.Выполнить().Выгрузить();
		Возврат ТЗ;
	Иначе
		НаборДанных = МакетКомпоновки.НаборыДанных.Найти(ИмяНабораДанных);
		Если НаборДанных = Неопределено Тогда
			Возврат Неопределено;
		Иначе
			Запрос = Новый Запрос;
			Запрос.Текст = НаборДанных.Запрос;
			Для каждого Параметр Из МакетКомпоновки.ЗначенияПараметров Цикл
				Запрос.УстановитьПараметр(Параметр.Имя, Параметр.Значение);
			КонецЦикла;
			ТЗ = Запрос.Выполнить().Выгрузить();
			Возврат ТЗ;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ОтработатьОпциюТоп(ЗначенияНастроек, ТЗ, КомпоновщикНастроек)
	
	// Формируем строку упорядочивания
	СтрокаУпорядочивания = "";
	СтрокаРесурсы = "";
	Для каждого ЭлементПорядка Из КомпоновщикНастроек.Настройки.Порядок.Элементы Цикл
		Если СтрНайти(ЭлементПорядка.Поле, "UserFields") > 0 Тогда
			Продолжить;
		КонецЕсли;
		ДоступноеПоле = ТиповыеОтчетыУХ.ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ЭлементПорядка.Поле, КомпоновщикНастроек);
		Если ДоступноеПоле = Неопределено ИЛИ Не ДоступноеПоле.Ресурс Тогда
			Продолжить;
		КонецЕсли;
		Поле = СтрЗаменить(Строка(ЭлементПорядка.Поле), ".", "");
		Если ТЗ.Колонки.Найти(Поле) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаНаправлениеСортировки = ?(ЭлементПорядка.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр, "Возр", "Убыв");
		СтрокаУпорядочивания = СтрокаУпорядочивания + Поле + " " + СтрокаНаправлениеСортировки + ",";
		СтрокаРесурсы = СтрокаРесурсы + Поле + " " + ",";  
	КонецЦикла;
	
	Если ЗначенияНастроек.АналитическиеОтборы.ПолеТоп = "ДетальныеЗаписи" Тогда
		Если Не ПустаяСтрока(СтрокаУпорядочивания) Тогда
			ТЗ.Сортировать(СтрокаУпорядочивания);
		КонецЕсли;
		ОставитьПервыеСтрокиТаблицы(ТЗ, ЗначенияНастроек.АналитическиеОтборы.КоличествоТоп, ЗначенияНастроек.АналитическиеОтборы.ПроцентТоп);
	Иначе
		СтрокаПолеТоп = СтрЗаменить(ЗначенияНастроек.АналитическиеОтборы.ПолеТоп, ".", "");
		КопияТЗ = ТЗ.Скопировать(,СтрокаПолеТоп + "," + СтрокаРесурсы);
		КопияТЗ.Свернуть(СтрокаПолеТоп, СтрокаРесурсы);
		Если Не ПустаяСтрока(СтрокаУпорядочивания) Тогда
			КопияТЗ.Сортировать(СтрокаУпорядочивания);
		КонецЕсли;
		ОставитьПервыеСтрокиТаблицы(КопияТЗ, ЗначенияНастроек.АналитическиеОтборы.КоличествоТоп, ЗначенияНастроек.АналитическиеОтборы.ПроцентТоп);
		КоличествоСтрок = ТЗ.Количество();
		Для Индекс = 1 По КоличествоСтрок Цикл
			Строка = ТЗ[КоличествоСтрок - Индекс];
			СтруктураПоиска = Новый Структура(СтрокаПолеТоп, Строка[СтрокаПолеТоп]);
			Если КопияТЗ.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
				ТЗ.Удалить(Строка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

Функция ОтработатьОпциюПорог(ЗначенияНастроек, ТЗ, КомпоновщикНастроек)
	
	СтрокаПолеПорог = СтрЗаменить(ЗначенияНастроек.АналитическиеОтборы.ПолеПорог, ".", "");
	СтрокаРесурсПорог = СтрЗаменить(ЗначенияНастроек.АналитическиеОтборы.РесурсПорог, ".", "");
	КопияТЗ = ТЗ.Скопировать(,СтрокаПолеПорог + "," + СтрокаРесурсПорог);
	КопияТЗ.Свернуть(СтрокаПолеПорог, СтрокаРесурсПорог);
	Итог = КопияТЗ.Итог(СтрокаРесурсПорог);
	Порог = Итог * ЗначенияНастроек.АналитическиеОтборы.ПроцентПорог / 100;
	
	КоличествоСтрок = КопияТЗ.Количество();
	Для Индекс = 1 По КоличествоСтрок Цикл
		Строка = КопияТЗ[КоличествоСтрок - Индекс];
		Если Строка[СтрокаРесурсПорог] < Порог Тогда
			КопияТЗ.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	КоличествоСтрок = ТЗ.Количество();
	Для Индекс = 1 По КоличествоСтрок Цикл
		Строка = ТЗ[КоличествоСтрок - Индекс];
		СтруктураПоиска = Новый Структура(СтрокаПолеПорог, Строка[СтрокаПолеПорог]);
		Если КопияТЗ.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			ТЗ.Удалить(Строка);
		КонецЕсли;
	КонецЦикла;
	
	ДобавитьТипыВТипКолонкиТаблицыЗначений(ТЗ, СтрокаПолеПорог, "Строка");
	ИтогПрочее  = Итог - ТЗ.Итог(СтрокаРесурсПорог);
	Если ИтогПрочее > 0 Тогда
		НоваяСтрока = ТЗ.Добавить();
		НоваяСтрока[СтрокаПолеПорог] = "Прочее";
		НоваяСтрока[СтрокаРесурсПорог] = ИтогПрочее;
		Если ТЗ.Колонки.Найти(СтрокаПолеПорог + "Представление") <> Неопределено Тогда
			НоваяСтрока[СтрокаПолеПорог + "Представление"] = "Прочее";
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Добавляет типы в ТипКолонки таблицы значений. При этом колонка перемещается в конец
// Парам ДобавляемыеТипы - Массив типов или строка, содержащая типы через запятую
Процедура ДобавитьТипыВТипКолонкиТаблицыЗначений(ТЗ, ИмяКолонки, ДобавляемыеТипы)
	
	СтараяКолонка = ТЗ.Колонки[ИмяКолонки];
	ОписаниеТипов = СтараяКолонка.ТипЗначения;
	ОписаниеТипов = Новый ОписаниеТипов(ОписаниеТипов, ДобавляемыеТипы);
	НоваяКолонка = ТЗ.Колонки.Добавить(ИмяКолонки + "НоваяКолонка");
	МассивЗначенийКолонки = ТЗ.ВыгрузитьКолонку(ИмяКолонки);
	ТЗ.ЗагрузитьКолонку(МассивЗначенийКолонки, ИмяКолонки + "НоваяКолонка");
	ТЗ.Колонки.Удалить(ИмяКолонки);
	ТЗ.Колонки[ИмяКолонки + "НоваяКолонка"].Имя = ИмяКолонки;
	
КонецПроцедуры

Функция ОтработатьОпциюСкрытьНулевые(ТЗ, КомпоновщикНастроек, ПодтекстЗапроса = Неопределено, РежимОтбора = 0)
	
	Если РежимОтбора = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТЗ.Колонки.Добавить("СуммаРесурсовПоМодулю", Новый ОписаниеТипов("Число"));
	ВыбранныеПоля = ТиповыеОтчетыУХ.ПолучитьВыбранныеПоля(КомпоновщикНастроек);
	МассивКолонок = Новый Массив;
	Для каждого ВыбранноеПоле Из ВыбранныеПоля Цикл
		ДоступноеПоле = ТиповыеОтчетыУХ.ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(ВыбранноеПоле.Поле, КомпоновщикНастроек);
		Если ДоступноеПоле <> Неопределено Тогда
			ЗначениеРесурса = ДоступноеПоле.Ресурс;
		Иначе
			ЗначениеРесурса = Ложь;
		КонецЕсли;
		ИмяПоля = Строка(ВыбранноеПоле.Поле);
		НайденаКолонкаПоля = (ТЗ.Колонки.Найти(ИмяПоля) <> Неопределено);
		Если ВыбранноеПоле.Использование И ЗначениеРесурса И НайденаКолонкаПоля Тогда
			// Добавляем ресурс в массив колонок
			ИмяКолонки = СтрЗаменить(Строка(ВыбранноеПоле.Поле), ".", "");
			МассивКолонок.Добавить(ИмяКолонки);
			НеВыводитьКолонку = Истина;
			// Проверяем по всей таблице не нулевой ли это ресурс по всей таблице
			Для каждого СтрокаТЗ Из ТЗ Цикл
				Если (СтрокаТЗ[ИмяКолонки] >= 0 И РежимОтбора = 1)
				 ИЛИ (СтрокаТЗ[ИмяКолонки] <= 0 И РежимОтбора = 2)
				 ИЛИ (СтрокаТЗ[ИмяКолонки] <> 0 И РежимОтбора = 3) Тогда
					НеВыводитьКолонку = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если НеВыводитьКолонку Тогда
				// Нулевую колонку не выводим
				ВыбранноеПоле.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	// Заполняем дополнительную колонку
	Для каждого СтрокаТЗ Из ТЗ Цикл
		Для каждого Ресурс Из МассивКолонок Цикл
			Если (СтрокаТЗ[Ресурс] >= 0 И РежимОтбора = 1)
			 ИЛИ (СтрокаТЗ[Ресурс] <= 0 И РежимОтбора = 2)
			 ИЛИ (СтрокаТЗ[Ресурс] <> 0 И РежимОтбора = 3) Тогда
				РезультатПроверки = 0;
			Иначе
				РезультатПроверки = 1;
			КонецЕсли;
			
			СтрокаТЗ["СуммаРесурсовПоМодулю"] = СтрокаТЗ["СуммаРесурсовПоМодулю"] + РезультатПроверки;
		КонецЦикла;
	КонецЦикла;
	
	Если ПодтекстЗапроса <> Неопределено Тогда
		ПодтекстЗапроса = ПодтекстЗапроса + "0 КАК СуммаРесурсовПоМодулю,";
	КонецЕсли;
	
КонецФункции

Функция ДобавитьВТаблицуРезультатаABCКлассификацию(ТЗ, КомпоновщикНастроек, ПодтекстЗапроса = Неопределено)
	
	МассивВычисляемыхПолей = Новый Массив;
	
	Для каждого ПользовательскоеПоле Из КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы Цикл
		
		ИмяКолонки = "ПользовательскоеПоле" + КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы.Индекс(ПользовательскоеПоле);
		Если ТиповыеОтчетыУХ.ПолучитьИмяФормыРедактированияПользовательскогоПоля(ПользовательскоеПоле) <> "ФормаABCКлассификация" Тогда
			Продолжить;
		КонецЕсли;
		
		Наименование = ПользовательскоеПоле.Заголовок;
		
		Значение = ПользовательскоеПоле.Варианты.Элементы[0].Отбор.Элементы[0].ПравоеЗначение;
		Показатель = ТиповыеОтчетыУХ.ПолучитьПараметрИзСтроки(Значение, 2);
		
		Значение = ПользовательскоеПоле.Варианты.Элементы[0].Отбор.Элементы[0].ПравоеЗначение;
		Поле = ТиповыеОтчетыУХ.ПолучитьПараметрИзСтроки(Значение, 3);
		
		Значение = ПользовательскоеПоле.Варианты.Элементы[0].Отбор.Элементы[0].ПравоеЗначение;
		Значение = ТиповыеОтчетыУХ.ПолучитьПараметрИзСтроки(Значение);
		Процент1 = Число(Значение);
		
		Значение = ПользовательскоеПоле.Варианты.Элементы[1].Отбор.Элементы[0].ПравоеЗначение;
		Значение = ТиповыеОтчетыУХ.ПолучитьПараметрИзСтроки(Значение);
		Процент2 = Число(Значение);
		
		Значение = ПользовательскоеПоле.Варианты.Элементы[2].Отбор.Элементы[0].ПравоеЗначение;
		Значение = ТиповыеОтчетыУХ.ПолучитьПараметрИзСтроки(Значение);
		Процент3 = Число(Значение);
		
		ДобавитьABCКлассификацию(ТЗ, ИмяКолонки, Показатель, Поле, Процент1, Процент2, Процент3);
		
		МассивВычисляемыхПолей.Добавить(ИмяКолонки);
		
		Если ПодтекстЗапроса <> Неопределено Тогда
			ПодтекстЗапроса = ПодтекстЗапроса + " 1 КАК " + ИмяКолонки + ", ";
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивВычисляемыхПолей;
	
КонецФункции

Функция ПеренастроитьПользовательскиеПоляДляABCКлассификации(КомпоновщикНастроек)
	
	Для каждого ПользовательскоеПоле Из КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы Цикл
		ИмяКолонки = "ПользовательскоеПоле" + КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы.Индекс(ПользовательскоеПоле);
		Если ТиповыеОтчетыУХ.ПолучитьИмяФормыРедактированияПользовательскогоПоля(ПользовательскоеПоле) = "ФормаABCКлассификация" Тогда
			Значение = ПользовательскоеПоле.Варианты.Элементы[0].Отбор.Элементы[0].ПравоеЗначение;
			Показатель = ТиповыеОтчетыУХ.ПолучитьПараметрИзСтроки(Значение, 2);
			
			Значение = ПользовательскоеПоле.Варианты.Элементы[0].Отбор.Элементы[0].ПравоеЗначение;
			Поле = ТиповыеОтчетыУХ.ПолучитьПараметрИзСтроки(Значение, 3);
			
			Вариант = ПользовательскоеПоле.Варианты.Элементы[0];
			Отбор = Вариант.Отбор;
			Отбор.Элементы.Очистить();
			ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонки);
			ЭлементОтбора.ПравоеЗначение = Вариант.Представление;
			
			Вариант = ПользовательскоеПоле.Варианты.Элементы[1];
			Отбор = Вариант.Отбор;
			Отбор.Элементы.Очистить();
			ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонки);
			ЭлементОтбора.ПравоеЗначение = Вариант.Представление;
			
			Вариант = ПользовательскоеПоле.Варианты.Элементы[2];
			Отбор = Вариант.Отбор;
			Отбор.Элементы.Очистить();
			ЭлементОтбора = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяКолонки);
			ЭлементОтбора.ПравоеЗначение = Вариант.Представление;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

Функция УстановитьОтборНаНулевыеГруппировки(КомпоновщикНастроек)
	
	Группировки = ТиповыеОтчетыУХ.ПолучитьГруппировки(КомпоновщикНастроек);
	Для каждого Группировка Из Группировки Цикл
		Элемент = Группировка.Значение.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		Элемент.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("СуммаРесурсовПоМодулю");
		Элемент.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		Элемент.ПравоеЗначение = 0;
		ЗначениеПараметра = Группировка.Значение.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("FilterOutput"));
		Если ЗначениеПараметра = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеПараметра.Использование = Истина;
		ЗначениеПараметра.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
	КонецЦикла;
	
КонецФункции

Функция ПолучитьСтруктуруТипОбработки(ЗначенияНастроек, КомпоновщикНастроек)
	
	ТипОбработки = Новый Структура;
	
	Если ЕстьABCКлассификация(КомпоновщикНастроек) Тогда
		ТипОбработки.Вставить("ABCКлассификация", Истина);
	КонецЕсли;
	
	// Если используется функция ТОП
	Если Не ПустаяСтрока(ЗначенияНастроек.АналитическиеОтборы.ПолеТоп) И ЗначенияНастроек.АналитическиеОтборы.КоличествоТоп <> 0 Тогда
		ТипОбработки.Вставить("Топ", Истина);
	КонецЕсли;
	
	Если ЗначенияНастроек.АналитическиеОтборы.Свойство("РесурсПорог")
		И Не ПустаяСтрока(ЗначенияНастроек.АналитическиеОтборы.РесурсПорог) И Не ПустаяСтрока(ЗначенияНастроек.АналитическиеОтборы.ПолеПорог) И ЗначенияНастроек.АналитическиеОтборы.ПроцентПорог <> 0 Тогда
		ТипОбработки.Вставить("Порог", Истина);
	КонецЕсли;
	
	Если ЗначенияНастроек.АналитическиеОтборы.СкрытьНулевые <> 0 Тогда
		ТипОбработки.Вставить("СкрытьНулевые", Истина);
	КонецЕсли;
	
	Если ЗначенияНастроек.НастройкиПрогноза.Прогноз = Истина Тогда
		ТипОбработки.Вставить("Прогноз", Истина);
	КонецЕсли;
	
	Возврат ТипОбработки;
	
КонецФункции

Функция ПолучитьТекстВнешнегоЗапроса(ТекстЗапроса, ПодтекстЗапроса)
	
	ЕстьРазрешенные = Ложь;
	Позиция = СтрНайти(ВРег(ТекстЗапроса), "РАЗРЕШЕННЫЕ");
	Если Позиция > 0 Тогда
		ТекстПередРазрешенные = Лев(ТекстЗапроса, Позиция - 1);
		ТекстПослеРазрешенные = Сред(ТекстЗапроса, Позиция + 11);
		Если СтрНайти(ТекстПередРазрешенные, ",") = 0 
		   И СтрНайти(ВРег(ТекстПередРазрешенные), "КАК") = 0
		   И СтрНайти(ВРег(ТекстПередРазрешенные), "ИЗ") = 0
		   И СтрНайти(ТекстПередРазрешенные, """") = 0 Тогда
			ТекстЗапроса = ТекстПередРазрешенные + ТекстПослеРазрешенные;
			ЕстьРазрешенные = Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат "Выбрать " + ?(ЕстьРазрешенные, "РАЗРЕШЕННЫЕ ", "") + ПодтекстЗапроса + " * ИЗ ( " + ТекстЗапроса + " ) КАК ТаблицаЗапроса";
	КонецФункции

Функция ПолучитьСложныйМакетКомпоновки(СоставТЗ, СхемаКомпоновкиДанныхОбщая, КомпоновщикНастроекОбщий, ДанныеРасшифровки, ВнешниеНаборыДанных, ФормаОтчета) Экспорт
	
	Для каждого СтрокаТЗ Из СоставТЗ Цикл
		
		ИД = СтрокаТЗ.Идентификатор;
		ОтчетОбъект = СтрокаТЗ.УниверсальныйОтчет;
		ЗначенияНастроек = СтрокаТЗ.НастройкиОтчета.ЗначенияНастроекПанелиПользователя.Получить();

		// Получаем очередную Схему компоновки данных
		Для каждого ВложеннаяСхема Из СхемаКомпоновкиДанныхОбщая.ВложенныеСхемыКомпоновкиДанных Цикл
			Если ВложеннаяСхема.Имя = ИД Тогда
				СхемаКомпоновкиДанных = ВложеннаяСхема.Схема;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Получаем очередной компоновщик настроек
		Для каждого НастройкаВложенного Из КомпоновщикНастроекОбщий.Настройки.Структура Цикл
			Если НастройкаВложенного.ИдентификаторОбъекта = ИД Тогда
				КомпоновщикНастроек = НастройкаВложенного;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Получаем очередную структуру ТипОбработки
		ТипОбработки = ПолучитьСтруктуруТипОбработки(ЗначенияНастроек, КомпоновщикНастроек);
		Дорабатывать = ТипОбработки.Количество() > 0;
		
		// Проверяем, количество наборов данных и их тип. Допустим один - запрос
		Если Не ВОбъектеОдинНаборДанныхЗапрос(СхемаКомпоновкиДанных) Тогда
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			МакетКомпоновкиОбщий = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанныхОбщая, КомпоновщикНастроекОбщий.Настройки, ДанныеРасшифровки);
			Возврат МакетКомпоновкиОбщий;
	 	КонецЕсли;
			
		// Если дорабатывать компоновщик не надо
		Если Не Дорабатывать Тогда
			Продолжить;
		КонецЕсли;
		
		// Добавляем элементы структуры, чтобы поля попали в выполняемый запрос
		Если ТипОбработки.Свойство("ABCКлассификация") Тогда
			ДобавитьЭлементСтруктурыДляABCКЛассификации(КомпоновщикНастроек);
		КонецЕсли;
		
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиОбщий = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанныхОбщая, КомпоновщикНастроекОбщий.Настройки, ДанныеРасшифровки);
	//ПоказатьСхему(СхемаКомпоновкиДанныхОбщая, КомпоновщикНастроекОбщий, ФормаОтчета);
	
	// Формируем внешний набор данных
	ВнешниеНаборыДанных = Новый Структура;
		
	Для каждого СтрокаТЗ Из СоставТЗ Цикл
		
		ИД = СтрокаТЗ.Идентификатор;
		ОтчетОбъект = СтрокаТЗ.УниверсальныйОтчет;
		ЗначенияНастроек = СтрокаТЗ.НастройкиОтчета.ЗначенияНастроекПанелиПользователя.Получить();
		
		// Получаем очередную Схему компоновки данных
		Для каждого ВложеннаяСхема Из СхемаКомпоновкиДанныхОбщая.ВложенныеСхемыКомпоновкиДанных Цикл
			Если ВложеннаяСхема.Имя = ИД Тогда
				СхемаКомпоновкиДанных = ВложеннаяСхема.Схема;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Получаем очередной компоновщик настроек
		Для каждого НастройкаВложенного Из КомпоновщикНастроекОбщий.Настройки.Структура Цикл
			Если НастройкаВложенного.ИдентификаторОбъекта = ИД Тогда
				КомпоновщикНастроек = НастройкаВложенного;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Получаем очередной макет компоновки
		Индекс = 0;
		Для каждого ВложенныйОбъектМакета Из МакетКомпоновкиОбщий.Тело Цикл
			Если ТипЗнч(ВложенныйОбъектМакета) = Тип("ВложенныйОбъектМакетаКомпоновкиДанных") Тогда
				Если Индекс = СоставТЗ.Индекс(СтрокаТЗ) Тогда
					МакетКомпоновки	= ВложенныйОбъектМакета.КомпоновкаДанных;
					Прервать;
				Иначе
					Индекс = Индекс + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Получаем очередную структуру ТипОбработки
		ТипОбработки = ПолучитьСтруктуруТипОбработки(ЗначенияНастроек, КомпоновщикНастроек);
		
		// Удаляем последний элемент структуры, добавленный чтобы поля попали в запрос
		Если ТипОбработки.Свойство("ABCКлассификация") Тогда
			ПоследнийЭлемент = КомпоновщикНастроек.Настройки.Структура[КомпоновщикНастроек.Настройки.Структура.Количество() - 1];
			КомпоновщикНастроек.Настройки.Структура.Удалить(ПоследнийЭлемент);
		КонецЕсли;
		
		Дорабатывать = ТипОбработки.Количество() > 0;
		
		// Если дорабатывать компоновщик не надо
		Если Не Дорабатывать Тогда
			Продолжить;
		КонецЕсли;
		
		// Получаем таблицу результата
		ТЗ = ПолучитьТаблицуРезультатПоМакетуКомпоновки(МакетКомпоновки);
		Если ТЗ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПодтекстЗапроса = "";
		
		// Отработка Прогноз
		Если ТипОбработки.Свойство("Прогноз") Тогда
			ДополнитьТаблицуПрогнозом(ЗначенияНастроек, ТЗ, КомпоновщикНастроек, ПодТекстЗапроса);
		КонецЕсли;
		
		// Отработка ТОП
		Если ТипОбработки.Свойство("Топ") Тогда
			ОтработатьОпциюТоп(ЗначенияНастроек, ТЗ, КомпоновщикНастроек);
		КонецЕсли;
		
		// Отработка Порог
		Если ТипОбработки.Свойство("Порог") Тогда
			ОтработатьОпциюПорог(ЗначенияНастроек, ТЗ, КомпоновщикНастроек);
		КонецЕсли;
		
		// Отработка скрыть нулевые
		Если ТипОбработки.Свойство("СкрытьНулевые") Тогда
			ОтработатьОпциюСкрытьНулевые(ТЗ, КомпоновщикНастроек, ПодтекстЗапроса, ЗначенияНастроек.АналитическиеОтборы.СкрытьНулевые);
		КонецЕсли;
		
		// Добавляем в таблицу результата ABC классификацию
		Если ТипОбработки.Свойство("ABCКлассификация") Тогда
			ДобавитьВТаблицуРезультатаABCКлассификацию(ТЗ, КомпоновщикНастроек, ПодтекстЗапроса);
		КонецЕсли;			
		
		ВнешниеНаборыДанных.Вставить(ИД, ТЗ);
			  
		// Дорабатываем запрос, соответствующий внешнему набору данных
		СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = ПолучитьТекстВнешнегоЗапроса(СхемаКомпоновкиДанных.НаборыДанных[0].Запрос, ПодтекстЗапроса);
		
	КонецЦикла;
	
	КомпоновщикНастроекОбщий.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанныхОбщая));
		
	Для каждого СтрокаТЗ Из СоставТЗ Цикл
		
		ИД = СтрокаТЗ.Идентификатор;
		ОтчетОбъект = СтрокаТЗ.УниверсальныйОтчет;
		ЗначенияНастроек = СтрокаТЗ.НастройкиОтчета.ЗначенияНастроекПанелиПользователя.Получить();
		
		// Получаем очередную Схему компоновки данных
		Для каждого ВложеннаяСхема Из СхемаКомпоновкиДанныхОбщая.ВложенныеСхемыКомпоновкиДанных Цикл
			Если ВложеннаяСхема.Имя = ИД Тогда
				СхемаКомпоновкиДанных = ВложеннаяСхема.Схема;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Получаем очередной компоновщик настроек
		Для каждого НастройкаВложенного Из КомпоновщикНастроекОбщий.Настройки.Структура Цикл
			Если НастройкаВложенного.ИдентификаторОбъекта = ИД Тогда
				КомпоновщикНастроек = НастройкаВложенного;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Получаем очередной макет компоновки
		Индекс = 0;
		Для каждого ВложенныйОбъектМакета Из МакетКомпоновкиОбщий.Тело Цикл
			Если ТипЗнч(ВложенныйОбъектМакета) = Тип("ВложенныйОбъектМакетаКомпоновкиДанных") Тогда
				Если Индекс = СоставТЗ.Индекс(СтрокаТЗ) Тогда
					МакетКомпоновки	= ВложенныйОбъектМакета.КомпоновкаДанных;
					Прервать;
				Иначе
					Индекс = Индекс + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Получаем очередную структуру ТипОбработки
		ТипОбработки = ПолучитьСтруктуруТипОбработки(ЗначенияНастроек, КомпоновщикНастроек);

		// Перенастраиваем пользовательские поля для ABC классификации
		ПеренастроитьПользовательскиеПоляДляABCКлассификации(КомпоновщикНастроек);
		
		// Установим отбор на группировки - не выводить нулевые строки
		Если ТипОбработки.Свойство("СкрытьНулевые") Тогда
			УстановитьОтборНаНулевыеГруппировки(КомпоновщикНастроек);
		КонецЕсли;
		ТиповыеОтчетыУХ.ДобавитьПолеИтога(СхемаКомпоновкиДанных, "СуммаРесурсовПоМодулю");
		
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиОбщий = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанныхОбщая, КомпоновщикНастроекОбщий.Настройки, ДанныеРасшифровки);
	
	Для каждого СтрокаТЗ Из СоставТЗ Цикл
		
		ИД = СтрокаТЗ.Идентификатор;
		ОтчетОбъект = СтрокаТЗ.УниверсальныйОтчет;
		ЗначенияНастроек = СтрокаТЗ.НастройкиОтчета.ЗначенияНастроекПанелиПользователя.Получить();
		
		// Получаем очередную схему компоновки данных
		Для каждого ВложеннаяСхема Из СхемаКомпоновкиДанныхОбщая.ВложенныеСхемыКомпоновкиДанных Цикл
			Если ВложеннаяСхема.Имя = ИД Тогда
				СхемаКомпоновкиДанных = ВложеннаяСхема.Схема;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Получаем очередной компоновщик настроек
		Для каждого НастройкаВложенного Из КомпоновщикНастроекОбщий.Настройки.Структура Цикл
			Если НастройкаВложенного.ИдентификаторОбъекта = ИД Тогда
				КомпоновщикНастроек = НастройкаВложенного;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Получаем очередной макет компоновки
		Индекс = 0;
		Для каждого ВложенныйОбъектМакета Из МакетКомпоновкиОбщий.Тело Цикл
			Если ТипЗнч(ВложенныйОбъектМакета) = Тип("ВложенныйОбъектМакетаКомпоновкиДанных") Тогда
				Если Индекс = СоставТЗ.Индекс(СтрокаТЗ) Тогда
					МакетКомпоновки	= ВложенныйОбъектМакета.КомпоновкаДанных;
					Прервать;
				Иначе
					Индекс = Индекс + 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;                                             
		
		// Получаем очередную структуру ТипОбработки
		ТипОбработки = ПолучитьСтруктуруТипОбработки(ЗначенияНастроек, КомпоновщикНастроек);
		
		Дорабатывать = ТипОбработки.Количество() > 0;
		
		// Если дорабатывать компоновщик не надо
		Если Не Дорабатывать Тогда
			Продолжить;
		КонецЕсли;

		// Заменяем набор данных запрос на набор данных объект
		СтарыйНаборДанных = МакетКомпоновки.НаборыДанных[0];
		НаборДанныхОбъект = МакетКомпоновки.НаборыДанных.Добавить(Тип("НаборДанныхОбъектМакетаКомпоновкиДанных"));
		
		НаборДанныхОбъект.ИмяОбъекта = ИД;
		НаборДанныхОбъект.Имя = СтарыйНаборДанных.Имя;
		НаборДанныхОбъект.ИсточникДанных = СтарыйНаборДанных.ИсточникДанных;
		Для каждого ПолеСтарый Из СтарыйНаборДанных.Поля Цикл
			НовоеПоле = НаборДанныхОбъект.Поля.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеПоле, ПолеСтарый)
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(НаборДанныхОбъект, СтарыйНаборДанных);
		МакетКомпоновки.НаборыДанных.Удалить(СтарыйНаборДанных);
		
	КонецЦикла;
	
	Возврат МакетКомпоновкиОбщий;
	
КонецФункции // ПолучитьСложныйМакетКомпоновки()

Функция ПолучитьМакетКомпоновки(ИсточникНастроек, СхемаКомпоновкиДанных, КомпоновщикНастроек, ДанныеРасшифровки, ВнешниеНаборыДанных, ВыводВТабличныйДокумент) Экспорт
	
	Перем ТЗ;
	
	Если ТипЗнч(ИсточникНастроек) = Тип("Структура") Тогда
		ЗначенияНастроек = ИсточникНастроек;
	ИначеЕсли ТипЗнч(ИсточникНастроек) = Тип("СправочникОбъект.ПроизвольныеОтчеты") Тогда
		ЗначенияНастроек = ИсточникНастроек.ЗначенияНастроекПанелиПользователя.Получить();
		
	КонецЕсли;
	
	ТипОбработки = ПолучитьСтруктуруТипОбработки(ЗначенияНастроек, КомпоновщикНастроек);
	Дорабатывать = ТипОбработки.Количество() > 0;
	
	// Проверяем, количество наборов данных и их тип. Допустим один - запрос
	Если Дорабатывать Тогда
		
		Если ТипЗнч(ВнешниеНаборыДанных) = Тип("Структура") И ВнешниеНаборыДанных.Свойство("ИсточникДанныхДляРасчетов", ТЗ) Тогда
			
			// Отработка ТОП
			Если ТипОбработки.Свойство("Топ") Тогда
				ОтработатьОпциюТоп(ЗначенияНастроек, ТЗ, КомпоновщикНастроек);
			КонецЕсли;
			
			// Отработка Порог
			Если ТипОбработки.Свойство("Порог") Тогда
				ОтработатьОпциюПорог(ЗначенияНастроек, ТЗ, КомпоновщикНастроек);
			КонецЕсли;
			
			Если ТипОбработки.Свойство("СкрытьНулевые") Тогда
				ОтработатьОпциюСкрытьНулевые(ТЗ, КомпоновщикНастроек, , ЗначенияНастроек.АналитическиеОтборы.СкрытьНулевые);
				НовоеПоле = СхемаКомпоновкиДанных.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
				НовоеПоле.Поле         = "СуммаРесурсовПоМодулю";
				НовоеПоле.ПутьКДанным = "СуммаРесурсовПоМодулю";
				УстановитьОтборНаНулевыеГруппировки(КомпоновщикНастроек);
				ТиповыеОтчетыУХ.ДобавитьПолеИтога(СхемаКомпоновкиДанных, "СуммаРесурсовПоМодулю");
			КонецЕсли;
			
			Если ТипОбработки.Свойство("ABCКлассификация") Тогда
				
				МассивВычисляемыхПолей = ДобавитьВТаблицуРезультатаABCКлассификацию(ТЗ, КомпоновщикНастроек);
				
				// Добавим в СКД расчетные поля для обслуживания АВС-классификации.
				Для Каждого Элемент Из МассивВычисляемыхПолей Цикл
					
					НовоеПоле = СхемаКомпоновкиДанных.НаборыДанных[0].Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
					НовоеПоле.Поле         = Элемент;
					НовоеПоле.ПутьКДанным = Элемент;
					
				КонецЦикла;
				
				ПеренастроитьПользовательскиеПоляДляABCКлассификации(КомпоновщикНастроек);
				
			КонецЕсли;
			
			ВнешниеНаборыДанных.Вставить("ИсточникДанныхДляРасчетов", ТЗ);
			Дорабатывать = Ложь;
			
		ИначеЕсли Не ВОбъектеОдинНаборДанныхЗапрос(СхемаКомпоновкиДанных) Тогда
			Дорабатывать = Ложь;
		КонецЕсли;
 	КонецЕсли;
	
	// Если дорабатывать компоновщик не надо, сразу возвращаем макет компоновки	
	Если Не Дорабатывать Тогда
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		Если ВыводВТабличныйДокумент Тогда
			МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки);
		Иначе
			МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки, ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		КонецЕсли;
		Возврат МакетКомпоновки;
	КонецЕсли;
	 
	// Добавляем элементы структуры, чтобы поля попали в выполняемый запрос
	Если ТипОбработки.Свойство("ABCКлассификация") Тогда
		ДобавитьЭлементСтруктурыДляABCКЛассификации(КомпоновщикНастроек);
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки);
	
	// Удаляем элемент структры, добавленный чтобы поля попали в запрос
	Если ТипОбработки.Свойство("ABCКлассификация") Тогда
		ПоследнийЭлемент = КомпоновщикНастроек.Настройки.Структура[КомпоновщикНастроек.Настройки.Структура.Количество() - 1];
		КомпоновщикНастроек.Настройки.Структура.Удалить(ПоследнийЭлемент);
	КонецЕсли;
	
	// Получаем таблицу результата
	
	Если ЗначениеЗаполнено(ВнешниеНаборыДанных) Тогда
		
		Если НЕ ВнешниеНаборыДанных.Свойство("ИсточникДанныхДляРасчетов", ТЗ) Тогда
			Возврат МакетКомпоновки;
		КонецЕсли;
		
	Иначе
	
		ТЗ = ПолучитьТаблицуРезультатПоМакетуКомпоновки(МакетКомпоновки, СхемаКомпоновкиДанных.НаборыДанных[0].Имя);
		Если ТЗ = Неопределено Тогда
			Возврат МакетКомпоновки;
		КонецЕсли;
		
	КонецЕсли;
	ПодтекстЗапроса = "";
	
	// Отработка Прогноз
	Если ТипОбработки.Свойство("Прогноз") Тогда
		ДополнитьТаблицуПрогнозом(ЗначенияНастроек, ТЗ, КомпоновщикНастроек, ПодТекстЗапроса);
	КонецЕсли;
	
	// Отработка ТОП
	Если ТипОбработки.Свойство("Топ") Тогда
		ОтработатьОпциюТоп(ЗначенияНастроек, ТЗ, КомпоновщикНастроек);
	КонецЕсли;
	
	// Отработка Порог
	Если ТипОбработки.Свойство("Порог") Тогда
		ОтработатьОпциюПорог(ЗначенияНастроек, ТЗ, КомпоновщикНастроек);
	КонецЕсли;
	
	// Отработка скрыть нулевые
	Если ТипОбработки.Свойство("СкрытьНулевые") Тогда
		ОтработатьОпциюСкрытьНулевые(ТЗ, КомпоновщикНастроек, ПодтекстЗапроса, ЗначенияНастроек.АналитическиеОтборы.СкрытьНулевые);
	КонецЕсли;
	
	// Добавляем в таблицу результата ABC классификацию
	Если ТипОбработки.Свойство("ABCКлассификация") Тогда
		ДобавитьВТаблицуРезультатаABCКлассификацию(ТЗ, КомпоновщикНастроек, ПодтекстЗапроса);
	КонецЕсли;
	
	// Формируем внешний набор данных
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("Результат", ТЗ);
		  
	// Дорабатываем запрос, соответствующий внешнему набору данных
	СхемаКомпоновкиДанных.НаборыДанных[0].Запрос = ПолучитьТекстВнешнегоЗапроса(СхемаКомпоновкиДанных.НаборыДанных[0].Запрос, ПодтекстЗапроса);
	
	// Схема компоновки изменилась, переинициализируем компоновщик настроек
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	// Перенастраиваем пользовательские поля для ABC классификации
	ПеренастроитьПользовательскиеПоляДляABCКлассификации(КомпоновщикНастроек);
	
	// Установим отбор на группировки - не выводить нулевые строки
	Если ТипОбработки.Свойство("СкрытьНулевые") Тогда
		УстановитьОтборНаНулевыеГруппировки(КомпоновщикНастроек);
	КонецЕсли;
	ТиповыеОтчетыУХ.ДобавитьПолеИтога(СхемаКомпоновкиДанных, "СуммаРесурсовПоМодулю");
	
	// Получим Макет компоновки
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Если ВыводВТабличныйДокумент Тогда
		МакетКомпоновкиНовый = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки);
	Иначе
		МакетКомпоновкиНовый = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки, ДанныеРасшифровки,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	КонецЕсли; 

	// Заменяем набор данных запрос на набор данных объект
	СтарыйНаборДанных = МакетКомпоновкиНовый.НаборыДанных[0];
	НаборДанныхОбъект = МакетКомпоновкиНовый.НаборыДанных.Добавить(Тип("НаборДанныхОбъектМакетаКомпоновкиДанных"));
	
	НаборДанныхОбъект.ИмяОбъекта = "Результат";
	НаборДанныхОбъект.Имя = СтарыйНаборДанных.Имя;
	НаборДанныхОбъект.ИсточникДанных = СтарыйНаборДанных.ИсточникДанных;
	Для каждого ПолеСтарый Из МакетКомпоновки.НаборыДанных[0].Поля Цикл
		НовоеПоле = НаборДанныхОбъект.Поля.Добавить();
		ЗаполнитьЗначенияСвойств(НовоеПоле, ПолеСтарый)
	КонецЦикла;
	
	Для каждого ПолеНабораСтарый Из СтарыйНаборДанных.Поля Цикл
		ПутьКДанным = ПолеНабораСтарый.ПутьКДанным;
		Найдено = Ложь;
		Для каждого ПолеНабораДанныхОбъект Из НаборДанныхОбъект.Поля Цикл
			Если ПолеНабораДанныхОбъект.ПутьКДанным = ПутьКДанным Тогда
				Найдено = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не Найдено Тогда
			НовоеПоле = НаборДанныхОбъект.Поля.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеПоле, ПолеНабораСтарый);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(НаборДанныхОбъект, СтарыйНаборДанных);
	МакетКомпоновкиНовый.НаборыДанных.Удалить(СтарыйНаборДанных);
	
	Возврат МакетКомпоновкиНовый;
	
КонецФункции //ПолучитьМакетКомпоновки()

Функция РазбитьТаблицуЗначений(ТЗ, КолонкиРазбития, КолонкиИсключения)
	
	МассивТаблиц = Новый Массив;
	
	Если ТЗ.Количество() = 0 Тогда
		МассивТаблиц.Добавить(ТЗ);
		Возврат МассивТаблиц;
	КонецЕсли;
	
	СтрокаКолонки = "";
	Для каждого Колонка Из КолонкиРазбития Цикл
		Если КолонкиИсключения.НайтиПоЗначению(Колонка.Значение) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаКолонки = СтрокаКолонки + СтрЗаменить(Строка(Колонка.Значение), ".", "") + ", ";
	КонецЦикла;
	СтрокаКолонки = Лев(СтрокаКолонки, СтрДлина(СтрокаКолонки) - 2);
	Если ПустаяСтрока(СтрокаКолонки) Тогда
		МассивТаблиц.Добавить(ТЗ);
		Возврат МассивТаблиц;
	КонецЕсли;
	
	ТЗУНикальности = ТЗ.Скопировать(,СтрокаКолонки);
	ТЗУНикальности.Свернуть(СтрокаКолонки);
	Для каждого СтрокаУникальности Из ТЗУникальности Цикл
		СтруктураПоиска = Новый Структура(СтрокаКолонки);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаУникальности);
		НайденныеСтроки = ТЗ.НайтиСтроки(СтруктураПоиска);
		МассивТаблиц.Добавить(ТЗ.Скопировать(НайденныеСтроки));
	КонецЦикла;
	Возврат МассивТаблиц;
	
КонецФункции

Функция СобратьТаблицуЗначений(МассивТаблиц)
	
	Если МассивТаблиц.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТЗ = МассивТаблиц[0].Скопировать(Новый Массив);
	Для каждого Таблица Из МассивТаблиц Цикл
		Для каждого Строка Из Таблица Цикл
			НоваяСтрока = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТЗ;
	
КонецФункции

Процедура ЗаполнитьДаннымиНовыеСтроки(МассивТаблиц, КолонкиИсключения)
	
	СтрокаКолонки = "";
	Для каждого Колонка Из КолонкиИсключения Цикл
		СтрокаКолонки = СтрокаКолонки + СтрЗаменить(Строка(Колонка.Значение), ".", "") + ", ";
	КонецЦикла;
	СтрокаКолонки = Лев(СтрокаКолонки, СтрДлина(СтрокаКолонки) - 2);
	
	Для каждого Таблица Из МассивТаблиц Цикл
		Строка = Таблица.Найти(Ложь, "СтрокаДобавлена");
		Если Строка = Неопределено Тогда
			Возврат;
		КонецЕсли;
		НайденныеСтроки = Таблица.НайтиСтроки(Новый Структура("СтрокаДобавлена", Истина));
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ЗаполнитьЗначенияСвойств(НайденнаяСтрока, Строка, , СтрокаКолонки);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДополнитьТаблицуПрогнозом(ЗначенияНастроек, ТЗ, КомпоновщикНастроек, ПодТекстЗапроса)
	
	ПоляГруппировок = ТиповыеОтчетыУХ.ПолучитьПоляГруппировок(КомпоновщикНастроек);
	ВыбранныеПоля = ТиповыеОтчетыУХ.ПолучитьВыбранныеПоля(КомпоновщикНастроек);
	
	Если ПустаяСтрока(ЗначенияНастроек.НастройкиПрогноза.ПолеПрогноза) Тогда
		Возврат;
	ИначеЕсли ПустаяСтрока(ЗначенияНастроек.НастройкиПрогноза.ПоказательПрогноза) Тогда
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ЗначенияНастроек.НастройкиПрогноза.Периодичность) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПоляГруппировок.НайтиПоЗначению(ЗначенияНастроек.НастройкиПрогноза.ПолеПрогноза) = Неопределено Тогда
		Возврат;
	Иначе
		РесурсНайден = Ложь;
		Для каждого Ресурс Из ВыбранныеПоля Цикл
			ДоступноеПоле = ТиповыеОтчетыУХ.ПолучитьДоступноеПоле(Ресурс.Поле, КомпоновщикНастроек.Настройки.Выбор.ДоступныеПоляВыбора);
			Если ДоступноеПоле.Ресурс И Ресурс.Использование И Ресурс.Поле = Новый ПолеКомпоновкиДанных(ЗначенияНастроек.НастройкиПрогноза.ПоказательПрогноза) Тогда
				РесурсНайден = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не РесурсНайден Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	Базис = Новый Структура;
	Базис.Вставить("ДатаНачала", ЗначенияНастроек.НастройкиПрогноза.ДатаОтсчета);
	Базис.Вставить("Период", ТипЕдиницыИнтервалаВремениАнализаДанных[Строка(ЗначенияНастроек.НастройкиПрогноза.Периодичность)]);
	Базис.Вставить("КоличествоПериодов", ЗначенияНастроек.НастройкиПрогноза.Кратность);
	ТЗ.Колонки.Добавить("СтрокаДобавлена", Новый ОписаниеТипов("Булево"));
	
	КолонкиРазбития = ТиповыеОтчетыУХ.ПолучитьПоляГруппировок(КомпоновщикНастроек);
	КолонкиИсключения = Новый СписокЗначений;
	КолонкиИсключения.Добавить(ЗначенияНастроек.НастройкиПрогноза.ПолеПрогноза);
	КолонкиИсключения.Добавить(ЗначенияНастроек.НастройкиПрогноза.ПоказательПрогноза);
	МассивТаблиц = РазбитьТаблицуЗначений(ТЗ, КолонкиРазбития, КолонкиИсключения);
	Для каждого Таблица Из МассивТаблиц Цикл
		РезультатРасчета = УправлениеОтчетамиУХ.РасчетТренда(Таблица, СтрЗаменить(ЗначенияНастроек.НастройкиПрогноза.ПолеПрогноза, ".", ""), ЗначенияНастроек.НастройкиПрогноза.ПоказательПрогноза, "СтрокаДобавлена", Базис, ЗначенияНастроек.НастройкиПрогноза.КоличествоАнализ, ЗначенияНастроек.НастройкиПрогноза.КоличествоПрогноз, Истина);
		Если РезультатРасчета = Неопределено Тогда
			ТЗ.Колонки.Удалить(ТЗ.Колонки.СтрокаДобавлена);
			Возврат;
		КонецЕсли;
	КонецЦикла;
	КолонкиИсключения.Добавить("СтрокаДобавлена");
	ЗаполнитьДаннымиНовыеСтроки(МассивТаблиц, КолонкиИсключения);
	ТЗ = СобратьТаблицуЗначений(МассивТаблиц);
	
	
	ТЗ.Колонки.Добавить("Источник", Новый ОписаниеТипов("Строка"));
	Для каждого Строка ИЗ ТЗ Цикл
		Если Строка.СтрокаДобавлена Тогда
			Строка.Источник = "Прогноз";
		Иначе
			Строка.Источник = "Факт";
		КонецЕсли;
	КонецЦикла;
	Если ТипЗнч(КомпоновщикНастроек.Настройки.Структура[0]) = Тип("ДиаграммаКомпоновкиДанных")
	   И КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ChartType")).Значение = ТипДиаграммы.График Тогда
		// Вывод отчета в график
		// Доработаем таблицу под вывод в график
		ТЗКопия = ТЗ.Скопировать();
		Для каждого Строка Из ТЗКопия Цикл
			Если Строка.Источник = "Прогноз" Тогда
				Строка.Источник = "Факт";
			Иначе
				Строка.Источник = "Прогноз";
			КонецЕсли;
			Строка[ЗначенияНастроек.НастройкиПрогноза.ПоказательПрогноза] = 0.0000001;
			НоваяСтрока = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		
		// Найти максимальный факт, чтобы не было разрыва графика
		МаксимальнаяДата = '19000101';
		Для каждого Строка Из ТЗ Цикл
			Если Строка.Источник = "Факт" 
			   И Строка[ЗначенияНастроек.НастройкиПрогноза.ПоказательПрогноза] <> 0.0000001 
			   И Строка[ЗначенияНастроек.НастройкиПрогноза.ПолеПрогноза] > МаксимальнаяДата Тогда
				МаксимальнаяДата = Строка[ЗначенияНастроек.НастройкиПрогноза.ПолеПрогноза];
			КонецЕсли;
		КонецЦикла;
		СтрокиСМаксимальнойДатой = ТЗ.НайтиСтроки(Новый Структура(ЗначенияНастроек.НастройкиПрогноза.ПолеПрогноза, МаксимальнаяДата));
		Для каждого СтрокаСМаксимальнойДатой Из СтрокиСМаксимальнойДатой Цикл
			НоваяСтрока = ТЗ.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСМаксимальнойДатой);
			НоваяСтрока.Источник = "Прогноз";
		КонецЦикла;
		
		// Добавляем поле группировки
		ПоследняяСерия = ТиповыеОтчетыУХ.ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек);
		Если ТипЗнч(ПоследняяСерия) = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных") Тогда
			ПоследняяСерия = ПоследняяСерия.Добавить();
			ТиповыеОтчетыУХ.ДобавитьАвтоВыбранноеПоле(ПоследняяСерия);
			ТиповыеОтчетыУХ.ДобавитьАвтоЭлементПорядка(ПоследняяСерия);
		КонецЕсли;
		
		//ПолеГруппировки = ПоследняяСерия.ПоляГруппировки.Элементы.Вставить(0, Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки = ПоследняяСерия.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
		ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Источник");
		// Добавляем пропускать базовое значение и устанавливаем его
		ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ChartType.BaseValue"));
		ЗначениеПараметра.Использование = Истина;
		ЗначениеПараметра.Значение = 0.0000001;
		ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ChartType.HideBaseValue"));
		ЗначениеПараметра.Использование = Истина;
		ЗначениеПараметра.Значение = Истина;
		
	ИначеЕсли ТипЗнч(КомпоновщикНастроек.Настройки.Структура[0]) = Тип("ДиаграммаКомпоновкиДанных") Тогда
	Иначе
		Для каждого Ресурс Из ТиповыеОтчетыУХ.ПолучитьВыбранныеПоля(КомпоновщикНастроек) Цикл
			Если Не КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Ресурс.Поле).Ресурс Тогда
				Продолжить;
			КонецЕсли;
			НовыйЭлемент = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
			// Настройка отбора
			ЭлементОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЗначенияНастроек.НастройкиПрогноза.ПолеПрогноза);
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше;
			ЭлементОтбора.ПравоеЗначение = ЗначенияНастроек.НастройкиПрогноза.ДатаОтсчета;
			// Настройка оформления
			ЗначениеПараметра = НовыйЭлемент.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TextColor"));
			ЗначениеПараметра.Использование = Истина;
			ЗначениеПараметра.Значение = WebЦвета.Синий;
			// Настройка полей
			Поле = НовыйЭлемент.Поля.Элементы.Добавить();
			Поле.Поле = Ресурс.Поле;
		КонецЦикла;
		НП = КомпоновщикНастроек.Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		НП.Поле = Новый ПолеКомпоновкиДанных("Источник");
	КонецЕсли;
	ПодтекстЗапроса = ПодтекстЗапроса + """"" КАК Источник,";
			
КонецПроцедуры //ДополнитьТаблицуПрогнозом

Функция ПолучитьСписокВыбораПериодов(Параметры = Неопределено) Экспорт
	
	СписокВыбора = Новый СписокЗначений;
	Периодичность = Новый СписокЗначений;
	// Вызов из монитора эффективности.
	Если Параметры = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Периодичность.Ссылка КАК Ссылка
		|ИЗ
		|	Перечисление.Периодичность КАК Периодичность";
		Периодичность = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		УчитыватьДоступныеСмещения = Ложь;
		
	Иначе
		
		Для каждого Строка Из Параметры.ДоступныеПериодичности Цикл
			Если Строка.Использование Тогда
				Периодичность.Добавить(Строка.Периодичность);
			КонецЕсли;
		КонецЦикла;
		
		УчитыватьДоступныеСмещения = Истина;
		
	КонецЕсли;
	
	Запрос = ПолучитьЗапросПериодичностей(Периодичность);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если НЕ УчитыватьДоступныеСмещения ИЛИ (Параметры.Свойство("ПроизвольныйПериод") И Параметры.ПроизвольныйПериод) Тогда
		СписокВыбора.Добавить("", ""); 
	КонецЕсли;
	
	Если НЕ УчитыватьДоступныеСмещения ИЛИ Параметры.СписокДоступныхОтносительныхПериодов.НайтиПоЗначению("Текущий").Пометка Тогда
		Пока Выборка.Следующий() Цикл
			СписокВыбора.Добавить(Выборка.Текущий, "Текущ. " + Выборка.Текущий.Периодичность + " (" + Выборка.Текущий + ")"); 
		КонецЦикла;
	КонецЕсли;
	Выборка.Сбросить();
	Если НЕ УчитыватьДоступныеСмещения ИЛИ Параметры.СписокДоступныхОтносительныхПериодов.НайтиПоЗначению("Предыдущий").Пометка Тогда
		Пока Выборка.Следующий() Цикл
			Если Выборка.Предыдущий <> Null Тогда
				СписокВыбора.Добавить(Выборка.Предыдущий, "Пред. " + Выборка.Предыдущий.Периодичность + " (" + Выборка.Предыдущий + ")"); 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Выборка.Сбросить();
	Если НЕ УчитыватьДоступныеСмещения ИЛИ Параметры.СписокДоступныхОтносительныхПериодов.НайтиПоЗначению("Следующий").Пометка Тогда
		Пока Выборка.Следующий() Цикл
			Если Выборка.Следующий <> Null Тогда
				СписокВыбора.Добавить(Выборка.Следующий, "След. " + Выборка.Следующий.Периодичность + " (" + Выборка.Следующий + ")"); 
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат СписокВыбора;
	
КонецФункции

Функция ПолучитьЗапросПериодичностей(Периодичность)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПериодыТекущие.Ссылка КАК Текущий,
	|	ПериодыПрошлые.Ссылка КАК Предыдущий,
	|	ПериодыСледующие.Ссылка КАК Следующий
	|ИЗ
	|	Справочник.Периоды КАК ПериодыТекущие
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Периоды КАК ПериодыПрошлые
	|		ПО ПериодыТекущие.Периодичность = ПериодыПрошлые.Периодичность
	|			И (ПериодыТекущие.ДатаНачала = ДОБАВИТЬКДАТЕ(ПериодыПрошлые.ДатаОкончания, ДЕНЬ, 1))
	|			И (ПериодыПрошлые.Произвольный = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Периоды КАК ПериодыСледующие
	|		ПО ПериодыТекущие.Периодичность = ПериодыСледующие.Периодичность
	|			И (ПериодыТекущие.ДатаОкончания = ДОБАВИТЬКДАТЕ(ПериодыСледующие.ДатаНачала, ДЕНЬ, -1))
	|			И (ПериодыСледующие.Произвольный = ЛОЖЬ)
	|ГДЕ
	|	ПериодыТекущие.Периодичность В(&Периодичность)
	|	И ПериодыТекущие.ДатаНачала <= &ТекущаяДата
	|	И КОНЕЦПЕРИОДА(ПериодыТекущие.ДатаОкончания, ДЕНЬ) >= &ТекущаяДата
	|	И ПериодыТекущие.Произвольный = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("Периодичность", Периодичность);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДата());
	Возврат Запрос;
	
КонецФункции

Функция ПолучитьНовуюПериодичность(СтруктураСохраненногоПериода) Экспорт
	
	Периодичность = Новый СписокЗначений;
	Периодичность.Добавить(СтруктураСохраненногоПериода.Период.Периодичность);
	Запрос = ПолучитьЗапросПериодичностей(Периодичность);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Если СтруктураСохраненногоПериода.Период.ДатаНачала    < СтруктураСохраненногоПериода.ТекущаяДата
		   И СтруктураСохраненногоПериода.Период.ДатаОкончания > СтруктураСохраненногоПериода.ТекущаяДата Тогда
			Возврат Выборка.Текущий;
		ИначеЕсли УправлениеОтчетамиУХ.ПолучитьДатуИзПараметра(СтруктураСохраненногоПериода.Период, "ПериодыНачало", 1) < СтруктураСохраненногоПериода.ТекущаяДата
		        И УправлениеОтчетамиУХ.ПолучитьДатуИзПараметра(СтруктураСохраненногоПериода.Период, "ПериодыКонец", 1)  > СтруктураСохраненногоПериода.ТекущаяДата Тогда
			Возврат Выборка.Предыдущий;
		ИначеЕсли УправлениеОтчетамиУХ.ПолучитьДатуИзПараметра(СтруктураСохраненногоПериода.Период, "ПериодыНачало", -1) < СтруктураСохраненногоПериода.ТекущаяДата
		        И УправлениеОтчетамиУХ.ПолучитьДатуИзПараметра(СтруктураСохраненногоПериода.Период, "ПериодыКонец", -1)  > СтруктураСохраненногоПериода.ТекущаяДата Тогда
			Возврат Выборка.Следующий;
		Иначе
			Возврат СтруктураСохраненногоПериода.Период;
		КонецЕсли;
			
	Иначе
		Возврат СтруктураСохраненногоПериода.Период;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПостроительЗапросаДляРасшифровки(МассивПолейРасшифровки)
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗначенияПоказателей.Версия.Регистратор.Ссылка КАК НастраиваемыйОтчет,
	|	ЗначенияПоказателей.Версия.Регистратор.Номер КАК Номер,
	|	ЗначенияПоказателей.Версия.Организация КАК Организация,
	|	ЗначенияПоказателей.Версия.Организация.Представление КАК ОрганизацияПредставление,
	|	ЗначенияПоказателей.Версия.ПериодОтчета КАК Период,
	|	ЗначенияПоказателей.ИтоговоеЗначение КАК ИтоговоеЗначение,
	|	ЗначенияПоказателей.Версия.ПериодОтчета.Представление КАК ПериодПредставление,
	|	ЗначенияПоказателей.Версия.Сценарий КАК Сценарий,
	|	ЗначенияПоказателей.Версия.Сценарий.Представление КАК СценарийПредставление,
	|	ЗначенияПоказателей.Версия.Регистратор.ВидОтчета КАК ВидОтчета,
	|	ЗначенияПоказателей.Версия.Регистратор.ВидОтчета.Представление КАК ВидОтчетаПредставление
	|{ВЫБРАТЬ
	|	ЗначенияПоказателей.Показатель.*}
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗначенияПоказателейОтчетовСинтетика.Версия КАК Версия,
	|		ЗначенияПоказателейОтчетовСинтетика.Показатель КАК Показатель,
	|		ИСТИНА КАК ИтоговоеЗначение,
	|		НЕОПРЕДЕЛЕНО КАК АналитикаВалюта,
	|		НЕОПРЕДЕЛЕНО КАК Аналитика1,
	|		НЕОПРЕДЕЛЕНО КАК Аналитика2,
	|		НЕОПРЕДЕЛЕНО КАК Аналитика3,
	|		НЕОПРЕДЕЛЕНО КАК Аналитика4,
	|		НЕОПРЕДЕЛЕНО КАК Аналитика5,
	|		НЕОПРЕДЕЛЕНО КАК Аналитика6
	|	ИЗ
	|		РегистрСведений.ЗначенияПоказателейОтчетовСинтетика КАК ЗначенияПоказателейОтчетовСинтетика
	|	{ГДЕ
	|		ЗначенияПоказателейОтчетовСинтетика.Версия.Регистратор.* КАК НастраиваемыйОтчет,
	|		ЗначенияПоказателейОтчетовСинтетика.Версия.Активность КАК Активность,
	|		ЗначенияПоказателейОтчетовСинтетика.Версия.Организация.* КАК Организация,
	|		ЗначенияПоказателейОтчетовСинтетика.Версия.ПериодОтчета.* КАК ПериодОтчета,
	|		ЗначенияПоказателейОтчетовСинтетика.Версия.Сценарий.* КАК Сценарий,
	|		ЗначенияПоказателейОтчетовСинтетика.Версия.Валюта.* КАК Валюта,
	|		ЗначенияПоказателейОтчетовСинтетика.Версия.* КАК Версия,
	|		ЗначенияПоказателейОтчетовСинтетика.Показатель.* КАК Показатель,
	|		ЗначенияПоказателейОтчетовСинтетика.Значение КАК Значение,
	|		ЗначенияПоказателейОтчетовСинтетика.Показатель.Владелец.* КАК ВидОтчета}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияПоказателейОтчетовВалютные.Версия,
	|		ЗначенияПоказателейОтчетовВалютные.Показатель,
	|		ЗначенияПоказателейОтчетовВалютные.ИтоговоеЗначение,
	|		ЗначенияПоказателейОтчетовВалютные.АналитикаВалюта,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО
	|	ИЗ
	|		РегистрСведений.ЗначенияПоказателейОтчетовВалютные КАК ЗначенияПоказателейОтчетовВалютные
	|	{ГДЕ
	|		ЗначенияПоказателейОтчетовВалютные.Версия.Регистратор.* КАК НастраиваемыйОтчет,
	|		ЗначенияПоказателейОтчетовВалютные.Версия.Активность КАК Активность,
	|		ЗначенияПоказателейОтчетовВалютные.Версия.Организация.* КАК Организация,
	|		ЗначенияПоказателейОтчетовВалютные.Версия.ПериодОтчета.* КАК ПериодОтчета,
	|		ЗначенияПоказателейОтчетовВалютные.Версия.Сценарий.* КАК Сценарий,
	|		ЗначенияПоказателейОтчетовВалютные.Версия.Валюта.* КАК Валюта,
	|		ЗначенияПоказателейОтчетовВалютные.Версия.* КАК Версия,
	|		ЗначенияПоказателейОтчетовВалютные.Показатель.* КАК Показатель,
	|		ЗначенияПоказателейОтчетовВалютные.Значение КАК Значение,
	|		ЗначенияПоказателейОтчетовВалютные.Показатель.Владелец.* КАК ВидОтчета}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияПоказателейОтчетов1.Версия,
	|		ЗначенияПоказателейОтчетов1.Показатель,
	|		ЗначенияПоказателейОтчетов1.ИтоговоеЗначение,
	|		ЗначенияПоказателейОтчетов1.АналитикаВалюта,
	|		ЗначенияПоказателейОтчетов1.Аналитика1,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО
	|	ИЗ
	|		РегистрСведений.ЗначенияПоказателейОтчетов1 КАК ЗначенияПоказателейОтчетов1
	|	{ГДЕ
	|		ЗначенияПоказателейОтчетов1.Версия.Регистратор.* КАК НастраиваемыйОтчет,
	|		ЗначенияПоказателейОтчетов1.Версия.Активность КАК Активность,
	|		ЗначенияПоказателейОтчетов1.Версия.Организация.* КАК Организация,
	|		ЗначенияПоказателейОтчетов1.Версия.ПериодОтчета.* КАК ПериодОтчета,
	|		ЗначенияПоказателейОтчетов1.Версия.Сценарий.* КАК Сценарий,
	|		ЗначенияПоказателейОтчетов1.Версия.Валюта.* КАК Валюта,
	|		ЗначенияПоказателейОтчетов1.Версия.* КАК Версия,
	|		ЗначенияПоказателейОтчетов1.Показатель.* КАК Показатель,
	|		ЗначенияПоказателейОтчетов1.Значение КАК Значение,
	|		ЗначенияПоказателейОтчетов1.Показатель.Владелец.* КАК ВидОтчета}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияПоказателейОтчетов2.Версия,
	|		ЗначенияПоказателейОтчетов2.Показатель,
	|		ЗначенияПоказателейОтчетов2.ИтоговоеЗначение,
	|		ЗначенияПоказателейОтчетов2.АналитикаВалюта,
	|		ЗначенияПоказателейОтчетов2.Аналитика1,
	|		ЗначенияПоказателейОтчетов2.Аналитика2,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО
	|	ИЗ
	|		РегистрСведений.ЗначенияПоказателейОтчетов2 КАК ЗначенияПоказателейОтчетов2
	|	{ГДЕ
	|		ЗначенияПоказателейОтчетов2.Версия.Регистратор.* КАК НастраиваемыйОтчет,
	|		ЗначенияПоказателейОтчетов2.Версия.Активность КАК Активность,
	|		ЗначенияПоказателейОтчетов2.Версия.Организация.* КАК Организация,
	|		ЗначенияПоказателейОтчетов2.Версия.ПериодОтчета.* КАК ПериодОтчета,
	|		ЗначенияПоказателейОтчетов2.Версия.Сценарий.* КАК Сценарий,
	|		ЗначенияПоказателейОтчетов2.Версия.Валюта.* КАК Валюта,
	|		ЗначенияПоказателейОтчетов2.Версия.* КАК Версия,
	|		ЗначенияПоказателейОтчетов2.Показатель.* КАК Показатель,
	|		ЗначенияПоказателейОтчетов2.Значение КАК Значение,
	|		ЗначенияПоказателейОтчетов2.Показатель.Владелец.* КАК ВидОтчета}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияПоказателейОтчетов3.Версия,
	|		ЗначенияПоказателейОтчетов3.Показатель,
	|		ЗначенияПоказателейОтчетов3.ИтоговоеЗначение,
	|		ЗначенияПоказателейОтчетов3.АналитикаВалюта,
	|		ЗначенияПоказателейОтчетов3.Аналитика1,
	|		ЗначенияПоказателейОтчетов3.Аналитика2,
	|		ЗначенияПоказателейОтчетов3.Аналитика3,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО
	|	ИЗ
	|		РегистрСведений.ЗначенияПоказателейОтчетов3 КАК ЗначенияПоказателейОтчетов3
	|	{ГДЕ
	|		ЗначенияПоказателейОтчетов3.Версия.Регистратор.* КАК НастраиваемыйОтчет,
	|		ЗначенияПоказателейОтчетов3.Версия.Активность КАК Активность,
	|		ЗначенияПоказателейОтчетов3.Версия.Организация.* КАК Организация,
	|		ЗначенияПоказателейОтчетов3.Версия.ПериодОтчета.* КАК ПериодОтчета,
	|		ЗначенияПоказателейОтчетов3.Версия.Сценарий.* КАК Сценарий,
	|		ЗначенияПоказателейОтчетов3.Версия.Валюта.* КАК Валюта,
	|		ЗначенияПоказателейОтчетов3.Версия.* КАК Версия,
	|		ЗначенияПоказателейОтчетов3.Показатель.* КАК Показатель,
	|		ЗначенияПоказателейОтчетов3.Значение КАК Значение,
	|		ЗначенияПоказателейОтчетов3.Показатель.Владелец.* КАК ВидОтчета}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияПоказателейОтчетов4.Версия,
	|		ЗначенияПоказателейОтчетов4.Показатель,
	|		ЗначенияПоказателейОтчетов4.ИтоговоеЗначение,
	|		ЗначенияПоказателейОтчетов4.АналитикаВалюта,
	|		ЗначенияПоказателейОтчетов4.Аналитика1,
	|		ЗначенияПоказателейОтчетов4.Аналитика2,
	|		ЗначенияПоказателейОтчетов4.Аналитика3,
	|		ЗначенияПоказателейОтчетов4.Аналитика4,
	|		НЕОПРЕДЕЛЕНО,
	|		НЕОПРЕДЕЛЕНО
	|	ИЗ
	|		РегистрСведений.ЗначенияПоказателейОтчетов4 КАК ЗначенияПоказателейОтчетов4
	|	{ГДЕ
	|		ЗначенияПоказателейОтчетов4.Версия.Регистратор.* КАК НастраиваемыйОтчет,
	|		ЗначенияПоказателейОтчетов4.Версия.Активность КАК Активность,
	|		ЗначенияПоказателейОтчетов4.Версия.Организация.* КАК Организация,
	|		ЗначенияПоказателейОтчетов4.Версия.ПериодОтчета.* КАК ПериодОтчета,
	|		ЗначенияПоказателейОтчетов4.Версия.Сценарий.* КАК Сценарий,
	|		ЗначенияПоказателейОтчетов4.Версия.Валюта.* КАК Валюта,
	|		ЗначенияПоказателейОтчетов4.Версия.* КАК Версия,
	|		ЗначенияПоказателейОтчетов4.Показатель.* КАК Показатель,
	|		ЗначенияПоказателейОтчетов4.Значение КАК Значение,
	|		ЗначенияПоказателейОтчетов4.Показатель.Владелец.* КАК ВидОтчета}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияПоказателейОтчетов5.Версия,
	|		ЗначенияПоказателейОтчетов5.Показатель,
	|		ЗначенияПоказателейОтчетов5.ИтоговоеЗначение,
	|		ЗначенияПоказателейОтчетов5.АналитикаВалюта,
	|		ЗначенияПоказателейОтчетов5.Аналитика1,
	|		ЗначенияПоказателейОтчетов5.Аналитика2,
	|		ЗначенияПоказателейОтчетов5.Аналитика3,
	|		ЗначенияПоказателейОтчетов5.Аналитика4,
	|		ЗначенияПоказателейОтчетов5.Аналитика5,
	|		НЕОПРЕДЕЛЕНО
	|	ИЗ
	|		РегистрСведений.ЗначенияПоказателейОтчетов5 КАК ЗначенияПоказателейОтчетов5
	|	{ГДЕ
	|		ЗначенияПоказателейОтчетов5.Версия.Регистратор.* КАК НастраиваемыйОтчет,
	|		ЗначенияПоказателейОтчетов5.Версия.Активность КАК Активность,
	|		ЗначенияПоказателейОтчетов5.Версия.Организация.* КАК Организация,
	|		ЗначенияПоказателейОтчетов5.Версия.ПериодОтчета.* КАК ПериодОтчета,
	|		ЗначенияПоказателейОтчетов5.Версия.Сценарий.* КАК Сценарий,
	|		ЗначенияПоказателейОтчетов5.Версия.Валюта.* КАК Валюта,
	|		ЗначенияПоказателейОтчетов5.Версия.* КАК Версия,
	|		ЗначенияПоказателейОтчетов5.Показатель.* КАК Показатель,
	|		ЗначенияПоказателейОтчетов5.Значение КАК Значение,
	|		ЗначенияПоказателейОтчетов5.Показатель.Владелец.* КАК ВидОтчета}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияПоказателейОтчетов6.Версия,
	|		ЗначенияПоказателейОтчетов6.Показатель,
	|		ЗначенияПоказателейОтчетов6.ИтоговоеЗначение,
	|		ЗначенияПоказателейОтчетов6.АналитикаВалюта,
	|		ЗначенияПоказателейОтчетов6.Аналитика1,
	|		ЗначенияПоказателейОтчетов6.Аналитика2,
	|		ЗначенияПоказателейОтчетов6.Аналитика3,
	|		ЗначенияПоказателейОтчетов6.Аналитика4,
	|		ЗначенияПоказателейОтчетов6.Аналитика5,
	|		ЗначенияПоказателейОтчетов6.Аналитика6
	|	ИЗ
	|		РегистрСведений.ЗначенияПоказателейОтчетов6 КАК ЗначенияПоказателейОтчетов6
	|	{ГДЕ
	|		ЗначенияПоказателейОтчетов6.Версия.Регистратор.* КАК НастраиваемыйОтчет,
	|		ЗначенияПоказателейОтчетов6.Версия.Активность КАК Активность,
	|		ЗначенияПоказателейОтчетов6.Версия.Организация.* КАК Организация,
	|		ЗначенияПоказателейОтчетов6.Версия.ПериодОтчета.* КАК ПериодОтчета,
	|		ЗначенияПоказателейОтчетов6.Версия.Сценарий.* КАК Сценарий,
	|		ЗначенияПоказателейОтчетов6.Версия.Валюта.* КАК Валюта,
	|		ЗначенияПоказателейОтчетов6.Версия.* КАК Версия,
	|		ЗначенияПоказателейОтчетов6.Показатель.* КАК Показатель,
	|		ЗначенияПоказателейОтчетов6.Значение КАК Значение,
	|		ЗначенияПоказателейОтчетов6.Показатель.Владелец.* КАК ВидОтчета}
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияПоказателейОтчетовНечисловые.Версия,
	|		ЗначенияПоказателейОтчетовНечисловые.Показатель,
	|		ЗначенияПоказателейОтчетовНечисловые.ИтоговоеЗначение,
	|		ЗначенияПоказателейОтчетовНечисловые.АналитикаВалюта,
	|		ЗначенияПоказателейОтчетовНечисловые.Аналитика1,
	|		ЗначенияПоказателейОтчетовНечисловые.Аналитика2,
	|		ЗначенияПоказателейОтчетовНечисловые.Аналитика3,
	|		ЗначенияПоказателейОтчетовНечисловые.Аналитика4,
	|		ЗначенияПоказателейОтчетовНечисловые.Аналитика5,
	|		ЗначенияПоказателейОтчетовНечисловые.Аналитика6
	|	ИЗ
	|		РегистрСведений.ЗначенияПоказателейОтчетовНечисловые КАК ЗначенияПоказателейОтчетовНечисловые
	|	{ГДЕ
	|		ЗначенияПоказателейОтчетовНечисловые.Версия.Регистратор.* КАК НастраиваемыйОтчет,
	|		ЗначенияПоказателейОтчетовНечисловые.Версия.Активность КАК Активность,
	|		ЗначенияПоказателейОтчетовНечисловые.Версия.Организация.* КАК Организация,
	|		ЗначенияПоказателейОтчетовНечисловые.Версия.ПериодОтчета.* КАК ПериодОтчета,
	|		ЗначенияПоказателейОтчетовНечисловые.Версия.Сценарий.* КАК Сценарий,
	|		ЗначенияПоказателейОтчетовНечисловые.Версия.Валюта.* КАК Валюта,
	|		ЗначенияПоказателейОтчетовНечисловые.Версия.* КАК Версия,
	|		ЗначенияПоказателейОтчетовНечисловые.Показатель.* КАК Показатель,
	|		ЗначенияПоказателейОтчетовНечисловые.Значение КАК Значение,
	|		ЗначенияПоказателейОтчетовНечисловые.Показатель.Владелец.* КАК ВидОтчета}) КАК ЗначенияПоказателей
	|{ГДЕ
	|	ЗначенияПоказателей.АналитикаВалюта.* КАК АналитикаВалюта,
	|	ЗначенияПоказателей.Аналитика1.* КАК Аналитика1,
	|	ЗначенияПоказателей.Аналитика2.* КАК Аналитика2,
	|	ЗначенияПоказателей.Аналитика3.* КАК Аналитика3,
	|	ЗначенияПоказателей.Аналитика4.* КАК Аналитика4,
	|	ЗначенияПоказателей.Аналитика5.* КАК Аналитика5,
	|	ЗначенияПоказателей.Аналитика6.* КАК Аналитика5,
	|	ЗначенияПоказателей.ИтоговоеЗначение КАК ИтоговоеЗначение}";
	
	Для каждого ПолеРасшифровки Из МассивПолейРасшифровки Цикл
		
		Если ТипЗнч(ПолеРасшифровки) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		// Группу элементов отбора компоновки или сложно или невозможно передать построителю отчетов
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ПолеРасшифровки) = Тип("ЭлементОтбораКомпоновкиДанных")
		   И ПолеДоступноВОтбореПостроителя(ПолеРасшифровки.ЛевоеЗначение, ПостроительЗапроса)
		   И ТипЗнч(ПолеРасшифровки.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") Тогда
		   
			ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить(Строка(ПолеРасшифровки.ЛевоеЗначение), ,);
			ТиповыеОтчетыУХ.ЗаполнитьОтборПоОтборуКомпоновщика(ЭлементОтбора, ПолеРасшифровки);
			
		ИначеЕсли ТипЗнч(ПолеРасшифровки) <> Тип("ЭлементОтбораКомпоновкиДанных")
			   И ПолеДоступноВОтбореПостроителя(ПолеРасшифровки.Поле, ПостроительЗапроса)
			   И ПолеРасшифровки.Значение <> NULL Тогда
			   
			ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить(ПолеРасшифровки.Поле, ,);
			ЭлементОтбора.Использование  = Истина;
			ЭлементОтбора.Значение = ПолеРасшифровки.Значение;
			Если ПолеРасшифровки.Иерархия Тогда
				Если ТипЗнч(ПолеРасшифровки.Значение) = Тип("СписокЗначений") Тогда
					ЭлементОтбора.ВидСравнения = ВидСравнения.ВСпискеПоИерархии;
				Иначе
					ЭлементОтбора.ВидСравнения = ВидСравнения.ВИерархии;
				КонецЕсли;
			Иначе
				Если ТипЗнч(ПолеРасшифровки.Значение) = Тип("СписокЗначений") Тогда
					ЭлементОтбора.ВидСравнения = ВидСравнения.ВСписке;
				Иначе
					ЭлементОтбора.ВидСравнения = ВидСравнения.Равно;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПостроительЗапроса;
	
КонецФункции

Функция ПолучитьНастраиваемыеОтчетыДляРасшифровки(Знач МассивПолейРасшифровки) Экспорт
	
	Если ТипЗнч(МассивПолейРасшифровки) = Тип("Строка") Тогда
		МассивПолейРасшифровки = ТиповыеОтчетыУХ.ВосстановитьМассивПолейИзXML(МассивПолейРасшифровки);
	КонецЕсли;
	
	ПостроительЗапроса = ПолучитьПостроительЗапросаДляРасшифровки(МассивПолейРасшифровки);	
	ПостроительЗапроса.Выполнить();
	Возврат ПостроительЗапроса.Результат.Выгрузить();
	
КонецФункции

Функция ПолучитьПоказателиНастраиваемогоОтчетаДляРасшифровки(Знач МассивПолейРасшифровки, ДокументСсылка) Экспорт
	
	Если ТипЗнч(МассивПолейРасшифровки) = Тип("Строка") Тогда
		МассивПолейРасшифровки = ТиповыеОтчетыУХ.ВосстановитьМассивПолейИзXML(МассивПолейРасшифровки);
	КонецЕсли;
	
	ПостроительЗапроса = ПолучитьПостроительЗапросаДляРасшифровки(МассивПолейРасшифровки);	
	НовыйОтбор = ПостроительЗапроса.Отбор.Добавить("НастраиваемыйОтчет", "НастраиваемыйОтчет");
	НовыйОтбор.Использование = Истина;
	НовыйОтбор.Значение = ДокументСсылка;
	ПостроительЗапроса.ВыбранныеПоля.Добавить("Показатель", "Показатель");
	ПостроительЗапроса.Выполнить();
	Возврат ПостроительЗапроса.Результат.Выгрузить();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ УПРАВЛЯЕМОГО РЕЖИМА - НАСЛЕДНИКИ ОДНОИМЕННЫХ ПРОЦЕДУР МОДУЛЯ.
//
&НаСервере
Функция ПолучитьНастраиваемыеОтчетыДляРасшифровки_УправляемоеПриложение(Знач АдресРасшифровки, Знач АдресМассиваПолейРасшифровки) Экспорт
	
	Расшифровка = ПолучитьИзВременногоХранилища(АдресРасшифровки);
	МассивПолейРасшифровки = ТиповыеОтчетыУХ.ПолучитьМассивПолейРасшифровки(Расшифровка, АдресМассиваПолейРасшифровки);
	НастраиваемыеОтчеты = АналитическиеОтчетыУХ.ПолучитьНастраиваемыеОтчетыДляРасшифровки(МассивПолейРасшифровки);
	
	Если НастраиваемыеОтчеты.Количество() = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли НастраиваемыеОтчеты.Количество() = 1 Тогда
		Возврат НастраиваемыеОтчеты[0].НастраиваемыйОтчет;
	Иначе
		Возврат ПоместитьВоВременноеХранилище(НастраиваемыеОтчеты);
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПоказателиНастраиваемогоОтчетаДляРасшифровки_УправляемоеПриложение(Знач АдресРасшифровка, Знач АдресДанныхРасшифровки, АдресДокументСсылка) Экспорт
	
	МассивПоказателей = Новый Массив;
	
		
	Расшифровка            = ПолучитьИзВременногоХранилища(АдресРасшифровка);
	ДокументСсылка         = ПолучитьИзВременногоХранилища(АдресДокументСсылка);
	МассивПолейРасшифровки = ТиповыеОтчетыУХ.ПолучитьМассивПолейРасшифровки(Расшифровка, АдресДанныхРасшифровки);
	ТаблицаПоказателей = АналитическиеОтчетыУХ.ПолучитьПоказателиНастраиваемогоОтчетаДляРасшифровки(МассивПолейРасшифровки, ДокументСсылка);
	Для Каждого Элемент Из ТаблицаПоказателей Цикл
		МассивПоказателей.Добавить(Элемент.Показатель.Код);
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(Новый ФиксированныйМассив(МассивПоказателей));
		
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////

// Возвращает картинку, обозначающую соответствующий индикатор
Функция ПолучитьКартинкуИндикатора(Значение) Экспорт
	
	Если Значение = "1Тренд" Тогда
		Возврат БиблиотекаКартинок.СтрелкаВниз;
	ИначеЕсли Значение = "2Тренд" Тогда
		Возврат БиблиотекаКартинок.СтрелкаВправо;
	ИначеЕсли Значение = "3Тренд" Тогда
		Возврат БиблиотекаКартинок.СтрелкаВверх;
	ИначеЕсли Значение = "1Состояние" Тогда
		Возврат БиблиотекаКартинок.ТреугольникВниз;
	ИначеЕсли Значение = "2Состояние" Тогда
		Возврат БиблиотекаКартинок.Квадрат;
	ИначеЕсли Значение = "3Состояние" Тогда
		Возврат БиблиотекаКартинок.ТреугольникВверх;
	КонецЕсли;
	
КонецФункции	

/////////////////////////////////////////////////////////////////////////////////
//ФУНКЦИИ ДЛЯ ИСПОЛЬЗОВАНИЯ В ВЕБ-ПРИЛОЖЕНИИ

// Используется в веб-приложение, так как вызов функции "Строка" напрямую не доступен
//
Функция ПолучитьСтроку(Значение) Экспорт

	Возврат Строка(Значение);

КонецФункции // ПолучитьСтроку()

// Используется в веб-приложение, так как вызов функции "Строка" напрямую не доступен
//
Функция ПолучитьИмяПоля(ПолеКомпоновкиДанных) Экспорт

	Возврат Строка(ПолеКомпоновкиДанных.Поле);

КонецФункции // ПолучитьИмяПоля()

Функция ПолучитьДоступныеПоляОтбора(НастройкиКомпоновкиДанных, ИмяПоля, ВозвращатьКоллекциюПолей) Экспорт
	Возврат ПолучитьПоляНастроекКомпоновщика(НастройкиКомпоновкиДанных.ДоступныеПоляОтбора.Элементы, ИмяПоля, ВозвращатьКоллекциюПолей);
КонецФункции

Функция ПолучитьДоступныеПоляПорядка(НастройкиКомпоновкиДанных, ИмяПоля, ВозвращатьКоллекциюПолей) Экспорт
	Возврат ПолучитьПоляНастроекКомпоновщика(НастройкиКомпоновкиДанных.ДоступныеПоляПорядка.Элементы, ИмяПоля, ВозвращатьКоллекциюПолей);
КонецФункции

Функция ПолучитьПоляНастроекКомпоновщика(КоллекцияПолей, ИмяПоля, ВозвращатьКоллекциюПолей) Экспорт
	
	Поле = Неопределено;
	ТекущаяКоллекция = КоллекцияПолей;
	Если ЗначениеЗаполнено(ИмяПоля) Тогда
		МассивИмен = ОбщегоНазначенияУХ.РазложитьСтрокуВМассивПодстрок(ИмяПоля, ".");
		ТекущееИмя = "";
		Для Индекс = 0 По МассивИмен.Количество() - 1 Цикл
			ТекущееИмя = ТекущееИмя + ?(ТекущееИмя <> "", ".", "") + МассивИмен[Индекс];
			Если ТекущаяКоллекция <> Неопределено Тогда
				Поле = ТекущаяКоллекция.Найти(ТекущееИмя);
				Если Поле <> Неопределено Тогда
					ТекущаяКоллекция = Поле.Элементы;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ВозвращатьКоллекциюПолей Тогда
		Возврат ТекущаяКоллекция;
	Иначе 
		Возврат Поле;
	КонецЕсли;
	
КонецФункции

Процедура ДобавитьОтборКомпоновкиДанных(НастройкиКомпоновкиДанных, ИмяПоля, ВидСравнения, Значение) Экспорт
	
	Отбор = НастройкиКомпоновкиДанных.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Отбор.ВидСравнения = ВосстановитьВидСравненияИзСтроки(ВидСравнения);
	
	Если ТипЗнч(Значение) = Тип("Массив") Тогда
		СписокЗначений = Новый СписокЗначений();
		Для Каждого ЭлементМассива Из Значение Цикл
			СписокЗначений.Добавить(ЭлементМассива);
		КонецЦикла;
		Отбор.ПравоеЗначение = СписокЗначений;
	Иначе
		Отбор.ПравоеЗначение = Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьПорядокКомпоновкиДанных(НастройкиКомпоновкиДанных, ИмяПоля, НаправлениеСортировки) Экспорт
	Порядок = НастройкиКомпоновкиДанных.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	Порядок.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
	Порядок.ТипУпорядочивания = ВосстановитьНаправлениеСортировкиИзСтроки(НаправлениеСортировки);
КонецПроцедуры

Процедура УстановитьЗначениеПараметраКомпоновкиДанных(НастройкиКомпоновкиДанных, ИмяПараметра, Значение) Экспорт
	Параметр = НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
	Если Параметр = Неопределено Тогда
		Параметр = НастройкиКомпоновкиДанных.ПараметрыДанных.Элементы.Добавить();
		Параметр.Параметр = Новый ПараметрКомпоновкиДанных(ИмяПараметра);
	КонецЕсли;
	Параметр.Значение = Значение;
КонецПроцедуры

Функция ВосстановитьВидСравненияИзСтроки(СтроковоеПредставление) Экспорт
	Если СтроковоеПредставление = Строка(ВидСравненияКомпоновкиДанных.Больше) Тогда
		Возврат ВидСравненияКомпоновкиДанных.Больше;
	ИначеЕсли СтроковоеПредставление = Строка(ВидСравненияКомпоновкиДанных.БольшеИлиРавно) Тогда
		Возврат ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ИначеЕсли СтроковоеПредставление = Строка(ВидСравненияКомпоновкиДанных.ВИерархии) Тогда
		Возврат ВидСравненияКомпоновкиДанных.ВИерархии;
	ИначеЕсли СтроковоеПредставление = Строка(ВидСравненияКомпоновкиДанных.ВСписке) Тогда
		Возврат ВидСравненияКомпоновкиДанных.ВСписке;
	ИначеЕсли СтроковоеПредставление = Строка(ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии) Тогда
		Возврат ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
	ИначеЕсли СтроковоеПредставление = Строка(ВидСравненияКомпоновкиДанных.Заполнено) Тогда
		Возврат ВидСравненияКомпоновкиДанных.Заполнено;
	ИначеЕсли СтроковоеПредставление = Строка(ВидСравненияКомпоновкиДанных.Меньше) Тогда
		Возврат ВидСравненияКомпоновкиДанных.Меньше;
	ИначеЕсли СтроковоеПредставление = Строка(ВидСравненияКомпоновкиДанных.МеньшеИлиРавно) Тогда
		Возврат ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ИначеЕсли СтроковоеПредставление = Строка(ВидСравненияКомпоновкиДанных.НеВИерархии) Тогда
		Возврат ВидСравненияКомпоновкиДанных.НеВИерархии;
	ИначеЕсли СтроковоеПредставление = Строка(ВидСравненияКомпоновкиДанных.НеВСписке) Тогда
		Возврат ВидСравненияКомпоновкиДанных.НеВСписке;
	ИначеЕсли СтроковоеПредставление = Строка(ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии) Тогда
		Возврат ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии;
	ИначеЕсли СтроковоеПредставление = Строка(ВидСравненияКомпоновкиДанных.НеЗаполнено) Тогда
		Возврат ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ИначеЕсли СтроковоеПредставление = Строка(ВидСравненияКомпоновкиДанных.НеРавно) Тогда
		Возврат ВидСравненияКомпоновкиДанных.НеРавно;
	ИначеЕсли СтроковоеПредставление = Строка(ВидСравненияКомпоновкиДанных.НеСодержит) Тогда
		Возврат ВидСравненияКомпоновкиДанных.НеСодержит;
	ИначеЕсли СтроковоеПредставление = Строка(ВидСравненияКомпоновкиДанных.Равно) Тогда
		Возврат ВидСравненияКомпоновкиДанных.Равно;
	ИначеЕсли СтроковоеПредставление = Строка(ВидСравненияКомпоновкиДанных.Содержит) Тогда
		Возврат ВидСравненияКомпоновкиДанных.Содержит;
	КонецЕсли;
	Возврат ВидСравненияКомпоновкиДанных.Равно;
КонецФункции

Функция ВосстановитьНаправлениеСортировкиИзСтроки(СтроковоеПредставление) Экспорт
	Если СтроковоеПредставление = Строка(НаправлениеСортировкиКомпоновкиДанных.Возр) Тогда
		Возврат НаправлениеСортировкиКомпоновкиДанных.Возр;
	ИначеЕсли СтроковоеПредставление = Строка(НаправлениеСортировкиКомпоновкиДанных.Убыв) Тогда
		Возврат НаправлениеСортировкиКомпоновкиДанных.Убыв;
	КонецЕсли;
	Возврат НаправлениеСортировкиКомпоновкиДанных.Возр;
КонецФункции

Функция ПараметрТипаСписок(ПараметрКомпоновкиДанных) Экспорт
	Возврат ПараметрКомпоновкиДанных.Тип.СодержитТип(Тип("СписокЗначений"));
КонецФункции

// Чтобы описание типов можно было прочитать из веб-приложения,
//  из него необходимо выкинуть типы, которые не понимает веб-расширение
//
Функция ПолучитьТипПараметраКомпоновкиДанных(ПараметрКомпоновкиДанных) Экспорт
	
	Типы = Новый Массив();
	
	Для Каждого Тип Из ПараметрКомпоновкиДанных.Тип.Типы() Цикл
		Если Тип <> Тип("ПолеКомпоновкиДанных") Тогда
			Типы.Добавить(Тип);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Новый ОписаниеТипов(Типы);
	
КонецФункции

Функция ПолучитьЗначениеПараметраКомпоновкиДанных(ПараметрКомпоновкиДанных) Экспорт
	
	Если ПараметрКомпоновкиДанных <> Неопределено Тогда
		Если ТипЗнч(ПараметрКомпоновкиДанных.Значение) = Тип("СтандартнаяДатаНачала") Тогда
			Возврат ПараметрКомпоновкиДанных.Значение.Дата;
		КонецЕсли;
		
		Возврат ПараметрКомпоновкиДанных.Значение;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции
/////////////////////////////////////////////////////////////////////////////////