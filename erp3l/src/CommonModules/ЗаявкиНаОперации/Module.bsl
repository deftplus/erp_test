
#Область ПрограммныйИнтерфейс
Функция СоздатьЗаявкуНаПокупкуВалюты(СтруктураПараметров) Экспорт
	
	СтруктураЗаполнения = Новый Структура;
	СтруктураЗаполнения.Вставить("ВидОперацииУХ", Справочники.ВидыОперацийУХ.ПриобретениеВалюты);
	
	СтруктураЗаполнения.Вставить("ВалютаДокумента" , ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	СтруктураЗаполнения.Вставить("ВалютаОплаты" , ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета());
	СтруктураЗаполнения.Вставить("ВалютаКонвертации" , СтруктураПараметров.ВалютаКонвертации);
	СтруктураЗаполнения.Вставить("КурсПлатежа" , СтруктураПараметров.КурсКонвертации);
	СтруктураЗаполнения.Вставить("КратностьПлатежа" , 1);
	СтруктураЗаполнения.Вставить("СуммаДокумента" , СтруктураПараметров.СуммаПокупки / СтруктураПараметров.КурсКонвертации);
	СтруктураЗаполнения.Вставить("СуммаКонвертации" , СтруктураПараметров.СуммаПокупки);
	СтруктураЗаполнения.Вставить("Организация" , СтруктураПараметров.ДоговорКонтрагента.Владелец);
	СтруктураЗаполнения.Вставить("ЦФО" , СтруктураПараметров.ДоговорКонтрагента.Владелец);
	СтруктураЗаполнения.Вставить("Получатель" , СтруктураПараметров.ДоговорКонтрагента.Владелец);
	СтруктураЗаполнения.Вставить("ДоговорКонтрагента" , СтруктураПараметров.ДоговорКонтрагента);
	СтруктураЗаполнения.Вставить("Контрагент" , СтруктураПараметров.СчетЗачисления.Владелец);
	СтруктураЗаполнения.Вставить("СчетКонтрагента", СтруктураПараметров.СчетЗачисления);
	СтруктураЗаполнения.Вставить("ДатаНачала" ,ТекущаяДата());
	СтруктураЗаполнения.Вставить("ФормаОплаты" ,Перечисления.ФормыОплаты.Безналичная);
	СтруктураЗаполнения.Вставить("ВнеМаршрута" , Истина);	
	
	
	ДокументОбъект = Документы.ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент();
	ДокументОбъект.Заполнить(СтруктураЗаполнения);
	
	//
	РеквизитыЗаявки = ЗаявкиНаОперации.РеквизитыДокументаЗаявка(Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств"));	
	ПланируемаяДатаОперации = ЗаявкиНаОперации.РеквизитЗаявки(ДокументОбъект, РеквизитыЗаявки.ПланируемаяДатаОперации);
	ТабРазмещение = ПлатежныеПозиции.НоваяПлатежнаяПозицияПоДаннымДокумента(ДокументОбъект);
	ТабРазмещение[0].БанковскийСчетКасса = СтруктураПараметров.СчетСписания;
	ТабРазмещение[0].ДатаИсполнения = ПланируемаяДатаОперации;
	ТабРазмещение[1].БанковскийСчетКасса = СтруктураПараметров.СчетЗачисления;
	ТабРазмещение[1].ДатаИсполнения = ПланируемаяДатаОперации;
		
	ДокументОбъект.ДополнительныеСвойства.Вставить("ПлатежнаяПозиция", ТабРазмещение);
	
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
КонецФункции

Функция ПолучитьМенеджерЗаявки(ВидБюджета, ПриходРасход) Экспорт

	ИмяДокумента = ЗаявкиНаОперацииКлиентСервер.ПолучитьИмяДокументаЗаявка(ВидБюджета, ПриходРасход);
	
	Если ЗначениеЗаполнено(ИмяДокумента) Тогда
		Возврат Документы[ИмяДокумента];
	Иначе
		Возврат Неопределено;
	КонецЕсли;

КонецФункции // ПолучитьМенеджерЗаявки()

// Обработчик подписки на событие
Процедура ПередУдалениемДокументаИзменившегоСостояниеДокументаПланированияОбработчик(Источник) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УдаляемыйДокумент", Источник.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	РегистрСведений.СостоянияИсполненияДокументовПланирования КАК СостоянияИсполненияДокументовПланирования
	|ГДЕ
	|	СостоянияИсполненияДокументовПланирования.ДокументИзменившийСостояние = &УдаляемыйДокумент";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		мз = РегистрыСведений.СостоянияИсполненияДокументовПланирования.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(мз, Выборка);
		мз.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

#Область РеквизитыЗаявки

Функция Новый_Реквизит(ИмяРеквизита, ИмяТЧ = "") экспорт
	
	Результат = Новый Структура("ИмяРеквизита, ИмяТЧ, Значение", ИмяРеквизита, ИмяТЧ);
	Если ТипЗнч(ИмяРеквизита) = Тип("Строка") Тогда
		Результат.ИмяРеквизита = ИмяРеквизита;
		Результат.ИмяТЧ = ИмяТЧ;
		Результат.Значение = неопределено;
	Иначе
		Результат.ИмяРеквизита = "";
		Результат.ИмяТЧ = "";
		Результат.Значение = ИмяРеквизита;
	КонецЕсли;
	
	Результат.Вставить("ЕстьРеквизит",		ЗначениеЗаполнено(Результат.ИмяРеквизита));	
	Результат.Вставить("РазмещенВШапке",	Результат.ЕстьРеквизит И НЕ ЗначениеЗаполнено(Результат.ИмяТЧ));	
	Результат.Вставить("РазмещенВТЧ",		ЗначениеЗаполнено(Результат.ИмяТЧ));	
	Результат.Вставить("ЕстьЗначение",		ЗначениеЗаполнено(Результат.Значение));
	
	//
	ЗначениеТекст = "";
	Если Результат.ЕстьРеквизит Тогда
		
		ЗначениеТекст = Результат.ИмяРеквизита;
		Если Результат.РазмещенВТЧ Тогда
			ЗначениеТекст = Результат.ИмяТЧ+"."+ЗначениеТекст;
		КонецЕсли;
		
	КонецЕсли;
	Результат.Вставить("ЗначениеТекст",		ЗначениеТекст);
	
	Возврат Результат;
	
КонецФункции

Процедура Изменить_Реквизит(Реквизит, ИмяРеквизита, ИмяТЧ = "") экспорт
	
	Если ТипЗнч(ИмяРеквизита) = Тип("Строка") Тогда
		Реквизит.ИмяРеквизита = ИмяРеквизита;
		Реквизит.ИмяТЧ = ИмяТЧ;
		Реквизит.Значение = неопределено;
	Иначе
		Реквизит.ИмяРеквизита = "";
		Реквизит.ИмяТЧ = "";
		Реквизит.Значение = ИмяРеквизита;
	КонецЕсли;
	
	Реквизит.ЕстьРеквизит	= ЗначениеЗаполнено(Реквизит.ИмяРеквизита);
	Реквизит.РазмещенВШапке	= Реквизит.ЕстьРеквизит И НЕ ЗначениеЗаполнено(Реквизит.ИмяТЧ);
	Реквизит.РазмещенВТЧ	= ЗначениеЗаполнено(Реквизит.ИмяТЧ);
	Реквизит.ЕстьЗначение	= ЗначениеЗаполнено(Реквизит.Значение);
	
	//
	ЗначениеТекст = "";
	Если Реквизит.ЕстьРеквизит Тогда
		
		ЗначениеТекст = Реквизит.ИмяРеквизита;
		Если Реквизит.РазмещенВТЧ Тогда
			ЗначениеТекст = Реквизит.ИмяТЧ+"."+ЗначениеТекст;
		КонецЕсли;
		
	КонецЕсли;
	Реквизит.Вставить("ЗначениеТекст",		ЗначениеТекст);
	
КонецПроцедуры

Функция Новый_ЗначениеРеквизита(ИмяЗначения) экспорт
	
	ЗначениеРеквизита = ПредопределенноеЗначение(ИмяЗначения);
	
	Реквизит = Новый_Реквизит(ЗначениеРеквизита);
	Реквизит.ЗначениеТекст = "ЗНАЧЕНИЕ("+СокрЛП(ИмяЗначения)+")";
	
	Возврат Реквизит;
	
КонецФункции

// Функция возвращает унифицировнную структуру имен реквизитов заявки и их размещений
Функция РеквизитыДокументаЗаявка(ТипДокумента) экспорт
	
	РеквизитыЗаявки = Новый Структура;
	
	РеквизитыЗаявки.Вставить("ВидБюджета");
	РеквизитыЗаявки.Вставить("ВидБюджетаПВХ");
	РеквизитыЗаявки.Вставить("ПриходРасход");
	РеквизитыЗаявки.Вставить("ФормаОплаты", Новый_Реквизит("ФормаОплаты"));

	РеквизитыЗаявки.Вставить("Ответственный", 			Новый_Реквизит("Ответственный"));
	РеквизитыЗаявки.Вставить("ПланируемаяДатаОперации");
	
	РеквизитыЗаявки.Вставить("Организация", 			Новый_Реквизит("Организация"));
	РеквизитыЗаявки.Вставить("Контрагент",				Новый_Реквизит("Контрагент"));
	РеквизитыЗаявки.Вставить("ДоговорКонтрагента",		Новый_Реквизит("ДоговорКонтрагента"));
	РеквизитыЗаявки.Вставить("ОбъектРасчетов",			Новый_Реквизит(неопределено));
	РеквизитыЗаявки.Вставить("БанковскийСчетКонтрагента");
	РеквизитыЗаявки.Вставить("БанковскийСчет",			Новый_Реквизит(неопределено));
	РеквизитыЗаявки.Вставить("Касса",					Новый_Реквизит(неопределено));
	РеквизитыЗаявки.Вставить("БанковскийСчетПолучатель",Новый_Реквизит(неопределено));
	РеквизитыЗаявки.Вставить("КассаПолучатель",			Новый_Реквизит(неопределено));
	
	РеквизитыЗаявки.Вставить("ЭтоВнутригрупповоеПеремещение",	Новый_Реквизит(Неопределено));
	РеквизитыЗаявки.Вставить("КурсКонвертации", Новый_Реквизит(Неопределено));
	РеквизитыЗаявки.Вставить("КратностьКонвертации", Новый_Реквизит(Неопределено));
	
	РеквизитыЗаявки.Вставить("ОрганизацияВстречная",	Новый_Реквизит(неопределено));
	РеквизитыЗаявки.Вставить("КонтрагентОрганизации",	Новый_Реквизит(неопределено));
	РеквизитыЗаявки.Вставить("БанковскийСчетОрганизацииВстречной", Новый_Реквизит(неопределено));
	РеквизитыЗаявки.Вставить("ДоговорВстречный",		Новый_Реквизит(неопределено));
	
	РеквизитыЗаявки.Вставить("ВалютаДокумента", 		Новый_Реквизит("ВалютаДокумента"));
	РеквизитыЗаявки.Вставить("ВалютаОплаты",			Новый_Реквизит("ВалютаОплаты"));
	РеквизитыЗаявки.Вставить("ВалютаКонвертации",		Новый_Реквизит(неопределено));
	РеквизитыЗаявки.Вставить("СуммаДокумента",			Новый_Реквизит("СуммаДокумента"));
	
	РеквизитыЗаявки.Вставить("ЦФО", 					Новый_Реквизит("ЦФО"));
	РеквизитыЗаявки.Вставить("Проект", 					Новый_Реквизит("Проект"));
	
	РеквизитыЗаявки.Вставить("СтатьяБюджета",			Новый_Реквизит(неопределено));
	РеквизитыЗаявки.Вставить("СтатьяБюджетаСписания",	Новый_Реквизит(неопределено));
	РеквизитыЗаявки.Вставить("СтатьяБюджетаЗачисления",	Новый_Реквизит(неопределено));
	РеквизитыЗаявки.Вставить("ДокументПланирования",	Новый_Реквизит("ДокументПланирования"));

	
	РеквизитыЗаявки.СтатьяБюджета.Вставить("Аналитики", Новый Массив);
	РеквизитыЗаявки.СтатьяБюджетаСписания.Вставить("Аналитики", Новый Массив);
	РеквизитыЗаявки.СтатьяБюджетаЗачисления.Вставить("Аналитики", Новый Массив);
	
	Для Сч = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
		РеквизитыЗаявки.Вставить(СтрШаблон("Аналитика%1", Сч),				Новый_Реквизит(неопределено));
		РеквизитыЗаявки.Вставить(СтрШаблон("АналитикаСписания%1", Сч),		Новый_Реквизит(неопределено));
		РеквизитыЗаявки.Вставить(СтрШаблон("АналитикаЗачисления%1", Сч),	Новый_Реквизит(неопределено));
		
		РеквизитыЗаявки.СтатьяБюджета.Аналитики.Добавить(РеквизитыЗаявки[СтрШаблон("Аналитика%1", Сч)]);
		РеквизитыЗаявки.СтатьяБюджетаСписания.Аналитики.Добавить(РеквизитыЗаявки[СтрШаблон("АналитикаСписания%1", Сч)]);
		РеквизитыЗаявки.СтатьяБюджетаЗачисления.Аналитики.Добавить(РеквизитыЗаявки[СтрШаблон("АналитикаЗачисления%1", Сч)]);
		
	КонецЦикла;
	
	РеквизитыЗаявки.Вставить("ОснованиеОбязательства",	Новый_Реквизит(неопределено));
	
	// 
	Параметры = Новый Структура("Элементы", Новый Соответствие);
	РеквизитыЗаявки.Вставить("Параметры", Параметры);
	
	Если РеквизитыЗаявки.ДоговорКонтрагента.ЕстьРеквизит Тогда
		Параметры.Элементы.Вставить("ДоговорКонтрагента", 
			ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(РеквизитыЗаявки.ДоговорКонтрагента.ИмяРеквизита));
	КонецЕсли;
	
	// БанковскийСчет/Касса указывается в форме документа: Истина; В платежной позиции: ЛОЖЬ.
	РеквизитыЗаявки.Параметры.Вставить("СчетКассаВФорме", Истина);
	
	//
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Новый (ТипДокумента));
	Попытка
		Менеджер.РеквизитыЗаявки(РеквизитыЗаявки);
	Исключение
	    
	КонецПопытки;
	
	Возврат РеквизитыЗаявки;
	
КонецФункции

// Функция возвращает значение реквизита заявки
Функция РеквизитЗаявки(Объект, Реквизит) экспорт
	
	Если Реквизит.ЕстьЗначение Тогда
		Возврат Реквизит.Значение;
	ИначеЕсли Реквизит.ЕстьРеквизит И НЕ Реквизит.РазмещенВТЧ Тогда
		Возврат Объект[Реквизит.ИмяРеквизита];
	ИначеЕсли Реквизит.ЕстьРеквизит И Реквизит.РазмещенВТЧ Тогда
		Возврат Объект[Реквизит.ИмяТЧ].Выгрузить(,Реквизит.ИмяРеквизита).ВыгрузитьКолонку(Реквизит.ИмяРеквизита);
	Иначе
		Возврат неопределено
	КонецЕсли;
	
КонецФункции

// Процедура устанавливает значение реквизита заявки
Процедура УстановитьРеквизитЗаявки(Объект, Реквизит, Значение) экспорт
	
	Если Реквизит.ЕстьРеквизит И НЕ Реквизит.РазмещенВТЧ Тогда
		Объект[Реквизит.ИмяРеквизита] = Значение;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает значение реквизита заявки, если оно не заполнено
Процедура УстановитьНезаполненныйРеквизитЗаявки(Объект, Реквизит, Значение) экспорт
	
	Если Реквизит.ЕстьРеквизит И НЕ Реквизит.РазмещенВТЧ Тогда
		Если НЕ ЗначениеЗаполнено(Объект[Реквизит.ИмяРеквизита]) Тогда
			Объект[Реквизит.ИмяРеквизита] = Значение;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает значение реквизита заявки, если переданное значение заполнено
Процедура УстановитьЗаполненныйРеквизитЗаявки(Объект, Реквизит, Значение) экспорт
	
	Если Реквизит.ЕстьРеквизит И НЕ Реквизит.РазмещенВТЧ Тогда
		Если ЗначениеЗаполнено(Значение) Тогда
			Объект[Реквизит.ИмяРеквизита] = Значение;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает значение реквизита строки табличной части заявки
Процедура УстановитьРеквизитСтрокиТЧЗаявки(СтрокаТЧ, Реквизит, Значение) экспорт
	
	Если Реквизит.ЕстьРеквизит И Реквизит.РазмещенВТЧ Тогда
		СтрокаТЧ[Реквизит.ИмяРеквизита] = Значение;
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитСтрокиТЧЗаявки(СтрокаТЧ, Реквизит) 
	
	Если Реквизит.ЕстьРеквизит И Реквизит.РазмещенВТЧ Тогда
		Возврат СтрокаТЧ[Реквизит.ИмяРеквизита];
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Устарела: Используется в Документ.РеестрПлатежей.Модуль менеджера(100, 24)
Функция ИмяРеквизитаДоговорДокумента(ДокументСсылка) экспорт
	
	Инфо = РеквизитыДокументаЗаявка(ТипЗнч(ДокументСсылка));
	Возврат Инфо.ДоговорКонтрагента.ИмяРеквизита;
	
КонецФункции

// Устарела: Используется в Обработка.УправлениеОбязательствами.Форма.Форма.Форма.Модуль(1196, 29)
Функция ИмяРеквизитаВалютаДокумента(ДокументСсылка) экспорт
	
	Инфо = РеквизитыДокументаЗаявка(ТипЗнч(ДокументСсылка));
	Возврат Инфо.ВалютаДокумента.ИмяРеквизита;
	
КонецФункции

Функция ТекстЗапросаПоПолямДокументаЗаявка(ТипЗаявки, Поля) Экспорт
	
	ШаблонПоля = "%1 КАК %2";
	ТестыПолей = Новый Массив;
	Для Каждого КлючЗначение Из Поля Цикл
		
		ТипЗнч = ТипЗнч(КлючЗначение.Значение);
		Если КлючЗначение.Значение = неопределено Тогда
			СтрокаПоля = "Документ."+КлючЗначение.Ключ;
		ИначеЕсли ТипЗнч = Тип("Строка") Тогда
			СтрокаПоля = КлючЗначение.Значение;
		ИначеЕсли ТипЗнч = Тип("Структура") Тогда
			// Это описание реквизита заявки
			Реквизит = КлючЗначение.Значение;
			Если Реквизит.ЕстьРеквизит Тогда
				Если Реквизит.РазмещенВТЧ Тогда
					СтрокаПоля = "неопределено";
				Иначе
					СтрокаПоля = "Документ."+Реквизит.ЗначениеТекст;
				КонецЕсли;
			ИначеЕсли КлючЗначение.Значение.ЕстьЗначение Тогда
				СтрокаПоля = Реквизит.ЗначениеТекст;
			Иначе
				СтрокаПоля = "неопределено";
			КонецЕсли;
		КонецЕсли;
		ТестыПолей.Добавить(СтрШаблон(ШаблонПоля, СтрокаПоля, КлючЗначение.Ключ));
	КонецЦикла;
	
	ПоляЗапроса = СтрСоединить(ТестыПолей, ",
											|	");
	
	ПустоеЗначение = Новый (ТипЗаявки);
	ИмяДокументаЗаявка = ПустоеЗначение.Метаданные().Имя;
	
	ШаблонЗапроса = 
	"ВЫБРАТЬ
	|	%1
	|ИЗ
	|	Документ.%2 КАК Документ
	|ГДЕ
	|	Документ.Ссылка = &Ссылка";
	
	ТекстЗапроса = СтрШаблон(ШаблонЗапроса, ПоляЗапроса, ИмяДокументаЗаявка);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#Область РазмещениеАналитикСтатейБюджетовВФормахЗаявки

Процедура РазместитьВКолонкахТаблицы(РеквизитыЗаявки, ТаблицаЭлемент, Реквизит, СтатьяЭлемент, АналитикаРеквизит, АналитикаЭлемент, РазмещениеЭлементовАналитик) Экспорт
	Новый_РазмещениеАналитикСтатей(РеквизитыЗаявки, "ВКолонкахТаблицы", Реквизит, СтатьяЭлемент, АналитикаРеквизит, АналитикаЭлемент, РазмещениеЭлементовАналитик, ТаблицаЭлемент);
КонецПроцедуры

Процедура РазместитьВПоляхФормы(РеквизитыЗаявки, ТаблицаЭлемент = "", Реквизит, СтатьяЭлемент, АналитикаРеквизит, АналитикаЭлемент, РазмещениеЭлементовАналитик) Экспорт
	Новый_РазмещениеАналитикСтатей(РеквизитыЗаявки, "ВПоляхФормы", Реквизит, СтатьяЭлемент, АналитикаРеквизит, АналитикаЭлемент, РазмещениеЭлементовАналитик, ТаблицаЭлемент);
КонецПроцедуры

Процедура Новый_РазмещениеАналитикСтатей(РеквизитыЗаявки, ВидРазмещения, Реквизит, СтатьяЭлемент, АналитикаРеквизит, АналитикаЭлемент, РазмещениеЭлементовАналитик, ТаблицаЭлемент = "")
	
	Если НЕ РеквизитыЗаявки.Свойство("Параметры") Тогда
		РеквизитыЗаявки.Вставить("Параметры", Новый Структура);
	КонецЕсли;
	
	Если НЕ РеквизитыЗаявки.Параметры.Свойство("РазмещениеАналитикСтатей") Тогда
		РеквизитыЗаявки.Параметры.Вставить("РазмещениеАналитикСтатей", Новый Соответствие);
	КонецЕсли;
	
	Если ТипЗнч(РеквизитыЗаявки.Параметры.РазмещениеАналитикСтатей) <> Тип("Соответствие") Тогда
		РеквизитыЗаявки.Параметры.РазмещениеАналитикСтатей = Новый Соответствие;
	КонецЕсли;
	
	РеквизитыЗаявки.Параметры.РазмещениеАналитикСтатей.Вставить(
		СтатьяЭлемент,
		Новый Структура(
			"ВидРазмещения, Реквизит, СтатьяЭлемент, АналитикаРеквизит, АналитикаЭлемент, РазмещениеЭлементовАналитик, ТаблицаЭлемент",
			 ВидРазмещения, Реквизит, СтатьяЭлемент, АналитикаРеквизит, АналитикаЭлемент, РазмещениеЭлементовАналитик, ТаблицаЭлемент
		)
	);
	
КонецПроцедуры

#КонецОбласти 

#Область СобытияФормы
	
Процедура ПриЧтенииСоздании(Форма, ПараметрыРазмещения) Экспорт
		
	// Если реквизит формы РеквизитыДокумента существует и заполнен, то дальнейшая инициализация не нужна
	Если ТребуетсяИнициализацияФормы(Форма) Тогда
			
		// Создаем реквизиты формы документа
		СоздатьРеквизитыФормыЗаявки(Форма);
		
		// Создаем элементы формы заявки
		СоздатьЭлементыФормыЗаявки(Форма, ПараметрыРазмещения);
		
		// Инициализировать созданные реквизиты и элементы
		ИнициализироватьФормуЗаявки(Форма);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		ЗаполнитьИзмененностьРеквизитов(Форма);
	Иначе
		// для новых документов, при первоначальном открытии, пользователь ничего не успел поменять
	КонецЕсли;	

	
КонецПроцедуры

//
Функция ТребуетсяИнициализацияФормы(Форма) Экспорт
	// Если реквизит формы РеквизитыДокумента существует и заполнен, то дальнейшая инициализация не нужна
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "РеквизитыДокумента")
		И ТипЗнч(Форма.РеквизитыДокумента) = Тип("Структура") Тогда
		АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(Форма);
		Возврат Ложь;
	КонецЕсли;
	Возврат Истина;
КонецФункции

//
Процедура СоздатьРеквизитыФормыЗаявки(Форма, МассивРеквизитов = неопределено) Экспорт
	
	Объект = Форма.Объект;
	
	//
	РеквизитыЗаявки = ЗаявкиНаОперацииПовтИсп.РеквизитыДокументаЗаявка(Объект.Ссылка.Метаданные().ПолноеИмя());
	
	//
	Предназначение = РеквизитыЗаявки.ВидБюджета.Значение;
	ЭтоБДДС = ВстраиваниеОПККлиентСерверПереопределяемый.ЭтоБДДС(Предназначение);
	ЭтоБДР = ВстраиваниеОПККлиентСерверПереопределяемый.ЭтоБДР(Предназначение);
	
	//
	РеквизитыЗаявки.Параметры.Вставить("ИспользоватьПлатежныеПозиции", ЭтоБДДС);
	РеквизитыЗаявки.Параметры.Вставить("ИспользоватьКонтроль", Истина);
	РеквизитыЗаявки.Параметры.Вставить("ИспользоватьСогласование", Истина);
	
	//
	Реквизиты = Новый Массив;
	
	// Добавляем массив реквизитов переданными на вход массивом реквизитов
	Если ТипЗнч(МассивРеквизитов) = Тип("Массив") Тогда
		Для Каждого Реквизит Из МассивРеквизитов Цикл
			Реквизиты.Добавить(Реквизит);
		КонецЦикла;
	КонецЕсли;
	
	//
	Реквизиты.Добавить(Новый РеквизитФормы("ВидБюджета", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыБюджетов")));
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "РеквизитыДокумента") Тогда
		Реквизиты.Добавить(Новый РеквизитФормы("РеквизитыДокумента", Новый ОписаниеТипов("Неопределено")));
	КонецЕсли;
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "РеестрДокументов") Тогда
		Реквизиты.Добавить(Новый РеквизитФормы("РеестрДокументов", Новый ОписаниеТипов("СправочникСсылка.РеестрыСогласуемыхОбъектов")));
	КонецЕсли;
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ЕстьСуперПользователь") Тогда
		Реквизиты.Добавить(Новый РеквизитФормы("ЕстьСуперПользователь", Новый ОписаниеТипов("Булево")));
	КонецЕсли;
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ЗначенияВыбораПриходРасход") Тогда
		Реквизиты.Добавить(Новый РеквизитФормы("ЗначенияВыбораПриходРасход", Новый ОписаниеТипов("СписокЗначений")));
	КонецЕсли;
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ПроектБюджетодержатель") Тогда
		Реквизиты.Добавить(Новый РеквизитФормы("ПроектБюджетодержатель", Метаданные.ОпределяемыеТипы.Проекты.Тип));
	КонецЕсли;
	
	Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СостояниеДокумента") Тогда
		Реквизиты.Добавить(Новый РеквизитФормы("СостояниеДокумента", ОбщегоНазначения.ОписаниеТипаЧисло(10,0)));
	КонецЕсли;
	
	//
	Если РеквизитыЗаявки.Параметры.ИспользоватьПлатежныеПозиции Тогда
		ПлатежныеПозиции.ДобавитьРеквизитыФормыПлатежнаяПозиция(Реквизиты, Форма);
	КонецЕсли;
	
	Если РеквизитыЗаявки.Параметры.ИспользоватьКонтроль Тогда
		КонтрольУХ.ДобавитьРеквизитыСтраницыКонтроль(Реквизиты);
		
		Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ЕстьПредупреждения") Тогда
			Реквизиты.Добавить(Новый РеквизитФормы("ЕстьПредупреждения", Новый ОписаниеТипов("Булево")));
		КонецЕсли;
		Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "ЕстьИнформация") Тогда
			Реквизиты.Добавить(Новый РеквизитФормы("ЕстьИнформация", Новый ОписаниеТипов("Булево")));
		КонецЕсли;
		Если НЕ ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "Информация") Тогда
			Реквизиты.Добавить(Новый РеквизитФормы("Информация", ОбщегоНазначения.ОписаниеТипаСтрока(20)));
		КонецЕсли;
	КонецЕсли;
	
	Если РеквизитыЗаявки.Параметры.ИспользоватьСогласование Тогда
		ВстраиваниеОПКПереопределяемый.ДобавитьРеквизитыСогласования(Реквизиты);
	КонецЕсли;
	
	// Не перезаполняем реквизиты измененные вручную пользователем, при изменении договора
	ДобавитьРеквизитОтслеживанияИзменений(Реквизиты, РеквизитыЗаявки.ЦФО);
	ДобавитьРеквизитОтслеживанияИзменений(Реквизиты, РеквизитыЗаявки.Проект);
	ДобавитьРеквизитОтслеживанияИзменений(Реквизиты, РеквизитыЗаявки.СтатьяБюджета);
		
	Если Реквизиты.Количество() > 0 Тогда
		Форма.ИзменитьРеквизиты(Реквизиты);
	КонецЕсли;
	
	// Устанавливаем значения реквизитов
	Форма.РеквизитыДокумента = РеквизитыЗаявки;
	Форма.ВидБюджета = РеквизитыЗаявки.ВидБюджетаПВХ.Значение;
	
КонецПроцедуры

//
Процедура СоздатьЭлементыФормыЗаявки(Форма, ПараметрыРазмещения) Экспорт
	
	Элементы = Форма.Элементы;
	Реквизиты = Форма.РеквизитыДокумента;
	
	// Создать элемент формы, чтобы работала связь по типу
	Элемент = ФормыУХ.СоздатьПолеФормы(Форма.Элементы, "ВидБюджета",, "ВидБюджета", , Форма);
	Элемент.Видимость = Ложь;
	
	// Размещение аналитик статей бюджета
	Если Реквизиты.Свойство("Параметры") И Реквизиты.Параметры.Свойство("РазмещениеАналитикСтатей") Тогда
		РазместитьАналитикиСтатейБюджетов(Форма, Реквизиты, ПараметрыРазмещения.ПараметрыЭлементов);
	КонецЕсли;
	
	// Контроль документа
	Если Реквизиты.Параметры.ИспользоватьКонтроль Тогда
		КонтрольУХ.ДобавитьСтраницуКонтроляДокумента(Форма, ПараметрыРазмещения.СтраницаКонтроля);
	КонецЕсли;
	
	// Платежные позиции
	Если Реквизиты.Параметры.ИспользоватьПлатежныеПозиции Тогда
		ПлатежныеПозиции.СоздатьЭлементПредставлениеПлатежнойПозиции(Форма, ПараметрыРазмещения.ПредставлениеПлатежнойПозции);
	КонецЕсли;
	// Согласование и т.д.
	ВстраиваниеОПКПереопределяемый.НарисоватьПанельСогласованияИОпределитьСостояниеОбъекта(Форма);	
	
КонецПроцедуры

//
Процедура ИнициализироватьФормуЗаявки(Форма) Экспорт
	
	Элементы = Форма.Элементы;
	Реквизиты = Форма.РеквизитыДокумента;
	
	// Контроль документа
	Если Реквизиты.Параметры.ИспользоватьКонтроль Тогда
		КонтрольУХ.ИнициализироватьРезультатыКонтроля(Форма);
		ВывестиПредупрежденияЗаявки(Форма);
	КонецЕсли;
	
	// Платежные позиции
	Если Реквизиты.Параметры.ИспользоватьПлатежныеПозиции Тогда
		ПлатежныеПозиции.ИнициализироватьПлатежнуюПозициюЗаявки(Форма);
	КонецЕсли;
	
	// настройка существующих элементов формы
	Если Элементы.Найти("ЦеннаяБумага") <> неопределено Тогда
		Элементы.ЦеннаяБумага.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ЦенныеБумаги");
	КонецЕсли;
	//Если Элементы.Найти("Сделка") <> неопределено Тогда
	//	Элементы.Сделка.ОграничениеТипа = Метаданные.ОпределяемыеТипы.ЗаказПоставщику.Тип;
	//КонецЕсли;
	
	//
	УстановитьПараметрыВыбораДоговора(Форма);
	УстановитьПроектБюджетодержатель(Форма);
	//ЗаполнитьВестиРасчетыПоЗаказам(Форма);
	ОбновитьОтборПоФункциональнымНаправлениям(Форма);
	ОпределитьНаличиеПредопределенныхРолей(Форма);
	УстановитьСостояниеДокумента(Форма);
	
КонецПроцедуры

Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Если Форма.РеквизитыДокумента.Параметры.ИспользоватьПлатежныеПозиции Тогда
		ПлатежныеПозиции.ПлатежнуюПозициюВДопСвойства(ТекущийОбъект, Форма.ПлатежнаяПозиция.Выгрузить());
	КонецЕсли;
	
	Если ПараметрыЗаписи.Свойство("НеОтправлятьНаСогласованиеПриПроведении") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("НеОтправлятьНаСогласованиеПриПроведении", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	
	Объект = Форма.Объект;
	Реквизиты = Форма.РеквизитыДокумента;
	
	АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(Форма);
	КонтрольУХ.ИнициализироватьРезультатыКонтроля(Форма);
	ВывестиПредупрежденияЗаявки(Форма);
	Форма.СостояниеДокумента = ВстраиваниеОПКПереопределяемый.СостояниеДокумента(Объект);
	
	Если Реквизиты.Параметры.ИспользоватьПлатежныеПозиции Тогда
		ПлатежныеПозицииКлиентСервер.ОбновитьПредставлениеПлатежнойПозиции(Форма, Истина);
	КонецЕсли;
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение 
		ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда 
		ОпределитьСостояниеОбъекта(Форма);
	КонецЕсли;
	
    УстановитьСостояниеДокумента(Форма);
	
	// Сформируем параметры оповещения "ИзмененДокументТранзакции"
	ИменаРеквизитов = "Организация, ЦФО, Проект, Контрагент, ДоговорКонтрагента";
	ПараметрыОповещения = Новый Структура(ИменаРеквизитов);
	ПараметрыОповещения.Организация = РеквизитЗаявки(ТекущийОбъект, Реквизиты.Организация);
	ПараметрыОповещения.ЦФО = РеквизитЗаявки(ТекущийОбъект, Реквизиты.ЦФО);
	ПараметрыОповещения.Проект = РеквизитЗаявки(ТекущийОбъект, Реквизиты.Проект);
	ПараметрыОповещения.Контрагент = РеквизитЗаявки(ТекущийОбъект, Реквизиты.Контрагент);
	ПараметрыОповещения.ДоговорКонтрагента = РеквизитЗаявки(ТекущийОбъект, Реквизиты.ДоговорКонтрагента);
	
	РеквизитыПроекта = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущийОбъект.Проект, "ПроектЭтапа, Проект");
	Если РеквизитыПроекта.Проект = Ложь Тогда
		ПараметрыОповещения.Проект = РеквизитыПроекта.ПроектЭтапа;
	КонецЕсли;
	
	ПараметрыЗаписи.Вставить("ПараметрыОповещения", ПараметрыОповещения);
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиИзмененияРеквизитовЗаявки

Процедура ПриИзмененииВидаОперацииУХ(Форма) Экспорт
	
	Объект = Форма.Объект;
	Реквизиты = Форма.РеквизитыДокумента;
	
	// При изменении вида операции ух меняется и статья бюджета
	УстановитьСтатьюБюджетаПоВидуОперацииУХ(Объект, Реквизиты);
	АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(Форма);
	
	// Обновить форму оплаты
	Если Реквизиты.ВидБюджета.Значение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств Тогда
				
		// Получим форму оплаты
		НоваяФормаОплаты = ВидыОперацийУХВызовСервераПовтИсп.ОсновнаяФормаОплаты(Объект.ВидОперацииУХ);
		Если РеквизитЗаявки(Объект, Реквизиты.ФормаОплаты) <> НоваяФормаОплаты Тогда
			УстановитьРеквизитЗаявки(Объект, Реквизиты.ФормаОплаты, НоваяФормаОплаты);
		КонецЕсли;
		
	КонецЕсли;
	
	//КПересмотру: управление реквизитом Контрагент идет в заявке, а не в библиотеке
	//ЗаявкиНаОперацииКлиентСервер.УстановитьОграничениеТипаКонтрагента(Форма);
	
	// Договор
	Если ВидыОперацийУХКлиентСерверПовтИсп.ЭтоРасчетыБезДоговора(Объект.ВидОперацииУХ) Тогда
		УстановитьРеквизитЗаявки(Объект, Реквизиты.ДоговорКонтрагента, КэшируемыеПроцедурыОПК.ПустойДоговор());
		Если Реквизиты.Параметры.ИспользоватьПлатежныеПозиции Тогда
			УстановитьРеквизитЗаявки(Объект, Реквизиты.ВалютаОплаты, РеквизитЗаявки(Объект, Реквизиты.ВалютаДокумента));
			
			// Реквизиты курса
			РеквизитыКурса = ПлатежныеПозицииКлиентСервер.СтруктураПараметровРасчетаКурса();
			РеквизитыКурса.Удалить("ВалютаДокумента");
			РеквизитыКурса.Удалить("ВалютаОплаты");
			РеквизитыКурса.Удалить("ДатаПлатежа");
			РеквизитыКурса.СпособОпределенияКурсаПлатежа = Перечисления.СпособыОпределенияКурсаПлатежа.ФиксированныйКурс;
			РеквизитыКурса.КурсПлатежа = 1;
			РеквизитыКурса.КратностьПлатежа = 1;
			РеквизитыКурса.ДатаФиксацииКурсаПлатежа = '00010101000000';
			РеквизитыКурса.СдвигДатыФиксацииКурсаПлатежа = 0;
			РеквизитыКурса.КурсПлатежаНеБолее = 0;
			РеквизитыКурса.КурсПлатежаНеМенее = 0;
			РеквизитыКурса.КурсПлатежаНеМенееВВалютеОплаты = 0;
			РеквизитыКурса.КурсПлатежаНеБолееВВалютеОплаты = 0;
			ЗаполнитьЗначенияСвойств(Объект, РеквизитыКурса);
		КонецЕсли;
	Иначе
		УстановитьПараметрыВыбораДоговора(Форма);
		ПроверитьДоговорКонтрагента(Форма);
		ПриИзмененииДоговора(Форма);
	КонецЕсли;
	
	Если Реквизиты.Параметры.ИспользоватьПлатежныеПозиции Тогда
		Форма.ПлатежнаяПозиция.Загрузить(ПлатежныеПозиции.НоваяПлатежнаяПозицияПоДаннымДокумента(Объект));
		ПлатежныеПозицииКлиентСервер.ОбновитьПредставлениеПлатежнойПозиции(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииСтатьиБюджета(Форма, ИмяЭлемента, РучноеИзменение = Истина) Экспорт
	
	// Аналитики статей бюджетов должны уже быть обновлены через вызов клиентского ОМ
	
	ОпределитьПриоритетПлатежа(Форма);
	
	Если РучноеИзменение Тогда
		УстановитьИзмененностьСтатьи(Форма, ИмяЭлемента, Истина);	
	КонецЕсли;	// иначе пусть перезаполняется, при перевыборе договора
	
КонецПроцедуры

Процедура ПриИзмененииАналитикиСтатьиБюджета(Форма, ИмяЭлемента) Экспорт
	
	УстановитьИзмененностьАналитикиСтатьи(Форма, ИмяЭлемента, Истина);
	
КонецПроцедуры

Процедура ПриИзмененииОрганизации(Форма) Экспорт
	
	Объект = Форма.Объект;
	Реквизиты = Форма.РеквизитыДокумента;
	
	Если Не ЗначениеЗаполнено(РеквизитЗаявки(Объект, Реквизиты.ЦФО)) Тогда
		УстановитьРеквизитЗаявки(
			Объект, 
			Реквизиты.ЦФО, 
			РеквизитЗаявки(Форма.Объект, Реквизиты.Организация)
		);
		ПриИзмененииЦФО(Форма, Истина);
	КонецЕсли;
	
	// Для расходных заявок 
	Если Объект.ЭтоВнутригрупповоеПеремещение И Реквизиты.КонтрагентОрганизации.ЕстьРеквизит Тогда
		УстановитьРеквизитЗаявки(
			Объект,
			Реквизиты.КонтрагентОрганизации,
			ВстраиваниеОПКПереопределяемый.КонтрагентОрганизации(Объект.Организация)
		);
	КонецЕсли;
	
	ОпределитьНаличиеПредопределенныхРолей(Форма);	
	
	ОпределитьПриоритетПлатежа(Форма);
	
	Если Реквизиты.Параметры.ИспользоватьПлатежныеПозиции Тогда
		ПлатежныеПозиции.УстановитьОрганизацию(Форма);
	КонецЕсли;
	
	ОпределитьСостояниеОбъекта(Форма, Истина);	
	
КонецПроцедуры

Процедура ПриИзмененииЦФО(Форма, ИзмененаОрганизация = Ложь) Экспорт
	
	ОпределитьСостояниеОбъекта(Форма, Истина);
	ОпределитьПриоритетПлатежа(Форма);
	ОпределитьНаличиеПредопределенныхРолей(Форма);
	ОбновитьОтборПоФункциональнымНаправлениям(Форма);
	
	Если НЕ ИзмененаОрганизация Тогда
		УстановитьИзмененностьРеквизита(Форма, Форма.РеквизитыДокумента.ЦФО, Истина);
	Иначе
		// заполнение ЦФО по умолчанию по Организации, перезаполняем при изменении договора
	КонецЕсли;
	
КонецПроцедуры
	
Процедура ПриИзмененииПроекта(Форма) Экспорт
	
	ОпределитьСостояниеОбъекта(Форма);
	УстановитьПроектБюджетодержатель(Форма);
	
	УстановитьИзмененностьРеквизита(Форма, Форма.РеквизитыДокумента.Проект, Истина);
	
КонецПроцедуры

Процедура ПриИзмененииКонтрагента(Форма) Экспорт
	
	Объект = Форма.Объект;
	Реквизиты = Форма.РеквизитыДокумента;
	
	Контрагент = РеквизитЗаявки(Объект, Реквизиты.Контрагент);
	ВалютаОплаты = РеквизитЗаявки(Объект, Реквизиты.ВалютаОплаты);
	ФормаОплаты = РеквизитЗаявки(Объект, Реквизиты.ФормаОплаты);
	
	СчетКонтрагента = ВстраиваниеОПКПереопределяемый.ПолучитьБанковскийСчетПоУмолчанию(Контрагент, ВалютаОплаты, ФормаОплаты);
	УстановитьРеквизитЗаявки(Объект, Реквизиты.БанковскийСчетКонтрагента, СчетКонтрагента);
	
	Объект.ЭтоВнутригрупповоеПеремещение = ВстраиваниеОПКПереопределяемый.ЭтоВнутригрупповойКонтрагент(Контрагент);
	Если Объект.ЭтоВнутригрупповоеПеремещение Тогда
		ОрганизацияВстречная = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ОрганизационнаяЕдиница");
		УстановитьРеквизитЗаявки(Объект, Реквизиты.ОрганизацияВстречная, ОрганизацияВстречная);
		//СчетКонтрагентаПриИзмененииНаСервере();
	КонецЕсли;
	
	Если Реквизиты.Параметры.ИспользоватьПлатежныеПозиции Тогда
		ПлатежныеПозиции.УстановитьКонтрагента(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииДоговора(Форма) Экспорт
	
	Объект = Форма.Объект;
	Реквизиты = Форма.РеквизитыДокумента;
	Элементы = Форма.Элементы;
		
	//
	Договор = РеквизитЗаявки(Объект, Реквизиты.ДоговорКонтрагента);
	Если Договор = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТипДоговор = ТипЗнч(Договор);
	ЭтоСтандартныйДоговор = Метаданные.ОпределяемыеТипы.Договоры.Тип.СодержитТип(ТипДоговор);
	
	ВидБюджета = РеквизитЗаявки(Объект, Реквизиты.ВидБюджета);
	ЭтоБДДС = (ВидБюджета = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств);
	
	РеквизитыДоговора = ДоговорыСКонтрагентами.ПолучитьРеквизитыДоговора(Договор, Объект.ВидОперацииУХ);

	// Организация
	УстановитьЗаполненныйРеквизитЗаявки(Объект, Реквизиты.Организация, РеквизитыДоговора.Организация);
	
	Если ЭтоСтандартныйДоговор Тогда
		// Контрагент
		УстановитьЗаполненныйРеквизитЗаявки(Объект, Реквизиты.Контрагент, РеквизитыДоговора.Контрагент);
	Иначе
		// Прочие случаи
		ДоговорыСКонтрагентамиВстраивание.УстановитьОтправителяПолучателяПриИзмененииДоговора(
			Объект, Реквизиты, Договор, РеквизитыДоговора);
	КонецЕсли;
	
	УстановитьРеквизитЗаявки(Объект, Реквизиты.ВалютаДокумента,	РеквизитыДоговора.ВалютаВзаиморасчетов);
		
	// Для внутригрупповых операций необходимо заполнить встречный договор
	Реквизит = Реквизиты.ДоговорВстречный;
	Если Реквизит.ЕстьРеквизит Тогда
		Если Объект.ЭтоВнутригрупповоеПеремещение И ЗначениеЗаполнено(Договор) Тогда
			ВстречныйДоговор = ВстраиваниеОПКПереопределяемый.ПолучитьВстречныйДоговор(Договор);
		Иначе
			ВстречныйДоговор = неопределено;
		КонецЕсли;
		УстановитьРеквизитЗаявки(Объект, Реквизиты.ДоговорВстречный, ВстречныйДоговор);
	КонецЕсли;
	
	Если ЭтоБДДС Тогда
		ЗаполнитьЭлементСтруктурыЗадолженностиПоДоговору(Объект, Договор, Реквизиты);
	КонецЕсли;

	// ЦФО, Проект, СтатьяБюджета, Аналитика1..6
	ЗаполнитьОтслеживаемыеРеквизитыПоДоговору(Форма, Договор, РеквизитыДоговора);
	
	Если ЭтоБДДС Тогда
		
		ИзмениласьВалютаОплаты = Ложь;
		Если РеквизитЗаявки(Объект, Реквизиты.ВалютаОплаты) <> РеквизитыДоговора.ВалютаПлатежа Тогда
			ИзмениласьВалютаОплаты = Истина;
			УстановитьРеквизитЗаявки(Объект, Реквизиты.ВалютаОплаты, РеквизитыДоговора.ВалютаПлатежа);
		КонецЕсли;
		
		Объект.ПлатежВУсловныхЕдиницах = РеквизитыДоговора.ПлатежВУсловныхЕдиницах;
		
		// Реквизиты платежной позиции
		РеквизитыДляЗаполнения = "ЗапретПлатежаВПрочихВалютах,ФиксированныйСчетОрганизации,ФиксированныйСчетКонтрагента,
		|СпособОпределенияКурсаПлатежа,ДатаФиксацииКурсаПлатежа,СдвигДатыФиксацииКурсаПлатежа,
		|КурсПлатежаНеМенее,КурсПлатежаНеБолее,КурсПлатежаНеМенееВВалютеОплаты,КурсПлатежаНеБолееВВалютеОплаты";
		Если РеквизитыДоговора.СпособОпределенияКурсаПлатежа = Перечисления.СпособыОпределенияКурсаПлатежа.ФиксированныйКурс Тогда 
			РеквизитыДляЗаполнения = РеквизитыДляЗаполнения + ",КурсПлатежа,КратностьПлатежа";
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыДоговора, РеквизитыДляЗаполнения);

		// Банковские счета
		Если РеквизитЗаявки(Объект, Реквизиты.ФормаОплаты) = Перечисления.ФормыОплаты.Безналичная Тогда
			
			// Счет контрагента
			Если ЭтоСтандартныйДоговор Тогда
				
				// Счет организации
				Если Реквизиты.БанковскийСчет.ЕстьРеквизит Тогда
					Если ЗначениеЗаполнено(РеквизитыДоговора.БанковскийСчет) Тогда
						Объект.БанковскийСчет = РеквизитыДоговора.БанковскийСчет;
					ИначеЕсли ИзмениласьВалютаОплаты Тогда
						Объект.БанковскийСчет = ВстраиваниеОПКПереопределяемый.ПолучитьБанковскийСчетПоУмолчанию(
							ЗаявкиНаОперации.РеквизитЗаявки(Объект, Реквизиты.Организация),
							ЗаявкиНаОперации.РеквизитЗаявки(Объект, Реквизиты.ВалютаОплаты),
							ЗаявкиНаОперации.РеквизитЗаявки(Объект, Реквизиты.ФормаОплаты)
						);
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(РеквизитыДоговора.БанковскийСчетКонтрагента) Тогда
					УстановитьРеквизитЗаявки(Объект, Реквизиты.БанковскийСчетКонтрагента, РеквизитыДоговора.БанковскийСчетКонтрагента);
				ИначеЕсли ИзмениласьВалютаОплаты Тогда
					УстановитьРеквизитЗаявки(Объект, Реквизиты.БанковскийСчетКонтрагента, 
						ОбщегоНазначенияОПК.ПустоеЗначениеОпределяемогоТипа(Метаданные.ОпределяемыеТипы.БанковскиеСчетаКонтрагентов));
				КонецЕсли;
			Иначе
				// Прочие случаи
				ЗаявкиНаОперацииВстраивание.УстановитьБанковскийСчетОтправителяПолучателяПриИзмененииДоговора(
					Объект, Реквизиты, Договор, РеквизитыДоговора, ИзмениласьВалютаОплаты);
			КонецЕсли;
			ПлатежныеПозиции.УстановитьБанковскийСчетКонтрагента(Форма);
			
			//
			Объект.ИдентификаторПлатежа = РеквизитыДоговора.ИдентификаторПлатежа;
			
		КонецЕсли;
		
		ПлатежныеПозиции.УстановитьДоговор(Форма);
		
		ЗаполнитьБанковскийСчетПлатежнойПозицииПоДоговору(Форма, РеквизитыДоговора, Реквизиты);
				
	КонецЕсли;
	
	ВывестиПредупрежденияЗаявки(Форма);
	
	ОпределитьПриоритетПлатежа(Форма);
	
КонецПроцедуры

#Область ТолькоЕРПУХ
Процедура ПриИзмененииДоговораКредитаДепозита(Форма) Экспорт
	
	Объект = Форма.Объект;
	Реквизиты = Форма.РеквизитыДокумента;
	
	Договор = Объект.ДоговорКредитаДепозита;
	Если Договор = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидБюджета = РеквизитЗаявки(Объект, Реквизиты.ВидБюджета);
	ЭтоБДДС = (ВидБюджета = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств);
	
	СтруктураРеквизитов = Новый Структура(
	 "Контрагент,
	 |Организация,
	 |ВалютаВзаиморасчетов,
	 |БанковскийСчет,
	 |БанковскийСчетКонтрагента,
	 |ВидФинансовогоИнструмента"
	);
	СтруктураРеквизитов.Вставить("ФиксированныйСчетОрганизации", "ВерсияСоглашения.ФиксированныйСчетОрганизации");
	СтруктураРеквизитов.Вставить("ФиксированныйСчетКонтрагента", "ВерсияСоглашения.ФиксированныйСчетКонтрагента");
	СтруктураРеквизитов.Вставить("ЦФО", "ВерсияСоглашения.ОсновнойЦФО");
	СтруктураРеквизитов.Вставить("Проект", "ВерсияСоглашения.ОсновнойПроект");
		
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, СтруктураРеквизитов);	
	
	// Организация
	УстановитьЗаполненныйРеквизитЗаявки(Объект, Реквизиты.Организация, РеквизитыДоговора.Организация);
		
	УстановитьЗаполненныйРеквизитЗаявки(Объект, Реквизиты.Контрагент, РеквизитыДоговора.Контрагент);
	УстановитьРеквизитЗаявки(Объект, Реквизиты.ВалютаДокумента,	РеквизитыДоговора.ВалютаВзаиморасчетов);
	
	// Для внутригрупповых операций необходимо заполнить встречный договор
	Реквизит = Реквизиты.ДоговорВстречный;
	Если Реквизит.ЕстьРеквизит Тогда
		Если Объект.ЭтоВнутригрупповоеПеремещение И ЗначениеЗаполнено(Договор) Тогда
			ВстречныйДоговор = ВстраиваниеОПКПереопределяемый.ПолучитьВстречныйДоговор(Договор);
		Иначе
			ВстречныйДоговор = неопределено;
		КонецЕсли;
		УстановитьРеквизитЗаявки(Объект, Реквизиты.ДоговорВстречный, ВстречныйДоговор);
	КонецЕсли;
	
	Если ЭтоБДДС Тогда
		ЗаполнитьЭлементСтруктурыЗадолженностиПоДоговору(Объект, Договор, Реквизиты);
	КонецЕсли;

	// ЦФО, Проект, СтатьяБюджета, Аналитика1..6
	ЗаполнитьОтслеживаемыеРеквизитыПоДоговору(Форма, Договор, РеквизитыДоговора);
		
	Если ЭтоБДДС Тогда
		ИзмениласьВалютаОплаты = Ложь;
		Если РеквизитЗаявки(Объект, Реквизиты.ВалютаОплаты) <> РеквизитыДоговора.ВалютаВзаиморасчетов Тогда
			ИзмениласьВалютаОплаты = Истина;
			УстановитьРеквизитЗаявки(Объект, Реквизиты.ВалютаОплаты, РеквизитыДоговора.ВалютаВзаиморасчетов);
		КонецЕсли;
		
		РеквизитыДляЗаполнения = "ФиксированныйСчетОрганизации,ФиксированныйСчетКонтрагента";
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыДоговора, РеквизитыДляЗаполнения);

		// Банковские счета
		Если РеквизитЗаявки(Объект, Реквизиты.ФормаОплаты) = Перечисления.ФормыОплаты.Безналичная Тогда
			
			// Счет организации
			Если Реквизиты.БанковскийСчет.ЕстьРеквизит Тогда
				Если ЗначениеЗаполнено(РеквизитыДоговора.БанковскийСчет) Тогда
					Объект.БанковскийСчет = РеквизитыДоговора.БанковскийСчет;
				ИначеЕсли ИзмениласьВалютаОплаты Тогда
						Объект.БанковскийСчет = ВстраиваниеОПКПереопределяемый.ПолучитьБанковскийСчетПоУмолчанию(
							ЗаявкиНаОперации.РеквизитЗаявки(Объект, Реквизиты.Организация),
							ЗаявкиНаОперации.РеквизитЗаявки(Объект, Реквизиты.ВалютаОплаты),
							ЗаявкиНаОперации.РеквизитЗаявки(Объект, Реквизиты.ФормаОплаты)
						);	
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитыДоговора.БанковскийСчетКонтрагента) Тогда
				УстановитьРеквизитЗаявки(Объект, Реквизиты.БанковскийСчетКонтрагента, РеквизитыДоговора.БанковскийСчетКонтрагента);
			КонецЕсли;
					
			ПлатежныеПозиции.УстановитьБанковскийСчетКонтрагента(Форма);
			
		КонецЕсли;
		
		ПлатежныеПозиции.УстановитьДоговорКредитаДепозита(Форма);
		
		ЗаполнитьБанковскийСчетПлатежнойПозицииПоДоговору(Форма, РеквизитыДоговора, Реквизиты);
		
	КонецЕсли;
	
	ВывестиПредупрежденияЗаявки(Форма);
	
	ОпределитьПриоритетПлатежа(Форма);
	
КонецПроцедуры

Процедура ПриИзмененииДоговораАренды(Форма) Экспорт
	
	Объект = Форма.Объект;
	Реквизиты = Форма.РеквизитыДокумента;
	
	Договор = Объект.ДоговорАренды;
	Если Договор = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидБюджета = РеквизитЗаявки(Объект, Реквизиты.ВидБюджета);
	ЭтоБДДС = (ВидБюджета = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств);
	
	СтруктураРеквизитов = Новый Структура(
	 "Контрагент,
	 |Организация,
	 |ВалютаВзаиморасчетов,
	 |БанковскийСчет,
	 |БанковскийСчетКонтрагента,
	 |ВидФинансовогоИнструмента"
	);
	СтруктураРеквизитов.Вставить("ЦФО", "ОсновнойЦФО");
	СтруктураРеквизитов.Вставить("Проект", "ОсновнойПроект");
		
	РеквизитыДоговора = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Договор, СтруктураРеквизитов);
	РеквизитыДоговора.Вставить("ФиксированныйСчетОрганизации", Ложь);
	РеквизитыДоговора.Вставить("ФиксированныйСчетКонтрагента", Ложь);
	
	// Организация
	УстановитьЗаполненныйРеквизитЗаявки(Объект, Реквизиты.Организация, РеквизитыДоговора.Организация);
		
	УстановитьЗаполненныйРеквизитЗаявки(Объект, Реквизиты.Контрагент, РеквизитыДоговора.Контрагент);
	УстановитьРеквизитЗаявки(Объект, Реквизиты.ВалютаДокумента,	РеквизитыДоговора.ВалютаВзаиморасчетов);
	
	// Для внутригрупповых операций необходимо заполнить встречный договор
	Реквизит = Реквизиты.ДоговорВстречный;
	Если Реквизит.ЕстьРеквизит Тогда
		Если Объект.ЭтоВнутригрупповоеПеремещение И ЗначениеЗаполнено(Договор) Тогда
			ВстречныйДоговор = ВстраиваниеОПКПереопределяемый.ПолучитьВстречныйДоговор(Договор);
		Иначе
			ВстречныйДоговор = неопределено;
		КонецЕсли;
		УстановитьРеквизитЗаявки(Объект, Реквизиты.ДоговорВстречный, ВстречныйДоговор);
	КонецЕсли;
		
	Если ЭтоБДДС Тогда
		ЗаполнитьЭлементСтруктурыЗадолженностиПоДоговору(Объект, Договор, Реквизиты);
	КонецЕсли;

	// ЦФО, Проект, СтатьяБюджета, Аналитика1..6
	ЗаполнитьОтслеживаемыеРеквизитыПоДоговору(Форма, Договор, РеквизитыДоговора);
	
	Если ЭтоБДДС Тогда
		
		Если РеквизитЗаявки(Объект, Реквизиты.ВалютаОплаты) <> РеквизитыДоговора.ВалютаВзаиморасчетов Тогда
			ИзмениласьВалютаОплаты = Истина;
			УстановитьРеквизитЗаявки(Объект, Реквизиты.ВалютаОплаты, РеквизитыДоговора.ВалютаВзаиморасчетов);
		КонецЕсли;
		
		РеквизитыДляЗаполнения = "ФиксированныйСчетОрганизации,ФиксированныйСчетКонтрагента";
		ЗаполнитьЗначенияСвойств(Объект, РеквизитыДоговора, РеквизитыДляЗаполнения);

		// Банковские счета
		Если РеквизитЗаявки(Объект, Реквизиты.ФормаОплаты) = Перечисления.ФормыОплаты.Безналичная Тогда
			
			// Счет организации
			Если Реквизиты.БанковскийСчет.ЕстьРеквизит Тогда
				Если ЗначениеЗаполнено(РеквизитыДоговора.БанковскийСчет) Тогда
					Объект.БанковскийСчет = РеквизитыДоговора.БанковскийСчет;
				ИначеЕсли ИзмениласьВалютаОплаты Тогда
						Объект.БанковскийСчет = ВстраиваниеОПКПереопределяемый.ПолучитьБанковскийСчетПоУмолчанию(
							ЗаявкиНаОперации.РеквизитЗаявки(Объект, Реквизиты.Организация),
							ЗаявкиНаОперации.РеквизитЗаявки(Объект, Реквизиты.ВалютаОплаты),
							ЗаявкиНаОперации.РеквизитЗаявки(Объект, Реквизиты.ФормаОплаты)
						);	
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РеквизитыДоговора.БанковскийСчетКонтрагента) Тогда
				УстановитьРеквизитЗаявки(Объект, Реквизиты.БанковскийСчетКонтрагента, РеквизитыДоговора.БанковскийСчетКонтрагента);
			КонецЕсли;
					
			ПлатежныеПозиции.УстановитьБанковскийСчетКонтрагента(Форма);
			
		КонецЕсли;
		
		ПлатежныеПозиции.УстановитьДоговорАренды(Форма);
		
		ЗаполнитьБанковскийСчетПлатежнойПозицииПоДоговору(Форма, РеквизитыДоговора, Реквизиты);
		
	КонецЕсли;
	
	ВывестиПредупрежденияЗаявки(Форма);
	
	ОпределитьПриоритетПлатежа(Форма);
	
КонецПроцедуры
#КонецОбласти

Процедура ЗаполнитьБанковскийСчетПлатежнойПозицииПоДоговору(Форма, РеквизитыДоговора, Реквизиты)
	
	Объект = Форма.Объект;
	
	// Установка счета организации, при наличии его в договоре
	Если ЗначениеЗаполнено(РеквизитыДоговора.БанковскийСчет) Тогда
		ПлатежныеПозиции.УстановитьБанковскийСчетКассу(Форма, РеквизитыДоговора.БанковскийСчет, РеквизитыДоговора.ФиксированныйСчетОрганизации);
	Иначе
		Организация  = РеквизитЗаявки(Объект, Реквизиты.Организация);
		ВалютаОплаты = РеквизитЗаявки(Объект, Реквизиты.ВалютаОплаты);
		ФормаОплаты  = РеквизитЗаявки(Объект, Реквизиты.ФормаОплаты);
		СчетПоУмолчанию = ВстраиваниеОПКПереопределяемый.ПолучитьБанковскийСчетПоУмолчанию(Организация, ВалютаОплаты, ФормаОплаты);
		Если ЗначениеЗаполнено(СчетПоУмолчанию) Тогда
			ПлатежныеПозиции.УстановитьБанковскийСчетКассу(Форма, СчетПоУмолчанию, Ложь);
		Иначе
			Если ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
				СчетПоУмолчанию = ОбщегоНазначенияОПК.ПустоеЗначениеОпределяемогоТипа(Метаданные.ОпределяемыеТипы.Кассы);
			Иначе
				СчетПоУмолчанию = ОбщегоНазначенияОПК.ПустоеЗначениеОпределяемогоТипа(Метаданные.ОпределяемыеТипы.БанковскиеСчетаОрганизаций);
			КонецЕсли;
			ПлатежныеПозиции.УстановитьБанковскийСчетКассу(Форма, СчетПоУмолчанию, Ложь);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПриИзмененииФормыОплаты(Форма) Экспорт
	
	Объект = Форма.Объект;
	Реквизиты = Форма.РеквизитыДокумента;
		
	Если Реквизиты.Параметры.ИспользоватьПлатежныеПозиции Тогда
		ПлатежныеПозиции.УстановитьФормуОплаты(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииСуммыДокумента(Форма) Экспорт
	
	Объект = Форма.Объект;
	Реквизиты = Форма.РеквизитыДокумента;
	
	// Распределить сумму документа на расшифровку
	Если Реквизиты.СтатьяБюджета.ЕстьРеквизит И Реквизиты.СтатьяБюджета.РазмещенВТЧ Тогда
		ТЧ = Объект[Реквизиты.СтатьяБюджета.ИмяТЧ];
		СуммаДокумента = РеквизитЗаявки(Объект, Реквизиты.СуммаДокумента);
		ИтогРасшифровка = ТЧ.Итог("Сумма");
		Если ИтогРасшифровка = 0 Тогда
			
			Если ТЧ.Количество() = 0 Тогда
				ТЧ.Добавить();
			КонецЕсли;
			
			ТЧ[0].Сумма = Объект.СуммаДокумента;
			ЗаявкиНаОперацииКлиентСервер.ПересчитатьСуммуНДС(ТЧ[0]);
			
			Для НомерСтроки = 1 По ТЧ.Количество()-1 Цикл
				ТЧ[НомерСтроки].Сумма = 0;
				ЗаявкиНаОперацииКлиентСервер.ПересчитатьСуммуНДС(ТЧ[НомерСтроки]);
			КонецЦикла;
			
		ИначеЕсли ИтогРасшифровка <> СуммаДокумента Тогда
			Для Каждого Строка Из ТЧ Цикл
				Строка.Сумма = Окр(Строка.Сумма * СуммаДокумента / ИтогРасшифровка, 2);
				ЗаявкиНаОперацииКлиентСервер.ПересчитатьСуммуНДС(Строка);
			КонецЦикла;
			ТЧ[0].Сумма = ТЧ[0].Сумма + СуммаДокумента - ТЧ.Итог("Сумма");
			ЗаявкиНаОперацииКлиентСервер.ПересчитатьСуммуНДС(ТЧ[0]);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Реквизиты.Параметры.ИспользоватьПлатежныеПозиции Тогда
		ПлатежныеПозиции.УстановитьСуммуДокумента(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииДвиженийОперации(Форма) Экспорт
	
	Объект = Форма.Объект;
	Реквизиты = Форма.РеквизитыДокумента;
	
	// По реквизиту СтатьяБюджетов понимаем, есть ли табличная часть
	Если Реквизиты.СтатьяБюджета.ЕстьРеквизит Тогда
		Если Реквизиты.СтатьяБюджета.РазмещенВТЧ Тогда
			ИтогДвиженияОперации = Объект[Реквизиты.СтатьяБюджета.ИмяТЧ].Итог("Сумма");
			УстановитьРеквизитЗаявки(Объект, Реквизиты.СуммаДокумента, ИтогДвиженияОперации);
		ИначеЕсли Реквизиты.СтатьяБюджета.РазмещенВШапке Тогда
			// Таких вызовов не бывает
		КонецЕсли;
	КонецЕсли;
	
	ПлатежныеПозиции.УстановитьСуммуДокумента(Форма);
	
	//ПроверитьЛимитыНаСервере();
	
КонецПроцедуры

Процедура ПриИзмененииДокументаПланирования(Форма) Экспорт
	
	//
	Объект = Форма.Объект;
	Реквизиты = Форма.РеквизитыДокумента;
	
	//
	Если НЕ ЗначениеЗаполнено(Объект.ДокументПланирования) Тогда
		Возврат;
	КонецЕсли;
	
	// ЗаявкаНаРасход
	ДокументОбъект = Форма.РеквизитФормыВЗначение("Объект");
	ДокументОбъект.Заполнить(Объект.ДокументПланирования);
	Форма.ЗначениеВРеквизитФормы(ДокументОбъект,"Объект");
	
	АналитикиСтатейБюджетовУХ.ЗаполнитьРеквизитыАналитикВсехСтатей(Форма);
	
	Если Реквизиты.Параметры.ИспользоватьПлатежныеПозиции Тогда		
		ПлатежнаяПозиция = ПлатежныеПозиции.НоваяПлатежнаяПозицияПоДаннымДокумента(Объект);
		Форма.ПлатежнаяПозиция.Загрузить(ПлатежнаяПозиция);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииПланируемойДатаОперации(Форма) Экспорт
	
	Объект = Форма.Объект;
	Реквизиты = Форма.РеквизитыДокумента;
	
	Если Реквизиты.Параметры.ИспользоватьПлатежныеПозиции Тогда
		ПолучитьИзРеквизита = Реквизиты.Параметры.Свойство("СчетКассаВФорме")
			И Реквизиты.Параметры.СчетКассаВФорме = Истина;
		ПлатежныеПозиции.УстановитьДатуПлатежа(Форма, ПолучитьИзРеквизита);
	КонецЕсли;
		
КонецПроцедуры

Процедура ПриИзмененииВалюты(Форма) Экспорт
	
	Объект = Форма.Объект;
	Реквизиты = Форма.РеквизитыДокумента;
	
	Если Реквизиты.Параметры.ИспользоватьПлатежныеПозиции Тогда
		ВалютаДокумента = РеквизитЗаявки(Объект, Реквизиты.ВалютаДокумента);
		Если Не Объект.ПлатежВУсловныхЕдиницах Тогда
			УстановитьРеквизитЗаявки(Объект, Реквизиты.ВалютаОплаты, ВалютаДокумента);
		КонецЕсли;
		ПриИзмененииВалютыОплаты(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииВалютыОплаты(Форма) Экспорт
	
	Объект = Форма.Объект;
	Реквизиты = Форма.РеквизитыДокумента;
	
	Если Реквизиты.Параметры.ИспользоватьПлатежныеПозиции Тогда
		
		Контрагент = ВладелецСчетаКонтрагента(Форма);
		ВалютаОплаты = РеквизитЗаявки(Объект, Реквизиты.ВалютаОплаты);
		ФормаОплаты = РеквизитЗаявки(Объект, Реквизиты.ФормаОплаты);
	
		СчетКонтрагента = ВстраиваниеОПКПереопределяемый.ПолучитьБанковскийСчетПоУмолчанию(Контрагент, ВалютаОплаты, ФормаОплаты);
		УстановитьРеквизитЗаявки(Объект, Реквизиты.БанковскийСчетКонтрагента, СчетКонтрагента);
		
		//УстановитьПараметрыВыбораБанковскогоСчетаКонтрагента();
		
		ПлатежныеПозиции.УстановитьВалюты(Форма);
	КонецЕсли;
	
КонецПроцедуры

// Событие, при изменении БанквоскогоСчета/Кассы, размещенной на форме.
Процедура ПриИзмененииБанковскогоСчетаКассы(Форма) Экспорт
	ПлатежныеПозиции.УстановитьБанковскийСчетКассу(Форма);
КонецПроцедуры

// Событие, при изменении БанквоскогоСчета/Кассы получателя.
Процедура ПриИзмененииБанковскогоСчетаКассыПолучателя(Форма) Экспорт
	ПлатежныеПозиции.УстановитьБанковскийСчетКассуПолучатель(Форма);
КонецПроцедуры

#Область ТолькоЕРПУХ
Процедура ПриИзмененииБанковскогоСчетаКонтрагента(Форма) Экспорт
	ПлатежныеПозиции.УстановитьБанковскийСчетКонтрагента(Форма);
КонецПроцедуры
#КонецОбласти

Процедура ПриИзмененииПриоритетаПлатежа(Форма) Экспорт
	ПлатежныеПозиции.УстановитьПриоритетПлатежа(Форма);
КонецПроцедуры
#КонецОбласти 

#Область ОбработчикиЗаполнения

// Заполнение по документу планирования (ОперПлан или заявки)
Процедура ЗаполнитьПоДокументуПланирования(Объект, Знач ДанныеЗаполнения) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОперативныйПлан") Тогда
		ЗаполнитьПоДокументуОперативныйПлан(Объект, ДанныеЗаполнения);
	Иначе
		ЗаполнитьЗаявкуПоДокументуПланирования(Объект, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоДокументуПланирования() 

// Заполнение заявок на основании документа Оперативный план
Процедура ЗаполнитьПоДокументуОперативныйПлан(Объект, ДанныеЗаполнения) Экспорт
	
	//
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыЗаявки = ЗаявкиНаОперации.РеквизитыДокументаЗаявка(ТипЗнч(Объект.Ссылка));
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("Предназначение", ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыЗаявки.ВидБюджета));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ОперативныйПлан.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОперативныйПлан.Резервирование)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ОперативныйПлан.РежимВводаДокументаПланирования = 0
	|			ТОГДА ОперативныйПлан.Ссылка
	|		КОГДА ОперативныйПлан.РежимВводаДокументаПланирования = 1
	|			ТОГДА ОперативныйПлан.ДокументПланирования
	|		КОГДА ОперативныйПлан.РежимВводаДокументаПланирования = 2
	|			ТОГДА ОперативныйПлан.Ссылка
	|	КОНЕЦ КАК ДокументПланирования,
	|	ОперативныйПлан.Предназначение КАК Предназначение,
	|	ВЫБОР
	|		КОГДА ОперативныйПлан.НазначениеРезерва_ДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|				И ОперативныйПлан.ВалютаДокумента <> ОперативныйПлан.НазначениеРезерва_ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА ОперативныйПлан.НазначениеРезерва_ДоговорКонтрагента.ВалютаВзаиморасчетов
	|		ИНАЧЕ ОперативныйПлан.ВалютаДокумента
	|	КОНЕЦ КАК ВалютаДокумента,
	|	ВЫБОР
	|		КОГДА ОперативныйПлан.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОперативныйПлан.Резервирование)
	|			ТОГДА НазначениеРезервовСрезПоследних.ДоговорКонтрагента.ВидДоговораУХ.ВидОперацииУХСписание
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыОперацийУХ.ПустаяСсылка)
	|	КОНЕЦ КАК ВидОперацииУХ,
	|	ВЫБОР
	|		КОГДА ОперативныйПлан.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОперативныйПлан.Резервирование)
	|			ТОГДА ЕСТЬNULL(НазначениеРезервовСрезПоследних.ДоговорКонтрагента.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|		ИНАЧЕ ОперативныйПлан.Организация
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА ОперативныйПлан.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОперативныйПлан.Резервирование)
	|			ТОГДА ЕСТЬNULL(НазначениеРезервовСрезПоследних.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|		ИНАЧЕ ОперативныйПлан.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ОперативныйПлан.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОперативныйПлан.Резервирование)
	|			ТОГДА ЕСТЬNULL(НазначениеРезервовСрезПоследних.Контрагент.ОрганизационнаяЕдиница, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|		ИНАЧЕ ЕСТЬNULL(ОперативныйПлан.Контрагент.ОрганизационнаяЕдиница, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|	КОНЕЦ КАК ОрганизацияПолучатель,
	|	ВЫБОР
	|		КОГДА ОперативныйПлан.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОперативныйПлан.Резервирование)
	|			ТОГДА ЕСТЬNULL(НазначениеРезервовСрезПоследних.ДоговорКонтрагента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|		ИНАЧЕ ОперативныйПлан.ДоговорКонтрагента
	|	КОНЕЦ КАК ДоговорКонтрагента,
	|	НЕОПРЕДЕЛЕНО КАК БанковскийСчетКасса,
	|	НЕОПРЕДЕЛЕНО КАК СчетКонтрагента,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) КАК ФормаОплаты,
	|	ОперативныйПлан.ЦФО КАК ЦФО,
	|	ОперативныйПлан.Проект КАК Проект
	|ИЗ
	|	Документ.ОперативныйПлан КАК ОперативныйПлан
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НазначениеРезервов.СрезПоследних КАК НазначениеРезервовСрезПоследних
	|		ПО (ОперативныйПлан.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОперативныйПлан.Резервирование))
	|			И (ОперативныйПлан.Проведен = ИСТИНА)
	|			И (ВЫБОР
	|				КОГДА ОперативныйПлан.РежимВводаДокументаПланирования = 1
	|					ТОГДА ОперативныйПлан.ДокументПланирования
	|				ИНАЧЕ ОперативныйПлан.Ссылка
	|			КОНЕЦ = НазначениеРезервовСрезПоследних.ДокументРезервирования)
	|ГДЕ
	|	ОперативныйПлан.Ссылка = &Ссылка
	|	И ОперативныйПлан.Предназначение = &Предназначение";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	ЗаполнитьЗначенияСвойств(Объект, Реквизиты, , "Организация, ВалютаДокумента");
	
	Если Объект.ВалютаДокумента <> Реквизиты.ВалютаДокумента Тогда
		Если ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
			Объект.СуммаДокумента = РаботаСКурсамиВалют.ПересчитатьВВалюту(
									 Объект.СуммаДокумента,
									 Объект.ВалютаДокумента,
									 Реквизиты.ВалютаДокумента,
									 Объект.ДатаНачала);
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение
	ЗаявкиНаОперации.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.ВалютаДокумента, Реквизиты.ВалютаДокумента);
	ЗаявкиНаОперации.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.ДоговорКонтрагента, Реквизиты.ДоговорКонтрагента);
	ЗаявкиНаОперации.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.ПланируемаяДатаОперации, НачалоДня(ТекущаяДатаСеанса() + 24*60*60));
	Если ЗначениеЗаполнено(Реквизиты.Организация) Тогда
		Объект.Организация = Реквизиты.Организация;
	КонецЕсли;
	
	Если Реквизиты.Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств Тогда
		ЗаявкиНаОперации.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.ФормаОплаты, Реквизиты.ФормаОплаты);
		ЗаявкиНаОперации.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.БанковскийСчетКонтрагента, Реквизиты.СчетКонтрагента);
		ЗаявкиНаОперации.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.БанковскийСчет, Реквизиты.БанковскийСчетКасса);
	КонецЕсли;
	
КонецПроцедуры

// Заполнение на основании заявок
Процедура ЗаполнитьЗаявкуПоДокументуПланирования(Объект, Знач ДанныеЗаполнения) экспорт
	
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения) Тогда
		Возврат;
	КонецЕсли;
	
	РеквизитыЗаявки = ЗаявкиНаОперации.РеквизитыДокументаЗаявка(ТипЗнч(Объект.Ссылка));
	
	//
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
	Запрос.УстановитьПараметр("Предназначение", ЗаявкиНаОперации.РеквизитЗаявки(Объект, РеквизитыЗаявки.ВидБюджета));
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ОперативныйПлан.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОперативныйПлан.Резервирование)
	|			И ОперативныйПлан.ВидОперации <> ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОперативныйПлан.ПланированиеИРезервирование)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА ОперативныйПлан.РежимВводаДокументаПланирования = 0
	|			ТОГДА ОперативныйПлан.Ссылка
	|		КОГДА ОперативныйПлан.РежимВводаДокументаПланирования = 1
	|			ТОГДА ОперативныйПлан.ДокументПланирования
	|		КОГДА ОперативныйПлан.РежимВводаДокументаПланирования = 2
	|			ТОГДА ОперативныйПлан.Ссылка
	|	КОНЕЦ КАК ДокументПланирования,
	|	ОперативныйПлан.Предназначение КАК Предназначение,
	|	ВЫБОР
	|		КОГДА ОперативныйПлан.НазначениеРезерва_ДоговорКонтрагента <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|				И ОперативныйПлан.ВалютаДокумента <> ОперативныйПлан.НазначениеРезерва_ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ТОГДА ОперативныйПлан.НазначениеРезерва_ДоговорКонтрагента.ВалютаВзаиморасчетов
	|		ИНАЧЕ ОперативныйПлан.ВалютаДокумента
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА ОперативныйПлан.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОперативныйПлан.Резервирование)
	|			ТОГДА НазначениеРезервовСрезПоследних.ДоговорКонтрагента.ВидДоговораУХ.ВидОперацииУХСписание
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВидыОперацийУХ.ПустаяСсылка)
	|	КОНЕЦ КАК ВидОперацииУХ,
	|	ВЫБОР
	|		КОГДА ОперативныйПлан.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОперативныйПлан.Резервирование)
	|			ТОГДА ЕСТЬNULL(НазначениеРезервовСрезПоследних.ДоговорКонтрагента.Организация, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|		ИНАЧЕ ОперативныйПлан.Организация
	|	КОНЕЦ КАК Организация,
	|	ВЫБОР
	|		КОГДА ОперативныйПлан.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОперативныйПлан.Резервирование)
	|			ТОГДА ЕСТЬNULL(НазначениеРезервовСрезПоследних.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|		ИНАЧЕ ОперативныйПлан.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	ВЫБОР
	|		КОГДА ОперативныйПлан.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОперативныйПлан.Резервирование)
	|			ТОГДА ЕСТЬNULL(НазначениеРезервовСрезПоследних.Контрагент.ОрганизационнаяЕдиница, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|		ИНАЧЕ ЕСТЬNULL(ОперативныйПлан.Контрагент.ОрганизационнаяЕдиница, ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|	КОНЕЦ КАК ОрганизацияПолучатель,
	|	ВЫБОР
	|		КОГДА ОперативныйПлан.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОперативныйПлан.Резервирование)
	|			ТОГДА ЕСТЬNULL(НазначениеРезервовСрезПоследних.ДоговорКонтрагента, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка))
	|		ИНАЧЕ ОперативныйПлан.ДоговорКонтрагента
	|	КОНЕЦ КАК ДоговорКонтрагента,
	|	НЕОПРЕДЕЛЕНО КАК БанковскийСчетКасса,
	|	НЕОПРЕДЕЛЕНО КАК СчетКонтрагента,
	|	ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная) КАК ФормаОплаты,
	|	ОперативныйПлан.ЦФО КАК ЦФО,
	|	ОперативныйПлан.Проект КАК Проект
	|ИЗ
	|	Документ.ОперативныйПлан КАК ОперативныйПлан
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НазначениеРезервов.СрезПоследних КАК НазначениеРезервовСрезПоследних
	|		ПО (ОперативныйПлан.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийОперативныйПлан.Резервирование))
	|			И (ОперативныйПлан.Проведен = ИСТИНА)
	|			И (ВЫБОР
	|				КОГДА ОперативныйПлан.РежимВводаДокументаПланирования = 1
	|					ТОГДА ОперативныйПлан.ДокументПланирования
	|				ИНАЧЕ ОперативныйПлан.Ссылка
	|			КОНЕЦ = НазначениеРезервовСрезПоследних.ДокументРезервирования)
	|ГДЕ
	|	ОперативныйПлан.Ссылка = &Ссылка
	|	И ОперативныйПлан.Предназначение = &Предназначение";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Реквизиты = Результат.Выбрать();
	Реквизиты.Следующий();
	ЗаполнитьЗначенияСвойств(Объект, Реквизиты, , "Организация, Валюта");
	
	Если Объект.Валюта <> Реквизиты.Валюта Тогда
		Если ЗначениеЗаполнено(Объект.Валюта) Тогда
			Объект.СуммаДокумента = РаботаСКурсамиВалют.ПересчитатьВВалюту(
									 Объект.СуммаДокумента,
									 Объект.Валюта,
									 Реквизиты.Валюта,
									 Объект.ЖелательнаяДатаПлатежа);
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение
	ЗаявкиНаОперации.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.ВалютаДокумента, Реквизиты.Валюта);
	ЗаявкиНаОперации.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.ДоговорКонтрагента, Реквизиты.ДоговорКонтрагента);
	ЗаявкиНаОперации.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.ПланируемаяДатаОперации, НачалоДня(ТекущаяДатаСеанса() + 24*60*60));
	Если ЗначениеЗаполнено(Реквизиты.Организация) Тогда
		Объект.Организация = Реквизиты.Организация;
	КонецЕсли;
	
	Если Реквизиты.Предназначение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств Тогда
		ЗаявкиНаОперации.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.ФормаОплаты, Реквизиты.ФормаОплаты);
		ЗаявкиНаОперации.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.БанковскийСчетКонтрагента, Реквизиты.СчетКонтрагента);
		ЗаявкиНаОперации.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.БанковскийСчет, Реквизиты.БанковскийСчетКасса);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПоДокументуПланирования() 

Процедура ЗаполнитьПоПервичномуДокументу(Объект, ПервичныйДокумент, ДополнительныеСвойства) Экспорт
	
	ТипЗаявки = ТипЗнч(Объект.Ссылка);
	Если ТипЗаявки = КэшируемыеПроцедурыОПК.ТипЗаявкаНаОплату() Тогда
		ЗаявкиНаОперацииВстраивание.ЗаполнитьЗаявкуНаОплатуПоПервичномуДокументу(Объект, ПервичныйДокумент, ДополнительныеСвойства);
	ИначеЕсли ТипЗаявки = КэшируемыеПроцедурыОПК.ТипЗаявкаНаРасход() Тогда
		ЗаявкиНаОперацииВстраивание.ЗаполнитьЗаявкаНаРасходПоПервичномуДокументу(Объект, ПервичныйДокумент, ДополнительныеСвойства);
	ИначеЕсли ТипЗаявки = КэшируемыеПроцедурыОПК.ТипПланируемоеПоступление() Тогда
		ЗаявкиНаОперацииВстраивание.ЗаполнитьПланируемоеПоступлениеПоПервичномуДокументу(Объект, ПервичныйДокумент, ДополнительныеСвойства);
	ИначеЕсли ТипЗаявки = КэшируемыеПроцедурыОПК.ТипПланируемоеПоступление() Тогда
		ЗаявкиНаОперацииВстраивание.ЗаполнитьПланируемыйДоходПоПервичномуДокументу(Объект, ПервичныйДокумент, ДополнительныеСвойства);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыШапкиЗаявки(Объект, СтруктураЗаполнения, РеквизитыЗаявки = Неопределено) Экспорт
	
	Если РеквизитыЗаявки = Неопределено Тогда
		РеквизитыЗаявки = РеквизитыДокументаЗаявка(ТипЗнч(Объект.Ссылка));
	КонецЕсли;
	
	Для каждого ЭлементРеквизит Из РеквизитыЗаявки Цикл
		Если ЭлементРеквизит.Ключ = "Параметры" Тогда
			Продолжить;
		КонецЕсли;
		
		Реквизит = ЭлементРеквизит.Значение;
		Если Реквизит.ЕстьРеквизит 
			И Реквизит.РазмещенВШапке 
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СтруктураЗаполнения, Реквизит.ИмяРеквизита) Тогда
			
			Значение = СтруктураЗаполнения[Реквизит.ИмяРеквизита];
			УстановитьРеквизитЗаявки(Объект, Реквизит, Значение);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиСобытийОбъектаЗаявки

Процедура ОбработкаПроверкиЗаполнения(ЗаявкаОбъект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	
	Реквизиты = РеквизитыДокументаЗаявка(ТипЗнч(ЗаявкаОбъект.Ссылка));
		
	ВидБюджетаЗаявки = РеквизитЗаявки(ЗаявкаОбъект, Реквизиты.ВидБюджета);
	ПараметрыОперПланирования = ОперативноеПланированиеПовтИспУХ.ПолучитьПараметрыОперПланирования(ВидБюджетаЗаявки);
	
	// Проверка наличия соответствующего периода в справочнике Периоды
	ПланируемаяДатаОперации = РеквизитЗаявки(ЗаявкаОбъект, Реквизиты.ПланируемаяДатаОперации);
	ПериодЗаявки = КонтрольЛимитовУХ.ПолучитьПериодПоДате(
		ПараметрыОперПланирования.ПериодичностьОперативногоПланирования, ПланируемаяДатаОперации);
	
	Если ПериодЗаявки = неопределено Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'В справочнике ""Периоды"" для даты %1 не определен период с периодичностью %2. Заполните справочник ""Периоды"" и повторите операцию.'"),
			Формат(ПланируемаяДатаОперации, "ДЛФ=D"),
			Строка(ПараметрыОперПланирования.ПериодичностьОперативногоПланирования));
			
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ЗаявкаОбъект, , "Объект."+Реквизиты.ПланируемаяДатаОперации.ИмяРеквизита, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ЗаявкаОбъект, ОбъектКопирования) Экспорт
	
	Реквизиты = РеквизитыДокументаЗаявка(ТипЗнч(ЗаявкаОбъект.Ссылка));
	
	УстановитьАвтора(ЗаявкаОбъект, Пользователи.ТекущийПользователь());
	
	Если НЕ ВстраиваниеОПКПереопределяемый.ЕстьСуперПользователь(ЗаявкаОбъект.ЦФО) Тогда
		ЗаявкаОбъект.ВнеМаршрута = Ложь;
	КонецЕсли;
	
	ТекущаяДата = НачалоДня(ТекущаяДатаСеанса());
	
	ПланируемаяДатаОперации = РеквизитЗаявки(ЗаявкаОбъект, Реквизиты.ПланируемаяДатаОперации);
	Если ПланируемаяДатаОперации < ТекущаяДата Тогда
		ПроизводственныйКалендарь = ВстраиваниеОПКПереопределяемый.ОсновнойПроизводственныйКалендарь();
		УстановитьРеквизитЗаявки(
			ЗаявкаОбъект, 
			Реквизиты.ПланируемаяДатаОперации, 
			ВстраиваниеОПКПереопределяемый.ПолучитьДатуПоКалендарю(ПроизводственныйКалендарь, ТекущаяДата, 1)
		);
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработкаЗаполнения(ЗаявкаОбъект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Реквизиты = РеквизитыДокументаЗаявка(ТипЗнч(ЗаявкаОбъект.Ссылка));
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОперативныйПлан") Тогда
		ВидБюджетаОперативногоПлана = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ДанныеЗаполнения, "Предназначение");
		ОбъектМетаданныхЗаявки = ЗаявкаОбъект.Метаданные();
		ВидБюджетаЗаявки = РеквизитЗаявки(ЗаявкаОбъект, Реквизиты.ВидБюджета);
		
		Если ВидБюджетаОперативногоПлана <> ВидБюджетаЗаявки Тогда
			ШаблонТекстаИсключения = НСтр("ru = 'Документ ""%1"" имеет вид бюджета ""%2"". Создание документа ""%3"" возможно только при виде бюджета ""%4""'");
			ВызватьИсключение Стршаблон(ШаблонТекстаИсключения, ДанныеЗаполнения, ВидБюджетаОперативногоПлана, 
										ОбъектМетаданныхЗаявки.Синоним, ВидБюджетаЗаявки);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЗаявкаОбъект.Дата) Тогда
		ЗаявкаОбъект.Дата = ТекущаяДатаСеанса();
	КонецЕсли;
	
	УстановитьАвтора(ЗаявкаОбъект, Пользователи.ТекущийПользователь());
	
КонецПроцедуры

Процедура ОбработкаЗаполненияКонтрольВидаОперации(ЗаявкаОбъект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	ОбъектТип 				= ТипЗнч(ЗаявкаОбъект.Ссылка);
	ОбъектМетаданныхЗаявки 	= ЗаявкаОбъект.Метаданные();
	ВидОперацииУХ			= ЗаявкаОбъект.ВидОперацииУХ;
	
	Если ОбъектТип = Тип("ДокументСсылка.ЗаявкаНаРасход") Тогда
		ПриходРасходОперацииУХ 		= Перечисления.ВидыДвиженийПриходРасход.Расход;
		БюджетОперацииУХ			= ПланыВидовХарактеристик.ВидыБюджетов.БюджетДоходовИРасходов;
	ИначеЕсли ОбъектТип = Тип("ДокументСсылка.ПланируемыйДоход") Тогда
		ПриходРасходОперацииУХ 		= Перечисления.ВидыДвиженийПриходРасход.Приход;
		БюджетОперацииУХ			= ПланыВидовХарактеристик.ВидыБюджетов.БюджетДоходовИРасходов;
	ИначеЕсли ОбъектТип = Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		ПриходРасходОперацииУХ 		= Перечисления.ВидыДвиженийПриходРасход.Расход;
		БюджетОперацииУХ			= ПланыВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств;
	ИначеЕсли ОбъектТип = Тип("ДокументСсылка.ОжидаемоеПоступлениеДенежныхСредств") Тогда
		ПриходРасходОперацииУХ 		= Перечисления.ВидыДвиженийПриходРасход.Приход;
		БюджетОперацииУХ			= ПланыВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств;
	КонецЕсли; 
	
	ПроверкаОперацииУХПройдена = ПроверитьВидОперацииУХ(ВидОперацииУХ, БюджетОперацииУХ, ПриходРасходОперацииУХ);

	Если НЕ ПроверкаОперацииУХПройдена Тогда
	
		ШаблонТекстаИсключения = НСтр("ru = 'Документ ""%1"" имеет недопустимый вид операции ""%2"". Создание документа ""%3"" возможно только с видами операций, у которых  вид бюджета ""%4"" 
									  | и направление операции ""%5""'");
		ВызватьИсключение СтрШаблон(ШаблонТекстаИсключения, ДанныеЗаполнения, ВидОперацииУХ, 
										ОбъектМетаданныхЗаявки.Синоним, БюджетОперацииУХ, ПриходРасходОперацииУХ);
	КонецЕсли; 
									
КонецПроцедуры

Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	// Закешируем режим записи и признак нового.
	Объект.ДополнительныеСвойства.Вставить("ЭтоНовый", Объект.ЭтоНовый());
	Объект.ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	//
	Реквизиты = РеквизитыДокументаЗаявка(ТипЗнч(Объект.Ссылка));
	Объект.ДополнительныеСвойства.Вставить("Реквизиты", Реквизиты);
	
	//
	ЭтоБДДС 	= (Реквизиты.ВидБюджета.Значение = ПланыВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств)
				ИЛИ (Реквизиты.ВидБюджета.Значение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств);
	ЭтоРасход 	= Реквизиты.ПриходРасход.Значение = Перечисления.ВидыДвиженийПриходРасход.Расход;
	
	// Если нет таблицы платежной позиции - формируем ее по данным документа.
	Если ЭтоБДДС И Объект.ЭтоНовый() И НЕ Объект.ДополнительныеСвойства.Свойство("ПлатежнаяПозиция") Тогда
		Объект.ДополнительныеСвойства.Вставить("ПлатежнаяПозиция", ПлатежныеПозиции.НоваяПлатежнаяПозицияПоДаннымДокумента(Объект));
	КонецЕсли;
	
	//ОбновитьДанныеПоВалютам(Объект, Реквизиты); 
	// Заполняем соответствие курсов валют документа + ВалютаУпрУчета
	ПланируемаяДатаОперации = РеквизитЗаявки(Объект, Реквизиты.ПланируемаяДатаОперации);
	ДатаКурса = ?(ЗначениеЗаполнено(ПланируемаяДатаОперации), ПланируемаяДатаОперации, Объект.Дата);
	СоответствиеКурсовВалют = Новый Соответствие;
	ВалютаУпрУчета = ВстраиваниеОПКПереопределяемый.КонстантаВалютаУправленческогоУчета();
	Курс = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпрУчета, ДатаКурса);
	СоответствиеКурсовВалют.Вставить(ВалютаУпрУчета, Курс);
	ВалютаДокумента = РеквизитЗаявки(Объект, Реквизиты.ВалютаДокумента);
	Если СоответствиеКурсовВалют.Получить(ВалютаДокумента) = Неопределено Тогда
		Курс = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаКурса);
		СоответствиеКурсовВалют.Вставить(ВалютаДокумента,Курс);
	КонецЕсли;
	
	//
	Если Реквизиты.ОбъектРасчетов.ЕстьРеквизит Тогда
		Договор = РеквизитЗаявки(Объект, Реквизиты.ДоговорКонтрагента);
		Если ЗначениеЗаполнено(Договор) 
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ПорядокРасчетов") <> Перечисления.ПорядокРасчетов.ПоЗаказамНакладным Тогда
			УстановитьРеквизитЗаявки(Объект, Реквизиты.ОбъектРасчетов, Договор);
		КонецЕсли;
	КонецЕсли;
	
	//
	Если ЭтоРасход Тогда
		Организация = РеквизитЗаявки(Объект, Реквизиты.Организация);
		Контрагент = РеквизитЗаявки(Объект, Реквизиты.Контрагент);
		Объект.ЭтоВнутригрупповоеПеремещение = ВстраиваниеОПКПереопределяемый.ЭтоВнутригрупповойКонтрагент(Контрагент);
		
		//
		Если ЭтоБДДС Тогда
			БанковскийСчетКасса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Объект.ДополнительныеСвойства, "БанковскийСчетКасса");
			СчетПолучателя = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Объект.ДополнительныеСвойства, "СчетПолучателя");
			Если Объект.ЭтоВнутригрупповоеПеремещение Тогда
				Если НЕ ЗначениеЗаполнено(РеквизитЗаявки(Объект, Реквизиты.ОрганизацияВстречная)) Тогда
					УстановитьРеквизитЗаявки(Объект, Реквизиты.ОрганизацияВстречная, 
						ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контрагент, "ОрганизационнаяЕдиница"));
				КонецЕсли;
				Если Не ЗначениеЗаполнено(РеквизитЗаявки(Объект, Реквизиты.КонтрагентОрганизации)) Тогда
					УстановитьРеквизитЗаявки(Объект, Реквизиты.КонтрагентОрганизации, 
						ВстраиваниеОПКПереопределяемый.КонтрагентОрганизации(Организация));
				КонецЕсли;
			ИначеЕсли ВидыОперацийУХКлиентСерверПовтИсп.ЭтоКонвертацияВалюты(Объект.ВидОперацииУХ) Тогда
				// ничего не делаем, т.к. ветка надо отделить конвертацию от перемещения
			ИначеЕсли ВидыОперацийУХКлиентСерверПовтИсп.ЭтоПеремещениеСобственныхСредств(Объект.ВидОперацииУХ) Тогда
				КонтрагентОрганизации = ВстраиваниеОПКПереопределяемый.КонтрагентОрганизации(Организация);
				УстановитьРеквизитЗаявки(Объект, Реквизиты.ОрганизацияВстречная,	Организация);
				УстановитьРеквизитЗаявки(Объект, Реквизиты.КонтрагентОрганизации,	КонтрагентОрганизации);
				УстановитьРеквизитЗаявки(Объект, Реквизиты.Контрагент,				КонтрагентОрганизации);
				УстановитьРеквизитЗаявки(Объект, Реквизиты.БанковскийСчетКонтрагента, 
					УправлениеДенежнымиСредствамиУХ.БанковскийСчетКонтрагента(СчетПолучателя));
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
				Объект.ДополнительныеСвойства.Вставить("БанковскийСчетКасса", 
					УправлениеДенежнымиСредствамиУХ.ПолучитьБанковскийСчетПоУмолчанию(
						Организация, 
						РеквизитЗаявки(Объект, Реквизиты.ВалютаОплаты), 
						РеквизитЗаявки(Объект, Реквизиты.ФормаОплаты)
					)
				);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// 
	РеквизитСтатья = Реквизиты.СтатьяБюджета;
	Если РеквизитСтатья.РазмещенВТЧ Тогда
		ТЧ = Объект[РеквизитСтатья.ИмяТЧ];
		ИтогоПоСтатьямСуммаДокумента = ТЧ.Итог("Сумма");
		Если (ИтогоПоСтатьямСуммаДокумента > 0 ) И НЕ ВстраиваниеОПККлиентСерверПереопределяемый.ЭтоПеремещениеВнутриОрганизации(Объект.ВидОперацииУХ) Тогда
			УстановитьРеквизитЗаявки(Объект, Реквизиты.СуммаДокумента, ИтогоПоСтатьямСуммаДокумента);
		ИначеЕсли ТЧ.Количество()=0 Тогда
			НоваяСтрока = ТЧ.Добавить();
			НоваяСтрока.Сумма = РеквизитЗаявки(Объект, Реквизиты.СуммаДокумента);
		КонецЕсли;
	КонецЕсли;
	
	//
	СуммаДокумента = РеквизитЗаявки(Объект, Реквизиты.СуммаДокумента);
	ВалютаДокумента = РеквизитЗаявки(Объект, Реквизиты.ВалютаДокумента);
	Если ЗначениеЗаполнено(ВалютаУпрУчета) Тогда			
		Объект.СуммаДокументаУпр = ВстраиваниеОПКПереопределяемый.ПересчитатьПоКурсу(
			СуммаДокумента,
			СоответствиеКурсовВалют[ВалютаДокумента],
			СоответствиеКурсовВалют[ВалютаУпрУчета]);
	Иначе
		Объект.СуммаДокументаУпр = СуммаДокумента;
		ШаблонСообщения = НСтр("ru = 'Не заполнена валюта управленческого учета. Сумма документа (%1) не была пересчитана в валюту управленческого учета из валюты документа (%2).'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, Строка(СуммаДокумента), Строка(ВалютаДокумента));
		ОбщегоНазначения.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
	// Необходим контроль директив
	Если ЭтоБДДС И ЭтоРасход И НЕ Объект.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Объект.ДополнительныеСвойства.Вставить("НеобходимКонтрольДиректив", Истина);
	КонецЕсли;
	
	//
	Если НЕ Объект.ЭтоНовый() И ЗначениеЗаполнено(Объект.Ссылка.Проект) Тогда 
		Объект.ДополнительныеСвойства.Вставить("СтруктураДанныхСтар", 
			ВстраиваниеОПКПереопределяемый.ПолучитьСтруктуруДанныхДляКорректировкиПланов(Объект.Ссылка));
	КонецЕсли;
	
	ВстраиваниеОПКПереопределяемый.ПроверитьНеобходимостьУстановкиСтатусаЧерновик(Объект, РежимЗаписи);
	
КонецПроцедуры

Процедура ПриЗаписи(Объект, Отказ) Экспорт
	
	Реквизиты = Объект.ДополнительныеСвойства.Реквизиты;
	
	//
	Если Реквизиты.ВидБюджетаПВХ.Значение = ПланыВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств Тогда
		ПлатежныеПозиции.ЗаписатьПлатежнуюПозициюПриЗаписи(Объект);
	КонецЕсли;
	
	//
	ЭтоНовыйДокумент = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Объект.ДополнительныеСвойства, "ЭтоНовый", Ложь);
	ВстраиваниеОПКПереопределяемый.УстановитьСтатусЧерновикПриНеобходимости(Объект, ЭтоНовыйДокумент);
	
	//
	Если Объект.ДополнительныеСвойства.Свойство("НеобходимКонтрольДиректив") Тогда
		Если ПлатежЗапрещенДирективно(Объект.Ссылка) Тогда
			ТекстСообщения = НСтр("ru = 'Заявка подпадает под директиву запрета платежа и не может быть отправлена на согласование.'");
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, , , Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Объект, Отказ, РежимПроведения, ВыполнятьКонтроль = Истина) Экспорт
	
	ПроведениеСерверОПК.ИнициализироватьДополнительныеСвойстваДляПроведения(Объект.Ссылка, Объект.ДополнительныеСвойства, РежимПроведения);
	ИнициализироватьДанныеЗаявки(Объект, Объект.ДополнительныеСвойства);
	
	КонтрольЛимитовУХ.ВыполнитьПроверкуНаличияПериодов(Объект.Ссылка, Объект.ДополнительныеСвойства, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//// Подготовить курсы к упр.валюте
	//Если ЗначениеЗаполнено(ДатаНачала) Тогда
	//	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаНачала);
	//Иначе
	//	СтруктураКурса = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	//КонецЕсли;
	//Движения.ОперативныйПланПоБюджетам.ДополнительныеСвойства.Вставить("СтруктураКурса", СтруктураКурса);
	//
	
	ПроведениеСерверОПК.ПодготовитьНаборыЗаписейКПроведению(Объект);
	
	// Движения по регистру ОперативныйПланПоБюджетам
	КонтрольЛимитовУХ.ОтразитьОперативныйПланПоБюджету(Объект.ДополнительныеСвойства, Объект.Движения, Отказ);
	Если Объект.ДополнительныеСвойства.ДляПроведения.ТребуетсяФормированиеЛимитов Тогда
		КонтрольЛимитовУХ.ОтразитьЛимитыПоБюджетам(Объект.ДополнительныеСвойства, Объект.Движения, Отказ);
	КонецЕсли;
	
	Если ВыполнятьКонтроль = Истина Тогда
		//СформироватьСписокРегистровДляКонтроля();
		Если Объект.ДополнительныеСвойства.ДляПроведения.ТребуетсяФормированиеЛимитов
			И Объект.Движения.Найти("ЛимитыПоБюджетам") <> неопределено Тогда
			Объект.ДополнительныеСвойства.ДляПроведения.Вставить(
				"РегистрыДляКонтроля", ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(Объект.Движения.ЛимитыПоБюджетам));
		КонецЕсли;
		
		ПроведениеСерверОПК.ЗаписатьНаборыЗаписей(Объект);
		ПроведениеСерверОПК.ВыполнитьКонтрольРезультатовПроведения(Объект, Отказ);
	КонецЕсли;
	ПроведениеСерверОПК.ОчиститьДополнительныеСвойстваДляПроведения(Объект.ДополнительныеСвойства);
	
	ВстраиваниеОПКПереопределяемый.ОтправитьНаСогласованиеПриПроведенииДокумента(Объект, Отказ);
	ВстраиваниеОПКПереопределяемый.ОбновитьПоказателиПроектовПриПроведенииДокумента(Объект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	
	// ПроверитьВозможностьОтменыПроведения;
	ЕстьСуперПользователь = ВстраиваниеОПКПереопределяемый.ЕстьСуперПользователь(Объект.ЦФО);
	Если Не ЕстьСуперПользователь Тогда
		Реквизиты = РеквизитыДокументаЗаявка(ТипЗнч(Объект.Ссылка));
		Если Реквизиты.ВидБюджетаПВХ.Значение = ПланыВидовХарактеристик.ВидыБюджетов.БюджетДвиженияДенежныхСредств 
			И ПлатежныеПозиции.ПоДокументуЕстьИсполненныеИлиНаходящиесяНаИсполненииПозиции(Объект.Ссылка) Тогда
			
			Отказ = Истина;
			ТекстСообщения = НСтр("ru = 'Отказано в отмене проведения документа %1. Отменить проведение заявок, находящихся на исполнении или уже исполненных, может только суперпользователь.'");
			ВызватьИсключение СтрШаблон(ТекстСообщения, Объект.Ссылка);
			
		КонецЕсли;
	КонецЕсли;
	
	// 
	ПроведениеСерверОПК.ПодготовитьНаборыЗаписейКОтменеПроведения(Объект);
	
	//
	ИзменитьСостояние = НЕ ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(
		Объект.ДополнительныеСвойства, "НеИзменятьСостояниеПриОтменеПроведения", Ложь);
	Если ИзменитьСостояние Тогда
		ВстраиваниеОПКПереопределяемый.ОтменитьСогласованиеПриОтменеПроведения(Объект.Ссылка, Отказ);
	КонецЕсли;
	
	// Перевод документа в статус Черновик вручную.
	СостояниеЧерновик = Перечисления.СостоянияСогласования.Черновик;
	НовыйСтатус = ВстраиваниеОПКПереопределяемый.ВернутьСтатусОбъекта(Объект.Ссылка, СостояниеЧерновик);
	Если НовыйСтатус <> СостояниеЧерновик И НовыйСтатус <> Перечисления.СостоянияСогласования.Возвращена Тогда
		ВстраиваниеОПКПереопределяемый.ПеревестиЗаявкуВПроизвольноеСостояние(
			Объект.Ссылка, СостояниеЧерновик, ТекущаяДатаСеанса(), Пользователи.ТекущийПользователь(), , , Ложь);
	КонецЕсли;
	
	//
	КорректировкаЛимитовУХ.ОповещениеПоДокументамОбеспеченнымКорректировкойЛимитов(Объект.Ссылка, Отказ);
	
КонецПроцедуры

#Область ВспомогательныеПроцедурыИФункции

Процедура ИнициализироватьДанныеЗаявки(Объект, ДополнительныеСвойства) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, Объект);
	
	// Если в справочнике периоды нет требуемых элементов, то прекращаем собирать данные
	Если НЕ КонтрольЛимитовУХ.ПодготовитьТаблицуДатИПериодов(Запрос, Объект.Ссылка, ДополнительныеСвойства) Тогда
		Возврат;
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаДвиженияПоОперПланам(Запрос, ТекстыЗапроса);
	
	ПроведениеСерверОПК.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
	//
	Если Объект.ДополнительныеСвойства.ДляПроведения.ТребуетсяФормированиеЛимитов Тогда
		ПодготовитьТаблицуЛимитовПоЗаявке(Объект, Запрос, ДополнительныеСвойства.ТаблицыДляДвижений);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, Объект)
	
	РеквизитыЗаявки = РеквизитыДокументаЗаявка(ТипЗнч(Объект.Ссылка));
	
	Объект.ДополнительныеСвойства.Вставить("РеквизитыЗаявки", РеквизитыЗаявки);
	
	СтруктураРеквизитов = Новый Структура("Ссылка, Дата, ДокументПланирования");
	СтруктураРеквизитов.Вставить("Организация", РеквизитыЗаявки.Организация.ИмяРеквизита);
	СтруктураРеквизитов.Вставить("Контрагент", РеквизитыЗаявки.Контрагент.ИмяРеквизита);
	#Область УХВстраивание
	Если ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ЗаявкаНаКомандировку")  Тогда
		СтруктураРеквизитов.Вставить("ДоговорКонтрагента", РеквизитыЗаявки.ДоговорКонтрагента.ИмяРеквизита);
	Иначе		
		Запрос.УстановитьПараметр("ДоговорКонтрагента", Неопределено);
	КонецЕсли; 
	#КонецОбласти 
	
	Для Каждого КлючЗначение Из СтруктураРеквизитов Цикл
		Если ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
			ИмяРеквизита = КлючЗначение.Значение;
		Иначе
			ИмяРеквизита = КлючЗначение.Ключ;
		КонецЕсли;
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, Объект[ИмяРеквизита]);
	КонецЦикла;
	
	//
	Орг = ЗначениеЗаполнено(Запрос.Параметры.Организация);
	Кон = ЗначениеЗаполнено(Запрос.Параметры.Контрагент);
	#Область УХВстраивание
	Если ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ЗаявкаНаКомандировку")  Тогда
		Дог = ЗначениеЗаполнено(Запрос.Параметры.ДоговорКонтрагента);
	Иначе
		Дог = Ложь;	
	КонецЕсли; 
	#КонецОбласти 

	Если Орг И Кон И Дог Тогда
		ЗаполненностьДоговораЗаявки = 6;
	ИначеЕсли НЕ Орг И Кон И Дог Тогда
		ЗаполненностьДоговораЗаявки = 5;
	ИначеЕсли Орг И Кон И НЕ Дог Тогда
		ЗаполненностьДоговораЗаявки = 4;
	ИначеЕсли НЕ Орг И Кон И НЕ Дог Тогда
		ЗаполненностьДоговораЗаявки = 3;
	ИначеЕсли Орг И НЕ Кон И НЕ Дог Тогда
		ЗаполненностьДоговораЗаявки = 2;
	Иначе
		ЗаполненностьДоговораЗаявки = 1;
	КонецЕсли;
	Запрос.УстановитьПараметр("ЗаполненностьДоговораЗаявки", ЗаполненностьДоговораЗаявки);
	
	// Планы документа
	МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Объект.Ссылка);
	ОбщегоНазначенияОПК.ЗагрузитьТаблицуВоВременнуюТаблицуЗапроса(
		Запрос, "ВТ_ТаблицаДвиженияОперации", МенеджерДокумента.ПланыДокумента(Объект.Ссылка));
	
	// 
	РеквизитыЗаявки = Объект.ДополнительныеСвойства.РеквизитыЗаявки;
	
	Объект.ДополнительныеСвойства.ДляПроведения.Вставить("ТребуетсяФормированиеЛимитов",
		НЕ (РеквизитыЗаявки.ВидБюджета.Значение = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств
		И РеквизитыЗаявки.ПриходРасход.Значение = Перечисления.ВидыДвиженийПриходРасход.Приход));
	
КонецПроцедуры

Процедура ТекстЗапросаДвиженияПоОперПланам(Запрос, ТекстыЗапроса)
	
	Если НЕ ПроведениеСерверОПК.ЕстьТаблицаЗапроса("ВТ_ТаблицаПлановССуммамиЛимитирования", ТекстыЗапроса) Тогда
		ТекстЗапроса_ВТ_ПлановССуммамиЛимитирования(Запрос, ТекстыЗапроса);
	КонецЕсли;
	
	ИмяРегистра = "ОперативныйПланПоБюджетам";
	ТекстЗапроса_ОперПланы(Запрос, ТекстыЗапроса, ИмяРегистра);
	
КонецПроцедуры

Процедура ТекстЗапроса_ВТ_ПлановССуммамиЛимитирования(Запрос, ТекстыЗапроса)

	ИмяВременнойТаблицы = "ВТ_ТаблицаПлановССуммамиЛимитирования";
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ВТ_ТаблицаДвиженияОперации.Период КАК Период,
	|	ВТ_ТаблицаДвиженияОперации.Предназначение КАК Предназначение,
	|	ВТ_ТаблицаДвиженияОперации.ПериодОтчета КАК ПериодОтчета,
	|	ВТ_ТаблицаДвиженияОперации.ПриходРасход КАК ПриходРасход,
	|	ВТ_ТаблицаДвиженияОперации.ЦФО КАК ЦФО,
	|	ВТ_ТаблицаДвиженияОперации.Проект КАК Проект,
	|	ВТ_ТаблицаДвиженияОперации.Организация КАК Организация,
	|	ВТ_ТаблицаДвиженияОперации.СтатьяБюджета КАК СтатьяБюджета,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика1 КАК Аналитика1,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика2 КАК Аналитика2,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика3 КАК Аналитика3,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика4 КАК Аналитика4,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика5 КАК Аналитика5,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика6 КАК Аналитика6,
	|	ВТ_ТаблицаДвиженияОперации.Валюта КАК Валюта,
	|	ВТ_ТаблицаДвиженияОперации.Контрагент КАК Контрагент,
	|	ВТ_ТаблицаДвиженияОперации.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ТаблицаДвиженияОперации.ДокументПланирования КАК ДокументПланирования,
	|	ВТ_ТаблицаДвиженияОперации.ДокументРезервирования КАК ДокументРезервирования,
	|	0 КАК Лимит,
	|	0 КАК Зарезервировано,
	|	ВТ_ТаблицаДвиженияОперации.Сумма КАК Заявлено,
	|	0 КАК Исполнено
	|ПОМЕСТИТЬ ВТ_ТаблицаПлановССуммамиЛимитирования
	|ИЗ
	|	ВТ_ТаблицаДвиженияОперации КАК ВТ_ТаблицаДвиженияОперации
	|ГДЕ
	|	ВТ_ТаблицаДвиженияОперации.Организация = &Организация";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяВременнойТаблицы);
	
КонецПроцедуры

Процедура ТекстЗапроса_ОперПланы(Запрос, ТекстыЗапроса, ИмяРегистра)
	
	ТекстЗапроса1 = 
	"ВЫБРАТЬ
	|	ЛОЖЬ КАК ОрганизацияЗаполнена,
	|	ЛОЖЬ КАК КонтрагентЗаполнен,
	|	ЛОЖЬ КАК ДоговорКонтрагентаЗаполнен,
	|	1 КАК ТипДанных
	|ПОМЕСТИТЬ ВТ_МатрицаЗаполненностиДоговора
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	2
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	4
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ИСТИНА,
	|	5
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ИСТИНА,
	|	ИСТИНА,
	|	ИСТИНА,
	|	6";
	
	ТекстЗапроса2 = 
	"ВЫБРАТЬ
	|	6 КАК ТипДанных
	|ПОМЕСТИТЬ ВТ_МатрицаОтбораПланов
	|ГДЕ
	|	&ЗаполненностьДоговораЗаявки = 6
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	5
	|ГДЕ
	|	&ЗаполненностьДоговораЗаявки >= 5
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	4
	|ГДЕ
	|	(&ЗаполненностьДоговораЗаявки = 6
	|			ИЛИ &ЗаполненностьДоговораЗаявки = 4)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	3
	|ГДЕ
	|	&ЗаполненностьДоговораЗаявки >= 3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	2
	|ГДЕ
	|	(&ЗаполненностьДоговораЗаявки = 6
	|			ИЛИ &ЗаполненностьДоговораЗаявки = 4
	|			ИЛИ &ЗаполненностьДоговораЗаявки = 2)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1";
	ТекстЗапроса3 = 
	"ВЫБРАТЬ
	|	ЗапросОбороты.Предназначение КАК Предназначение,
	|	ЗапросОбороты.ПериодОтчета КАК ПериодОтчета,
	|	ЗапросОбороты.ЦФО КАК ЦФО,
	|	ЗапросОбороты.Проект КАК Проект,
	|	ЗапросОбороты.СтатьяБюджета КАК СтатьяБюджета,
	|	ЗапросОбороты.Аналитика1 КАК Аналитика1,
	|	ЗапросОбороты.Аналитика2 КАК Аналитика2,
	|	ЗапросОбороты.Аналитика3 КАК Аналитика3,
	|	ЗапросОбороты.Аналитика4 КАК Аналитика4,
	|	ЗапросОбороты.Аналитика5 КАК Аналитика5,
	|	ЗапросОбороты.Аналитика6 КАК Аналитика6,
	|	ЗапросОбороты.ПриходРасход КАК ПриходРасход,
	|	ЗапросОбороты.Валюта КАК Валюта,
	|	СУММА(ЗапросОбороты.ЗарезервированоОборот) КАК ЗарезервированоОборот,
	|	ЗапросОбороты.Организация КАК Организация,
	|	ЗапросОбороты.Контрагент КАК Контрагент,
	|	ЗапросОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ЗапросОбороты.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ОрганизацияЗаполнена,
	|	ВЫБОР
	|		КОГДА (ЗапросОбороты.Контрагент = НЕОПРЕДЕЛЕНО
	|				ИЛИ ЗапросОбороты.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ИЛИ ЗапросОбороты.Контрагент = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|				И ЗапросОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК КонтрагентЗаполнен,
	|	ВЫБОР
	|		КОГДА ЗапросОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ДоговорЗаполнен
	|ПОМЕСТИТЬ ВТ_ОстаткиПоДокументуПланирования
	|ИЗ
	|	(ВЫБРАТЬ
	|		ОперативныйПланПоБюджетамОбороты.Предназначение КАК Предназначение,
	|		ОперативныйПланПоБюджетамОбороты.ПериодОтчета КАК ПериодОтчета,
	|		ОперативныйПланПоБюджетамОбороты.ЦФО КАК ЦФО,
	|		ОперативныйПланПоБюджетамОбороты.Проект КАК Проект,
	|		ОперативныйПланПоБюджетамОбороты.СтатьяБюджета КАК СтатьяБюджета,
	|		ОперативныйПланПоБюджетамОбороты.Аналитика1 КАК Аналитика1,
	|		ОперативныйПланПоБюджетамОбороты.Аналитика2 КАК Аналитика2,
	|		ОперативныйПланПоБюджетамОбороты.Аналитика3 КАК Аналитика3,
	|		ОперативныйПланПоБюджетамОбороты.Аналитика4 КАК Аналитика4,
	|		ОперативныйПланПоБюджетамОбороты.Аналитика5 КАК Аналитика5,
	|		ОперативныйПланПоБюджетамОбороты.Аналитика6 КАК Аналитика6,
	|		ОперативныйПланПоБюджетамОбороты.ПриходРасход КАК ПриходРасход,
	|		ОперативныйПланПоБюджетамОбороты.Валюта КАК Валюта,
	|		ОперативныйПланПоБюджетамОбороты.ЗарезервированоОборот КАК ЗарезервированоОборот,
	|		ОперативныйПланПоБюджетамОбороты.Организация КАК Организация,
	|		ОперативныйПланПоБюджетамОбороты.Контрагент КАК Контрагент,
	|		ОперативныйПланПоБюджетамОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента
	|	ИЗ
	|		РегистрНакопления.ОперативныйПланПоБюджетам.Обороты(, , , ДокументПланирования = &ДокументПланирования) КАК ОперативныйПланПоБюджетамОбороты
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОперативныйПланПоБюджетам.Предназначение,
	|		ОперативныйПланПоБюджетам.ПериодОтчета,
	|		ОперативныйПланПоБюджетам.ЦФО,
	|		ОперативныйПланПоБюджетам.Проект,
	|		ОперативныйПланПоБюджетам.СтатьяБюджета,
	|		ОперативныйПланПоБюджетам.Аналитика1,
	|		ОперативныйПланПоБюджетам.Аналитика2,
	|		ОперативныйПланПоБюджетам.Аналитика3,
	|		ОперативныйПланПоБюджетам.Аналитика4,
	|		ОперативныйПланПоБюджетам.Аналитика5,
	|		ОперативныйПланПоБюджетам.Аналитика6,
	|		ОперативныйПланПоБюджетам.ПриходРасход,
	|		ОперативныйПланПоБюджетам.Валюта,
	|		-ОперативныйПланПоБюджетам.Зарезервировано,
	|		ОперативныйПланПоБюджетам.Организация,
	|		ОперативныйПланПоБюджетам.Контрагент,
	|		ОперативныйПланПоБюджетам.ДоговорКонтрагента
	|	ИЗ
	|		РегистрНакопления.ОперативныйПланПоБюджетам КАК ОперативныйПланПоБюджетам
	|	ГДЕ
	|		ОперативныйПланПоБюджетам.Регистратор = &Ссылка
	|		И ОперативныйПланПоБюджетам.ДокументПланирования = &ДокументПланирования) КАК ЗапросОбороты
	|ГДЕ
	|	&ДокументПланирования <> ЗНАЧЕНИЕ(Документ.ОперативныйПлан.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗапросОбороты.Валюта,
	|	ЗапросОбороты.Контрагент,
	|	ЗапросОбороты.ПриходРасход,
	|	ЗапросОбороты.Организация,
	|	ЗапросОбороты.ПериодОтчета,
	|	ЗапросОбороты.СтатьяБюджета,
	|	ЗапросОбороты.Предназначение,
	|	ЗапросОбороты.ЦФО,
	|	ЗапросОбороты.Проект,
	|	ЗапросОбороты.Аналитика1,
	|	ЗапросОбороты.Аналитика2,
	|	ЗапросОбороты.Аналитика3,
	|	ЗапросОбороты.Аналитика4,
	|	ЗапросОбороты.Аналитика5,
	|	ЗапросОбороты.Аналитика6,
	|	ЗапросОбороты.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА (ЗапросОбороты.Контрагент = НЕОПРЕДЕЛЕНО
	|				ИЛИ ЗапросОбороты.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|				ИЛИ ЗапросОбороты.Контрагент = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))
	|				И ЗапросОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗапросОбороты.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ЗапросОбороты.ДоговорКонтрагента = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ";
	
	ТекстЗапроса4 = 
	"ВЫБРАТЬ
	|	ВТ_ОстаткиПоДокументуПланирования.Предназначение КАК Предназначение,
	|	ВТ_ОстаткиПоДокументуПланирования.ПериодОтчета КАК ПериодОтчета,
	|	ВТ_ОстаткиПоДокументуПланирования.ЦФО КАК ЦФО,
	|	ВТ_ОстаткиПоДокументуПланирования.Проект КАК Проект,
	|	ВТ_ОстаткиПоДокументуПланирования.СтатьяБюджета КАК СтатьяБюджета,
	|	ВТ_ОстаткиПоДокументуПланирования.Аналитика1 КАК Аналитика1,
	|	ВТ_ОстаткиПоДокументуПланирования.Аналитика2 КАК Аналитика2,
	|	ВТ_ОстаткиПоДокументуПланирования.Аналитика3 КАК Аналитика3,
	|	ВТ_ОстаткиПоДокументуПланирования.Аналитика4 КАК Аналитика4,
	|	ВТ_ОстаткиПоДокументуПланирования.Аналитика5 КАК Аналитика5,
	|	ВТ_ОстаткиПоДокументуПланирования.Аналитика6 КАК Аналитика6,
	|	ВТ_ОстаткиПоДокументуПланирования.ПриходРасход КАК ПриходРасход,
	|	ВТ_ОстаткиПоДокументуПланирования.Валюта КАК Валюта,
	|	ВТ_ОстаткиПоДокументуПланирования.ЗарезервированоОборот КАК ЗарезервированоОборот,
	|	ВТ_ОстаткиПоДокументуПланирования.Организация КАК Организация,
	|	ВТ_ОстаткиПоДокументуПланирования.Контрагент КАК Контрагент,
	|	ВТ_ОстаткиПоДокументуПланирования.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ОстаткиПоДокументуПланирования.ОрганизацияЗаполнена КАК ОрганизацияЗаполнена,
	|	ВТ_ОстаткиПоДокументуПланирования.КонтрагентЗаполнен КАК КонтрагентЗаполнен,
	|	ВТ_ОстаткиПоДокументуПланирования.ДоговорЗаполнен КАК ДоговорЗаполнен,
	|	ВТ_МатрицаЗаполненностиДоговора.ТипДанных КАК ТипДанных
	|ПОМЕСТИТЬ ВТ_ОстаткиЗапланировано
	|ИЗ
	|	ВТ_МатрицаЗаполненностиДоговора КАК ВТ_МатрицаЗаполненностиДоговора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОстаткиПоДокументуПланирования КАК ВТ_ОстаткиПоДокументуПланирования
	|		ПО ВТ_МатрицаЗаполненностиДоговора.ОрганизацияЗаполнена = ВТ_ОстаткиПоДокументуПланирования.ОрганизацияЗаполнена
	|			И ВТ_МатрицаЗаполненностиДоговора.КонтрагентЗаполнен = ВТ_ОстаткиПоДокументуПланирования.КонтрагентЗаполнен
	|			И ВТ_МатрицаЗаполненностиДоговора.ДоговорКонтрагентаЗаполнен = ВТ_ОстаткиПоДокументуПланирования.ДоговорЗаполнен
	|ГДЕ
	|	(ВТ_ОстаткиПоДокументуПланирования.Организация = &Организация
	|			ИЛИ ВТ_ОстаткиПоДокументуПланирования.ОрганизацияЗаполнена = ЛОЖЬ)
	|	И (ВТ_ОстаткиПоДокументуПланирования.Контрагент = &Контрагент
	|			ИЛИ ВТ_ОстаткиПоДокументуПланирования.КонтрагентЗаполнен = ЛОЖЬ)
	|	И (ВТ_ОстаткиПоДокументуПланирования.ДоговорКонтрагента = &ДоговорКонтрагента
	|			ИЛИ ВТ_ОстаткиПоДокументуПланирования.ДоговорЗаполнен = ЛОЖЬ)";
	
	ТекстЗапроса5 = 
	"ВЫБРАТЬ
	|	ВТ_ОстаткиЗапланировано.Предназначение КАК Предназначение,
	|	ВТ_ОстаткиЗапланировано.ПериодОтчета КАК ПериодОтчета,
	|	ВТ_ОстаткиЗапланировано.ЦФО КАК ЦФО,
	|	ВТ_ОстаткиЗапланировано.Проект КАК Проект,
	|	ВТ_ОстаткиЗапланировано.СтатьяБюджета КАК СтатьяБюджета,
	|	ВТ_ОстаткиЗапланировано.Аналитика1 КАК Аналитика1,
	|	ВТ_ОстаткиЗапланировано.Аналитика2 КАК Аналитика2,
	|	ВТ_ОстаткиЗапланировано.Аналитика3 КАК Аналитика3,
	|	ВТ_ОстаткиЗапланировано.Аналитика4 КАК Аналитика4,
	|	ВТ_ОстаткиЗапланировано.Аналитика5 КАК Аналитика5,
	|	ВТ_ОстаткиЗапланировано.Аналитика6 КАК Аналитика6,
	|	ВТ_ОстаткиЗапланировано.ПриходРасход КАК ПриходРасход,
	|	ВТ_ОстаткиЗапланировано.Валюта КАК Валюта,
	|	ВТ_ОстаткиЗапланировано.ЗарезервированоОборот КАК ЗарезервированоОборот,
	|	ВТ_ОстаткиЗапланировано.Организация КАК Организация,
	|	ВТ_ОстаткиЗапланировано.Контрагент КАК Контрагент,
	|	ВТ_ОстаткиЗапланировано.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_ОстаткиЗапланировано.ОрганизацияЗаполнена КАК ОрганизацияЗаполнена,
	|	ВТ_ОстаткиЗапланировано.КонтрагентЗаполнен КАК КонтрагентЗаполнен,
	|	ВТ_ОстаткиЗапланировано.ДоговорЗаполнен КАК ДоговорЗаполнен,
	|	ВТ_ОстаткиЗапланировано.ТипДанных КАК ТипДанных
	|ПОМЕСТИТЬ ВТ_Запланировано
	|ИЗ
	|	ВТ_МатрицаОтбораПланов КАК ВТ_МатрицаОтбораПланов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОстаткиЗапланировано КАК ВТ_ОстаткиЗапланировано
	|		ПО ВТ_МатрицаОтбораПланов.ТипДанных = ВТ_ОстаткиЗапланировано.ТипДанных";
	
	//
	ТекстЗапроса6 = 
	"ВЫБРАТЬ
	|	ВТ_Запланировано.Предназначение КАК Предназначение,
	|	ВТ_Запланировано.ПериодОтчета КАК ПериодОтчета,
	|	ВТ_Запланировано.ЦФО КАК ЦФО,
	|	ВТ_Запланировано.Проект КАК Проект,
	|	ВТ_Запланировано.СтатьяБюджета КАК СтатьяБюджета,
	|	ВТ_Запланировано.Аналитика1 КАК Аналитика1,
	|	ВТ_Запланировано.Аналитика2 КАК Аналитика2,
	|	ВТ_Запланировано.Аналитика3 КАК Аналитика3,
	|	ВТ_Запланировано.Аналитика4 КАК Аналитика4,
	|	ВТ_Запланировано.Аналитика5 КАК Аналитика5,
	|	ВТ_Запланировано.Аналитика6 КАК Аналитика6,
	|	ВТ_Запланировано.ПриходРасход КАК ПриходРасход,
	|	ВТ_Запланировано.Валюта КАК Валюта,
	|	ВТ_Запланировано.Организация КАК Организация,
	|	ВТ_Запланировано.Контрагент КАК Контрагент,
	|	ВТ_Запланировано.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВТ_Запланировано.ЗарезервированоОборот КАК ЗарезервированоОборот,
	|	ВТ_Запланировано.ТипДанных КАК ТипДанных,
	|	СУММА(ВТ_Запланировано1.ЗарезервированоОборот) КАК ЗарезервированоОборот1
	|ПОМЕСТИТЬ ВТ_ЗапланированоСИтогами
	|ИЗ
	|	ВТ_Запланировано КАК ВТ_Запланировано
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Запланировано КАК ВТ_Запланировано1
	|		ПО ВТ_Запланировано.Предназначение = ВТ_Запланировано1.Предназначение
	|			И ВТ_Запланировано.ПериодОтчета = ВТ_Запланировано1.ПериодОтчета
	|			И ВТ_Запланировано.ЦФО = ВТ_Запланировано1.ЦФО
	|			И ВТ_Запланировано.Проект = ВТ_Запланировано1.Проект
	|			И ВТ_Запланировано.СтатьяБюджета = ВТ_Запланировано1.СтатьяБюджета
	|			И ВТ_Запланировано.Аналитика1 = ВТ_Запланировано1.Аналитика1
	|			И ВТ_Запланировано.Аналитика2 = ВТ_Запланировано1.Аналитика2
	|			И ВТ_Запланировано.Аналитика3 = ВТ_Запланировано1.Аналитика3
	|			И ВТ_Запланировано.Аналитика4 = ВТ_Запланировано1.Аналитика4
	|			И ВТ_Запланировано.Аналитика5 = ВТ_Запланировано1.Аналитика5
	|			И ВТ_Запланировано.Аналитика6 = ВТ_Запланировано1.Аналитика6
	|			И ВТ_Запланировано.ПриходРасход = ВТ_Запланировано1.ПриходРасход
	|			И ВТ_Запланировано.Валюта = ВТ_Запланировано1.Валюта
	|			И ВТ_Запланировано.ТипДанных <= ВТ_Запланировано1.ТипДанных
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Запланировано.ПриходРасход,
	|	ВТ_Запланировано.Аналитика1,
	|	ВТ_Запланировано.Валюта,
	|	ВТ_Запланировано.СтатьяБюджета,
	|	ВТ_Запланировано.ЦФО,
	|	ВТ_Запланировано.Проект,
	|	ВТ_Запланировано.Предназначение,
	|	ВТ_Запланировано.Аналитика2,
	|	ВТ_Запланировано.Аналитика3,
	|	ВТ_Запланировано.Аналитика4,
	|	ВТ_Запланировано.Аналитика5,
	|	ВТ_Запланировано.Аналитика6,
	|	ВТ_Запланировано.ПериодОтчета,
	|	ВТ_Запланировано.ЗарезервированоОборот,
	|	ВТ_Запланировано.Организация,
	|	ВТ_Запланировано.Контрагент,
	|	ВТ_Запланировано.ДоговорКонтрагента,
	|	ВТ_Запланировано.ТипДанных";
	
	//
	ТекстЗапроса7 = 
	"ВЫБРАТЬ
	|	&Ссылка КАК Ссылка,
	|	ВТ_ТаблицаДвиженияОперации.Период КАК Период,
	|	ВТ_ТаблицаДвиженияОперации.Предназначение КАК Предназначение,
	|	ВТ_ТаблицаДвиженияОперации.ПериодОтчета КАК ПериодОтчета,
	|	ВТ_ТаблицаДвиженияОперации.Валюта КАК Валюта,
	|	ВТ_ТаблицаДвиженияОперации.ЦФО КАК ЦФО,
	|	ВТ_ТаблицаДвиженияОперации.Проект КАК Проект,
	|	ВТ_ТаблицаДвиженияОперации.ПриходРасход КАК ПриходРасход,
	|	ВТ_ТаблицаДвиженияОперации.ДокументПланирования КАК ДокументПланирования,
	//|	ВТ_ТаблицаДвиженияОперации.Период КАК ЖелаемаяДатаОплаты,
	|	ВТ_ТаблицаДвиженияОперации.СтатьяБюджета КАК СтатьяБюджета,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика1 КАК Аналитика1,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика2 КАК Аналитика2,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика3 КАК Аналитика3,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика4 КАК Аналитика4,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика5 КАК Аналитика5,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика6 КАК Аналитика6,
	|	ВТ_ТаблицаДвиженияОперации.Организация КАК Организация,
	|	ВТ_ТаблицаДвиженияОперации.Контрагент КАК Контрагент,
	|	ВТ_ТаблицаДвиженияОперации.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	0 КАК Зарезервировано,
	|	ВТ_ТаблицаДвиженияОперации.Сумма КАК Заявлено
	|ИЗ
	|	ВТ_ТаблицаДвиженияОперации КАК ВТ_ТаблицаДвиженияОперации
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Ссылка,
	|	ВТ_ТаблицаДвиженияОперации.Период,
	|	ВТ_ТаблицаДвиженияОперации.Предназначение,
	|	ВТ_ТаблицаДвиженияОперации.ПериодОтчета,
	|	ВТ_ТаблицаДвиженияОперации.Валюта,
	|	ВТ_ТаблицаДвиженияОперации.ЦФО,
	|	ВТ_ТаблицаДвиженияОперации.Проект,
	|	ВТ_ТаблицаДвиженияОперации.ПриходРасход,
	|	&ДокументПланирования,
	//|	ВТ_ТаблицаДвиженияОперации.Период,
	|	ВТ_ТаблицаДвиженияОперации.СтатьяБюджета,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика1,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика2,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика3,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика4,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика5,
	|	ВТ_ТаблицаДвиженияОперации.Аналитика6,
	|	ВТ_ЗапланированоСИтогами.Организация,
	|	ВТ_ЗапланированоСИтогами.Контрагент,
	|	ВТ_ЗапланированоСИтогами.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА ВТ_ЗапланированоСИтогами.ЗарезервированоОборот1 > ВТ_ТаблицаДвиженияОперации.Сумма
	|			ТОГДА ВТ_ЗапланированоСИтогами.ЗарезервированоОборот1 - ВТ_ЗапланированоСИтогами.ЗарезервированоОборот - ВТ_ТаблицаДвиженияОперации.Сумма
	|		ИНАЧЕ -ВТ_ЗапланированоСИтогами.ЗарезервированоОборот
	|	КОНЕЦ,
	|	0
	|ИЗ
	|	ВТ_ТаблицаДвиженияОперации КАК ВТ_ТаблицаДвиженияОперации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗапланированоСИтогами КАК ВТ_ЗапланированоСИтогами
	|		ПО ВТ_ТаблицаДвиженияОперации.Предназначение = ВТ_ЗапланированоСИтогами.Предназначение
	|			И ВТ_ТаблицаДвиженияОперации.ПериодОтчета = ВТ_ЗапланированоСИтогами.ПериодОтчета
	|			И ВТ_ТаблицаДвиженияОперации.ЦФО = ВТ_ЗапланированоСИтогами.ЦФО
	|			И ВТ_ТаблицаДвиженияОперации.Проект = ВТ_ЗапланированоСИтогами.Проект
	|			И ВТ_ТаблицаДвиженияОперации.СтатьяБюджета = ВТ_ЗапланированоСИтогами.СтатьяБюджета
	|			И ВТ_ТаблицаДвиженияОперации.Аналитика1 = ВТ_ЗапланированоСИтогами.Аналитика1
	|			И ВТ_ТаблицаДвиженияОперации.Аналитика2 = ВТ_ЗапланированоСИтогами.Аналитика2
	|			И ВТ_ТаблицаДвиженияОперации.Аналитика3 = ВТ_ЗапланированоСИтогами.Аналитика3
	|			И ВТ_ТаблицаДвиженияОперации.Аналитика4 = ВТ_ЗапланированоСИтогами.Аналитика4
	|			И ВТ_ТаблицаДвиженияОперации.Аналитика5 = ВТ_ЗапланированоСИтогами.Аналитика5
	|			И ВТ_ТаблицаДвиженияОперации.Аналитика6 = ВТ_ЗапланированоСИтогами.Аналитика6
	|			И ВТ_ТаблицаДвиженияОперации.ПриходРасход = ВТ_ЗапланированоСИтогами.ПриходРасход
	|			И ВТ_ТаблицаДвиженияОперации.Валюта = ВТ_ЗапланированоСИтогами.Валюта
	|ГДЕ
	|	ВТ_ТаблицаДвиженияОперации.Сумма > ВТ_ЗапланированоСИтогами.ЗарезервированоОборот1 - ВТ_ЗапланированоСИтогами.ЗарезервированоОборот";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса1, "ВТ_МатрицаЗаполненностиДоговора");
	ТекстыЗапроса.Добавить(ТекстЗапроса2, "ВТ_МатрицаОтбораПланов");
	ТекстыЗапроса.Добавить(ТекстЗапроса3, "ВТ_ОстаткиПоДокументуПланирования");
	ТекстыЗапроса.Добавить(ТекстЗапроса4, "ВТ_ОстаткиЗапланировано");
	ТекстыЗапроса.Добавить(ТекстЗапроса5, "ВТ_Запланировано");
	ТекстыЗапроса.Добавить(ТекстЗапроса6, "ВТ_ЗапланированоСИтогами");
	ТекстыЗапроса.Добавить(ТекстЗапроса7, ИмяРегистра);
	
КонецПроцедуры
	
Функция ПлатежЗапрещенДирективно(ЗаявкаСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ЗаявкаСсылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Данные.СтатьяДвиженияДенежныхСредств,
	|	РазмещениеЗаявок.Организация,
	|	РазмещениеЗаявок.Контрагент,
	|	РазмещениеЗаявок.ДоговорКонтрагента,
	|	РазмещениеЗаявок.БанковскийСчетКасса КАК СчетОрганизации
	|ПОМЕСТИТЬ ВТ_ДанныеПлатежа
	|ИЗ
	|	РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ДвиженияБюджетированияПоПозициям КАК Данные
	|		ПО РазмещениеЗаявок.ЗаявкаНаОперацию = &Ссылка
	|			И РазмещениеЗаявок.ПриходРасход = Значение(Перечисление.ВидыДвиженийПриходРасход.Расход)
	|			И РазмещениеЗаявок.ИдентификаторПозиции = Данные.ИдентификаторПозиции
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(ВЫБОР
	|				КОГДА ПравилаЗапретаОпераций.ЗапретПлатежей
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ), 0) КАК ЕстьЗапрет
	|ИЗ
	|	ВТ_ДанныеПлатежа КАК ВТ_ДанныеПлатежа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПравилаЗапретаОпераций КАК ПравилаЗапретаОпераций
	|		ПО (ВТ_ДанныеПлатежа.СтатьяДвиженияДенежныхСредств = ПравилаЗапретаОпераций.СтатьяДвиженияДенежныхСредств
	|				ИЛИ ПравилаЗапретаОпераций.СтатьяДвиженияДенежныхСредств = &ПустаяСтатьяДДС)
	|			И (ВТ_ДанныеПлатежа.Организация = ПравилаЗапретаОпераций.Организация
	|				ИЛИ ПравилаЗапретаОпераций.Организация = &ПустаяОрганизация)
	|			И (ВТ_ДанныеПлатежа.Контрагент = ПравилаЗапретаОпераций.Контрагент
	|				ИЛИ ПравилаЗапретаОпераций.Контрагент = &ПустойКонтрагент)
	|			И (ВТ_ДанныеПлатежа.ДоговорКонтрагента = ПравилаЗапретаОпераций.ДоговорКонтрагента
	|				ИЛИ ПравилаЗапретаОпераций.ДоговорКонтрагента = &ПустойДоговор)
	|			И (ВТ_ДанныеПлатежа.СчетОрганизации = ПравилаЗапретаОпераций.СчетОрганизации
	|				ИЛИ ПравилаЗапретаОпераций.СчетОрганизации В (&ПустойБанковскийСчет))";
	
	Запрос.УстановитьПараметр("ПустаяОрганизация", КэшируемыеПроцедурыОПК.ПустаяОрганизация());
	Запрос.УстановитьПараметр("ПустойКонтрагент", КэшируемыеПроцедурыОПК.ПустойКонтрагент());
	Запрос.УстановитьПараметр("ПустойДоговор", КэшируемыеПроцедурыОПК.ПустойДоговор());
	Запрос.УстановитьПараметр("ПустаяСтатьяДДС", КэшируемыеПроцедурыОПК.ПустаяСтатьяДвиженияДенежныхСредств());
	
	ПустойБанковскийСчет = ОбщегоНазначенияКлиентСервер.ЗначениеВМассиве(неопределено);
	ПустойБанковскийСчет.Добавить(КэшируемыеПроцедурыОПК.ПустойБанковскийСчетОрганизации());
	Запрос.УстановитьПараметр("ПустойБанковскийСчет", ПустойБанковскийСчет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат (Выборка.ЕстьЗапрет > 0);
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

#КонецОбласти 

#КонецОбласти

#Область ОтслеживаниеИзмененийРеквизитов
// Процедура - заполняет признак измененности реквизитов, заполняемых по договору ЦФО, Проект, СтатьяБюджета, Аналитика1..6
//
// Параметры:
//  Форма	 - ФормаКлиентскогоПриложения - форма документа ЗаявкаНаРасходованиеДенежныхСредств и ост.
//
Процедура ЗаполнитьИзмененностьРеквизитов(Форма) Экспорт
	
	Объект = Форма.Объект;
	Реквизиты = Форма.РеквизитыДокумента;
	
	Договор = РеквизитЗаявки(Объект, Реквизиты.ДоговорКонтрагента);
	ДанныеБюджетирования = Неопределено;
	Если ЗначениеЗаполнено(Договор) Тогда	
		РеквизитыДоговора = ДоговорыСКонтрагентами.ПолучитьРеквизитыДоговора(Договор);		
		ДанныеБюджетирования = ДанныеБюджетированияПоДокументу(Объект, Договор, РеквизитыДоговора, Реквизиты);
	Иначе
		// если договор не заполнен, то считаем что реквизиты не менялись, чтобы они перезаполнились при выборе договора
	КонецЕсли;
	
	// ЦФО
	ТекущийЦФО = РеквизитЗаявки(Объект, Реквизиты.ЦФО);
	ИзмененЦФО = ?(ДанныеБюджетирования <> Неопределено, 
		НЕ ЗначенияРавны(ТекущийЦФО, ДанныеБюджетирования.ЦФО), Ложь);
	УстановитьИзмененностьРеквизита(Форма, Реквизиты.ЦФО, ИзмененЦФО);
	
	// Проект
	ТекущийПроект = РеквизитЗаявки(Объект, Реквизиты.Проект);	
	ИзмененПроект = ?(ДанныеБюджетирования <> Неопределено, 
		НЕ ЗначенияРавны(ТекущийПроект, ДанныеБюджетирования.Проект), Ложь);
	УстановитьИзмененностьРеквизита(Форма, Реквизиты.Проект, ИзмененПроект);
	
	// Статья бюджета
	РеквизитСтатья = Реквизиты.СтатьяБюджета;
	Если РеквизитСтатья.ЕстьРеквизит Тогда
		Если РеквизитСтатья.РазмещенВТЧ Тогда
			
			Индекс = 0;
			Для Каждого ТекСтрока Из Объект[РеквизитСтатья.ИмяТЧ] Цикл					
				
				Если ДанныеБюджетирования <> Неопределено Тогда
					
					ЗначенияСтатьиАналитик = ДанныеБюджетирования.СтатьиАналитики[Индекс];
					
					ИзмененаСтатьяАналитика = 
						НЕ ЗначенияРавны(РеквизитСтрокиТЧЗаявки(ТекСтрока, Реквизиты.СтатьяБюджета), ЗначенияСтатьиАналитик.СтатьяБюджета)
						ИЛИ НЕ ЗначенияРавны(РеквизитСтрокиТЧЗаявки(ТекСтрока, Реквизиты.Аналитика1), ЗначенияСтатьиАналитик.Аналитика1)
						ИЛИ НЕ ЗначенияРавны(РеквизитСтрокиТЧЗаявки(ТекСтрока, Реквизиты.Аналитика2), ЗначенияСтатьиАналитик.Аналитика2)
						ИЛИ НЕ ЗначенияРавны(РеквизитСтрокиТЧЗаявки(ТекСтрока, Реквизиты.Аналитика3), ЗначенияСтатьиАналитик.Аналитика3)
						ИЛИ НЕ ЗначенияРавны(РеквизитСтрокиТЧЗаявки(ТекСтрока, Реквизиты.Аналитика4), ЗначенияСтатьиАналитик.Аналитика4)
						ИЛИ НЕ ЗначенияРавны(РеквизитСтрокиТЧЗаявки(ТекСтрока, Реквизиты.Аналитика5), ЗначенияСтатьиАналитик.Аналитика5)
                        ИЛИ НЕ ЗначенияРавны(РеквизитСтрокиТЧЗаявки(ТекСтрока, Реквизиты.Аналитика6), ЗначенияСтатьиАналитик.Аналитика6)

				Иначе
						
					ИзмененаСтатьяАналитика = Ложь;
					
				КонецЕсли;
					
				УстановитьИзмененностьРеквизита(ТекСтрока, Реквизиты.СтатьяБюджета, ИзмененаСтатьяАналитика);	
				
				Индекс = Индекс + 1;
			КонецЦикла;
		Иначе
			
			Если ДанныеБюджетирования <> Неопределено Тогда
				
				ЗначенияСтатьиАналитик = ДанныеБюджетирования.СтатьиАналитики[0];
				
				ИзмененаСтатьяАналитика = 
					НЕ ЗначенияРавны(РеквизитЗаявки(Объект, Реквизиты.СтатьяБюджета), ЗначенияСтатьиАналитик.СтатьяБюджета)
					ИЛИ НЕ ЗначенияРавны(РеквизитЗаявки(Объект, Реквизиты.Аналитика1), ЗначенияСтатьиАналитик.Аналитика1)
					ИЛИ НЕ ЗначенияРавны(РеквизитЗаявки(Объект, Реквизиты.Аналитика2), ЗначенияСтатьиАналитик.Аналитика2)
					ИЛИ НЕ ЗначенияРавны(РеквизитЗаявки(Объект, Реквизиты.Аналитика3), ЗначенияСтатьиАналитик.Аналитика3)
					ИЛИ НЕ ЗначенияРавны(РеквизитЗаявки(Объект, Реквизиты.Аналитика4), ЗначенияСтатьиАналитик.Аналитика4)
					ИЛИ НЕ ЗначенияРавны(РеквизитЗаявки(Объект, Реквизиты.Аналитика5), ЗначенияСтатьиАналитик.Аналитика5)
                    ИЛИ НЕ ЗначенияРавны(РеквизитЗаявки(Объект, Реквизиты.Аналитика6), ЗначенияСтатьиАналитик.Аналитика6)
				Иначе
				
				ИзмененаСтатьяАналитика = Ложь;
				
			КонецЕсли;
			
			УстановитьИзмененностьРеквизита(Форма, Реквизиты.СтатьяБюджета, ИзмененаСтатьяАналитика);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

// Процедура устанавливает статьи бюджета для технических операций
Процедура УстановитьСтатьюБюджетаПоВидуОперацииУХ(Объект, Знач Реквизиты = неопределено) Экспорт
	
	//
	Если Реквизиты = неопределено Тогда
		Реквизиты = РеквизитыДокументаЗаявка(ТипЗнч(Объект.Ссылка));
	КонецЕсли;
	
	// 
	РеквизитыСтатья = Новый Соответствие;
	СтатьяБюджета = ВидыОперацийУХВызовСервераПовтИсп.ОсновнаяСтатьяБюджетаПоВидуОперации(Объект.ВидОперацииУХ);
	
	Если РеквизитЗаявки(Объект, Реквизиты.ПриходРасход) = Перечисления.ВидыДвиженийПриходРасход.Расход
		И ВидыОперацийУХВызовСервераПовтИсп.ЭтоПеремещениеВнутриОрганизации(Объект.ВидОперацииУХ) Тогда
		
		// Технические операции (есть и расход и приход). Возможны только для расходных операций 
		СтатьяБюджетаЗачисления = ВидыОперацийУХВызовСервераПовтИсп.ОсновнаяСтатьяБюджетаПоВидуОперации(
			ВидыОперацийУХВызовСервераПовтИсп.ВстречныйВидОперацииУХ(Объект.ВидОперацииУХ));
		РеквизитыСтатья.Вставить(Реквизиты.СтатьяБюджетаСписания, СтатьяБюджета);
		РеквизитыСтатья.Вставить(Реквизиты.СтатьяБюджетаЗачисления, СтатьяБюджетаЗачисления);
	Иначе
		// Обычные операции
		РеквизитыСтатья.Вставить(Реквизиты.СтатьяБюджета, СтатьяБюджета);
	КонецЕсли;
	
	// При наличии табличных частей, чистим их и добавляем строку
	Для Каждого КлючЗначение Из РеквизитыСтатья Цикл
		Реквизит = КлючЗначение.Ключ;
		Если Реквизит.РазмещенВТЧ Тогда
			Объект[Реквизиты.СтатьяБюджета.ИмяТЧ].Очистить();
			НоваяСтрока = Объект[Реквизиты.СтатьяБюджета.ИмяТЧ].Добавить();
			НоваяСтрока.Сумма = РеквизитЗаявки(Объект, Реквизиты.СуммаДокумента);
		КонецЕсли;
	КонецЦикла;
	
	// Установка значений статей бюджета
	Для Каждого КлючЗначение Из РеквизитыСтатья Цикл
		Реквизит = КлючЗначение.Ключ;
		Если Реквизит.РазмещенВТЧ Тогда
			УстановитьРеквизитСтрокиТЧЗаявки(Объект[Реквизит.ИмяТЧ][0], Реквизит, КлючЗначение.Значение);
		ИначеЕсли Реквизит.РазмещенВШапке Тогда
			УстановитьРеквизитЗаявки(Объект, Реквизит, КлючЗначение.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирует для заявок* таблицу лимитов для дальнейшей записи в регистр
Процедура ПодготовитьТаблицуЛимитовПоЗаявке(Объект, Запрос, ТаблицыДляДвижений) Экспорт
	
	Реквизиты = Объект.ДополнительныеСвойства.РеквизитыЗаявки;
	ПланируемаяДатаОперации = РеквизитЗаявки(Объект, Реквизиты.ПланируемаяДатаОперации);
	
	ТаблицаЛимитов = КонтрольЛимитовУХ.ПодготовитьТаблицуЛимитовПоЗаявкеВерсииСоглашения(Запрос, ПланируемаяДатаОперации);
	
	ТаблицыДляДвижений.Вставить("ТаблицаЛимитыПоБюджетам", ТаблицаЛимитов);
	
КонецПроцедуры

Функция ПолучитьПредупрежденияПоЗаявке(ЗаявкаОбъект) Экспорт
	
	Результат = Новый Массив;
	
	ТипЗаявки = ТипЗнч(ЗаявкаОбъект.Ссылка);
	Если НЕ Метаданные.ОпределяемыеТипы.ДокументыПлатежнойПозиции.Тип.СодержитТип(ТипЗаявки)
		ИЛИ НЕ ВстраиваниеОПКПереопределяемый.КонстантаАвтоматическиАктуализироватьЗаявкиПоГрафикамДоговоров() Тогда
		Возврат Результат;
	КонецЕсли;
	
	//
	Если Метаданные.ОпределяемыеТипы.ЗаявкиНаОперации.Тип.СодержитТип(ТипЗаявки) Тогда
		
		Если ЗаявкаОбъект.ЭтоОперацияПоГрафику Тогда
			
			ОписаниеПредупреждения = НовыйОписаниеПредупрежденияПоЗаявке();
			ОписаниеПредупреждения.ВидПредупреждения = "Предупреждение";
			ОписаниеПредупреждения.ТекстПредупреждения = Новый ФорматированнаяСтрока(
					НСтр("ru = 'Заявка сформирована на основании графика платежей. Она будет приведена в соответствие графику при очередной актуализации.'"),,ЦветаСтиля.ПоясняющийТекст);
			Результат.Добавить(ОписаниеПредупреждения);
			
		Иначе
			
			// Объекты документа
			Реквизиты = РеквизитыДокументаЗаявка(ТипЗаявки);
			Договор = РеквизитЗаявки(ЗаявкаОбъект, Реквизиты.ДоговорКонтрагента);
			Если ЗначениеЗаполнено(Договор) И ВстраиваниеОПКПереопределяемый.ПлатежиДоговораПоГрафику(Договор) Тогда
				ОписаниеПредупреждения = НовыйОписаниеПредупрежденияПоЗаявке();
				ОписаниеПредупреждения.ВидПредупреждения = "Предупреждение";
				ОписаниеПредупреждения.ТекстПредупреждения = Новый ФорматированнаяСтрока(
					НСтр("ru = 'Договор имеет график платежей, однако данная заявка сформирована сверх него вручную. Она будет проигнорирована при очередной актуализации.'"),,ЦветаСтиля.ПоясняющийТекст);
				Результат.Добавить(ОписаниеПредупреждения);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭтоЗаявкаНаОперацию(Знач ОбъектИлиТип) Экспорт
	
	Если ОбъектИлиТип = неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектИлиТип) = Тип("Тип") Тогда
		ТипПроверяемогоЗначения = ОбъектИлиТип;
	Иначе
		ТипПроверяемогоЗначения = ТипЗнч(ОбъектИлиТип);
	КонецЕсли;
	
	Возврат Метаданные.ОпределяемыеТипы.ЗаявкиНаОперации.Тип.СодержитТип(ТипПроверяемогоЗначения);
	
КонецФункции

Функция ВладелецСчетаКонтрагента(Форма)
	
	Объект = Форма.Объект;
	Реквизиты = Форма.РеквизитыДокумента;
	
	УказаноЗначение = Ложь;
	Если Объект.ВидОперацииУХ = Справочники.ВидыОперацийУХ.ПереводНаДругойСчетОрганизации
		Или ВидыОперацийУХВызовСервераПовтИсп.ЭтоКонвертацияВалюты(Объект.ВидОперацииУХ) Тогда
		Реквизит = Реквизиты.Организация;
	Иначе
		Если ЗаявкиНаОперацииВстраивание.ВладелецСчетаКонтрагента(Форма, Реквизит) Тогда
			УказаноЗначение = Истина;
		Иначе
			Реквизит = Реквизиты.Контрагент;
		КонецЕсли;
	КонецЕсли;
	
	Если УказаноЗначение = Истина Тогда
		Возврат Реквизит;
	Иначе
		Возврат РеквизитЗаявки(Объект, Реквизит);
	КонецЕсли;
	
КонецФункции

Процедура ОпределитьНаличиеПредопределенныхРолей(Форма) Экспорт
	Объект = Форма.Объект;
	Форма.ЕстьСуперПользователь	= ВстраиваниеОПКПереопределяемый.ЕстьСуперПользователь(Объект.ЦФО);
КонецПроцедуры

Процедура ОбработатьСогласованиеВСоставеРеестра(Форма) Экспорт
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Элементы.РеестрДокументов.Видимость=Ложь;
	
	Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РеестрыДокументовКСогласованиюДокументыКСогласованию.Ссылка.Код,
		|	ПРЕДСТАВЛЕНИЕ(РеестрыДокументовКСогласованиюДокументыКСогласованию.Ссылка.Ответственный) КАК Ответственный,
		|	РеестрыДокументовКСогласованиюДокументыКСогласованию.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.РеестрыСогласуемыхОбъектов.ОбъектыКСогласованию КАК РеестрыДокументовКСогласованиюДокументыКСогласованию
		|ГДЕ
		|	РеестрыДокументовКСогласованиюДокументыКСогласованию.СогласуемыйОбъект = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
		
		Результат = Запрос.Выполнить().Выбрать();
		
		Если Результат.Следующий() Тогда
			
			ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(Элементы, "ГруппаСтатусыСогласования", "Видимость", Ложь);
			ШаблонСообщения = НСтр("ru = 'Согласуется в составе реестра %1, отв.: %2'");
			Элементы.РеестрДокументов.Заголовок = СтрШаблон(ШаблонСообщения, Строка(Результат.Код), Строка(Результат.Ответственный));
			Элементы.РеестрДокументов.Видимость = Истина;
			
			Форма.РеестрДокументов = Результат.Ссылка;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОповещенияФормыЗаявки(Форма, ИмяСобытия, Параметр, ИменаСобытийОбновленияПлатежнойПозиции = "") Экспорт
	
	Если ИмяСобытия = "ОбъектСогласован"
			ИЛИ ИмяСобытия = "ОбъектОтклонен"
			ИЛИ ИмяСобытия = "МаршрутИнициализирован"
			ИЛИ ИмяСобытия = "СостояниеЗаявкиПриИзменении" Тогда
		ОпределитьСостояниеОбъекта(Форма);
	КонецЕсли;
	
	// При наступлении следующих событий выполнять обновление представления платежной позиции
	Если ИменаСобытийОбновленияПлатежнойПозиции <> "" Тогда
		События = СтрРазделить(ИменаСобытийОбновленияПлатежнойПозиции, ",");
		Если События.Найти(ИмяСобытия) <> неопределено Тогда
			ПлатежныеПозиции.ОбновитьПредставлениеПлатежнойПозиции(Форма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьПриоритетПлатежа(Форма) Экспорт
	
	Объект = Форма.Объект;
	Реквизиты = Форма.РеквизитыДокумента;
	
	Объект.Приоритет = ПолучитьПриоритетПлатежа(Объект, Реквизиты);
	
КонецПроцедуры

Функция ПолучитьПриоритетПлатежа(Объект, Реквизиты = неопределено) Экспорт
	
	Если Реквизиты = неопределено Тогда
		Реквизиты = РеквизитыДокументаЗаявка(ТипЗнч(Объект.Ссылка));
	КонецЕсли;
	
	СтатьиБюджета = РеквизитЗаявки(Объект, Реквизиты.СтатьяБюджета);
	Если СтатьиБюджета = неопределено Тогда
		Возврат Справочники.ПриоритетыПлатежей.ПустаяСсылка();
	ИначеЕсли ТипЗнч(СтатьиБюджета) = Тип("Массив") Тогда
		МассивСтатей = СтатьиБюджета;
	Иначе
		// Получение массива статей бюджета.
		МассивСтатей = Новый Массив;
		МассивСтатей.Добавить(СтатьиБюджета);
	КонецЕсли;
	
	// Получение приоритета.
	СтруктураДанных = Справочники.ПриоритетыПлатежей.СформироватьСтруктуруДанныхПолученияПриоритетаПлатежа();
	СтруктураДанных.Организация = РеквизитЗаявки(Объект, Реквизиты.Организация);
	СтруктураДанных.ЦФО = РеквизитЗаявки(Объект, Реквизиты.ЦФО);
	СтруктураДанных.ДоговорКонтрагента = РеквизитЗаявки(Объект, Реквизиты.ДоговорКонтрагента);
	СтруктураДанных.МассивСтатей = МассивСтатей;

	Возврат Справочники.ПриоритетыПлатежей.ПолучитьПриоритетПлатежа(СтруктураДанных);
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура РазместитьАналитикиСтатейБюджетов(Форма, Реквизиты, ПараметрыЭлементов)
	
	Объект = Форма.Объект;
	Реквизиты = Форма.РеквизитыДокумента;
	
	// Данные для создания полей Аналитика* для элементов Статьи бюджетов
	АСБ = АналитикиСтатейБюджетовУХ;
	
	МассивОписанийСтатей = Новый Массив;
	
	Для Каждого КлючЗначение Из Реквизиты.Параметры.РазмещениеАналитикСтатей Цикл
		
		РазмещениеАналитики = КлючЗначение.Значение;
		Реквизит = РазмещениеАналитики.Реквизит;
		
		Если РазмещениеАналитики.ВидРазмещения = "ВКолонкахТаблицы" Тогда
			Если Реквизит.ЕстьРеквизит И Реквизит.РазмещенВТЧ Тогда
				АСБ.СтатьяИАналитикиТабличнойЧастиВТаблицеФормы(МассивОписанийСтатей, 
					Реквизит.ИмяТЧ,  РазмещениеАналитики.ТаблицаЭлемент,
					Реквизит.ИмяРеквизита, РазмещениеАналитики.СтатьяЭлемент,
					РазмещениеАналитики.АналитикаРеквизит, РазмещениеАналитики.АналитикаЭлемент,
					РазмещениеАналитики.РазмещениеЭлементовАналитик);
			КонецЕсли;
		ИначеЕсли РазмещениеАналитики.ВидРазмещения = "ВПоляхФормы" Тогда
			Если Реквизит.ЕстьРеквизит Тогда
				Если Реквизит.РазмещенВТЧ Тогда
					АСБ.СтатьяИАналитикиТабличнойЧастиВПоляхФормы(МассивОписанийСтатей, 
						Реквизит.ИмяТЧ,  РазмещениеАналитики.ТаблицаЭлемент,
						Реквизит.ИмяРеквизита, РазмещениеАналитики.СтатьяЭлемент,
						РазмещениеАналитики.АналитикаРеквизит, РазмещениеАналитики.АналитикаЭлемент,
						РазмещениеАналитики.РазмещениеЭлементовАналитик);
				Иначе
					АСБ.СтатьяИАналитикиОбъектаВПоляхФормы(МассивОписанийСтатей, 
						Реквизит.ИмяРеквизита, РазмещениеАналитики.СтатьяЭлемент,
						РазмещениеАналитики.АналитикаРеквизит, РазмещениеАналитики.АналитикаЭлемент,
						РазмещениеАналитики.РазмещениеЭлементовАналитик);
				КонецЕсли;
					
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Создать элементы формы для статей бюджетов и их аналитик
	Если МассивОписанийСтатей.Количество() > 0 Тогда
		АналитикиСтатейБюджетовУХ.СоздатьСтатьиБюджетовИАналитики(Форма, МассивОписанийСтатей, ПараметрыЭлементов);
		
		Для Каждого ИнфоСтатья Из МассивОписанийСтатей Цикл
		
			// Связь по типу для статей
			Для Каждого КлючЗначение Из ИнфоСтатья.ЭлементыФормы Цикл
				Элемент = Форма.Элементы[КлючЗначение.Ключ];
				Элемент.СвязьПоТипу = Новый СвязьПоТипу("ВидБюджета", 0);
				
				// 
				ПриходРасход = Новый СписокЗначений;
				ПриходРасход.Добавить(Перечисления.ВидыДвиженийПриходРасход.ПустаяСсылка());
				ПриходРасход.Добавить(РеквизитЗаявки(Объект, Реквизиты.ПриходРасход));
				
				ФормыУХ.ДобавитьПараметрВыбора(Элемент, "Отбор.ПриходРасход", ПриходРасход);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

#Область ОбработчикиИзмененияРеквизитовЗаявки

Процедура УстановитьПараметрыВыбораДоговора(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Реквизит = Форма.РеквизитыДокумента.ДоговорКонтрагента;
	Если НЕ Реквизит.ЕстьРеквизит Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементыРеквизита = Форма.РеквизитыДокумента.Параметры.Элементы["ДоговорКонтрагента"];
	Если ЭлементыРеквизита = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = "Отбор.ВидДоговораУХ";
	ДопустимыеВиды = ВидыОперацийУХВызовСервераПовтИсп.ВидыДоговоров(Объект.ВидОперацииУХ);
	Для Каждого ИмяЭлемента Из ЭлементыРеквизита Цикл
		Элемент = Элементы.Найти(ИмяЭлемента);
		Если Элемент = неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДопустимыеВиды.Количество() > 0 Тогда
			ФормыУХ.ДобавитьПараметрВыбора(Элемент, Отбор, Новый ФиксированныйМассив(ДопустимыеВиды));
		Иначе
			ФормыУХ.УдалитьПараметрВыбора(Элемент, Отбор);
		КонецЕсли;
		
		#Область УХ_Встраиваиние
		Если ИмяЭлемента <> "Договор" Тогда
			Продолжить;		                               	
		КонецЕсли; 
		Элемент = Элементы.Найти("ДоговорВозврата");
		Если Элемент = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДопустимыеВиды.Количество() > 0 Тогда
			ФормыУХ.ДобавитьПараметрВыбора(Элемент, Отбор, Новый ФиксированныйМассив(ДопустимыеВиды));
		Иначе
			ФормыУХ.УдалитьПараметрВыбора(Элемент, Отбор);
		КонецЕсли;
		#КонецОбласти 
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

Функция НовыйОписаниеПредупрежденияПоЗаявке()
	Возврат Новый Структура("ВидПредупреждения,ТекстПредупреждения");
КонецФункции

Процедура ОбновитьОтборПоФункциональнымНаправлениям(Форма)
	
	ЦФО = РеквизитЗаявки(Форма.Объект, Форма.РеквизитыДокумента.ЦФО);
	ФункциональныеНаправления = ВстраиваниеОПКВызовСервераПереопределяемый.ФункциональныеНаправленияЦФО(ЦФО);
	
	ИмяПараметраВыбора = "Отбор.ФункциональноеНаправление";
	ПараметрВыбора = Новый ПараметрВыбора(ИмяПараметраВыбора, Новый ФиксированныйМассив(ФункциональныеНаправления));
	
	АналитикиСтатейБюджетовУХ.УстановитьПараметрВыбораДляСтатейБюджетов(Форма, ПараметрВыбора);
	
КонецПроцедуры

Процедура УстановитьАвтора(ЗаявкаОбъект, Автор)
	
	Реквизиты = ЗаявкиНаОперации.РеквизитыДокументаЗаявка(ТипЗнч(ЗаявкаОбъект.Ссылка));
	УстановитьРеквизитЗаявки(ЗаявкаОбъект, Реквизиты.Ответственный, Автор);
	
КонецПроцедуры

Процедура ОпределитьСостояниеОбъекта(Форма, ОбновитьОтветственныхВход = Ложь)
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Форма, "СостояниеЗаявки") Тогда
		ВстраиваниеОПКПереопределяемый.ОпределитьСостояниеЗаявки(Форма, ОбновитьОтветственныхВход);
		УстановитьОформлениеКнопкиОК(Форма);
	Иначе
		// Панель согласования еще не создана.
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОформлениеКнопкиОК(Форма)
	Элементы = Форма.Элементы;
	
	Если Элементы.Найти("КнопкаОК") <> неопределено Тогда
		КнопкаОК = Элементы.КнопкаОК;
	ИначеЕсли Элементы.Найти("ФормаПровестиИЗакрыть") <> неопределено Тогда
		КнопкаОК = Элементы.ФормаПровестиИЗакрыть;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЗаявкиНаОперацииКлиентСервер.РеквизитСостояниеЗаявки(Форма) = Перечисления.СостоянияСогласования.Черновик 
		И ЗначениеЗаполнено(ЗаявкиНаОперацииКлиентСервер.РеквизитСогласующий(Форма)) Тогда 
		КнопкаОК.Заголовок = НСтр("ru = 'На согласование'");
		КнопкаОК.Картинка = БиблиотекаКартинок.Утвердить;
	Иначе
		КнопкаОК.Заголовок = НСтр("ru = 'Провести и закрыть'");
		КнопкаОК.Картинка = Новый Картинка;
	КонецЕсли;
КонецПроцедуры

Процедура УстановитьПроектБюджетодержатель(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	Если НЕ ЗначениеЗаполнено(Объект.Проект) Тогда
		Форма.ПроектБюджетодержатель = Справочники.Проекты.ПустаяСсылка();
		Элементы.ПроектБюджетодержатель.Видимость = Ложь;
	ИначеЕсли ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Проект, "Проект") Тогда
		Форма.ПроектБюджетодержатель = Объект.Проект;
		Элементы.ПроектБюджетодержатель.Видимость = Ложь;
	Иначе
		Форма.ПроектБюджетодержатель= ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Проект, "ПроектЭтапа");
		Элементы.ПроектБюджетодержатель.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

// Установка пиктограммы состояния документа в "стандартном" случае,
// когда на форме есть числовой реквизит СостояниеДокумента.
Процедура УстановитьСостояниеДокумента(Форма)
	Форма.СостояниеДокумента = ВстраиваниеОПКПереопределяемый.СостояниеДокумента(Форма.Объект);
КонецПроцедуры

// Используется в Заявках
Процедура ПроверитьДоговорКонтрагента(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	Реквизиты = Форма.РеквизитыДокумента;
	Если НЕ Реквизиты.ДоговорКонтрагента.ЕстьРеквизит Тогда
		Возврат;
	КонецЕсли;
	
	Договор = РеквизитЗаявки(Объект, Реквизиты.ДоговорКонтрагента);
	Если Не ЗначениеЗаполнено(Договор) Тогда
		Возврат;
	КонецЕсли;
	
	ИменаЭлементовДоговор = Реквизиты.Параметры.Элементы["ДоговорКонтрагента"];
	Если ИменаЭлементовДоговор = неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВидДоговораУХ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ВидДоговораУХ");
	Для Каждого ИмяЭлементаДоговор Из ИменаЭлементовДоговор Цикл
		Если Элементы.Найти(ИмяЭлементаДоговор) = неопределено Тогда
			Продолжить;
		КонецЕсли;
		Элемент = Элементы[ИмяЭлементаДоговор];
		Для Каждого ТекПараметрВыбора Из Элемент.ПараметрыВыбора Цикл
			Если ТекПараметрВыбора.Имя = "Отбор.ВидДоговораУХ" Тогда
				ДоговорСоответствуетОтбору = Истина;
				Если ТипЗнч(ТекПараметрВыбора.Значение) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
					ДоговорСоответствуетОтбору = (ВидДоговораУХ = ТекПараметрВыбора.Значение);
				ИначеЕсли ТипЗнч(ТекПараметрВыбора.Значение) = Тип("ФиксированныйМассив")
					ИЛИ ТипЗнч(ТекПараметрВыбора.Значение) = Тип("Массив") Тогда
					ДоговорСоответствуетОтбору = (ТекПараметрВыбора.Значение.Найти(ВидДоговораУХ) <> Неопределено);
				КонецЕсли;
				
				Если Не ДоговорСоответствуетОтбору Тогда
					УстановитьРеквизитЗаявки(Объект, Реквизиты.ДоговорКонтрагента, КэшируемыеПроцедурыОПК.ПустойДоговор());
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Выводит предупреждения заявки
Процедура ВывестиПредупрежденияЗаявки(Форма)
	
	Объект = Форма.Объект;
	Элементы = Форма.Элементы;
	
	ДанныеПредупреждений = ПолучитьПредупрежденияПоЗаявке(Объект);
	
	Форма.ЕстьПредупреждения = Ложь;
	Форма.ЕстьИнформация = Ложь;
	
	Строки = Новый Массив;
	
	Для Каждого ТекПредупреждение Из ДанныеПредупреждений Цикл
		
		Если ВРЕГ(ТекПредупреждение.ВидПредупреждения) = "ПРЕДУПРЕЖДЕНИЕ" Тогда
			Форма.ЕстьПредупреждения = Истина;
		ИначеЕсли ВРЕГ(ТекПредупреждение.ВидПредупреждения) = "ИНФОРМАЦИЯ" Тогда
			Форма.ЕстьИнформация = Истина;
		КонецЕсли;
		
		Картинка = КартинкаПоВидуПредупреждения(ТекПредупреждение.ВидПредупреждения);
		Строки.Добавить(Картинка);
		Строки.Добавить(" ");
		Строки.Добавить(ТекПредупреждение.ТекстПредупреждения);
		Строки.Добавить(Символы.ПС);
	КонецЦикла;
	
	Если Строки.Количество() Тогда
		Форма.НадписьПредупреждения = Новый ФорматированнаяСтрока(Строки);
		Элементы.НадписьПредупреждения.Видимость = Истина;
	Иначе
		Элементы.НадписьПредупреждения.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

Функция КартинкаПоВидуПредупреждения(ВидПредупреждения)
	
	Если ВРЕГ(ВидПредупреждения) = "ОШИБКА" Тогда
		Возврат БиблиотекаКартинок.СообщениеОПроблемах;
	ИначеЕсли ВРЕГ(ВидПредупреждения) = "ПРЕДУПРЕЖДЕНИЕ" Тогда
		Возврат БиблиотекаКартинок.Предупреждение;
	ИначеЕсли ВРЕГ(ВидПредупреждения) = "ИНФОРМАЦИЯ" Тогда
		Возврат БиблиотекаКартинок.Информация;
	Иначе
		Возврат Новый Картинка;
	КонецЕсли;
	
КонецФункции

Функция СтатьБюджетаПоВидуОперации(ВидОперацииУХ, ВидБюджета)
	
	СтатьяБюджетаПоВидуОперации = ВидыОперацийУХВызовСервераПовтИсп.ОсновнаяСтатьяБюджетаПоВидуОперации(ВидОперацииУХ);
	
	Если ВидБюджета = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияДенежныхСредств Тогда	
		Если ТипЗнч(СтатьяБюджетаПоВидуОперации) <> Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда	
			СтатьяБюджетаПоВидуОперации = Неопределено;
		КонецЕсли;	
		
	ИначеЕсли ВидБюджета = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДоходовИРасходов Тогда
		Если ТипЗнч(СтатьяБюджетаПоВидуОперации) <> Тип("СправочникСсылка.СтатьиДоходовИРасходов") Тогда	
			СтатьяБюджетаПоВидуОперации = Неопределено;
		КонецЕсли;
			
	ИначеЕсли ВидБюджета = Перечисления.ПредназначенияЭлементовСтруктурыОтчета.БюджетДвиженияРесурсов Тогда
		
		Если ТипЗнч(СтатьяБюджетаПоВидуОперации) <> Тип("СправочникСсылка.СтатьиДвиженияРесурсов") Тогда
			
			СтатьяБюджетаПоВидуОперации = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтатьяБюджетаПоВидуОперации;
	
КонецФункции

Процедура ЗаполнитьЭлементСтруктурыЗадолженностиПоДоговору(Объект, Договор, РеквизитыДокумента)
	
	МассивЭлементов = ЗаявкиНаОперацииВызовСервера.ЭлементыСтруктурыЗадолженностиПоДоговору(Договор, Объект.Ссылка);
	Если МассивЭлементов.Количество() >= 1 Тогда 
		ЭлементСтруктурыЗадолженностиПоУмолчанию = МассивЭлементов[0];
	Иначе
		ЭлементСтруктурыЗадолженностиПоУмолчанию = Неопределено;
	КонецЕсли;

	РеквизитСтатья = РеквизитыДокумента.СтатьяБюджета;
    СтрокиРасшифровки = СтрокиРасшифровкиДокумента(Объект, РеквизитСтатья);

	Для каждого Строка ИЗ СтрокиРасшифровки Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ЭлементСтруктурыЗадолженности) 
			ИЛИ МассивЭлементов.Найти(Строка.ЭлементСтруктурыЗадолженности) = Неопределено Тогда
			
			Строка.ЭлементСтруктурыЗадолженности = ЭлементСтруктурыЗадолженностиПоУмолчанию;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция СтрокиРасшифровкиДокумента(Объект, РеквизитСтатья)
	
	Если РеквизитСтатья.ЕстьРеквизит Тогда			
		Если РеквизитСтатья.РазмещенВТЧ Тогда	
			Возврат Объект[РеквизитСтатья.ИмяТЧ];	
		Иначе		
			Возврат ОбщегоНазначенияКлиентСерверУХ.ЗначениеВМассиве(Объект);	
		КонецЕсли;
	КонецЕсли;
		
	Возврат Новый Массив;
	
КонецФункции	

#Область ОтслеживаниеИзмененийРеквизитов

Процедура ЗаполнитьОтслеживаемыеРеквизитыПоДоговору(Форма, Договор, РеквизитыДоговора);
	
	Объект = Форма.Объект;
	Реквизиты = Форма.РеквизитыДокумента;

	ДанныеБюджетирования = ДанныеБюджетированияПоДокументу(Объект, Договор, РеквизитыДоговора, Реквизиты);
	
	УстановитьНеизмененныйРеквизитШапки(Форма, Реквизиты.ЦФО, ДанныеБюджетирования.ЦФО);
	УстановитьНеизмененныйРеквизитШапки(Форма, Реквизиты.Проект, ДанныеБюджетирования.Проект);
	
	РеквизитСтатья = Реквизиты.СтатьяБюджета;
	Если РеквизитСтатья.ЕстьРеквизит 
		И Не ЗначениеЗаполнено(ЗаявкиНаОперации.РеквизитЗаявки(Объект, Реквизиты.ДокументПланирования)) Тогда
		
		ИменаВидовАналитик = АналитикиСтатейБюджетовУХКлиентСервер.РеквизитыАналитикИзШаблона(
			"ВидАналитики%1,ВидАналитики%1Наименование,ВидАналитики%1ТипЗначения,ВидАналитики%1СвязиАналитик,ВидАналитики%1ПараметрыВыбора");
		
		Если РеквизитСтатья.РазмещенВТЧ Тогда
			Индекс = 0;
			Для Каждого ТекСтрока Из Объект[РеквизитСтатья.ИмяТЧ] Цикл					
				
				Если НЕ РеквизитИзменен(ТекСтрока, РеквизитСтатья) Тогда
					
					ЗначенияСтатьиАналитик = ДанныеБюджетирования.СтатьиАналитики[Индекс];		
					Если ЗначениеЗаполнено(ЗначенияСтатьиАналитик.СтатьяБюджета) Тогда
						
						УстановитьРеквизитСтрокиТЧЗаявки(ТекСтрока, Реквизиты.СтатьяБюджета, ЗначенияСтатьиАналитик.СтатьяБюджета);
						УстановитьРеквизитСтрокиТЧЗаявки(ТекСтрока, Реквизиты.Аналитика1, ЗначенияСтатьиАналитик.Аналитика1);
						УстановитьРеквизитСтрокиТЧЗаявки(ТекСтрока, Реквизиты.Аналитика2, ЗначенияСтатьиАналитик.Аналитика2);
						УстановитьРеквизитСтрокиТЧЗаявки(ТекСтрока, Реквизиты.Аналитика3, ЗначенияСтатьиАналитик.Аналитика3);
						УстановитьРеквизитСтрокиТЧЗаявки(ТекСтрока, Реквизиты.Аналитика4, ЗначенияСтатьиАналитик.Аналитика4);
						УстановитьРеквизитСтрокиТЧЗаявки(ТекСтрока, Реквизиты.Аналитика5, ЗначенияСтатьиАналитик.Аналитика5);
						УстановитьРеквизитСтрокиТЧЗаявки(ТекСтрока, Реквизиты.Аналитика6, ЗначенияСтатьиАналитик.Аналитика6);
						
						ВидыАналитик = АналитикиСтатейБюджетовУХ.СтруктураВидовАналитикСтатейБюджетов(ЗначенияСтатьиАналитик.СтатьяБюджета);
						ЗаполнитьЗначенияСвойств(ТекСтрока, ВидыАналитик, ИменаВидовАналитик);
						
					КонецЕсли;
					
					Индекс = Индекс + 1;
				КонецЕсли;
			КонецЦикла;
		Иначе						
			Если НЕ РеквизитИзменен(Форма, РеквизитСтатья) Тогда
				
				ЗначенияСтатьиАналитик = ДанныеБюджетирования.СтатьиАналитики[0];		
				Если ЗначениеЗаполнено(ЗначенияСтатьиАналитик.СтатьяБюджета) Тогда
					
					УстановитьРеквизитЗаявки(Объект, Реквизиты.СтатьяБюджета, ЗначенияСтатьиАналитик.СтатьяБюджета);
					УстановитьРеквизитЗаявки(Объект, Реквизиты.Аналитика1, ЗначенияСтатьиАналитик.Аналитика1);
					УстановитьРеквизитЗаявки(Объект, Реквизиты.Аналитика2, ЗначенияСтатьиАналитик.Аналитика2);
					УстановитьРеквизитЗаявки(Объект, Реквизиты.Аналитика3, ЗначенияСтатьиАналитик.Аналитика3);
					УстановитьРеквизитЗаявки(Объект, Реквизиты.Аналитика4, ЗначенияСтатьиАналитик.Аналитика4);
					УстановитьРеквизитЗаявки(Объект, Реквизиты.Аналитика5, ЗначенияСтатьиАналитик.Аналитика5);
					УстановитьРеквизитЗаявки(Объект, Реквизиты.Аналитика6, ЗначенияСтатьиАналитик.Аналитика6);
					
					ВидыАналитик = АналитикиСтатейБюджетовУХ.СтруктураВидовАналитикСтатейБюджетов(ЗначенияСтатьиАналитик.СтатьяБюджета);
					ЗаполнитьЗначенияСвойств(Форма, ВидыАналитик, ИменаВидовАналитик);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;		
	КонецЕсли;	
	
КонецПроцедуры	

Функция ЗначенияРавны(Значение1, Значение2)
	
	Возврат Значение1 = Значение2 
		ИЛИ (НЕ ЗначениеЗаполнено(Значение1) И НЕ ЗначениеЗаполнено(Значение2));
	
КонецФункции

Функция ДанныеБюджетированияПоДокументу(Объект, Договор, РеквизитыДоговора, РеквизитыДокумента);
	
	ДанныеБюджетирования = Новый Структура("ЦФО, Проект, СтатьиАналитики");
	
	ВидБюджета = РеквизитЗаявки(Объект, РеквизитыДокумента.ВидБюджета);	
	ДанныеПоДоговору = ДоговорыСКонтрагентами.ПолучитьДанныеБюджетирования(Договор, ВидБюджета, РеквизитыДоговора);
	ЗаполнитьЗначенияСвойств(ДанныеБюджетирования, ДанныеПоДоговору, "ЦФО, Проект");
	
	//* Статья и аналитики
	СтатьяБюджетаПоВидуОперации = СтатьБюджетаПоВидуОперации(Объект.ВидОперацииУХ, ВидБюджета);		
	НаправлениеДвижения = РеквизитЗаявки(Объект, РеквизитыДокумента.ПриходРасход);
	
	СтатьиДДСПоДоговору = ЗаявкиНаОперацииВызовСервера.СтатьиДДСПоДоговору(Договор, НаправлениеДвижения);
	
	МассивСтатейАналитик = Новый Массив;	
	
	СтрокиРасшифровки = СтрокиРасшифровкиДокумента(Объект, РеквизитыДокумента.СтатьяБюджета);
	Для Каждого ТекСтрока Из СтрокиРасшифровки Цикл					
		
		ЗначенияСтатьиАналитик = Новый Структура("СтатьяБюджета, 
		|Аналитика1, Аналитика2, Аналитика3, Аналитика4, Аналитика5, Аналитика6");
		
		Если ЗначениеЗаполнено(ДанныеПоДоговору.СтатьяБюджета) Тогда
			ЗаполнитьЗначенияСвойств(ЗначенияСтатьиАналитик, ДанныеПоДоговору);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЗначенияСтатьиАналитик.СтатьяБюджета)
			И ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ТекСтрока, "ЭлементСтруктурыЗадолженности") Тогда		
			
			НайдСтрокаСтатьи = СтатьиДДСПоДоговору.Найти(ТекСтрока.ЭлементСтруктурыЗадолженности, "ЭлементСтруктурыЗадолженности");
			Если НайдСтрокаСтатьи <> Неопределено Тогда
				ЗначенияСтатьиАналитик.СтатьяБюджета = НайдСтрокаСтатьи.СтатьяБюджета;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЗначенияСтатьиАналитик.СтатьяБюджета) Тогда
			ЗначенияСтатьиАналитик.СтатьяБюджета = СтатьяБюджетаПоВидуОперации;
		КонецЕсли;
		
		МассивСтатейАналитик.Добавить(ЗначенияСтатьиАналитик);
		
	КонецЦикла;
		
	ДанныеБюджетирования.СтатьиАналитики = МассивСтатейАналитик;
	
	Возврат ДанныеБюджетирования;
	
КонецФункции

Процедура ДобавитьРеквизитОтслеживанияИзменений(Реквизиты, РеквизитЗаявки)
	
	НовыйРеквизит = НовыйРеквизитОтслеживанияИзменений(РеквизитЗаявки);
	Если НовыйРеквизит <> Неопределено Тогда
		Реквизиты.Добавить(НовыйРеквизит);
	КонецЕсли;
	
КонецПроцедуры

Функция НовыйРеквизитОтслеживанияИзменений(РеквизитЗаявки)
	
	ИмяРеквизитаОтслеживанияИзменений = ИмяРеквизитаОтслеживанияИзменений(РеквизитЗаявки.ИмяРеквизита); 
	
	Если РеквизитЗаявки.ЕстьРеквизит Тогда
		Если РеквизитЗаявки.РазмещенВТЧ Тогда
			Возврат Новый РеквизитФормы(ИмяРеквизитаОтслеживанияИзменений, Новый ОписаниеТипов("Булево"), 
				"Объект." + РеквизитЗаявки.ИмяТЧ);
		Иначе
			Возврат Новый РеквизитФормы(ИмяРеквизитаОтслеживанияИзменений, Новый ОписаниеТипов("Булево"));
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

Функция ИмяРеквизитаОтслеживанияИзменений(ИмяРеквизитаЗаявки)
	Возврат "_Изменен_" + ИмяРеквизитаЗаявки;
КонецФункции

Процедура УстановитьНеизмененныйРеквизитШапки(Форма, Реквизит, Значение)
	
	Объект = Форма.Объект;
	Если НЕ РеквизитИзменен(Форма, Реквизит) Тогда
		УстановитьРеквизитЗаявки(Объект, Реквизит, Значение);
	КонецЕсли;
	
КонецПроцедуры

Функция РеквизитИзменен(ДанныеОтслеживания, РеквизитЗаявки)
	
	Если НЕ РеквизитЗаявки.ЕстьРеквизит Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИмяРеквизитаОтслеживания = ИмяРеквизитаОтслеживанияИзменений(РеквизитЗаявки.ИмяРеквизита);	
	Возврат ДанныеОтслеживания[ИмяРеквизитаОтслеживания]; // Булево - признак ручного изменения реквизита
	
КонецФункции

Процедура УстановитьИзмененностьАналитикиСтатьи(Форма, ИмяЭлемента, Изменен)
	
	ОписаниеФормы = Форма.ОписаниеФормы;
	ОписаниеЭлементаАналитики = ОписаниеФормы.АналитикиСтатейБюджетов[ИмяЭлемента];
	ИмяЭлементаСтатьи = ОписаниеЭлементаАналитики.СтатьяБюджета;
	
	// если изменена аналитика, то статью тоже не перезаполняем и все другие аналитики
	УстановитьИзмененностьСтатьи(Форма, ИмяЭлементаСтатьи, Изменен);
	
КонецПроцедуры

Процедура УстановитьИзмененностьСтатьи(Форма, ИмяЭлемента, Изменен)

	РеквизитыДокумента = Форма.РеквизитыДокумента;
	РазмещениеСтатьи = РеквизитыДокумента.Параметры.РазмещениеАналитикСтатей[ИмяЭлемента];
	РеквизитСтатьи = РазмещениеСтатьи.Реквизит;
	
	ОтслеживаемыйРеквизитСтатьи = РеквизитыДокумента.СтатьяБюджета;	
	Если НЕ РеквизитСтатьи.ЗначениеТекст = ОтслеживаемыйРеквизитСтатьи.ЗначениеТекст Тогда // "ДвиженияОперации.СтатьяДвиженияДенежныхСредств"
		Возврат; // не отслеживаем
	КонецЕсли;
	
	Если РеквизитСтатьи.ЕстьРеквизит Тогда
		
		Если РеквизитСтатьи.РазмещенВТЧ Тогда
			ТекущаяСтрока = Форма.Элементы[РазмещениеСтатьи.ТаблицаЭлемент].ТекущаяСтрока;
			ДанныеОтслеживания = Форма.Объект[РеквизитСтатьи.ИмяТЧ].НайтиПоИдентификатору(ТекущаяСтрока); // в строке таблицы
		Иначе
			ДанныеОтслеживания = Форма;
		КонецЕсли;
		
		УстановитьИзмененностьРеквизита(ДанныеОтслеживания, РеквизитСтатьи, Изменен);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьИзмененностьРеквизита(ДанныеОтслеживания, РеквизитЗаявки, знач Изменен)
	
	Если НЕ РеквизитЗаявки.ЕстьРеквизит Тогда
		Возврат;
	КонецЕсли;
	
	ИмяРеквизитаОтслеживания = ИмяРеквизитаОтслеживанияИзменений(РеквизитЗаявки.ИмяРеквизита);
	ДанныеОтслеживания[ИмяРеквизитаОтслеживания] = Изменен;
	
КонецПроцедуры

#КонецОбласти

Функция ПроверитьВидОперацииУХ(ВидОперацииУХ, БюджетОперацииУХ, ПриходРасходОперацииУХ)

	Запрос 			= Новый Запрос;
	Запрос.Текст 	= 
		"ВЫБРАТЬ
		|	ВидыОперацийУХ.ВидБюджета КАК ВидБюджета,
		|	ВидыОперацийУХ.ПриходРасход КАК ПриходРасход,
		|	ВидыОперацийУХ.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВидыОперацийУХ КАК ВидыОперацийУХ
		|ГДЕ
		|	ВидыОперацийУХ.Ссылка = &Ссылка
		|	И ВидыОперацийУХ.ВидБюджета = &ВидБюджета
		|	И ВидыОперацийУХ.ПриходРасход = &ПриходРасход";
	
	Запрос.УстановитьПараметр("ВидБюджета", 		БюджетОперацииУХ);
	Запрос.УстановитьПараметр("ПриходРасход", 		ПриходРасходОперацииУХ);
	Запрос.УстановитьПараметр("Ссылка", 			ВидОперацииУХ);
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции // ()

#КонецОбласти
