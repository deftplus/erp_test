#Область РаботаСФормами


Процедура ОткрытьФормуНоменклатурыСтрокиКроссТаблицы(
									РеквизитФормыКроссТаблица,
									ИдентификаторСтроки,
									ФормаВладелец) Экспорт
	ТекДанные = РеквизитФормыКроссТаблица.НайтиПоИдентификатору(
		ИдентификаторСтроки);
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФормуНоменклатуры(
		ТекДанные.Номенклатура,
		ФормаВладелец);
КонецПроцедуры

Процедура ОткрытьФормуНоменклатуры(Номенклатура, ФормаВладелец) Экспорт
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Если ТипЗнч(Номенклатура) =
				Тип("СправочникСсылка.ТоварныеКатегории") Тогда
			ИмяФормыДляОткрытия = "Справочник.ТоварныеКатегории.ФормаОбъекта";
		Иначе
			ИмяФормыДляОткрытия = "Справочник.Номенклатура.ФормаОбъекта";
		КонецЕсли;
		ПараметрыФормы = Новый Структура("Ключ", Номенклатура);
		ОткрытьФорму(
			ИмяФормыДляОткрытия, 
			ПараметрыФормы, 
			ФормаВладелец,
			,
			,
			,
			, 
			РежимОткрытияОкнаФормы.Независимый);
	КонецЕсли;
КонецПроцедуры

// Открывает форму подбора строк плана поставки по договорам.
//
// Параметры:
//  ОбъектЗаполнения - Документ|Структура - должен содержать реквизиты:
//										- Дата;
//										- Ссылка;
//										- Договор|ДоговорКонтрагента;
//										- МестоПоставки;
//										- Валюта|ВалютаДокумента.
//  ЭлементФормы - ПолеФормы - поле, которое будет обрабатывать событие 
//		ОбработкаВыбора.
//
Процедура ОткрытьФормуПодбораИзПланаПоставок(ОбъектЗаполнения, ЭлементФормы) Экспорт
	флЕстьРеквизитДоговорКонтрагента = 
		ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
			ОбъектЗаполнения, "ДоговорКонтрагента");
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("Дата", ОбъектЗаполнения.Дата);
	ПараметрыОтбора.Вставить("Ссылка", ОбъектЗаполнения.Ссылка);
	ПараметрыОтбора.Вставить("Договор", ОбъектЗаполнения[
		?(флЕстьРеквизитДоговорКонтрагента, "ДоговорКонтрагента", "Договор")]);
		Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(
										ОбъектЗаполнения, "МестоПоставки") Тогда
		ПараметрыОтбора.Вставить("МестоПоставки", ОбъектЗаполнения.МестоПоставки);
	КонецЕсли;
	ПараметрыОтбора.Вставить("Валюта",
		ЦентрализованныеЗакупкиКлиентСерверУХ.ПолучитьВалютуДокумента(
			ОбъектЗаполнения));
	ОткрытьФорму(
		"Обработка.ПодборИзПланаПоставок.Форма",
		ПараметрыОтбора, 
		ЭлементФормы,
		,
		,
		,
		, 
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

Процедура ОбработчикЕдиницаИзмеренияНачалоВыбора(ТекДанные, ДанныеВыбора) Экспорт
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	мЕдиницИзмерения = ЦентрализованныеЗакупкиВызовСервераУХ.ПолучитьМассивЕдиницИзмеренияНоменклатуры(ТекДанные.Номенклатура);
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(мЕдиницИзмерения);
КонецПроцедуры

Процедура ОбработчикНоменклатураНачалоВыбора(ТекДанные, ДанныеВыбора) Экспорт
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекДанные.НоменклатураИсходная) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ДанныеВыбора = Новый СписокЗначений;
		ДанныеВыбора.Добавить(ТекДанные.НоменклатураИсходная);
	
		Возврат;
		
	КонецЕсли;
	
	мНоменклатуры = ЦентрализованныеЗакупкиВызовСервераУХ.МассивНоменклатурыПоТоварнойКатегории(ТекДанные.НоменклатураИсходная);
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(мНоменклатуры);
	
КонецПроцедуры

// У формы должен быть реквизит "ТипНоменклатуры"
Процедура ЗафиксироватьТипНоменклатуры(Форма, ИмяКнопкиФиксации, ИмяКолонкиНоменклатура) Экспорт
	КнопкаФиксации = Форма.Элементы[ИмяКнопкиФиксации];
	КолонкаНоменклатуры = Форма.Элементы[ИмяКолонкиНоменклатура];
	
	ДопПараметры = Новый Структура("Форма, ИмяКнопкиФиксации, ИмяКолонкиНоменклатура",
			Форма, ИмяКнопкиФиксации, ИмяКолонкиНоменклатура);
			
	УжеЗафиксирован = КнопкаФиксации.Пометка;
	Если УжеЗафиксирован Тогда
		// Сбрасываем зафиксированные значения
		ОбработатьВыборТипаНоменклатуры(Неопределено, ДопПараметры);
		
	Иначе
		// Запускаем выбор типа номенклатуры
		СписокТипов = Новый СписокЗначений;
		СписокТипов.Добавить(Тип("СправочникСсылка.Номенклатура"));
		СписокТипов.Добавить(Тип("СправочникСсылка.ТоварныеКатегории"));
		
		ОбработкаВыбораТипаНоменклатуры = Новый ОписаниеОповещения(
			"ОбработатьВыборТипаНоменклатуры",
			ЦентрализованныеЗакупкиКлиентУХ,
			ДопПараметры);
		
		СписокТипов.ПоказатьВыборЭлемента(ОбработкаВыбораТипаНоменклатуры, НСтр("ru = 'Выбор типа номенклатуры'"));
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьВыборТипаНоменклатуры(ВыбранТипНоменклатуры, ДопПараметры) Экспорт
	Форма = ДопПараметры.Форма;
	КнопкаФиксации = Форма.Элементы[ДопПараметры.ИмяКнопкиФиксации];
	КолонкаНоменклатуры = Форма.Элементы[ДопПараметры.ИмяКолонкиНоменклатура];
	
	Если ВыбранТипНоменклатуры = Неопределено Тогда
		Форма.ТипНоменклатуры = Неопределено;
		КолонкаНоменклатуры.ВыбиратьТип = Истина;
		
		КнопкаФиксации.Заголовок = НСтр("ru = 'Тип номенклатуры: [любой]'");
		КнопкаФиксации.Пометка = Ложь;
		
	Иначе
		Форма.ТипНоменклатуры = ВыбранТипНоменклатуры.Значение;
		КолонкаНоменклатуры.ВыбиратьТип = Ложь;
		
		ПредставлениеТипа = "";
		Если ВыбранТипНоменклатуры.Значение = Тип("СправочникСсылка.Номенклатура") Тогда
			ПредставлениеТипа = НСтр("ru = 'Номенклатура'");
		Иначе
			ПредставлениеТипа = НСтр("ru = 'Товарная категория'");
		КонецЕсли;
		ТекстЗаголовка = НСтр("ru = 'Тип номенклатуры: [%ПредставлениеТипа%]'");
		ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ПредставлениеТипа%", ПредставлениеТипа);
		КнопкаФиксации.Заголовок = ТекстЗаголовка;
		КнопкаФиксации.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область ТиповыеОбработчикиСобытийКроссТаблицыПотребностей


Процедура ТиповойОбработчикНоменклатураПриИзменении(
									Форма,
									Контекст) Экспорт
	СтрокаТаблицы = Форма.Элементы[
		Контекст.ПараметрыВывода.ЭлементФормыКроссТаблицы].ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
		СтрокаТаблицы.ЭтоКатегорияНоменклатуры =
			(ТипЗнч(СтрокаТаблицы.Номенклатура) =
				Тип("СправочникСсылка.ТоварныеКатегории"));
		Если СтрокаТаблицы.ЭтоКатегорияНоменклатуры Тогда
			СтрокаТаблицы.Цена = 0;
			ЦентрализованныеЗакупкиКлиентСерверУХ.ОбнулитьКоличествоСтрокиКроссТаблицы(
				Форма[Контекст.ИмяТаблицыПериодов],
				СтрокаТаблицы);
			СтрокаТаблицы.Характеристика = Неопределено;
			СтрокаТаблицы.ХарактеристикиИспользуются = Ложь;
		Иначе
			СтруктураДействий = Новый Структура;
			СтруктураДействий.Вставить("УстановитьХарактеристику");
			СтруктураДействий.Вставить("УстановитьЦену");
			СтруктураДействий.Вставить("УстановитьЕдиницуИзменения");
			СтруктураДействий.Вставить("УстановитьКоэффициентЕдиницыИзмерения");
			СтруктураДействий.Вставить("УстановитьСтавкуНДС");
			ЦентрализованныеЗакупкиКлиентСерверУХ.ОбработатьСтрокуТЧ(
				Контекст.Изменяемый.Объект, 
				СтрокаТаблицы, 
				Форма[Контекст.ИмяТаблицыПериодов],
				СтруктураДействий);
		КонецЕсли;
		ЦентрализованныеЗакупкиКлиентСерверУХ.ОбработатьИзменениеЦеныКроссТаблицы(
			Контекст.Изменяемый.Объект.ЦенаВключаетНДС, 
			Форма[Контекст.ИмяТаблицыПериодов],
			СтрокаТаблицы);
	КонецЕсли;
КонецПроцедуры

Процедура ТиповойОбработчикХарактеристикаПриИзменении(
									Форма,
									Контекст) Экспорт
	СтрокаТаблицы = Форма.Элементы[
		Контекст.ПараметрыВывода.ЭлементФормыКроссТаблицы].ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("УстановитьЦену");
		ЦентрализованныеЗакупкиКлиентСерверУХ.ОбработатьСтрокуТЧ(
			Контекст.Изменяемый.Объект, 
			СтрокаТаблицы, 
			Форма[Контекст.ИмяТаблицыПериодов],
			СтруктураДействий);
		ЦентрализованныеЗакупкиКлиентСерверУХ.ОбработатьИзменениеЦеныКроссТаблицы(
			Контекст.Изменяемый.Объект.ЦенаВключаетНДС, 
			Форма[Контекст.ИмяТаблицыПериодов],
			СтрокаТаблицы);
	КонецЕсли;
КонецПроцедуры

Процедура ТиповойОбработчикЕдиницаИзмеренияПриИзменении(
												Форма,
												Контекст) Экспорт
	СтрокаТаблицы = Форма.Элементы[
		Контекст.ПараметрыВывода.ЭлементФормыКроссТаблицы].ТекущиеДанные;
	СтруктураДействий = Новый Структура;
	СтруктураДействий.Вставить("УстановитьКоэффициентЕдиницыИзмерения");
	СтруктураДействий.Вставить("ПересчитатьПоКоэффициенту");
	ЦентрализованныеЗакупкиКлиентСерверУХ.ОбработатьСтрокуТЧ(
		Контекст.Изменяемый.Объект, 
		СтрокаТаблицы, 
		Форма[Контекст.ИмяТаблицыПериодов],
		СтруктураДействий);
	ЦентрализованныеЗакупкиКлиентСерверУХ.ОбработатьИзменениеЦеныКроссТаблицы(
		Контекст.Изменяемый.Объект.ЦенаВключаетНДС, 
		Форма[Контекст.ИмяТаблицыПериодов], 
		СтрокаТаблицы);
КонецПроцедуры

Процедура ТиповойОбработчикЦенаПриИзменении(Форма,
											Контекст) Экспорт
	СтрокаТаблицы = Форма.Элементы[
		Контекст.ПараметрыВывода.ЭлементФормыКроссТаблицы].ТекущиеДанные;
	ЦентрализованныеЗакупкиКлиентСерверУХ.ОбработатьИзменениеЦеныКроссТаблицы(
		Контекст.Изменяемый.Объект.ЦенаВключаетНДС,
		Форма[Контекст.ИмяТаблицыПериодов],
		СтрокаТаблицы);
КонецПроцедуры

Процедура ТиповойОбработчикСтавкаНДСПриИзменении(Форма,
												 Контекст) Экспорт
	СтрокаТаблицы = Форма.Элементы[
		Контекст.ПараметрыВывода.ЭлементФормыКроссТаблицы].ТекущиеДанные;
	ЦентрализованныеЗакупкиКлиентСерверУХ.ОбработатьИзменениеЦеныКроссТаблицы(
		Контекст.Изменяемый.Объект.ЦенаВключаетНДС,
		Форма[Контекст.ИмяТаблицыПериодов],
		СтрокаТаблицы);
КонецПроцедуры

Процедура ТиповойОбработчикПриИзмененииКоличестваКолонки(
											Форма,
											Контекст,
											ИмяКолонки) Экспорт
	ОписаниеКолонки = 
		ЦентрализованныеЗакупкиКлиентСерверУХ.ПолучитьОписаниеКолонкиКроссТаблицы(
			ИмяКолонки);
	Если ОписаниеКолонки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтрокаТаблицы = Форма.Элементы[
		Контекст.ПараметрыВывода.ЭлементФормыКроссТаблицы].ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено Тогда
		ЦентрализованныеЗакупкиКлиентСерверУХ.ПересчитатьСуммуСтрокиКолонкиОтЦеныИКоличества(
			СтрокаТаблицы,
			ОписаниеКолонки.УИДПериода,
			Контекст.Изменяемый.Объект.ЦенаВключаетНДС);
		ЦентрализованныеЗакупкиКлиентСерверУХ.ПриИзмененииКоличестваСуммыСтроки(
			Контекст.Изменяемый.Объект.ЦенаВключаетНДС,
			Форма[Контекст.ИмяТаблицыПериодов], 
			СтрокаТаблицы);
	КонецЕсли;
КонецПроцедуры

Процедура ТиповойОбработчикПриИзмененииЦеныКолонки(
											Форма,
											Контекст,
											ИмяКолонки) Экспорт

КонецПроцедуры

Процедура ТиповойОбработчикПриИзмененииСуммыКолонки(
											Форма,
											Контекст,
											ИмяКолонки) Экспорт
	ОписаниеКолонки = 
		ЦентрализованныеЗакупкиКлиентСерверУХ.ПолучитьОписаниеКолонкиКроссТаблицы(
			ИмяКолонки);
	Если ОписаниеКолонки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТаблицаПотребностей = Форма.Элементы[
		Контекст.ПараметрыВывода.ЭлементФормыКроссТаблицы];
	СтрокаТаблицы = ТаблицаПотребностей.ТекущиеДанные;
	Если СтрокаТаблицы <> Неопределено 
		 И СтрокаТаблицы.ЭтоКатегорияНоменклатуры Тогда
		ЦентрализованныеЗакупкиКлиентСерверУХ.ПриИзмененииКоличестваСуммыСтроки(
			Контекст.Изменяемый.Объект.ЦенаВключаетНДС,
			Форма[Контекст.ИмяТаблицыПериодов], 
			СтрокаТаблицы);
	КонецЕсли;
КонецПроцедуры
	

#КонецОбласти


#Область ВерсионированиеОбъектовДляЕИС


Функция ПрефиксИменОбъектовВерсионированияЕИС() Экспорт
	Возврат "УХ_ЦУЗ_";
КонецФункции

Процедура ДобавитьВерсиюОбъектаДляЕИС(Ссылка, Форма) Экспорт
	Если ЗначениеЗаполнено(Ссылка) Тогда
		Префикс_ = ПрефиксИменОбъектовВерсионированияЕИС();
		КнопкаРедактирования = Форма.Элементы[Префикс_+"ДобавитьВерсиюОбъектаДляЕИС"];
		Если КнопкаРедактирования.Картинка = БиблиотекаКартинок.ЗанятьФайл Тогда
			// Вводим обоснование и разблокируем объект
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("Форма", Форма);
			ДопПараметры.Вставить("Ссылка", Ссылка);
			ДопПараметры.Вставить("КнопкаРедактирования", КнопкаРедактирования);

			ОписаниеОповещенияОВводеОбоснования = Новый ОписаниеОповещения(
				"ОбработатьВводОбоснованияИзмененияОбъекта",
				ЦентрализованныеЗакупкиКлиентУХ,
				ДопПараметры);
			ПоказатьВводСтроки(ОписаниеОповещенияОВводеОбоснования, "",
								НСтр("ru = 'Введите обоснование изменений'"),, Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьВводОбоснованияИзмененияОбъекта(ОбоснованиеИзменений, ДопПараметры = Неопределено) Экспорт
	Если ПустаяСтрока(ОбоснованиеИзменений) Тогда
	    Возврат;
	КонецЕсли;
	
	ОбоснованиеИзменений = СокрЛП(ОбоснованиеИзменений);
	
	Если (ДопПараметры.Форма <> Неопределено) И ЗначениеЗаполнено(ДопПараметры.Ссылка) Тогда
		
		НомерНовойВерсии = ЦентрализованныеЗакупкиВызовСервераУХ.ДобавитьВерсиюОбъектаДляЕИС(ДопПараметры.Ссылка, ОбоснованиеИзменений);
		Если НомерНовойВерсии = 0 Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Не удалось создать новую версию объекта'");
			Сообщение.Сообщить();
			Возврат;
		КонецЕсли;
		
		// Меняем картинку кнопки блокировки
		КнопкаРедактирования = ДопПараметры.КнопкаРедактирования;
		КнопкаРедактирования.Картинка = БиблиотекаКартинок.ОсвободитьФайл;
		КнопкаРедактирования.Доступность = Ложь;
		КнопкаРедактирования.Заголовок = "";
		КнопкаРедактирования.Отображение = ОтображениеКнопки.Картинка;
		
		// Разрешаем редактирование формы
		ДопПараметры.Форма.ТолькоПросмотр = Ложь;
		
		ЦентрализованныеЗакупкиКлиентСерверУХ.ОбновитьВерсиюДляЕИС(ДопПараметры.Форма.Объект.Ссылка, ДопПараметры.Форма);
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаОповещенияОбИзмененииВерсииДляЕИС(Форма, ИмяСобытия, Параметр, Источник) Экспорт
	Если ИмяСобытия = "ОбновленаВерсияДляЕИС" Тогда
		ЦентрализованныеЗакупкиКлиентСерверУХ.ОбновитьВерсиюДляЕИС(Форма.Объект.Ссылка, Форма);
	КонецЕсли;
КонецПроцедуры



#КонецОбласти


#Область РедактированиеУИДовДляЕИС


// Спросить у пользователя УИД и установить его
//  в качестве реквизита УИД_ЕИС объекта.
//
// Параметры:
//  Объект - СправочникОбъект.Лоты | 
//			 ДокументОбъект.ПрограммаЗакупок - ссылка на объект для установки УИД.
//  ОписаниеОповещения - ОписаниеОповещения - если передать, то будет вызвано,
//			после завершения ввода и установки УИД (в любом случае, ввел
//			 пользователь УИД или отказался).
//
Процедура РедактироватьУИДОбъекта(Объект, Подсказка, ОписаниеОповещения=Неопределено) Экспорт
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Объект", Объект);
	ДопПараметры.Вставить("ОписаниеОповещения", ОписаниеОповещения);
	ОповещениеОбработатьВВодУИД = Новый ОписаниеОповещения(
											"ОбработатьВВодУИД",
											ЭтотОбъект,
											ДопПараметры);
	Если НЕ ЗначениеЗаполнено(Подсказка) Тогда
		Подсказка = НСтр("ru = 'Введите УИД'");
	КонецЕсли;
	ПоказатьВводСтроки(
		ОповещениеОбработатьВВодУИД,
		"",
		Подсказка,
		36,
		Ложь);
КонецПроцедуры

// Установить УИД объекта в его исходное значение.
//
Процедура УстановитьСтандартныйУИД(Объект) Экспорт
	Объект.УИД_ЕИС = Строка(Объект.Ссылка.УникальныйИдентификатор()); //ЦентрализованныеЗакупкиВызовСервераУХ.ПолучитьСтандартныйУИД(Объект);
КонецПроцедуры

// Служебная функция обработки ввода УИД и установки его для объекта.
//
Процедура ОбработатьВВодУИД(СтрокаУИД, ДопПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(ДопПараметры) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ПустаяСтрока(СтрокаУИД) Тогда
		Попытка
			УИД = Новый УникальныйИдентификатор(СтрокаУИД)
		Исключение
		КонецПопытки;
		Если НЕ ЗначениеЗаполнено(УИД) 
				ИЛИ Строка(УИД) <> СтрокаУИД Тогда
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = НСтр("ru = 'Неверный формат УИД'");
			Сообщение.Сообщить();
		Иначе
			ДопПараметры.Объект.УИД_ЕИС = СтрокаУИД;
		КонецЕсли;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДопПараметры.ОписаниеОповещения) Тогда
		ВыполнитьОбработкуОповещения(ДопПараметры.ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти


#Область ТиповыеОбработчикиКоманд


// Выводит на экран табличный документ протокола закупки.
//
// Параметры:
//  ПротоколСсылка - ДокументСсылка - протокол для печати.
//
Процедура ТиповаяПечатьПротоколаЗакупкиПоДокументу(ПротоколСсылка) Экспорт
	ПечатнаяФорма =
		ЦентрализованныеЗакупкиВызовСервераУХ.ТиповойСформироватьПечатнуюФормуПротоколаЗакупкиПоДокументу(
			ПротоколСсылка);
	Если ПечатнаяФорма <> Неопределено Тогда
		Печатнаяформа.Показать("Протокола выбора победителей",ПечатнаяФорма);
	КонецЕсли;
КонецПроцедуры

// Выводит на экран табличный документ протокола закупки.
//
// Параметры:
//  ЗакупочнаяПроцедура - СправочникСсылка.ЗакупочныеПроцедуры - закупка,
//				по которой определяется протокол.
//  ТипПротокола - Строка - какой протокол искать. Варианты:
//			- ИтоговыйПротокол - протокол выбора поставщиков;
//			- ПротоколОтмены - протокол отмены закупки;
//			- КвалификацияПоставщика - протокол квалицикации поставщика;
//			- ПротоколКвалификации - итоговый протокол квалификации
//					по закупочной процедуре.
//
Процедура ТиповаяПечатьПротоколаЗакупкиПоТипу(ЗакупочнаяПроцедура,
											  ТипПротокола) Экспорт
	ПечатнаяФорма =
		ЦентрализованныеЗакупкиВызовСервераУХ.ТиповойСформироватьПечатнуюФормуПротоколаЗакупкиПоТипу(
			ЗакупочнаяПроцедура,
			ТипПротокола);
	Если ПечатнаяФорма <> Неопределено Тогда
		Печатнаяформа.Показать(ПечатнаяФорма);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти
