#Область ПрограммныйИнтерфейс

Процедура ЗаменитьЗначениеИзмеренияВРегистрахСведений(ИмяРегистра, ИмяИзмерения, СтароеЗначение, НовоеЗначение) Экспорт
	
	НачатьТранзакцию();
	Попытка
		НаборЗаписейИсходный = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
		НаборЗаписейИсходный.Отбор[ИмяИзмерения].Установить(СтароеЗначение);
		НаборЗаписейИсходный.Прочитать();
		
		Если НаборЗаписейИсходный.Количество() Тогда
		
			НаборЗаписейНовый = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
			НаборЗаписейНовый.Отбор[ИмяИзмерения].Установить(НовоеЗначение);
			НаборЗаписейНовый.Прочитать();
			
			Для Каждого ТекЗапись Из НаборЗаписейИсходный Цикл
				
				НоваяЗапись = НаборЗаписейНовый.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекЗапись);
				НоваяЗапись[ИмяИзмерения] = НовоеЗначение;
				
			КонецЦикла;
			
			НаборЗаписейИсходный.Очистить();
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейИсходный);
			ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписейНовый);
			
		КонецЕсли;
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение операции'"), УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Процедура ЗаменитьРегистратораДвижений(РегистрМенеджер, ТекущийРегистратор, НовыйРегистратор) Экспорт
	
	НаборЗаписейИсходный = РегистрМенеджер.СоздатьНаборЗаписей();
	НаборЗаписейИсходный.Отбор.Регистратор.Установить(ТекущийРегистратор);
	НаборЗаписейИсходный.Прочитать();
	
	НаборЗаписейНовый = РегистрМенеджер.СоздатьНаборЗаписей();
	НаборЗаписейНовый.Отбор.Регистратор.Установить(НовыйРегистратор);
	НаборЗаписейНовый.Прочитать();
	
	Для Каждого ТекЗапись Из НаборЗаписейИсходный Цикл
		
		НоваяЗапись = НаборЗаписейНовый.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗапись, ТекЗапись);
		НоваяЗапись.Регистратор = НовыйРегистратор;
		
	КонецЦикла;
	
	НаборЗаписейИсходный.Очистить();
	НаборЗаписейИсходный.Записать();
	НаборЗаписейНовый.Записать();
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыПредопределенныхЭлементовИзМакета(ОбъектМетаданных, МакетСДанными) Экспорт
	
	ИменаПредопределенныхЭлементов = ОбъектМетаданных.ПолучитьИменаПредопределенных();
	
	Если Не ИменаПредопределенныхЭлементов.Количество() Тогда
		Возврат; // Нет предопределенных элементов.
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
	
	ТабличныеЧасти = Новый массив;
	
	// Сформируем описание данных заполнения по первой строке макета
	ОписаниеПолейЗаполнения = Новый Структура;
	Для НомерКолонки = 2 По МакетСДанными.ШиринаТаблицы Цикл
		ИмяПоля = СокрЛП(МакетСДанными.Область(1, НомерКолонки).Текст);
		
		Путь = СтрРазделить(ИмяПоля,".");
		Если Путь.Количество() = 1 И Не ПустаяСтрока(Путь[0]) Тогда
			// Это реквизит
			ОписаниеПолейЗаполнения.Вставить(ИмяПоля, НомерКолонки);
		ИначеЕсли Путь.Количество() = 2 Тогда
			// Это табличная часть и реквизит в ней.
			
			ТабЧасть = ОбъектМетаданных.ТабличныеЧасти.Найти(Путь[0]);
			Если ТабЧасть <> неопределено Тогда
				Реквизит = ТабЧасть.Реквизиты.Найти(Путь[1]);
				Если Реквизит <> неопределено Тогда
					
					ДопустимоСсылочноеЗначение = Ложь;
					Для Каждого ТекущийТип Из Реквизит.Тип.Типы() Цикл
						Если ОбщегоНазначения.ЭтоСсылка(ТекущийТип) Тогда 
							ДопустимоСсылочноеЗначение = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					//
					Инфо = Новый Структура;
					Инфо.Вставить("ИмяТЧ", Путь[0]);
					Инфо.Вставить("ИмяРеквизита", Путь[1]);
					Инфо.Вставить("НомерКолонки", НомерКолонки);
					Инфо.Вставить("ТЧ", ТабЧасть);
					Инфо.Вставить("Реквизит", Реквизит);
					Инфо.Вставить("ДопустимоСсылочноеЗначение", ДопустимоСсылочноеЗначение);
					ТабличныеЧасти.Добавить(Инфо);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для НомерСтроки = 2 По МакетСДанными.ВысотаТаблицы Цикл
		
		ИмяПредопределенногоЭлемента = СокрЛП(МакетСДанными.Область(НомерСтроки, 1).Текст);
		
		Если ПустаяСтрока(ИмяПредопределенногоЭлемента) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИменаПредопределенныхЭлементов.Найти(ИмяПредопределенногоЭлемента) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПредопределенныйЭлемент = МенеджерОбъекта[ИмяПредопределенногоЭлемента];
		
		Объект = ПредопределенныйЭлемент.ПолучитьОбъект();
		
		// Заполним каждый реквизит.
		Для Каждого ТекРеквизит Из ОбъектМетаданных.Реквизиты Цикл
			
			ИмяРеквизита = ТекРеквизит.Имя;
			
			Если Объект.ЭтоГруппа И ТекРеквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
				Продолжить;
			КонецЕсли;
			
			ДопустимоСсылочноеЗначение = Ложь;
			
			Для Каждого ТекущийТип Из ТекРеквизит.Тип.Типы() Цикл
				Если ОбщегоНазначения.ЭтоСсылка(ТекущийТип) Тогда 
					ДопустимоСсылочноеЗначение = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ОписаниеПолейЗаполнения.Свойство(ИмяРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			
			НомерКолонки = ОписаниеПолейЗаполнения[ИмяРеквизита];
			ТекстЗаполнения =  СокрЛП(МакетСДанными.Область(НомерСтроки, НомерКолонки).Текст);
			
			Если Не ЗначениеЗаполнено(ТекстЗаполнения) Тогда
				Объект[ИмяРеквизита] = Неопределено;
			ИначеЕсли ДопустимоСсылочноеЗначение Тогда
				
				Объект[ИмяРеквизита] = ПредопределенноеЗначение(ТекстЗаполнения);
				
			Иначе
				// Это значение примитивного типа.
				Объект[ИмяРеквизита] = ТекстЗаполнения;
			КонецЕсли;
			
		КонецЦикла;
		
		// Загружаем табличные части
		Для Каждого Инфо Из ТабличныеЧасти Цикл
			Если Объект.ЭтоГруппа И Инфо.ТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
				Продолжить;
			КонецЕсли;
			ЗагрузитьТабличнуюЧастьОдинРеквизит(Объект[Инфо.ИмяТЧ], Инфо, СокрЛП(МакетСДанными.Область(НомерСтроки, Инфо.НомерКолонки).Текст));
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьОбъект(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПрочитатьПоставляемыеДанныеИзМакета(ОбъектМетаданных, МакетСДанными) Экспорт
	
	Результат = Новый Соответствие;
	
	ИменаПредопределенныхЭлементов = ОбъектМетаданных.ПолучитьИменаПредопределенных();
	
	Если Не ИменаПредопределенныхЭлементов.Количество() Тогда
		Возврат Результат; // Нет предопределенных элементов.
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
	
	ТабличныеЧасти = Новый массив;
	
	// Сформируем описание данных заполнения по первой строке макета
	ОписаниеПолейЗаполнения = Новый Структура;
	Для НомерКолонки = 2 По МакетСДанными.ШиринаТаблицы Цикл
		ИмяПоля = СокрЛП(МакетСДанными.Область(1, НомерКолонки).Текст);
		
		Путь = СтрРазделить(ИмяПоля,".");
		Если Путь.Количество() = 1 И Не ПустаяСтрока(Путь[0]) Тогда
			// Это реквизит
			ОписаниеПолейЗаполнения.Вставить(ИмяПоля, НомерКолонки);
		ИначеЕсли Путь.Количество() = 2 Тогда
			// Это табличная часть и реквизит в ней.
			
			ТабЧасть = ОбъектМетаданных.ТабличныеЧасти.Найти(Путь[0]);
			Если ТабЧасть <> неопределено Тогда
				Реквизит = ТабЧасть.Реквизиты.Найти(Путь[1]);
				Если Реквизит <> неопределено Тогда
					
					ДопустимоСсылочноеЗначение = Ложь;
					Для Каждого ТекущийТип Из Реквизит.Тип.Типы() Цикл
						Если ОбщегоНазначения.ЭтоСсылка(ТекущийТип) Тогда 
							ДопустимоСсылочноеЗначение = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					//
					Инфо = Новый Структура;
					Инфо.Вставить("ИмяТЧ", Путь[0]);
					Инфо.Вставить("ИмяРеквизита", Путь[1]);
					Инфо.Вставить("НомерКолонки", НомерКолонки);
					Инфо.Вставить("ТЧ", ТабЧасть);
					Инфо.Вставить("Реквизит", Реквизит);
					Инфо.Вставить("ДопустимоСсылочноеЗначение", ДопустимоСсылочноеЗначение);
					ТабличныеЧасти.Добавить(Инфо);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для НомерСтроки = 2 По МакетСДанными.ВысотаТаблицы Цикл
		
		ИмяПредопределенногоЭлемента = СокрЛП(МакетСДанными.Область(НомерСтроки, 1).Текст);
		
		Если ПустаяСтрока(ИмяПредопределенногоЭлемента) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИменаПредопределенныхЭлементов.Найти(ИмяПредопределенногоЭлемента) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПредопределенныйЭлемент = МенеджерОбъекта[ИмяПредопределенногоЭлемента];
		
		ЭтоГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПредопределенныйЭлемент, "ЭтоГруппа");
		
		ДанныеЗаполнения = Новый Структура;
		
		МассивРеквизитов = РеквизитыПоставляемыхДанныхИзМакета(ОбъектМетаданных);
		
		// Заполним каждый реквизит.
		Для Каждого ТекРеквизит Из МассивРеквизитов Цикл
			
			ЭтоСтандартныйРеквизит = ТипЗнч(ТекРеквизит) = Тип("ОписаниеСтандартногоРеквизита");
			
			ИмяРеквизита = ТекРеквизит.Имя;
			
			Если ЭтоГруппа И Не ЭтоСтандартныйРеквизит И ТекРеквизит.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
				Продолжить;
			КонецЕсли;
			
			ДопустимоСсылочноеЗначение = Ложь;
			
			Для Каждого ТекущийТип Из ТекРеквизит.Тип.Типы() Цикл
				Если ОбщегоНазначения.ЭтоСсылка(ТекущийТип) Тогда 
					ДопустимоСсылочноеЗначение = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не ОписаниеПолейЗаполнения.Свойство(ИмяРеквизита) Тогда
				Продолжить;
			КонецЕсли;
			
			НомерКолонки = ОписаниеПолейЗаполнения[ИмяРеквизита];
			ТекстЗаполнения =  СокрЛП(МакетСДанными.Область(НомерСтроки, НомерКолонки).Текст);
			
			ДанныеЗаполнения.Вставить(ИмяРеквизита);
			
			Если Не ЗначениеЗаполнено(ТекстЗаполнения) Тогда
				ДанныеЗаполнения[ИмяРеквизита] = Неопределено;
			ИначеЕсли ДопустимоСсылочноеЗначение Тогда
				
				ДанныеЗаполнения[ИмяРеквизита] = ПредопределенноеЗначение(ТекстЗаполнения);
				
			Иначе
				// Это значение примитивного типа.
				ДанныеЗаполнения[ИмяРеквизита] = ТекстЗаполнения;
			КонецЕсли;
			
		КонецЦикла;
		
		// Загружаем табличные части
		Для Каждого Инфо Из ТабличныеЧасти Цикл
			Если ЭтоГруппа И Инфо.ТЧ.Использование = Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента Тогда
				Продолжить;
			КонецЕсли;
			ТабличнаяЧасть = Новый ТаблицаЗначений;
			ТабличнаяЧасть.Колонки.Добавить(Инфо.ИмяРеквизита);
			ЗагрузитьТабличнуюЧастьОдинРеквизит(ТабличнаяЧасть, Инфо, СокрЛП(МакетСДанными.Область(НомерСтроки, Инфо.НомерКолонки).Текст));
			ДанныеЗаполнения.Вставить(Инфо.ИмяТЧ, ТабличнаяЧасть);
		КонецЦикла;
		
		Результат.Вставить(ПредопределенныйЭлемент, ДанныеЗаполнения);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗагрузитьТабличнуюЧастьОдинРеквизит(ТЧ, Инфо, Текст)
	
	//
	ТЧ.Очистить();
	
	//
	Текст = СтрЗаменить(Текст, ",", ";");
	Текст = СтрЗаменить(Текст, Символы.ПС, "");
	Текст = СтрЗаменить(Текст, " ", "");
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	//
	МассивЗначений = Новый Массив;
	ТекстыЗначений = СтрРазделить(Текст, ";");
	Для Каждого СтрЗначение Из ТекстыЗначений Цикл
		Если Не ЗначениеЗаполнено(СтрЗначение) Тогда
			Продолжить;
		ИначеЕсли Инфо.ДопустимоСсылочноеЗначение Тогда
			ТЧ.Добавить()[Инфо.ИмяРеквизита] = ПредопределенноеЗначение(СтрЗначение);
		Иначе
			ТЧ.Добавить()[Инфо.ИмяРеквизита] = СтрЗначение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция РеквизитыПоставляемыхДанныхИзМакета(ОбъектМетаданных)
	
	МассивРеквизитов = Новый Массив;
	
	Для Каждого ТекРеквизит Из ОбъектМетаданных.Реквизиты Цикл
		МассивРеквизитов.Добавить(ТекРеквизит);
	КонецЦикла;
	
	Для Каждого ТекРеквизит Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
		МассивРеквизитов.Добавить(ТекРеквизит);
	КонецЦикла;
	
	Возврат МассивРеквизитов;
	
КонецФункции
#КонецОбласти 
