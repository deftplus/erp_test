
#Область ПрограммныйИнтерфейс
	
Процедура ЗаполнитьЗаявкуНаОплатуПоПервичномуДокументу(Объект, ПервичныйДокумент, ДополнительныеСвойства) Экспорт
	
КонецПроцедуры

Процедура ЗаполнитьПланируемоеПоступлениеПоПервичномуДокументу(Объект, ПервичныйДокумент, ДополнительныеСвойства) Экспорт
	
КонецПроцедуры

Процедура ЗаполнитьЗаявкаНаРасходПоПервичномуДокументу(Объект, ПервичныйДокумент, ДополнительныеСвойства) Экспорт
	
КонецПроцедуры

Процедура ЗаполнитьПланируемыйДоходПоПервичномуДокументу(Объект, ПервичныйДокумент, ДополнительныеСвойства) Экспорт

КонецПроцедуры

// Рассчитываем сумму документа со всеми налогами в разрезе ставок НДС
//
// Параметры:
//  ДокументОбъект    - ссылка документа, сумму которого надо рассчитать
//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
//  НеУчитыватьТару   - булево, если Истина и ИмяТабличнойЧасти неопределено, то в расчете сумм тару не учитываем
//
// Возвращаемое значение:
//  ТаблицаЗначений
//		Колонки:
//			Сумма		- Сумма документа со всеми налогами
//			СтавкаНДС	- ПеречислениеСсылка.СтавкиНДС
//			СуммаНДС	- Сумма НДС по ставке
//
Функция ПолучитьСуммуДокументаСНДСВРазрезеСтавокНДС(ДокументОбъект) Экспорт
	Возврат Новый ТаблицаЗначений;
КонецФункции

Функция ВладелецСчетаКонтрагента(Форма, Значение) Экспорт
	Возврат Ложь;
КонецФункции

// Процедура устанавливает  Организация-ОрганизацияПолучатель-ОрганизацияОтправитель 
Процедура УстановитьБанковскийСчетОтправителяПолучателяПриИзмененииДоговора(ОбъектЗаявка, РеквизитыЗаявки, Договор, РеквизитыДоговора, ИзмениласьВалютаОплаты) Экспорт
	
	// ERP.УХ - следующий обработчик
	ТипДоговор = ТипЗнч(Договор);
	ОМ = ЗаявкиНаОперации;
	
	Если ТипДоговор <> Тип("СправочникСсылка.ДоговорыМеждуОрганизациями") Тогда
		Возврат;
	КонецЕсли;
	
	//Если ОбъектЗаявка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
	Если ОбъектЗаявка.ВидОперацииУХ = Справочники.ВидыОперацийУХ.ОплатаДенежныхСредствВДругуюОрганизацию Тогда
		
		// Счет организации
		Если ЗначениеЗаполнено(РеквизитыДоговора.ПокупательБанковскийСчет) Тогда
			ОбъектЗаявка.БанковскийСчет = РеквизитыДоговора.ПокупательБанковскийСчет;
		ИначеЕсли ИзмениласьВалютаОплаты Тогда
			ОбъектЗаявка.БанковскийСчет = КэшируемыеПроцедурыОПК.ПустойБанковскийСчетОрганизации();
		КонецЕсли;
		// Счет организации-получателя(отправителя)
		Если ЗначениеЗаполнено(РеквизитыДоговора.ПоставщикБанковскийСчет) Тогда
			ОМ.УстановитьРеквизитЗаявки(ОбъектЗаявка, РеквизитыЗаявки.БанковскийСчетОрганизацииВстречной, РеквизитыДоговора.ПоставщикБанковскийСчет);
		ИначеЕсли ИзмениласьВалютаОплаты Тогда
			ОМ.УстановитьРеквизитЗаявки(
				ОбъектЗаявка, РеквизитыЗаявки.БанковскийСчетОрганизацииВстречной, 
				КэшируемыеПроцедурыОПК.ПустойБанковскийСчетОрганизации());
			Возврат;
		КонецЕсли;
	//ИначеЕсли ОбъектЗаявка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВозвратДенежныхСредствВДругуюОрганизацию Тогда
	ИначеЕсли ОбъектЗаявка.ВидОперацииУХ = Справочники.ВидыОперацийУХ.ВозвратДенежныхСредствВДругуюОрганизацию Тогда
		
		// Счет организации
		Если ЗначениеЗаполнено(РеквизитыДоговора.ПоставщикБанковскийСчет) Тогда
			ОбъектЗаявка.БанковскийСчет = РеквизитыДоговора.ПоставщикБанковскийСчет;
		ИначеЕсли ИзмениласьВалютаОплаты Тогда
			ОбъектЗаявка.БанковскийСчет = КэшируемыеПроцедурыОПК.ПустойБанковскийСчетОрганизации();
		КонецЕсли;
		// Счет организации-получателя(отправителя)
		Если ЗначениеЗаполнено(РеквизитыДоговора.ПокупательБанковскийСчет) Тогда
			ОМ.УстановитьРеквизитЗаявки(ОбъектЗаявка, РеквизитыЗаявки.БанковскийСчетОрганизацииВстречной, РеквизитыДоговора.ПокупательБанковскийСчет);
		ИначеЕсли ИзмениласьВалютаОплаты Тогда
			ОМ.УстановитьРеквизитЗаявки(
				ОбъектЗаявка, РеквизитыЗаявки.БанковскийСчетОрганизацииВстречной, 
				КэшируемыеПроцедурыОПК.ПустойБанковскийСчетОрганизации());
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедуры из ERP.ОМ.ДенежныеСредстваСервер
#Область ERP_ЗаполнениеНаОснованииЗаявкиНаРасходованиеДС

// Процедура заполняет документ на основании заявок на расходование денежных средств.
//
// Параметры:
//	ДанныеЗаполнения - Структура - Данные заполнения
//	ТабличнаяЧасть - ТабличнаяЧасть - Табличная часть документа
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Фактическая форма оплаты (зависит от вводимого документа оплаты).
//
Процедура ЗаполнитьДокументПоЗаявкамНаРасходованиеДенежныхСредств(ДанныеЗаполнения, ТабличнаяЧасть, ФормаОплаты) Экспорт
	
	#Область УХ_Встраивание
	ПустойУИД = ОбщегоНазначенияКлиентСерверУХ.ПустойУникальныйИдентификатор();
	#КонецОбласти
	
	МассивСсылок = Новый Массив;
	МассивИдентификаторов = Новый Массив;
	Если ТипЗнч(ДанныеЗаполнения) = КэшируемыеПроцедурыОПК.ТипЗаявкаНаОплату() Тогда
		МассивСсылок.Добавить(ДанныеЗаполнения);
		БанковскийСчетКасса = Неопределено;
		СуммаПлатежа = 0;
		
		ВызватьИсключение НСтр("ru = 'Без указания платежной позиции заполнение невозможно.'");
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		// заполнение без платежной позиции невозможно
		Если НЕ ДанныеЗаполнения.Свойство("ИдентификаторПозиции") Тогда
			ВызватьИсключение НСтр("ru = 'Без указания платежной позиции заполнение невозможно.'");
		КонецЕсли;
		
		Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = КэшируемыеПроцедурыОПК.ТипЗаявкаНаОплату()
			Или ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ЗаявкаНаКомандировку") Тогда
			МассивСсылок.Добавить(ДанныеЗаполнения.ДокументОснование);
		ИначеЕсли ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("Массив") Тогда
			МассивСсылок = ДанныеЗаполнения.ДокументОснование;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеЗаполнения.ИдентификаторПозиции) = Тип("УникальныйИдентификатор") Тогда
			МассивИдентификаторов.Добавить(ДанныеЗаполнения.ИдентификаторПозиции);
		ИначеЕсли ТипЗнч(ДанныеЗаполнения.ИдентификаторПозиции) = Тип("Массив") Тогда
			МассивИдентификаторов = ДанныеЗаполнения.ИдентификаторПозиции;
		ИначеЕсли ТипЗнч(ДанныеЗаполнения.ИдентификаторПозиции) = Тип("ТаблицаЗначений") Тогда
			МассивИдентификаторов = ДанныеЗаполнения.ИдентификаторПозиции.ВыгрузитьКолонку("ИдентификаторПозиции");
		КонецЕсли;
		
		БанковскийСчетКасса = ДанныеЗаполнения.БанковскийСчетКасса;
		СуммаПлатежа = ДанныеЗаполнения.Сумма;
	КонецЕсли;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	РазмещениеЗаявок.ЗаявкаНаОперацию КАК Заявка,
	|	РазмещениеЗаявок.ЗаявкаНаОперацию КАК ДокументПланирования,
	|	РазмещениеЗаявок.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	РазмещениеЗаявок.ПриходРасход КАК ПриходРасход,
	|	ЕСТЬNULL(РазмещениеЗаявок.БезакцептноеСписание, ЛОЖЬ) КАК ПроведеноБанком,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РазмещениеЗаявок.БезакцептноеСписание, ЛОЖЬ) = ИСТИНА
	|			ТОГДА &ТекущаяДата
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ДатаПроведенияБанком,
	|	РазмещениеЗаявок.БанковскийСчетКасса КАК СчетОрганизации,
	|	ВЫБОР
	|		КОГДА РазмещениеЗаявок.БанковскийСчетКасса ССЫЛКА Справочник.БанковскиеСчетаОрганизаций
	|			ТОГДА РазмещениеЗаявок.БанковскийСчетКасса
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка)
	|	КОНЕЦ КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА РазмещениеЗаявок.БанковскийСчетКасса ССЫЛКА Справочник.Кассы
	|			ТОГДА РазмещениеЗаявок.БанковскийСчетКасса
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка)
	|	КОНЕЦ КАК Касса,
	|	РазмещениеЗаявок.ВалютаОплаты КАК ВалютаДокумента,
	|	РазмещениеЗаявок.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|	РазмещениеЗаявок.ВидОперацииУХ КАК ВидОперацииУХ,
	|	ЕстьNULL(ВЫБОР
	|		КОГДА РазмещениеЗаявок.ЗаявкаНаОперацию.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты)
	|			ТОГДА РазмещениеЗаявок.ЗаявкаНаОперацию.ХозяйственнаяОперацияПоЗарплате
	|		КОГДА РазмещениеЗаявок.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.формыОплаты.Безналичная)
	|			ТОГДА РазмещениеЗаявок.ВидОперацииУХ.ВидОперацииДДСБезналичныйРасчет
	|		КОГДА РазмещениеЗаявок.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.формыОплаты.Наличная)
	|			ТОГДА РазмещениеЗаявок.ВидОперацииУХ.ВидОперацииДДСНаличныйРасчет
	|		ИНАЧЕ РазмещениеЗаявок.ЗаявкаНаОперацию.ХозяйственнаяОперация
	|	КОНЕЦ, Неопределено) КАК ВидОперации,
	|	РазмещениеЗаявок.КурсПлатежа КАК КурсПлатежа,
	|	РазмещениеЗаявок.КратностьПлатежа КАК КратностьПлатежа,
	|	РазмещениеЗаявок.Проведен КАК Проведен,
	|	СостоянияСогласования.СостояниеОбъекта КАК СостояниеСогласования,
	|	СостоянияИсполнения.СостояниеИсполнения КАК СостояниеИсполнения,
	|	РазмещениеЗаявок.Организация КАК Организация,
	|	ЕстьNULL(ВЫБОР
	|		КОГДА РазмещениеЗаявок.ЗаявкаНаОперацию.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты)
	|			ТОГДА РазмещениеЗаявок.ЗаявкаНаОперацию.ХозяйственнаяОперацияПоЗарплате
	|		КОГДА РазмещениеЗаявок.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.формыОплаты.Безналичная)
	|			ТОГДА РазмещениеЗаявок.ВидОперацииУХ.ВидОперацииДДСБезналичныйРасчет
	|		КОГДА РазмещениеЗаявок.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.формыОплаты.Наличная)
	|			ТОГДА РазмещениеЗаявок.ВидОперацииУХ.ВидОперацииДДСНаличныйРасчет
	|		ИНАЧЕ РазмещениеЗаявок.ЗаявкаНаОперацию.ХозяйственнаяОперация
	|	КОНЕЦ, Неопределено) КАК ХозяйственнаяОперация,
	|	РазмещениеЗаявок.ВалютаОплаты КАК Валюта,
	|	РазмещениеЗаявок.ВалютаОплаты КАК ВалютаЗаявки,
	|	ЕСТЬNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.НазначениеПлатежа, """") КАК НазначениеПлатежа,
	|	РазмещениеЗаявок.Контрагент КАК Контрагент,
	|	ВЫБОР
	|		КОГДА НЕ РазмещениеЗаявок.СчетКонтрагента.Закрыт
	|			ТОГДА РазмещениеЗаявок.СчетКонтрагента
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК БанковскийСчетКонтрагента,
	|	ЕстьNULL(ВЫБОР
	|		КОГДА РазмещениеЗаявок.ЗаявкаНаОперацию.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты)
	|				И РазмещениеЗаявок.ЗаявкаНаОперацию.ХозяйственнаяОперацияПоЗарплате = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплатыНаЛицевыеСчета)
	|			ТОГДА РазмещениеЗаявок.Контрагент
	|		КОГДА РазмещениеЗаявок.ЗаявкаНаОперацию.ВидОперацииУХ = ЗНАЧЕНИЕ(Справочник.ВидыОперацийУХ.ПеречислениеПодотчетномуЛицу)
	|				И РазмещениеЗаявок.ЗаявкаНаОперацию.СписокФизЛиц
	|			ТОГДА РазмещениеЗаявок.Контрагент	
	|		ИНАЧЕ РазмещениеЗаявок.ЗаявкаНаОперацию.ПодотчетноеЛицо
	|	КОНЕЦ, Неопределено) КАК ПодотчетноеЛицо,
	|	ЕстьNULL(ВЫБОР
	|		КОГДА НЕ ЕСТЬNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.БанковскийСчетПолучатель.Закрыт, ИСТИНА)
	|			ТОГДА РазмещениеЗаявок.ЗаявкаНаОперацию.БанковскийСчетПолучатель
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ, Неопределено) КАК БанковскийСчетПолучатель,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.КассаПолучатель, Неопределено) КАК КассаПолучатель,
	|	РазмещениеЗаявок.ФормаОплаты КАК ФормаОплатыЗаявки,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.ВалютаКонвертации, Неопределено) КАК ВалютаКонвертации,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.СуммаКонвертации, 0) КАК СуммаКонвертации,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.КурсКонвертации, 1) КАК КурсКонвертации,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.ПланированиеСуммы, 0) КАК ПланированиеСуммы,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.НомерВедомостиНаВыплатуЗарплаты, """") КАК НомерВедомостиНаВыплатуЗарплаты,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.ДатаВедомостиНаВыплатуЗарплаты, ДатаВремя(1, 1, 1)) КАК ДатаВедомостиНаВыплатуЗарплаты,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.СтатьяАктивовПассивов, Неопределено) КАК СтатьяАктивовПассивов,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.ИдентификаторПлатежа, """") КАК ИдентификаторПлатежа,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.ДатаАвансовогоОтчета, ДатаВремя(1, 1, 1)) КАК ДатаАвансовогоОтчета,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.ДоговорСУчастникомГОЗ, Ложь) КАК ДоговорСУчастникомГОЗ,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.ПлатежиПо275ФЗ, Ложь) КАК ПлатежиПо275ФЗ,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.ТипПлатежаФЗ275, Ложь) КАК ТипПлатежаФЗ275,
	|	ЕстьNULL(РазмещениеЗаявок.БанковскийСчетКасса.ГосударственныйКонтракт, Неопределено) КАК ГосКонтракт,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.ПеречислениеВБюджет, Ложь) КАК ПеречислениеВБюджет,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.ТипНалога, Неопределено) КАК ТипНалога,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.НДФЛПоВедомостям, Ложь) КАК НДФЛПоВедомостям,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.РегистрацияВНалоговомОргане, Неопределено) КАК РегистрацияВНалоговомОргане,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.ВидПеречисленияВБюджет, Неопределено) КАК ВидПеречисленияВБюджет,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.КодОКАТО, """") КАК КодОКАТО,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.ПоказательОснования, """") КАК ПоказательОснования,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.ПоказательПериода, """") КАК ПоказательПериода,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.ПоказательНомера, """") КАК ПоказательНомера,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.ПоказательДаты, """") КАК ПоказательДаты,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.ПоказательТипа, """") КАК ПоказательТипа,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.СтатусСоставителя, """") КАК СтатусСоставителя,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.КодБК, """") КАК КодБК,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.КодВидаДохода, """") КАК КодВидаДохода,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.ХозяйственнаяОперация, Неопределено) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты) КАК ЭтоВыплатаЗарплаты,
	|	ЕстьNULL(ВЫБОР
	|		КОГДА РазмещениеЗаявок.ЗаявкаНаОперацию.ХозяйственнаяОперация В (ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику), ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыдачаЗаймаСотруднику))
	|			ТОГДА РазмещениеЗаявок.ЗаявкаНаОперацию.ПодотчетноеЛицо.Наименование
	|		ИНАЧЕ ВЫБОР
	|				КОГДА РазмещениеЗаявок.Контрагент.НаименованиеПолное <> """"
	|					ТОГДА РазмещениеЗаявок.Контрагент.НаименованиеПолное
	|				ИНАЧЕ РазмещениеЗаявок.Контрагент.Наименование
	|			КОНЕЦ
	|	КОНЕЦ, """") КАК Выдать,
	|	ВЫБОР
	|		КОГДА РазмещениеЗаявок.ЗаявкаНаОперацию ССЫЛКА Документ.ЗаявкаНаРасходованиеДенежныхСредств
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОплатаПоЗаявкам,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.ИННПлательщика, """") КАК ИННПлательщика,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.КПППлательщика, """") КАК КПППлательщика,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.ТекстПлательщика, """") КАК ТекстПлательщика,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.ГруппаФинансовогоУчета, Неопределено) КАК ГруппаФинансовогоУчета,
	|	РазмещениеЗаявок.ДоговорКонтрагента КАК Договор,
	|	ЕстьNULL(ВЫРАЗИТЬ(РазмещениеЗаявок.ЗаявкаНаОперацию КАК Документ.ЗаявкаНаРасходованиеДенежныхСредств), Неопределено) КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|	ВЫБОР
	|		КОГДА РазмещениеЗаявок.ЗаявкаНаОперацию.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ВыплатаЗарплаты)
	|			ТОГДА 3
	|		Иначе 0
	|	КОНЕЦ КАК ОчередностьПлатежа,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.ТипКомиссииЗаПеревод, Неопределено) КАК ТипКомиссииЗаПеревод,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.ИнформацияПолучателюПлатежа, """") КАК ИнформацияПолучателюПлатежа,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.УсловиеСделкиКонвертации, 0) КАК УсловиеСделкиКонвертации,
	|	ЕстьNULL(РазмещениеЗаявок.ЗаявкаНаОперацию.БанковскийСчетСписанияКомиссии, Неопределено) КАК БанковскийСчетСписанияКомиссии,
	|	ДвиженияБюджетированияПоПозициям.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	ДвиженияБюджетированияПоПозициям.Аналитика1 КАК Аналитика1,
	|	ДвиженияБюджетированияПоПозициям.Аналитика2 КАК Аналитика2,
	|	ДвиженияБюджетированияПоПозициям.Аналитика3 КАК Аналитика3,
	|	ДвиженияБюджетированияПоПозициям.Аналитика4 КАК Аналитика4,
	|	ДвиженияБюджетированияПоПозициям.Аналитика5 КАК Аналитика5,
	|	ДвиженияБюджетированияПоПозициям.Аналитика6 КАК Аналитика6,
	|	ДвиженияБюджетированияПоПозициям.ЦФО КАК ЦФО,
	|	ДвиженияБюджетированияПоПозициям.Подразделение КАК Подразделение,
	|	ДвиженияБюджетированияПоПозициям.НаправлениеДеятельности КАК НаправлениеДеятельности,
	|	ДвиженияБюджетированияПоПозициям.УдалитьСчетУчета КАК УдалитьСчетУчета,
	|	ДвиженияБюджетированияПоПозициям.УдалитьСубконто1 КАК УдалитьСубконто1,
	|	ДвиженияБюджетированияПоПозициям.УдалитьСубконто2 КАК УдалитьСубконто2,
	|	ДвиженияБюджетированияПоПозициям.УдалитьСубконто3 КАК УдалитьСубконто3,
	|	ДвиженияБюджетированияПоПозициям.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ДвиженияБюджетированияПоПозициям.АналитикаАктивовПассивов КАК АналитикаАктивовПассивов,
	|	ДвиженияБюджетированияПоПозициям.АналитикаРасходов КАК АналитикаРасходов,
	|	ДвиженияБюджетированияПоПозициям.СтатьяРасходов КАК СтатьяРасходов,
	|	ДвиженияБюджетированияПоПозициям.Проект КАК Проект,
	|	ДвиженияБюджетированияПоПозициям.НастройкаСчетовУчета КАК НастройкаСчетовУчета,
	|	ДвиженияБюджетированияПоПозициям.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ДвиженияБюджетированияПоПозициям.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	ДвиженияБюджетированияПоПозициям.ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности
	|ИЗ
	|	РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних КАК СостоянияСогласования
	|		ПО РазмещениеЗаявок.ЗаявкаНаОперацию = СостоянияСогласования.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполнения
	|		ПО РазмещениеЗаявок.ЗаявкаНаОперацию = СостоянияИсполнения.ДокументПланирования
	|			И РазмещениеЗаявок.ИдентификаторПозиции = СостоянияИсполнения.ИдентификаторПозиции
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДвиженияБюджетированияПоПозициям КАК ДвиженияБюджетированияПоПозициям
	|		ПО РазмещениеЗаявок.ЗаявкаНаОперацию = ДвиженияБюджетированияПоПозициям.ЗаявкаНаОперацию
	|			И РазмещениеЗаявок.ИдентификаторПозиции = ДвиженияБюджетированияПоПозициям.ИдентификаторПозиции
	|ГДЕ
	|	РазмещениеЗаявок.ЗаявкаНаОперацию В(&МассивСсылок)
	|	И РазмещениеЗаявок.ИдентификаторПозиции В(&МассивИдентификаторов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(РазмещениеЗаявок.Сумма) КАК Сумма
	|ИЗ
	|	РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|ГДЕ
	|	РазмещениеЗаявок.ЗаявкаНаОперацию В(&МассивСсылок)
	|	И РазмещениеЗаявок.ИдентификаторПозиции В(&МассивИдентификаторов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
		
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса[0].Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	#Область УХ_Встраивание
	ДанныеЗаполнения.Удалить("Проведен");
	#КонецОбласти 
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	Иначе	
		#Область УХ_Встраивание
		ВызватьИсключение НСтр("ru = 'Не найдены данные по данной позиции оплаты.'");
		#КонецОбласти	
		Возврат;
	КонецЕсли;
	
	#Область УХ_Встраивание
	ТекстОшибки="";
	
	Если НЕ Выборка.Проведен Тогда
		ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Создание платежных поручений возможно только на основании проведенных документов.'");
	КонецЕсли;
	
	Если ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
	
		Если НЕ ЗначениеЗаполнено(Выборка.БанковскийСчет) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Не указан банковский счет организации для оплаты заявки'");
		КонецЕсли;
				
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Выборка.Касса) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Не указана касса организации для оплаты заявки'");
		КонецЕсли;
		
	КонецЕсли;
		
	Если Выборка.СостояниеСогласования <> Перечисления.СостоянияСогласования.Утверждена Тогда
		ТекстОшибки=ТекстОшибки+ Символы.ПС + СтрШаблон(НСтр("ru = 'Документ %1 не утвержден'"), Выборка.ДокументПланирования);
	КонецЕсли;
	
	ТекстОшибки = Сред(ТекстОшибки, 2);
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда	
		ВызватьИсключение ТекстОшибки;
	КонецЕсли;	
	#КонецОбласти 
	
	Если ЗначениеЗаполнено(Выборка.ФормаОплатыЗаявки) И ФормаОплаты <> Выборка.ФормаОплатыЗаявки Тогда
		
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Форма оплаты ""%1"" вводимого документа отличается от формы оплаты ""%2"" заявки.';
				|en = 'The ""%1"" payment form of the entered document differs from the ""%2"" payment form of the request.'"),
			ФормаОплаты,
			Выборка.ФормаОплатыЗаявки);
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта
		И Выборка.ХозяйственнаяОперация <> Перечисления.ХозяйственныеОперации.ВозвратОплатыКлиенту Тогда
		Текст = НСтр("ru = 'Выбранная операция не соответствует операции возврата оплаты клиенту, для которой предусмотрен эквайринговый платеж.';
					|en = 'Selected operation does not correspond to the refund to customer transaction, acquiring payment for which is provided. '");
		ВызватьИсключение Текст;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
		Если ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
			ДанныеЗаполнения.Вставить("БанковскийСчет", БанковскийСчетКасса);
		ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
			ДанныеЗаполнения.Вставить("Касса", БанковскийСчетКасса);
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты Тогда
		#Область УХ_Встраивание
		Если ДанныеЗаполнения.Свойство("БанковскийСчетПолучатель") И НЕ ЗначениеЗаполнено(ДанныеЗаполнения.БанковскийСчетПолучатель) Тогда
		#КонецОбласти 
			БанковскийСчетПолучатель = Справочники.БанковскиеСчетаОрганизаций.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(
				ДанныеЗаполнения.Организация,
				ДанныеЗаполнения.ВалютаКонвертации);
				ДанныеЗаполнения.Вставить("БанковскийСчетПолучатель", БанковскийСчетПолучатель);
		#Область УХ_Встраивание
		КонецЕсли;
		Если ДанныеЗаполнения.Свойство("КассаПолучатель") И НЕ ЗначениеЗаполнено(ДанныеЗаполнения.КассаПолучатель) Тогда
		#КонецОбласти 
			КассаПолучатель = Справочники.Кассы.ПолучитьКассуПоУмолчанию(
				ДанныеЗаполнения.Организация,
				ДанныеЗаполнения.ВалютаКонвертации);
				ДанныеЗаполнения.Вставить("КассаПолучатель", КассаПолучатель);
		#Область УХ_Встраивание
		КонецЕсли;
		#КонецОбласти 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СуммаПлатежа) Тогда
		ДанныеЗаполнения.Вставить("СуммаДокумента", СуммаПлатежа);
	Иначе
		ТабСуммаВыбранныхПозиций = РезультатЗапроса[1].Выгрузить();
		ДанныеЗаполнения.Вставить("СуммаДокумента", ТабСуммаВыбранныхПозиций[0].Сумма);
	КонецЕсли;
	
	Если Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствПодотчетнику
		Или Выборка.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыдачаЗаймаСотруднику Тогда
		#Область УХ_Встраивание
		Если Не ЗначениеЗаполнено(Выборка.ПодотчетноеЛицо)
			 И ТипЗнч(Выборка.Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		    ПодотчетноеЛицо 					= Выборка.Контрагент;
			ДанныеЗаполнения.ПодотчетноеЛицо 	= ПодотчетноеЛицо;
		Иначе
			ПодотчетноеЛицо 					= Выборка.ПодотчетноеЛицо;
		КонецЕсли; 
		#КонецОбласти
		УстановитьПривилегированныйРежим(Истина);
		ДокументФизическогоЛица = ФизическиеЛицаУТ.ПолучитьДокументФизическогоЛицаПоУмолчанию(ПодотчетноеЛицо).Представление;
		Если Не ЗначениеЗаполнено(ДокументФизическогоЛица) Тогда
			ДокументФизическогоЛица = ФизическиеЛицаУТ.ПолучитьДокументФизическогоЛицаПоУмолчанию(
				ПодотчетноеЛицо,
				Справочники.ВидыДокументовФизическихЛиц.ПаспортРФ).Представление;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		ДанныеЗаполнения.Вставить("ПоДокументу", ДокументФизическогоЛица);
	КонецЕсли;
	
	Если Выборка.ПланированиеСуммы = Перечисления.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов Тогда
		ЗаполнитьРеквизитыДокументаПоФормеОплаты(ФормаОплаты, ДанныеЗаполнения);
	Иначе
		ЗаполнитьРеквизитыДокументаПоФормеОплаты(ФормаОплаты, ДанныеЗаполнения, Выборка.Валюта);
	КонецЕсли;
	
	Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.КонвертацияВалюты
		И ДанныеЗаполнения.КурсКонвертации <> 0
		И ДанныеЗаполнения.СуммаКонвертации = 0 Тогда
		ДанныеЗаполнения.Вставить("СуммаКонвертации", ДанныеЗаполнения.СуммаДокумента / ДанныеЗаполнения.КурсКонвертации);
	КонецЕсли;
	
	//++ Локализация
	//++ НЕ УТ
	Если Выборка.ПлатежиПо275ФЗ И Выборка.ДоговорСУчастникомГОЗ
		И ЗначениеЗаполнено(Выборка.ГосКонтракт) Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов
		|ГДЕ
		|	ГосударственныйКонтракт = &Госконтракт
		|	И ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СПокупателем)
		|	И НЕ ПометкаУдаления
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Ссылка
		|ИЗ
		|	Справочник.ДоговорыМеждуОрганизациями
		|ГДЕ
		|	ГосударственныйКонтракт = &Госконтракт
		|	И НЕ ПометкаУдаления
		|";
		Запрос.УстановитьПараметр("Госконтракт", Выборка.ГосКонтракт);
		
		Результат = Запрос.Выполнить().Выгрузить();
		Если Результат.Количество() = 1 Тогда
			ДанныеЗаполнения.Вставить("ДоговорСЗаказчиком", Результат[0]["Ссылка"]);
		КонецЕсли;
	КонецЕсли;
	//-- НЕ УТ
	//-- Локализация
	
	Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Выборка.ВалютаЗаявки, ДанныеЗаполнения.Валюта, ТекущаяДатаСеанса(), Выборка.Организация);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КурсВалюты.ЗаявкаНаОперацию КАК ЗаявкаНаОперацию,
	|	КурсВалюты.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	КурсВалюты.ВалютаВзаиморасчетов КАК Валюта,
	|   Выбор 
	|		КОГДА КурсВалюты.КратностьПлатежа = 0 ТОГДА 1
	|		ИНАЧЕ КурсВалюты.КурсПлатежа / КурсВалюты.КратностьПлатежа
	|	КОНЕЦ КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.РазмещениеЗаявок КАК КурсВалюты
	|ГДЕ
	|	КурсВалюты.ЗаявкаНаОперацию В (&МассивСсылок)
	|	И КурсВалюты.ИдентификаторПозиции В (&МассивИдентификаторов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств КАК ДокументПланирования,
	|	РасшифровкаПлатежа.ИдентификаторПозиции,
	|	РасшифровкаПлатежа.Партнер,
	|	РасшифровкаПлатежа.ОбъектРасчетов,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов) ТОГДА
	|			СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) * КурсыВалют.КоэффициентПересчета
	|		ИНАЧЕ
	|			СУММА(РасшифровкаПлатежа.Сумма)
	|	КОНЕЦ КАК Сумма,
	|	СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	РасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	РасшифровкаПлатежа.СтатьяРасходов,
	|	РасшифровкаПлатежа.АналитикаРасходов,
	|	РасшифровкаПлатежа.АналитикаАктивовПассивов,
	|	РасшифровкаПлатежа.ЦФО КАК ЦФО,
	|	РасшифровкаПлатежа.Проект КАК Проект,
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежа.Аналитика1 КАК Аналитика1,
	|	РасшифровкаПлатежа.Аналитика2 КАК Аналитика2,
	|	РасшифровкаПлатежа.Аналитика3 КАК Аналитика3,
	|	РасшифровкаПлатежа.Аналитика4 КАК Аналитика4,
	|	РасшифровкаПлатежа.Аналитика5 КАК Аналитика5,
	|	РасшифровкаПлатежа.Аналитика6 КАК Аналитика6,
	|	РасшифровкаПлатежа.ДоговорКредитаДепозита,
	|	РасшифровкаПлатежа.ТипСуммыКредитаДепозита,
	|	РасшифровкаПлатежа.ДоговорАренды,
	|	РасшифровкаПлатежа.ТипПлатежаПоАренде,
	|	РасшифровкаПлатежа.ДоговорЗаймаСотруднику,
	|	РасшифровкаПлатежа.Подразделение,
	|	РасшифровкаПлатежа.НаправлениеДеятельности,
	|	РасшифровкаПлатежа.Ведомость,
	|	РасшифровкаПлатежа.ЭлементСтруктурыЗадолженности,
	|	//ДанныеСубконто
	|	РасшифровкаПлатежа.СтавкаНДС,
	//|	ВЫБОР
	//|		КОГДА РасшифровкаПлатежа.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов) ТОГДА
	|			(СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) * КурсыВалют.КоэффициентПересчета *
	|					(РасшифровкаПлатежа.СтавкаНДС.Ставка / 100) / ((РасшифровкаПлатежа.СтавкаНДС.Ставка / 100) + 1))
	//|	ИНАЧЕ
	//|		СУММА(РасшифровкаПлатежа.СуммаНДС)
	//|	КОНЕЦ КАК СуммаНДС,
	|	КАК СуммаНДС,
	|	РасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств,
	|	РасшифровкаПлатежа.НастройкаСчетовУчета,
	|	РасшифровкаПлатежа.КурсВзаиморасчетов,
	|	РасшифровкаПлатежа.КратностьВзаиморасчетов
	|ИЗ (
	|	ВЫБРАТЬ
	|		РасшифровкаДокумента.ИдентификаторПозиции,
	|		РасшифровкаДокумента.Партнер,
	|		РасшифровкаДокумента.ОбъектРасчетов,
	|		РасшифровкаДокумента.Сумма КАК Сумма,
	|		РасшифровкаДокумента.Сумма КАК СуммаВзаиморасчетов,
	|		РасшифровкаДокумента.ВалютаВзаиморасчетов,
	|		РасшифровкаДокумента.СтатьяРасходов,
	|		РасшифровкаДокумента.АналитикаРасходов,
	|		РасшифровкаДокумента.АналитикаАктивовПассивов,
	|		РасшифровкаДокумента.СтатьяДвиженияДенежныхСредств,
	|		РасшифровкаДокумента.Аналитика1,
	|		РасшифровкаДокумента.Аналитика2,
	|		РасшифровкаДокумента.Аналитика3,
	|		РасшифровкаДокумента.Аналитика4,
	|		РасшифровкаДокумента.Аналитика5,
	|		РасшифровкаДокумента.Аналитика6,
	|		РасшифровкаДокумента.ДоговорКредитаДепозита,
	|		РасшифровкаДокумента.ТипСуммыКредитаДепозита,
	|		РасшифровкаДокумента.ДоговорАренды,
	|		РасшифровкаДокумента.ТипПлатежаПоАренде,
	|		РасшифровкаДокумента.ДоговорЗаймаСотруднику,
	|		РасшифровкаДокумента.Подразделение,
	|		РасшифровкаДокумента.НаправлениеДеятельности,
	|		РасшифровкаДокумента.Ведомость,
	|		//ПоляСубконто
	|		РасшифровкаДокумента.СтавкаНДС,
	|		РасшифровкаДокумента.СуммаНДС КАК СуммаНДС,
	|		РасшифровкаДокумента.ЗаявкаНаОперацию КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|		ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов) КАК ПланированиеСуммы,
	|		РасшифровкаДокумента.ВалютаВзаиморасчетов КАК Валюта,
	|		РасшифровкаДокумента.НастройкаСчетовУчета КАК НастройкаСчетовУчета,
	|		РасшифровкаДокумента.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|		РасшифровкаДокумента.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	//УХ_Встраивание++
	|		РасшифровкаДокумента.ЦФО КАК ЦФО,
	|		РасшифровкаДокумента.Проект КАК Проект,
	|		РасшифровкаДокумента.ЭлементСтруктурыЗадолженности КАК ЭлементСтруктурыЗадолженности
	//УХ_Встраивание--
	|	ИЗ
	|			РегистрСведений.ДвиженияБюджетированияПоПозициям КАК РасшифровкаДокумента
	|	ГДЕ
	|		РасшифровкаДокумента.ЗаявкаНаОперацию В(&МассивСсылок)
	|		И РасшифровкаДокумента.ИдентификаторПозиции В (&МассивИдентификаторов)
	|	)
	|	КАК РасшифровкаПлатежа
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			КурсыВалют КАК КурсыВалют
	|		ПО
	|			РасшифровкаПлатежа.Валюта = КурсыВалют.Валюта
	|			И РасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств = КурсыВалют.ЗаявкаНаОперацию
	|			И РасшифровкаПлатежа.ИдентификаторПозиции = КурсыВалют.ИдентификаторПозиции
	|
	|СГРУППИРОВАТЬ ПО
	|	РасшифровкаПлатежа.Партнер,
	|	РасшифровкаПлатежа.ОбъектРасчетов,
	|	РасшифровкаПлатежа.ВалютаВзаиморасчетов,
	|	РасшифровкаПлатежа.СтатьяРасходов,
	|	РасшифровкаПлатежа.АналитикаРасходов,
	|	РасшифровкаПлатежа.АналитикаАктивовПассивов,
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежа.ДоговорКредитаДепозита,
	|	РасшифровкаПлатежа.ТипСуммыКредитаДепозита,
	|	РасшифровкаПлатежа.ДоговорАренды,
	|	РасшифровкаПлатежа.ТипПлатежаПоАренде,
	|	РасшифровкаПлатежа.ДоговорЗаймаСотруднику,
	|	РасшифровкаПлатежа.Подразделение,
	|	РасшифровкаПлатежа.НаправлениеДеятельности,
	|	РасшифровкаПлатежа.Ведомость,
	|	//ГруппировкаСубконто
	|	РасшифровкаПлатежа.СтавкаНДС,
	|	РасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств,
	|	РасшифровкаПлатежа.ПланированиеСуммы,
	|	КурсыВалют.КоэффициентПересчета
	//УХ_Встраивание++
	|	,РасшифровкаПлатежа.ЦФО,
	|	РасшифровкаПлатежа.Проект,
	|	РасшифровкаПлатежа.Аналитика1,
	|	РасшифровкаПлатежа.Аналитика2,
	|	РасшифровкаПлатежа.Аналитика3,
	|	РасшифровкаПлатежа.Аналитика4,
	|	РасшифровкаПлатежа.Аналитика5,
	|	РасшифровкаПлатежа.Аналитика6,
	|	РасшифровкаПлатежа.ИдентификаторПозиции,
	|	РасшифровкаПлатежа.НастройкаСчетовУчета,
	|	РасшифровкаПлатежа.КурсВзаиморасчетов,
	|	РасшифровкаПлатежа.КратностьВзаиморасчетов,
	|	РасшифровкаПлатежа.ЭлементСтруктурыЗадолженности
	//УХ_Встраивание--
	|
	|ИМЕЮЩИЕ
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов)
	|			ТОГДА СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) * КурсыВалют.КоэффициентПересчета
	|		ИНАЧЕ СУММА(РасшифровкаПлатежа.Сумма)
	|	КОНЕЦ > 0
	|	
	|УПОРЯДОЧИТЬ ПО
	|	РасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств
	|";
	
	//++ НЕ УТ
	Если ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПеречислениеВБюджет
		И (ДанныеЗаполнения.ТипНалога = Перечисления.ТипыНалогов.НДС_ВвозимыеТовары
			Или ДанныеЗаполнения.ТипНалога = Перечисления.ТипыНалогов.НДС_НалоговыйАгент)
		Или ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПрочаяВыдачаДенежныхСредств Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ГруппировкаСубконто",
		"	РасшифровкаПлатежа.УдалитьСчетУчета,
		|	РасшифровкаПлатежа.УдалитьСубконто1,
		|	РасшифровкаПлатежа.УдалитьСубконто2,
		|	РасшифровкаПлатежа.УдалитьСубконто3,");
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДанныеСубконто",
		"	РасшифровкаПлатежа.УдалитьСчетУчета КАК УдалитьСчетУчета,
		|	РасшифровкаПлатежа.УдалитьСубконто1 КАК УдалитьСубконто1,
		|	РасшифровкаПлатежа.УдалитьСубконто2 КАК УдалитьСубконто2,
		|	РасшифровкаПлатежа.УдалитьСубконто3 КАК УдалитьСубконто3,");
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ДанныеСубконто",
		"	МИНИМУМ(РасшифровкаПлатежа.УдалитьСчетУчета) КАК УдалитьСчетУчета,
		|	МИНИМУМ(РасшифровкаПлатежа.УдалитьСубконто1) КАК УдалитьСубконто1,
		|	МИНИМУМ(РасшифровкаПлатежа.УдалитьСубконто2) КАК УдалитьСубконто2,
		|	МИНИМУМ(РасшифровкаПлатежа.УдалитьСубконто3) КАК УдалитьСубконто3,");
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ПоляСубконто",
	"	РасшифровкаДокумента.УдалитьСчетУчета КАК УдалитьСчетУчета,
	|	РасшифровкаДокумента.УдалитьСубконто1 КАК УдалитьСубконто1,
	|	РасшифровкаДокумента.УдалитьСубконто2 КАК УдалитьСубконто2,
	|	РасшифровкаДокумента.УдалитьСубконто3 КАК УдалитьСубконто3,");
	//-- НЕ УТ
	
	Запрос.УстановитьПараметр("Валюта", ДанныеЗаполнения.Валюта);
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("ТекущаяДата", ТекущаяДатаСеанса());
	Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТабличнаяЧасть.Очистить();
	
	ИспользоватьНачислениеЗарплаты = Константы.ИспользоватьНачислениеЗарплаты.Получить();
	
	СуммаДокумента = ДанныеЗаполнения.СуммаДокумента * Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов;
	Пока Выборка.Следующий() Цикл
		Сумма = Мин(Выборка.Сумма, СуммаДокумента);
		ПересчитатьНДС = (Сумма <> Выборка.Сумма);
		СуммаДокумента = СуммаДокумента - Сумма;
		Если Сумма > 0 Тогда
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Сумма = Сумма;
			
			Если ПересчитатьНДС Тогда
				ПараметрыПересчетаНДС = Новый Структура("ЦенаВключаетНДС", Истина);
				СтруктураДействий = Новый Структура("ПересчитатьСуммуНДС", ПараметрыПересчетаНДС);
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, Неопределено);
			КонецЕсли;
			
			//++ НЕ УТ
			Если ИспользоватьНачислениеЗарплаты
				И ДанныеЗаполнения.Свойство("ХозяйственнаяОперация")
				И ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ВыплатаЗарплатыЧерезКассу Тогда
				
				Если ТабличнаяЧасть.Количество() Тогда
					ДанныеЗаполнения.Вставить("Ведомость", Выборка.Ведомость);
				КонецЕсли;
			КонецЕсли;
			//-- НЕ УТ
		КонецЕсли;
	КонецЦикла;
	
	Если ТабличнаяЧасть.Количество() = 0 Тогда
		Строка = ТабличнаяЧасть.Добавить();
		Строка.СуммаВзаиморасчетов = СуммаДокумента;
		Строка.Сумма = СуммаДокумента;
		Строка.СтатьяДвиженияДенежныхСредств = ДанныеЗаполнения.СтатьяДвиженияДенежныхСредств;
	КонецЕсли;
	
	Если ТабличнаяЧасть.Количество() Тогда
		ДанныеЗаполнения.Вставить("СуммаДокумента", ТабличнаяЧасть.Итог("Сумма"));
	КонецЕсли;
	
	// Учет особенностей решения
	СкорректироватьДанныеЗаполненияПодОсобенностиРешения(ДанныеЗаполнения, ТабличнаяЧасть);
	
КонецПроцедуры

// Процедура заполняет документ на основании ожидаемого поступления денежных средств
Процедура ЗаполнитьДокументПоОжидаемомуПоступлениюДенежныхСредств(ДанныеЗаполнения, ТабличнаяЧасть, ФормаОплаты) Экспорт
	
	МассивСсылок = Новый Массив;
	МассивИдентификаторов = Новый Массив;
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.ОжидаемоеПоступлениеДенежныхСредств") Тогда
		МассивСсылок.Добавить(ДанныеЗаполнения);
		БанковскийСчетКасса = Неопределено;
		СуммаПлатежа = 0;
		
		ВызватьИсключение НСтр("ru = 'Без указания платежной позиции заполнение невозможно.'");
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		// заполнение без платежной позиции невозможно
		Если НЕ ДанныеЗаполнения.Свойство("ИдентификаторПозиции") Тогда
			ВызватьИсключение НСтр("ru = 'Без указания платежной позиции заполнение невозможно.'");
		КонецЕсли;
		
		Если ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("ДокументСсылка.ОжидаемоеПоступлениеДенежныхСредств") Тогда
			МассивСсылок.Добавить(ДанныеЗаполнения.ДокументОснование);
		ИначеЕсли ТипЗнч(ДанныеЗаполнения.ДокументОснование) = Тип("Массив") Тогда
			МассивСсылок = ДанныеЗаполнения.ДокументОснование;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеЗаполнения.ИдентификаторПозиции) = Тип("УникальныйИдентификатор") Тогда
			МассивИдентификаторов.Добавить(ДанныеЗаполнения.ИдентификаторПозиции);
		ИначеЕсли ТипЗнч(ДанныеЗаполнения.ИдентификаторПозиции) = Тип("Массив") Тогда
			МассивИдентификаторов = ДанныеЗаполнения.ИдентификаторПозиции;
		КонецЕсли;
		
		БанковскийСчетКасса = ДанныеЗаполнения.БанковскийСчетКасса;
		СуммаПлатежа = ДанныеЗаполнения.Сумма;
	КонецЕсли;
	
	// Заполним данные шапки документа.
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	//++ УХ_Встраивание
	|	РазмещениеЗаявок.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	РазмещениеЗаявок.ПриходРасход КАК ПриходРасход,
	|	РазмещениеЗаявок.БанковскийСчетКасса КАК СчетОрганизации,
	|	ВЫБОР КОГДА РазмещениеЗаявок.БанковскийСчетКасса ССЫЛКА Справочник.БанковскиеСчетаОрганизаций ТОГДА РазмещениеЗаявок.БанковскийСчетКасса ИНАЧЕ ЗНАЧЕНИЕ(Справочник.БанковскиеСчетаОрганизаций.ПустаяСсылка) КОНЕЦ КАК БанковскийСчет,
	|	ВЫБОР КОГДА РазмещениеЗаявок.БанковскийСчетКасса ССЫЛКА Справочник.Кассы ТОГДА РазмещениеЗаявок.БанковскийСчетКасса ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Кассы.ПустаяСсылка) КОНЕЦ КАК Касса,
	//|	РазмещениеЗаявок.ДатаИсполнения КАК ДатаПроведенияБанком,
	|	Заявка.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
	|	Заявка.ВалютаОплаты КАК ВалютаДокумента,
	|	Заявка.Валюта КАК ВалютаВзаиморасчетов,
	|	Заявка.ЦФО КАК ЦФО,
	|	Заявка.Проект КАК Проект,
	|	Заявка.ВидОперацииУХ КАК ВидОперацииУХ,
	|	Заявка.ХозяйственнаяОперация КАК ВидОперации,
	|	РазмещениеЗаявок.КурсПлатежа КАК КурсПлатежа,
	|	РазмещениеЗаявок.КратностьПлатежа КАК КратностьПлатежа,
	|	РазмещениеЗаявок.Проведен КАК Проведен,
	|	СостоянияСогласования.СостояниеОбъекта КАК СостояниеСогласования,
	|	СостоянияИсполнения.СостояниеИсполнения КАК СостояниеИсполнения,
	|	Заявка.Контрагент КАК Контрагент,
	|	Заявка.Договор КАК Договор,
	//-- УХ_Встраивание
	|	Заявка.Организация КАК Организация,
	//|	Заявка.Касса КАК Касса,
	|	Заявка.Валюта КАК Валюта,
	|	Заявка.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	Заявка.НазначениеПлатежа КАК НазначениеПлатежа,
	|	Заявка.Ссылка КАК ДокументОснование,
	|	Заявка.СуммаДокумента КАК СуммаДокумента,
	|	Заявка.СуммаДокумента КАК Сумма
	|ИЗ
	|	Документ.ОжидаемоеПоступлениеДенежныхСредств КАК Заявка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеЗаявок КАК РазмещениеЗаявок
	|		ПО РазмещениеЗаявок.ЗаявкаНаОперацию ССЫЛКА Документ.ОжидаемоеПоступлениеДенежныхСредств
	|			И Заявка.Ссылка = РазмещениеЗаявок.ЗаявкаНаОперацию
	|			И РазмещениеЗаявок.ИдентификаторПозиции В (&МассивИдентификаторов)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних КАК СостоянияСогласования
	|		ПО РазмещениеЗаявок.ЗаявкаНаОперацию = СостоянияСогласования.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполнения
	|		ПО РазмещениеЗаявок.ЗаявкаНаОперацию = СостоянияИсполнения.ДокументПланирования
	|			И РазмещениеЗаявок.ИдентификаторПозиции = СостоянияИсполнения.ИдентификаторПозиции
	|ГДЕ
	|	Заявка.Ссылка В (&МассивСсылок)";
	
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ДанныеЗаполнения = Новый Структура;
	Для Каждого Колонка Из РезультатЗапроса[0].Колонки Цикл
		ДанныеЗаполнения.Вставить(Колонка.Имя);
	КонецЦикла;
	ДанныеЗаполнения.Удалить("Проведен");
	
	Выборка = РезультатЗапроса[0].Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
	Иначе
		
		#Область УХ_Внедрение
		ВызватьИсключение НСтр("ru = 'Не найдены данные по данной позиции оплаты.'");
		#КонецОбласти
		
		Возврат;
	КонецЕсли;
	
	//
	Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Выборка.Контрагент, Выборка.ХозяйственнаяОперация);
	
	#Область УХ_Внедрение
	ТекстОшибки="";
	
	Если НЕ Выборка.Проведен Тогда
		ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Создание платежных поручений возможно только на основании проведенных документов.'");
	КонецЕсли;
	
	Если Выборка.ПриходРасход <> Перечисления.ВидыДвиженийПриходРасход.Приход Тогда
		ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Создание документов поступления денежных средств возможно только на основании приходных платежных позиций.'");
	КонецЕсли;
	
	Если ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
	
		Если НЕ ЗначениеЗаполнено(Выборка.БанковскийСчет) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Не указан банковский счет организации для поступления денежных средств'");
		КонецЕсли;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Выборка.Касса) Тогда
			ТекстОшибки = ТекстОшибки + Символы.ПС + НСтр("ru = 'Не указана касса организации для поступления денежных средств'");
		КонецЕсли;
		
	КонецЕсли;
		
	Если Выборка.СостояниеСогласования <> Перечисления.СостоянияСогласования.Утверждена Тогда
		ТекстОшибки=ТекстОшибки+ Символы.ПС + СтрШаблон(НСтр("ru = 'Документ %1 не утвержден'"), Выборка.ДокументПланирования);
	КонецЕсли;
	
	Если Выборка.СостояниеИсполнения = Перечисления.СостоянияИсполненияЗаявки.НаИсполнении
		ИЛИ Выборка.СостояниеИсполнения = Перечисления.СостоянияИсполненияЗаявки.Исполнена Тогда
		
		ТекстОшибки=ТекстОшибки+ Символы.ПС + СтрШаблон(НСтр("ru = '%1 находится в состоянии %2'"),Выборка.ДокументПланирования, Выборка.СостояниеИсполнения);
		
	КонецЕсли;
	ТекстОшибки = Сред(ТекстОшибки, 2);
	
	Если Не ПустаяСтрока(ТекстОшибки) Тогда
		
		ВызватьИсключение ТекстОшибки;
		Возврат;
		
	КонецЕсли;	
	
	#КонецОбласти 
	
	//// ПКО
	//ДенежныеСредстваСервер.ЗаполнитьРеквизитыДокументаПоФормеОплаты(
	//	Перечисления.ФормыОплаты.Наличная,
	//	ДанныеЗаполнения);
	//
	//НоваяСтрока = ТабличнаяЧасть.Добавить();
	//ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	
	//
	Коэффициенты = РаботаСКурсамиВалютУТ.ПолучитьКоэффициентыПересчетаВалюты(Выборка.ВалютаДокумента, ДанныеЗаполнения.Валюта, ТекущаяДатаСеанса(), Выборка.Организация);
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КурсВалюты.ЗаявкаНаОперацию КАК ЗаявкаНаОперацию,
	|	КурсВалюты.ИдентификаторПозиции КАК ИдентификаторПозиции,
	|	КурсВалюты.ВалютаВзаиморасчетов КАК Валюта,
	|	КурсВалюты.КурсПлатежа / КурсВалюты.КратностьПлатежа КАК КоэффициентПересчета
	|ПОМЕСТИТЬ КурсыВалют
	|ИЗ
	|	РегистрСведений.РазмещениеЗаявок КАК КурсВалюты
	|ГДЕ
	|	КурсВалюты.ЗаявкаНаОперацию ССЫЛКА Документ.ОжидаемоеПоступлениеДенежныхСредств
	|	И КурсВалюты.ЗаявкаНаОперацию В (&МассивСсылок)
	|	И КурсВалюты.ИдентификаторПозиции В (&МассивИдентификаторов)
	|	И КурсВалюты.КратностьПлатежа <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств КАК ДокументПланирования,
	|	РасшифровкаПлатежа.ИдентификаторПозиции,
	|	РасшифровкаПлатежа.Партнер,
	|	РасшифровкаПлатежа.ОбъектРасчетов,
	|	РасшифровкаПлатежа.Заказ,
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов) ТОГДА
	|			СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) * КурсыВалют.КоэффициентПересчета
	|		ИНАЧЕ
	|			СУММА(РасшифровкаПлатежа.Сумма)
	|	КОНЕЦ КАК Сумма,
	|	СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	РасшифровкаПлатежа.ВалютаВзаиморасчетов,
	//|	РасшифровкаПлатежа.СтатьяРасходов,
	//|	РасшифровкаПлатежа.АналитикаРасходов,
	//|	РасшифровкаПлатежа.АналитикаАктивовПассивов,
	|	РасшифровкаПлатежа.ЦФО КАК ЦФО,
	|	РасшифровкаПлатежа.Проект КАК Проект,
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежа.Аналитика1 КАК Аналитика1,
	|	РасшифровкаПлатежа.Аналитика2 КАК Аналитика2,
	|	РасшифровкаПлатежа.Аналитика3 КАК Аналитика3,
	|	РасшифровкаПлатежа.Аналитика4 КАК Аналитика4,
	|	РасшифровкаПлатежа.Аналитика5 КАК Аналитика5,
	|	РасшифровкаПлатежа.Аналитика6 КАК Аналитика6,
	|	РасшифровкаПлатежа.ДоговорКредитаДепозита,
	|	РасшифровкаПлатежа.ТипСуммыКредитаДепозита,
	|	РасшифровкаПлатежа.ДоговорЗаймаСотруднику,
	|	РасшифровкаПлатежа.Подразделение,
	|	РасшифровкаПлатежа.НаправлениеДеятельности,
	|	//ДанныеСубконто
	|	РасшифровкаПлатежа.СтавкаНДС,
	|	(СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) * КурсыВалют.КоэффициентПересчета *
	|		(РасшифровкаПлатежа.СтавкаНДС.Ставка / 100) / ((РасшифровкаПлатежа.СтавкаНДС.Ставка / 100) + 1)) КАК СуммаНДС,
	|	РасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств
	|
	|ИЗ (
	|	ВЫБРАТЬ
	|		РасшифровкаДокумента.ИдентификаторПозиции,
	|		РасшифровкаДокумента.Партнер,
	|		РасшифровкаДокумента.ОбъектРасчетов,
	|		РасшифровкаДокумента.Заказ,
	|		РасшифровкаДокумента.Сумма КАК Сумма,
	|		РасшифровкаДокумента.Сумма КАК СуммаВзаиморасчетов,
	|		РасшифровкаДокумента.ВалютаВзаиморасчетов,
	//|		РасшифровкаДокумента.СтатьяДоходов,
	//|		РасшифровкаДокумента.АналитикаДоходов,
	//|		РасшифровкаДокумента.АналитикаРасходов,
	//|		РасшифровкаДокумента.АналитикаАктивовПассивов,
	|		РасшифровкаДокумента.СтатьяДвиженияДенежныхСредств,
	|		РасшифровкаДокумента.Аналитика1,
	|		РасшифровкаДокумента.Аналитика2,
	|		РасшифровкаДокумента.Аналитика3,
	|		РасшифровкаДокумента.Аналитика4,
	|		РасшифровкаДокумента.Аналитика5,
	|		РасшифровкаДокумента.Аналитика6,
	|		РасшифровкаДокумента.ДоговорКредитаДепозита,
	|		РасшифровкаДокумента.ТипСуммыКредитаДепозита,
	|		РасшифровкаДокумента.ДоговорЗаймаСотруднику,
	|		РасшифровкаДокумента.Подразделение,
	|		РасшифровкаДокумента.НаправлениеДеятельности,
	|		//ПоляСубконто
	|		РасшифровкаДокумента.СтавкаНДС,
	|		РасшифровкаДокумента.СуммаНДС КАК СуммаНДС,
	|		РасшифровкаДокумента.ЗаявкаНаОперацию КАК ЗаявкаНаРасходованиеДенежныхСредств,
	|		ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов) КАК ПланированиеСуммы,
	|		РасшифровкаДокумента.ЦФО КАК ЦФО,
	|		РасшифровкаДокумента.Проект КАК Проект,
	|		РасшифровкаДокумента.ВалютаВзаиморасчетов КАК Валюта
	|	ИЗ
	|			РегистрСведений.ДвиженияБюджетированияПоПозициям КАК РасшифровкаДокумента
	|		
	|	ГДЕ
	|		РасшифровкаДокумента.ЗаявкаНаОперацию В(&МассивСсылок)
	|			И РасшифровкаДокумента.ИдентификаторПозиции В (&МассивИдентификаторов)
	|	)
	|	КАК РасшифровкаПлатежа
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|			КурсыВалют КАК КурсыВалют
	|		ПО
	|			РасшифровкаПлатежа.Валюта = КурсыВалют.Валюта
	|			И РасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств = КурсыВалют.ЗаявкаНаОперацию
	|			И РасшифровкаПлатежа.ИдентификаторПозиции = КурсыВалют.ИдентификаторПозиции
	|
	|СГРУППИРОВАТЬ ПО
	|	РасшифровкаПлатежа.ИдентификаторПозиции,
	|	РасшифровкаПлатежа.Партнер,
	|	РасшифровкаПлатежа.Заказ,
	|	РасшифровкаПлатежа.Объектрасчетов,
	|	РасшифровкаПлатежа.ВалютаВзаиморасчетов,
	//|	РасшифровкаПлатежа.СтатьяРасходов,
	//|	РасшифровкаПлатежа.АналитикаРасходов,
	//|	РасшифровкаПлатежа.АналитикаАктивовПассивов,
	|	РасшифровкаПлатежа.ЦФО,
	|	РасшифровкаПлатежа.Проект,
	|	РасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств,
	|	РасшифровкаПлатежа.Аналитика1,
	|	РасшифровкаПлатежа.Аналитика2,
	|	РасшифровкаПлатежа.Аналитика3,
	|	РасшифровкаПлатежа.Аналитика4,
	|	РасшифровкаПлатежа.Аналитика5,
	|	РасшифровкаПлатежа.Аналитика6,
	|	РасшифровкаПлатежа.ДоговорКредитаДепозита,
	|	РасшифровкаПлатежа.ТипСуммыКредитаДепозита,
	|	РасшифровкаПлатежа.ДоговорЗаймаСотруднику,
	|	РасшифровкаПлатежа.Подразделение,
	|	РасшифровкаПлатежа.НаправлениеДеятельности,
	|	//ГруппировкаСубконто
	|	РасшифровкаПлатежа.СтавкаНДС,
	|	РасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств,
	|	РасшифровкаПлатежа.ПланированиеСуммы,
	|	КурсыВалют.КоэффициентПересчета
	|
	|ИМЕЮЩИЕ
	|	ВЫБОР
	|		КОГДА РасшифровкаПлатежа.ПланированиеСуммы = ЗНАЧЕНИЕ(Перечисление.СпособыПланированияОплатыЗаявок.ВВалютеВзаиморасчетов)
	|			ТОГДА СУММА(РасшифровкаПлатежа.СуммаВзаиморасчетов) * КурсыВалют.КоэффициентПересчета
	|		ИНАЧЕ СУММА(РасшифровкаПлатежа.Сумма)
	|	КОНЕЦ > 0
	|	
	|УПОРЯДОЧИТЬ ПО
	|	РасшифровкаПлатежа.ЗаявкаНаРасходованиеДенежныхСредств
	|";
	
	Запрос.УстановитьПараметр("Валюта", ДанныеЗаполнения.Валюта);
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Запрос.УстановитьПараметр("МассивИдентификаторов", МассивИдентификаторов);
	
	УстановитьПривилегированныйРежим(Истина);
	Выборка = Запрос.Выполнить().Выбрать();
	УстановитьПривилегированныйРежим(Ложь);
	
	ТабличнаяЧасть.Очистить();
	
	СуммаДокумента = ДанныеЗаполнения.СуммаДокумента * Коэффициенты.КоэффициентПересчетаВВалютуВзаиморасчетов;
	Пока Выборка.Следующий() Цикл
		Сумма = Мин(Выборка.Сумма, СуммаДокумента);
		ПересчитатьНДС = (Сумма <> Выборка.Сумма);
		СуммаДокумента = СуммаДокумента - Сумма;
		Если Сумма > 0 Тогда
			НоваяСтрока = ТабличнаяЧасть.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			НоваяСтрока.Сумма = Сумма;
			НоваяСтрока.ДокументПланирования = Выборка.ЗаявкаНаРасходованиеДенежныхСредств;
			
			Если ПересчитатьНДС Тогда
				ПараметрыПересчетаНДС = Новый Структура("ЦенаВключаетНДС", Истина);
				СтруктураДействий = Новый Структура("ПересчитатьСуммуНДС", ПараметрыПересчетаНДС);
				ОбработкаТабличнойЧастиСервер.ОбработатьСтрокуТЧ(НоваяСтрока, СтруктураДействий, Неопределено);
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(Выборка.Партнер) Тогда
				НоваяСтрока.Партнер = Партнер;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ДанныеЗаполнения.СуммаДокумента <> ТабличнаяЧасть.Итог("СуммаВзаиморасчетов") Тогда
		Для каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
			СтрокаТЧ.СуммаВзаиморасчетов = 0;
		КонецЦикла;
	КонецЕсли;
	
	Если ТабличнаяЧасть.Количество() Тогда
		ДанныеЗаполнения.Вставить("СуммаДокумента", ТабличнаяЧасть.Итог("Сумма"));
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет документ по встречной операции распоряжения на перемещение денежных средств.
//
// Параметры:
//	ДокументОснование - ДокументСсылка.РаспоряжениеНаПеремещениеДенежныхСредств - Документ - основание
//	ДокументОбъект - ДокументОбъект - Текущий документ
//	ДанныеЗаполнения - Структура - Данные заполнения
//	РасшифровкаПлатежа - ТабличныеЧасти - Табличная часть "Расшифровка платежа" документа.
//
Процедура ЗаполнитьДокументПо2ПозицииРаспоряжения(
	Знач ДокументОснование,
	ДокументОбъект,
	ДанныеЗаполнения,
	РасшифровкаПлатежа = Неопределено
	) Экспорт
	
	#Область УХ_Встраивание
	// заполнение без платежной позиции невозможно
	Если НЕ ЗначениеЗаполнено(ДанныеЗаполнения.ИдентификаторПозиции) Тогда
		ВызватьИсключение НСтр("ru = 'Без указания платежной позиции заполнение невозможно.'");
	КонецЕсли;
	#КонецОбласти 
	
	// Заполним данные шапки документа.
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Позиция2.ВидОперацииУХ КАК ВидОперацииУХ,
	|	ВЫБОР
	|		КОГДА Позиция2.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
	|			ТОГДА ДанныеДокумента.ВидОперацииУХ.ВстречныйВидОперацииПереводСобственныхСредств.ВидОперацииДДСНаличныйРасчет
	|		ИНАЧЕ ДанныеДокумента.ВидОперацииУХ.ВстречныйВидОперацииПереводСобственныхСредств.ВидОперацииДДСБезналичныйРасчет
	|	КОНЕЦ КАК ХозяйственнаяОперация,
	|	ДанныеДокумента.Организация КАК Организация,
	|	ДанныеДокумента.Подразделение КАК Подразделение,
	|	ДанныеДокумента.Валюта КАК Валюта,
	|	ДанныеДокумента.Ссылка КАК РаспоряжениеНаПеремещениеДенежныхСредств,
	|	ДанныеДокумента.Ссылка КАК ДокументОснование,
	|	СостоянияСогласования.СостояниеОбъекта КАК Статус,
	|	СостоянияИсполнения.СостояниеИсполнения КАК СостояниеИсполнения,
	|	ВЫБОР
	|		КОГДА Позиция2.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
	|			ТОГДА ВЫРАЗИТЬ(Позиция2.БанковскийСчетКасса КАК Справочник.Кассы)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Касса,
	|	ВЫБОР
	|		КОГДА Позиция1.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Наличная)
	|			ТОГДА ВЫРАЗИТЬ(Позиция1.БанковскийСчетКасса КАК Справочник.Кассы)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК КассаОтправитель,
	|	ВЫБОР
	|		КОГДА Позиция2.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
	|			ТОГДА ВЫРАЗИТЬ(Позиция2.БанковскийСчетКасса КАК Справочник.БанковскиеСчетаОрганизаций)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК БанковскийСчет,
	|	ВЫБОР
	|		КОГДА Позиция1.ФормаОплаты = ЗНАЧЕНИЕ(Перечисление.ФормыОплаты.Безналичная)
	|			ТОГДА ВЫРАЗИТЬ(Позиция1.БанковскийСчетКасса КАК Справочник.БанковскиеСчетаОрганизаций)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК БанковскийСчетОтправитель,
	|	ДанныеДокумента.ПлатежиПо275ФЗ КАК ПлатежиПо275ФЗ,
	|	ДанныеДокумента.ДоговорСЗаказчиком КАК ДоговорСЗаказчиком,
	|	ДанныеДокумента.ТипПлатежаФЗ275 КАК ТипПлатежаФЗ275,
	|	ДанныеДокумента.НазначениеПлатежа КАК НазначениеПлатежа,
	|	Позиция2.Сумма КАК СуммаДокумента
	|ИЗ
	|	Документ.РаспоряжениеНаПеремещениеДенежныхСредств КАК ДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних КАК СостоянияСогласования
	|		ПО ДанныеДокумента.Ссылка = СостоянияСогласования.Объект
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеЗаявок КАК Позиция1
	|		ПО (Позиция1.ЗаявкаНаОперацию ССЫЛКА Документ.РаспоряжениеНаПеремещениеДенежныхСредств)
	|			И (ДанныеДокумента.Ссылка = (ВЫРАЗИТЬ(Позиция1.ЗаявкаНаОперацию КАК Документ.РаспоряжениеНаПеремещениеДенежныхСредств)))
	|			И (Позиция1.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Расход))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.РазмещениеЗаявок КАК Позиция2
	|		ПО (Позиция2.ЗаявкаНаОперацию ССЫЛКА Документ.РаспоряжениеНаПеремещениеДенежныхСредств)
	|			И (ДанныеДокумента.Ссылка = (ВЫРАЗИТЬ(Позиция2.ЗаявкаНаОперацию КАК Документ.РаспоряжениеНаПеремещениеДенежныхСредств)))
	|			И (Позиция2.ПриходРасход = ЗНАЧЕНИЕ(Перечисление.ВидыДвиженийПриходРасход.Приход))
	|			И (Позиция2.ИдентификаторПозиции = &ИдентификаторПозиции)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних КАК СостоянияИсполнения
	|		ПО (Позиция2.ЗаявкаНаОперацию = СостоянияИсполнения.ДокументПланирования)
	|			И (Позиция2.ИдентификаторПозиции = СостоянияИсполнения.ИдентификаторПозиции)
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
	Запрос.УстановитьПараметр("ИдентификаторПозиции", ДанныеЗаполнения.ИдентификаторПозиции);
	
	//МассивОпераций = Новый Массив;
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеБезналичныхДенежныхСредств") Тогда
	//	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	//	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк);
		ПредставлениеДокумента = НСтр("ru = 'Поступление безналичных ДС';
										|en = 'Non-cash receipt statement'");
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПриходныйКассовыйОрдер") Тогда
	//	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
	//	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств);
		ПредставлениеДокумента = НСтр("ru = 'Приходный кассовый ордер';
										|en = 'Cash receipt statement'");
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.РасходныйКассовыйОрдер") Тогда
	//	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк);
	//	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк);
	//	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ВыдачаДенежныхСредствВДругуюКассу);
		ПредставлениеДокумента = НСтр("ru = 'Расходный кассовый ордер';
										|en = 'Cash voucher'");
		
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.СписаниеБезналичныхДенежныхСредств") Тогда
	//	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.ПеречислениеДенежныхСредствНаДругойСчет);
	//	МассивОпераций.Добавить(Перечисления.ХозяйственныеОперации.СнятиеНаличныхДенежныхСредств);
		ПредставлениеДокумента = НСтр("ru = 'Списание безналичных ДС';
										|en = 'Non-cash debiting'");
		
	КонецЕсли;
	//Запрос.УстановитьПараметр("МассивОпераций", МассивОпераций);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не требуется вводить %1 на основании документа %2';
				|en = 'It is not required to enter %1 based on document %2'"),
			ПредставлениеДокумента,
			ДокументОснование);
		ВызватьИсключение Текст;
	Иначе
		ДанныеЗаполнения = Новый Структура;
		Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
			ДанныеЗаполнения.Вставить(Колонка.Имя);
		КонецЦикла;
	
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		
		#Область УХ_Встраивание
		//Если Выборка.Статус <> Перечисления.СтатусыРаспоряженийНаПеремещениеДенежныхСредств.КОплате Тогда
		Если Выборка.Статус <> Перечисления.СостоянияСогласования.Утверждена Тогда
		#КонецОбласти 
			Текст = НСтр("ru = 'Распоряжение на перемещение денежных средств не утверждено к оплате';
						|en = 'Cash transfer reference is not confirmed for payment'");
			ВызватьИсключение Текст;
		КонецЕсли;
		#Область УХ_Встраивание
		// Дополнить данными заполнения
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ДвиженияБюджетированияПоПозициям.ЗаявкаНаОперацию КАК ДокументПланирования,
		|	ДвиженияБюджетированияПоПозициям.ИдентификаторПозиции КАК ИдентификаторПозиции,
		|	ДвиженияБюджетированияПоПозициям.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
		|	ДвиженияБюджетированияПоПозициям.Аналитика1 КАК Аналитика1,
		|	ДвиженияБюджетированияПоПозициям.Аналитика2 КАК Аналитика2,
		|	ДвиженияБюджетированияПоПозициям.Аналитика3 КАК Аналитика3,
		|	ДвиженияБюджетированияПоПозициям.ЦФО КАК ЦФО,
		|	ДвиженияБюджетированияПоПозициям.Проект КАК Проект
		|ИЗ
		|	РегистрСведений.ДвиженияБюджетированияПоПозициям КАК ДвиженияБюджетированияПоПозициям
		|ГДЕ
		|	ДвиженияБюджетированияПоПозициям.ИдентификаторПозиции = &ИдентификаторПозиции";
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Для Каждого Колонка Из РезультатЗапроса.Колонки Цикл
				ДанныеЗаполнения.Вставить(Колонка.Имя);
			КонецЦикла;
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Выборка);
		КонецЕсли;
		#КонецОбласти 
	
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДокументПоРаспоряжениюНаПеремещениеДенежныхСредств()

Функция ЭтоСписаниеБезЗаявки(Объект) Экспорт
	
	Если ЗначениеЗаполнено(Объект.ДокументПланирования) 
		И Метаданные.ОпределяемыеТипы.ДокументыСГрафикамРасчетов.Тип.СодержитТип(ТипЗнч(Объект.ДокументПланирования)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции
#КонецОбласти 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура заполняет кассу, банковский счет или эквайринговый терминал в зависимости от формы оплаты документа.
//
// Параметры:
//	ФормаОплаты - ПеречислениеСсылка.ФормыОплаты - Фактическая форма оплаты заявки
//	ДанныеЗаполнения - Структура - Данные для заполнения документа.
//
Процедура ЗаполнитьРеквизитыДокументаПоФормеОплаты(ФормаОплаты, ДанныеЗаполнения, ВалютаПлатежа = Неопределено)
	
	Если ФормаОплаты = Перечисления.ФормыОплаты.Наличная Тогда
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация = ДанныеЗаполнения.Организация;
		СтруктураПараметров.ФормаОплаты = ФормаОплаты;
		СтруктураПараметров.Касса       = ДанныеЗаполнения.Касса;
		СтруктураПараметров.Валюта      = ВалютаПлатежа;

		Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
		Если Не ЗначениеЗаполнено(Касса) Тогда
			ТекущаяКасса = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущаяКасса", "");
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
				Если ДанныеЗаполнения.Организация =
					Справочники.Кассы.ПолучитьРеквизитыКассы(ТекущаяКасса).Организация
				Тогда
					Касса = ТекущаяКасса;
				КонецЕсли;
			Иначе
				Касса = ТекущаяКасса;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Касса) Тогда
			ДанныеЗаполнения.Вставить("Касса", Касса);
			Если Не ЗначениеЗаполнено(ВалютаПлатежа) Тогда
				Валюта = Справочники.Кассы.ПолучитьРеквизитыКассы(Касса).Валюта;
				ДанныеЗаполнения.Вставить("Валюта", Валюта);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.Безналичная Тогда
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация    = ДанныеЗаполнения.Организация;
		СтруктураПараметров.ФормаОплаты    = ФормаОплаты;
		СтруктураПараметров.БанковскийСчет = ДанныеЗаполнения.БанковскийСчет;
		СтруктураПараметров.Валюта         = ВалютаПлатежа;
		
		БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
		
		Если Не ЗначениеЗаполнено(БанковскийСчет) Тогда
			ТекущийБанковскийСчет = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущийБанковскийСчет", "");
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
				Если ДанныеЗаполнения.Организация =
					Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(ТекущийБанковскийСчет).Организация
				Тогда
					БанковскийСчет = ТекущийБанковскийСчет;
				КонецЕсли;
			Иначе
				БанковскийСчет = ТекущийБанковскийСчет;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(БанковскийСчет) Тогда
			ДанныеЗаполнения.Вставить("БанковскийСчет", БанковскийСчет);
			Если Не ЗначениеЗаполнено(ВалютаПлатежа) Тогда
				Валюта = Справочники.БанковскиеСчетаОрганизаций.ПолучитьРеквизитыБанковскогоСчетаОрганизации(БанковскийСчет).Валюта;
				ДанныеЗаполнения.Вставить("Валюта", Валюта);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ФормаОплаты = Перечисления.ФормыОплаты.ПлатежнаяКарта Тогда
		
		ЭквайринговыйТерминал =
			Справочники.ЭквайринговыеТерминалы.ЭквайринговыйТерминалПоУмолчанию(ДанныеЗаполнения.Организация);
		Если Не ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
			ТекущийЭквайринговыйТерминал = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ТекущийЭквайринговыйТерминал", "");
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Организация) Тогда
				Если ДанныеЗаполнения.Организация =
					Справочники.ЭквайринговыеТерминалы.ПолучитьРеквизитыЭквайринговогоТерминала(ТекущийЭквайринговыйТерминал).Организация
				Тогда
					ЭквайринговыйТерминал = ТекущийЭквайринговыйТерминал;
				КонецЕсли;
			Иначе
				ЭквайринговыйТерминал = ТекущийЭквайринговыйТерминал;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЭквайринговыйТерминал) Тогда
			Реквизиты = Справочники.ЭквайринговыеТерминалы.ПолучитьРеквизитыЭквайринговогоТерминала(ЭквайринговыйТерминал);
			ДанныеЗаполнения.Вставить("ЭквайринговыйТерминал", ЭквайринговыйТерминал);
			ДанныеЗаполнения.Вставить("Валюта", Реквизиты.Валюта);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СкорректироватьДанныеЗаполненияПодОсобенностиРешения(ДанныеЗаполнения, ТабличнаяЧасть)
	
	// В РКО нет БанковскийСчетПолучатель. Есть только БанковскийСчет
	Если ДанныеЗаполнения.ФормаОплатыЗаявки = Перечисления.ФормыОплаты.Наличная 
		И (ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ИнкассацияДенежныхСредствВБанк
		  ИЛИ ДанныеЗаполнения.ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.СдачаДенежныхСредствВБанк) Тогда
		  
		//
		ДанныеЗаполнения.БанковскийСчет = ДанныеЗаполнения.БанковскийСчетПолучатель;
		 
	КонецЕсли;
	
	// Подменим статью в шапке и ее аналитики в шапке, если есть расшифровка
	Если ТабличнаяЧасть.Количество() > 0 Тогда
		Строка = ТабличнаяЧасть[0];
		Если ЗначениеЗаполнено(Строка.СтатьяДвиженияДенежныхСредств) Тогда
			РеквизитыБюджетирования = "СтатьяДвиженияДенежныхСредств, Аналитика1, Аналитика2, Аналитика3, Аналитика4, Аналитика5, Аналитика6";
			ЗаполнитьЗначенияСвойств(ДанныеЗаполнения, Строка, РеквизитыБюджетирования);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
 