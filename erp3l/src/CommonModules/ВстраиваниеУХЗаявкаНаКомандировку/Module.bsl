#Область МодульОбъекта

Процедура ПриКопировании(Объект, ОбъектКопирования) Экспорт
	Объект.БанковскийСчет 	= Справочники.БанковскиеСчетаОрганизаций.ПустаяСсылка();
	Объект.Касса 			= Справочники.Кассы.ПустаяСсылка();
	Для каждого СтрокаТабличнойЧасти Из Объект.ВыдачаПодОтчет Цикл
		СтрокаТабличнойЧасти.ИдентификаторПозиции = Неопределено;	
	КонецЦикла; 
	ЗаявкиНаОперации.ПриКопировании(Объект, ОбъектКопирования);
	
КонецПроцедуры

Процедура ПередЗаписью(Объект, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	// установим вид операции по умолчанию
	Объект.ВидОперацииУХ = Справочники.ВидыОперацийУХ.ПеречислениеПодотчетномуЛицу;
	
	// Закешируем режим записи и признак нового.
	Объект.ДополнительныеСвойства.Вставить("ЭтоНовый", Объект.ЭтоНовый());
	Объект.ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	//
	Реквизиты = ЗаявкиНаОперации.РеквизитыДокументаЗаявка(ТипЗнч(Объект.Ссылка));
	Объект.ДополнительныеСвойства.Вставить("Реквизиты", Реквизиты);
	
	//
	ЭтоБДДС 	= Истина;
	ЭтоРасход 	= Истина;
	
	// Если нет таблицы платежной позиции - формируем ее по данным документа.
	Объект.ДополнительныеСвойства.Вставить("ПлатежнаяПозиция", ПлатежныеПозиции.НоваяПлатежнаяПозицияПоДаннымДокументаЗаявкаНаКомандировку(Объект));
	//ОбновитьДанныеПоВалютам(Объект, Реквизиты); 
	// Заполняем соответствие курсов валют документа + ВалютаУпрУчета
	ПланируемаяДатаОперации = ЗаявкиНаОперации.РеквизитЗаявки(Объект, Реквизиты.ПланируемаяДатаОперации);
	ДатаКурса 				= ?(ЗначениеЗаполнено(ПланируемаяДатаОперации), ПланируемаяДатаОперации, Объект.Дата);
	СоответствиеКурсовВалют = Новый Соответствие;
	ВалютаУпрУчета 			= ВстраиваниеОПКПереопределяемый.КонстантаВалютаУправленческогоУчета();
	Курс 					= РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаУпрУчета, ДатаКурса);
	СоответствиеКурсовВалют.Вставить(ВалютаУпрУчета, Курс);
	ВалютаДокумента 		= ЗаявкиНаОперации.РеквизитЗаявки(Объект, Реквизиты.ВалютаДокумента);
	Если СоответствиеКурсовВалют.Получить(ВалютаДокумента) = Неопределено Тогда
		Курс = РаботаСКурсамиВалют.ПолучитьКурсВалюты(ВалютаДокумента, ДатаКурса);
		СоответствиеКурсовВалют.Вставить(ВалютаДокумента,Курс);
	КонецЕсли;
	
	//
	Если Реквизиты.ОбъектРасчетов.ЕстьРеквизит Тогда
		Договор = ЗаявкиНаОперации.РеквизитЗаявки(Объект, Реквизиты.ДоговорКонтрагента);
		Если ЗначениеЗаполнено(Договор) 
			И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ПорядокРасчетов") <> Перечисления.ПорядокРасчетов.ПоЗаказамНакладным Тогда
			ЗаявкиНаОперации.УстановитьРеквизитЗаявки(Объект, Реквизиты.ОбъектРасчетов, Договор);
		КонецЕсли;
	КонецЕсли;
	
	//
	Если ЭтоРасход Тогда
		Организация = ЗаявкиНаОперации.РеквизитЗаявки(Объект, Реквизиты.Организация);
		Контрагент 	= ЗаявкиНаОперации.РеквизитЗаявки(Объект, Реквизиты.Контрагент);
		//
		Если ЭтоБДДС Тогда
			БанковскийСчетКасса = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Объект.ДополнительныеСвойства, "БанковскийСчетКасса");
			СчетПолучателя 		= ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Объект.ДополнительныеСвойства, "СчетПолучателя");
		
			Если Не ЗначениеЗаполнено(БанковскийСчетКасса) Тогда
				Объект.ДополнительныеСвойства.Вставить("БанковскийСчетКасса", 
					УправлениеДенежнымиСредствамиУХ.ПолучитьБанковскийСчетПоУмолчанию(
						Организация, 
						ЗаявкиНаОперации.РеквизитЗаявки(Объект, Реквизиты.ВалютаОплаты), 
						ЗаявкиНаОперации.РеквизитЗаявки(Объект, Реквизиты.ФормаОплаты)
					)
				);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// 
	РеквизитСтатья = Реквизиты.СтатьяБюджета;
	Если РеквизитСтатья.РазмещенВТЧ Тогда
		ТЧ = Объект[РеквизитСтатья.ИмяТЧ];
		ИтогоПоСтатьямСуммаДокумента = ТЧ.Итог("Сумма");
		Если (ИтогоПоСтатьямСуммаДокумента > 0 ) И НЕ ВстраиваниеОПККлиентСерверПереопределяемый.ЭтоПеремещениеВнутриОрганизации(Объект.ВидОперацииУХ) Тогда
			ЗаявкиНаОперации.УстановитьРеквизитЗаявки(Объект, Реквизиты.СуммаДокумента, ИтогоПоСтатьямСуммаДокумента);
		ИначеЕсли ТЧ.Количество()=0 Тогда
			НоваяСтрока = ТЧ.Добавить();
			НоваяСтрока.Сумма = ЗаявкиНаОперации.РеквизитЗаявки(Объект, Реквизиты.СуммаДокумента);
		КонецЕсли;
	КонецЕсли;
	
	//
	СуммаДокумента 		= ЗаявкиНаОперации.РеквизитЗаявки(Объект, Реквизиты.СуммаДокумента);
	ВалютаДокумента 	= ЗаявкиНаОперации.РеквизитЗаявки(Объект, Реквизиты.ВалютаДокумента);
		
	// Необходим контроль директив
	Если ЭтоБДДС И ЭтоРасход И НЕ Объект.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Объект.ДополнительныеСвойства.Вставить("НеобходимКонтрольДиректив", Истина);
	КонецЕсли;
	
	//
	Если НЕ Объект.ЭтоНовый() И ЗначениеЗаполнено(Объект.Ссылка.Проект) Тогда 
		Объект.ДополнительныеСвойства.Вставить("СтруктураДанныхСтар", 
			ВстраиваниеОПКПереопределяемый.ПолучитьСтруктуруДанныхДляКорректировкиПланов(Объект.Ссылка));
	КонецЕсли;
	
	ВстраиваниеОПКПереопределяемый.ПроверитьНеобходимостьУстановкиСтатусаЧерновик(Объект, РежимЗаписи);
	  
КонецПроцедуры

Процедура ПриЗаписи(Объект, Отказ) Экспорт
	ЗаявкиНаОперации.ПриЗаписи(Объект, Отказ);
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Объект, Отказ) Экспорт
	ЗаявкиНаОперации.ОбработкаУдаленияПроведения(Объект, Отказ);
КонецПроцедуры

Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	//
	ОМ = ЗаявкиНаОперации;
	РеквизитыЗаявки = ОМ.РеквизитыДокументаЗаявка(ТипЗнч(Объект.Ссылка));
		
	ЗаявкиНаОперации.ОбработкаЗаполнения(Объект, ДанныеЗаполнения, СтандартнаяОбработка);
	
	//
	ДанныеЗаказаПоставщика = Неопределено;
	ОчиститьДокОснованиеПослеЗаполнения = Ложь;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
		ОМ.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.ДоговорКонтрагента, ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения)=Тип("ДокументСсылка.ОперативныйПлан") Тогда
		
		Объект.ДокументПланирования = ДанныеЗаполнения;
	  	//
		ВидОперацииОснования = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.ДокументПланирования, "ВидОперации");
		Если ВидОперацииОснования = Перечисления.ВидыОперацийОперативныйПлан.ВводЛимитов Тогда
			ОчиститьДокОснованиеПослеЗаполнения = Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения)=Тип("ДокументСсылка.ЗаявкаНаРасходованиеДенежныхСредств") Тогда
		
		Объект.ДокументПланирования = ДанныеЗаполнения;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		ОМ.ЗаполнитьРеквизитыШапкиЗаявки(Объект, ДанныеЗаполнения, РеквизитыЗаявки);
		
		Если ДанныеЗаполнения.Свойство("БанковскийСчет") И ЗначениеЗаполнено(ДанныеЗаполнения.БанковскийСчет) Тогда
			Объект.ДополнительныеСвойства.Вставить("БанковскийСчетКасса", ДанныеЗаполнения.БанковскийСчет);
		КонецЕсли;
		
	КонецЕсли;
	
	// Определим незаполненные реквизиты значениями по умолчанию.
	Если Не ЗначениеЗаполнено(ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.ПланируемаяДатаОперации)) Тогда
		ПроизводственныйКалендарь = КалендарныеГрафикиУХВызовСервераПовтИсп.ОсновнойПроизводственныйКалендарь();
		ОМ.УстановитьРеквизитЗаявки(
			Объект, 
			РеквизитыЗаявки.ПланируемаяДатаОперации, 
			КалендарныеГрафикиУХ.ПолучитьДатуПоКалендарю(ПроизводственныйКалендарь, ТекущаяДатаСеанса(), 1));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.ВалютаДокумента)) Тогда
		ОМ.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.ВалютаДокумента, ОбщегоНазначенияПовтИспУХ.ПолучитьВалютуУправленческогоУчета());
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.ВалютаОплаты)) Тогда
		ОМ.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.ВалютаОплаты, ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.ВалютаДокумента));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.Организация)) Тогда
		ОМ.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.Организация, ОбщегоНазначенияУХ.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.ЦФО)) Тогда
		ОМ.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.ЦФО, ОбщегоНазначенияУХ.ПолучитьЗначениеПоУмолчанию("ОсновнойЦФО"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.Проект)) Тогда
		ОМ.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.Проект, ОбщегоНазначенияУХ.ПолучитьЗначениеПоУмолчанию("ОсновнойПроект"));
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ОМ.РеквизитЗаявки(Объект, РеквизитыЗаявки.ФормаОплаты)) Тогда
		ОМ.УстановитьРеквизитЗаявки(Объект, РеквизитыЗаявки.ФормаОплаты, Перечисления.ФормыОплаты.Безналичная);
		Объект.ФормаОплатыНаличная 			= Ложь;
		Объект.ФормаОплатыБезналичная 		= Истина;
		Объект.ФормаОплатыПлатежнаяКарта 	= Ложь;
		
		Если ДанныеЗаполнения = Неопределено Тогда
			ДанныеЗаполнения = Новый Структура;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
			ДанныеЗаполнения.Вставить("ФормаОплатыЗаявки",			Объект.ФормаОплатыЗаявки);
			ДанныеЗаполнения.Вставить("ФормаОплатыНаличная",		Объект.ФормаОплатыНаличная);
			ДанныеЗаполнения.Вставить("ФормаОплатыБезналичная",		Объект.ФормаОплатыБезналичная);
			ДанныеЗаполнения.Вставить("ФормаОплатыПлатежнаяКарта",	Объект.ФормаОплатыПлатежнаяКарта);
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполним табличную часть "Движения операции".
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура")  
		И (НЕ ДанныеЗаполнения.Свойство("РасшифровкаПлатежаЗаполнена") ИЛИ ДанныеЗаполнения.РасшифровкаПлатежаЗаполнена = ЛОЖЬ) Тогда
		Если РеквизитыЗаявки.СтатьяБюджета.РазмещенВТЧ Тогда
			ИмяТЧ = РеквизитыЗаявки.СтатьяБюджета.ИмяТЧ;
			
			Если Объект[ИмяТЧ].Количество() = 0 ИЛИ ЗначениеЗаполнено(Объект.ДокументПланирования) Тогда
				// Если расшифровка платежа не заполнена ранее или есть документ планирования, то 
				
				Партнер = ДенежныеСредстваСервер.ПолучитьПартнераПоКонтрагенту(Объект.Контрагент, Объект.ХозяйственнаяОперация);
				
				Объект[ИмяТЧ].Очистить();
				
				Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
					И ДанныеЗаполнения.Свойство("СтатьяБюджета") Тогда
					
					ЗаполнитьТабличнуюЧастьПоСтруктуре(Объект, ИмяТЧ, ДанныеЗаполнения)
					
				КонецЕсли;
				
				Если Не Объект[ИмяТЧ].Количество() Тогда
					Объект[ИмяТЧ].Добавить();
				КонецЕсли;
				
				СтатьяБюджета = ВидыОперацийУХВызовСервераПовтИсп.ОсновнаяСтатьяБюджетаПоВидуОперации(Объект.ВидОперацииУХ);
				
				Для каждого Строка ИЗ Объект[ИмяТЧ] Цикл 
					
					Если ДанныеЗаполнения.Свойство("ДоговорКредитаДепозита") 
						И ЗначениеЗаполнено(ДанныеЗаполнения.ДоговорКредитаДепозита)
						И НЕ ЗначениеЗаполнено(Строка.ДоговорКредитаДепозита) Тогда
						
						Строка.ДоговорКредитаДепозита = ДанныеЗаполнения.ДоговорКредитаДепозита;
					КонецЕсли;
					
					Если ДанныеЗаполнения.Свойство("ТипСуммыКредитаДепозита") 
						И ЗначениеЗаполнено(ДанныеЗаполнения.ТипСуммыКредитаДепозита)
						И НЕ ЗначениеЗаполнено(Строка.ТипСуммыКредитаДепозита) Тогда
						
						Строка.ТипСуммыКредитаДепозита = ДанныеЗаполнения.ТипСуммыКредитаДепозита;
					КонецЕсли;
	
									
					Если НЕ ЗначениеЗаполнено(Строка.СтатьяДвиженияДенежныхСредств) Тогда
						Строка.СтатьяДвиженияДенежныхСредств = СтатьяБюджета;
					КонецЕсли;
					
					Строка.Партнер = Партнер;
					
					Если ДанныеЗаполнения.Свойство("ЭлементСтруктурыЗадолженности") Тогда
						Строка.ЭлементСтруктурыЗадолженности = ДанныеЗаполнения.ЭлементСтруктурыЗадолженности;
					КонецЕсли;
					
				КонецЦикла;
								
				Если Объект.СуммаДокумента <> 0 Тогда
					КоличествоСтрок = Объект[ИмяТЧ].Количество();
					СуммаВСтроке = Объект.СуммаДокумента / КоличествоСтрок;
					СуммаВПоследнейСтроке = Объект.СуммаДокумента - СуммаВСтроке *(КоличествоСтрок - 1);
					Для Сч = 0 По (КоличествоСтрок - 2) Цикл
						Объект[ИмяТЧ][Сч].Сумма = СуммаВСтроке;
						ОперативноеПланированиеФормыУХКлиентСервер.ПересчитатьСуммуНДС(Объект[ИмяТЧ][Сч]);
					КонецЦикла;
					Объект[ИмяТЧ][КоличествоСтрок - 1].Сумма = СуммаВПоследнейСтроке;
					ОперативноеПланированиеФормыУХКлиентСервер.ПересчитатьСуммуНДС(Объект[ИмяТЧ][Сч]);
					
				КонецЕсли;
								
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЕсли;
	
	Если ОчиститьДокОснованиеПослеЗаполнения Тогда
		ДокументПланирования = Неопределено;
	КонецЕсли;
	
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов) Экспорт
	//
	//Если МассивНепроверяемыхРеквизитов.Найти("РасшифровкаПлатежа") <> Неопределено Тогда	
	//	МассивНепроверяемыхРеквизитов.Добавить("РасшифровкаПлатежа.ЭлементСтруктурыЗадолженности");
	//КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить("ФормаОплатыЗаявки");
	
	ЗаявкиНаОперации.ОбработкаПроверкиЗаполнения(Объект, Отказ, ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьТабличнуюЧастьПоСтруктуре(Объект, ИмяТЧ, Знач ДанныеЗаполнения)
	
	ИмяТЧ = "ВыдачаПодОтчет";
	
	НоваяСтрока = Объект[ИмяТЧ].Добавить();
	НоваяСтрока.СтатьяДвиженияДенежныхСредств = ДанныеЗаполнения.СтатьяБюджета;		
	
	Для Сч = 1 По 3 Цикл
		Если ДанныеЗаполнения.Свойство("Аналитика" + Сч) Тогда
			НоваяСтрока["Аналитика" + Сч] = ДанныеЗаполнения["Аналитика" + Сч];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьПлатежныеПозицииПоДаннымДокумента(Форма);
	Объект = Форма.Объект;
	НоваяПлатежнаяПозиция = ПлатежныеПозиции.НоваяПлатежнаяПозицияПоДаннымДокумента(Объект);
	Форма.ПлатежнаяПозиция.Загрузить(НоваяПлатежнаяПозиция);
	ПлатежныеПозицииКлиентСервер.ОбновитьПредставлениеПлатежнойПозиции(Форма);
КонецПроцедуры

Процедура ПриИзмененииСчетаСписания(Форма) Экспорт
	
	Объект = Форма.Объект;
	// Заглушка для заявок
	Форма.ПлатежнаяПозиция[0].БанковскийСчетКасса = Объект.БанковскийСчет;
	
	ЗаявкиНаОперации.ПриИзмененииБанковскогоСчетаКассы(Форма);
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область СтандартныеОбработчики
	
// нетиповое событие документа. Вызывается перед исполнением основного кода
Процедура ПриЧтенииСозданииНаСервере(Форма) Экспорт
	
	// Если реквизит формы РеквизитыДокумента существует и заполнен, то дальнейшая инициализация не нужна
	Если ЗаявкиНаОперации.ТребуетсяИнициализацияФормы(Форма) Тогда
		
		Элементы = Форма.Элементы;
		
		#Область СтраницаАналитикиПланирования
		
		ДействиеПриИзменении 	= Новый Структура("ПриИзменении", "Подключаемый_ПриИзмененииЭлементаУХ");
		ПараметрыЭлементов 		= ПолучитьПараметрыЭлементов();
		
		СтраницаАналитик = ФормыУХ.СоздатьГруппуФормы(Элементы, "АналитикиПланирования", 
		НСтр("ru = 'Аналитики учета и планирования'"), ВидГруппыФормы.Страница, Элементы.ГруппаСтраницы, Элементы.СтраницаЗаказать);
		ГруппаАналитикиБюджета 	= ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаАналитикиБюджета", , ,  СтраницаАналитик);
		ПараметрыВертикаль 		= Новый Структура("ОтображатьЗаголовок, Группировка, ", Ложь, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная);
		ГруппаАналитикиБюджетаЛевая  = ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаАналитикиБюджетаЛевая", , ,  ГруппаАналитикиБюджета,, ПараметрыВертикаль);
		ГруппаАналитикиБюджетаПравая = ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаАналитикиБюджетаПравая", , ,  ГруппаАналитикиБюджета,, ПараметрыВертикаль);
		
		////
		#КонецОбласти 
		//
		// ОПК
		ПараметрыРазмещения = Новый Структура;
		ПараметрыРазмещения.Вставить("ПараметрыЭлементов", 				ПолучитьПараметрыЭлементов());
		ПараметрыРазмещения.Вставить("СтраницаКонтроля", 				ФормыУХ.РазместитьВГруппе(Форма.Элементы.ГруппаСтраницы));
		ПараметрыРазмещения.Вставить("ПредставлениеПлатежнойПозции", 	ФормыУХ.РазместитьПередЭлементом(Форма.Элементы.Декорация1));
		//
		// Создаем реквизиты формы документа
		ЗаявкиНаОперации.СоздатьРеквизитыФормыЗаявки(Форма);
		//
		// Создаем элементы формы заявки
		ЗаявкиНаОперации.СоздатьЭлементыФормыЗаявки(Форма, ПараметрыРазмещения);
		СоздатьЭлементыФормыДокумента(Форма);
		//
		// Инициализировать созданные реквизиты и элементы
		ЗаявкиНаОперации.ИнициализироватьФормуЗаявки(Форма);
		//
	    // Конец ОПК
		//
				
		ПодготовитьФормуНаСервере(Форма);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		ЗаявкиНаОперации.ЗаполнитьИзмененностьРеквизитов(Форма);
	Иначе
		// для новых документов, при первоначальном открытии, пользователь ничего не успел поменять
	КонецЕсли; 
	
КонецПроцедуры

// Обработчик события изменения элемента формы
Процедура ПриИзмененииЭлементаУХ(Форма, ИмяЭлемента) экспорт
	
	ТребуетсяВызватьУправлениеФормой = Истина;
	Если ИмяЭлемента = "ЦФО"
		ИЛИ ИмяЭлемента = "ЦФОШапка"
		ИЛИ ИмяЭлемента = "ЦФОБезРазбиения" Тогда
		ЗаявкиНаОперации.ПриИзмененииЦФО(Форма);
	ИначеЕсли ИмяЭлемента = "Проект" 
		ИЛИ ИмяЭлемента = "ПроектШапка"
		ИЛИ ИмяЭлемента = "ПроектБезРазбиения" Тогда
		ЗаявкиНаОперации.ПриИзмененииПроекта(Форма);
	Иначе		
		ТребуетсяВызватьУправлениеФормой = Ложь;
	КонецЕсли;
	
	Если ТребуетсяВызватьУправлениеФормой Тогда
		УправлениеФормой(Форма);
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеФормой(Форма)
	Форма.УправлениеФормой();
КонецПроцедуры


Функция ПолучитьПараметрыЭлементов()
	
	ПараметрыЭлементов = ФормыУХ.ПолучитьПараметрыЭлементовПоУмолчанию();
	ПараметрыЭлементов.ГруппаВ.ОтображатьЗаголовок  = Ложь;
	ПараметрыЭлементов.ГруппаГ.ОтображатьЗаголовок  = Ложь;
	
	Возврат ПараметрыЭлементов;
	
КонецФункции

Процедура ПодготовитьФормуНаСервере(Форма)
	
	Объект = Форма.Объект;
	
	ПлатежныеПозиции.ИнициализироватьПлатежнуюПозициюЗаявки(Форма);
	ОбновитьОтборПоФункциональнымНаправлениям(Форма);
	ОперативноеПланированиеФормыУХ.ОпределитьПриоритетОперации(Форма, "ПриоритетЗаявки", Форма.РеквизитыДокумента);
	ОперативноеПланированиеФормыУХ.ОпределитьНаличиеПредопределенныхРолей(Форма);
	УстановитьЗначенияОтбораСтатей(Форма);
	//
	КонтрольУХ.ИнициализироватьРезультатыКонтроля(Форма);
	
КонецПроцедуры


Процедура УстановитьЗначенияОтбораСтатей(Форма)
	ОперативноеПланированиеФормыУХКлиентСервер.УстановитьЗначенияОтбораСтатей(Форма.ЗначенияВыбораПриходРасход, Форма.РеквизитыДокумента.ПриходРасход.Значение);
КонецПроцедуры


Процедура ОбновитьОтборПоФункциональнымНаправлениям(Форма)
	
	Элементы 	= Форма.Элементы;
	Объект 		= Форма.Объект;
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(Элементы.СотрудникиСтатьяДвиженияДенежныхСредств);
	МассивЭлементов.Добавить(Элементы.СтатьяДвиженияДенежныхСредств);
	
	ОперативноеПланированиеФормыУХКлиентСервер.УстановитьОтборПоФункциональнымНаправлениям(Объект.ЦФО, МассивЭлементов)
	
КонецПроцедуры

#КонецОбласти

#Область УправлениеФормой
// Определяет свойства полей формы в зависимости от данных
//
// Возвращаемое значение:
//    ТаблицаЗначений - таблица с колонками Поля, Условие, Свойства.
//
Функция ЗаполнитьНастройкиПолейФормы(Настройки) Экспорт
	
	// Элементы формы, которые всегда невидимы
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("АналитикиПланирования");
	ФормыУХ.НовыйОтбор(Элемент.Условие, "Дополнительно.Истина", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("СтрокаПлатежнаяПозиция");
	ФормыУХ.НовыйОтбор(Элемент.Условие, "Дополнительно.Истина", Ложь);
	Элемент.Свойства.Вставить("Видимость");
	Элемент = Настройки.Добавить();
	Элемент.Поля.Добавить("ЗакрытьЗаявку");
	ФормыУХ.НовыйОтбор(Элемент.Условие, "Дополнительно.Истина", Ложь);
	Элемент.Свойства.Вставить("Видимость");

	
	// СтатьяДДС - добавляем аналитики шапки к настройкам статьи бюджета шапки
	МассивНастроек = ФормыУХ.ПолучитьНастройкиПоля(Настройки, "СтатьяДвиженияДенежныхСредств");
	Для Каждого Настройка Из МассивНастроек Цикл
		Настройка.Поля.Добавить("АналитикаШапка1");
		Настройка.Поля.Добавить("АналитикаШапка2");
		Настройка.Поля.Добавить("АналитикаШапка3");
		Настройка.Поля.Добавить("АналитикаШапка4");
		Настройка.Поля.Добавить("АналитикаШапка5");
		Настройка.Поля.Добавить("АналитикаШапка6");
	КонецЦикла;


КонецФункции

Процедура СоздатьЭлементыФормыДокумента(Форма)
	
	Если ФормыУХ.ЭлементыФормыУХУжеСозданы(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы 	= Форма.Элементы;
	Объект 		= Форма.Объект;
	
	ФормыУХ.ЭлементыФормыУХДобавлены(Форма);
	ПараметрыЭлементов = ПолучитьПараметрыЭлементов();

	ДействиеПриИзменении = Новый Структура("ПриИзменении", "Подключаемый_ПриИзмененииЭлементаУХ");
	
	ГруппаЦФО 	= ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаЦФО",,,
				  Элементы.ГруппаВыдатьПодОтчет, Элементы.Сотрудники, ПараметрыЭлементов.ГруппаГ); 
	
	ФормыУХ.СоздатьПолеФормы(Элементы, "ЦФО",, "Объект.ЦФО",,		
			ГруппаЦФО, , ПараметрыЭлементов.ПолеВвода28, ДействиеПриИзменении);
	ФормыУХ.СоздатьПолеФормы(Элементы, "Проект",, "Объект.Проект",,	
			ГруппаЦФО, , ПараметрыЭлементов.ПолеВвода28, ДействиеПриИзменении);
	ФормыУХ.СоздатьПолеФормы(Элементы, "ПроектБюджетодержатель",, "ПроектБюджетодержатель",, ГруппаЦФО,, ПараметрыЭлементов.ПолеВвода28, ДействиеПриИзменении);			
	//		
	ШаблонЗаголовка = НСтр("ru = 'Аналитика %1 (списание)'");
	Для Сч = 1 По АналитикиСтатейБюджетовУХКлиентСервер.КоличествоАналитикСтатьи() Цикл
		
		АналитикаСписания = Элементы[СтрШаблон("АналитикаШапка%1", Сч)];
		ЗаполнитьЗначенияСвойств(АналитикаСписания, ПараметрыЭлементов.ПолеВвода28);
		АналитикаСписания.Заголовок = СтрШаблон(ШаблонЗаголовка, Сч);
		
	КонецЦикла;
	
	ФормыУХ.СоздатьПолеФормы(Элементы, "СтатьяДвиженияДенежныхСредств",, "Объект.ЦФО",,		
			Элементы.ГруппаАналитикиБюджетаЛевая, , ПараметрыЭлементов.ПолеВвода28);
	Элементы.СтатьяДвиженияДенежныхСредств.Заголовок = НСтр("ru = 'Статья ДДС (списание)'");
	Элементы.СтатьяДвиженияДенежныхСредств.УстановитьДействие("ПриИзменении", "Подключаемый_СтатьяБюджета_ПриИзменении");

	Элементы.ДатаПлатежа.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииЭлементаУХ");
	
	//ПриоритетЗаявки
	Элемент = ФормыУХ.СоздатьПолеФормы(Элементы, "ПриоритетЗаявки", , "Объект.Приоритет",,
		ГруппаЦФО, , ПараметрыЭлементов.ПолеВвода28);
	Элемент.ПодсказкаВвода = НСтр("ru = '<не указан>'");
	Элемент.РежимВыбораИзСписка = Истина;
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииЭлементаУХ");
	
	ЭлементыКонтроляЛимитов = Новый Массив;
	ЭлементыКонтроляЛимитов.Добавить(Элементы.ЦФО);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.Проект);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.ПредполагаемаяСуммаРасходов);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.Валюта);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.СтатьяДвиженияДенежныхСредств);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.АналитикаШапка1);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.АналитикаШапка2);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.АналитикаШапка3);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.АналитикаШапка4);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.АналитикаШапка5);
	ЭлементыКонтроляЛимитов.Добавить(Элементы.АналитикаШапка6);
	
	Для Каждого Элемент Из ЭлементыКонтроляЛимитов Цикл
		ПереопределениеСобытийФормы.ПереопределитьСобытиеЭлементаФормы(Форма, Элемент, 	"ПриИзменении", "Подключаемый_ПолеФормы_ПриИзменении");
	КонецЦикла;
	
	// Добавить обработчик изменения для таблицыФормы Сотрудники(ВыдачаПодОтчет)
	Элементы.Сотрудники.УстановитьДействие("ПриИзменении", 					"Подключаемый_ПриИзмененииЭлементаУХ");
	Элементы.Сотрудники.УстановитьДействие("ПриОкончанииРедактирования", 	"Подключаемый_ПриОкончанииРедактирования");
	
	Элементы.ГруппаСтатус.Видимость = Ложь;
	
	// Перезаполнить список выбора формы оплаты
	Элементы.ФормаОплаты.СписокВыбора.Очистить();
	Элементы.ФормаОплаты.СписокВыбора.Добавить("Безналичными");
	Элементы.ФормаОплаты.СписокВыбора.Добавить("Наличными");
                                                           	
	
КонецПроцедуры

/// нетиповое событие документа. Вызывается перед исполнением основного кода
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	// Если это новая заявка, и заполнены какие-либо реквизиты, требуемые для платежной позиции, то
	// необходимо их продублировать в платежную позицию
	Если НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка) Тогда
		Если ЗначениеЗаполнено(Форма.Объект.БанковскийСчет) Тогда
			ПриИзмененииСчетаСписания(Форма);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Переопределяемая процедура, вызываемая из одноименного обработчика события формы.
//
// Параметры:
// 	Форма - форма, из обработчика события которой происходит вызов процедуры.
//	см. справочную информацию по событиям управляемой формы.
//
Процедура ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи)Экспорт
	ЗаявкиНаОперации.ПередЗаписьюНаСервере(Форма, Отказ, ТекущийОбъект, ПараметрыЗаписи);
КонецПроцедуры

Процедура ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи) Экспорт
	ЗаявкиНаОперации.ПослеЗаписиНаСервере(Форма, ТекущийОбъект, ПараметрыЗаписи);
КонецПроцедуры

#КонецОбласти  

#Область ФормаСписка

Процедура ФормаСписка_ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	//
	Если ФормыУХ.ЭлементыФормыУХУжеСозданы(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	Форма.СписокДокументов.ПроизвольныйЗапрос = Истина;
	Форма.СписокДокументов.ТекстЗапроса =
	"ВЫБРАТЬ
	|	Заявка.Ссылка КАК Ссылка,
	|	Заявка.ПометкаУдаления КАК ПометкаУдаления,
	|	Заявка.Проведен КАК Проведен,
	|	Заявка.Номер КАК Номер,
	|	Заявка.Дата КАК Дата,
	|	Заявка.СуммаДокумента КАК СуммаДокумента,
	|	Заявка.Валюта КАК Валюта,
	|	Заявка.ФормаОплатыЗаявки КАК ФормаОплатыЗаявки,
	|	Заявка.Ответственный КАК Ответственный,
	|	ЕСТЬNULL(ВЫРАЗИТЬ(РегистрСостояний.СостояниеОбъекта КАК Перечисление.СостоянияСогласования), ЗНАЧЕНИЕ(Перечисление.СостоянияСогласования.Черновик)) КАК Статус,
	|	Заявка.Приоритет КАК ПриоритетОплаты,
	|	Заявка.Организация КАК Организация,
	|	Заявка.ДатаНачала КАК ДатаНачала,
	|	Заявка.ДатаОкончания КАК ДатаОкончания,
	|	Заявка.Комментарий КАК Комментарий,
	|	Заявка.МестоНазначения КАК МестоНазначения,
	|	Заявка.Подразделение КАК Подразделение
	|ИЗ
	|	Документ.ЗаявкаНаКомандировку КАК Заявка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(, Объект ССЫЛКА Документ.ЗаявкаНаКомандировку) КАК РегистрСостояний
	|		ПО (РегистрСостояний.Объект = Заявка.Ссылка)";
	
	//
	ФормыУХ.СоздатьПолеФормы(Форма.Элементы, "ФормаОплатыЗаявки",, "СписокДокументов.ФормаОплатыЗаявки",,		
			Форма.Элементы.Статус.Родитель, Форма.Элементы.Статус);
		
	СоздатьЭлементыФормыСпискаДокументов(Форма);
	
КонецПроцедуры

  
#Область СлужебныеПроцедурыИФункции

Процедура СоздатьЭлементыФормыСпискаДокументов(Форма) 
	
	Элементы = Форма.Элементы;
	
	//
	ФормыУХ.ЭлементыФормыУХДобавлены(Форма);
	
	//
	ПараметрыПоляВвода = Новый Структура;
	ПараметрыПоляВвода.Вставить("ПоложениеЗаголовка", 		ПоложениеЗаголовкаЭлементаФормы.Лево);
	ПараметрыПоляВвода.Вставить("АвтоМаксимальнаяШирина",	Ложь);
	ПараметрыПоляВвода.Вставить("МаксимальнаяШирина",		28);
		
	#Область Приоритет
		
	//
	ГруппаПриоритет = ФормыУХ.СоздатьГруппуФормы(Элементы, "ГруппаПриоритет", , ВидГруппыФормы.ГруппаКолонок, Элементы.Статус.Родитель, Элементы.Статус);
	ГруппаПриоритет.Группировка = ГруппировкаКолонок.ВЯчейке;
	ФормыУХ.СоздатьПолеФормы(Элементы, "ПриоритетТекст", НСтр("ru = 'Приоритет'"), "СписокДокументов.ПриоритетОплаты", , ГруппаПриоритет);
	
	#КонецОбласти 

КонецПроцедуры

#КонецОбласти 

#КонецОбласти


