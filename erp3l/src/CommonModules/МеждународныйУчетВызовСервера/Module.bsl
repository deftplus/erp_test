
#Область СлужебныйПрограммныйИнтерфейс

// Получает свойства счета международного учета
//
// Параметры:
//  Счет - ПланСчетовСсылка.Международный - Счет международного плана счетов.
//
// Возвращаемое значение:
//  Структура - свойства счета
//				Ключ - имя свойства счета.
//				Значение - значение свойства.
//
Функция СвойстваСчета(Счет) Экспорт
	
	Возврат МеждународныйУчетСерверПовтИсп.СвойстваСчета(Счет);
	
КонецФункции

// Вызывается из модуля МеждународныйУчетКлиент для отчета "СверкаОборотовМУиБУ".
// 
// Параметры:
//  Адрес - Строка - Адрес
//  ИндексТекущегоЭлемента - Число - Индекс текущего элемента
// 
// Возвращаемое значение:
//  ПланСчетовСсылка - Получить счет строки сверки
//
Функция ПолучитьСчетСтрокиСверки(Адрес,ИндексТекущегоЭлемента) Экспорт
	
	СчетСтрокиСверки = Неопределено;
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(Адрес);
	СчетМУ = ПолучитьЗначениеПоляРасшифровки(ДанныеРасшифровки, "СчетМУ", ИндексТекущегоЭлемента, "СуммаКонБУ");
	СчетБУ = ПолучитьЗначениеПоляРасшифровки(ДанныеРасшифровки, "СчетБУ", ИндексТекущегоЭлемента, "СуммаКонБУ");
	
	Если ЗначениеЗаполнено(СчетМУ) Тогда
		СчетСтрокиСверки = СчетМУ;
	ИначеЕсли ЗначениеЗаполнено(СчетБУ) Тогда
		СчетСтрокиСверки = СчетБУ;
	КонецЕсли;
	
	Возврат СчетСтрокиСверки;
	
КонецФункции

// Вызывается из модуля МеждународныйУчетКлиент для отчета "СверкаОборотовМУиБУ".
//
// Параметры:
// 	Адрес - Строка - 
// 	Параметры - Структура из КлючИЗначение - Параметры отбора:
// 		* Счет - ПланСчетовСсылка - 
// 		* Период - СтандартныйПериод - 
Процедура ЗаполнитьДанныеРасшифровкиАнализаСчетаХозрасчетный(Адрес, Параметры) Экспорт
	
	ДанныеРасшифровки = Новый Структура("НастройкиРасшифровки");
	ДанныеРасшифровки.Вставить("НастройкиРасшифровки", Новый Структура("АнализСчета"));
	
	ПользовательскиеНастройки = Новый ПользовательскиеНастройкиКомпоновкиДанных;
	
	НастройкиОтчета = ПользовательскиеНастройки.ДополнительныеСвойства;
	НастройкиОтчета.Вставить("ПоказательБУ", Истина);
	НастройкиОтчета.Вставить("РежимРасшифровки", Истина);
	Для Каждого Параметр Из Параметры Цикл
		Если Параметр.Ключ = "Период" Тогда
			Период = Параметр.Значение; // СтандартныйПериод - 
			НастройкиОтчета.Вставить("НачалоПериода", Период.ДатаНачала);
			НастройкиОтчета.Вставить("КонецПериода", Период.ДатаОкончания);
		Иначе
			НастройкиОтчета.Вставить(Параметр.Ключ, Параметр.Значение);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеРасшифровки.НастройкиРасшифровки.АнализСчета = ПользовательскиеНастройки;
	
	ПоместитьВоВременноеХранилище(ДанныеРасшифровки, Адрес);
	
КонецПроцедуры

// Вызывается из модуля МеждународныйУчетКлиент для стандартных отчетов 
// Возвращает структуру параметров расшифровки.
//
// Параметры:
//  Расшифровка - ПланСчетовСсылка.Международный - Счет международного плана счетов.
//	АдресДанныхРасшифровки - Строка - Адрес расшифровки во временном хранилище.
//  ПараметрыРасшифровки - Массив - Параметры, значения которых нужно получить из расшифровки.
//  ПоляРасшифровки - Массив - Поля, значения которых нужно получить из расшифровки.
//
// Возвращаемое значение:
//  Структура - данные расшифровки.
//
Функция ПараметрыСтандартногоОтчета(Расшифровка, АдресДанныхРасшифровки, ПараметрыРасшифровки, ПоляРасшифровки) Экспорт

	ПараметрыОтчета = Новый Структура;
	ОтборыОтчета 	= Новый Структура;
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки); // ДанныеРасшифровкиКомпоновкиДанных - 
	
	СписокПолейРасшифровки = Новый СписокЗначений;
	ДобавитьРодителейПоляРасшифровки(ДанныеРасшифровки.Элементы[Расшифровка], СписокПолейРасшифровки);
	
	Для каждого ДанныеПоля Из СписокПолейРасшифровки Цикл
		
		ИмяПоля = ДанныеПоля.Представление;
		Если ПоляРасшифровки.Найти(ИмяПоля) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ОтборыОтчета.Свойство(ИмяПоля) ИЛИ ПараметрыОтчета.Свойство(ИмяПоля) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеПоля.Значение) = Тип("Структура") Тогда
			ОтборыОтчета.Вставить(ИмяПоля, ДанныеПоля.Значение);
		Иначе
			ПараметрыОтчета.Вставить(ИмяПоля, ДанныеПоля.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Для каждого ИмяПараметра Из ПараметрыРасшифровки Цикл
		ЗначениеПараметра = ДанныеРасшифровки.Настройки.ПараметрыДанных.Элементы.Найти(ИмяПараметра);
		Если ЗначениеПараметра = Неопределено ИЛИ НЕ ЗначениеПараметра.Использование Тогда
			Продолжить;
		КонецЕсли;
		ПараметрыОтчета.Вставить(ИмяПараметра, ЗначениеПараметра.Значение);
	КонецЦикла; 
	
	СтруктураДанных = Новый Структура("Поля,Отборы", ПараметрыОтчета, ОтборыОтчета);
	
	Возврат СтруктураДанных;
		
КонецФункции

// Вызывается из модуля МеждународныйУчетКлиент для отчета "ИспользованиеСчетовИСубконтоМеждународныйУчет"
// Возвращает структуру параметров расшифровки.
//
// Возвращаемое значение:
//  Структура - данные расшифровки.
//
Функция ПараметрыРасшифровкиНастроек(Расшифровка, АдресДанныхРасшифровки) Экспорт
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки); // ДанныеРасшифровкиКомпоновкиДанных - 
	
	ПоляГруппировки = Новый Структура;
	ОтчетыУТВызовСервераПереопределяемый.ПолучитьЗначенияПолей(ПоляГруппировки, ДанныеРасшифровки.Элементы, Расшифровка);
	
	ТекущееПоле = Новый Структура;
	ОтчетыУТВызовСервераПереопределяемый.ПолучитьЗначениеПоля(ТекущееПоле, ДанныеРасшифровки.Элементы[Расшифровка]);
	
	ПараметрыРасшифровки = Новый Структура("ВидОтчета,ЭлементОтчета,ЭтоПроизводный");
	ПараметрыРасшифровки.ЭтоПроизводный = Ложь;

	Если ПоляГруппировки.Свойство("ВидОтчета") Тогда
		ПараметрыРасшифровки.ВидОтчета = ПоляГруппировки.ВидОтчета;
	КонецЕсли;
	
	Если ТекущееПоле.Свойство("ПроизводныйПоказатель") Тогда
		ПараметрыРасшифровки.ЭтоПроизводный = Истина;
		ПараметрыРасшифровки.ЭлементОтчета = ТекущееПоле.ПроизводныйПоказатель;
	КонецЕсли;
	
	Если ТекущееПоле.Свойство("ЭлементОтчета") Тогда
		ПараметрыРасшифровки.ЭлементОтчета = ТекущееПоле.ЭлементОтчета;
	КонецЕсли;
	
	Возврат ПараметрыРасшифровки;
	
КонецФункции


// Описание
// 
// Параметры:
// 	ДанныеРасшифровки - ДанныеРасшифровкиКомпоновкиДанных - Описание
// 	ИмяПоля - Строка - Описание
// 	НачальныйИндекс - Число - 
// 	ПоследняяКолонка - Строка - Описание
// Возвращаемое значение:
// 	Произвольный, Неопределено - Описание
Функция ПолучитьЗначениеПоляРасшифровки(ДанныеРасшифровки, ИмяПоля, Знач НачальныйИндекс, ПоследняяКолонка = "") Экспорт
	
	Индекс = Число(НачальныйИндекс);
	Результат = Неопределено;
	Пока Индекс >= 0 Цикл
		
		ЭлементРасшифровки = ДанныеРасшифровки.Элементы[Индекс];
		Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
			Поля = ЭлементРасшифровки.ПолучитьПоля();
			ЗначениеПоля = Поля.Найти(ИмяПоля);
			Если ЗначениеПоля <> Неопределено Тогда
				Результат = ЗначениеПоля.Значение;
				Прервать;
			КонецЕсли;
			
			// конец строки
			Если НЕ ПустаяСтрока(ПоследняяКолонка) Тогда
				ЗначениеПоля = Поля.Найти(ПоследняяКолонка);
				Если ЗначениеПоля <> Неопределено Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Индекс = Индекс - 1;
		
	КонецЦикла;
	Возврат Результат;
	
КонецФункции

// Функция переносит настройки вызывающего отчета в настройки отчета расшифровки
//
// Параметры:
//  Параметры - Структура - содержащая ключи
//              ИмяОтчета - Строка - Имя метаданных отчета расшифровки
//              КлючВарианта - Строка - Имя варианта отчета расшифровки
//              КомпоновщикНастроек - КомпоновщикНастроекКомпоновкиДанных - настроенный компоновщик вызывающего отчета
//              ПараметрыСКД - Структура - Ключ - ИмяПараметра; Значение - значение параметра
//              Отбор - Структура - Ключ - ИмяПоля; Значение - ЭлементОтбораКомпоновкиДанных или структура с такими же полями
//              ПоляРасшифровки - Структура - Ключ - ИмяПоля; Значение - Текущее значение выбранного поля расшифровки.
//
// Возвращаемое значение:
//   КомпоновщикНастроекКомпоновкиДанных - настроенный компоновщик отчета расшифровки.
//
Функция НастроитьОтчетРасшифровки(Знач Параметры) Экспорт
	
	// Настройки вызывающего отчета
	НастройкиОтчета = Параметры.КомпоновщикНастроек.ПолучитьНастройки();
	ПользовательскиеНастройкиОтчета = Параметры.КомпоновщикНастроек.ПользовательскиеНастройки; // ПользовательскиеНастройкиКомпоновкиДанных - 
	
	// Настройки отчета расшифровки
	КомпоновщикНастроекРасшифровки = Новый КомпоновщикНастроекКомпоновкиДанных;
	МетаданныеОтчета = Метаданные.Отчеты[Параметры.ИмяОтчета]; // ОбъектМетаданныхОтчет - 
	ИмяСхемы = МетаданныеОтчета.ОсновнаяСхемаКомпоновкиДанных.Имя;
	СхемаРасшифровки = Отчеты[Параметры.ИмяОтчета].ПолучитьМакет(ИмяСхемы);
	НастройкиВарианта = СхемаРасшифровки.ВариантыНастроек[Параметры.КлючВарианта].Настройки;
	КомпоновщикНастроекРасшифровки.ЗагрузитьНастройки(НастройкиВарианта);
	ПользовательскиеНастройкиРасшифровки = КомпоновщикНастроекРасшифровки.ПользовательскиеНастройки;
	ПользовательскийОтборРасшифровки = КомпоновщикНастроекРасшифровки.ФиксированныеНастройки.Отбор;
		
	// Перенесем параметры вызывающего отчета
	Для Каждого Элемент Из ПользовательскиеНастройкиОтчета.Элементы Цикл
		Если ТипЗнч(Элемент) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			КлючПараметра =  Строка(Элемент.Параметр);
			ЗначениеПараметра = Элемент.Значение;
			Использование = Элемент.Использование;
			
			ПараметрОтчетаРасшифровки = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(ПользовательскиеНастройкиРасшифровки, КлючПараметра);
			Если НЕ ПараметрОтчетаРасшифровки = Неопределено Тогда
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
					ПользовательскиеНастройкиРасшифровки, КлючПараметра, ЗначениеПараметра, Использование);
			КонецЕсли;
		КонецЕсли;// это параметр отчета
	КонецЦикла;// по пользовательским настройкам вызывающего отчета
	
	// Установим переданные параметры
	Если Параметры.Свойство("ПараметрыСКД") Тогда
		Для Каждого Параметр Из Параметры.ПараметрыСКД Цикл
			ПараметрОтчетаРасшифровки = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(ПользовательскиеНастройкиРасшифровки, Параметр.Ключ);
			Если НЕ ПараметрОтчетаРасшифровки = Неопределено И ПараметрОтчетаРасшифровки.Использование Тогда
				КомпоновкаДанныхКлиентСервер.УстановитьПараметр(ПользовательскиеНастройкиРасшифровки, Параметр.Ключ, Параметр.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Перенесем отборы вызывающего отчета, кроме переданных и отборов по полям расшифровки.
	ПоляИсключения = Новый Структура;
	// Установим переданные отборы
	Если Параметры.Свойство("Отбор") Тогда
		Для Каждого Отбор Из Параметры.Отбор Цикл
			ПоляИсключения.Вставить(Отбор.Ключ);
			НовыйОтбор = ПользовательскийОтборРасшифровки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйОтбор, Отбор.Значение);
		КонецЦикла;
	КонецЕсли;
	Если Параметры.Свойство("ПоляРасшифровки") И ЗначениеЗаполнено(Параметры.ПоляРасшифровки) Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьСтруктуру(ПоляИсключения, Параметры.ПоляРасшифровки);
	КонецЕсли;
	ФинансоваяОтчетностьСервер.СкопироватьОтбор(
			НастройкиОтчета.Отбор,            // Источник
			ПользовательскийОтборРасшифровки, // Приемник
			Истина,                           // Только используемые
			ПоляИсключения);                  // Поля исключения
	
	// Добавим отборы по полям расшифровки
	Если Параметры.Свойство("ПоляРасшифровки") И ЗначениеЗаполнено(Параметры.ПоляРасшифровки) Тогда
		Для Каждого Поле Из Параметры.ПоляРасшифровки Цикл
			НовыйОтбор = ПользовательскийОтборРасшифровки.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Поле.Ключ);
			НовыйОтбор.ПравоеЗначение = Поле.Значение;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КомпоновщикНастроекРасшифровки;
	
КонецФункции

Функция ЗначенияПолейРасшифровки(Расшифровка, АдресДанныхРасшифровки) Экспорт
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	СписокПолейРасшифровки = Новый СписокЗначений();

	Если Расшифровка <> Неопределено Тогда
		ДобавитьРодителейПоляРасшифровки(ДанныеРасшифровки.Элементы[Расшифровка], СписокПолейРасшифровки);
	КонецЕсли;
	
	Возврат СписокПолейРасшифровки;
	
КонецФункции

Процедура ВернутьДокументыКОтражению(ПараметрыОтражения) Экспорт
	
	ДокументыКОтражению = Новый ТаблицаЗначений();
	ДокументыКОтражению.Колонки.Добавить("Период", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.ДатаВремя));
	ДокументыКОтражению.Колонки.Добавить("ДатаОтражения", ОбщегоНазначения.ОписаниеТипаДата(ЧастиДаты.Дата));
	ДокументыКОтражению.Колонки.Добавить("Документ", Документы.ТипВсеСсылки());
	ДокументыКОтражению.Колонки.Добавить("Организация", Новый ОписаниеТипов("СправочникСсылка.Организации"));
	
	Для Каждого ПараметрыДокумента Из ПараметрыОтражения Цикл
		НоваяСтрока = ДокументыКОтражению.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыДокумента);
		НоваяСтрока.ДатаОтражения = НоваяСтрока.Период;
	КонецЦикла;
	
	Если ДокументыКОтражению.Количество() > 1 Тогда
		ДокументыКОтражению.Свернуть("Период,ДатаОтражения,Документ,Организация");
	КонецЕсли;
	
	МеждународныйУчетПроведениеСервер.ВернутьДокументыКОтражению(ДокументыКОтражению);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьРодителейПоляРасшифровки(ЭлементРасшифровки, СписокПолейРасшифровки)
	
	ИерархическаяСтруктура = Новый Структура("ЛевоеЗначение, ВидСравнения, ПравоеЗначение");
	ИерархическаяСтруктура.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
	
	Если ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля") Тогда
		Для каждого Поле Из ЭлементРасшифровки.ПолучитьПоля() Цикл
			Если Поле.Иерархия Тогда
				ИерархическаяСтруктура.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Поле.Поле);
				ИерархическаяСтруктура.ПравоеЗначение = Поле.Значение;
				СписокПолейРасшифровки.Добавить(ИерархическаяСтруктура, Поле.Поле);
			Иначе
				СписокПолейРасшифровки.Добавить(Поле.Значение, Поле.Поле);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Для каждого Родитель Из ЭлементРасшифровки.ПолучитьРодителей() Цикл
		ДобавитьРодителейПоляРасшифровки(Родитель, СписокПолейРасшифровки);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти