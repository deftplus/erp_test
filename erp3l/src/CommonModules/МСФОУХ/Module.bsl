
#Область ПрограммныйИнтерфейс

// Снимает/устанавливает активность проводок документа (учет по МСФО).
//
Процедура ПереключитьАктивностьПроводокМСФО(Документ) Экспорт
	
	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ПометкаУдаления") Тогда
		Возврат;
	КонецЕсли;

	ПроводкиДокумента = РегистрыБухгалтерии.МСФО.СоздатьНаборЗаписей();
	ПроводкиДокумента.Отбор.Регистратор.Установить(Документ);
	ПроводкиДокумента.Прочитать();

	КоличествоПроводок = ПроводкиДокумента.Количество();
	Если НЕ (КоличествоПроводок = 0) Тогда
		
		// Определяем текущую активность проводок по первой проводке
		ТекущаяАктивностьПроводок = ПроводкиДокумента[0].Активность;

		// Инвертируем текущую активность проводок
		ПроводкиДокумента.УстановитьАктивность(НЕ ТекущаяАктивностьПроводок);
		ПроводкиДокумента.Записать();

	КонецЕсли;
		
КонецПроцедуры // ПереключитьАктивностьПроводокМСФО()

#Область БухОтчеты

Процедура ОбъединитьЗаголовкиПолей(Документ, ТекстОбласти, ОбъединитьПравыеПустые = Истина) Экспорт
	
	Область = Документ.Область("R1C1");
	
	ШаблонОбласти = "R%1C%2:R%3C%4";
	СтрКон = Формат(Документ.ФиксацияСверху, "ЧГ=");
	
	Пока Область <> Неопределено Цикл
		
		Область = Документ.НайтиТекст(ТекстОбласти, Область, , , Истина);
		Если Область = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрНач = Формат(Область.Верх, "ЧГ=");
		КолНач = Формат(Область.Лево, "ЧГ=");
		
		КолонкаКонец = Область.Право;
		Если ОбъединитьПравыеПустые Тогда
						
			Для КолонкаКонец = Область.Право По Документ.ШиринаТаблицы-1 Цикл
				
 				ТекКолонка = Формат(КолонкаКонец + 1, "ЧГ=");
				ИмяОбластиСправа = СтрШаблон(ШаблонОбласти, СтрНач, ТекКолонка, СтрНач, ТекКолонка);
				Если ЗначениеЗаполнено(Документ.Область(ИмяОбластиСправа).Текст) Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;		
		КонецЕсли;
		
		ИмяОбласти = СтрШаблон(ШаблонОбласти, СтрНач, КолНач, СтрКон, Формат(КолонкаКонец, "ЧГ="));
		
		ШапкаВалюты = Документ.Область(ИмяОбласти);
		ШапкаВалюты.Объединить();
	
	КонецЦикла;
	
КонецПроцедуры

// Вызывается из стандартных отчетов МФУ.
//
Процедура ПриКомпоновкеРезультата(СхемаКомпоновкиДанных, КомпоновщикНастроек, ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь; 
	ДокументРезультат.Очистить();
	МаксКоличествоСубконто = УчетМСФОПовтИспУХ.ПолучитьМаксКоличествоСубконто();
	
	КлючВарианта = "";
	Если КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("КлючВарианта") Тогда
		КлючВарианта = КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.КлючВарианта;
	ИначеЕсли КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Свойство("ВариантНаименование") Тогда
		КлючВарианта = СхемаКомпоновкиДанных.ВариантыНастроек[КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.ВариантНаименование];
	КонецЕсли;
		
	НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
	//для отладки в консоли запросов
	//ТиповыеОтчетыУХ.МакетКомпоновкиВXML(ТиповыеОтчетыУХ.ПолучитьМакетКомпоновкиДанныхКоллекции(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных));
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновкиДанных, ДанныеРасшифровки);
	
	ДоработатьМакетКомпоновки(МакетКомпоновки, КомпоновщикНастроек);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
		
КонецПроцедуры

Процедура ДоработатьМакетКомпоновки(МакетКомпоновки, КомпоновщикНастроек)
	
	КлючВарианта = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.КлючВариантаПредопределенный;
	ЭтоКарточка = (КлючВарианта = "КарточкаСчета" Или КлючВарианта = "КарточкаСубконто");
	
	Если КлючВарианта = "КОСВ" Тогда
		Возврат;//не ломаем заголовок счета
	КонецЕсли;
	
	Для каждого Макет Из МакетКомпоновки.Макеты Цикл
		
		ЕстьПараметры = Макет.Параметры.Количество()>0;
		СтрокиДляУдаления = Новый Массив;
		КоличествоСтрок = Макет.Макет.Количество();
		
		Для каждого СтрокаМакета Из Макет.Макет Цикл
			
			СтрокаПустая = ?(Макет.Макет.Количество() > 1, Истина, Ложь);// если в макете области несколько строк, попытаемся удалить пустые(это изза валют)
			
			Для каждого ЯчейкаМакета Из СтрокаМакета.Ячейки Цикл
				
				Если ЯчейкаМакета.Элементы.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СтрокаПустая = Ложь;				
				
				Если Не ЭтоКарточка Тогда
					Продолжить;
				КонецЕсли;
				
				Значение = ЯчейкаМакета.Элементы[0].Значение;
				
				Если (Значение = НСтр("ru = 'Итого'")) Тогда
					ЯчейкаМакета.Элементы[0].Значение = НСтр("ru = 'Обороты за период и сальдо на конец'");
				КонецЕсли;
				
			КонецЦикла;	
			
			Если ЕстьПараметры И СтрокаПустая Тогда
				СтрокиДляУдаления.Добавить(СтрокаМакета);				
			КонецЕсли;

		КонецЦикла;

		Для каждого СтрокаУдаления Из СтрокиДляУдаления Цикл
			Макет.Макет.Удалить(СтрокаУдаления);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СКД_Поля_Счет(СхемаКомпоновкиДанных, ВыводитьНаименованиеСчета = Ложь, ПоляСчетов = "Счет") Экспорт 

	ПоляСчетов = СтрРазделить(ПоляСчетов, ",");	
	ШаблонПредставления = "%1.Код + "", "" + %1.Наименование";
	
	Для каждого ТекущийНД Из СхемаКомпоновкиДанных.НаборыДанных Цикл		
		Для каждого ПолеСчета Из ПоляСчетов Цикл
		
			ПолеСчет = ТекущийНД.Поля.Найти(ПолеСчета);
			Если ПолеСчет = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если ВыводитьНаименованиеСчета = Истина Тогда
				ПолеСчет.ВыражениеПредставления = СтрШаблон(ШаблонПредставления, ПолеСчет.ПутьКДанным);
			Иначе
				ПолеСчет.ВыражениеПредставления = "";//стандартное отображение - в виде кода
			КонецЕсли;				
			
		КонецЦикла;		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьШаблонВыраженияАналитики(СоставАналитики) Экспорт

	Результат = Новый Массив;
	
	ШаблонАналитика = "
	|ВЫБОР 
	|	КОГДА %1 ЕСТЬ NULL ТОГДА """"
	|	КОГДА НЕ ЗначениеЗаполнено(Представление(%1)) ТОГДА ""<...>
	|""
	|	ИНАЧЕ Представление(%1) + ""
	|"" 
	|КОНЕЦ ";
	
	Для каждого _ Из СоставАналитики Цикл
		
		Если СтрНачинаетсяС(_.Значение, "Субконто") Тогда
			ЗаменаШаблону = СтрЗаменить(_.Значение, "Субконто", "Проводка.СубконтоДт");
		Иначе 
			ЗаменаШаблону = _.Значение + "Дт";
		КонецЕсли;
		Результат.Добавить(СтрШаблон(ШаблонАналитика, ЗаменаШаблону));
	    
	КонецЦикла;
	
	Возврат СтрСоединить(Результат, " + ");

КонецФункции

Функция ЭтоВариантДвиженияССубконто(КлючВарианта) Экспорт

	Возврат (СтрНайти(КлючВарианта, "Карточка") > 0) Или (СтрНайти(КлючВарианта, "Проводк") > 0);

КонецФункции

Функция Компоновщик_Поля_Показатели(КомпоновщикНастроек, Отбор, ВидыПоказателей) Экспорт

	ШаблоныПолей = ПолучитьШаблоныПолейРесурса(Отбор.РазвернутоеСальдо, Отбор.ВариантДетали);
	
	ВидимостьПолей = Новый Соответствие;
	ЗаменыПолей = Новый Соответствие;
	СкрытьЗаголовки = Отбор.ВыводимыеРесурсы.Количество() <= 1;
	
	ВыводимыеРесурсы = Отбор.ВыводимыеРесурсы;
	ТиповыеОтчетыУХ.УдалитьВыбранноеПоле(КомпоновщикНастроек.Настройки.Выбор, "Валюта");
	Если Не Отбор.ВариантДетали Тогда
		
		ВыводимыеРесурсы = ОбщегоНазначенияКлиентСервер.СкопироватьСписокЗначений(ВыводимыеРесурсы);//не трогаем изначальный список
		ЭлементВалютнаяСумма = ВыводимыеРесурсы.НайтиПоЗначению("СуммаВВалюте");
		Если ЭлементВалютнаяСумма <> Неопределено Тогда			
			ВыводимыеРесурсы.Удалить(ЭлементВалютнаяСумма);			
			ТиповыеОтчетыУХ.ДобавитьВыбранноеПоле(КомпоновщикНастроек.Настройки.Выбор, "Валюта");			
		КонецЕсли;
		
	КонецЕсли;
	
	Для каждого ЭлементПоказатель Из ВидыПоказателей Цикл
		
		ВыводимыйРесурс = ВыводимыеРесурсы.НайтиПоЗначению(ЭлементПоказатель);
		Включен = (ВыводимыйРесурс <> Неопределено);
		ПоляПоказателя = СтрРазделить(СтрШаблон(ШаблоныПолей, ЭлементПоказатель), ",");
		Для каждого Поле Из ПоляПоказателя Цикл
			Если СкрытьЗаголовки И СтрНачинаетсяС(Поле, "Заголовки.") Тогда
				ВидимостьПолей.Вставить(Новый ПолеКомпоновкиДанных(Поле), -1);
			ИначеЕсли Включен Тогда
				ВидимостьПолей.Вставить(Новый ПолеКомпоновкиДанных(Поле), ВыводимыеРесурсы.Индекс(ВыводимыйРесурс));
			Иначе 
				ВидимостьПолей.Вставить(Новый ПолеКомпоновкиДанных(Поле), -1);
			КонецЕсли;
			
			Если СтрНайти(Поле, "Остаток") > 0 Тогда
				СтароеПоле = ?(Отбор.РазвернутоеСальдо, СтрЗаменить(Поле, "РазвернутыйОстаток", "Остаток"), СтрЗаменить(Поле, "Остаток", "РазвернутыйОстаток"));
				ЗаменыПолей.Вставить(Новый ПолеКомпоновкиДанных(СтароеПоле), Новый ПолеКомпоновкиДанных(Поле));
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ВыбранныеПоля = ТиповыеОтчетыУХ.ПолучитьВыбранныеПоля(КомпоновщикНастроек.Настройки.Выбор, Ложь);
	Для каждого ПолеВыбораСКД Из ВыбранныеПоля Цикл
		
		НовоеПоле = ЗаменыПолей.Получить(ПолеВыбораСКД.Поле);
		Если НовоеПоле <> Неопределено Тогда
			ПолеВыбораСКД.Поле = НовоеПоле;
		КонецЕсли;
		
		ПорядокРесурса = ВидимостьПолей.Получить(ПолеВыбораСКД.Поле);
		Если ПорядокРесурса <> Неопределено Тогда			
			ПолеВыбораСКД.Использование = (ПорядокРесурса >= 0);
			ПолеВыбораСКД.Родитель.Элементы.Сдвинуть(ПолеВыбораСКД, ПолеВыбораСКД.Родитель.Элементы.Индекс(ПолеВыбораСКД) -ПорядокРесурса);
		КонецЕсли;
		
	КонецЦикла;
	
КонецФункции

Функция ПолучитьШаблоныПолейРесурса(РазвернутоеСальдо = Неопределено, ВариантДетали = Ложь) Экспорт
	
	Если ВариантДетали Тогда
		Возврат "Заголовки.%1,Оборот.%1Дт,Оборот.%1Кт,КонечныйОстаток.%1СторонаСальдо,КонечныйОстаток.%1ТекущееСальдо";
	ИначеЕсли РазвернутоеСальдо = Истина Тогда
		Возврат "Заголовки.%1,%1НачальныйРазвернутыйОстатокДт,%1НачальныйРазвернутыйОстатокКт,%1ОборотДт,%1ОборотКт,%1КонечныйРазвернутыйОстатокДт,%1КонечныйРазвернутыйОстатокКт,%1Дт,%1Кт";
	ИначеЕсли РазвернутоеСальдо = Ложь Тогда
		Возврат "Заголовки.%1,%1НачальныйОстатокДт,%1НачальныйОстатокКт,%1ОборотДт,%1ОборотКт,%1КонечныйОстатокДт,%1КонечныйОстатокКт,%1Дт,%1Кт";
	Иначе // группировка по валюте
		
		Возврат 
		"Заголовки.%1,%1Дт,%1Кт,"
		+"%1НачальныйОстатокДт,%1НачальныйОстатокКт,%1НачальныйРазвернутыйОстатокДт,%1НачальныйРазвернутыйОстатокКт,"
		+"%1ОборотДт,%1ОборотКт,"
		+"%1КонечныйОстатокДт,%1КонечныйОстатокКт,%1КонечныйРазвернутыйОстатокДт,%1КонечныйРазвернутыйОстатокКт";
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область БСП

// Содержит настройки размещения вариантов отчетов в панели отчетов.
//
// Параметры:
//   Настройки - Коллекция - Используется для описания настроек отчетов и вариантов
//       см. описание к ВариантыОтчетов.ДеревоПредопределенных().
//
// Описание:
//   В данной процедуре необходимо указать каким именно образом предопределенные варианты отчетов
//   будут регистрироваться в программе и показываться в панели отчетов.
//
// Вспомогательные методы:
//   1. Функции ОписаниеОтчета и ОписаниеВарианта формируют описание настроек отчета и варианта для последующего изменения:
//		НастройкиОтчета   = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.<ИмяОтчета>);
//		НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//       Возвращаемые коллекции содержат одинаковый набор свойств.
//       НастройкиОтчета используются как умолчания для вариантов, описания которых еще не получены.
//       
//       Свойства для изменения:
//       * Включен - Булево -
//           Если Ложь, то вариант отчета не регистрируется в подсистеме.
//           Используется для удаления технических и контекстных вариантов отчетов из всех интерфейсов.
//           Эти варианты отчета по прежнему можно открывать в форме отчета программно при помощи
//           параметров открытия (см. справку по "Расширение управляемой формы для отчета.КлючВарианта").
//       * ВидимостьПоУмолчанию - Булево -
//           Если Ложь, то вариант отчета по умолчанию скрыт в панели отчетов.
//           Пользователь может "включить" его в режиме настройки панели отчетов
//           или открыть через форму "Все отчеты".
//       * Описание - Строка - Дополнительная информация по варианту отчета.
//           В панелях отчетов выводится в виде подсказки.
//           Должно расшифровывать для пользователя содержимое варианта отчета
//           и не должно дублировать наименование варианта отчета.
//           Используется при поиске.
//       * Размещение - Соответствие - Настройки размещения варианта отчета в разделах.
//           ** Ключ     - ОбъектМетаданных: Подсистема - Подсистема, в которой размещается отчет или вариант отчета.
//           ** Значение - Строка - Необязательный. Настройки размещения в подсистеме.
//               ""        - Выводить отчет в своей группе обычным шрифтом.
//               СВажный"  - Выводить отчет в своей группе жирным шрифтом.
//               ССмТакже" - Выводить отчет в группе "См. также".
//       * ФункциональныеОпции - Массив из Строка -
//            Имена функциональных опций варианта отчета.
//       * НастройкиДляПоиска - Структура - Дополнительные настройки для поиска этого варианта отчета.
//           Эти настройки необходимо задавать только если СКД не используется или используется не в полном объеме.
//           Например, СКД может использоваться только для параметризации и получения данных,
//           а вывод выполняться в фиксированный макет табличного документа.
//           ** НаименованияПолей - Строка - Имена полей варианта отчета.
//           ** НаименованияПараметровИОтборов - Строка - Имена настроек варианта отчета.
//           ** КлючевыеСлова - Строка - Дополнительная терминология (в т.ч. специализированная или устаревшая).
//           Разделитель терминов: Символы.ПС.
//       * ФорматНастроекСКД - Булево - Отчет использует типовой формат хранения настроек на механике СКД,
//           а его основные формы поддерживают стандартную схему взаимодействия между формами (параметры и тип возвращаемого значения).
//           Если Ложь, тогда для отчета отключаются проверки консистентности и некоторые механизмы, которые рассчитывают на типовой формат.
//       * ОпределитьНастройкиФормы - Булево - Отчет имеет программный интерфейс для тесной интеграции с формой отчета,
//           в том числе может переопределять некоторые настройки формы и подписываться на ее события.
//           Если Истина и отчет подключен к общей форме ФормаОтчета,
//           тогда в модуле объекта отчета следует определить процедуру по шаблону:
//               
//               // Настройки общей формы отчета подсистемы "Варианты отчетов".
//               //
//               // Параметры:
//               //   Форма - УправляемаяФорма, Неопределено - Форма отчета или форма настроек отчета.
//               //       Неопределено когда вызов без контекста.
//               //   КлючВарианта - Строка, Неопределено - Имя предопределенного
//               //       или уникальный идентификатор пользовательского варианта отчета.
//               //       Неопределено когда вызов без контекста.
//               //   Настройки - Структура - см. возвращаемое значение
//               //       ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//               //
//               Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
//               	// Код процедуры.
//               КонецПроцедуры
//               
//   2. Процедура УстановитьРежимВыводаВПанеляхОтчетов позволяет настроить режим группировки вариантов в панелях отчетов:
//		ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Истина/Ложь);
//		ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, Метаданные.Отчеты.<ИмяОтчета>, Истина/Ложь);
//		ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, Метаданные.Подсистемы.<ИмяПодсистемы>, Истина/Ложь);
//
//   3. Процедура НастроитьОтчетВМодулеМенеджера позволяет переопределять настройки отчета в его модуле менеджера:
//		ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.<ИмяОтчета>);
//      После вставки вызова в модуле менеджера указанного отчета следует разместить экспортную процедуру по шаблону:
//      // Настройки размещения в панели отчетов.
//      //
//      // Параметры:
//      //   Настройки - Коллекция - Передается "как есть" из ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//      //       Может использоваться для получения настроек варианта этого отчета при помощи функции ВариантыОтчетов.ОписаниеВарианта().
//      //   НастройкиОтчета - СтрокаДереваЗначений - Настройки этого отчета,
//      //       уже сформированные при помощи функции ВариантыОтчетов.ОписаниеОтчета() и готовые к изменению.
//      //       См. "Свойства для изменения" процедуры ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//      //
//      // Описание:
//      //   См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//      //
//      // Вспомогательные методы:
//      //	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//      //	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Истина/Ложь);
//      //
//      // Примеры:
//      //
//      //  1. Установка описания варианта.
//      //	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//      //	НастройкиВарианта.Описание = НСтр("ru = '<Описание>'");
//      //
//      //  2. Отключение варианта отчета.
//      //	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//      //	НастройкиВарианта.Включен = Ложь;
//      //
//      Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
//      	// Код процедуры.
//      КонецПроцедуры
//
// Примеры:
//
//  1. Добавление варианта отчета в подсистему.
//	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ИмяОтчета, "<ИмяВарианта>");
//	НастройкиВарианта.Размещение.Вставить(Метаданные.Подсистемы.ИмяРаздела.Подсистемы.ИмяПодсистемы);
//
//  2. Отключение варианта отчета.
//	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ИмяОтчета, "<ИмяВарианта>");
//	НастройкиВарианта.Включен = Ложь;
//
//  3. Отключение всех вариантов отчета, кроме одного.
//	НастройкиОтчета = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИмяОтчета);
//	НастройкиОтчета.Включен = Ложь;
//	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//	НастройкиВарианта.Включен = Истина;
//
//  4. Заполнение настроек для поиска - наименования полей, параметров и отборов:
//	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, Метаданные.Отчеты.ИмяОтчетаБезСхемы, "");
//	НастройкиВарианта.НастройкиДляПоиска.НаименованияПолей =
//		НСтр("ru = 'Контрагент
//		|Договор
//		|Ответственный
//		|Скидка
//		|Дата'");
//	НастройкиВарианта.НастройкиДляПоиска.НаименованияПараметровИОтборов =
//		НСтр("ru = 'Период
//		|Ответственный
//		|Контрагент
//		|Договор'");
//
//  5. Переключение режима вывода в панелях отчетов:
//  5.1. Группировка вариантов отчета по этому отчету:
//	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, Метаданные.Отчеты.ИмяОтчета, Истина);
//  5.2. Без группировки по отчету:
//	Отчет = ВариантыОтчетов.ОписаниеОтчета(Настройки, Метаданные.Отчеты.ИмяОтчета);
//	ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, Отчет, Ложь);
//
// Важно:
//   Отчет выступает в качестве контейнера вариантов.
//     Изменяя настройки отчета можно сразу изменять настройки всех его вариантов.
//     Однако, если явно получить настройки варианта отчета, то они станут самостоятельными,
//     т.е. более не будут наследовать изменения настроек от отчета. См. пример 3.
//   
//   Начальная настройка размещения отчетов по подсистемам зачитывается из метаданных,
//     ее дублирование в коде не требуется.
//   
//   Функциональные опции варианта объединяются с функциональными опциями этого отчета по следующим правилам:
//     (ФО1_Отчета ИЛИ ФО2_Отчета) И (ФО3_Варианта ИЛИ ФО4_Варианта).
//   Функциональные опции отчетов не зачитываются из метаданных,
//     они применяются на этапе использования подсистемы пользователем.
//   Через ОписаниеОтчета можно добавлять функциональные опции, которые будут соединяться по указанным выше правилам,
//     но надо помнить, что эти функциональные опции будут действовать только для предопределенных вариантов отчетов.
//   Для пользовательских вариантов отчета действуют только функциональные опции отчета
//     - они отключаются только с отключением всего отчета.
//
Процедура НастроитьВариантыОтчетов(Настройки) Экспорт
		
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ОСВМСФО);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.ГрафикиФИ);
	ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты.РаспределениеНачисленийПоФинансовымИнструментамНаОбъекты);
	
	Если ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		ИмяОтчета = "ХодСверкиВГО";
		ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты[ИмяОтчета]);
		
		ИмяОтчета = "ОтветственныеОбъектов";
		ВариантыОтчетов.НастроитьОтчетВМодулеМенеджера(Настройки, Метаданные.Отчеты[ИмяОтчета]);
		
	КонецЕсли;
		
КонецПроцедуры

#Область БСП_Команды

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииВидовПодключаемыхКоманд.
Процедура ПриОпределенииВидовПодключаемыхКоманд(ВидыПодключаемыхКоманд) Экспорт
	
	Вид = ВидыПодключаемыхКоманд.Добавить();
	Вид.Имя = "ЗагрузкаДанныхУХ";
	Вид.ИмяПодменю = "ПодменюЗагрузкаДанныхУХ";
	Вид.Заголовок = НСтр("ru = 'Загрузка данных'");
	Вид.Картинка = БиблиотекаКартинок.ЗагрузитьДанныеИзФайла;
	Вид.Отображение = ОтображениеКнопки.КартинкаИТекст;
	Вид.ВидГруппыФормы = ВидГруппыФормы.Подменю;
	
КонецПроцедуры

// См. ПодключаемыеКомандыПереопределяемый.ПриОпределенииКомандПодключенныхКОбъекту.
Процедура ПриОпределенииКомандПодключенныхКОбъекту(НастройкиФормы, Источники, ПодключенныеОтчетыИОбработки, Команды) Экспорт

	ИмяОбъекта = Лев(НастройкиФормы.ИмяФормы, СтрНайти(НастройкиФормы.ИмяФормы, ".",,, 2) - 1);//до второй точки
	
	Если ИмяОбъекта = "Документ.РезервыПоДЗИАвансамВыданным" Тогда
		
		ФГА = Справочники.ФиксированныеГруппыАналитик.РезервыДЗ_НачислениеРезерваМСФО;		
		ДопПараметры = Новый Структура("ИмяОбъекта, ИмяТЧ, ФГА", ИмяОбъекта, "Резервы", ФГА);
		
	ИначеЕсли ИмяОбъекта = "Документ.РезервыПоЗапасам" Тогда
		
		ФГА = Справочники.ФиксированныеГруппыАналитик.РезервыМПЗ_НачислениеРезерваМСФО;
		ДопПараметры = Новый Структура("ИмяОбъекта, ИмяТЧ, ФГА", ИмяОбъекта, "Резервы", ФГА);
		
	ИначеЕсли ИмяОбъекта = "Документ.ВводНачальныхОстатковВНАМСФО" Тогда
		ДопПараметры = Новый Структура("ИмяОбъекта, ИмяТЧ, ИсточникКолонок", ИмяОбъекта, "ВНА", "ТЧ");
	ИначеЕсли ИмяОбъекта = "Документ.ВводСведенийВНАМСФО" Тогда
		ДопПараметры = Новый Структура("ИмяОбъекта, ИмяТЧ, ИсточникКолонок", ИмяОбъекта, "ВНА", "ТЧ");
	ИначеЕсли ИмяОбъекта = "Документ.ВводВНАВЭксплуатациюМСФО" Тогда
		ДопПараметры = Новый Структура("ИмяОбъекта, ИмяТЧ, ИсточникКолонок", ИмяОбъекта, "ВНА", "ТЧ");
	ИначеЕсли ИмяОбъекта = "Документ.ВыбытиеВНАМСФО" Тогда
		ДопПараметры = Новый Структура("ИмяОбъекта, ИмяТЧ, ИсточникКолонок", ИмяОбъекта, "ВНА", "ТЧ");
	ИначеЕсли ИмяОбъекта = "Документ.ВыработкаВНА" Тогда
		ДопПараметры = Новый Структура("ИмяОбъекта, ИмяТЧ, ИсточникКолонок", ИмяОбъекта, "ВНА", "ТЧ");
	ИначеЕсли ИмяОбъекта = "Документ.ИзменениеПараметровВНАМСФО" Тогда
		ДопПараметры = Новый Структура("ИмяОбъекта, ИмяТЧ, ИсточникКолонок", ИмяОбъекта, "ВНА", "ТЧ");
	ИначеЕсли ИмяОбъекта = "Документ.МодернизацияВНАМСФО" Тогда
		ДопПараметры = Новый Структура("ИмяОбъекта, ИмяТЧ, ИсточникКолонок", ИмяОбъекта, "ВНА", "ТЧ");
	ИначеЕсли ИмяОбъекта = "Документ.ОбесценениеВНАМСФО" Тогда
		ДопПараметры = Новый Структура("ИмяОбъекта, ИмяТЧ, ИсточникКолонок", ИмяОбъекта, "ВНА", "ТЧ");
	ИначеЕсли ИмяОбъекта = "Документ.ПереоценкаВНАМСФО" Тогда
		ДопПараметры = Новый Структура("ИмяОбъекта, ИмяТЧ, ИсточникКолонок", ИмяОбъекта, "ВНА", "ТЧ");
	ИначеЕсли ИмяОбъекта = "Документ.ПоступлениеВНАМСФО" Тогда
		ДопПараметры = Новый Структура("ИмяОбъекта, ИмяТЧ, ИсточникКолонок", ИмяОбъекта, "ВНА", "ТЧ");
		
	ИначеЕсли ИмяОбъекта = "Документ.ВводСведенийОФинансовыхИнструментах" Тогда
		//ДопСвойства = Новый Структура("ИмяОбъекта, ИмяТЧ, ИсточникКолонок", ИмяОбъекта, "ФинансовыеИнструменты", "ТЧ");
		Возврат;
	ИначеЕсли ИмяОбъекта = "Документ.ВводСобытийВНАМСФО" Тогда
		ДопПараметры = Новый Структура("ИмяОбъекта, ИмяТЧ, ИсточникКолонок", ИмяОбъекта, "ВНА", "ТЧ");
	ИначеЕсли ИмяОбъекта = "Документ.ВосстановлениеВНАИзРасходов" Тогда
		ДопПараметры = Новый Структура("ИмяОбъекта, ИмяТЧ, ИсточникКолонок", ИмяОбъекта, "ВНА", "ТЧ");
	ИначеЕсли ИмяОбъекта = "Документ.НачислениеОперацийМСФО" Тогда
		ДопПараметры = Новый Структура("ИмяОбъекта, ИмяТЧ, ИсточникКолонок", ИмяОбъекта, "ДвиженияНачислений", "ТЧ");
	ИначеЕсли ИмяОбъекта = "Документ.ОперацияМСФО" Тогда
		ДопПараметры = Новый Структура("ИмяОбъекта, ИмяТЧ, ИсточникКолонок", ИмяОбъекта, "Движения.МСФО", "ТЧ");
	ИначеЕсли ИмяОбъекта = "Документ.ПереоценкаФинансовыхИнструментов" Тогда
		ДопПараметры = Новый Структура("ИмяОбъекта, ИмяТЧ, ИсточникКолонок", ИмяОбъекта, "ФинансовыеИнструменты", "ТЧ");
	ИначеЕсли ИмяОбъекта = "Документ.ПризнаниеРасходовПоАмортизацииНСБУ" Тогда
		ДопПараметры = Новый Структура("ИмяОбъекта, ИмяТЧ, ИсточникКолонок", ИмяОбъекта, "ВНА", "ТЧ");
	ИначеЕсли ИмяОбъекта = "Документ.ПризнаниеРасходовФинансовыхИнструментов" Тогда
		ДопПараметры = Новый Структура("ИмяОбъекта, ИмяТЧ, ИсточникКолонок", ИмяОбъекта, "Сторно", "ТЧ");
	Иначе 
		Возврат;
	КонецЕсли;
	
	ТипыОбъектов = Новый Массив;
	Для каждого СтрокаИсточник Из Источники.Строки Цикл
		Если ЗначениеЗаполнено(СтрокаИсточник.ПолноеИмя) Тогда
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтрокаИсточник.ПолноеИмя);
			ТипыОбъектов.Добавить(ТипЗнч(Менеджер.ПустаяСсылка()));				
		КонецЕсли;		
	КонецЦикла;
		
	ТипПараметра = Новый ОписаниеТипов(ТипыОбъектов);	
	ДобавитьКомандуЗагрузки(ДопПараметры, Команды, ТипПараметра);

КонецПроцедуры

Процедура ДобавитьКомандуЗагрузки(ДопПараметры, Команды, ТипПараметра)
	
	Команда = Команды.Добавить();
	Команда.Вид = "ЗагрузкаДанныхУХ";
	Команда.Идентификатор = "ЗагрузитьТаблицейУХ";
	Команда.Представление = НСтр("ru = 'Загрузить'");
	Команда.Важность = "Обычное";
	Команда.Порядок = 10;
	Команда.ОтображениеКнопки = ОтображениеКнопки.КартинкаИТекст;
	Команда.Картинка = БиблиотекаКартинок.ЗагрузитьДанныеИзФайла;
	Команда.ТипПараметра = ТипПараметра;
	Команда.Назначение = "ДляОбъекта";
	//Команда.ФункциональныеОпции = "";
	Команда.ИзменяетВыбранныеОбъекты = Ложь;
	Команда.МножественныйВыбор = Ложь;
	Команда.РежимЗаписи = "Записывать";
	Команда.Обработчик = "МСФОКлиентУХ.ЗагрузкаДанных_Подключаемый";
	Команда.ДополнительныеПараметры = ДопПараметры;

КонецПроцедуры

#КонецОбласти

#Область СтандартныеПодсистемы_ВариантыОтчетов

// Определяет объекты конфигурации, в модулях менеджеров которых предусмотрена процедура ДобавитьКомандыОтчетов,
// описывающая команды открытия контекстных отчетов.
// Синтаксис процедуры ДобавитьКомандыОтчетов см. в документации.
//
// Параметры:
//   Объекты - Массив - объекты метаданных (ОбъектМетаданных) с командами отчетов.
//
Процедура ОпределитьОбъектыСКомандамиОтчетов(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.ПланыСчетов.МСФО);
	 	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийФормы

Процедура ПодготовитьФормуНаСервере(ФормаДокумента, ИмяТаблицы = "ВНА", ДокументОбъект = Неопределено, ИнициализироватьДокументВНА = Истина, ЕстьРежимЗаполнения = Истина) Экспорт 
	
	Объект = ?(ДокументОбъект = Неопределено, ФормаДокумента.Объект, ДокументОбъект);
	
	ЗаполнитьКэшируемыеЗначения(ФормаДокумента);
	ФормаДокумента.Элементы[ИмяТаблицы].АвтоВводНовойСтроки = Ложь;
	
	СоответствиеКолонок = ПолучитьСоответствиеКолонок(ФормаДокумента, ИмяТаблицы);
	ФормаДокумента.КэшируемыеЗначения.Вставить("СоответствиеКолонок", СоответствиеКолонок);
	
	ИнициализироватьДокументВНА(ФормаДокумента, Объект, ИмяТаблицы, ИнициализироватьДокументВНА);
	
	//Для счетов укажем владельца(план счетов организации) в параметрах выбора 
	УстановитьПланыСчетовВПараметрахВыбора(ФормаДокумента, ИмяТаблицы, СоответствиеКолонок);
	
	//в Режиме только МСФО колонки НСБУ не редактируются 
	Если ЕстьРежимЗаполнения И Объект.РежимЗаполнения = ПредопределенноеЗначение("Перечисление.РежимЗаполненияВидовУчета.МСФО") Тогда
		
		ЦветНедоступногоПоля = ЦветаСтиля.ЦветФонаТолькоПросмотр;
		
		Для каждого КолонкаНСБУ Из СоответствиеКолонок Цикл
			
			Если Не КолонкаНСБУ.Значение.Свойство("НСБУ") Тогда
				Продолжить;
			ИначеЕсли СтрНачинаетсяС(КолонкаНСБУ.Ключ, "Удалить") Тогда
				Продолжить;
			КонецЕсли;
			
			ФормаДокумента.Элементы[ИмяТаблицы + КолонкаНСБУ.Ключ + "НСБУ"].ТолькоПросмотр = Истина;
			ФормаДокумента.Элементы[ИмяТаблицы + КолонкаНСБУ.Ключ + "НСБУ"].Цветфона = ЦветНедоступногоПоля;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДокументВНА(ФормаДокумента, Объект, ИмяТаблицы, ИнициализироватьДокументВНА = Истина)

	ИмяДокумента 			= ФормаДокумента.КэшируемыеЗначения.МетаданныеДокумента.Имя;
	ПредставлениеДокумента 	= ФормаДокумента.КэшируемыеЗначения.МетаданныеДокумента.РасширенноеПредставлениеОбъекта;
	
	ЗаполняемыеРеквизитыТаб = ПолучитьЗаполняемыеРеквизитыТаблицыФормы(ФормаДокумента);
	Если ИнициализироватьДокументВНА И (Объект[ИмяТаблицы].Количество() > 0) И (ЗаполняемыеРеквизитыТаб <> Неопределено) Тогда
		Для каждого СтрокаТаб Из Объект[ИмяТаблицы] Цикл
			МСФОКлиентСерверУХ.ЗаполнитьРасчетныеРеквизитыСтроки(СтрокаТаб, ЗаполняемыеРеквизитыТаб);		
		КонецЦикла;		
	КонецЕсли;

	Документы[ИмяДокумента].ЗаполнитьЗависимостиРеквизитовДокумента(ФормаДокумента);
		
КонецПроцедуры

Процедура УстановитьПланыСчетовВПараметрахВыбора(ФормаДокумента, ИмяТаблицы, Знач СоответствиеКолонок = Неопределено) Экспорт

	Если СоответствиеКолонок = Неопределено Тогда
		СоответствиеКолонок = ПолучитьСоответствиеКолонок(ФормаДокумента, ИмяТаблицы);
	КонецЕсли;
	
	ЗаданПланСчетовНСБУ = ЗначениеЗаполнено(ФормаДокумента.КэшируемыеЗначения.ПланСчетовНСБУ);
	
	ПараметрыВыбораНСБУ = ПолучитьПараметрыВыбораСчетаБД(ФормаДокумента.КэшируемыеЗначения.ПланСчетовНСБУ);
	ПараметрыВыбораМСФО = ПолучитьПараметрыВыбораСчетаБД(ФормаДокумента.КэшируемыеЗначения.ПланСчетовМСФО);
		
	Для Каждого Соответствие Из СоответствиеКолонок Цикл
		
		Если (Лев(Соответствие.Ключ,4) = "Счет" ИЛИ (Лев(Соответствие.Ключ,8) = "КоррСчет") 
			ИЛИ (Лев(Соответствие.Ключ,7) = "КорСчет")) И (СтрНайти(Соответствие.Ключ, "Субконто") = 0) Тогда
			
			Если ЗаданПланСчетовНСБУ И Соответствие.Значение.Свойство("НСБУ") Тогда
				ФормаДокумента.Элементы[ИмяТаблицы + Соответствие.Ключ + "НСБУ"].ПараметрыВыбора = ПараметрыВыбораНСБУ;
			КонецЕсли;
			
			Если Соответствие.Значение.Свойство("МСФО") Тогда
				ФормаДокумента.Элементы[ИмяТаблицы + Соответствие.Ключ + "МСФО"].ПараметрыВыбора = ПараметрыВыбораМСФО;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Функция ПолучитьПараметрыВыбораСчетаБД(ПланСчетовБД = Неопределено, Группирующий = Неопределено, Забалансовый = Неопределено, 
										Вид = Неопределено, Валютный = Неопределено, Раздел = Неопределено) Экспорт

	ПараметрыВыбора = Новый Массив;
	
	Если ПланСчетовБД <> Неопределено Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Владелец", ПланСчетовБД));		
	КонецЕсли;
	
	Если Группирующий <> Неопределено Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Группирующий", Группирующий));		
	КонецЕсли;
	
	Если Забалансовый <> Неопределено Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Забалансовый", Забалансовый));
	КонецЕсли;
	
	Если Вид <> Неопределено Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Вид", Вид));
	КонецЕсли;
	
	Если Валютный <> Неопределено Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Валютный", Валютный));
	КонецЕсли;
	
	Если Раздел <> Неопределено Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("Раздел", Раздел));
	КонецЕсли;
	
	Возврат Новый ФиксированныйМассив(ПараметрыВыбора);
	
КонецФункции

Функция ПолучитьПараметрыВыбораПоля(Коллекция, Знач ПараметрыВыбора = Неопределено) Экспорт

	Если ПараметрыВыбора = Неопределено Тогда		
		ПараметрыВыбора = Новый Массив;
	ИначеЕсли ТипЗнч(ПараметрыВыбора) = Тип("ФиксированныйМассив") Тогда	
		ПараметрыВыбора = Новый Массив(ПараметрыВыбора);
	КонецЕсли;
	
	Для каждого ЭлементКоллекции Из Коллекция Цикл		
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора(ЭлементКоллекции.Ключ, ЭлементКоллекции.Значение));
	КонецЦикла;

	Возврат Новый ФиксированныйМассив(ПараметрыВыбора);
	
КонецФункции

#КонецОбласти

#Область УсловноеОформлениеФормы

Процедура ОбновитьУсловноеОформлениеФормы(ФормаДокумента, ИмяТаблицы = "ВНА") Экспорт

	//Выделение колонок МСФО, отличающихся от НСБУ 	
	ДобавитьОформлениеВыделениеСтрокСРасхождениями(ФормаДокумента, ИмяТаблицы);	
	
	//Выделение колонки ВНА, если была отредактирована в сеансе
	ДобавитьОформлениеВыделениеОтредактированныхСтрок(ФормаДокумента, ИмяТаблицы);
	
	//Если в строке указан справочник Параметры ВНА(например ГруппыВНА) то зависимые реквизиты не редактируются
	ДобавитьОформлениеДоступностиЗависимыхРеквизитов(ФормаДокумента, ИмяТаблицы);
	
	//Оформление доступности субконто
	Если ФормаДокумента.КэшируемыеЗначения.Свойство("ИменаСубконто") Тогда
		ДобавитьОформлениеДоступностиСубконто(ФормаДокумента, ФормаДокумента.КэшируемыеЗначения.ИменаСубконто, ИмяТаблицы);
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДобавитьОформлениеВыделениеСтрокСРасхождениями(ФормаДокумента, ИмяТаблицы = "ВНА")
	
	СоответствиеКолонок = ПолучитьСоответствиеКолонок(ФормаДокумента);
	
	ЭлементыУсловногоОформления = ФормаДокумента.УсловноеОформление.Элементы;
	
	РежимыЗаполненияСРасхождениями = Новый СписокЗначений;
	РежимыЗаполненияСРасхождениями.Добавить(Перечисления.РежимЗаполненияВидовУчета.МСФО);
	РежимыЗаполненияСРасхождениями.Добавить(Перечисления.РежимЗаполненияВидовУчета.НСБУИМСФО);
	
	Для каждого КолонкаРасхождения Из СоответствиеКолонок Цикл
		
		Если Не КолонкаРасхождения.Значение.Свойство("НСБУ") Или Не КолонкаРасхождения.Значение.Свойство("МСФО") Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрНайти(КолонкаРасхождения.Ключ, "Счет") > 0 Тогда
			Продолжить;// счета всегда разные
		КонецЕсли;
		
		Элемент = ЭлементыУсловногоОформления.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + КолонкаРасхождения.Ключ + "МСФО");
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + КолонкаРасхождения.Ключ + "НСБУ");
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТаблицы + "." + КолонкаРасхождения.Ключ + "МСФО");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
		ОтборЭлемента.ПравоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТаблицы + "." + КолонкаРасхождения.Ключ + "НСБУ");
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект.РежимЗаполнения");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		ОтборЭлемента.ПравоеЗначение = РежимыЗаполненияСРасхождениями;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Синий);
		
	КонецЦикла;	
	
КонецПроцедуры	

Процедура ДобавитьОформлениеВыделениеОтредактированныхСтрок(ФормаДокумента, ИмяТаблицы = "ВНА")
	
	ЭлементыУсловногоОформления = ФормаДокумента.УсловноеОформление.Элементы;
	
	Элемент = ЭлементыУсловногоОформления.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + "ВНА");
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТаблицы + ".ЕстьИзменение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт( ФормаДокумента.Элементы[ИмяТаблицы].Шрифт, , , Истина));// Жирный
		
КонецПроцедуры

Процедура ДобавитьОформлениеДоступностиЗависимыхРеквизитов(ФормаДокумента, ИмяТаблицы = "ВНА")

	Перем ЗависимостиРеквизитов;
	
	ЭлементыУсловногоОформления = ФормаДокумента.УсловноеОформление.Элементы;
	ЦветТолькоПросмотр = ЦветаСтиля.ЦветФонаТолькоПросмотр;
	
	РеквизитыГруппыПодробно = Неопределено;
	Если ФормаДокумента.КэшируемыеЗначения.Свойство("СчетаГруппыПодробно") Тогда
		
		РеквизитыГруппыПодробно = Новый Соответствие;
		Для каждого СчетГруппыПодробно Из ФормаДокумента.КэшируемыеЗначения.СчетаГруппыПодробно Цикл
			Если СчетГруппыПодробно.Значение = Истина Тогда
				
				РеквизитыГруппыПодробно.Вставить(СчетГруппыПодробно.Ключ, Истина);
				СубконтоПодробно = Неопределено;
				ФормаДокумента.КэшируемыеЗначения.ИменаСубконто.Свойство(СчетГруппыПодробно.Ключ, СубконтоПодробно);
				Для каждого СубконтоИсточник Из СубконтоПодробно Цикл
					РеквизитыГруппыПодробно.Вставить(СубконтоИсточник.Значение, Истина);
				КонецЦикла;
				
			КонецЕсли;			
		КонецЦикла;		
	
	КонецЕсли;
	
	Если Не ФормаДокумента.КэшируемыеЗначения.Свойство("ЗависимостиРеквизитов", ЗависимостиРеквизитов) Тогда
		ЗависимостиРеквизитов = ФормаДокумента.ЗависимостиРеквизитов;
	КонецЕсли;
	
	Для каждого ЗависимыйРеквизит Из ЗависимостиРеквизитов Цикл
		
		Если (РеквизитыГруппыПодробно <> Неопределено) 
			И РеквизитыГруппыПодробно.Получить(ЗависимыйРеквизит.Приемник) <> Неопределено Тогда 
			
			Продолжить;// поля подробно оформляются при активации строки
			
		КонецЕсли;
		
		Элемент = ЭлементыУсловногоОформления.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + ЗависимыйРеквизит.Приемник);
		
		//если заполнен зависимый реквизит тогда в документе недоступен
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТаблицы + "." + ЗависимыйРеквизит.Источник);
		
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
						
		//Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветТолькоПросмотр);
	
	КонецЦикла; 	

КонецПроцедуры

Процедура ДобавитьОформлениеДоступностиСубконто(ФормаДокумента, ИменаСубконто, ИмяТаблицы = "ВНА", УстанавливатьВидимость = Истина) Экспорт

	ЭлементыУсловногоОформления = ФормаДокумента.УсловноеОформление.Элементы;
	ЦветТолькоПросмотр = ЦветаСтиля.ЦветФонаТолькоПросмотр;
		
	Для каждого СчетСубконто Из ИменаСубконто Цикл
		
		Для каждого НомерИмяСубконто Из СчетСубконто.Значение Цикл			
			
			ПутьПоляДоступности = "Объект." + ИмяТаблицы + "." + НомерИмяСубконто.Значение + "Доступность";
			
			Элемент = ЭлементыУсловногоОформления.Добавить();
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + НомерИмяСубконто.Значение);
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьПоляДоступности);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Ложь;
			
			Если УстанавливатьВидимость Тогда
				Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
			Иначе 
				Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", 	Истина);
				Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", 			ЦветТолькоПросмотр);			
			КонецЕсли;
						
		КонецЦикла;		
		
	КонецЦикла;
	
	Если Не ФормаДокумента.КэшируемыеЗначения.Свойство("ПоляВместоСкрытыхСубконто") Тогда
		Возврат;	
	КонецЕсли;
			
	Для каждого ИмяСчетаДляПоля Из ФормаДокумента.КэшируемыеЗначения.ПоляВместоСкрытыхСубконто Цикл
		
		Поле = ИмяСчетаДляПоля.Ключ;
		ИмяСчета = ИмяСчетаДляПоля.Значение;
		
		Элемент = ЭлементыУсловногоОформления.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы + Поле);
		
		Для каждого НомерИмяСубконто Из ИменаСубконто[ИмяСчета] Цикл
			
			ПутьПоляДоступности = "Объект." + ИмяТаблицы + "." + НомерИмяСубконто.Значение + "Доступность";
		
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ПутьПоляДоступности);
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Ложь;
				
		КонецЦикла;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Истина);		
		Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<Авто>'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
						
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДоступностьСубконто(ФормаДокумента, ИменаСубконто, ИмяТаблицы = "ВНА") Экспорт

	Для каждого СтрокаТаблицы Из ФормаДокумента.Объект[ИмяТаблицы] Цикл
		Для каждого СчетСубконто Из ИменаСубконто Цикл
			
			Если СчетСубконто.Ключ = "ИсключенияСкрытияСубконто" Тогда
				Продолжить;			
			КонецЕсли;
			
			СвойстваСчета = УчетМСФОПовтИспУХ.ПолучитьСвойстваСчета(СтрокаТаблицы[СчетСубконто.Ключ]);
			КоличествоСубконто = СвойстваСчета.КоличествоСубконто;
			
			Для каждого НомерСубконто Из СчетСубконто.Значение Цикл
				Если НомерСубконто.Ключ = "Подразделение" Тогда
					СтрокаТаблицы[НомерСубконто.Значение + "Доступность"] = СвойстваСчета.УчетПоПодразделениям;
				ИначеЕсли НомерСубконто.Ключ = "НаправлениеДеятельности" Тогда
					СтрокаТаблицы[НомерСубконто.Значение + "Доступность"] = СвойстваСчета.УчетПоНаправлениямДеятельности;
				Иначе 
					Попытка
						СтрокаТаблицы[НомерСубконто.Значение + "Доступность"] = (НомерСубконто.Ключ <= КоличествоСубконто);
					Исключение
						Сообщить(СтрШаблон( НСтр("ru = 'Табличная часть <%1>: '"), ИмяТаблицы) + ОписаниеОшибки());
					КонецПопытки;				
				КонецЕсли;
				
			КонецЦикла;

		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ТаблицаПроводки

Процедура ЗаполнитьПараметрыВыбораСчетов(Форма, ИмяТЧ = "Проводки", ПланСчетов = "МСФО") Экспорт
	
	Элементы = Форма.Элементы;
	
	ПараметрыВыбораСчетаБД = МСФОУХ.ПолучитьПараметрыВыбораСчетаБД(Форма.КэшируемыеЗначения.ПланСчетовМСФО);//**
	Для каждого КлючСчет Из Новый Структура("СчетДт,СчетКт") Цикл		
		Элементы[ИмяТЧ + КлючСчет.Ключ].ПараметрыВыбора = ПараметрыВыбораСчетаБД;
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьРеквизитыОрганизации(КэшируемыеЗначения) Экспорт

	ПутиУП = МСФОВызовСервераУХ.ПутиРеквизитовУП("ФункциональнаяВалюта, ВалютаПредоставленияОтчетности, ПланСчетовМСФО, ФормироватьПроводкиМСФО");
	Таб = МСФОВызовСервераУХ.ЗначенияУП(ПутиУП, КэшируемыеЗначения.Организация, 
									КэшируемыеЗначения.Дата, КэшируемыеЗначения.Сценарий);
									
	Таб.Колонки.Удалить("Организация");//мб пустой в ЗначенияУП
	
	ЕстьУП = Таб.Количество();
	СтрокаИсточник = ?(ЕстьУП, Таб[0], Таб.Добавить());
	
	ТипБулево = Тип("Булево");
	Для каждого Колонка Из Таб.Колонки Цикл
		Если Не ЕстьУП И Колонка.ТипЗначения.СодержитТип(ТипБулево) Тогда
			КэшируемыеЗначения.Вставить(Колонка.Имя, Ложь);
		Иначе 
			КэшируемыеЗначения.Вставить(Колонка.Имя, СтрокаИсточник[Колонка.Имя]);	
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

Процедура ДобавитьРеквизитыТаблицыПроводок(Форма, ПутьКДаннымТЧ = "Объект.Проводки", ИмяТЧ = "Проводки", 
													ПересчитатьСтроку = Истина, ПланСчетов = "МСФО") Экспорт

	УсловноеОформление_ДобавитьРеквизитыДоступности(Форма, ПутьКДаннымТЧ, ИмяТЧ, ПланСчетов);
	
	Организация = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Форма.КэшируемыеЗначения, "Организация");
	Если Организация = Неопределено Тогда	
		Организация = Форма.Объект.Организация;	
	КонецЕсли;
	
	Доступности = ДоступностиПланаСчетов(ПланСчетов);
	ЕстьНУ = Доступности.Свойство("НалоговыйУчет");
	ЕстьНД = Доступности.Свойство("УчетПоНаправлениямДеятельности") И (Доступности.УчетПоНаправлениямДеятельности <> Неопределено);
	
	ТабПроводки = ОбщегоНазначенияКлиентСервер.ПолучитьРеквизитФормыПоПути(Форма, ПутьКДаннымТЧ);
	Для каждого Проводка Из ТабПроводки Цикл
		
		Если ПересчитатьСтроку Тогда
			МСФОКлиентСерверУХ.ПриИзмененииСчетаПроводки(Форма, "Дт", ПутьКДаннымТЧ, ИмяТЧ, Проводка, ПересчитатьСтроку);
			МСФОКлиентСерверУХ.ПриИзмененииСчетаПроводки(Форма, "Кт", ПутьКДаннымТЧ, ИмяТЧ, Проводка, ПересчитатьСтроку);
		Иначе 
			
			ПоляОбъекта = Новый Структура("Субконто1,Субконто2,Субконто3,Валютный,Количественный,Организация,Подразделение");
				
			Для Каждого Сторона Из Новый Структура("Дт,Кт")  Цикл
				
				ДтКт = Сторона.Ключ;
				
				ПоляОбъекта.Субконто1      = "Субконто" + ДтКт + "1";
				ПоляОбъекта.Субконто2      = "Субконто" + ДтКт + "2";
				ПоляОбъекта.Субконто3      = "Субконто" + ДтКт + "3";	
				ПоляОбъекта.Валютный       = "Валютный" + ДтКт;
				ПоляОбъекта.Количественный = "Количественный" + ДтКт;
				ПоляОбъекта.Подразделение  = "УчетПоПодразделениям" + ДтКт;
				Если ЕстьНД Тогда
					ПоляОбъекта.Вставить("НаправлениеДеятельности", "УчетПоНаправлениямДеятельности" + ДтКт);
				КонецЕсли;
				Если ЕстьНУ Тогда
					ПоляОбъекта.Вставить("НалоговыйУчет", "НалоговыйУчет" + ДтКт);
				КонецЕсли;
				
				ПоляОбъекта.Организация = Организация;
				МСФОКлиентСерверУХ.УстановитьДоступностьСубконто(Проводка["Счет" + ДтКт], Проводка, ПоляОбъекта, Истина);
			
			КонецЦикла;
	
		КонецЕсли;
		
		МСФОКлиентСерверУХ.ЗаполнитьНадписиВПроводке(Проводка, ЕстьНУ);
		
	КонецЦикла;

КонецПроцедуры

Процедура УсловноеОформление_Проводки(Форма, ПутьКДаннымТЧ = "Объект.Проводки", ИмяТЧ = "Проводки", ПланСчетов = "МСФО") Экспорт	
	
	УсловноеОформление_РеквизитыСчета(Форма, ПутьКДаннымТЧ, ИмяТЧ, ПланСчетов);
	УсловноеОформление_Субконто(Форма, ПутьКДаннымТЧ, ИмяТЧ, ПланСчетов);
	
КонецПроцедуры

Процедура УсловноеОформление_ДобавитьРеквизитыДоступности(Форма, ПутьКДаннымТЧ = "Объект.Проводки", ИмяТЧ = "Проводки", ПланСчетов = "МСФО")

	Если Форма.КэшируемыеЗначения.Свойство("РеквизитыДоступностиДобавлены") Тогда
		Возврат;
	КонецЕсли;	
	
	отБулево = Новый ОписаниеТипов("Булево");
	
	РеквизитыСчета = ДоступностиПланаСчетов(ПланСчетов);
	КоличествоСубконто = УчетМСФОПовтИспУХ.ПолучитьМаксКоличествоСубконто(ПланСчетов);
	
	ДобавляемыеРеквизиты = Новый Массив;
	Для каждого СторонаПроводки Из СтрРазделить("Дт,Кт",",") Цикл
		
		Для каждого ТекРеквизит Из РеквизитыСчета Цикл
			Если ТекРеквизит.Значение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			Имя = ТекРеквизит.Ключ + СторонаПроводки + "Доступность";
			Путь = ПутьКДаннымТЧ;
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(Имя, отБулево, Путь, Путь + " " + Имя));
		КонецЦикла;
		
		Для НомерСубконто = 1 По КоличествоСубконто Цикл
			Имя = "Субконто" + СторонаПроводки + НомерСубконто + "Доступность";
			Путь = ПутьКДаннымТЧ;
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(Имя, отБулево, Путь, Путь + " " + Имя));
		КонецЦикла;
		
	КонецЦикла;
	
	Если ДобавляемыеРеквизиты.Количество() Тогда		
		Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
		Форма.КэшируемыеЗначения.Вставить("РеквизитыДоступностиДобавлены", ИмяТЧ);
	КонецЕсли;	

КонецПроцедуры

Процедура УсловноеОформление_РеквизитыСчета(Форма, ПутьКДаннымТЧ = "Объект.Проводки", ИмяТЧ = "Проводки", ПланСчетов = "МСФО")

	УсловноеОформление = Форма.УсловноеОформление;
	ВидРавно = ВидСравненияКомпоновкиДанных.Равно;
	
	Доступности = ДоступностиПланаСчетов(ПланСчетов);
	 
	Для каждого Сторона Из СтрРазделить("Дт,Кт", ",") Цикл		
		Для каждого ТекДоступность Из Доступности Цикл
			
			ТекПуть = ПутьКДаннымТЧ + "." + ТекДоступность.Ключ + Сторона + "Доступность";
			
			// Видимость
			УО = УсловноеОформление.Элементы.Добавить();
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(УО.Отбор, ТекПуть, видРавно, Ложь);
			Если ТекДоступность.Значение = Неопределено Тогда
				КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(УО.Поля, ИмяТЧ + ТекДоступность.Ключ + Сторона);
			Иначе 
				Для каждого ТекРеквизит Из ТекДоступность.Значение Цикл
					КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(УО.Поля, ИмяТЧ + ТекРеквизит + Сторона);
				КонецЦикла;				
			КонецЕсли;
			
			УО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
			
			// Выделение не заполненного
			УО = УсловноеОформление.Элементы.Добавить();			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(УО.Отбор, ТекПуть, видРавно, Истина);
			Если ТекДоступность.Значение = Неопределено Тогда
				КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(УО.Поля, ИмяТЧ + ТекДоступность.Ключ + Сторона);
				ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(УО.Отбор, ПутьКДаннымТЧ + "." + ТекДоступность.Ключ + Сторона, ВидСравненияКомпоновкиДанных.НеЗаполнено);
			Иначе 
				Для каждого ТекРеквизит Из ТекДоступность.Значение Цикл
					КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(УО.Поля, ИмяТЧ + ТекРеквизит + Сторона);
					ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(УО.Отбор, ПутьКДаннымТЧ + "." + ТекРеквизит + Сторона, ВидСравненияКомпоновкиДанных.НеЗаполнено);
					Прервать;//оформляем только первый реквизит
				КонецЦикла;				
			КонецЕсли;
			
			УО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);
			УО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
			
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Функция ДоступностиПланаСчетов(ПланСчетов = "МСФО")
	
	Если ПланСчетов = "Хозрасчетный" Тогда
		Возврат ВстраиваниеУХ.ДоступностиПланаСчетовХозрасчетный();
	КонецЕсли;
	
	Доступности = Новый Структура("Валютный,Количественный,УчетПоПодразделениям,УчетПоНаправлениямДеятельности"); 
	
	Доступности.Вставить("Валютный", 						СтрРазделить("Валюта,СуммаВВалюте", ","));
	Доступности.Вставить("Количественный", 					СтрРазделить("Количество,НадписьКоличество", ","));
	Доступности.Вставить("УчетПоПодразделениям", 			СтрРазделить("Подразделение", ","));
	Доступности.Вставить("УчетПоНаправлениямДеятельности", 	СтрРазделить("НаправлениеДеятельности", ","));
	
	Возврат Доступности;

КонецФункции

Процедура УсловноеОформление_Субконто(Форма, ПутьКДаннымТЧ = "Объект.Проводки", ИмяТЧ = "Проводки", ПланСчетов = "МСФО")

	УсловноеОформление = Форма.УсловноеОформление;
	
	КоличествоСубконто = УчетМСФОПовтИспУХ.ПолучитьМаксКоличествоСубконто(ПланСчетов);
	ВидРавно = ВидСравненияКомпоновкиДанных.Равно;
	
	Для каждого СторонаПроводки Из СтрРазделить("Дт,Кт", ",") Цикл
		
		ШаблонСубконто = "Субконто" + СторонаПроводки;//СубконтоДт
		ПутьКДанным = ПутьКДаннымТЧ + "." + ШаблонСубконто;//Объект.Проводки.СубконтоДт
		ИмяПоля = ИмяТЧ + ШаблонСубконто;//ПроводкиСубконтоДт
		
		Для НомерСубконто = 1 По КоличествоСубконто Цикл

			НомерТекстом = Формат(НомерСубконто, "ЧГ=");
			
			// Видимость СубконтоДт
			УО = УсловноеОформление.Элементы.Добавить();			
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(УО.Поля, ИмяПоля + НомерТекстом);			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(УО.Отбор, ПутьКДанным + НомерТекстом + "Доступность", ВидРавно, Ложь);
			УО.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	
			// Выделение не заполненного СубконтоДт			
			УО = УсловноеОформление.Элементы.Добавить();			
			КомпоновкаДанныхКлиентСервер.ДобавитьОформляемоеПоле(УО.Поля, ИмяПоля + НомерТекстом);			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(УО.Отбор, ПутьКДанным + НомерТекстом + "Доступность", ВидРавно, Истина);			
			ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(УО.Отбор, ПутьКДанным + НомерТекстом, ВидСравненияКомпоновкиДанных.НеЗаполнено);			
			УО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НеЗаполненноеСубконто);
			УО.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = '<...>'"));
			
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область ПроведениеМСФО

Процедура ПроверитьРеквизиты(Реквизиты, Отказ = Неопределено) Экспорт 
	
	РеквизитыПроверки = Новый Структура(
							"ПланСчетов, ПланСчетовМСФО, КонсолидирующаяОрганизация,
							|ВалютаПредставления, ВалютаОтчетности, ВспомогательныйСчет",
							НСтр("ru = 'План счетов МСФО'"),
							НСтр("ru = 'План счетов МСФО'"),
							НСтр("ru = 'Консолидирующая организация'"),	
							НСтр("ru = 'Валюта предоставления отчетности организации'") , 
							НСтр("ru = 'Вспомогательный: начальные остатки (Справочник: фиксированные счета БД)'")
						);
	
	Для каждого РеквизитПроверки Из РеквизитыПроверки Цикл		
		Если Реквизиты.Свойство(РеквизитПроверки.Ключ) И НЕ ЗначениеЗаполнено(Реквизиты[РеквизитПроверки.Ключ]) Тогда
			Заголовок = НСтр("ru = 'Не задано значение реквизита: '");
			ОбщегоНазначенияУХ.СообщитьОбОшибке(Заголовок + РеквизитПроверки.Значение, Отказ);
		КонецЕсли;		
	КонецЦикла;

КонецПроцедуры

//**ПроведениеСерверУХ.ДополнитьТаблицамиИзПакетаЗапросов
Функция ДополнитьПараметрыПроведенияИзРезультата(ПараметрыПроведения, Результат, НомераТаблиц, ПрефиксИсключаемыхТаблиц = Неопределено) Экспорт

	ДлинаПрефикса = СтрДлина(ПрефиксИсключаемыхТаблиц);
	
	Для Каждого НомерТаблицы Из НомераТаблиц Цикл
		
		Если (ПрефиксИсключаемыхТаблиц <> Неопределено) 
			И (ПрефиксИсключаемыхТаблиц = Лев(НомерТаблицы.Ключ,ДлинаПрефикса)) Тогда
		
			Продолжить;
		
		КонецЕсли;
		
		ПараметрыПроведения.Вставить(НомерТаблицы.Ключ, Результат[НомерТаблицы.Значение].Выгрузить());
		
	КонецЦикла;
	
	Возврат ПараметрыПроведения; 
	
КонецФункции

#Область РеквизитыДокумента

Функция РеквизитыДокумента(Запрос, ИменаДопРеквизитов = Неопределено, ИмяПериодОтчета = "ПериодОтчета", Отказ = Неопределено) Экспорт
    
	Возврат Документы.УчетнаяПолитикаМСФО.РеквизитыДокумента(Запрос, ИменаДопРеквизитов, ИмяПериодОтчета, Отказ);//**УП ух32
	
	//ИмяДокумента = Метаданные.НайтиПоТипу(ТипЗнч(Запрос.Параметры.Ссылка)).Имя;
	//
	//ТекстДопРеквизиты = ТекстДопРеквизиты(ИменаДопРеквизитов, ИмяПериодОтчета);
	//
	//ТекстЗапроса = Новый Массив;
	//НомераТаблиц = Новый Структура;
	//
	//ТекстЗапроса.Добавить(ТекстЗапроса_втУП(НомераТаблиц));
	//ТекстЗапроса.Добавить(ТекстЗапроса_втАОСВ(НомераТаблиц, ТекстДопРеквизиты));
	//ТекстЗапроса.Добавить(ТекстЗапроса_Реквизиты(НомераТаблиц, ТекстДопРеквизиты));
	//
	//Запрос.Текст = СтрСоединить(ТекстЗапроса, ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета());
	//Запрос.Текст = СтрЗаменить(Запрос.Текст, "ВводВНАВЭксплуатациюМСФО", ИмяДокумента);
	//	
	//Реквизиты = ПроведениеСерверУХ.СтрокаТаблицыЗначенийВСтруктуру(Запрос.Выполнить().Выгрузить()[0]);
	//
	//ПроверитьРеквизиты(Реквизиты, Отказ);
	//
	//Возврат Реквизиты;
	//
КонецФункции

Функция ТекстЗапроса_втУП(НомераТаблиц)

	НомераТаблиц.Вставить("втУП", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	псМСФО.Ссылка КАК ПланСчетов
	|ПОМЕСТИТЬ втУП
	|ИЗ
	|	Справочник.ПланыСчетовБД КАК псМСФО
	|ГДЕ
	|	НЕ псМСФО.ПометкаУдаления
	|	И псМСФО.Наименование = ""МСФО""
	|	И псМСФО.Владелец = ЗНАЧЕНИЕ(Справочник.ТипыБазДанных.ТекущаяИБ)";
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапроса_втАОСВ(НомераТаблиц, ТекстДопРеквизиты = Неопределено)

	НомераТаблиц.Вставить("втАОСВ", НомераТаблиц.Количество());
		
	ТекстЗапроса = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	т.Ссылка КАК ВидОтчетаАОСВ
	|ПОМЕСТИТЬ втАОСВ
	|ИЗ
	|	Справочник.ВидыОтчетов КАК т
	|ГДЕ
	|	т.Предназначение = ЗНАЧЕНИЕ(Перечисление.ПредназначенияЭлементовСтруктурыОтчета.ОборотноСальдоваяВедомость)
	|	И т.ИспользоватьПоУмолчанию
	|	И ЛОЖЬ
	|	И т.ПланСчетов В
	|			(ВЫБРАТЬ
	|				втУП.ПланСчетов
	|			ИЗ
	|				втУП КАК втУП)
	|
	|УПОРЯДОЧИТЬ ПО
	|	т.НеФормироватьАналитическиеРаскрытия";
	
	Если (ТекстДопРеквизиты <> Неопределено) 
		И СтрНайти(ТекстДопРеквизиты, "ВидОтчета") > 0 Тогда
	
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ЛОЖЬ", "ИСТИНА");
	
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	

КонецФункции

Функция ТекстДопРеквизиты(ИменаДопРеквизитов, ИмяПериодОтчета)

	ПутиДопРеквизитов = ПутиДопРеквизитов(ИменаДопРеквизитов, ИмяПериодОтчета);
	
	Замены = Новый Массив;
	Для каждого р Из ПутиДопРеквизитов Цикл
		ВыражениеПоля = ?(р.Значение = Неопределено, "д." + р.Ключ, р.Значение);
		Замены.Добавить(СтрШаблон("%1 КАК %2", ВыражениеПоля, р.Ключ));
	КонецЦикла;
	Замены.Добавить("NULL");
	
	Возврат СтрСоединить(Замены, ", ");

КонецФункции

Функция ПутиДопРеквизитов(ИменаДопРеквизитов, ИмяПериодОтчета = "ПериодОтчета")

	Если ТипЗнч(ИменаДопРеквизитов) = Тип("Строка") Тогда
	    Результат = Новый Структура(ИменаДопРеквизитов);
	Иначе 
		Результат = ИменаДопРеквизитов;
	КонецЕсли;
	
	ПолеАлгоритмРСБУ = 
	"ИСТИНА В
	|		(ВЫБРАТЬ
	|			т.Значение
	|		ИЗ
	|			Константа.АлгоритмНачиcленияАмортизацииАналогичноРСБУ КАК т)";

	тПериодОтчета = "д." + ИмяПериодОтчета;
		
	ИсточникДоп = Новый Структура(
						"ПериодОтчета, ДатаНачала, ДатаОкончания,
						|ЭлиминирующаяОрганизация, РегламентированнаяОрганизация,
						|ВидОтчета, АлгоритмРСБУ, РеализуемыеАктивыВГО",
		
						тПериодОтчета,
						тПериодОтчета + ".ДатаНачала",
						тПериодОтчета + ".ДатаОкончания",
	
						"д.Организация.ЭлиминирующаяОрганизация",
						"д.Организация.ИспользоватьВРегламентированномУчете",
						
	                    "втАОСВ.ВидОтчетаАОСВ",
						ПолеАлгоритмРСБУ,	
						"ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоКорпоративные.РеализуемыеАктивыВГО)"
					);
	
	ЗаполнитьЗначенияСвойств(Результат, ИсточникДоп);
	
	Возврат Результат;

КонецФункции

Функция ТекстЗапроса_Реквизиты(НомераТаблиц, ТекстДопРеквизиты = Неопределено)

	НомераТаблиц.Вставить("втРеквизитыУП", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	д.Дата КАК Период,
	|	д.Дата КАК Дата,
	|	д.Организация КАК Организация,
	|	д.Организация.ФункциональнаяВалюта КАК ФункциональнаяВалюта,
	|	""ДопПоля"" КАК ДопПоля,
	|	д.Сценарий КАК Сценарий,
	|	д.Ссылка КАК Ссылка,
	|	д.Организация.МодельУчетаМСФО КАК МодельУчетаМСФО,
	|	ЕСТЬNULL(д.Организация.МодельУчетаМСФО, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.МоделиУчетаМСФО.ТранзакционныйУчетПроводки) КАК ФормироватьПроводкиМСФО,
	|	втУП.ВалютаПредоставленияОтчетности КАК ВалютаПредставления,
	|	втУП.
	|	втУП.ПланСчетов КАК ПланСчетовМСФО,
	|	д.Дата КАК ДатаУП,
	|	д.Организация КАК УчетнаяПолитика
	|ИЗ
	|	Документ.ВводВНАВЭксплуатациюМСФО КАК д
	|		ЛЕВОЕ СОЕДИНЕНИЕ втУП КАК втУП
	|		ПО (ИСТИНА)
	|		ЛЕВОЕ СОЕДИНЕНИЕ втАОСВ КАК втАОСВ
	|		ПО (ИСТИНА)
	|ГДЕ
	|	д.Ссылка = &Ссылка";
	
	Если ТекстДопРеквизиты <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, """ДопПоля""", ТекстДопРеквизиты);	
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

#КонецОбласти

Функция ПланСчетовУП(Организация = Неопределено, Сценарий = Неопределено, ДатаСведений = Неопределено) Экспорт
	Возврат Документы.УчетнаяПолитикаМСФО.ЗначениеУП("ПланСчетовУчета", Организация, ДатаСведений, Сценарий);	
КонецФункции

Функция ПланСчетовПоУмолчанию(Сценарий = Неопределено) Экспорт
	ПланСчетовУП = ПланСчетовУП(, Сценарий);
	Возврат ?(ЗначениеЗаполнено(ПланСчетовУП), ПланСчетовУП, Справочники.ПланыСчетовБД.ПолучитьПланСчетовБД());
КонецФункции

#КонецОбласти

#Область ОбщиеКэшируемыеЗначения
	
Процедура ЗаполнитьКэшируемыеЗначения(ФормаДокумента) Экспорт

	Если ФормаДокумента.КэшируемыеЗначения = Неопределено Тогда
		ФормаДокумента.КэшируемыеЗначения = Новый Структура;
	КонецЕсли;	
	
	МетаданныеДокумента = Новый Структура("Имя,РасширенноеПредставлениеОбъекта,Синоним");
	ЗаполнитьЗначенияСвойств(МетаданныеДокумента, ФормаДокумента.Объект.Ссылка.Метаданные());
	ФормаДокумента.КэшируемыеЗначения.Вставить("МетаданныеДокумента", МетаданныеДокумента);
	
	ФормаДокумента.КэшируемыеЗначения.Вставить("КлючевыеСубконто", МСФОВНАУХ.ПолучитьКлючевыеСубконтоВНА());
		
	ВидыУчета = Новый Структура("НСБУ,МСФО", Перечисления.ВидыУчета.НСБУ, Перечисления.ВидыУчета.МСФО);
	ФормаДокумента.КэшируемыеЗначения.Вставить("ВидыУчета",	ВидыУчета);
	
	РежимыЗаполнения = Новый Структура("НСБУ,МСФО,НСБУМСФО", Перечисления.РежимЗаполненияВидовУчета.НСБУ, 
			Перечисления.РежимЗаполненияВидовУчета.МСФО, Перечисления.РежимЗаполненияВидовУчета.НСБУИМСФО);
	ФормаДокумента.КэшируемыеЗначения.Вставить("РежимыЗаполнения",	РежимыЗаполнения);
	
	ОбновитьКэшируемыеЗначенияОрганизации(ФормаДокумента);
				
КонецПроцедуры

Процедура ОбновитьКэшируемыеЗначенияОрганизации(ФормаДокумента, Организация = Неопределено) Экспорт
	
	ТекущаяОрганизация = ?(Организация = Неопределено, ФормаДокумента.Объект.Организация, Организация);
	
	КонтекстФормы = Новый Структура("Документ");
	ЗаполнитьЗначенияСвойств(КонтекстФормы, ФормаДокумента);
	КонтекстДокумента = КонтекстФормы.Документ; //форма ГрафикФИМСФО
	Если Не ЗначениеЗаполнено(КонтекстДокумента) Тогда
		КонтекстДокумента = ФормаДокумента.Объект;
	КонецЕсли;

	ДатаУП = КонтекстДокумента.Дата;
	Сценарий = КонтекстДокумента.Сценарий;

	ИменаУП = "ПланСчетовМСФО, ПланСчетов, ФункциональнаяВалюта, ШаблонТрансляции, ФормироватьПроводкиМСФО";
	ПутиУП = МСФОВызовСервераУХ.ПутиРеквизитовУП(ИменаУП);
	ЗначенияУП = МСФОВызовСервераУХ.ЗначенияУП(ПутиУП, ТекущаяОрганизация, ДатаУП, Сценарий);
	РеквизитыУП = МСФОВызовСервераУХ.ЗначенияПоОрганизацииУП(ЗначенияУП);
	
	ФормаДокумента.КэшируемыеЗначения.Вставить("ФункциональнаяВалюта", 		РеквизитыУП.ФункциональнаяВалюта);
	ФормаДокумента.КэшируемыеЗначения.Вставить("ПланСчетовНСБУ", 			РеквизитыУП.ПланСчетов);	
	ФормаДокумента.КэшируемыеЗначения.Вставить("ПланСчетовМСФО",			РеквизитыУП.ПланСчетовМСФО);
	ФормаДокумента.КэшируемыеЗначения.Вставить("ШаблонТрансляции",			РеквизитыУП.ШаблонТрансляции);
    ФормаДокумента.КэшируемыеЗначения.Вставить("ФормироватьПроводкиМСФО",	РеквизитыУП.ФормироватьПроводкиМСФО);
    
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийТабличнойЧасти

Процедура ОчиститьТаблицы(ФормаДокумента, ИмяТаблицы = "ВНА") Экспорт

	Объект = ФормаДокумента.Объект;
	Объект.ДокументыОснования.Очистить();

КонецПроцедуры

Процедура ОбновитьРеквизитыНСБУ(ФормаДокумента, РеквизитыДляОбновления = "", СтрокиТаблицыОС = Неопределено) Экспорт
КонецПроцедуры

Процедура ЗаполнитьТаблицыНаСервере(ФормаДокумента) Экспорт 
	
КонецПроцедуры

Процедура ЗаполнитьПоКолонкамНСБУСервер(ФормаДокумента, ИмяТаблицы = "ВНА", ТолькоНезаполненные = Истина) Экспорт

	Объект = ФормаДокумента.Объект;
	
	ТипСчетаБД = Тип("СправочникСсылка.СчетаБД");
	ТипСпособы = Тип("СправочникСсылка.СпособыОтраженияРасходовПоАмортизацииМСФО");
	ЭтоКонтекстФормы = (ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура"));
	
	СоответствиеКолонок = ПолучитьСоответствиеКолонок(ФормаДокумента, ИмяТаблицы);
	
	КэшЗначенийМСФО = Новый Соответствие;
	
	Организация = Объект.Организация;
	ПланСчетовНСБУ = Справочники.ПланыСчетовБД.ПолучитьПланСчетовБД("Хозрасчетный");//**
		
	Для Каждого СтрокаВНА Из Объект[ИмяТаблицы] Цикл
		
		Для каждого КолонкаВНА Из СоответствиеКолонок Цикл
			
			Если Не (КолонкаВНА.Значение.Свойство("НСБУ") И КолонкаВНА.Значение.Свойство("МСФО")) Тогда
				Продолжить;
			КонецЕсли;
			
			ЗначениеМСФО = СтрокаВНА[КолонкаВНА.Ключ + "МСФО"];
			Если ТолькоНезаполненные И (ЗначениеМСФО <> Ложь) И ЗначениеЗаполнено(ЗначениеМСФО) Тогда
				Продолжить; //Уже заполнено
			КонецЕсли;
			
			ЗначениеМСФО = СтрокаВНА[КолонкаВНА.Ключ + "НСБУ"];
			Если ТипЗнч(ЗначениеМСФО) = ТипСчетаБД Тогда
				
				ЗначениеКэша = КэшЗначенийМСФО.Получить(ЗначениеМСФО);
				Если ЗначениеКэша = Неопределено Тогда
					ЗначениеКэша = МСФОВНАВызовСервераУХ.ПолучитьСчетМСФОТрансформации(
																		ЗначениеМСФО, 
																		Организация, 
																		Объект.Сценарий, 
																		, 
																		ПланСчетовНСБУ);
																		
					КэшЗначенийМСФО.Вставить(ЗначениеМСФО, ЗначениеКэша);
				КонецЕсли;
				ЗначениеМСФО = ЗначениеКэша;
			ИначеЕсли ТипЗнч(ЗначениеМСФО) = ТипСпособы Тогда 
				
				ЗначениеКэша = КэшЗначенийМСФО.Получить(ЗначениеМСФО);
				Если ЗначениеКэша = Неопределено Тогда
					//ЗначениеКэша = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(ЗначениеМСФО, "СпособОтраженияРасходовМСФО");
					//КэшЗначенийМСФО.Вставить(ЗначениеМСФО, ЗначениеКэша);
				КонецЕсли;
				ЗначениеМСФО = ЗначениеКэша;
				
			КонецЕсли;
			
			СтрокаВНА[КолонкаВНА.Ключ + "МСФО"] = ЗначениеМСФО;
			
		КонецЦикла;
		
		Если ЭтоКонтекстФормы Тогда
			СтрокаВНА.ЕстьИзменение = Истина;	
		КонецЕсли;
				
	КонецЦикла;
	
КонецПроцедуры	

Процедура ЗаполнитьОснованияСервер(ФормаДокумента) Экспорт
	
	Объект = ФормаДокумента.Объект;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сценарий",		Объект.Сценарий);
	Запрос.УстановитьПараметр("Организация",	Объект.Организация);
	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("КонецПериода", 	КонецМесяца(Объект.Дата));
	Запрос.УстановитьПараметр("ВидУчета",		Перечисления.РежимЗаполненияВидовУчета.НСБУ);	
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПереоценкаВНАМСФО.Ссылка КАК ДокументОснование
	|ИЗ
	|	Документ.ПереоценкаВНАМСФО КАК ПереоценкаВНАМСФО
	|ГДЕ
	|	ПереоценкаВНАМСФО.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ПереоценкаВНАМСФО.Проведен
	|	И ПереоценкаВНАМСФО.Организация = &Организация
	|	И ПереоценкаВНАМСФО.Сценарий = &Сценарий
	|	И ПереоценкаВНАМСФО.ВидУчета = &ВидУчета";		   	
	
	Объект.ДокументыОснования.Загрузить(Запрос.Выполнить().Выгрузить());
	
	ЗаполнитьТаблицыНаСервере(ФормаДокумента);	
	
КонецПроцедуры

#КонецОбласти

#Область СоответствиеКолонок

Функция ПолучитьСоответствиеКолонок(ФормаДокумента, ИмяТаблицы = "ВНА") Экспорт

	Перем СоответствиеКолонок;
	
	Если ФормаДокумента.КэшируемыеЗначения.Свойство("СоответствиеКолонок", СоответствиеКолонок) Тогда
		Возврат СоответствиеКолонок; // заполнено ранее
	КонецЕсли;
		
	ТаблицаСоответствий = Новый Соответствие;

	Постфиксы = Новый Структура("МСФО,НСБУ,Расхождение", СтрДлина("МСФО"), СтрДлина("НСБУ"), СтрДлина("Расхождение"));
	
	ТипПолеФормы = ?(ТипЗнч(ФормаДокумента) = Тип("Структура"),Тип("Структура"),Тип("ПолеФормы"));//для контекстаФормы - используем структуру
	ПрефиксПоиска = "Объект." + ИмяТаблицы + ".";
	ПрефиксПоискаЭлементы = "Элементы." + ИмяТаблицы + ".ТекущиеДанные.";
	ДлинаПрефиксаПоиска = СтрДлина(ПрефиксПоиска);
	ДлинаПрефиксаПоискаЭлементы = СтрДлина(ПрефиксПоискаЭлементы);
	ДлинаДоступность = СтрДлина("Доступность");
	
	Для каждого ЭлементФормы Из ФормаДокумента.Элементы Цикл
		
		Если ТипЗнч(ЭлементФормы) <> ТипПолеФормы Тогда
			Продолжить;
		КонецЕсли;
			
		Если Лев(ЭлементФормы.ПутьКДанным, ДлинаПрефиксаПоиска) = ПрефиксПоиска Тогда
			ИмяРеквизита = СтрЗаменить(ЭлементФормы.ПутьКДанным, ПрефиксПоиска, "");
		ИначеЕсли Лев(ЭлементФормы.ПутьКДанным, ДлинаПрефиксаПоискаЭлементы) = ПрефиксПоискаЭлементы Тогда
			ИмяРеквизита = СтрЗаменить(ЭлементФормы.ПутьКДанным, ПрефиксПоискаЭлементы, "");
		Иначе
			Продолжить;
		КонецЕсли;
		
		ПолеРеквизита = СтрНайти(ИмяРеквизита, ".")>0;
		
		Для каждого Постфикс Из Постфиксы Цикл
			
			Если СтрНайти(ИмяРеквизита, Постфикс.Ключ + ?(ПолеРеквизита, ".", "")) > 0 
				И (Прав(ИмяРеквизита, ДлинаДоступность) <> "Доступность") Тогда
				
				ИмяСоотв = СтрЗаменить(ИмяРеквизита, Постфикс.Ключ, "");
				
				Соотв = ТаблицаСоответствий.Получить(ИмяСоотв);
				Если Соотв = Неопределено Тогда
					Соотв = Новый Структура;
				КонецЕсли;
				
				Соотв.Вставить(Постфикс.Ключ, Истина);
				Соотв.Вставить("ПолеРеквизита", ПолеРеквизита);
				ТаблицаСоответствий.Вставить(ИмяСоотв, Соотв);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ТаблицаСоответствий;
	
КонецФункции

#КонецОбласти

#Область ДокументыСобытия

Функция ПолучитьДокументСобытие(ИмяТипаДокумента, ДатаСобытия, ДополнительныеСвойства, КэшДокументов = Неопределено, Знач РежимЗаполнения = Неопределено) Экспорт 

	Реквизиты = ДополнительныеСвойства.ДляПроведения.Реквизиты;
		
	Отбор = Новый Структура("ДатаСобытия,ИмяДокумента,РежимЗаполнения", ДатаСобытия, ИмяТипаДокумента, РежимЗаполнения);
	СтрокиПоиска = КэшДокументов.НайтиСтроки(Отбор);
	Если СтрокиПоиска.Количество()=0 Тогда
		
		ДокументОбъект = Документы[ИмяТипаДокумента].СоздатьДокумент();
		Если ИмяТипаДокумента = "НачислениеАмортизацииВНАМСФО" Тогда
			
			ПериодМесяц = ОбщегоНазначенияУХ.глОтносительныйПериодПоДате(ДатаСобытия, Перечисления.Периодичность.Месяц, 0, Истина);
			Если ЗначениеЗаполнено(ПериодМесяц) Тогда
				ДокументОбъект.ПериодОтчета = ПериодМесяц;	
			Иначе
				ДокументОбъект.ПериодОтчета = ДополнительныеСвойства.ДляПроведения.Реквизиты.ПериодОтчета;
			КонецЕсли;
		КонецЕсли;
		
		ДокументОбъект.Организация = ДополнительныеСвойства.ДляПроведения.Реквизиты.Организация;
		ДокументОбъект.Дата = ДатаСобытия;		
		ДокументОбъект.УстановитьНовыйНомер();
	
	Иначе
		
		СтрокиПоиска[0].Перезаполнен = Истина;
		ДокументОбъект = СтрокиПоиска[0].ДокументСобытие.ПолучитьОбъект();
		
	КонецЕсли;
	
	//перезаполняемые реквизиты		
	ДокументОбъект.Сценарий 		= ДополнительныеСвойства.ДляПроведения.Реквизиты.Сценарий;
	ДокументОбъект.Ответственный	= Пользователи.ТекущийПользователь();
	
	Если ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.НачислениеАмортизацииВНАМСФО") 
		И ТипЗнч(ДокументОбъект) <> Тип("ДокументОбъект.ПризнаниеРасходовПоАмортизацииНСБУ") Тогда	
		
		Если РежимЗаполнения = Неопределено Тогда		
			ДокументОбъект.РежимЗаполнения = ДополнительныеСвойства.ДляПроведения.Реквизиты.РежимЗаполненияДокументовСобытий;
		Иначе 
			ДокументОбъект.РежимЗаполнения = РежимЗаполнения;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДокументОбъект;
	
КонецФункции

Функция ПолучитьДокументыСобытияПоОснованию(ДополнительныеСвойства) Экспорт

	Реквизиты = ДополнительныеСвойства.ДляПроведения.Реквизиты;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДокументыСобытия.Ссылка КАК ДокументСобытие,
	|	ДокументыСобытия.Ссылка.Дата КАК ДатаСобытия,
	|	ТИПЗНАЧЕНИЯ(ДокументыСобытия.Ссылка) КАК ТипДокумента,
	|	ЛОЖЬ КАК Перезаполнен,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДокументыСобытия.Ссылка.РежимЗаполнения, НЕОПРЕДЕЛЕНО) = НЕОПРЕДЕЛЕНО
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.РежимЗаполненияВидовУчета.ПустаяСсылка)
	|		ИНАЧЕ ДокументыСобытия.Ссылка.РежимЗаполнения
	|	КОНЕЦ КАК РежимЗаполнения
	|ИЗ
	|	КритерийОтбора.ДокументыВНАПоОснованию(&ДокументИсточник) КАК ДокументыСобытия
	|ГДЕ
	|	НЕ ДокументыСобытия.Ссылка.ПометкаУдаления";
	
	Запрос = Новый Запрос(ТекстЗапроса);	
	Запрос.УстановитьПараметр("ДокументИсточник", 	Реквизиты.Ссылка);	
	
	СозданныеСобытия = Запрос.Выполнить().Выгрузить();
	СозданныеСобытия.Колонки.Добавить("ИмяДокумента", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(0));
	
	КэшТипов = Новый Соответствие;
	
	Для Каждого СтрокаСобытие Из СозданныеСобытия Цикл
		
		СтрокаСобытие.ИмяДокумента = КэшТипов.Получить(СтрокаСобытие.ТипДокумента);
		Если НЕ ЗначениеЗаполнено(СтрокаСобытие.ИмяДокумента) Тогда
			КэшТипов.Вставить(СтрокаСобытие.ТипДокумента, Метаданные.НайтиПоТипу(СтрокаСобытие.ТипДокумента).Имя);
			СтрокаСобытие.ИмяДокумента = КэшТипов.Получить(СтрокаСобытие.ТипДокумента);
		КонецЕсли;
		
	КонецЦикла;
	
	СозданныеСобытия.Индексы.Добавить("ДатаСобытия,ИмяДокумента,РежимЗаполнения");
	
	Возврат СозданныеСобытия;
	
КонецФункции

Функция ДобавитьУсловноеОформлениеТолькоПросмотр(ЭтаФорма, МассивИменОформляемыхПолей, 
													ЛевоеЗначение = Неопределено, ПравоеЗначение = Неопределено, ВидСравнения = Неопределено) Экспорт

	ЭлементУО = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементОтбора = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Если ТипЗнч(ЛевоеЗначение) = Тип("Строка") Тогда
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ЛевоеЗначение);
	Иначе
		ЭлементОтбора.ЛевоеЗначение = ЛевоеЗначение;
	КонецЕсли;
	
	ЭлементОтбора.ПравоеЗначение = ПравоеЗначение;
	Если ВидСравнения <> Неопределено Тогда
		ЭлементОтбора.ВидСравнения = ВидСравнения;
	КонецЕсли;
	
	Для каждого ПолеОформления Из МассивИменОформляемыхПолей Цикл
		ПолеУО = ЭлементУО.Поля.Элементы.Добавить();
		ПолеУО.Поле = Новый ПолеКомпоновкиДанных(ПолеОформления);	
	КонецЦикла;
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветаСтиля.ЦветФонаТолькоПросмотр);
	
	Возврат ЭлементУО;
	
КонецФункции

#КонецОбласти

#Область ЗаполнениеДокументов

Процедура ОбработкаЗаполнения(Объект, ДанныеЗаполнения = Неопределено, РежимЗаполнения = Неопределено) Экспорт
	
	СписокРеквизитов = Новый Структура;
	СписокРеквизитов.Вставить("Сценарий");
	СписокРеквизитов.Вставить("РежимЗаполнения");
	СписокРеквизитов.Вставить("ПериодОтчета");
	СписокРеквизитов.Вставить("Организация");
	
	Если ДанныеЗаполнения <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СписокРеквизитов, ДанныеЗаполнения);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СписокРеквизитов.Сценарий) Тогда
		СписокРеквизитов.Сценарий = Константы.СценарийМСФО.Получить();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СписокРеквизитов.РежимЗаполнения) Тогда
		Если РежимЗаполнения = Неопределено Тогда
			СписокРеквизитов.РежимЗаполнения = ПредопределенноеЗначение("Перечисление.РежимЗаполненияВидовУчета.НСБУИМСФО");
		Иначе
			СписокРеквизитов.РежимЗаполнения = РежимЗаполнения;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СписокРеквизитов.ПериодОтчета) Тогда
		СписокРеквизитов.ПериодОтчета = МСФОВНАВызовСервераУХ.ПолучитьПериодПоДатеПараллельногоУчета(Объект.Дата, Неопределено);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СписокРеквизитов.Организация) Тогда
		СписокРеквизитов.Организация = ОбщегоНазначенияУХ.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация");
	КонецЕсли;
	
 	ДоступныеРеквизиты = Объект.Метаданные().Реквизиты;
	
	Объект.Дата = НачалоДня(ТекущаяДатаСеанса());
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	Если ДоступныеРеквизиты.Найти("Сценарий") <> Неопределено Тогда
		УстановитьНезаполненноеЗначение(Объект.Сценарий, СписокРеквизитов.Сценарий);
	КонецЕсли;
	
	Если ДоступныеРеквизиты.Найти("ПериодОтчета") <> Неопределено Тогда
		УстановитьНезаполненноеЗначение(Объект.ПериодОтчета, СписокРеквизитов.ПериодОтчета);
	КонецЕсли;
	
	Если ДоступныеРеквизиты.Найти("Организация") <> Неопределено Тогда
		УстановитьНезаполненноеЗначение(Объект.Организация, СписокРеквизитов.Организация);
	КонецЕсли;
			
	Если ДоступныеРеквизиты.Найти("РежимЗаполнения") <> Неопределено Тогда
		УстановитьНезаполненноеЗначение(Объект.РежимЗаполнения, СписокРеквизитов.РежимЗаполнения);
	КонецЕсли;
КонецПроцедуры

// Устарела. Необходимо использовать процедуру ОбработкаЗаполнения
Процедура ЗаполнитьДокумент(Объект, РежимЗаполнения = Неопределено, Отказ = Ложь) Экспорт 

	ЕстьРеквизитРежимЗаполнения = Ложь;
	
	Если ТипЗнч(Объект) = Тип("ДанныеФормыСтруктура") Тогда		
		ЕстьРеквизитРежимЗаполнения = Объект.Свойство("РежимЗаполнения");
		ДоступныеРеквизиты = Новый Структура;
	Иначе	
		
	 	ДоступныеРеквизиты = Объект.Метаданные().Реквизиты;
		ЕстьРеквизитРежимЗаполнения = ДоступныеРеквизиты.Найти("РежимЗаполнения") <> Неопределено;		
	КонецЕсли;
	
	Объект.Дата = НачалоДня(ТекущаяДатаСеанса());
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	ПериодОтчета = МСФОВНАВызовСервераУХ.ПолучитьПериодПоДатеПараллельногоУчета(Объект.Дата, Неопределено);
	
	Если ДоступныеРеквизиты.Найти("Сценарий") <> Неопределено Тогда
		УстановитьНезаполненноеЗначение(Объект.Сценарий, Константы.СценарийМСФО.Получить());
	КонецЕсли;
	
	Если ДоступныеРеквизиты.Найти("ПериодОтчета") <> Неопределено Тогда
		УстановитьНезаполненноеЗначение(Объект.ПериодОтчета,	ПериодОтчета);
	КонецЕсли;
	
	Если ДоступныеРеквизиты.Найти("Организация") <> Неопределено Тогда
		УстановитьНезаполненноеЗначение(Объект.Организация, ОбщегоНазначенияУХ.ПолучитьЗначениеПоУмолчанию("ОсновнаяОрганизация"));
	КонецЕсли;
			
	Если ЕстьРеквизитРежимЗаполнения И Объект.РежимЗаполнения.Пустая() Тогда
		Если РежимЗаполнения = Неопределено Тогда
			УстановитьНезаполненноеЗначение(Объект.РежимЗаполнения, ПредопределенноеЗначение("Перечисление.РежимЗаполненияВидовУчета.НСБУИМСФО")); 
		Иначе	
		    УстановитьНезаполненноеЗначение(Объект.РежимЗаполнения, РежимЗаполнения); 
		КонецЕсли;		
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьНезаполненноеЗначение(Параметр, Значение)

	Если (Параметр <> Значение) И ЗначениеЗаполнено(Значение) Тогда
		Параметр = Значение;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ТрансляцияЗапросом
			
Функция ДобавитьЗапросыТрансляции(ТекстЗапроса, НомераТаблиц, ТекстЗапросаСчетаИсточники = Неопределено) Экспорт

	ТекстЗапроса.Добавить(ТекстЗапроса_втСоответствияТрансляции(НомераТаблиц, ТекстЗапросаСчетаИсточники));
	ТекстЗапроса.Добавить(ТекстЗапроса_втПолучениеПолей(НомераТаблиц));
	ТекстЗапроса.Добавить(ТекстЗапроса_втПравилаПолей(НомераТаблиц));
	
КонецФункции

Функция ТекстЗапроса_втСоответствияТрансляции(НомераТаблиц, ТекстЗапросаСчетаИсточники = Неопределено)

	НомераТаблиц.Вставить("втСоответствияТрансляции", НомераТаблиц.Количество());
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Соотв.СчетПриемник КАК СчетПриемник,
	|	Соотв.СчетИсточник КАК СчетИсточник,
	|	Соотв.Ссылка КАК Соотв,
	|	ИД.Ссылка КАК ИД,
	|	ИД.ТрансляцияДебет КАК ТрансляцияДебет,
	|	ИД.ТрансляцияКредит КАК ТрансляцияКредит,
	|	ИД.КоррСчет <> ЗНАЧЕНИЕ(Справочник.СчетаБД.ПустаяСсылка) КАК ПрименениеПоКорреспонденции,
	|	НастройкиПравилТрансляции.КоррСчетИсточник КАК КоррСчетИсточник,
	|	ИД.КоррСчет КАК КоррСчет
	|ПОМЕСТИТЬ втСоответствияТрансляции
	|ИЗ
	|	Справочник.СоответствияСчетовДляТрансляции КАК Соотв
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИсточникиДанныхДляРасчетов КАК ИД
	|		ПО Соотв.Ссылка = ИД.ПотребительРасчета
	|			И (ВЫРАЗИТЬ(ИД.НазначениеРасчетов КАК Справочник.ПравилаОбработки).Владелец = &ШаблонТрансляции)
	|			И (НЕ ИД.ПометкаУдаления)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравилТрансляции КАК НастройкиПравилТрансляции
	|		ПО Соотв.Ссылка = НастройкиПравилТрансляции.СоответствиеСчетов
	|ГДЕ
	|	Соотв.СчетИсточник В(&СчетаИсточники)
	|	И Соотв.Владелец = &ШаблонТрансляции
	|	И НЕ Соотв.ПометкаУдаления
	|	И НЕ Соотв.НеТранслировать
	|	И Соотв.СчетПриемник.СчетСсылка <> НЕОПРЕДЕЛЕНО
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИД";
	
	Если ТекстЗапросаСчетаИсточники <> Неопределено Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&СчетаИсточники", ТекстЗапросаСчетаИсточники);
	КонецЕсли;
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапроса_втПолучениеПолей(НомераТаблиц)

	НомераТаблиц.Вставить("втПолучениеПолей", НомераТаблиц.Количество());
	
	//ПОДСТРОКА("СубконтоДт2.Код",11,1) = "2"
	//ПОДСТРОКА("Аналитика2",10,1) = "2"
	//ПОДСТРОКА(МАКСИМУМ(Получение.Поле),11,2) = ПОДСТРОКА(МАКСИМУМ(Получение.КодАналитики),10,2) - субконто номер-в-номер 
	
	//Виды получения полей:
	//ИСТИНА - 1в1, 			например П.Субконто2 = И.Субконто2
	//"Субконто2.Родитель", 	например П.Субконто2 = И.Субконто2.Родитель
	//Ссылка, 					например П.Субконто2 = втПолучениеПолей.Субконто2
	//NULL(нет заполнения), 	например П.Субконто2 = NULL
	
	Возврат
	"ВЫБРАТЬ
	|	втСоотв.СчетПриемник КАК СчетПриемник,
	|	втСоотв.СчетИсточник КАК СчетИсточник,
	|	втСоотв.Соотв КАК Соотв,
	|	втСоотв.ИД КАК ИД,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(Получение.Поле) = Получение.КодАналитики
	|			ТОГДА ИСТИНА
	|		КОГДА ПОДСТРОКА(МАКСИМУМ(Получение.Поле), 11, 2) = ПОДСТРОКА(МАКСИМУМ(Получение.КодАналитики), 10, 2)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ МАКСИМУМ(Получение.Поле)
	|	КОНЕЦ КАК ПолеИсточник,
	|	Получение.КодАналитики КАК ПолеПриемник
	|ПОМЕСТИТЬ втПолучениеПолей
	|ИЗ
	|	втСоответствияТрансляции КАК втСоотв
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ИсточникиДанныхДляРасчетов.ПравилаИспользованияПолейЗапроса КАК Получение
	|		ПО втСоотв.ИД = Получение.Ссылка
	|ГДЕ
	|	ПОДСТРОКА(Получение.КодАналитики, 0, 2) В (""Ан"", ""По"", ""На"")
	|	И Получение.Поле <> """"
	|
	|СГРУППИРОВАТЬ ПО
	|	втСоотв.СчетПриемник,
	|	втСоотв.СчетИсточник,
	|	втСоотв.Соотв,
	|	втСоотв.ИД,
	|	Получение.КодАналитики
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИД,
	|	ПолеПриемник";
	
КонецФункции

Функция ТекстЗапроса_втПравилаПолей(НомераТаблиц)
	
	НомераТаблиц.Вставить("втПравилаПолей", НомераТаблиц.Количество());
	
	Возврат
	"ВЫБРАТЬ
	|	втСоотв.СчетПриемник КАК СчетПриемник,
	|	втСоотв.СчетИсточник КАК СчетИсточник,
	|	втСоотв.Соотв КАК Соотв,
	|	втСоотв.ИД КАК ИД,
	|	втСоотв.ТрансляцияДебет КАК ТрансляцияДебит,
	|	втСоотв.ТрансляцияКредит КАК ТрансляцияКредит,
	|	втСоотв.ПрименениеПоКорреспонденции КАК ПрименениеПоКорреспонденции,
	|	втСоотв.КоррСчет КАК КоррСчет,
	|	ПолеПодразделение.ПолеИсточник КАК Подразделение,
	|	ПолеНаправлениеДеятельности.ПолеИсточник КАК НаправлениеДеятельности,
	|	ПолеВалюта.ПолеИсточник КАК Валюта,
	|	ПолеСубконто1.ПолеИсточник КАК Субконто1,
	|	ПолеСубконто2.ПолеИсточник КАК Субконто2,
	|	ПолеСубконто3.ПолеИсточник КАК Субконто3,
	|	ПолеСубконто4.ПолеИсточник КАК Субконто4
	|ПОМЕСТИТЬ втПравилаПолей
	|ИЗ
	|	втСоответствияТрансляции КАК втСоотв
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПолучениеПолей КАК ПолеПодразделение
	|		ПО втСоотв.ИД = ПолеПодразделение.ИД
	|			И (ПолеПодразделение.ПолеПриемник = ""Подразделение"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПолучениеПолей КАК ПолеНаправлениеДеятельности
	|		ПО втСоотв.ИД = ПолеНаправлениеДеятельности.ИД
	|			И (ПолеНаправлениеДеятельности.ПолеПриемник = ""НаправлениеДеятельности"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПолучениеПолей КАК ПолеВалюта
	|		ПО втСоотв.ИД = ПолеВалюта.ИД
	|			И (ПолеВалюта.ПолеПриемник = ""Валюта"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПолучениеПолей КАК ПолеСубконто1
	|		ПО втСоотв.ИД = ПолеСубконто1.ИД
	|			И (ПолеСубконто1.ПолеПриемник = ""Аналитика1"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПолучениеПолей КАК ПолеСубконто2
	|		ПО втСоотв.ИД = ПолеСубконто2.ИД
	|			И (ПолеСубконто2.ПолеПриемник = ""Аналитика2"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПолучениеПолей КАК ПолеСубконто3
	|		ПО втСоотв.ИД = ПолеСубконто3.ИД
	|			И (ПолеСубконто3.ПолеПриемник = ""Аналитика3"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПолучениеПолей КАК ПолеСубконто4
	|		ПО втСоотв.ИД = ПолеСубконто4.ИД
	|			И (ПолеСубконто4.ПолеПриемник = ""Аналитика4"")";

КонецФункции

Функция ПараметрыЗамены() Экспорт

	//в источниках могут быть КоррСчет - если возожны отборы по корСчету
	ПоляИсточники = Новый Структура("Субконто1, Субконто2, Субконто3, Подразделение, НаправлениеДеятельности");
	ПоляПриемники = Новый Структура("Субконто1, Субконто2, Субконто3, Подразделение, НаправлениеДеятельности");
	
	Возврат Новый Структура("ИмяТаблицыИсточника, ИмяТаблицыПолей, ПрефиксПараметров, СторонаДт, ПоляПриемники, ПоляИсточники",
						"ТаблицаИсточник", "втПравилаПолей", "Трансляция_", Истина, ПоляПриемники, ПоляИсточники);
	
КонецФункции

Функция ПолучитьЗаменыПараметров(ШаблонТрансляции = Неопределено, ПараметрыЗамены = Неопределено) Экспорт

	//** ссылки отборВСписке, отборНеВсписке, ОтборКодом
	Если ШаблонТрансляции = Неопределено Тогда
		ШаблонТрансляции = МСФОВызовСервераУХ.ЗначениеУП("ШаблонТрансляции", Справочники.Организации.ПустаяСсылка());
	КонецЕсли;
	
	Если ПараметрыЗамены = Неопределено Тогда
		ПараметрыЗамены = ПараметрыЗамены();
	КонецЕсли;
	
	ИмяТаблицыИсточника 	= ПараметрыЗамены.ИмяТаблицыИсточника; 
	ИмяТаблицыПолей 		= ПараметрыЗамены.ИмяТаблицыПолей; 
	ПрефиксПараметров 		= ПараметрыЗамены.ПрефиксПараметров; 
	ПоляИсточники 			= ПараметрыЗамены.ПоляИсточники;
	СторонаДт 				= ПараметрыЗамены.СторонаДт;
	
	НастройкиШаблонаТрансляции = УчетМСФОПовтИспУХ.НастройкиШаблонаТрансляции(ШаблонТрансляции);

	ЗаменыПараметров = Новый Структура;
	
	ШаблонПоля = ШаблонПоляПриемникаТрансляции(НастройкиШаблонаТрансляции.ДоступныеПути, ИмяТаблицыИсточника, ПоляИсточники);
	
	Для каждого ПолеПриемник Из ПараметрыЗамены.ПоляПриемники Цикл
		
		ПолеИ = ИмяТаблицыИсточника + "." + ?(ПолеПриемник.Значение = Неопределено, ПолеПриемник.Ключ, ПолеПриемник.Значение);
		ПолеЗ = ИмяТаблицыПолей + "." + ПолеПриемник.Ключ;
		
		ИмяПараметра = ПрефиксПараметров + ПолеПриемник.Ключ;
		ЗаменыПараметров.Вставить(ИмяПараметра, СтрШаблон(ШаблонПоля, ПолеЗ, ПолеИ));
			
	КонецЦикла;
	
	ТекстПО = ?(СторонаДт, ИмяТаблицыПолей + ".ТрансляцияДебит", ИмяТаблицыПолей + ".ТрансляцияКредит");
	Если Не ПоляИсточники.Свойство("КоррСчет") Тогда
		ТекстПО = ТекстПО + СтрШаблон(" И НЕ %1.ПрименениеПоКорреспонденции", ИмяТаблицыПолей);
	КонецЕсли;
	ЗаменыПараметров.Вставить(ПрефиксПараметров + "Отбор", ТекстПО);

	Возврат ЗаменыПараметров;

КонецФункции

Функция ШаблонПоляПриемникаТрансляции(ДоступныеПути, ИмяТаблицыИсточника, ПоляИсточники)
	
	МассивКогда = Новый Массив;
	Для каждого п Из ДоступныеПути Цикл
		
		ПутьИсточник = п;
		Если СтрНачинаетсяС(п, "СубконтоДт") Тогда
			ПутьИсточник = СтрЗаменить(ПутьИсточник, "СубконтоДт", "Субконто");
		ИначеЕсли СтрНачинаетсяС(п, "СубконтоКт") Тогда
			ПутьИсточник = СтрЗаменить(ПутьИсточник, "СубконтоКт", "Субконто");
		КонецЕсли;
		
		ПолеИсточник = Лев(ПутьИсточник, СтрНайти(ПутьИсточник, ".")-1);
		Если (ПолеИсточник <> "") И ПоляИсточники.Свойство(ПолеИсточник) И ЗначениеЗаполнено(ПоляИсточники[ПолеИсточник]) Тогда
			ПутьИсточник = СтрЗаменить(ПутьИсточник, ПолеИсточник, ПоляИсточники[ПолеИсточник]);
		КонецЕсли;
		
		МассивКогда.Добавить(СтрШаблон("КОГДА ""%1"" ТОГДА %2", п, ИмяТаблицыИсточника + "." + ПутьИсточник));
			
	КонецЦикла;

	ШаблонПоля =
	"ВЫБОР ТИПЗНАЧЕНИЯ(%1)
	|	КОГДА NULL 
	|		ТОГДА NULL
	|	КОГДА ТИП(БУЛЕВО) 
	|		ТОГДА %2
	|	КОГДА ТИП(СТРОКА) 
	|		ТОГДА 
	|				ВЫБОР %1 
	|					&КОГДА 
	|				КОНЕЦ
	|	ИНАЧЕ %1 
	|КОНЕЦ";
	
	Возврат СтрЗаменить(ШаблонПоля, "&КОГДА", СтрСоединить(МассивКогда, Символы.ПС));

КонецФункции

#КонецОбласти

#Область Прочие

Функция ПолучитьДанныеРежимаЗаполнения(РежимЗаполнения, ПолучитьНСБУ = Неопределено, ПолучитьМСФО = Неопределено) Экспорт

	ДанныеРежимаЗаполнения = Новый Структура("ВидыУчета,ЕстьНСБУ,ЕстьМСФО,ВидУчетаНСБУ,ВидУчетаМСФО", Новый Массив); 
	
	Запрос = Новый Запрос(	
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ПолучитьНСБУ = ИСТИНА
	|			ТОГДА ИСТИНА
	|		КОГДА &ПолучитьНСБУ = ЛОЖЬ
	|			ТОГДА ЛОЖЬ
	|		КОГДА &РежимЗаполнения В (ЗНАЧЕНИЕ(Перечисление.РежимЗаполненияВидовУчета.НСБУ), ЗНАЧЕНИЕ(Перечисление.РежимЗаполненияВидовУчета.НСБУИМСФО))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьНСБУ,
	|	ВЫБОР
	|		КОГДА &ПолучитьМСФО = ИСТИНА
	|			ТОГДА ИСТИНА
	|		КОГДА &ПолучитьМСФО = ЛОЖЬ
	|			ТОГДА ЛОЖЬ
	|		КОГДА &РежимЗаполнения В (ЗНАЧЕНИЕ(Перечисление.РежимЗаполненияВидовУчета.МСФО), ЗНАЧЕНИЕ(Перечисление.РежимЗаполненияВидовУчета.НСБУИМСФО))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЕстьМСФО,
	|	ВЫБОР
	|		КОГДА &ПолучитьНСБУ = ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчета.НСБУ)
	|		КОГДА &ПолучитьНСБУ = НЕОПРЕДЕЛЕНО
	|				И &РежимЗаполнения В (ЗНАЧЕНИЕ(Перечисление.РежимЗаполненияВидовУчета.НСБУ), ЗНАЧЕНИЕ(Перечисление.РежимЗаполненияВидовУчета.НСБУИМСФО))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчета.НСБУ)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидУчетаНСБУ,
	|	ВЫБОР
	|		КОГДА &ПолучитьМСФО = ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчета.МСФО)
	|		КОГДА &ПолучитьМСФО = НЕОПРЕДЕЛЕНО
	|				И &РежимЗаполнения В (ЗНАЧЕНИЕ(Перечисление.РежимЗаполненияВидовУчета.МСФО), ЗНАЧЕНИЕ(Перечисление.РежимЗаполненияВидовУчета.НСБУИМСФО))
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыУчета.МСФО)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидУчетаМСФО");
		
	Запрос.УстановитьПараметр("РежимЗаполнения", РежимЗаполнения);
	Запрос.УстановитьПараметр("ПолучитьНСБУ", ПолучитьНСБУ);
	Запрос.УстановитьПараметр("ПолучитьМСФО", ПолучитьМСФО);
	ЗаполнитьЗначенияСвойств(ДанныеРежимаЗаполнения, Запрос.Выполнить().Выгрузить()[0]);
	
	Если ДанныеРежимаЗаполнения.ЕстьНСБУ Тогда	
		ДанныеРежимаЗаполнения.ВидыУчета.Добавить(ДанныеРежимаЗаполнения.ВидУчетаНСБУ);	
	КонецЕсли;
	
	Если ДанныеРежимаЗаполнения.ЕстьМСФО Тогда	
		ДанныеРежимаЗаполнения.ВидыУчета.Добавить(ДанныеРежимаЗаполнения.ВидУчетаМСФО);	
	КонецЕсли;
	
	Возврат Новый ФиксированнаяСтруктура(ДанныеРежимаЗаполнения);

КонецФункции

Функция ПолучитьЗаполняемыеРеквизитыТаблицыФормы(ФормаДокумента = Неопределено) Экспорт

	Перем Расхождение;
	
	Если ФормаДокумента = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли ТипЗнч(ФормаДокумента) <> Тип("ФормаКлиентскогоПриложения") Тогда 
		Возврат Неопределено;
	КонецЕсли;
	
	СоответствиеКолонок = ПолучитьСоответствиеКолонок(ФормаДокумента);
	
	ЗаполняемыеРеквизиты = Новый Структура;
	
	КолонкиРасхождений = Новый Массив;
	Для каждого КолонкаСоотв Из СоответствиеКолонок Цикл
	
		Если КолонкаСоотв.Значение.Свойство("Расхождение", Расхождение) И (Расхождение = Истина) Тогда
			КолонкиРасхождений.Добавить(КолонкаСоотв.Ключ);
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполняемыеРеквизиты.Вставить("КолонкиРасхождений", КолонкиРасхождений);
	
	Если (ФормаДокумента.КэшируемыеЗначения <> Неопределено) 
		И ФормаДокумента.КэшируемыеЗначения.Свойство("ИменаСубконто")
		И (ФормаДокумента.КэшируемыеЗначения.ИменаСубконто.Количество() > 0) Тогда 
		
		Если ФормаДокумента.КэшируемыеЗначения.Свойство("ИменаСубконто") Тогда
			ЗаполняемыеРеквизиты.Вставить("ИменаСубконто", ФормаДокумента.КэшируемыеЗначения.ИменаСубконто);		
		КонецЕсли;		
		
	КонецЕсли;
	
	Возврат ЗаполняемыеРеквизиты;
	
КонецФункции

// Функция - Получить таблицу ВНА
//
// Параметры:
//  КоллекцияСтрок				 - <Массив,ТабличнаяЧасть,ТаблицаЗначений> - Строки содержащие ВНА
//  Источник					 - <УправляемаяФорма>	 - 
//  ДополнительныеКолонкиИмена	 - <Соотвествие>	 - (ИмяКолонкиИсточник,ИмяКолонкиПриемник = Неопределено)
//  ДополнительныеКолонкиТипы	 - <Соотвествие>	 - (ИмяКолонкиИсточник,ОписаниеТипов)
// Возвращаемое значение:
//   - <ТаблицаЗначений> с дополненными типизированными колонками для использования в запросах
Функция ПолучитьТаблицуВНА(КоллекцияСтрок, Источник, ДополнительныеКолонкиИмена = Неопределено, ДополнительныеКолонкиТипы = Неопределено) Экспорт
	
	Если ТипЗнч(КоллекцияСтрок) = Тип("Массив") Тогда
		
		ТаблицаВНА = Новый ТаблицаЗначений;
		ТаблицаВНА.Колонки.Добавить("ВНА", УчетМСФОПовтИспУХ.ПолучитьОписаниеТиповВНА());
		ТаблицаВНА.Колонки.Добавить("НомерСтроки", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(7,0));
				
		Если ДополнительныеКолонкиТипы <> Неопределено Тогда
			
			Для каждого Колонка Из ДополнительныеКолонкиТипы Цикл
				ТаблицаВНА.Колонки.Добавить(Колонка.Ключ, Колонка.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
		Для каждого СтрокаДляЗаполнения Из КоллекцияСтрок Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаВНА.Добавить(), СтрокаДляЗаполнения);
		КонецЦикла;
		
		Если ДополнительныеКолонкиИмена <> Неопределено Тогда
			
			Для каждого Колонка Из ДополнительныеКолонкиИмена Цикл
				ТаблицаВНА.Колонки[Колонка.Ключ].Имя = ?(ЗначениеЗаполнено(Колонка.Значение), Колонка.Значение, Колонка.Ключ);
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат ТаблицаВНА;
		
	Иначе //ТаблицаЗначений, ТабличнаяЧасть или ТаблицаФормы
		
		ТекстДопКолонок = "";
		Если ДополнительныеКолонкиИмена <> Неопределено Тогда
			
			Для каждого Колонка Из ДополнительныеКолонкиИмена Цикл
				ТекстДопКолонок = ТекстДопКолонок + ", " + Колонка.Ключ;
			КонецЦикла;
			
		КонецЕсли;
		
		ТаблицаВНА = КоллекцияСтрок.Выгрузить(,"НомерСтроки,ВНА" + ТекстДопКолонок);
		
		Если ДополнительныеКолонкиИмена <> Неопределено Тогда
			
			Для каждого Колонка Из ДополнительныеКолонкиИмена Цикл
				ТаблицаВНА.Колонки[Колонка.Ключ].Имя = ?(ЗначениеЗаполнено(Колонка.Значение), Колонка.Значение, Колонка.Ключ);
			КонецЦикла;
			
		КонецЕсли;
		
		Возврат ТаблицаВНА;
		
	КонецЕсли;
	
КонецФункции

Функция ПолучитьИмяКолонкиВНА(Источник) Экспорт

	Если ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения") 
		И (Источник.КэшируемыеЗначения.МетаданныеДокумента.Имя = "ПоступлениеВНАМСФО" 
		ИЛИ Источник.КэшируемыеЗначения.МетаданныеДокумента.Имя = "ВводСведенийВНАМСФО") Тогда
		Возврат "ВНА";
	Иначе	
		Возврат "ВНА";	
	КонецЕсли;

КонецФункции

Функция ПолучитьПараметрыЗаполнения(Источник, ПолучитьНСБУ = Неопределено, ПолучитьМСФО = Неопределено, ИспользоватьПериодОтчета = Неопределено) Экспорт

	РеквизитыЗаполнения = Новый Структура;
	Если ТипЗнч(Источник) = Тип("ФормаКлиентскогоПриложения") Тогда
		Объект = Источник.Объект;
		РеквизитыЗаполнения.Вставить("КэшируемыеЗначения", Источник.КэшируемыеЗначения);
		РеквизитыЗаполнения.Вставить("ЗаполнятьРеквизитыФормы", Истина);
	Иначе
		Объект = Источник;
		РеквизитыЗаполнения.Вставить("ЗаполнятьРеквизитыФормы", Ложь);
	КонецЕсли;
	
	ДанныеРежима 	= ПолучитьДанныеРежимаЗаполнения(Объект.РежимЗаполнения, ПолучитьНСБУ, ПолучитьМСФО);
	ГраницыПериода 	= МСФОВНАВызовСервераУХ.ПолучитьГраницыПериодаДокумента(Объект,,ИспользоватьПериодОтчета);	
	ДатаДвижений 	= МСФОВНАВызовСервераУХ.ПолучитьДатуДвижений(Объект.Дата, ГраницыПериода);
	
	РеквизитыЗаполнения.Вставить("ДанныеРежима", 	ДанныеРежима);
	РеквизитыЗаполнения.Вставить("Организация", 	Объект.Организация);
	РеквизитыЗаполнения.Вставить("Сценарий", 		Объект.Сценарий);
	РеквизитыЗаполнения.Вставить("Дата", 			Объект.Дата);
	РеквизитыЗаполнения.Вставить("ВидыУчета", 		ДанныеРежима.ВидыУчета);
	РеквизитыЗаполнения.Вставить("ВидУчетаНСБУ", 	ДанныеРежима.ВидУчетаНСБУ);
	РеквизитыЗаполнения.Вставить("ВидУчетаМСФО", 	ДанныеРежима.ВидУчетаМСФО);
	РеквизитыЗаполнения.Вставить("ИмяКолонкиВНА", 	ПолучитьИмяКолонкиВНА(Источник));
	РеквизитыЗаполнения.Вставить("ДокументСсылка", 	Объект.Ссылка);
	РеквизитыЗаполнения.Вставить("ГраницыПериода", 	ГраницыПериода);
	РеквизитыЗаполнения.Вставить("ДатаДвижений", 	ДатаДвижений);
	
	Если Объект.Ссылка.Метаданные().Реквизиты.Найти("ПериодОтчета") <> Неопределено Тогда
		РеквизитыЗаполнения.Вставить("ПериодОтчета", Объект.ПериодОтчета);	
	КонецЕсли;
	
	Возврат РеквизитыЗаполнения;
	
КонецФункции

Функция ПолучитьСчетаГруппыПодобно(ЭтаФорма, ИмяТЧ = "", ПоТЧ = Ложь) Экспорт

	СчетаГруппыПодробно = Новый Структура;
	
	Если ПоТЧ Тогда
		
		Для каждого УзелТЧ Из ЭтаФорма.КэшируемыеЗначения.ИменаСубконто Цикл	
			
			Если (УзелТЧ.Ключ <> "") И (УзелТЧ.Ключ <> ИмяТЧ) Тогда 
				Продолжить;
			КонецЕсли;
			
			Для каждого ИмяСчета Из УзелТЧ.Значение Цикл
				
				ЭлементСчет = ЭтаФорма.Элементы.Найти(УзелТЧ.Ключ + ИмяСчета.Ключ);
				Если ЭлементСчет <> Неопределено Тогда
					СчетаГруппыПодробно.Вставить(ИмяСчета.Ключ, НЕ МСФОКлиентСерверУХ.ЭлементФормыЯвляетсяКолонкойТаблицыФормы(ЭлементСчет));					
				КонецЕсли;				
				
			КонецЦикла;
		КонецЦикла;
		
	Иначе 	
		
		Для каждого ИмяСчета Из ЭтаФорма.КэшируемыеЗначения.ИменаСубконто Цикл		
			
			ЭлементСчет = ЭтаФорма.Элементы.Найти(ИмяТЧ + ИмяСчета.Ключ);
			Если ЭлементСчет <> Неопределено Тогда 				
				СчетаГруппыПодробно.Вставить(ИмяСчета.Ключ, НЕ МСФОКлиентСерверУХ.ЭлементФормыЯвляетсяКолонкойТаблицыФормы(ЭлементСчет));
			КонецЕсли;
			
		КонецЦикла;
				
	КонецЕсли;
		
	Возврат Новый ФиксированнаяСтруктура(СчетаГруппыПодробно);

КонецФункции

Функция ЗаменитьПараметрыЗапроса(ТекстЗапроса, ПараметрыЗамены) Экспорт

	Для Каждого Параметр Из ПараметрыЗамены Цикл
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&" + Параметр.Ключ, Параметр.Значение);
	КонецЦикла;

КонецФункции

#КонецОбласти

