
#Область ВспомогательныеФункции

Функция ПолучитьОрганизацииНеДоступныеДляРедактирования(Сценарий, ДатаВерсии) Экспорт

	УстановитьПривилегированныйРежим(Истина);// состояния могут быть установлены по недоступным документам и организациям
	
	Запрос = Новый Запрос(ТекстЗапросаУтвержденныеЭкземпляры());
	
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("ДатаВерсии", ДатаВерсии);
	
	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

Функция ПолучитьДополнительныеВалюты(ВерсияРегламента) Экспорт

	ДополнительныеВалюты = Новый Соответствие;
	
	Для Каждого СтрокаВалюта Из ВерсияРегламента.ДополнительныеВалюты Цикл
		
		СписокВалют = ДополнительныеВалюты.Получить(СтрокаВалюта.ОрганизационнаяЕдиница);
		
		Если СписокВалют = Неопределено Тогда
			СписокВалют = Новый СписокЗначений;			
		КонецЕсли;
		
		СписокВалют.Добавить(СтрокаВалюта.Валюта);
		ДополнительныеВалюты.Вставить(СтрокаВалюта.ОрганизационнаяЕдиница, СписокВалют);
			
	КонецЦикла;
	
	Возврат ДополнительныеВалюты;
	
КонецФункции

Функция ТолькоПросмотрВерсииРегламента(ВерсияРегламентаПодготовкиОтчетности) Экспорт	
	Возврат Ложь;
	//Возврат ПолучитьУтвержденныеОтчеты(ВерсияРегламентаПодготовкиОтчетности).Количество() > 0;
КонецФункции

Функция ПолучитьУтвержденныеОтчеты(ВерсияРегламента) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(ТекстЗапросаУтвержденныеОрганизации());
	Запрос.УстановитьПараметр("Регламент", ВерсияРегламента);
	Запрос.УстановитьПараметр("Сценарий", ВерсияРегламента.Сценарий);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Организация");
	
КонецФункции

Функция ИспользуетсяРасчетПолныхДолейВладения(ОрганизацияКонсолидирующая, ВерсияРегламента) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	т.РасчетЭффективныхДолейВладения
	|ИЗ
	|	Справочник.ВерсииРегламентовПодготовкиОтчетности.ОрганизационныеЕдиницы КАК т
	|ГДЕ
	|	т.Ссылка = &ВерсияРегламента
	|	И т.ОрганизационнаяЕдиница = &ОрганизацияКонсолидирующая";
	
	Запрос.УстановитьПараметр("ОрганизацияКонсолидирующая", ОрганизацияКонсолидирующая);
	Запрос.УстановитьПараметр("ВерсияРегламента", 			ВерсияРегламента);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() Тогда
		Возврат Результат[0].РасчетЭффективныхДолейВладения;
	Иначе	
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЯвляетсяЦФО(Организация, ЕстьПодчиненныеРегламентированныеИлиИностранные = Истина, КэшРеквизитовОрганизаций = Неопределено) Экспорт

	Если ЕстьПодчиненныеРегламентированныеИлиИностранные Тогда
	    Возврат Ложь;
	КонецЕсли;
	
	РеквизитыОрганизации = Неопределено;
	Если КэшРеквизитовОрганизаций <> Неопределено Тогда
		РеквизитыОрганизации = КэшРеквизитовОрганизаций.Получить(Организация);
	КонецЕсли;
	
	Если РеквизитыОрганизации = Неопределено Тогда
		РеквизитыПроверки = "ИспользоватьВРегламентированномУчете, ИностранныйНалоговыйРезидент, ЭлиминирующаяОрганизация";
		РеквизитыОрганизации = ОбщегоНазначенияУХ.ПолучитьЗначенияРеквизитов(Организация, РеквизитыПроверки);
		Если КэшРеквизитовОрганизаций <> Неопределено Тогда
			КэшРеквизитовОрганизаций.Вставить(Организация, РеквизитыОрганизации);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Не РеквизитыОрганизации.ИспользоватьВРегламентированномУчете 
		И Не РеквизитыОрганизации.ИностранныйНалоговыйРезидент
		И Не РеквизитыОрганизации.ЭлиминирующаяОрганизация;

КонецФункции

Функция ПолучитьЭффективнуюДолю(Сценарий, ПериодДата, ПериодСсылка, Инвестор, ОбъектИнвестирования) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Статусы.ЭффективнаяДоля КАК ЭффективнаяДоля
	|ИЗ
	|	РегистрСведений.СтатусыОбъектовИнвестирования.СрезПоследних(
	|			&Период,
	|			Сценарий = &Сценарий
	|				И Инвестор = &Инвестор
	|				И ОбъектИнвестирования = &ОбъектИнвестирования) КАК Статусы");
	
	Запрос.УстановитьПараметр("Сценарий", 				Сценарий);
	Запрос.УстановитьПараметр("Инвестор", 				Инвестор);
	Запрос.УстановитьПараметр("ОбъектИнвестирования", 	ОбъектИнвестирования);
	Запрос.УстановитьПараметр("Период", 				Новый Граница(Новый МоментВремени(ПериодДата, ПериодСсылка), ВидГраницы.Исключая));
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда		
		Возврат 0;
	Иначе
		Возврат РезультатЗапроса.Выгрузить().Получить(0).ЭффективнаяДоля
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСоздатьРегламентКИК(ТаблицаИнвесторОбъектИнвестирования, Сценарий, ПериодОтчета) Экспорт

		

КонецФункции

Функция ПолучитьСоздатьУправлениеОтчетнымПериодом(Сценарий, ПериодОтчета, Регламент) Экспорт

	

КонецФункции

Функция ПолучитьСтатусДочернее() Экспорт 

	Возврат Справочники.ГруппыКонтрагентов.ПолучитьОтношениеКГруппе(Перечисления.ВидыОтношенийКГруппе.Дочернее);

КонецФункции

#КонецОбласти

#Область СтруктураГруппы

Функция ПолучитьСтруктуруГруппыВерсии(КонтекстВерсияРегламента, Сценарий, ДатаСреза, ИсточникВерсии = Неопределено) Экспорт

	ОтчетСтруктураРегламентаОтчетности = "СтруктураРегламентаОтчетности";
	Если НЕ ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		ОтчетСтруктураРегламентаОтчетности = "СтруктураРегламентаОтчетностиБПМСФО";
	КонецЕсли;
	СхемаСКД = Отчеты[ОтчетСтруктураРегламентаОтчетности].ПолучитьМакет("СтруктураГруппы");
	
	НастройкиСКД = СхемаСКД.НастройкиПоУмолчанию;
	НастройкиСКД.ПараметрыДанных.УстановитьЗначениеПараметра("Ссылка", ?(ИсточникВерсии = Неопределено, КонтекстВерсияРегламента.Ссылка, ИсточникВерсии));
			
	ДеревоСтруктурыГруппы = ТиповыеОтчетыУХ.ПолучитьКоллекциюРезультат(СхемаСКД, НастройкиСКД, , , Истина, , , Новый ДеревоЗначений);	
		
	КэшДопВалют = ПолучитьДополнительныеВалюты(КонтекстВерсияРегламента);	
	Для каждого ВалютыОрганизации Из КэшДопВалют Цикл
		
		ОтборПоОрганизации = Новый Структура("ОрганизационнаяЕдиница", ВалютыОрганизации.Ключ);		
		Для Каждого УзелДерева Из ДеревоСтруктурыГруппы.Строки.НайтиСтроки(ОтборПоОрганизации, Истина) Цикл
			УзелДерева.ДополнительныеВалюты = ВалютыОрганизации.Значение;
		КонецЦикла;
		
	КонецЦикла;
	
	СтруктураДействий = Новый Структура("", );
	КэшируемыеЗначения = Новый Структура;
	ЗаполнитьТолькоПросмотрКонсолидирующих(ДеревоСтруктурыГруппы, СтруктураДействий, КэшируемыеЗначения);
	
	Возврат ДеревоСтруктурыГруппы;

КонецФункции

Процедура ЗаполнитьТолькоПросмотрКонсолидирующих(УзелДерева, СтруктураДействий, КэшируемыеЗначения) Экспорт
	
КонецПроцедуры

Процедура ЗаполнитьРеквизитыСтруктурыГруппы(КонтекстВерсияРегламента, ДатаСреза, Сценарий, МеткаВремени, СтруктураГруппы, ИсточникВерсии = Неопределено) Экспорт

	СтруктураГруппы = ПолучитьСтруктуруГруппыВерсии(КонтекстВерсияРегламента, Сценарий, МеткаВремени, ИсточникВерсии);		
			
КонецПроцедуры

#КонецОбласти

#Область УниверсальныеПроцессы

Функция ОпределитьСвязанныйШаблон(ВерсияРегламента,СвязанныйШаблонПроцесса) Экспорт
	
	Если ВерсияРегламента = Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ШаблоныУниверсальныхПроцессов.Ссылка
	|ИЗ
	|	Справочник.ШаблоныУниверсальныхПроцессов КАК ШаблоныУниверсальныхПроцессов
	|ГДЕ
	|	ШаблоныУниверсальныхПроцессов.ПометкаУдаления = ЛОЖЬ
	|	И ШаблоныУниверсальныхПроцессов.СвязанныйРегламент = &СвязанныйРегламент";
	
	Запрос.УстановитьПараметр("СвязанныйРегламент",ВерсияРегламента);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		СвязанныйШаблонПроцесса = Выборка.Ссылка;
		Возврат Истина;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции
	
#КонецОбласти 

#Область ФормыВерсияРегламента

Функция МассивМожноДобавлятьВКореньДереваСервер(Массив) Экспорт 
	
	МассивЭлементов = Новый Массив;
	МассивГрупп = Новый Массив;
		
	Для Каждого Значение Из Массив Цикл
		Если Значение.ЭлиминирующаяОрганизация = Ложь Тогда
			МассивГрупп.Добавить(Значение);
		Иначе
			МассивЭлементов.Добавить(Значение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Значение Из МассивЭлементов Цикл
		ЗначениеПринадлежитДобавляемойГруппе = Ложь;
		Для Каждого Группа Из МассивГрупп Цикл
			Если Значение.ПринадлежитЭлементу(Группа) Тогда
				ЗначениеПринадлежитДобавляемойГруппе = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если НЕ ЗначениеПринадлежитДобавляемойГруппе Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

Функция ПолучитьКонсолидирующуюРекурсивно(УзелДерева, Консолидирующая) Экспорт

	Если Не ЗначениеЗаполнено(Консолидирующая) Тогда 
		Возврат УзелДерева;
	КонецЕсли;
	
	Для Каждого УзелДочерний Из УзелДерева.Строки Цикл
		
		Если УзелДочерний.Значение.ОрганизационнаяЕдиница = Консолидирующая Тогда
			Возврат УзелДочерний;
		КонецЕсли;
		
		УзелРезультат = ПолучитьКонсолидирующуюРекурсивно(УзелДочерний, Консолидирующая);
		Если УзелРезультат <> Неопределено Тогда
			Возврат УзелРезультат;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;

КонецФункции

#КонецОбласти

#Область ПолучениеВерсииРегламента

Функция ПолучитьВерсиюРегламента(Регламент, ДатаСреза = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(Регламент) Тогда
		Возврат Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка();
	КонецЕсли;
	
	Если ДатаСреза = Неопределено Тогда
		ДатаСреза = ТекущаяДата();
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ВерсииОрганизационнойСтруктуры.Ссылка
	|ИЗ
	|	Справочник.ВерсииРегламентовПодготовкиОтчетности КАК ВерсииОрганизационнойСтруктуры
	|ГДЕ
	|	ВерсииОрганизационнойСтруктуры.Родитель = &Регламент
	|	И ВерсииОрганизационнойСтруктуры.МеткаВремени <= &ДатаСреза
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВерсииОрганизационнойСтруктуры.МеткаВремени УБЫВ");
	
	Запрос.УстановитьПараметр("Регламент", Регламент);
	Запрос.УстановитьПараметр("ДатаСреза", ДатаСреза);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
				
		СтрокаШаблона = Нстр("ru = 'Для регламента <%1> на дату %2 не определено ни одной версии.'");
		
		Если ЗначениеЗаполнено(СтрокаШаблона) тогда
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, Регламент, ДатаСреза));
		КонецЕсли;
		
		Возврат Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка();
	Иначе 
		Возврат РезультатЗапроса.Выгрузить().Получить(0).Ссылка;
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область Заполнение

Процедура ЗаполнитьОбъектПоДереву(ОбъектВерсия, Дерево) Экспорт

	ОбъектВерсия.СтруктураГруппы.Очистить();
	ОбъектВерсия.ДополнительныеВалюты.Очистить();
	ОбъектВерсия.ОрганизационныеЕдиницы.Очистить();
	
	ЗаполнитьОбъектПоДеревуРекурсивно(ОбъектВерсия, Дерево.Строки);
	
	ОбъектВерсия.ДополнительныеВалюты.Свернуть("ОрганизационнаяЕдиница,Валюта");

КонецПроцедуры

Функция ЗаполнитьОбъектПоДеревуРекурсивно(ОбъектВерсия, СтрокиДереваСтруктураГруппы, ОрганизацииГрупп = Неопределено)
	
	Если ОрганизацииГрупп = Неопределено Тогда
		ОрганизацииГрупп = Новый Соответствие;
	КонецЕсли;
	
	Для Каждого Строка Из СтрокиДереваСтруктураГруппы Цикл
		
		ТекущийРодитель = ?(Строка.Родитель = Неопределено, Неопределено, Строка.Родитель.ОрганизационнаяЕдиница);
		
		ДобавленаОрганизация = ДобавитьОрганизациюВКэш(ОрганизацииГрупп, Строка.ОрганизационнаяЕдиница, ТекущийРодитель);
		
		Если Не ДобавленаОрганизация Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаСтруктурыГруппы = ОбъектВерсия.СтруктураГруппы.Добавить();
		НоваяСтрокаСтруктурыГруппы.ОрганизационнаяЕдиница = Строка.ОрганизационнаяЕдиница;
		НоваяСтрокаСтруктурыГруппы.ОрганизационнаяЕдиницаРодитель = ТекущийРодитель;
			
		НоваяСтрокаОргЕдиницы = ОбъектВерсия.ОрганизационныеЕдиницы.Добавить();			
		ЗаполнитьЗначенияСвойств(НоваяСтрокаОргЕдиницы, Строка);
		Если Строка.Родитель <> Неопределено Тогда				
			НоваяСтрокаОргЕдиницы.ОрганизационнаяЕдиницаРодитель = Строка.Родитель.ОрганизационнаяЕдиница;				
		КонецЕсли;
		
		Для Каждого Элемент Из Строка.ДополнительныеВалюты Цикл
			НоваяСтрокаВалют = ОбъектВерсия.ДополнительныеВалюты.Добавить();
			НоваяСтрокаВалют.ОрганизационнаяЕдиница = Строка.ОрганизационнаяЕдиница;
			НоваяСтрокаВалют.Валюта = Элемент.Значение;
		КонецЦикла;
		
		ЗаполнитьОбъектПоДеревуРекурсивно(ОбъектВерсия, Строка.Строки, ОрганизацииГрупп);
		
	КонецЦикла;

КонецФункции

Функция ДобавитьОрганизациюВКэш(Кэш, ДочерняяОрганизация, КонсолидирующаяОрганизация)

	КэшПоКонсолидирующей = Кэш.Получить(КонсолидирующаяОрганизация);
	Если КэшПоКонсолидирующей = Неопределено Тогда
		
		Дочерние = Новый Массив;
		Дочерние.Добавить(ДочерняяОрганизация);
		Кэш.Вставить(КонсолидирующаяОрганизация, Дочерние);
		
		Возврат Истина;
		
	ИначеЕсли КэшПоКонсолидирующей.Найти(ДочерняяОрганизация) = Неопределено Тогда		
		
		Кэш[КонсолидирующаяОрганизация].Добавить(ДочерняяОрганизация);
		Возврат Истина;		
		
	КонецЕсли;
	
	Возврат Ложь;

КонецФункции

Функция ПолучитьКешируемыеЗначения(СтруктураДействий, КэшируемыеЗначения) Экспорт

	Перем РеквизитыДействия;
	
	СтруктураДействий.Свойство("ЗаполнитьОбъектыИнвестирования", РеквизитыДействия);
	
	НомераТаблиц = Новый Структура;
	ТекстЗапроса = Новый Массив;
	ТекстЗапроса.Добавить(ТекстЗапросаРеквизитыОрганизаций(НомераТаблиц));
	ТекстЗапроса.Добавить(ТекстЗапросаСтатусыОбъектовИнвестирования(НомераТаблиц));
	ТекстЗапроса.Добавить(ТекстЗапросаУтвержденныеОрганизации(НомераТаблиц));
		
	Запрос = Новый Запрос(СтрСоединить(ТекстЗапроса, ОбщегоНазначенияБПВызовСервера.ТекстРазделителяЗапросовПакета()));
		
	ТретьиСтороны = ПредопределенноеЗначение("Перечисление.ВидыОтношенийКГруппе.ТретьиСтороны");
	
	Запрос.УстановитьПараметр("Организации", 	РеквизитыДействия.Инвестор);
	Запрос.УстановитьПараметр("Период", 		КэшируемыеЗначения.Период);
	Запрос.УстановитьПараметр("Сценарий", 		КэшируемыеЗначения.Сценарий);
	Запрос.УстановитьПараметр("СценарийФакта", 	КэшируемыеЗначения.Сценарий);
	Запрос.УстановитьПараметр("Регламент", 		КэшируемыеЗначения.Регламент);
	Запрос.УстановитьПараметр("НачалоПериода", 	НачалоГода(КэшируемыеЗначения.Период));
	Запрос.УстановитьПараметр("КонецПериода", 	КонецГода(КэшируемыеЗначения.Период));
	Запрос.УстановитьПараметр("ТретьяСторона", 	Справочники.ГруппыКонтрагентов.ПолучитьОтношениеКГруппе(ТретьиСтороны));
	
	РезультатПакета = Запрос.ВыполнитьПакет();
	
	Результат = Новый Структура;
	ОбъектыИнвестирования = Новый Соответствие;	
	Для каждого СтрокаТаб Из РезультатПакета.Получить(НомераТаблиц.СтатусыОбъектовИнвестирования).Выгрузить() Цикл
	
		Статусы = ОбъектыИнвестирования.Получить(СтрокаТаб.Инвестор);
		Если Статусы = Неопределено Тогда
			Статусы = Новый Структура("ЭффективнаяДоля,ОтношениеКГруппе,СтатусИностраннойКомпании,МетодИсключенияВГО", 0);
			ЗаполнитьЗначенияСвойств(Статусы, СтрокаТаб);
			
		Иначе 
			
			Статусы.ЭффективнаяДоля = Статусы.ЭффективнаяДоля + СтрокаТаб.ЭффективнаяДоля;
			Статусы.ОтношениеКГруппе = СтрокаТаб.ОтношениеКГруппе;
						
		КонецЕсли;
		
		ОбъектыИнвестирования.Вставить(СтрокаТаб.ОбъектИнвестирования, Статусы);
	
	КонецЦикла;	
	
	Результат.Вставить("ОбъектыИнвестирования", ОбъектыИнвестирования);
		
	СтруктураРеквизиты = Новый Структура;
	РеквизитыОрганизаций = Новый Соответствие;
	ТабРеквизиты = РезультатПакета.Получить(НомераТаблиц.РеквизитыОрганизаций).Выгрузить();
	
	Для каждого КолонкаРеквизит Из ТабРеквизиты.Колонки Цикл
		СтруктураРеквизиты.Вставить(КолонкаРеквизит.Имя);	
	КонецЦикла;
	Для каждого СтрокаТаб Из ТабРеквизиты Цикл
		ЗаполнитьЗначенияСвойств(СтруктураРеквизиты, СтрокаТаб);
		РеквизитыОрганизаций.Вставить(СтрокаТаб.ОрганизационнаяЕдиница, ОбщегоНазначенияКлиентСервер.СкопироватьРекурсивно(СтруктураРеквизиты));
	КонецЦикла;
	
	Результат.Вставить("РеквизитыОрганизаций", РеквизитыОрганизаций);	
	Результат.Вставить("УтвержденныеЭкземпляры", РезультатПакета.Получить(НомераТаблиц.УтвержденныеЭкземпляры).Выгрузить().ВыгрузитьКолонку("Организация"));
	
	Возврат Результат;	

КонецФункции

Функция ПолучитьРеквизитыОрганизаций(Организации, Сценарий = Неопределено, Период = Неопределено) Экспорт
	
	Запрос = Новый Запрос(ТекстЗапросаРеквизитыОрганизаций());
	
	Запрос.УстановитьПараметр("Организации", 	Организации);
	Запрос.УстановитьПараметр("Период", 		?(Период = Неопределено, ТекущаяДата(), Период));
	Запрос.УстановитьПараметр("Сценарий", 		?(Сценарий = Неопределено, Справочники.Сценарии.Факт, Сценарий));
	
	Выборка = Запрос.Выполнить().Выбрать();
	РеквизитыОрганизаций = Новый Соответствие;
	Пока Выборка.Следующий() Цикл
		РеквизитыОрганизаций.Вставить(Выборка.ОрганизационнаяЕдиница, 
			ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Выборка));
	КонецЦикла;
	
	Возврат РеквизитыОрганизаций;

КонецФункции

Функция ПолучитьСтруктуруПеретаскивания(ОрганизацииИсточник, ШаблонУзла, Сценарий = Неопределено, ДатаУП = Неопределено) Экспорт 
	
	Запрос = Новый Запрос(ТекстЗапросаРеквизитыОрганизаций());
	
	Запрос.УстановитьПараметр("Организации",	ОрганизацииИсточник);
	Запрос.УстановитьПараметр("Сценарий", 		?(Сценарий = Неопределено, Справочники.Сценарии.Факт, Сценарий));
	Запрос.УстановитьПараметр("Период", 		?(ДатаУП = Неопределено, ТекущаяДата(), ДатаУП));
	
	ТабДерево = Запрос.Выполнить().Выгрузить();
	ТабДерево.Колонки.Добавить("ДополнительныеВалюты", Новый ОписаниеТипов("СписокЗначений"));
	ТабДерево.Индексы.Добавить("Родитель");
	
	СтрокиИсточники = ТабДерево.НайтиСтроки(Новый Структура("Родитель", NULL));
	Возврат РегламентыКлиентСервер.ПолучитьЗначениеПеретаскивания(СтрокиИсточники, , ШаблонУзла);
	
КонецФункции

Функция ТекстЗапросаРеквизитыОрганизаций(НомераТаблиц = Неопределено)
	
	//ух32
	ТекстПоля = 
	"	т.Организация КАК ОрганизационнаяЕдиница,
	|	УчетнаяПолитика.ВалютаУчетаДоп КАК ДополнительнаяВалюта,
	|	УчетнаяПолитика.ВалютаУчета КАК ОсновнаяВалюта,
	|	т.Организация.ПометкаУдаления КАК ПометкаУдаления,
	|	т.Организация.ВидОрганизацииПоУмолчанию КАК ВидОрганизационнойЕдиницы,
	|	т.Организация.ИностранныйНалоговыйРезидент КАК ИностранныйНалоговыйРезидент,
	|	т.Организация.ЭлиминирующаяОрганизация КАК ЭлиминирующаяОрганизация,
	|	ВЫБОР
	|		КОГДА т.Организация В (&Организации)
	|			ТОГДА NULL
	|		ИНАЧЕ т.Организация.Родитель
	|	КОНЕЦ КАК Родитель,
	|	т.Организация.ИспользоватьВРегламентированномУчете КАК ИспользоватьВРегламентированномУчете";	
	
	ТекстЗапроса = Документы.УчетнаяПолитикаМСФО.ТекстЗапроса_ЗначенияУП(ТекстПоля, НомераТаблиц);
	
	Если НомераТаблиц <> Неопределено Тогда //заменим ЗначенияУП на РеквизитыОрганизаций
		НомераТаблиц.Вставить("РеквизитыОрганизаций", НомераТаблиц.ЗначенияУП);
		НомераТаблиц.Удалить("ЗначенияУП");		
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "(&Организация)", " ИЕРАРХИИ (&Организации)");
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДатаУП", "&Период");
	
	Возврат ТекстЗапроса;

КонецФункции

Функция ТекстЗапросаСтатусыОбъектовИнвестирования(НомераТаблиц = Неопределено)

	Если НомераТаблиц <> Неопределено Тогда		
		НомераТаблиц.Вставить("СтатусыОбъектовИнвестирования", НомераТаблиц.Количество());
	КонецЕсли;
		
	Возврат
	"ВЫБРАТЬ
	|	Статусы.Инвестор КАК Инвестор,
	|	Статусы.ОбъектИнвестирования КАК ОбъектИнвестирования,
	|	ЕСТЬNULL(МАКСИМУМ(Статусы.ОтношениеКГруппе), &ТретьяСторона) КАК ОтношениеКГруппе,
	|	ЕСТЬNULL(МАКСИМУМ(Статусы.ЭффективнаяДоля),0) КАК ЭффективнаяДоля,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(Статусы.ОтношениеКГруппе.ВидОтношенияКГруппе) В (ЗНАЧЕНИЕ(Перечисление.ВидыОтношенийКГруппе.Материнское), ЗНАЧЕНИЕ(Перечисление.ВидыОтношенийКГруппе.Дочернее))
	|			ТОГДА ВЫБОР
	|					КОГДА КОЛИЧЕСТВО(ВЫБОР
	|								КОГДА Статусы.ВидОтношенияОборот В (ЗНАЧЕНИЕ(Перечисление.ВидыОтношенийКГруппе.Материнское), ЗНАЧЕНИЕ(Перечисление.ВидыОтношенийКГруппе.Дочернее))
	|									ТОГДА NULL
	|								ИНАЧЕ ИСТИНА
	|							КОНЕЦ) > 0
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.МетодыИсключенияВГО.Остатки)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.МетодыИсключенияВГО.ОстаткиИОбороты)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КОЛИЧЕСТВО(ВЫБОР
	|							КОГДА Статусы.ВидОтношенияОборот В (ЗНАЧЕНИЕ(Перечисление.ВидыОтношенийКГруппе.Материнское), ЗНАЧЕНИЕ(Перечисление.ВидыОтношенийКГруппе.Дочернее))
	|								ТОГДА NULL
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ) > 0
	|					ТОГДА ЗНАЧЕНИЕ(Перечисление.МетодыИсключенияВГО.Обороты)
	|				ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.МетодыИсключенияВГО.НеИсключать)
	|			КОНЕЦ
	|	КОНЕЦ КАК МетодИсключенияВГО
	|ИЗ
	|	(ВЫБРАТЬ
	|		СтатусыОбъектовИнвестированияСрезПоследних.Инвестор КАК Инвестор,
	|		СтатусыОбъектовИнвестированияСрезПоследних.ОбъектИнвестирования КАК ОбъектИнвестирования,
	|		СтатусыОбъектовИнвестированияСрезПоследних.ОтношениеКГруппе КАК ОтношениеКГруппе,
	|		СтатусыОбъектовИнвестированияСрезПоследних.ЭффективнаяДоля КАК ЭффективнаяДоля,
	|		NULL КАК ВидОтношенияОборот,
	|		NULL КАК Оборот
	|	ИЗ
	|		РегистрСведений.СтатусыОбъектовИнвестирования.СрезПоследних(
	|				&Период,
	|				Сценарий = &СценарийФакта
	|					И Инвестор В (&Организации)) КАК СтатусыОбъектовИнвестированияСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СтатусыОбъектовИнвестированияСрезПоследних.Инвестор,
	|		СтатусыОбъектовИнвестированияСрезПоследних.ОбъектИнвестирования,
	|		NULL,
	|		NULL,
	|		СтатусыОбъектовИнвестированияСрезПоследних.ОтношениеКГруппе.ВидОтношенияКГруппе,
	|		ЛОЖЬ
	|	ИЗ
	|		РегистрСведений.СтатусыОбъектовИнвестирования.СрезПоследних(
	|				&НачалоПериода,
	|				Сценарий = &СценарийФакта
	|					И Инвестор В (&Организации)) КАК СтатусыОбъектовИнвестированияСрезПоследних
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СтатусыОбъектовИнвестированияСрезПоследних.Инвестор,
	|		СтатусыОбъектовИнвестированияСрезПоследних.ОбъектИнвестирования,
	|		NULL,
	|		NULL,
	|		СтатусыОбъектовИнвестированияСрезПоследних.ОтношениеКГруппе.ВидОтношенияКГруппе,
	|		ИСТИНА
	|	ИЗ
	|		РегистрСведений.СтатусыОбъектовИнвестирования КАК СтатусыОбъектовИнвестированияСрезПоследних
	|	ГДЕ
	|		СтатусыОбъектовИнвестированияСрезПоследних.Период МЕЖДУ &НачалоПериода И &КонецПериода) КАК Статусы
	|
	|СГРУППИРОВАТЬ ПО
	|	Статусы.Инвестор,
	|	Статусы.ОбъектИнвестирования";

КонецФункции

Функция ТекстЗапросаУтвержденныеЭкземпляры(НомераТаблиц = Неопределено)

	Если НомераТаблиц <> Неопределено Тогда
		НомераТаблиц.Вставить("УтвержденныеЭкземпляры", НомераТаблиц.Количество());
	КонецЕсли;
		
	Возврат
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрСостоянийОбъектов.Объект.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(
	|			,
	|			Объект.ПометкаУдаления
	|				И Объект ССЫЛКА Документ.НастраиваемыйОтчет
	|				И Объект.ПериодОтчета В
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						т.ПериодСценария
	|					ИЗ
	|						Документ.УправлениеПериодомСценария КАК т
	|					ГДЕ
	|						т.Сценарий = &Сценарий
	|						И т.ВерсияОрганизационнойСтруктуры = &Регламент)) КАК РегистрСостоянийОбъектов
	|ГДЕ
	|	РегистрСостоянийОбъектов.СостояниеОбъекта В (ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден), ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Подготовлен))"
	
КонецФункции

Функция ТекстЗапросаУтвержденныеОрганизации(НомераТаблиц = Неопределено)

	Если НомераТаблиц <> Неопределено Тогда
		НомераТаблиц.Вставить("УтвержденныеЭкземпляры", НомераТаблиц.Количество());
	КонецЕсли;

	Возврат	
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрСостоянийОбъектов.Объект.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(
	|			,
	|			Объект ССЫЛКА Документ.НастраиваемыйОтчет
	|				И Объект.Сценарий = &Сценарий
	|				И Объект.ПериодОтчета В ИЕРАРХИИ
	|					(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|						т.ПериодСценария
	|					ИЗ
	|						Документ.УправлениеПериодомСценария КАК т
	|					ГДЕ
	|						т.Сценарий = &Сценарий
	|						И т.ВерсияОрганизационнойСтруктуры = &Регламент)) КАК РегистрСостоянийОбъектов
	|ГДЕ
	|	РегистрСостоянийОбъектов.СостояниеОбъекта В (ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден), ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Подготовлен))";

КонецФункции

#КонецОбласти

Функция ПолучитьОсновныеОтношенияКГруппе() Экспорт
	
	Запрос = Новый Запрос( 
	"ВЫБРАТЬ
	|	МИНИМУМ(ГруппыКонтрагентов.Ссылка) КАК ОтношениеКГруппе,
	|	ГруппыКонтрагентов.ВидОтношенияКГруппе
	|ИЗ
	|	Справочник.ГруппыКонтрагентов КАК ГруппыКонтрагентов
	|
	|СГРУППИРОВАТЬ ПО
	|	ГруппыКонтрагентов.ВидОтношенияКГруппе");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Результат = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
		Результат.Вставить(Выборка.ВидОтношенияКГруппе, Выборка.ОтношениеКГруппе);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции