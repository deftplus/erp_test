////////////////////////////////////////////////////////////////////////////////
// Модуль предназначен для реализации фукнциональности блока Бизнес-Анализ в
// контексте вызова сервера.
////////////////////////////////////////////////////////////////////////////////

// Возвращает адрес таблицы динамики измнения показателя Показатель по 
// параметрам Контекст и для значения ИмяОперанда.
Функция ПолучитьАдресТаблицыДинамики(Показатель, Контекст, ИмяОперанда = "") Экспорт
	РезультатФункции = Справочники.ПанелиОтчетов.ПолучитьАдресТаблицыДинамики(Показатель, Контекст, ИмяОперанда);
	Возврат РезультатФункции;
КонецФункции

// Формирует строку открытия формы с имененем ФормаРасшифровкиВход для расшировки 
// отчёте объектом метаданного с типом ТипОбъектаМетаданныхВход, наименованием НаименованиеОбъектаМетаданныхВход.
Функция ПолучитьСтрокуОткрытияФормыРасшифрокиОбъектом(ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход, ФормаРасшифровкиВход) Экспорт
	РезультатФункции = "";
	РезультатФункции = Справочники.ПроизвольныеОтчеты.СформироватьСтрокуОткрытияФормыРасшифровкиОбъектомИнформационнойБазы(ТипОбъектаМетаданныхВход, НаименованиеОбъектаМетаданныхВход, ФормаРасшифровкиВход);	
	Возврат РезультатФункции;	
КонецФункции

Процедура ПровестиРасчетДанныхМКП(Знач ИдентификаторПроцесса, Знач НачальнаяВнешняяИБ) Экспорт
	
	ТекущаяИБ = НачальнаяВнешняяИБ;
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РасчетМонитораКлючевыхПоказателей.ИдентификаторПроцесса КАК ИдентификаторПроцесса,
	|	РасчетМонитораКлючевыхПоказателей.Показатель КАК Показатель,
	|	РасчетМонитораКлючевыхПоказателей.ПериодОтчета КАК ПериодОтчета,
	|	РасчетМонитораКлючевыхПоказателей.Сценарий КАК Сценарий,
	|	РасчетМонитораКлючевыхПоказателей.ВнешняяИБ КАК ВнешняяИБ,
	|	РасчетМонитораКлючевыхПоказателей.Организация КАК Организация,
	|	РасчетМонитораКлючевыхПоказателей.ИсточникДанных КАК ИсточникДанных,
	|	РасчетМонитораКлючевыхПоказателей.ОсновнаяВалюта КАК ОсновнаяВалюта,
	|	РасчетМонитораКлючевыхПоказателей.GUID КАК GUID
	|ИЗ
	|	РегистрСведений.РасчетМонитораКлючевыхПоказателей КАК РасчетМонитораКлючевыхПоказателей
	|ГДЕ
	|	РасчетМонитораКлючевыхПоказателей.Обработан = ЛОЖЬ
	|	И РасчетМонитораКлючевыхПоказателей.ИдентификаторПроцесса = &ИдентификаторПроцесса
	|	И РасчетМонитораКлючевыхПоказателей.ВнешняяИБ = &ВнешняяИБ";
	Обработка = Истина;
	
	Пока Обработка Цикл
		Запрос.УстановитьПараметр("ВнешняяИБ", ТекущаяИБ);
		Запрос.УстановитьПараметр("ИдентификаторПроцесса", ИдентификаторПроцесса);
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда
			Выгрузка = РезультатЗапроса.Выгрузить();
			Для Каждого ТекВыгрузка Из Выгрузка Цикл
				МенеджерЗаписи = РегистрыСведений.РасчетМонитораКлючевыхПоказателей.СоздатьМенеджерЗаписи();
				ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ТекВыгрузка);
				МенеджерЗаписи.Прочитать();
				Если МенеджерЗаписи.Выбран() Тогда
					МенеджерЗаписи.Удалить();
					МенеджерЗаписи = РегистрыСведений.РасчетМонитораКлючевыхПоказателей.СоздатьМенеджерЗаписи();
					ЗаполнитьЗначенияСвойств(МенеджерЗаписи, ТекВыгрузка);
					ТекПоказательВыгрузки = ТекВыгрузка.Показатель;
					Контекст = Новый Структура();
					Контекст.Вставить("Организация",				 МенеджерЗаписи.Организация);
					Контекст.Вставить("Сценарий",					 МенеджерЗаписи.Сценарий); 
					Контекст.Вставить("ОсновнаяВалюта",				 МенеджерЗаписи.ОсновнаяВалюта);  
					Контекст.Вставить("ИспользуемаяИБ",				 МенеджерЗаписи.ВнешняяИБ);  
					Контекст.Вставить("ЧтениеНеАктуальныхЗаписей",	 Истина);
					Контекст.Вставить("АнализЧувствительности",		 Ложь);
					Контекст.Вставить("ПериодОтчета",		 		 МенеджерЗаписи.ПериодОтчета);
					Попытка
						ТаблицаДанныхПоИсточнику = ТиповыеОтчетыУХ.ПолучитьТаблицуДанныеПоИсточникуБезИтогов(Контекст, МенеджерЗаписи.ИсточникДанных);
						Если ТаблицаДанныхПоИсточнику.Колонки.Найти("Значение") <> Неопределено Тогда
							Результат = 0;
							Если ЗначениеЗаполнено(ТекПоказательВыгрузки) Тогда
								СпособРасчета = ТекПоказательВыгрузки.СпособРасчетаИтоговогоЗначения;
								Результат = БизнесАнализСерверУХ.РассчитатьИтогПоТаблицеПоказателя(ТаблицаДанныхПоИсточнику, СпособРасчета);
							Иначе
								Результат = ТаблицаДанныхПоИсточнику.Итог("Значение");
							КонецЕсли;
						Иначе
							ТекстСообщения = НСтр("ru = 'Не удалось получить значение показателя %Показатель%'");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Показатель%", Строка(МенеджерЗаписи.ИсточникДанных));
							ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
							Результат = 0;
						КонецЕсли;
					Исключение
						ТекстСообщения = НСтр("ru = 'При вычислении показателя МКП %Показатель% возникли ошибки: %ОписаниеОшибки%'");
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Показатель%", Строка(ТекПоказательВыгрузки));
						ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
						ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
						Результат = 0;
					КонецПопытки;
					МенеджерЗаписи.Значение = Результат;
					МенеджерЗаписи.ИдентификаторПроцесса = ИдентификаторПроцесса;
					МенеджерЗаписи.Обработан = Истина;
					МенеджерЗаписи.Записать();
				КонецЕсли;
				Обработка = Ложь;
				
			КонецЦикла;
		Иначе
			ТекущаяИБ = ВернутьНеобработаннуюВнешнююИб(ИдентификаторПроцесса);
			Если ТекущаяИБ = -1 Тогда
				Обработка = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВернутьНеобработаннуюВнешнююИб(Знач ИдентификаторПроцесса) Экспорт
	
	Запрос = Новый ЗАпрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетМонитораКлючевыхПоказателей.ВнешняяИБ
	|ИЗ
	|	РегистрСведений.РасчетМонитораКлючевыхПоказателей КАК РасчетМонитораКлючевыхПоказателей
	|ГДЕ
	|	РасчетМонитораКлючевыхПоказателей.Обработан = ЛОЖЬ
	|	И РасчетМонитораКлючевыхПоказателей.ИдентификаторПроцесса = &ИдентификаторПроцесса";
	Запрос.УстановитьПараметр("ИдентификаторПроцесса", ИдентификаторПроцесса);
	Выборка = ЗАпрос.Выполнить().Выбрать();
	Если ВЫборка.Следующий() Тогда
		Возврат Выборка.ВнешняяИБ;
	Иначе
		Возврат -1;
	КонецЕсли;
	
КонецФункции

Функция ВернутьДинамикуПоказателя(Знач ИсточникДанныхФакт, Знач ИсточникДанныхПлан, Знач Контекст, Знач ПлановыйСценарий, Знач ЧислоПериодов, Знач ОтображениеРасшифровки, Знач ИмяОкна, ДанныеРасшифровки, ДополнительныеНастройкиВход = Неопределено) Экспорт
	
	ТаблДок = Новый ТабличныйДокумент;
	
	Контекст.Вставить("ЧтениеНеАктуальныхЗаписей", Истина);
	Если ТипЗнч(ДополнительныеНастройкиВход) = Тип("Структура") Тогда
		ВариантРазмещенияЛегендыДиаграммы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеНастройкиВход, "ВариантРазмещенияЛегендыДиаграммы", Перечисления.ВариантыРазмещенияЛегендыДиаграммы.Лево);
	Иначе
		ВариантРазмещенияЛегендыДиаграммы = Перечисления.ВариантыРазмещенияЛегендыДиаграммы.Лево;
	КонецЕсли;
	РабочийКонтекст = Новый Структура;
	
	РабочийКонтекст = Новый Структура("АнализЧувствительности, Организация, Сценарий, ПериодОтчета, ОсновнаяВалюта, ЧтениеНеАктуальныхЗаписей, ИспользуемаяИБ"
										, Контекст.АнализЧувствительности
										, Контекст.Организация
										, Контекст.Сценарий
										, Контекст.ПериодОтчета
										, Контекст.ОсновнаяВалюта
										, Истина
										, Контекст.ВнешняяИБ);
	
	ТаблицаФакт = ПодготовитьЗапросДляОтчета(ИсточникДанныхФакт, РабочийКонтекст, Перечисления.ВидыРасшифровокПоказателяМКП.ДинамикаПоказателя, ЧислоПериодов, ИмяОкна, Истина);
	ТаблицаФакт.Колонки.Добавить("ВидСерии", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыСерийДинамикиПоказателя"));
	ТаблицаФакт.ЗаполнитьЗначения(Перечисления.ВидыСерийДинамикиПоказателя.Факт, "ВидСерии");
	
	НайденныеСтроки = ТаблицаФакт.НайтиСтроки(Новый Структура("Признак", Истина));
	
	Для Каждого Элемент Из НайденныеСтроки Цикл
		
		Элемент.ВидСерии = Перечисления.ВидыСерийДинамикиПоказателя.Прогноз;
		
	КонецЦикла;
	
	
	РабочийКонтекст.Вставить("Сценарий", ПлановыйСценарий);
	ТаблицаПлан = ПодготовитьЗапросДляОтчета(ИсточникДанныхПлан, РабочийКонтекст, Перечисления.ВидыРасшифровокПоказателяМКП.ДинамикаПоказателя, ЧислоПериодов, ИмяОкна);
	ТаблицаПлан.Колонки.Добавить("ВидСерии", Новый ОписаниеТипов("ПеречислениеСсылка.ВидыСерийДинамикиПоказателя"));
	ТаблицаПлан.ЗаполнитьЗначения(Перечисления.ВидыСерийДинамикиПоказателя.План, "ВидСерии");
	
	ТаблицаСравнение = ТаблицаПлан.Скопировать();
	ТаблицаСравнение.Индексы.Добавить("ПериодОтчета");
	ФактическиеЗначения = ТаблицаФакт.НайтиСтроки(Новый Структура("Признак", Ложь));
	Для Каждого Элемент Из ФактическиеЗначения Цикл
		
		ТекСтрока = ТаблицаСравнение.Найти(Элемент.ПериодОтчета, "ПериодОтчета");
		Если ТекСтрока = Неопределено Тогда
			ТекСтрока = ТаблицаСравнение.Добавить();
			ТекСтрока.ПериодОтчета = Элемент.ПериодОтчета;
			ТекСтрока.Значение     = Элемент.Значение;
		Иначе
			ТекСтрока.Значение     = Элемент.Значение - ТекСтрока.Значение;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаСравнение.ЗаполнитьЗначения(Перечисления.ВидыСерийДинамикиПоказателя.Разница, "ВидСерии");
	
	СКД = ПолучитьОбщийМакет("ДинамикаПоказателя");
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Если ОтображениеРасшифровки = Перечисления.ОтображениеРасшифровки.ВВидеТаблицы Тогда
		Настройки = СКД.ВариантыНастроек[0];
	ИначеЕсли ОтображениеРасшифровки = Перечисления.ОтображениеРасшифровки.ЛинейныйГрафик Тогда
		Настройки = СКД.ВариантыНастроек[2];
		ПрименитьНастройкиРазмещенияЛегенды(Настройки, ВариантРазмещенияЛегендыДиаграммы);
	ИначеЕсли ОтображениеРасшифровки = Перечисления.ОтображениеРасшифровки.Гистограмма Тогда
		Настройки = СКД.ВариантыНастроек[1];
		ПрименитьНастройкиРазмещенияЛегенды(Настройки, ВариантРазмещенияЛегендыДиаграммы);
	Иначе
		Настройки = СКД.ВариантыНастроек[0];
	КонецЕсли;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СКД, Настройки.Настройки, ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанных"));
	ПроцессорКомпоновки   = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных, Новый Структура("ТаблицаФакт, ТаблицаПлан, ТаблицаСравнение", ТаблицаФакт, ТаблицаПлан, ТаблицаСравнение), ДанныеРасшифровки);
	ПроцессорВывода       = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТаблДок);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТаблДок;
	
КонецФункции

// Возвращает копию массива МассивВход , переведя все строковые 
// элементы массива в нижний регистр. 
Функция НРегМассив(МассивВход) Экспорт
	РезультатФункции = Новый Массив;
	Для Каждого ТекМассивВход Из МассивВход Цикл
		Если ТипЗнч(ТекМассивВход) = Тип("Строка") Тогда
			РезультатФункции.Добавить(НРег(ТекМассивВход));
		Иначе
			РезультатФункции.Добавить(ТекМассивВход);
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции

Функция ПодготовитьЗапросДляОтчета(Знач ИсточникДанных, Знач КонтекстОтчета, Знач ВидРасшифровки, ПараметрФункции, ИмяОтчета="", НуженПрогноз = Ложь) Экспорт
	
	Если ВидРасшифровки = Перечисления.ВидыРасшифровокПоказателяМКП.ДинамикаПоказателя Тогда
		ЧислоПериодов = ПараметрФункции;
	Иначе
		НомерАналитикиДляВывода = ПараметрФункции;
	КонецЕсли;
		
	Если ВидРасшифровки = Перечисления.ВидыРасшифровокПоказателяМКП.ДинамикаПоказателя Тогда
		
		ТаблицаОтвета = Новый ТаблицаЗначений;
		ТаблицаОтвета.Колонки.Добавить("ПериодОтчета", Новый ОписаниеТипов("СправочникСсылка.Периоды"));
		ТаблицаОтвета.Колонки.Добавить("Значение", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
		ТаблицаОтвета.Колонки.Добавить("Признак", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
		ТаблицаОтвета.Колонки.Добавить("ДатаНачала", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповДаты(ЧастиДаты.Дата));
		
		Если НЕ ЗначениеЗаполнено(ИсточникДанных) Тогда
			Возврат ТаблицаОтвета;
		КонецЕсли;
		
		ТаблицаПериодов  = ТиповыеОтчетыУХ.ПолучитьТаблицуПериодовОтчета(КонтекстОтчета.ПериодОтчета, ЧислоПериодов);
		
		Если ТаблицаПериодов <> Неопределено Тогда
			РабочийКонтекст = ОбщегоНазначенияУХ.СкопироватьУниверсальнуюКоллекцию(КонтекстОтчета);
			Для Каждого Элемент Из ТаблицаПериодов Цикл
				РабочийКонтекст.Вставить("ПериодОтчета", Элемент.Ссылка);
				РезультатРасчета = УправлениеОтчетамиУХ.ПолучитьТаблицуДанныхПоИсточнику(РабочийКонтекст, ИсточникДанных, Ложь);
				Если РезультатРасчета <> Неопределено Тогда
					НоваяСтрока = ТаблицаОтвета.Добавить();
					НоваяСтрока.Значение = РезультатРасчета.Итог("значение");
					НоваяСтрока.ПериодОтчета = Элемент.Ссылка;
					НоваяСтрока.ДатаНачала   = Элемент.ДатаНачала;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если НуженПрогноз Тогда
			
			СтруктураФинальнойСтроки = Неопределено;
			
			Если ТаблицаОтвета.Количество() > 0 Тогда
				ТаблицаОтвета.Сортировать("ДатаНачала УБЫВ");
				СтруктураФинальнойСтроки = Новый Структура("ПериодОтчета, Значение, ДатаНачала", ТаблицаОтвета[0].ПериодОтчета, ТаблицаОтвета[0].Значение, ТаблицаОтвета[0].ДатаНачала);
			КонецЕсли;
			УправлениеОтчетамиУХ.РасчетТренда(ТаблицаОтвета
											, "ДатаНачала"
											, "Значение"
											, "Признак"
											, Новый Структура("ДатаНачала, Период, КоличествоПериодов" 
															, КонтекстОтчета.ПериодОтчета.ДатаНачала
															, ТиповыеОтчетыУХ.ВернутьТипЕдиницыИзмеренияИнтервалаПоПериодичности(КонтекстОтчета.ПериодОтчета.Периодичность)
															, 1)
											, ЧислоПериодов
											, ЧислоПериодов
											, Истина);
			Запрос = Новый Запрос;
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВнешнийИсточник.Значение,
			|	ВнешнийИсточник.Признак,
			|	ВнешнийИсточник.ДатаНачала КАК ДатаНачала
			|ПОМЕСТИТЬ ВТ
			|ИЗ
			|	&ВнешнийИсточник КАК ВнешнийИсточник
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ДатаНачала
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ВТ.Значение КАК Значение,
			|	ВТ.Признак КАК Признак,
			|	Периоды.Ссылка КАК ПериодОтчета,
			|	ВТ.ДатаНачала КАК ДатаНачала
			|ИЗ
			|	ВТ КАК ВТ
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Периоды КАК Периоды
			|		ПО (Периоды.ДатаНачала = ВТ.ДатаНачала)
			|			И (Периоды.Периодичность = &Периодичность)
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|УНИЧТОЖИТЬ ВТ";
			
			
			Запрос.УстановитьПараметр("ВнешнийИсточник", ТаблицаОтвета);
			Запрос.УстановитьПараметр("Периодичность"  , КонтекстОтчета.ПериодОтчета.Периодичность);
			ТаблицаОтвета = Запрос.Выполнить().Выгрузить();
			
			Если СтруктураФинальнойСтроки <> Неопределено Тогда
				
				НоваяСтрока = ТаблицаОтвета.Добавить();
				НоваяСтрока.ПериодОтчета = СтруктураФинальнойСтроки.ПериодОтчета;
				НоваяСтрока.Значение     = СтруктураФинальнойСтроки.Значение;
				НоваяСтрока.Признак      = Истина;
				НоваяСтрока.ДатаНачала   = СтруктураФинальнойСтроки.ДатаНачала;
			КонецЕсли;
			
		КонецЕсли;
		
		Возврат ТаблицаОтвета;
		
	Иначе
		
		ТаблицаОтвета = Новый ТаблицаЗначений;
		ТаблицаОтвета.Колонки.Добавить("Аналитика");
		ТаблицаОтвета.Колонки.Добавить("Значение", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18,5));
		
		Если НЕ ЗначениеЗаполнено(ИсточникДанных) Тогда
			Возврат ТаблицаОтвета;
		КонецЕсли;
		
		РезультатРасчета = УправлениеОтчетамиУХ.ПолучитьТаблицуДанныхПоИсточнику(КонтекстОтчета, ИсточникДанных, Ложь);
		РезультатРасчета = ТиповыеОтчетыУХ.УдалитьИтоговыеСтрокиДанныхПоИсточнику(РезультатРасчета);
		МассивКолонок = Новый Массив;
		МассивКолонок = ОбщегоНазначенияСерверУХ.ДобавитьВМассивКолонкиТаблицы(МассивКолонок, РезультатРасчета);   		// Приведем аналитики всех таблиц к аналитикам базовой таблицы.
		МассивКолонок = НРегМассив(МассивКолонок);
		МассивКолонок = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивКолонок);
		// Исключим незначимые колонки из таблицы.
		СтрокаСвертки = "";
		МассивИсключения = Новый Массив;
		МассивИсключения.Добавить("Значение");
		МассивИсключения.Добавить("ИтогПоПоказателю");
		МассивИсключения.Добавить("Показатель");
		МассивИсключения = НРегМассив(МассивИсключения);
		Для Каждого ТекМассивКолонок Из МассивКолонок Цикл
			КолонкаЯвляетсяИсключением = (МассивИсключения.Найти(СокрЛП(ТекМассивКолонок)) <> Неопределено);
			Если НЕ КолонкаЯвляетсяИсключением Тогда
				СтрокаСвертки = СтрокаСвертки + ТекМассивКолонок + ",";
			Иначе
				Продолжить;		// Не добавляем эти поля, т.к. они не несут смысловой нагрузки.
			КонецЕсли;
		КонецЦикла;
		КолонкаЗначение = РезультатРасчета.Колонки.Найти("Значение");
		Если КолонкаЗначение = Неопределено Тогда
			Возврат ТаблицаОтвета;
		КонецЕсли;
		РезультатРасчета.Свернуть(СтрокаСвертки, "Значение");
		// Рассчитаем количество колонок и произведём свертку согласно выбору пользователя.
		Если РезультатРасчета = Неопределено Тогда
			Возврат ТаблицаОтвета;
		ИначеЕсли РезультатРасчета.Колонки.Количество() - 1 < НомерАналитикиДляВывода Тогда
			НоваяСтрока = ТаблицаОтвета.Добавить();
			НоваяСтрока.Аналитика = "Прочее";
			НоваяСтрока.Значение = РезультатРасчета.Итог("Значение");
			Возврат ТаблицаОтвета;
		Иначе
			ИмяКолонкиАналитики = РезультатРасчета.Колонки[НомерАналитикиДляВывода - 1].Имя;
			Если СокрЛП(ИмяКолонкиАналитики) <> "Значение" Тогда
				РезультатРасчета.Свернуть(ИмяКолонкиАналитики, "Значение");
				Для Каждого Элемент Из РезультатРасчета Цикл
					НоваяСтрока = ТаблицаОтвета.Добавить();
					НоваяСтрока.Аналитика = Элемент[ИмяКолонкиАналитики];
					НоваяСтрока.Значение = Элемент.Значение;
				КонецЦикла;
			Иначе
				НоваяСтрока = ТаблицаОтвета.Добавить();
				НоваяСтрока.Аналитика = "Прочее";
				НоваяСтрока.Значение = РезультатРасчета.Итог("Значение");
			КонецЕсли;
			Возврат ТаблицаОтвета;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

Функция ОбработатьРасшифровкуМКП(Знач ТекущаяОбласть, Знач Показатель, ПутьКТаблицеОткрытыхОтчетов, Знач ЛокальныеПараметры, Знач ИдентификаторФормы) Экспорт
	
	Перем ДанныеРасшифровки;
	
	СтруктураПолученныхДанных = Новый Структура;
	
	ТаблицаОткрытыхОтчетов = ПолучитьИзВременногоХранилища(ПутьКТаблицеОткрытыхОтчетов);
	УдалитьИзВременногоХранилища(ПутьКТаблицеОткрытыхОтчетов);
	Если Не ЗначениеЗаполнено(ТаблицаОткрытыхОтчетов) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущаяОбласть = ТаблицаОткрытыхОтчетов.Найти(ТекущаяОбласть, "ИмяОкна");
	Если ТекущаяОбласть = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбрабатываемыеОбласти = ТаблицаОткрытыхОтчетов.НАйтиСтроки(Новый Структура("РасшифровываемаяОбласть", ТекущаяОбласть.ИдентификаторОбласти));
	
	Если ТипЗнч(Показатель) = Тип("СправочникСсылка.ПоказателиМонитораКлючевыхПоказателей") Тогда
	
		ВнешнийКонтекст = Новый Структура("Организация, ПериодОтчета, Сценарий, ОсновнаяВалюта, ВнешняяИБ"
										, ТекущаяОбласть.ВнешнийКонтекст.Организация
										, ТекущаяОбласть.ВнешнийКонтекст.БазовыйПериод
										, ТекущаяОбласть.ВнешнийКонтекст.БазовыйСценарий
										, ТекущаяОбласть.ВнешнийКонтекст.ОсновнаяВалюта
										, ТекущаяОбласть.ВнешнийКонтекст.ИспользуемаяИБ);
		ПлановыйСценарий = ЛокальныеПараметры.ПлановыйСценарий;
		
		Для Каждого Область Из ОбрабатываемыеОбласти Цикл
			
			
			Если Область.УниверсальныйОтчет = Перечисления.ВидыРасшифровокПоказателяМКП.ДинамикаПоказателя Тогда
				
				Результат = ВернутьДинамикуПоказателя(Показатель.ИсточникЗначенияТекущегоПериода, Показатель.ИсточникПлановогоЗначения, ВнешнийКонтекст, ПлановыйСценарий, Область.КоличествоПериодовДляОтображения, Область.ОтображениеРасшифровки, ТекущаяОбласть, ДанныеРасшифровки);
				СтруктураПолученныхДанных.Вставить(Область.ИмяОкна, Результат);
				
			ИначеЕсли Область.УниверсальныйОтчет = Перечисления.ВидыРасшифровокПоказателяМКП.СтруктураПоказателя Тогда
				
				Результат = ВернутьСтруктуруПоказателяПоАналитике(Показатель.ИсточникЗначенияТекущегоПериода, ВнешнийКонтекст, Область.НомерАналитики, Область.ОтображениеРасшифровки, ТекущаяОбласть, ДанныеРасшифровки);
				СтруктураПолученныхДанных.Вставить(Область.ИмяОкна, Результат);
				
			КонецЕсли;
			
			Область.АдресДанныеРасшифровки = ПоместитьВоВременноеХранилище(ДанныеРасшифровки, ИдентификаторФормы);
			
			
		КонецЦикла;
		
	Иначе
		
		
		Для Каждого Область Из ОбрабатываемыеОбласти Цикл
			
			СтруктураПолученныхДанных.Вставить(Область.ИмяОкна, Неопределено);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ПутьКТаблицеОткрытыхОтчетов = ПоместитьВоВременноеХранилище(ТаблицаОткрытыхОтчетов, ИдентификаторФормы);
	
	Возврат СтруктураПолученныхДанных;
	
КонецФункции

Функция ВернутьСтруктуруПоказателяПоАналитике(Знач ИсточникДанных, Знач Контекст, Знач НомерАналитики, Знач ОтображениеРасшифровки, Знач ИмяОкна, ДанныеРасшифровки, СтруктураДополнительныхПараметровДиаграммыВход = Неопределено) Экспорт
	
	ТаблДок = Новый ТабличныйДокумент;
	
	ВариантРазмещенияЛегендыРабочий = СтруктураДополнительныхПараметровДиаграммыВход;
	КоличествоСтолбцовДиаграммыРабочий = 0;
	Если ТипЗнч(СтруктураДополнительныхПараметровДиаграммыВход) = Тип("Структура") Тогда
		ВариантРазмещенияЛегендыРабочий = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДополнительныхПараметровДиаграммыВход, "ВариантРазмещенияЛегендыДиаграммы", Перечисления.ВариантыРазмещенияЛегендыДиаграммы.Право);
		КоличествоСтолбцовДиаграммыРабочий = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураДополнительныхПараметровДиаграммыВход, "КоличествоСтолбцовДиаграммы", 0);
	Иначе
		ВариантРазмещенияЛегендыРабочий = СтруктураДополнительныхПараметровДиаграммыВход;
		КоличествоСтолбцовДиаграммыРабочий = 0;
	КонецЕсли;
	
	РабочийКонтекст = Новый Структура;
	РабочийКонтекст.Вставить("АнализЧувствительности",		 Контекст.АнализЧувствительности);
	РабочийКонтекст.Вставить("ИспользуемаяИБ",				 Контекст.ВнешняяИБ);
	РабочийКонтекст.Вставить("Организация",					 Контекст.Организация);
	РабочийКонтекст.Вставить("ОсновнаяВалюта",				 Контекст.ОсновнаяВалюта); 
	РабочийКонтекст.Вставить("Сценарий",					 Контекст.Сценарий); 
	РабочийКонтекст.Вставить("ПериодОтчета",				 Контекст.ПериодОтчета); 
	РабочийКонтекст.Вставить("ЧтениеНеАктуальныхЗаписей",	 Истина); 

	ВидыРасшифровокСтруктураПоказателя = Перечисления.ВидыРасшифровокПоказателяМКП.СтруктураПоказателя;
	Структура = ПодготовитьЗапросДляОтчета(ИсточникДанных, РабочийКонтекст, ВидыРасшифровокСтруктураПоказателя, НомерАналитики, ИмяОкна);
	
	СКД = ПолучитьОбщийМакет("СтруктураПоказателя");
	Если ОтображениеРасшифровки = Перечисления.ОтображениеРасшифровки.ВВидеТаблицы Тогда
		Настройки = СКД.ВариантыНастроек[0];
	ИначеЕсли ОтображениеРасшифровки = Перечисления.ОтображениеРасшифровки.КруговаяДиаграмма Тогда
		Настройки = СКД.ВариантыНастроек[2];
		ПрименитьНастройкиРазмещенияЛегенды(Настройки, ВариантРазмещенияЛегендыРабочий);
		ПрименитьОграничениеСтолбцов(Настройки, КоличествоСтолбцовДиаграммыРабочий);
	ИначеЕсли ОтображениеРасшифровки = Перечисления.ОтображениеРасшифровки.Гистограмма Тогда
		Настройки = СКД.ВариантыНастроек[1];
		ПрименитьНастройкиРазмещенияЛегенды(Настройки, ВариантРазмещенияЛегендыРабочий);
		ПрименитьОграничениеСтолбцов(Настройки, КоличествоСтолбцовДиаграммыРабочий);
	Иначе
		Настройки = СКД.ВариантыНастроек[0];
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СКД, Настройки.Настройки, ДанныеРасшифровки, , Тип("ГенераторМакетаКомпоновкиДанных"));
	ПроцессорКомпоновки   = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновкиДанных, Новый Структура("ТаблицаДанных", Структура), ДанныеРасшифровки);
	ПроцессорВывода       = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТаблДок);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Возврат ТаблДок;

КонецФункции

// Записывает в настройки СКД НастройкиВход вариант размещения легенды ВариантРазмещенияЛегендыВход.  
Процедура ПрименитьНастройкиРазмещенияЛегенды(НастройкиВход, ВариантРазмещенияЛегендыВход) Экспорт
	Если ЗначениеЗаполнено(ВариантРазмещенияЛегендыВход) Тогда
		Для Каждого ТекЭлементыНастройки Из НастройкиВход.Настройки.ПараметрыВывода.Элементы Цикл
			Если Строка(ТекЭлементыНастройки.Параметр) = "ТипДиаграммы" Тогда
				Для Каждого ТекЗначенияВложенныхПараметров Из ТекЭлементыНастройки.ЗначенияВложенныхПараметров Цикл
					Если Строка(ТекЗначенияВложенныхПараметров.Параметр) = "ТипДиаграммы.РасположениеЛегенды" Тогда
						ВариантРазмещенияПреобразованный = БизнесАнализКлиентСерверУХ.ПреобразоватьВариантРазмещенияДиаграммыКомпоновкиДанных(ВариантРазмещенияЛегендыВход);
						Если ВариантРазмещенияПреобразованный <> Неопределено Тогда
							ТекЗначенияВложенныхПараметров.Значение = ВариантРазмещенияПреобразованный;
							ТекЗначенияВложенныхПараметров.Использование = Истина;
						Иначе
							ТекЗначенияВложенныхПараметров.Использование = Ложь;
						КонецЕсли;
						Прервать;		// Элемент найден.
					Иначе
						Продолжить;		// Выполняем поиск далее.
					КонецЕсли;
					Прервать;		// Элемент найден.
				КонецЦикла;
			Иначе
				Продолжить;		// Выполняем поиск далее.
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Вариант размещения не задан. Не изменяем его.
	КонецЕсли;	
КонецПроцедуры

Процедура ПрименитьОграничениеСтолбцов(НастройкиВход, КоличествоСтолбцовДиаграммыВход)
	Если КоличествоСтолбцовДиаграммыВход > 0 Тогда
		Для Каждого ТекСтруктура Из НастройкиВход.Настройки.Структура Цикл
			Для Каждого ТекТочки Из ТекСтруктура.Точки Цикл
				Для Каждого ТекЭлементы Из ТекТочки.ПараметрыВывода.Элементы Цикл
					Если Строка(ТекЭлементы.Параметр) = "КоличествоЗаписей" Тогда
						ТекЭлементы.Значение = КоличествоСтолбцовДиаграммыВход;
						ТекЭлементы.Использование = Истина;
					Иначе
						Продолжить;		// Выполняем поиск далее.
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	Иначе
		// Вариант размещения не задан. Не изменяем его.
	КонецЕсли;	
КонецПроцедуры

// Возвращает структуру, содержащую флаги отображения элементов в зависимости 
// от выбранного варианта отображения монитора ОтображениеМонитора.
Функция ВернутьСтруктуруОтображенияМонитора(ОтображениеМонитораВход) Экспорт
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ОтображатьТаблицу", Ложь);
	РезультатФункции.Вставить("ОтображатьКарту", Ложь);
	РезультатФункции.Вставить("ОтображатьВиджеты", Ложь);
	РезультатФункции.Вставить("ОтображатьДиаграмму", Ложь);
	Если НЕ ЗначениеЗаполнено(ОтображениеМонитораВход) Тогда
		РезультатФункции.Вставить("ОтображатьТаблицу", Истина);
		РезультатФункции.Вставить("ОтображатьКарту", Ложь);
		РезультатФункции.Вставить("ОтображатьВиджеты", Ложь);
		РезультатФункции.Вставить("ОтображатьДиаграмму", Ложь);
	ИначеЕсли ОтображениеМонитораВход = Перечисления.СпособОтображенияМонитораКлючевыхПоказателей.ИВДеревеИВВидеКарты Тогда
		РезультатФункции.Вставить("ОтображатьТаблицу", Истина);
		РезультатФункции.Вставить("ОтображатьКарту", Истина);
		РезультатФункции.Вставить("ОтображатьВиджеты", Ложь);
		РезультатФункции.Вставить("ОтображатьДиаграмму", Ложь);
	ИначеЕсли ОтображениеМонитораВход = Перечисления.СпособОтображенияМонитораКлючевыхПоказателей.ВВидеКартыПоказателей Тогда
		РезультатФункции.Вставить("ОтображатьТаблицу", Ложь);
		РезультатФункции.Вставить("ОтображатьКарту", Истина);
		РезультатФункции.Вставить("ОтображатьВиджеты", Ложь);
		РезультатФункции.Вставить("ОтображатьДиаграмму", Ложь);
	ИначеЕсли ОтображениеМонитораВход = Перечисления.СпособОтображенияМонитораКлючевыхПоказателей.ВДеревеЗначений Тогда
		РезультатФункции.Вставить("ОтображатьТаблицу", Истина);
		РезультатФункции.Вставить("ОтображатьКарту", Ложь);
		РезультатФункции.Вставить("ОтображатьВиджеты", Ложь);
		РезультатФункции.Вставить("ОтображатьДиаграмму", Ложь);
	ИначеЕсли ОтображениеМонитораВход = Перечисления.СпособОтображенияМонитораКлючевыхПоказателей.ВВидеВиджетов Тогда
		РезультатФункции.Вставить("ОтображатьТаблицу", Ложь);
		РезультатФункции.Вставить("ОтображатьКарту", Ложь);
		РезультатФункции.Вставить("ОтображатьВиджеты", Истина);
		РезультатФункции.Вставить("ОтображатьДиаграмму", Ложь);
	ИначеЕсли ОтображениеМонитораВход = Перечисления.СпособОтображенияМонитораКлючевыхПоказателей.ВВидеДиаграммы Тогда
		РезультатФункции.Вставить("ОтображатьТаблицу", Ложь);
		РезультатФункции.Вставить("ОтображатьКарту", Ложь);
		РезультатФункции.Вставить("ОтображатьВиджеты", Ложь);
		РезультатФункции.Вставить("ОтображатьДиаграмму", Истина);
	Иначе
		РезультатФункции.Вставить("ОтображатьТаблицу", Ложь);
		РезультатФункции.Вставить("ОтображатьКарту", Ложь);
		РезультатФункции.Вставить("ОтображатьВиджеты", Ложь);
		РезультатФункции.Вставить("ОтображатьДиаграмму", Ложь);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции

Процедура ДобавитьЭлементыФормыДляМонитораПоказателя(Форма, Владелец, Знач ИмяОтчета, Знач ОтображениеМонитора, Знач НаименованиеОкна) Экспорт
	
	Перем СтраницаКарта;
	Перем СтраницаМонитор;
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	// Добавляем реквизит - таблицу значений для хранения данных монитора эффективности
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяОтчета + "_ПлановыйСценарий", Новый ОписаниеТипов("СправочникСсылка.Сценарии"), , , Ложь));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяОтчета + "_Смещение", Новый ОписаниеТипов("Число"), , , Ложь));
	
	СтруктураОтображения = ВернутьСтруктуруОтображенияМонитора(ОтображениеМонитора);
	Если СтруктураОтображения.ОтображатьКарту Тогда
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяОтчета + "_Карта", Новый ОписаниеТипов("ТабличныйДокумент"), , ,Ложь));
	КонецЕсли;
	
	ИмяОсновногоРеквизита = ИмяОтчета + "_Монитор";
	
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяОтчета
	, Новый ОписаниеТипов("ДеревоЗначений")
	,
	, НСтр("ru = 'Монитор ключевых показателей'")
	, Ложь));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяОтчета + "_Показатель"
	, Новый ОписаниеТипов("СправочникСсылка.ПоказателиМонитораКлючевыхПоказателей, СправочникСсылка.Проекции, СправочникСсылка.Цели")
	, ИмяОтчета
	, НСтр("ru = 'Показатель'")
	, Ложь));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяОтчета + "_ИзменениеАбсолютное"
	, ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18, 5)
	, ИмяОтчета
	, НСтр("ru = 'Абсолютное'")
	, Ложь));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяОтчета + "_ИзменениеОтносительное"
	, ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18, 5)
	, ИмяОтчета
	, НСтр("ru = 'Относительное'")
	, Ложь));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяОтчета + "_ОтклонениеОтПланаАбсолютное"
	, ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18, 5)
	, ИмяОтчета
	, НСтр("ru = 'Абсолютное'")
	, Ложь));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяОтчета + "_ОтклонениеОтПланаОтносительное"
	, ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18, 5)
	, ИмяОтчета
	, НСтр("ru = 'Относительное'")
	, Ложь));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяОтчета + "_ПлановоеЗначение"
	, ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18, 5)
	, ИмяОтчета
	, НСтр("ru = 'Плановое значение'")
	, Ложь));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяОтчета + "_ПроцентВыполненияПлана"
	, ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18, 5)
	, ИмяОтчета
	, НСтр("ru = 'Процент выполнения плана'")
	, Ложь));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяОтчета + "_ФактическоеЗначениеТекущегоПериода"
	, ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18, 5)
	, ИмяОтчета
	, НСтр("ru = 'Текущее'")
	, Ложь));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяОтчета + "_ФактическоеЗначениеПредыдущегоПериода"
	, ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(18, 5)
	, ИмяОтчета
	, "Предыдущее"
	, Ложь));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяОтчета + "_Состояние"
	, Новый ОписаниеТипов("Картинка")
	, ИмяОтчета
	, НСтр("ru = 'Состояние'")
	, Ложь));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяОтчета + "_Тренд"
	, Новый ОписаниеТипов("Картинка")
	, ИмяОтчета
	, НСтр("ru = 'Динамика'")
	, Ложь));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяОтчета + "_Ответственный"
	, Новый ОписаниеТипов("СправочникСсылка.Пользователи")
	, ИмяОтчета
	, НСтр("ru = 'Ответственный'")
	, Ложь));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяОтчета + "_СлужебнаяСтрока"
	, ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1,0)
	, ИмяОтчета
	, НСтр("ru = 'СлужебнаяСтрока'")
	, Ложь));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяОтчета + "_ИспользуемаяИБ"
	, Новый ОписаниеТипов("СправочникСсылка.ВнешниеИнформационныеБазы")
	, ИмяОтчета
	, НСтр("ru = 'ИспользуемаяИБ'")
	, Ложь));
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	//Добавляем элементы формы.
	
	
	ПолеПанельОтборов = Форма.Элементы.Добавить(ИмяОтчета + "_ПанельОтборов", Тип("ГруппаФормы"), Владелец);
	ПолеПанельОтборов.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ПолеПанельОтборов.ОтображатьЗаголовок = Ложь;
	ПолеПанельОтборов.Отображение         = ОтображениеОбычнойГруппы.Нет;
	ПолеПанельОтборов.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	
	Если СтруктураОтображения.ОтображатьКарту И СтруктураОтображения.ОтображатьТаблицу Тогда
		
		ПанельМонитора     = Форма.Элементы.Добавить(ИмяОтчета + "_Страницы", Тип("ГруппаФормы"), Владелец);
		ПанельМонитора.Вид = ВидГруппыФормы.Страницы;
		ПанельМонитора.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСнизу;
		СтраницаКарта      = Форма.Элементы.Добавить(ИмяОтчета + "_СтраницаКарта", Тип("ГруппаФормы"), ПанельМонитора);
		СтраницаКарта.Вид  = ВидГруппыФормы.Страница;
		СтраницаКарта.Заголовок = Нстр("ru = 'Карта показателей'");
		СтраницаМонитор     = Форма.Элементы.Добавить(ИмяОтчета + "_СтраницаМонитор", Тип("ГруппаФормы"), ПанельМонитора);
		СтраницаМонитор.Вид = ВидГруппыФормы.Страница;
		СтраницаМонитор.Заголовок = Нстр("ru = 'Монитор ключевых показателей'");
		
	КонецЕсли;
	
	Если СтруктураОтображения.ОтображатьКарту Тогда
		
		ПолеФормы = Форма.Элементы.Добавить(ИмяОтчета + "_Окно", Тип("ПолеФормы"), ?(СтруктураОтображения.ОтображатьТаблицу, СтраницаКарта, Владелец));
		ПолеФормы.Вид = ВидПоляФормы.ПолеТабличногоДокумента;
		
		Если ПустаяСтрока(НаименованиеОкна) Тогда
			ПолеФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Иначе
			ПолеФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Верх;
			ПолеФормы.Заголовок          = НаименованиеОкна;
		КонецЕсли;
		
		ПолеФормы.ПутьКДанным = ИмяОтчета + "_Карта";
		ПолеФормы.УстановитьДействие("ОбработкаРасшифровки", "ОбработкаРасшифровкиКартыМКП");
		
	КонецЕсли;
	
	Если СтруктураОтображения.ОтображатьТаблицу Тогда
		
		ЭлементТаблица = Форма.Элементы.Добавить(ИмяОсновногоРеквизита, Тип("ТаблицаФормы"), ?(СтруктураОтображения.ОтображатьКарту, СтраницаМонитор, Владелец));
		ЭлементТаблица.ПутьКДанным = ИмяОтчета;
		ЭлементТаблица.ТолькоПросмотр = Истина;
		ЭлементТаблица.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		ЭлементТаблица.УстановитьДействие("Выбор", "ОбработчикВыбораМонитора");
		ЭлементТаблица.УстановитьДействие("ПриАктивизацииСтроки", "АктивизацияСтроки");
		
		ЭлементОтчета = Форма.Элементы.Добавить(ИмяОтчета + "_Показатель", Тип("ПолеФормы"), ЭлементТаблица);
		ЭлементОтчета.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементОтчета.ПутьКДанным = ИмяОтчета + "." + ИмяОтчета + "_Показатель";
		
		ЭлементОтчета = Форма.Элементы.Добавить(ИмяОтчета + "_Состояние", Тип("ПолеФормы"), ЭлементТаблица);
		ЭлементОтчета.Вид = ВидПоляФормы.ПолеКартинки;
		ЭлементОтчета.ПутьКДанным = ИмяОтчета + "." + ИмяОтчета + "_Состояние";
		ЭлементОтчета.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		
		ЭлементОтчета = Форма.Элементы.Добавить(ИмяОтчета + "_Тренд", Тип("ПолеФормы"), ЭлементТаблица);
		ЭлементОтчета.Вид = ВидПоляФормы.ПолеКартинки;
		ЭлементОтчета.ПутьКДанным = ИмяОтчета + "." + ИмяОтчета + "_Тренд";
		ЭлементОтчета.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		
		ЭлементОтчета = Форма.Элементы.Добавить(ИмяОтчета + "_Ответственный", Тип("ПолеФормы"), ЭлементТаблица);
		ЭлементОтчета.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементОтчета.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
		ЭлементОтчета.ПутьКДанным = ИмяОтчета + "." + ИмяОтчета + "_Ответственный";
		
		ГруппаКолонок_ФактическоеЗначение                  = Форма.Элементы.Добавить(ИмяОтчета + "_ГруппаЗначение", Тип("ГруппаФормы"), ЭлементТаблица);
		ГруппаКолонок_ФактическоеЗначение.Вид              = ВидГруппыФормы.ГруппаКолонок;
		ГруппаКолонок_ФактическоеЗначение.Заголовок        = "Значение";
		ГруппаКолонок_ФактическоеЗначение.ОтображатьВШапке = Истина;
		ГруппаКолонок_ФактическоеЗначение.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
		
		ЭлементОтчета = Форма.Элементы.Добавить(ИмяОтчета + "_ФактическоеЗначениеТекущегоПериода", Тип("ПолеФормы"), ГруппаКолонок_ФактическоеЗначение);
		ЭлементОтчета.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементОтчета.ПутьКДанным = ИмяОтчета + "." + ИмяОтчета + "_ФактическоеЗначениеТекущегоПериода";
		
		ЭлементОтчета = Форма.Элементы.Добавить(ИмяОтчета + "_ФактическоеЗначениеПредыдущегоПериода", Тип("ПолеФормы"), ГруппаКолонок_ФактическоеЗначение);
		ЭлементОтчета.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементОтчета.ПутьКДанным = ИмяОтчета + "." + ИмяОтчета + "_ФактическоеЗначениеПредыдущегоПериода";
		
		ГруппаКолонок_Изменение                  = Форма.Элементы.Добавить(ИмяОтчета + "_ГруппаКолонок", Тип("ГруппаФормы"), ЭлементТаблица);
		ГруппаКолонок_Изменение.Вид              = ВидГруппыФормы.ГруппаКолонок;
		ГруппаКолонок_Изменение.Заголовок        = "Изменение";
		ГруппаКолонок_Изменение.ОтображатьВШапке = Истина;
		ГруппаКолонок_Изменение.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
		ГруппаКолонок_Изменение.Группировка      = ГруппировкаКолонок.Горизонтальная;
		
		ЭлементОтчета = Форма.Элементы.Добавить(ИмяОтчета + "_ИзменениеАбсолютное", Тип("ПолеФормы"), ГруппаКолонок_Изменение);
		ЭлементОтчета.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементОтчета.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
		ЭлементОтчета.ПутьКДанным = ИмяОтчета + "." + ИмяОтчета + "_ИзменениеАбсолютное";
		
		ЭлементОтчета = Форма.Элементы.Добавить(ИмяОтчета + "_ИзменениеОтносительное", Тип("ПолеФормы"), ГруппаКолонок_Изменение);
		ЭлементОтчета.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементОтчета.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
		ЭлементОтчета.ПутьКДанным = ИмяОтчета + "." + ИмяОтчета + "_ИзменениеОтносительное";
		
		ЭлементОтчета = Форма.Элементы.Добавить(ИмяОтчета + "_ПлановоеЗначение", Тип("ПолеФормы"), ЭлементТаблица);
		ЭлементОтчета.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементОтчета.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
		ЭлементОтчета.ПутьКДанным = ИмяОтчета + "." + ИмяОтчета + "_ПлановоеЗначение";
		
		ГруппаКолонок_План                  = Форма.Элементы.Добавить(ИмяОтчета + "_ОтклонениеОтПлана", Тип("ГруппаФормы"), ЭлементТаблица);
		ГруппаКолонок_План.Вид              = ВидГруппыФормы.ГруппаКолонок;
		ГруппаКолонок_План.Заголовок        = Нстр("ru = 'Отклонение от плана'");
		ГруппаКолонок_План.ОтображатьВШапке = Истина;
		ГруппаКолонок_План.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
		ГруппаКолонок_План.Группировка      = ГруппировкаКолонок.Горизонтальная;
		
		ЭлементОтчета = Форма.Элементы.Добавить(ИмяОтчета + "_ОтклонениеОтПланаАбсолютное", Тип("ПолеФормы"), ГруппаКолонок_План);
		ЭлементОтчета.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементОтчета.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
		ЭлементОтчета.ПутьКДанным = ИмяОтчета + "." + ИмяОтчета + "_ОтклонениеОтПланаАбсолютное";
		
		ЭлементОтчета = Форма.Элементы.Добавить(ИмяОтчета + "_ОтклонениеОтПланаОтносительное", Тип("ПолеФормы"), ГруппаКолонок_План);
		ЭлементОтчета.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементОтчета.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
		ЭлементОтчета.ПутьКДанным = ИмяОтчета + "." + ИмяОтчета + "_ОтклонениеОтПланаОтносительное";
		
		ЭлементОтчета = Форма.Элементы.Добавить(ИмяОтчета + "_ПроцентВыполненияПлана", Тип("ПолеФормы"), ЭлементТаблица);
		ЭлементОтчета.Вид = ВидПоляФормы.ПолеВвода;
		ЭлементОтчета.ГоризонтальноеПоложениеВШапке = ГоризонтальноеПоложениеЭлемента.Центр;
		ЭлементОтчета.ПутьКДанным = ИмяОтчета + "." + ИмяОтчета + "_ПроцентВыполненияПлана";
		
		// Зададим условное оформление для выводимой таблицы.
		
		НовоеОформление = Форма.УсловноеОформление.Элементы.Добавить();
		НовоеОформление.Использование = Истина;
		
		НовыйОтбор      = НовоеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОтчета + "." + ИмяОтчета + "_СлужебнаяСтрока");
		НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		НовыйОтбор.ПравоеЗначение = 2;
		НовыйОтбор.Использование  = Истина;
		
		НовоеОформление.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, 10, Истина));
		НовоеОформление.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(200,200,180));
		НовоеОформление.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
		ОформляемоеПоле = НовоеОформление.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяОсновногоРеквизита);
		ОформляемоеПоле.Использование = Истина;
		
		
		НовоеОформление = Форма.УсловноеОформление.Элементы.Добавить();
		НовоеОформление.Использование = Истина;
		
		НовыйОтбор      = НовоеОформление.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяОтчета + "." + ИмяОтчета + "_СлужебнаяСтрока");
		НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		НовыйОтбор.ПравоеЗначение = 1;
		НовыйОтбор.Использование  = Истина;
		
		НовоеОформление.Оформление.УстановитьЗначениеПараметра("Шрифт", Новый Шрифт(, , Истина));
		НовоеОформление.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(240,240,200));
		НовоеОформление.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
		
		ОформляемоеПоле = НовоеОформление.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяОсновногоРеквизита);
		ОформляемоеПоле.Использование = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Функция СформироватьТаблицуМонитораПоказателей(ИмяОтчета = "") Экспорт
	
	ТЗОтвета = Новый ДеревоЗначений;
	ТЗОтвета.Колонки.Добавить(ИмяОтчета + "Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиМонитораКлючевыхПоказателей, СправочникСсылка.Цели, СправочникСсылка.Проекции"));
	ТЗОтвета.Колонки.Добавить(ИмяОтчета + "ФактическоеЗначениеТекущегоПериода", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(19,5));
	ТЗОтвета.Колонки.Добавить(ИмяОтчета + "ФактическоеЗначениеПредыдущегоПериода" , ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(19,5));
	ТЗОтвета.Колонки.Добавить(ИмяОтчета + "ПлановоеЗначение" , ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(19,5));
	ТЗОтвета.Колонки.Добавить(ИмяОтчета + "ИзменениеАбсолютное", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(19,5));
	ТЗОтвета.Колонки.Добавить(ИмяОтчета + "ИзменениеОтносительное", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(7,3));
	ТЗОтвета.Колонки.Добавить(ИмяОтчета + "ОтклонениеОтПланаАбсолютное", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(19,5));
	ТЗОтвета.Колонки.Добавить(ИмяОтчета + "ОтклонениеОтПланаОтносительное", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(7,3));
	ТЗОтвета.Колонки.Добавить(ИмяОтчета + "ПроцентВыполненияПлана", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(7,3));
	ТЗОтвета.Колонки.Добавить(ИмяОтчета + "Тренд", Новый ОписаниеТипов("Картинка"));
	ТЗОтвета.Колонки.Добавить(ИмяОтчета + "Состояние", Новый ОписаниеТипов("Картинка"));
	ТЗОтвета.Колонки.Добавить(ИмяОтчета + "ИспользуетсяПрогноз", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТЗОтвета.Колонки.Добавить(ИмяОтчета + "Смещение", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(3,0));
	ТЗОтвета.Колонки.Добавить(ИмяОтчета + "ИспользуемаяИБ", Новый ОписаниеТипов("СправочникСсылка.ВнешниеИнформационныеБазы"));
	ТЗОтвета.Колонки.Добавить(ИмяОтчета + "СлужебнаяСтрока", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(1, 0));
	ТЗОтвета.Колонки.Добавить(ИмяОтчета + "Ответственный", Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТЗОтвета.Колонки.Добавить(ИмяОтчета + "ИспользуетсяФактическоеЗначениеТекущегоПериода", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТЗОтвета.Колонки.Добавить(ИмяОтчета + "ИспользуетсяФактическоеЗначениеПредыдущегоПериода", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТЗОтвета.Колонки.Добавить(ИмяОтчета + "ИспользуетсяПлановоеЗначение", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());
	ТЗОтвета.Колонки.Добавить(ИмяОтчета + "ТочностьПоказателя", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповЧисла(10,0));
	Возврат ТЗОтвета;
	
КонецФункции

#Область МКП_ГенерацияЭлементовФормы
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПРОГРАММНОЙ ГЕНЕРАЦИИ ЭЛЕМЕНТОВ УПРАВЛЯЕМОЙ ФОРМЫ.
//

Процедура ДобавитьЭлементФормыДляЗависимойОбласти(Форма, Знач ИмяОтчета) Экспорт
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяОтчета + "_Показатель", Новый ОписаниеТипов("СправочникСсылка.ПоказателиМонитораКлючевыхПоказателей"), , , Ложь));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяОтчета + "_ИмяГлавнойОбласти", Новый ОписаниеТипов("Строка"), , , Ложь));
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

#КонецОбласти 

// Возвращает основное правило обработки для вида отчета ВидОтчетаВход.
Функция ПолучитьПравилоОбработкиПоУмолчанию(ВидОтчетаВход)
	Перем БланкОтображенияПоУмолчанию;
	Перем БланкДляИмпортаПоУмолчанию;
	Перем ПравилоОбработкиПоУмолчанию;
	Перем ПравилоПроверкиПоУмолчанию;
	Перем БланкСводнойТаблицыПоУмолчанию;
	   	
	РезультатФункции = Справочники.БланкиОтчетов.ПустаяСсылка();
	Справочники.ВидыОтчетов.ПолучитьНастройкиПоУмолчанию(ВидОтчетаВход, БланкОтображенияПоУмолчанию, БланкДляИмпортаПоУмолчанию, ПравилоОбработкиПоУмолчанию, ПравилоПроверкиПоУмолчанию, БланкСводнойТаблицыПоУмолчанию);
	РезультатФункции = ПравилоОбработкиПоУмолчанию;
	Возврат РезультатФункции;
КонецФункции

// Возвращает структуру для расшифровки операнда.
Функция ПолучитьСтруктуруОбъектаРасчета(Показатель, Операнд, Контекст, СтруктураОтборов, УникальныйИдентификатор, ИмяОперанда = "") Экспорт
	ВидОтчета = Операнд.ПоказательОтбор.Владелец;
	// Соответствие СоответствиеПоиска. 
	СтрПоказатель = Новый Структура;
	СтрПоказатель.Вставить("Валютный",						 Ложь);
	СтрПоказатель.Вставить("ВидИтога",						 Перечисления.ВидыИтоговПоказателя.Сумма);
	СтрПоказатель.Вставить("ГруппаРаскрытия",				 Справочники.ГруппыРаскрытия.ПустаяСсылка());
	СтрПоказатель.Вставить("ДанныеРасчета",					 Неопределено);
	СтрПоказатель.Вставить("Значение",						 0);
	СтрПоказатель.Вставить("ЗначениеИзменено",				 Ложь);
	СтрПоказатель.Вставить("Код",							 Операнд.ПоказательОтбор.Код);
	СтрПоказатель.Вставить("Наименование",					 Операнд.ПоказательОтбор.Наименование);
	СтрПоказатель.Вставить("НеМасштабируется",				 Операнд.ПоказательОтбор.НеМасштабируется);
	СтрПоказатель.Вставить("ПересчитыватьВалютнуюСумму",	 Ложь);
	СтрПоказатель.Вставить("СохраненныеДанныеАктуальны",	 Истина);
	СтрПоказатель.Вставить("Ссылка",						 Операнд.ПоказательОтбор.Ссылка);
	СтрПоказатель.Вставить("ТипЗначения",					 Перечисления.ТипыЗначенийПоказателейОтчетов.Число);
	СтрПоказатель.Вставить("ЧислоАналитикГруппыРаскрытия",	 0);
	СоответствиеПоиска = Новый Соответствие;
	СоответствиеПоиска.Вставить(Операнд.ПоказательОтбор, СтрПоказатель);
	// Таблица мПоказателиРаскрытия.
	АдресТаблицыРасшифровки = Справочники.ПанелиОтчетов.ПолучитьАдресТаблицыРасшифровкиПоАналитикам(Показатель, Контекст);
	мЗначенияОперандов = ПолучитьИзВременногоХранилища(АдресТаблицыРасшифровки);
	мЗначенияОперандов.Колонки.Добавить("КодОперанда");
	мЗначенияОперандов.Колонки.Добавить("Значение");
	мЗначенияОперандов.Колонки.Добавить("ЗначениеВалюта");
	мЗначенияОперандов.Колонки.Добавить("ЗначениеИзменено");
	мЗначенияОперандов.Колонки.Добавить("ЗначениеЗаблокировано");
	мЗначенияОперандов.Колонки.Добавить("ИндексСостояния");
	мЗначенияОперандов.Колонки.Добавить("ЧислоАналитикГруппыРаскрытия");
	Для Каждого ТекМЗначенияОперандов Из мЗначенияОперандов Цикл
		ТекМЗначенияОперандов.КодОперанда					 = Операнд.Код;
		Если ИмяОперанда = "ФактическоеЗначениеТекущегоПериода" Тогда
			ТекМЗначенияОперандов.Значение					 = ТекМЗначенияОперандов.ЗначениеБаза;
		ИначеЕсли ИмяОперанда = "ФактическоеЗначениеПредыдущегоПериода" Тогда
			ТекМЗначенияОперандов.Значение					 = ТекМЗначенияОперандов.ЗначениеСравнение;
		ИначеЕсли ИмяОперанда = "ПлановоеЗначение" Тогда
			ТекМЗначенияОперандов.Значение					 = ТекМЗначенияОперандов.ЗначениеПлан;
		Иначе
			ТекМЗначенияОперандов.Значение					 = ТекМЗначенияОперандов.ЗначениеБаза;
		КонецЕсли;
		ТекМЗначенияОперандов.ЗначениеВалюта				 = ТекМЗначенияОперандов.Значение;
		ТекМЗначенияОперандов.ЗначениеИзменено				 = Ложь;
		ТекМЗначенияОперандов.ЗначениеЗаблокировано			 = Ложь;
		ТекМЗначенияОперандов.ИндексСостояния				 = 1;
		ТекМЗначенияОперандов.ЧислоАналитикГруппыРаскрытия	 = 0;
	КонецЦикла;
	мПоказателиРаскрытия = мЗначенияОперандов.Скопировать();
	// Таблица КорректировкиПоказателейРаскрытия.
	КорректировкиПоказателейРаскрытия = Новый ТаблицаЗначений;
	КорректировкиПоказателейРаскрытия.Колонки.Добавить("АналитикаВалюта");
	КорректировкиПоказателейРаскрытия.Колонки.Добавить("Показатель");
	// Лог показателей.
	ТаблицаЛогПоказателей = Новый ТаблицаЗначений;
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		ТаблицаЛогПоказателей.Колонки.Добавить("Аналитика"+Индекс);
		
	КонецЦикла;
	
	ТаблицаЛогПоказателей.Колонки.Добавить("АналитикаВалюта");
	ТаблицаЛогПоказателей.Колонки.Добавить("ДобавлениеАналитики");
	ТаблицаЛогПоказателей.Колонки.Добавить("Значение");
	ТаблицаЛогПоказателей.Колонки.Добавить("ЗначениеБаза");
	ТаблицаЛогПоказателей.Колонки.Добавить("ЗначениеВалюта");
	ТаблицаЛогПоказателей.Колонки.Добавить("ЗначениеЗаблокировано");
	ТаблицаЛогПоказателей.Колонки.Добавить("ЗначениеИзменено");
	ТаблицаЛогПоказателей.Колонки.Добавить("ЗначениеПлан");
	ТаблицаЛогПоказателей.Колонки.Добавить("ЗначениеСравнение");
	ТаблицаЛогПоказателей.Колонки.Добавить("ИндексСостояния");
	ТаблицаЛогПоказателей.Колонки.Добавить("ИтогПоПоказателю");
	ТаблицаЛогПоказателей.Колонки.Добавить("КодОперанда");
	ТаблицаЛогПоказателей.Колонки.Добавить("НачальноеЗначение");
	ТаблицаЛогПоказателей.Колонки.Добавить("НачальноеЗначениеВалюта");
	ТаблицаЛогПоказателей.Колонки.Добавить("НачальноеЗначениеЗаблокировано");
	ТаблицаЛогПоказателей.Колонки.Добавить("НачальноеИндексСостояния");
	ТаблицаЛогПоказателей.Колонки.Добавить("НомерОперации");
	ТаблицаЛогПоказателей.Колонки.Добавить("Показатель");
	ТаблицаЛогПоказателей.Колонки.Добавить("СторнированиеАналитики");
	ТаблицаЛогПоказателей.Колонки.Добавить("ЧислоАналитикГруппыРаскрытия");
	ТаблицаЛогПоказателей.Колонки.Добавить("ЧисловойПоказатель");
	// Таблица мОперанды.
	ТаблицаМОперанды = УправлениеОтчетамиУХ.ПолучитьДанныеОперандовДляРасчета(, Показатель, , , Операнд);
	// Структура Показатели.
	ПоказателиСтруктура = Новый Структура;
	ПоказателиСтруктура.Вставить(Операнд.Код, 0);
	// Заполнение выходной структуры.
	РезультатФункции = Новый Структура;
	
	Для Индекс=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		РезультатФункции.Вставить("Аналитика"+Индекс,Неопределено);
		
	КонецЦикла;

	РезультатФункции.Вставить("База",	 							 Неопределено);
	РезультатФункции.Вставить("ВидОтчета",							 ВидОтчета);
	РезультатФункции.Вставить("ДополнительныеСвойства",				 Новый Структура);
	РезультатФункции.Вставить("ЕдиницаИзмеренияОтображения",		 Перечисления.ПорядкиОкругленияОтчетности.Окр1);
	РезультатФункции.Вставить("ЕстьОбращениеКВИБ",	 				 Ложь);
	РезультатФункции.Вставить("ЗаполнениеВыполнено",			 	 Ложь);
	РезультатФункции.Вставить("ИспользуемаяИБ",						 Справочники.ВнешниеИнформационныеБазы.ТекущаяИБ);
	РезультатФункции.Вставить("ЛогИзмененийРаскрытийПоказателей",	 ТаблицаЛогПоказателей);
	РезультатФункции.Вставить("МаксАналитикОтчета",					 0);
	РезультатФункции.Вставить("МаксАналитикПоказателя",				 0);
	РезультатФункции.Вставить("мЗначенияОперандов",					 мЗначенияОперандов);
	РезультатФункции.Вставить("мКорректировкиПоказателейРаскрытия",			 КорректировкиПоказателейРаскрытия);
	РезультатФункции.Вставить("МОперанды",									 ТаблицаМОперанды);
	РезультатФункции.Вставить("мСоответствиеДляПоискаПоСсылке",				 СоответствиеПоиска);
	РезультатФункции.Вставить("мСоответствиеОперандовИПоказателейОтбора",	 Новый Соответствие);
	РезультатФункции.Вставить("мСоответствиеДляПоискаПоСсылкеКорр",			 Новый Соответствие);
	РезультатФункции.Вставить("мПоказателиРаскрытия",				 мПоказателиРаскрытия);
	РезультатФункции.Вставить("мТабПоказателиЗапросы",				 Новый ТаблицаЗначений);
	РезультатФункции.Вставить("НомерТекущейОперации",				 0);
	РезультатФункции.Вставить("ОбработанныеОперанды",				 Новый Соответствие);
	РезультатФункции.Вставить("Организация",						 СтруктураОтборов.ОтборПоОрганизации);
	РезультатФункции.Вставить("ОсновнаяВалюта",						 СтруктураОтборов.ОтборПоВалюте);
	РезультатФункции.Вставить("ПериодОтчета",						 СтруктураОтборов.ПериодПланированияОтборОкончание);
	РезультатФункции.Вставить("Показатели",							 ПоказателиСтруктура);
	РезультатФункции.Вставить("ПоказателиДляЗаполнения",			 Неопределено);
	РезультатФункции.Вставить("ПравилоОбработки",					 ПолучитьПравилоОбработкиПоУмолчанию(ВидОтчета));
	РезультатФункции.Вставить("РежимКорректировки",			 	 	 Ложь);
	РезультатФункции.Вставить("Проект", 							 СтруктураОтборов.ОтборПоПроекту);
	РезультатФункции.Вставить("Ссылка",								 Документы.НастраиваемыйОтчет.ПустаяСсылка());
	РезультатФункции.Вставить("Сценарий", 							 СтруктураОтборов.ОтборПоСценарию);
	РезультатФункции.Вставить("ТрансформационнаяКорректировка",		 Ложь);
	РезультатФункции.Вставить("УправляемыйРежим",				 	 Истина);
	РезультатФункции.Вставить("УровеньТочности", 					 0);
	РезультатФункции.Вставить("ФлагОшибкиИмпорта",	 	 	 		 Ложь);
	РезультатФункции.Вставить("ЧтениеНеактуальныхЗаписей",	 		 Истина);
	Возврат РезультатФункции;
КонецФункции

// Возвращает адрес структуры для расшифровки операнда.
Функция ПолучитьАдресОбъектаРасчетаОперанда(Показатель, Операнд, Контекст, СтруктураОтборов, УникальныйИдентификатор, ИмяОперанда = "") Экспорт
	РезультатФункции = "";
	ОбъектРасчета = ПолучитьСтруктуруОбъектаРасчета(Показатель, Операнд, Контекст, СтруктураОтборов, УникальныйИдентификатор, ИмяОперанда);
	РезультатФункции = ПоместитьВоВременноеХранилище(ОбъектРасчета, УникальныйИдентификатор);
	Возврат РезультатФункции;
КонецФункции

Функция ВернутьСписокДоступныхРасшифровок(Объект, Расшифровка, Расшифровки, АдресДанныхРасшифровки, URLСхемы, УникальныйИдентификатор) Экспорт
	
	Перем СписокДоступныхРасшифровок, АдресМассиваДоступныхРасшифровок;
	
	ДанныеРасшифровки = ПолучитьИзВременногоХранилища(АдресДанныхРасшифровки);
	
	Справочники.ПроизвольныеОтчеты.ПолучитьДоступныеРасшифровки(Объект, ДанныеРасшифровки, Расшифровка, Расшифровки, СписокДоступныхРасшифровок, АдресМассиваДоступныхРасшифровок, URLСхемы, УникальныйИдентификатор);
	
	Возврат Новый ФиксированнаяСтруктура("СписокДоступныхРасшифровок, АдресМассиваДоступныхРасшифровок", СписокДоступныхРасшифровок, АдресМассиваДоступныхРасшифровок);
	
КонецФункции

// Дорабатывает отчет перед выводом
Процедура ДоработатьТиповойОтчетПередВыводом(ОтчетОбъект, КомпоновщикНастроек = Неопределено) Экспорт
	
	Если КомпоновщикНастроек = Неопределено Тогда
		КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
	КонецЕсли;
	
	// Отработка "Отрицательное красным"
	Если ОтчетОбъект.ОтрицательноеКрасным И Не ОтчетОбъект.РасширеннаяНастройка Тогда
	
		Для каждого Ресурс Из ТиповыеОтчетыУХ.ПолучитьВыбранныеПоля(КомпоновщикНастроек) Цикл
			Если Не КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора.НайтиПоле(Ресурс.Поле).Ресурс Тогда
				Продолжить;
			КонецЕсли;
			НовыйЭлемент = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();
			// Настройка отбора
			ЭлементОтбора = НовыйЭлемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.Использование = Истина;
			ЭлементОтбора.ЛевоеЗначение = Ресурс.Поле;
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше;
			ЭлементОтбора.ПравоеЗначение = 0;
			// Настройка оформления
			ЗначениеПараметра = НовыйЭлемент.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("MarkNegatives"));
			ЗначениеПараметра.Использование = Истина;
			ЗначениеПараметра.Значение = Истина;
			// Настройка полей
			Поле = НовыйЭлемент.Поля.Элементы.Добавить();
			Поле.Поле = Ресурс.Поле;
		КонецЦикла;
	КонецЕсли;
	
	Если Не ТиповыеОтчетыУХ.ЭтоПроизвольныйОтчет(ОтчетОбъект) И Не ОтчетОбъект.РасширеннаяНастройка Тогда
		// Убрать вывод заголовка, т.к. он выводится нестандартно
		ТиповыеОтчетыУХ.УстановитьПараметрВывода(КомпоновщикНастроек, "TitleOutput", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	КонецЕсли;

	Если ТиповыеОтчетыУХ.ЭтоСтараяВерсияОтчета(ОтчетОбъект) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыПанели  = ТиповыеОтчетыУХ.ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);
	ЗначенияНастроек = ТиповыеОтчетыУХ.ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ОтчетОбъект);
	Если ПараметрыПанели = Неопределено
	 ИЛИ ЗначенияНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Установим у всех параметров использование
	Для каждого ЗначениеПараметра Из ЗначенияНастроек.НастройкиКомпоновщика.ПараметрыДанных.Элементы Цикл
		ЗначениеПараметра.Использование = Истина;
	КонецЦикла;
 
	// Установка параметра ПериодОтчета
	ЗначениеПараметра                 = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодОтчета"));
	ЗначениеПараметраПредыдущийПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПредыдущийПериодОтчета"));
	ЗначениеПараметраПериодОтчетаПлан = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодОтчетаПлан"));
	
	НайденныеСтроки = ПараметрыПанели.ДеревоНастроекСтандартныхСтраниц.Строки.НайтиСтроки(Новый Структура("Имя", "Период"));
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЕстьПериод = НайденныеСтроки[0].Использование;
	Иначе
		ЕстьПериод = Ложь;
	КонецЕсли;
	
	Если ЕстьПериод И ЗначениеПараметра <> Неопределено Тогда
		
		
		ЗначениеПараметраСмещение = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("СмещениеПериода"));
		СмещениеПериода           = ?(ЗначениеПараметраСмещение = Неопределено, 0, ЗначениеПараметраСмещение.Значение);
		
		ЗначениеПараметраГоризонт = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Горизонт"));
		Горизонт = ?(ЗначениеПараметраГоризонт = Неопределено, 0, ЗначениеПараметраГоризонт.Значение);
		
		Если ЗначениеЗаполнено(ЗначениеПараметра.Значение) И ЗначениеПараметраПредыдущийПериод <> Неопределено Тогда
			ОтносительныйПериод = ОбщегоНазначенияУХ.глОтносительныйПериод(ЗначениеПараметра.Значение, СмещениеПериода, Истина);
			Если ЗначениеЗаполнено(ОтносительныйПериод) Тогда
				ЗначениеПараметраПредыдущийПериод.Использование = Истина;
				ЗначениеПараметраПредыдущийПериод.Значение      = ОтносительныйПериод;
			Иначе
				ЗначениеПараметраПредыдущийПериод.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ЗначениеПараметра.Значение) И ЗначениеПараметраПериодОтчетаПлан <> Неопределено Тогда
			ОтносительныйПериод = ОбщегоНазначенияУХ.глОтносительныйПериод(ЗначениеПараметра.Значение, Горизонт, Истина);
			Если ЗначениеЗаполнено(ОтносительныйПериод) Тогда
				ЗначениеПараметраПериодОтчетаПлан.Использование = Истина;
				ЗначениеПараметраПериодОтчетаПлан.Значение      = ОтносительныйПериод;
			Иначе
				ЗначениеПараметраПериодОтчетаПлан.Использование = Ложь;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокаПериодДеревоНастроек = ПараметрыПанели.ДеревоНастроекСтандартныхСтраниц.Строки.Найти("Период");
	Если СтрокаПериодДеревоНастроек <> Неопределено Тогда
		Если СтрокаПериодДеревоНастроек.Использование Тогда
			// Установка Стандартного периода
			ЗначениеПараметраНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));
			ЗначениеПараметраКонецПериода  = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));
			Если ЗначениеПараметраНачалоПериода <> Неопределено И ЗначениеПараметраКонецПериода <> Неопределено Тогда
				
				СтандартныйПериод = Неопределено;
				ЗначенияНастроек.Свойство("СтандартныйПериод", СтандартныйПериод);
				Если СтандартныйПериод <> Неопределено Тогда
					Если СтандартныйПериод.ДатаНачала <> '00010101' Тогда
						ЗначениеПараметраНачалоПериода.Использование = Истина;
						ЗначениеПараметраНачалоПериода.Значение = СтандартныйПериод.ДатаНачала;
					КонецЕсли;
					Если СтандартныйПериод.ДатаОкончания <> '00010101' Тогда
						ЗначениеПараметраКонецПериода.Использование = Истина;
						ЗначениеПараметраКонецПериода.Значение = СтандартныйПериод.ДатаОкончания;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// Установка Стандартной даты начала
			ЗначениеПараметраПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));
			Если ЗначениеПараметраПериод <> Неопределено Тогда
				
				СтандартнаяДатаНачала = Неопределено;
				ЗначенияНастроек.Свойство("СтандартнаяДатаНачала", СтандартнаяДатаНачала);
				Если СтандартнаяДатаНачала <> Неопределено Тогда
					Если СтандартнаяДатаНачала.Дата <> '00010101' Тогда
						ЗначениеПараметраПериод.Использование = Истина;
						ЗначениеПараметраПериод.Значение = СтандартнаяДатаНачала.Дата;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Пропускаем.
	КонецЕсли;
	
	// Установка Динамических отборов
	Для каждого СтрокаОтбора Из ПараметрыПанели.Отборы Цикл
		ЗначениеОтбора = ЗначенияНастроек.ДинамическиеОтборы[СтрокаОтбора.Поле];
		Если ЗначениеОтбора = Неопределено ИЛИ Не ЗначениеОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаОтбора.ВидОтбора = "Список" ИЛИ СтрокаОтбора.ВидОтбора = "ДлинныйСписок" Тогда
			Если ЗначениеОтбора.ВидСравнения = "" Тогда
				Продолжить;
			КонецЕсли;
			Если ЗначениеОтбора.ВидСравнения = "Исключая" Тогда
				ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных["Не" + СтрокаОтбора.ВидСравнения];
			Иначе
				ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных[СтрокаОтбора.ВидСравнения];
			КонецЕсли;
		Иначе
			ВидСравненияКомпоновки = ВидСравненияКомпоновкиДанных[СтрокаОтбора.ВидСравнения];
		КонецЕсли;
		
		ТиповыеОтчетыУХ.ДобавитьОтбор(КомпоновщикНастроек, ЗначениеОтбора.Поле, ЗначениеОтбора.Значение, ВидСравненияКомпоновки);
	КонецЦикла;
	ТиповыеОтчетыУХ.УдалитьДублиОтбора(КомпоновщикНастроек);
	
КонецПроцедуры