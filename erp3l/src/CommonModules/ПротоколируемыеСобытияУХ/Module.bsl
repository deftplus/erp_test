
Процедура Начать(ОбъектРасчета=Неопределено) Экспорт
	
	Если НЕ ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ПараметрыСеанса.ПротоколируемыеСобытияСчетчик = 0 Тогда
		
		СоответствиеПотоков=Новый Соответствие;
		СоответствиеПотоков.Вставить(1,Новый ХранилищеЗначения(КэшируемыеПроцедурыУХ.ИнициализироватьТаблицуПротокола()));
		
		ПараметрыСеанса.ПротоколируемоеСобытиеСобытия = Новый ФиксированноеСоответствие(СоответствиеПотоков);
		
		/////////////////////////////////////////////////////////////////////////////////////////////////////
		
		ПараметрыСеанса.ПротоколируемыеСобытияСчетчик = 1;
		
		///////////////////////////////////////////////////////////////////////////////////////////////////////
		
		СоответствиеКонтекстов=Новый Соответствие;
		СоответствиеКонтекстов.Вставить(1,ПолучитьСтруктуруКонтекста(ОбъектРасчета));
		
		ПараметрыСеанса.ПротоколируемыеСобытияКонтекст=Новый ФиксированноеСоответствие(СоответствиеКонтекстов);
		
	Иначе
		
		ПараметрыСеанса.ПротоколируемыеСобытияСчетчик = ПараметрыСеанса.ПротоколируемыеСобытияСчетчик + 1;
		
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		СоответствиеПотоков=Новый Соответствие(ПараметрыСеанса.ПротоколируемоеСобытиеСобытия);
		СоответствиеПотоков.Вставить(ПараметрыСеанса.ПротоколируемыеСобытияСчетчик,Новый ХранилищеЗначения(КэшируемыеПроцедурыУХ.ИнициализироватьТаблицуПротокола()));
		
		ПараметрыСеанса.ПротоколируемоеСобытиеСобытия = Новый ФиксированноеСоответствие(СоответствиеПотоков);
		
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		
		СоответствиеКонтекстов=Новый Соответствие(ПараметрыСеанса.ПротоколируемыеСобытияКонтекст);
		СоответствиеКонтекстов.Вставить(ПараметрыСеанса.ПротоколируемыеСобытияСчетчик,ПолучитьСтруктуруКонтекста(ОбъектРасчета));
		
		ПараметрыСеанса.ПротоколируемыеСобытияКонтекст=Новый ФиксированноеСоответствие(СоответствиеКонтекстов);
	
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

Функция ПолучитьСтруктуруКонтекста(ОбъектРасчета) Экспорт 
	
	СтруктураКонтекст=Новый Структура("ВидОтчета,Организация,ПериодОтчета,Сценарий,Проект,ПравилоОбработки,ШаблонКорректировки,ИспользуемаяИБ,ВерсияХранимогоФайла,Ссылка,ПоказательОтчета,КонтекстСобытия,СеансОбменаДанными");
	
	Если Не ОбъектРасчета=Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(СтруктураКонтекст,ОбъектРасчета);
		
	КонецЕсли;
	
	Если ТипЗнч(ОбъектРасчета)=Тип("СправочникСсылка.СеансыОбменаДанными") Тогда
		
		СтруктураКонтекст.СеансОбменаДанными=объектРасчета;
		
	КонецЕсли;
		
	Возврат Новый ФиксированнаяСтруктура(СтруктураКонтекст);
		
КонецФункции // ПолучитьСтруктуруКонтекста() 

Функция ЕстьПротоколПотока()
	
	Если ПараметрыСеанса.ПротоколируемыеСобытияСчетчик = 0
		ИЛИ ПараметрыСеанса.ПротоколируемоеСобытиеСобытия.Получить(ПараметрыСеанса.ПротоколируемыеСобытияСчетчик)=Неопределено Тогда // Нет открытых потоков протоколирования
		
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;
	
КонецФункции // ЕстьПротоколПотока()

Процедура ДобавитьЗаписьВЖурнал(КонтекстЗаписи,Событие, ТипЗаписи, ОбъектМетаданных, ОбъектДанных, Сообщение, ТехническаяИнформацияСтрокаВнутр,КонтекстСобытия=Неопределено,ОчищатьПредыдущие=Истина) Экспорт
	
	НаборЗаписей=РегистрыСведений.ЖурналПротоколируемыхСобытий.СоздатьНаборЗаписей();
	
	Для Каждого КлючИЗначение ИЗ КонтекстЗаписи Цикл
		
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			
			НаборЗаписей.Отбор[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.Прочитать();
	
	Если ОчищатьПредыдущие Тогда
		
		НаборЗаписей.Очистить();
		
	КонецЕсли;
	
	НоваяСтрока=НаборЗаписей.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока,КонтекстЗаписи);
	
	НоваяСтрока.Событие=Событие;
	НоваяСтрока.ТипЗаписи=ТипЗаписи;
	НоваяСтрока.Дата=ТекущаяДата();
	НоваяСтрока.ВремяMs=ТекущаяУниверсальнаяДатаВМиллисекундах();
	НоваяСтрока.КлючЗаписи=Новый УникальныйИдентификатор;
	НоваяСтрока.Пользователь=ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	НоваяСтрока.Сообщение=Сообщение;
	НоваяСтрока.ОбъектМетаданных=ОбъектМетаданных;
	Новаястрока.ОбъектДанных=ОбъектДанных;
	НоваяСтрока.ТехническаяИнформацияСтрокаВнутр=ТехническаяИнформацияСтрокаВнутр;
	
	Если НЕ КонтекстСобытия=Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,КонтекстСобытия);
		
	КонецЕсли;
	
	НаборЗаписей.Записать();
		
КонецПроцедуры // ДобавитьЗаписьВЖурнал() 

Процедура ДобавитьЗаписьВПротокол(Событие, ТипЗаписи, ОбъектМетаданных, ОбъектДанных, Сообщение, ТехническаяИнформацияСтрокаВнутр,КонтекстСобытия=Неопределено)
	
	Если НЕ (ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() И ЕстьПротоколПотока()) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	СоответствиеПотоков=Новый Соответствие(ПараметрыСеанса.ПротоколируемоеСобытиеСобытия);
	
	ПротоколПотока=СоответствиеПотоков.Получить(ПараметрыСеанса.ПротоколируемыеСобытияСчетчик).Получить();
	
	НоваяСтрока=ПротоколПотока.Добавить();
	
	НоваяСтрока.Событие=Событие;
	НоваяСтрока.ТипЗаписи=ТипЗаписи;
	НоваяСтрока.Дата=ТекущаяДата();
	НоваяСтрока.ВремяMs=ТекущаяУниверсальнаяДатаВМиллисекундах();
	НоваяСтрока.КлючЗаписи=Новый УникальныйИдентификатор;
	НоваяСтрока.Пользователь=ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	НоваяСтрока.Сообщение=Сообщение;
	НоваяСтрока.ОбъектМетаданных=ОбъектМетаданных;
	Новаястрока.ОбъектДанных=ОбъектДанных;
	НоваяСтрока.ТехническаяИнформацияСтрокаВнутр=ТехническаяИнформацияСтрокаВнутр;
	
	Если НЕ КонтекстСобытия=Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока,КонтекстСобытия);
		
	КонецЕсли;
	
	СоответствиеПотоков.Вставить(ПараметрыСеанса.ПротоколируемыеСобытияСчетчик,Новый ХранилищеЗначения(ПротоколПотока));

	ПараметрыСеанса.ПротоколируемоеСобытиеСобытия=Новый ФиксированноеСоответствие(СоответствиеПотоков);	
	
КонецПроцедуры // ДобавитьЗаписьВПротокол()

Процедура ДобавитьЗаписьТаблица(ОбъектРасчета,Событие, УровеньЖурналаРегистрации, ОбъектМетаданных, Данные, Комментарий, ТехническаяИнформация,КонтекстСобытия=Неопределено, ИспользоватьФоновоеЗадание = Ложь)
	
	Если НЕ ИспользоватьФоновоеЗадание Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ТипЗаписи=ПолучитьТипЗаписиПротокола(УровеньЖурналаРегистрации);
	
	НоваяСтрока=ОбъектРасчета.ТаблицаПротоколаСеанс.Добавить();
	
	НоваяСтрока.Событие=Событие;
	НоваяСтрока.ТипЗаписи=ТипЗаписи;
	НоваяСтрока.Дата=ТекущаяДата();
	НоваяСтрока.ВремяMs=ТекущаяУниверсальнаяДатаВМиллисекундах();
	НоваяСтрока.КлючЗаписи=Новый УникальныйИдентификатор;
	НоваяСтрока.Пользователь=ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь");
	НоваяСтрока.Сообщение=Комментарий;
	НоваяСтрока.ОбъектМетаданных=ОбъектМетаданных;
	Новаястрока.ОбъектДанных=Данные;
			
	ЗаполнитьЗначенияСвойств(НоваяСтрока,ОбъектРасчета);
				
	ЗаписьЖурналаРегистрации("УправлениеХолдингом." + Событие, УровеньЖурналаРегистрации, ОбъектМетаданных, Данные, Комментарий);
				
КонецПроцедуры // ДобавитьЗаписьВПротокол()

Процедура ДобавитьЗапись(Событие, УровеньЖурналаРегистрации, ОбъектМетаданных, Данные, Комментарий, ТехническаяИнформация,КонтекстСобытия=Неопределено, ИспользоватьФоновоеЗадание = Ложь)
	
	Если НЕ ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ИспользоватьФоновоеЗадание Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
		
	Если ИспользоватьФоновоеЗадание Тогда
		ПараметрыЗадания = ПараметрыВМассив(Событие, УровеньЖурналаРегистрации, ОбъектМетаданных, Данные, Комментарий);
		ФоновыеЗадания.Выполнить("ПротоколируемыеСобытияУХ.ЗаписатьПротоколируемоеСобытие", ПараметрыЗадания);
	Иначе	
		ЗаписьЖурналаРегистрации("УправлениеХолдингом." + Событие, УровеньЖурналаРегистрации, ОбъектМетаданных, Данные, Комментарий);
		ДобавитьЗаписьВПротокол("УправлениеХолдингом." + Событие, ПолучитьТипЗаписиПротокола(УровеньЖурналаРегистрации), ОбъектМетаданных, Данные, Комментарий,?(ТехническаяИнформация = Неопределено,Неопределено,ЗначениеВСтрокуВнутр(ТехническаяИнформация)),КонтекстСобытия);
	КонецЕсли;
		
	Если НЕ ТехническаяИнформация = Неопределено Тогда
		
		ТехническаяИнформацияСтрокаВнутр = ЗначениеВСтрокуВнутр(ТехническаяИнформация);
		
		Если ИспользоватьФоновоеЗадание Тогда
			ПараметрыЗадания = ПараметрыВМассив(Событие, УровеньЖурналаРегистрации, ОбъектМетаданных, Данные, ТехническаяИнформацияСтрокаВнутр);
			ФоновыеЗадания.Выполнить("ПротоколируемыеСобытияУХ.ЗаписатьПротоколируемоеСобытие", ПараметрыЗадания);
		Иначе	
			ЗаписьЖурналаРегистрации("УправлениеХолдингом." + Событие, УровеньЖурналаРегистрации, ОбъектМетаданных, Данные, ТехническаяИнформацияСтрокаВнутр);
		КонецЕсли;
		
	Иначе
		ТехническаяИнформацияСтрокаВнутр = "";
	КонецЕсли;
				
КонецПроцедуры

#Область ФоновыеЗадания

Процедура ЗаписатьПротоколируемоеСобытие(ИмяСобытия, Уровень = Неопределено, ОбъектМетаданных = Неопределено, Данные = Неопределено, Комментарий = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыСобытия = Новый Структура("Наименование,Дата", ИмяСобытия, ТекущаяДата());
	
	мз = РегистрыСведений.ПротоколируемыеСобытия.СоздатьМенеджерЗаписи();
	
	мз.ПротоколируемоеСобытие = Справочники.ПротоколируемыеСобытия.ДобавитьЭлемент(ПараметрыСобытия);
	мз.Номер = 1;
	мз.Дата = ПараметрыСобытия.Дата;
	мз.Сообщение = Комментарий;
	мз.ТипЗаписи = ПолучитьТипЗаписиПротокола(Уровень);
	мз.ОбъектДанных = Данные;
	мз.ОбъектМетаданных = ОбъектМетаданных;
		
	Если ЗначениеЗаполнено(мз.ОбъектДанных) Тогда
		мз.ПредставлениеДанных = ЗначениеВСтрокуВнутр(Данные);
	КонецЕсли;
	
	мз.Записать();

КонецПроцедуры

Функция ПараметрыВМассив(Событие, УровеньЖурналаРегистрации, ОбъектМетаданных, Данные, Комментарий)

	Параметры = Новый Массив;
	Параметры.Добавить(Событие);
	Параметры.Добавить(УровеньЖурналаРегистрации);
	Параметры.Добавить(ОбъектМетаданных);
	Параметры.Добавить(Данные);
	Параметры.Добавить(Комментарий);
	
	Возврат Параметры;

КонецФункции

#КонецОбласти

Функция ПолучитьТипЗаписиПротокола(Уровень)

	Если Уровень = УровеньЖурналаРегистрации.Ошибка Тогда
		Возврат Перечисления.ТипыЗаписейПротоколируемыхСобытий.Ошибка;	
	ИначеЕсли Уровень = УровеньЖурналаРегистрации.Информация Тогда
		Возврат Перечисления.ТипыЗаписейПротоколируемыхСобытий.Информация;	
	ИначеЕсли Уровень = УровеньЖурналаРегистрации.Предупреждение Тогда
		Возврат Перечисления.ТипыЗаписейПротоколируемыхСобытий.Предупреждение;	
	ИначеЕсли Уровень = УровеньЖурналаРегистрации.Примечание Тогда
		Возврат Перечисления.ТипыЗаписейПротоколируемыхСобытий.Примечание;	
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция Завершить(Наименование, Описание = "", 
						Объект = Неопределено, 
						ФормироватьПустое = Ложь, 
						ЗаписыватьОбъект=Истина,
						ФайлИмпорта="",
						ОчищатьПредыдущие=Истина,
						ОбъектРасчета=Неопределено) Экспорт
	
	Если НЕ ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если (НЕ ЕстьПротоколПотока()) И ОбъектРасчета=Неопределено Тогда
		
		Отменить();
		Возврат Неопределено;
		
	КонецЕсли;

	ПротоколПотока=ПараметрыСеанса.ПротоколируемоеСобытиеСобытия.Получить(ПараметрыСеанса.ПротоколируемыеСобытияСчетчик).Получить();
	КонтекстПротокола=ПараметрыСеанса.ПротоколируемыеСобытияКонтекст.Получить(ПараметрыСеанса.ПротоколируемыеСобытияСчетчик);
		
	ТипыЗаписей = Новый Соответствие;
	ТипыЗаписей.Вставить(УровеньЖурналаРегистрации.Информация,     Перечисления.ТипыЗаписейПротоколируемыхСобытий.Информация);
	ТипыЗаписей.Вставить(УровеньЖурналаРегистрации.Ошибка,         Перечисления.ТипыЗаписейПротоколируемыхСобытий.Ошибка);
	ТипыЗаписей.Вставить(УровеньЖурналаРегистрации.Предупреждение, Перечисления.ТипыЗаписейПротоколируемыхСобытий.Предупреждение);
	ТипыЗаписей.Вставить(УровеньЖурналаРегистрации.Примечание,     Перечисления.ТипыЗаписейПротоколируемыхСобытий.Примечание);
	
	ПротоколируемоеСобытие = Справочники.ПротоколируемыеСобытия.ДобавитьЭлементОбъект(Новый Структура("Наименование,Описание,Дата,Объект,ФайлИмпорта", Наименование, Описание, ТекущаяДата(), Объект,ФайлИмпорта));
	
	Записи = ПротоколируемоеСобытие.Записи;
	
	НаборЗаписей=РегистрыСведений.ЖурналПротоколируемыхСобытий.СоздатьНаборЗаписей();
	
	Для Каждого КлючИЗначение ИЗ КонтекстПротокола Цикл
		
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			
			НаборЗаписей.Отбор[КлючИЗначение.Ключ].Установить(КлючИЗначение.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	НаборЗаписей.Прочитать();
	
	Если ОчищатьПредыдущие Тогда
		
		НаборЗаписей.Очистить();
		
	КонецЕсли;
	
	ДобавитьЗаписиПротокола(НаборЗаписей,Записи,ПротоколПотока,КонтекстПротокола);
	
	Если (Не ОбъектРасчета=Неопределено) Тогда
		
		ДобавитьЗаписиПротокола(НаборЗаписей,Записи,ОбъектРасчета.ТаблицаПротоколаСеанс,ОбъектРасчета);
		
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
	Отменить();
	
	Если ЗаписыватьОбъект Тогда
		
		Если Записи.Количество()>0 ИЛИ ФормироватьПустое Тогда
			
			ПротоколируемоеСобытие.Записать();		
			Возврат ПротоколируемоеСобытие.Ссылка;
			
		КонецЕсли;
					
	Иначе
		
		Возврат Записи.Выгрузить();
		
	КонецЕсли;
	
Конецфункции

Процедура ДобавитьЗаписиПротокола(НаборЗаписей,Записи,ТаблицаПротокола,КонтекстПротокола)
	
	Для Каждого Строка Из ТаблицаПротокола Цикл
				
		// Необходимо устранить дублирование записей в протоколе
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Событие", 							СокрЛП(Строка.Событие));
		СтруктураПоиска.Вставить("Сообщение", 							СокрЛП(Строка.Сообщение));
		СтруктураПоиска.Вставить("ТехническаяИнформацияСтрокаВнутр", 	СокрЛП(Строка.ТехническаяИнформацияСтрокаВнутр));
		СтруктураПоиска.Вставить("ТипЗаписи", 							Строка.ТипЗаписи);
		СтруктураПоиска.Вставить("ОбъектДанных", 						Строка.ОбъектДанных);
		СтруктураПоиска.Вставить("ОбъектМетаданных", 					Строка.ОбъектМетаданных);
		СтруктураПоиска.Вставить("ПоказательОтчета", 					Строка.ПоказательОтчета);

		Строки = Записи.НайтиСтроки(СтруктураПоиска);
		
		Если Строки.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Запись = Записи.Добавить();
		Запись.Событие 							= СтруктураПоиска.Событие;
		Запись.Дата 							= Строка.Дата;
		Запись.ВремяMs 							= Строка.ВремяMs;
		Запись.Сообщение 						= СтруктураПоиска.Сообщение;
		Запись.ТехническаяИнформацияСтрокаВнутр = СтруктураПоиска.ТехническаяИнформацияСтрокаВнутр;
		Запись.ТипЗаписи 						= СтруктураПоиска.ТипЗаписи;
		Запись.ОбъектДанных 					= СтруктураПоиска.ОбъектДанных;
		Запись.ОбъектМетаданных 				= СтруктураПоиска.ОбъектМетаданных;
		Запись.КонтекстСобытия					= Строка.КонтекстСобытия;
		Запись.ПоказательОтчета					= Строка.ПоказательОтчета;
		Запись.Пользователь						= Строка.Пользователь;
		Запись.ПериодОтчета						= КонтекстПротокола.ПериодОтчета;
		
		НоваяСтрока=НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,КонтекстПротокола);
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Запись);
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
	КонецЦикла;
	
КонецПроцедуры // ДобавитьЗаписиПротокола()

Процедура Отменить() Экспорт
	
	Если НЕ ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом() Тогда
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ЕстьПротоколПотока() Тогда
	
		Возврат;
		
	КонецЕсли;
	
	СоответствиеПотоков=Новый Соответствие(ПараметрыСеанса.ПротоколируемоеСобытиеСобытия);	
	СоответствиеПотоков.Удалить(ПараметрыСеанса.ПротоколируемыеСобытияСчетчик);	
	ПараметрыСеанса.ПротоколируемоеСобытиеСобытия=Новый ФиксированноеСоответствие(СоответствиеПотоков);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	СоответствиеКонтекстов=Новый Соответствие(ПараметрыСеанса.ПротоколируемыеСобытияКонтекст);
	СоответствиеКонтекстов.Удалить(ПараметрыСеанса.ПротоколируемыеСобытияСчетчик);
	ПараметрыСеанса.ПротоколируемыеСобытияКонтекст=Новый ФиксированноеСоответствие(СоответствиеКонтекстов);
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	
	ПараметрыСеанса.ПротоколируемыеСобытияСчетчик=ПараметрыСеанса.ПротоколируемыеСобытияСчетчик-1;
			
КонецПроцедуры

Процедура ДобавитьЗаписьИнформация(Событие, ОбъектМетаданных = Неопределено, Данные = Неопределено, Комментарий = "", ТехническаяИнформация = Неопределено,КонтекстСобытия=Неопределено, ФоновоеЗадание = Ложь) Экспорт
	
	ДобавитьЗапись(Событие, УровеньЖурналаРегистрации.Информация, ОбъектМетаданных, Данные, Комментарий, ТехническаяИнформация,КонтекстСобытия, ФоновоеЗадание);
	
КонецПроцедуры

Процедура ДобавитьЗаписьИнформацияТаблица(ОбъектРасчета,Событие, ОбъектМетаданных = Неопределено, Данные = Неопределено, Комментарий = "", ТехническаяИнформация = Неопределено,КонтекстСобытия=Неопределено, ФоновоеЗадание = Ложь) Экспорт
	
	ДобавитьЗаписьТаблица(ОбъектРасчета,Событие, УровеньЖурналаРегистрации.Информация, ОбъектМетаданных, Данные, Комментарий, ТехническаяИнформация,КонтекстСобытия, ФоновоеЗадание);
	
КонецПроцедуры

Процедура ДобавитьЗаписьОшибка(Событие, ОбъектМетаданных = Неопределено, Данные = Неопределено, Комментарий = "", ТехническаяИнформация = Неопределено,КонтекстСобытия=Неопределено, ФоновоеЗадание = Ложь) Экспорт
	
	ДобавитьЗапись(Событие, УровеньЖурналаРегистрации.Ошибка, ОбъектМетаданных, Данные, Комментарий, ТехническаяИнформация,КонтекстСобытия, ФоновоеЗадание);
	
КонецПроцедуры

Процедура ДобавитьЗаписьОшибкаТаблица(ОбъектРасчета,Событие, ОбъектМетаданных = Неопределено, Данные = Неопределено, Комментарий = "", ТехническаяИнформация = Неопределено,КонтекстСобытия=Неопределено, ФоновоеЗадание = Ложь) Экспорт
	
	ДобавитьЗаписьТаблица(ОбъектРасчета,Событие, УровеньЖурналаРегистрации.Ошибка, ОбъектМетаданных, Данные, Комментарий, ТехническаяИнформация,КонтекстСобытия, ФоновоеЗадание);
	
КонецПроцедуры

Процедура ДобавитьЗаписьПредупреждение(Событие, ОбъектМетаданных = Неопределено, Данные = Неопределено, Комментарий = "", ТехническаяИнформация = Неопределено,КонтекстСобытия=Неопределено, ФоновоеЗадание = Ложь) Экспорт
	
	ДобавитьЗапись(Событие, УровеньЖурналаРегистрации.Предупреждение, ОбъектМетаданных, Данные, Комментарий, ТехническаяИнформация,КонтекстСобытия, ФоновоеЗадание);
	
КонецПроцедуры

Процедура ДобавитьЗаписьПредупреждениеТаблица(ОбъектРасчета,Событие, ОбъектМетаданных = Неопределено, Данные = Неопределено, Комментарий = "", ТехническаяИнформация = Неопределено,КонтекстСобытия=Неопределено, ФоновоеЗадание = Ложь) Экспорт
	
	ДобавитьЗаписьТаблица(ОбъектРасчета,Событие, УровеньЖурналаРегистрации.Предупреждение, ОбъектМетаданных, Данные, Комментарий, ТехническаяИнформация,КонтекстСобытия, ФоновоеЗадание);
	
КонецПроцедуры

Процедура ДобавитьЗаписьПримечание(Событие, ОбъектМетаданных = Неопределено, Данные = Неопределено, Комментарий = "", ТехническаяИнформация = Неопределено,КонтекстСобытия=Неопределено, ФоновоеЗадание = Ложь) Экспорт
	
	ДобавитьЗапись(Событие, УровеньЖурналаРегистрации.Примечание, ОбъектМетаданных, Данные, Комментарий, ТехническаяИнформация,КонтекстСобытия, ФоновоеЗадание);
	
КонецПроцедуры

Процедура ДобавитьЗаписьПримечаниеТаблица(ОбъектРасчета,Событие, ОбъектМетаданных = Неопределено, Данные = Неопределено, Комментарий = "", ТехническаяИнформация = Неопределено,КонтекстСобытия=Неопределено, ФоновоеЗадание = Ложь) Экспорт
	
	ДобавитьЗаписьТаблица(ОбъектРасчета,Событие, УровеньЖурналаРегистрации.Примечание, ОбъектМетаданных, Данные, Комментарий, ТехническаяИнформация,КонтекстСобытия, ФоновоеЗадание);
	
КонецПроцедуры


Процедура ЗаписатьПротоколВРегистр(Объект=Неопределено,
									ВерсияХранимогоФайла=Неопределено,
									Протокол=Неопределено,
									Организация=Неопределено,
									ПериодОтчета=Неопределено,
									Сценарий=Неопределено,
									ВидОтчета=Неопределено) Экспорт
	
	НаборЗаписей=РегистрыСведений.ПротоколыОбъектов.СоздатьНаборЗаписей();
	
	Если ЗначениеЗаполнено(Объект) Тогда
		
		НаборЗаписей.Отбор.Объект.Установить(Объект);
		
	КонецЕсли;
		
	Если ЗначениеЗаполнено(Организация) Тогда
		
		НаборЗаписей.Отбор.Организация.Установить(Организация);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПериодОтчета) Тогда
		
		НаборЗаписей.Отбор.ПериодОтчета.Установить(ПериодОтчета);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сценарий) Тогда
		
		НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидОтчета) Тогда
		
		НаборЗаписей.Отбор.ВидОтчета.Установить(ВидОтчета);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВерсияХранимогоФайла) Тогда
		
		НаборЗаписей.Отбор.ВерсияХранимогоФайла.Установить(ВерсияХранимогоФайла);
		
	КонецЕсли;
	
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
		
	Если НЕ Протокол=Неопределено Тогда
				
		НоваяСтрока=НаборЗаписей.Добавить();
		
		НоваяСтрока.Объект					= Объект;
		НоваяСтрока.Организация				= Организация;
        НоваяСтрока.ПериодОтчета			= ПериодОтчета;
       	НоваяСтрока.Сценарий				= Сценарий;
		НоваяСтрока.ВидОтчета				= ВидОтчета;
		НоваяСтрока.ВерсияХранимогоФайла	= ВерсияХранимогоФайла;

		НоваяСтрока.Протокол	= Протокол;
		НоваяСтрока.ЕстьОшибки	= НЕ Протокол.Записи.Найти(Перечисления.ТипыЗаписейПротоколируемыхСобытий.Ошибка,"ТипЗаписи")=Неопределено;
		
	КонецЕсли;
	
	НаборЗаписей.Записать();
		
КонецПроцедуры // ЗаписатьСобытиеВРегистр()

Функция ЕстьПротоколыПоОбъекту(Объект,
							Организация=Неопределено,
							ПериодОтчета=Неопределено,
							Сценарий=Неопределено,
							ВерсияХранимогоФайла = Неопределено) Экспорт
							
							
	Если НЕ (ЗначениеЗаполнено(Объект) 
				ИЛИ ЗначениеЗаполнено(Организация) 
				ИЛИ ЗначениеЗаполнено(ПериодОтчета) 
				ИЛИ ЗначениеЗаполнено(Сценарий)
				ИЛИ ЗначениеЗаполнено(ВерсияХранимогоФайла)) Тогда
				
		Возврат Ложь;
		
	КонецЕсли;
														
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПротоколыОбъектов.Протокол
	|ИЗ
	|	РегистрСведений.ПротоколыОбъектов КАК ПротоколыОбъектов
	|ГДЕ
	|	ПротоколыОбъектов.ЕстьОшибки";
	
	Если ЗначениеЗаполнено(Объект) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ПротоколыОбъектов.Объект = &Объект";
		
		Запрос.УстановитьПараметр("Объект",Объект);
		
	КонецЕсли;	
			
	Если Не Организация=Неопределено Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ПротоколыОбъектов.Организация=&Организация";
		
		Запрос.УстановитьПараметр("Организация",Организация);
		
	КонецЕсли;
	
	Если Не ПериодОтчета=Неопределено Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ПротоколыОбъектов.ПериодОтчета=&ПериодОтчета";
		
		Запрос.УстановитьПараметр("ПериодОтчета",ПериодОтчета);
		
	КонецЕсли;
	
	Если Не Сценарий=Неопределено Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ПротоколыОбъектов.Сценарий=&Сценарий";
		
		Запрос.УстановитьПараметр("Сценарий",Сценарий);
		
	КонецЕсли;
	
	Если Не ВерсияХранимогоФайла=Неопределено Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ПротоколыОбъектов.ВерсияХранимогоФайла=&ВерсияХранимогоФайла";
		
		Запрос.УстановитьПараметр("ВерсияХранимогоФайла", ВерсияХранимогоФайла);
		
	КонецЕсли;
		
	Результат=Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
				 	
КонецФункции // ЕстьПротоколыПоОбъекту()

Функция ЕстьОшибкиПоОбъекту(ОбъектРасчета) Экспорт
	
	КонтекстПротокола=ПолучитьСтруктуруКонтекста(ОбъектРасчета);
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЖурналПротоколируемыхСобытий.КлючЗаписи
	|ИЗ
	|	РегистрСведений.ЖурналПротоколируемыхСобытий КАК ЖурналПротоколируемыхСобытий
	|ГДЕ
	|	ЖурналПротоколируемыхСобытий.ТипЗаписи = &ТипЗаписиОшибка";
	
	Для Каждого КлючИЗначение ИЗ КонтекстПротокола Цикл
		
		Если ЗначениеЗаполнено(КлючИЗначение.Значение) Тогда
			
			Запрос.Текст=Запрос.Текст+"
			|И ЖурналПротоколируемыхСобытий."+КлючИЗначение.Ключ+"=&"+КлючИЗначение.Ключ;
			
			Запрос.УстановитьПараметр(КлючИЗначение.Ключ,КлючИЗначение.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТипЗаписиОшибка",Перечисления.ТипыЗаписейПротоколируемыхСобытий.Ошибка);
	
	Результат=Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции // ЕстьОшибкиПоОбъекту() 

/////////////////////////////////////////////////////////////////
// ДанныеОбъекта: Структура
//  Объект=Неопределено,
//	ВерсияХранимогоФайла=Неопределено,
//	Организация=Неопределено,
//	ПериодОтчета=Неопределено,
//	Сценарий=Неопределено,
//	ВидОтчета=Неопределено
//
//
Функция ПолучитьТаблицуПротоколовПоОбъекту(ДанныеОбъекта) Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПротоколыОбъектов.Протокол,
	|	ПротоколыОбъектов.ЕстьОшибки,
	|	ВЫБОР
	|		КОГДА ПротоколыОбъектов.Протокол.ФайлИмпорта ССЫЛКА Справочник.ХранимыеФайлыОрганизацийПрисоединенныеФайлы
	|			ТОГДА ПротоколыОбъектов.Протокол.ФайлИмпорта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВерсияХранимогоФайла,
	|	ВЫБОР
	|		КОГДА ПротоколыОбъектов.Протокол.ФайлИмпорта ССЫЛКА Справочник.ХранимыеФайлыОрганизацийПрисоединенныеФайлы
	|			ТОГДА ПротоколыОбъектов.Протокол.ФайлИмпорта.ПолноеИмяФайла
	|		ИНАЧЕ ПротоколыОбъектов.Протокол.ФайлИмпорта
	|	КОНЕЦ КАК ПолноеИмяФайла
	|ИЗ
	|	РегистрСведений.ПротоколыОбъектов КАК ПротоколыОбъектов";
	
	ТекстОтбор="";
			
	Если ЗначениеЗаполнено(ДанныеОбъекта.Объект) Тогда
		
		ТекстОтбор=ТекстОтбор+"
		|И ПротоколыОбъектов.Объект = &Объект";
		
		Запрос.УстановитьПараметр("Объект",ДанныеОбъекта.Объект);
		
	КонецЕсли;	
			
	Если ЗначениеЗаполнено(ДанныеОбъекта.Организация) Тогда
		
		ТекстОтбор=ТекстОтбор+"
		|И ПротоколыОбъектов.Организация=&Организация";
		
		Запрос.УстановитьПараметр("Организация",ДанныеОбъекта.Организация);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ПериодОтчета)  Тогда
		
		ТекстОтбор=ТекстОтбор+"
		|И ПротоколыОбъектов.ПериодОтчета=&ПериодОтчета";
		
		Запрос.УстановитьПараметр("ПериодОтчета",ДанныеОбъекта.ПериодОтчета);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.Сценарий)  Тогда
		
		ТекстОтбор=ТекстОтбор+"
		|И ПротоколыОбъектов.Сценарий=&Сценарий";
		
		Запрос.УстановитьПараметр("Сценарий",ДанныеОбъекта.Сценарий);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ВидОтчета)Тогда
		
		ТекстОтбор=ТекстОтбор+"
		|И ПротоколыОбъектов.ВидОтчета=&ВидОтчета";
		
		Запрос.УстановитьПараметр("ВидОтчета",ДанныеОбъекта.ВидОтчета);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеОбъекта.ВерсияХранимогоФайла)Тогда
		
		ТекстОтбор=ТекстОтбор+"
		|И ПротоколыОбъектов.ВерсияХранимогоФайла=&ВерсияХранимогоФайла";
		
		Запрос.УстановитьПараметр("ВерсияХранимогоФайла",ДанныеОбъекта.ВерсияХранимогоФайла);
		
	КонецЕсли;

	
	Если Не ПустаяСтрока(ТекстОтбор) Тогда
		
		Запрос.Текст=СтрШаблон("%1
			|ГДЕ %2", Запрос.Текст, Сред(ТекстОтбор,4));
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
			
КонецФункции // ПолучитьТаблицуПротоколовПоОбъекту()

Функция ПолучитьМассивПротоколируемыхОбъектов(МассивОбъектов,КлючевыеРеквизиты=Неопределено) Экспорт
	
	МассивПротоколируемыхОбъектов=Новый Массив;
	
	Для Каждого Объект ИЗ МассивОбъектов Цикл
		
		ДанныеОбъекта=Новый Структура("Объект,ВерсияХранимогоФайла,Организация,ПериодОтчета,Сценарий,ВидОтчета");
		
		Если ТипЗнч(КлючевыеРеквизиты)=Тип("Структура") Тогда
			
			ЗаполнитьЗначенияСвойств(ДанныеОбъекта,КлючевыеРеквизиты);
			
		КонецЕсли;
		
		Если ТипЗнч(Объект)=Тип("Структура") Тогда
			
			ЗаполнитьЗначенияСвойств(ДанныеОбъекта,Объект);
			
		Иначе
			
			ДанныеОбъекта.Объект=Объект;
			
		КонецЕсли;
					
		СтруктураПараметров=Новый Структура;
		СтруктураПараметров.Вставить("Ссылка",ДанныеОбъекта.Объект);
		
		Если НЕ КлючевыеРеквизиты=Неопределено Тогда
			СтруктураПараметров.Вставить("КлючевыеРеквизиты",КлючевыеРеквизиты);
		КонецЕсли;
		
		СтруктураПараметров.Вставить("ВерсияХранимогоФайла",ДанныеОбъекта.ВерсияХранимогоФайла);
			
		МассивСобытий=Новый Массив;
		
		ТаблицаПротоколов=ПротоколируемыеСобытияУХ.ПолучитьТаблицуПротоколовПоОбъекту(ДанныеОбъекта);
		
		Если ТаблицаПротоколов.Количество()>0 Тогда
			
			ДобавитьЗаписьВМассивСобытий(МассивСобытий,ТаблицаПротоколов);							
						
		Иначе
			
			МассивСобытий.Добавить(Новый Структура("Комментарий,Протокол",Нстр("ru = 'Обработка выполнена без замечаний'"),));
			
		КонецЕсли;
		
		СтруктураПараметров.Вставить("МассивСобытий",МассивСобытий);	
		МассивПротоколируемыхОбъектов.Добавить(СтруктураПараметров);
	
	КонецЦикла;
	
	Возврат МассивПротоколируемыхОбъектов;
		
КонецФункции // ПолучитьМассивПротоколируемыхОбъектов()

Функция ПолучитьДанныеДляПечатиПротокола(Протокол) Экспорт
	
	МассивПротоколируемыхОбъектов=Новый Массив;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("Ссылка",Протокол.Объект);		
	СтруктураПараметров.Вставить("ВерсияХранимогоФайла",Протокол.ФайлИмпорта);
	
	МассивСобытий=Новый Массив;
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПротоколируемыеСобытия.Ссылка КАК Протокол,
	|	ПротоколируемыеСобытия.ЕстьОшибки КАК ЕстьОшибки,
	|	ВЫБОР
	|		КОГДА ПротоколируемыеСобытия.ФайлИмпорта ССЫЛКА Справочник.ХранимыеФайлыОрганизацийПрисоединенныеФайлы
	|			ТОГДА ПротоколируемыеСобытия.ФайлИмпорта
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВерсияХранимогоФайла,
	|	ВЫБОР
	|		КОГДА ПротоколируемыеСобытия.ФайлИмпорта ССЫЛКА Справочник.ХранимыеФайлыОрганизацийПрисоединенныеФайлы
	|			ТОГДА ПротоколируемыеСобытия.ФайлИмпорта.ПолноеИмяФайла
	|		ИНАЧЕ ПротоколируемыеСобытия.ФайлИмпорта
	|	КОНЕЦ КАК ПолноеИмяФайла
	|ИЗ
	|	Справочник.ПротоколируемыеСобытия КАК ПротоколируемыеСобытия
	|ГДЕ
	|	ПротоколируемыеСобытия.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка",Протокол);
	
	Результат=Запрос.Выполнить().Выбрать();
	Результат.Следующий();
	
	Если Результат.ЕстьОшибки Тогда
		
		МассивСобытий.Добавить(Новый Структура("Комментарий,Протокол,ЕстьОшибки,ИмяФайла,ВерсияФайла",Нстр("ru = 'Протокол обработки'"),Результат.Протокол,Истина,Результат.ПолноеИмяФайла,Результат.ВерсияХранимогоФайла));
		
	Иначе
		
		МассивСобытий.Добавить(Новый Структура("Комментарий,Протокол,ИмяФайла,ВерсияФайла",Нстр("ru = 'Обработка выполнена без замечаний.'"),Результат.Протокол,Результат.ПолноеИмяФайла,Результат.ВерсияХранимогоФайла));
		
	КонецЕсли;						
	
	СтруктураПараметров.Вставить("МассивСобытий",МассивСобытий);	
	МассивПротоколируемыхОбъектов.Добавить(СтруктураПараметров);
	
	Возврат МассивПротоколируемыхОбъектов;	
	
КонецФункции // ПолучитьДанныеДляПечатиПротокола() 

Процедура ДобавитьЗаписьВМассивСобытий(МассивСобытий,ТаблицаПротоколов,ТипСобытия=Неопределено)
	
	Для Каждого Строка ИЗ ТаблицаПротоколов Цикл
		
		Если Строка.ЕстьОшибки Тогда
			
			МассивСобытий.Добавить(Новый Структура("Комментарий,Протокол,ЕстьОшибки,ИмяФайла,ВерсияФайла",
				Нстр("ru = 'Протокол обработки'"),Строка.Протокол,Истина,Строка.ПолноеИмяФайла,Строка.ВерсияХранимогоФайла));
			
		Иначе
			
			МассивСобытий.Добавить(Новый Структура("Комментарий,Протокол,ИмяФайла,ВерсияФайла",
				Нстр("ru = 'Обработка выполнена без замечаний.'"),Строка.Протокол,Строка.ПолноеИмяФайла,Строка.ВерсияХранимогоФайла));
			
		КонецЕсли;
		
	КонецЦикла;
			
КонецПроцедуры // ДобавитьЗаписьВМассивСобытий() 

// Процедура устанавливает параметры сеанса протоколируемых событий.
//
// Параметры:
//  ИмяПараметра           - Неопределено;
//  УстановленныеПараметры - Неопределено.
//
Процедура УстановкаПараметровСеанса(ИмяПараметра = Неопределено, УстановленныеПараметры = Неопределено) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИмяПараметра = "ПротоколируемоеСобытиеКлюч" Тогда
		ПараметрыСеанса.ПротоколируемоеСобытиеКлюч = "";
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ПротоколируемоеСобытиеКлюч");
		КонецЕсли;
		
	ИначеЕсли ИмяПараметра = "ПротоколируемоеСобытиеДата" Тогда
		ПараметрыСеанса.ПротоколируемоеСобытиеДата = '00010101';
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ПротоколируемоеСобытиеДата");
		КонецЕсли;
		
	ИначеЕсли ИмяПараметра = "ПротоколируемоеСобытиеСобытия" Тогда
		ПараметрыСеанса.ПротоколируемоеСобытиеСобытия = Новый ФиксированноеСоответствие(Новый Соответствие);
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ПротоколируемоеСобытиеСобытия");
		КонецЕсли;
		
	ИначеЕсли ИмяПараметра = "ПротоколируемыеСобытияКонтекст" Тогда
		ПараметрыСеанса.ПротоколируемыеСобытияКонтекст = Новый ФиксированноеСоответствие(Новый Соответствие);
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ПротоколируемыеСобытияКонтекст");
		КонецЕсли;
		
	ИначеЕсли ИмяПараметра = "ПротоколируемыеСобытияСчетчик" Тогда
		ПараметрыСеанса.ПротоколируемыеСобытияСчетчик = 0;
		Если УстановленныеПараметры <> Неопределено Тогда
			УстановленныеПараметры.Добавить("ПротоколируемыеСобытияСчетчик");
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры
