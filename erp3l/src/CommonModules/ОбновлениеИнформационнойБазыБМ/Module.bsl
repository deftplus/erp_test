////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы конфигурации "Бухгалтерия КОРП МСФО".
//
/////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс


////////////////////////////////////////////////////////////////////////////////
// Получение сведений о конфигурации.

// См. процедуру ОбновлениеИнформационнойБазыБСП.ПриДобавленииПодсистемы.
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "БухгалтерияКорпМСФО";
	Описание.Версия = ОбновлениеИнформационнойБазыУХПереопределяемый.НомерВерсииПодсистемыУХ();
	Описание.ТребуемыеПодсистемы.Добавить("СтандартныеПодсистемы");
	
КонецПроцедуры

// См. процедуру ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления.
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	ЗагеристрироватьОбработчикиПервоначальногоЗаполнения(Обработчики);
	
	//ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
	//	Обработчики,
	//	"1.3..",
	//	"",
	//	Ложь,
	//	"Монопольно",
	//	Ложь);
	
	#Область ОбработчикиОбновления_ВсеВерсии
	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"*",
		"ОбновлениеИнформационнойБазыБМ.ОбновитьТипыПВХКорпоративные",
		Ложь,
		"Оперативно",
		Истина);
	#КонецОбласти
	
	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"3.0.1.91",
		"Документы.ПризнаниеРасходовФинансовыхИнструментов.ЗаполнитьРеквизитыСторно",
		Ложь,
		"Оперативно",
		Ложь);
		
	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"3.0.4.1",
		"Документы.ВводСведенийОФинансовыхИнструментах.ОбновлениеГрафиковФИМСФО_2_0",
		Ложь,
		"Оперативно",
		Истина);
		
	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"3.0.2.33",
		"ДополнительныеЯзыкиУХ.ЗаполнитьДопЯзыкиПериодов",
		Ложь,
		"Оперативно",
		Ложь);
		
	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"3.0.2.33",
		"ОбновлениеИнформационнойБазыБМ.ОбновитьОсновнойЯзык",
		Ложь,
		"Оперативно",
		Ложь);
		
	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"3.1.0.38",
		"РегистрыСведений.УдалитьНастройкаРаспределенияЗатратМСФО.ПеренестиРаспределенияВСправочник",
		Ложь,
		"Оперативно",
		Ложь);

				
КонецПроцедуры

// См. процедуру ОбновлениеИнформационнойБазыБСП.ПередОбновлениемИнформационнойБазы.
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
КонецПроцедуры

// См. процедуру ОбновлениеИнформационнойБазыБСП.ПослеОбновленияИнформационнойБазы.
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ИтерацииОбновления, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
КонецПроцедуры

// См. процедуру ОбновлениеИнформационнойБазыБСП.ПриПодготовкеМакетаОписанияОбновлений.
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

// Позволяет переопределить режим обновления данных информационной базы.
// Для использования в редких (нештатных) случаях перехода, не предусмотренных в
// стандартной процедуре определения режима обновления.
//
// Параметры:
//   РежимОбновленияДанных - Строка - в обработчике можно присвоить одно из значений:
//              "НачальноеЗаполнение"     - если это первый запуск пустой базы (области данных);
//              "ОбновлениеВерсии"        - если выполняется первый запуск после обновление конфигурации базы данных;
//              "ПереходСДругойПрограммы" - если выполняется первый запуск после обновление конфигурации базы данных, 
//                                          в которой изменилось имя основной конфигурации.
//
//   СтандартнаяОбработка  - Булево - если присвоить Ложь, то стандартная процедура
//                                    определения режима обновления не выполняется, 
//                                    а используется значение РежимОбновленияДанных.
//
Процедура ПриОпределенииРежимаОбновленияДанных(РежимОбновленияДанных, СтандартнаяОбработка) Экспорт
 
КонецПроцедуры

// Добавляет в список процедуры-обработчики перехода с другой программы (с другим именем конфигурации).
// Например, для перехода между разными, но родственными конфигурациями: базовая -> проф -> корп.
// Вызывается перед началом обновления данных ИБ.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - с колонками:
//    * ПредыдущееИмяКонфигурации - Строка - имя конфигурации, с которой выполняется переход;
//                                           или "*", если нужно выполнять при переходе с любой конфигурации.
//    * Процедура                 - Строка - полное имя процедуры-обработчика перехода с программы ПредыдущееИмяКонфигурации. 
//                                  Например, "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику"
//                                  Обязательно должна быть экспортной.
//
// Пример:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.ПредыдущееИмяКонфигурации  = "УправлениеТорговлей";
//  Обработчик.Процедура                  = "ОбновлениеИнформационнойБазыУПП.ЗаполнитьУчетнуюПолитику";
//
Процедура ПриДобавленииОбработчиковПереходаСДругойПрограммы(Обработчики) Экспорт
	ЗагеристрироватьОбработчикиПервоначальногоЗаполнения(Обработчики);
КонецПроцедуры

// Вызывается после выполнения всех процедур-обработчиков перехода с другой программы (с другим именем конфигурации),
// и до начала выполнения обновления данных ИБ.
//
// Параметры:
//  ПредыдущееИмяКонфигурации    - Строка - имя конфигурации до перехода.
//  ПредыдущаяВерсияКонфигурации - Строка - имя предыдущей конфигурации (до перехода).
//  Параметры                    - Структура - 
//    * ВыполнитьОбновлениеСВерсии   - Булево - по умолчанию Истина. Если установить Ложь, 
//        то будут выполнена только обязательные обработчики обновления (с версией "*").
//    * ВерсияКонфигурации           - Строка - номер версии после перехода. 
//        По умолчанию, равен значению версии конфигурации в свойствах метаданных.
//        Для того чтобы выполнить, например, все обработчики обновления с версии ПредыдущаяВерсияКонфигурации, 
//        следует установить значение параметра в ПредыдущаяВерсияКонфигурации.
//        Для того чтобы выполнить вообще все обработчики обновления, установить значение "0.0.0.1".
//    * ОчиститьСведенияОПредыдущейКонфигурации - Булево - по умолчанию Истина. 
//        Для случаев когда предыдущая конфигурация совпадает по имени с подсистемой текущей конфигурации, следует указать Ложь.
//
Процедура ПриЗавершенииПереходаСДругойПрограммы(Знач ПредыдущееИмяКонфигурации, Знач ПредыдущаяВерсияКонфигурации, Параметры) Экспорт
 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиПервоначальногоЗаполнения


Процедура ЗагеристрироватьОбработчикиПервоначальногоЗаполнения(Обработчики) Экспорт
	
	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"1.0.1.1",
		"ОбновлениеИнформационнойБазыБМ.ПервыйЗапуск",
		Истина,
		"Монопольно",
		Истина);
	
 	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"*",
		"ОбновлениеИнформационнойБазыБМ.ОбновитьИнформациюПоМетаданным",
		Истина,
		"Монопольно",
		Истина);
	
 	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"1.0.1.140",
		"Справочники.ПараметрыРасчетаРезервовПоДЗ.ОбновитьПредопределенные",
		Истина,
		"Монопольно",
		Истина);
	
 	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"1.0.1.143",
		"ОбновлениеИнформационнойБазыБМ.ОбновитьИсточникиДанныхДляТрансляции",
		Истина,
		"Монопольно",
		Истина);
	
 	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"1.0.3.42",
		"ОбновлениеИнформационнойБазыБМ.ОбновитьПравилаИмпортаОбъектов",
		Истина,
		"Монопольно",
		Истина);
	
 	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"1.0.3.46",
		"ОбновлениеИнформационнойБазыБМ.ОбновитьСправочникВерсииРегламентовПодготовкиОтчетности",
		Истина,
		"Монопольно",
		Истина);
	
 	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"1.1.1.22",
		"ОбновлениеИнформационнойБазыБМ.УстановитьКонстантыАвтоматическогоПересчета",
		Истина,
		"Монопольно",
		Истина);
	
 	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"1.1.1.27",
		"ОбновлениеИнформационнойБазыБМ.ОбновитьПравилаРасчета",
		Истина,
		"Монопольно",
		Истина);
	
 	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"1.2.1.6",
		"ОбновлениеИнформационнойБазыБМ.ЗаполнитьОпцииОтчетов",
		Истина,
		"Монопольно",
		Истина);
	
 	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"1.2.1.8",
		"ОбновлениеИнформационнойБазыБМ.ОбновитьФИ",
		Истина,
		"Монопольно",
		Истина);
	
 	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"1.2.1.19",
		"ОбновлениеИнформационнойБазыБМ.ПеренестиПериодическиеКурсыВРегистрСведений",
		Истина,
		"Монопольно",
		Истина);
	
 	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"1.3.2.5",
		"ОбновлениеИнформационнойБазыБМ.ЗаполнитьКонстантуСценарияМСФО",
		Истина,
		"Монопольно",
		Истина);
	
 	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"1.3.5.2",
		"ОбновлениеИнформационнойБазыБМ.ОбновитьСценарииБезСвязанныхДанных",
		Истина,
		"Монопольно",
		Истина);
	
 	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"1.3.5.4",
		"ОбновлениеИнформационнойБазыБМ.УстановитьОсновныеБланки",
		Истина,
		"Монопольно",
		Истина);
	
 	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"1.3.6.10",
		"ОбновлениеИнформационнойБазыБМ.ОбновитьВалютыОтчетностиРегламентов",
		Истина,
		"Монопольно",
		Истина);
	
 	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"1.3.6.23",
		"Справочники.ДокументыБД.ЗаполнитьКлючевыеРеквизитыМСФОПоУмолчанию",
		Истина,
		"Монопольно",
		Истина);
	
 	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"1.3.8.31",
		"ОбновлениеИнформационнойБазыБМ.УстановитьПризнакУправлениеХолдингом",
		Истина,
		"Монопольно",
		Истина);
		
	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"1.3.9.15",
		"ОбновлениеИнформационнойБазыБМ.УстановитьПризнакИспользованияИнтеграцииСВнешнимиСистемами",
		Истина,
		"Монопольно",
		Ложь);	
		
	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"1.3.9.16",
		"ОбновлениеИнформационнойБазыБМ.УстановитьПризнакИспользованияУчетаПоСценариям",
		Истина,
		"Монопольно",
		Ложь);		
		
	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"3.0.1.28",
		"ОбновлениеИнформационнойБазыБМ.ОбновитьВалютыОрганизации",
		Истина,
		"Оперативно",
		Истина);
		
	ОбновлениеИнформационнойБазыСлужебныйБМ.ДобавитьОбработчикОбновления(
		Обработчики,
		"3.0.1.29",
		"ОбновлениеИнформационнойБазыБМ.ОбновитьМодельУчетаМСФО",
		Истина,
		"Оперативно",
		Истина);

КонецПроцедуры

//Вызовы процедур для первоначального заполнения базы
//
Процедура ПервыйЗапуск() Экспорт
		
	УстановитьПривилегированныйРежим(Истина);
	
	ОбновитьИнформациюПоМетаданным(Истина);
	
	ИмяИнтерфейсТакси = "ИнтерфейсТакси";
	Если Метаданные.Константы.Найти(ИмяИнтерфейсТакси) <> Неопределено Тогда
		Константы[ИмяИнтерфейсТакси].Установить(Истина);
	КонецЕсли;
	
	// Предзаполнение реквизитов согласования для соответствующих объектов
	
	ДокументОбъект=Справочники.ДокументыБД.НайтиПоНаименованию("НастраиваемыйОтчет",Истина,,Справочники.ТипыБазДанных.ТекущаяИБ).ПолучитьОбъект();
	ДокументОбъект.Согласуется=Истина;
	//ДокументОбъект.РеквизитСостояния="Состояние";
	ДокументОбъект.ЗначениеРеквизитаСостоянияНаУтверждении	= Перечисления.СостоянияОтчетов.Выполняется;
	ДокументОбъект.ЗначениеРеквизитаСостоянияОтклонен		= Перечисления.СостоянияОтчетов.Возвращен;
	ДокументОбъект.ЗначениеРеквизитаСостоянияУтвержден		= Перечисления.СостоянияОтчетов.Утвержден;
	ДокументОбъект.Записать();
	
	СправочникОбъект=Справочники.СправочникиБД.НайтиПоНаименованию("ДоговорыКонтрагентов",Истина,,Справочники.ТипыБазДанных.ТекущаяИБ).ПолучитьОбъект();
	СправочникОбъект.Согласуется=Истина;
	СправочникОбъект.РеквизитСостояния="Состояние";
	СправочникОбъект.ЗначениеРеквизитаСостоянияНаУтверждении	= Перечисления.СостоянияДоговоров.НаУтверждении;
	СправочникОбъект.ЗначениеРеквизитаСостоянияОтклонен			= Перечисления.СостоянияДоговоров.Отклонен;
	СправочникОбъект.ЗначениеРеквизитаСостоянияУтвержден		= Перечисления.СостоянияОтчетов.Утвержден;
	СправочникОбъект.Записать();
	
	СправочникОбъект=Справочники.СправочникиБД.НайтиПоНаименованию("Проекты",Истина,,Справочники.ТипыБазДанных.ТекущаяИБ).ПолучитьОбъект();
	СправочникОбъект.Согласуется=Истина;
	СправочникОбъект.РеквизитСостояния="Состояние";
	СправочникОбъект.ЗначениеРеквизитаСостоянияНаУтверждении	= Перечисления.СостоянияПроектов.НаУтверждении;
	СправочникОбъект.ЗначениеРеквизитаСостоянияОтклонен			= Перечисления.СостоянияПроектов.Отклонен;
	СправочникОбъект.ЗначениеРеквизитаСостоянияУтвержден		= Перечисления.СостоянияПроектов.Утвержден;
	СправочникОбъект.Записать();
	
	#Область УчетМСФО
	
	Константы.ПериодичностьОтчетностиМСФО.Установить(ПредопределенноеЗначение("Перечисление.Периодичность.Год"));
	Константы.УчетПоСценариям.Установить(Ложь);
		
	#КонецОбласти
	
	#Область УчетМСФО_ВНА
		
	Константы.УчетРезервовПоПереоценкеВНА.Установить(ПредопределенноеЗначение("Перечисление.СпособыУчетаРезервовПоПереоценкеВНАМСФО.СписаниеПриВыбытии"));
		
	#КонецОбласти
	
	#Область УчетМСФО_ФИ
	
	Константы.МаксимальноеЧислоИтерацийРасчетаЭСП.Установить(100);
	Константы.ПорогТочностиРасчетаЭСП.Установить(7);
	
	УстановитьПривилегированныйРежим(Истина);
	Справочники.ВидыОбъектовФинансовогоХарактера.ОбновитьПредопределенные();
	УстановитьПривилегированныйРежим(Ложь);
	
	#КонецОбласти
	
КонецПроцедуры

Процедура ОбновитьИнформациюПоМетаданным(Параметры = Неопределено) Экспорт
	
	ТекущаяИБ = Справочники.ТипыБазДанных.ТекущаяИБ;
	
	Кэш = РаботаСОбъектамиМетаданныхУХ.НовыйКэшОбновленияМетаданных();
	
    ОбщегоНазначенияУХ.ЗаполнитьСписокСправочниковБД(ТекущаяИБ,, Кэш);
    ОбщегоНазначенияУХ.ЗаполнитьСписокДокументовБД(ТекущаяИБ,, Кэш);
    ОбщегоНазначенияУХ.ЗаполнитьСписокПеречисленийБД(ТекущаяИБ,, Кэш);
    ОбщегоНазначенияУХ.ЗаполнитьСписокПлановВидовХарактеристикБД(ТекущаяИБ,,Кэш);
    ОбщегоНазначенияУХ.ЗаполнитьСписокРегистровБД(ТекущаяИБ,, Истина, Истина, Истина, Истина, Истина, Кэш);
 	
КонецПроцедуры

Процедура ОбновитьИсточникиДанныхДляТрансляции() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст= "ВЫБРАТЬ
	|	ИсточникиДанныхДляРасчетов.Ссылка
	|ИЗ
	|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
	|ГДЕ
	|	ИсточникиДанныхДляРасчетов.ТрансляцияДебет";
	
	Результат=Запрос.Выполнить().Выбрать();
	
	НачатьТранзакцию();
	
	Пока Результат.Следующий() Цикл
		
		ОбъектИсточник=Результат.Ссылка.ПолучитьОбъект();
		ОбъектИсточник.ПодготовитьТаблицыСопоставленийИОтборов();
		ОбъектИсточник.мМодифицированность=Истина;
		ОбъектИсточник.СохранитьНастройкиОперанда();
		
		Попытка
			
			ОбъектИсточник.Записать();
			УправлениеОтчетамиУХ.ОбновитьНастройкиДляСтороныПроводки(ОбъектИсточник.Ссылка);
			
		Исключение
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке("Не удалось обновить источник данных "+ОбъектИсточник.Код+" для правила расчета "+ОбъектИсточник.НазначениеРасчетов+": "+ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),,,СтатусСообщения.Внимание);
			ОтменитьТранзакцию();
			Возврат;
			
		КонецПопытки;
		
	КонецЦикла;
	
	ЗафиксироватьТранзакцию();
		
КонецПроцедуры // ОбновитьИсточникиДанныхДляТрансляции() 

Процедура ОбновитьПравилаИмпортаОбъектов() Экспорт 
	
	//Загрузка структуры метаданных текущей информационной базы
	ТекущаяИБ = Справочники.ТипыБазДанных.ТекущаяИБ;
	
	Кэш = РаботаСОбъектамиМетаданныхУХ.НовыйКэшОбновленияМетаданных();
	
    ОбщегоНазначенияУХ.ЗаполнитьСписокСправочниковБД(ТекущаяИБ,, Кэш);
    ОбщегоНазначенияУХ.ЗаполнитьСписокДокументовБД(ТекущаяИБ,, Кэш);
    ОбщегоНазначенияУХ.ЗаполнитьСписокПеречисленийБД(ТекущаяИБ,, Кэш);
    ОбщегоНазначенияУХ.ЗаполнитьСписокПлановВидовХарактеристикБД(ТекущаяИБ,,Кэш);
    ОбщегоНазначенияУХ.ЗаполнитьСписокРегистровБД(ТекущаяИБ,, Истина, Истина, Истина,,,Кэш);
 		
	ПравилаИмпорта = Справочники.ПравилаЗаполненияОбъектовБД.Выбрать();
	
	Пока ПравилаИмпорта.Следующий() Цикл
		
		ПравилоОбъект = ПравилаИмпорта.ПолучитьОбъект();
		ПравилоОбъект.ПоОбъектуБД = ЗначениеЗаполнено(ПравилоОбъект.ИсходныйОбъектБД);
		
		Попытка
			
			ПравилоОбъект.Записать();
			
		Исключение
			
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ОписаниеОшибки());
			
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры // ОбновитьПравилаИмпортаОбъектов()

Процедура ОбновитьСправочникВерсииРегламентовПодготовкиОтчетности() Экспорт

	// заполним ОрганизационныеЕдиницы.ОрганизационнаяЕдиницаРодитель из СтруктураГруппы.ОрганизационнаяЕдиницаРодитель
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	тчОрганизационныеЕдиницы.Ссылка,
	|	тчОрганизационныеЕдиницы.ОрганизационнаяЕдиница
	|ПОМЕСТИТЬ втОрганизационныеЕдиницы
	|ИЗ
	|	Справочник.ВерсииРегламентовПодготовкиОтчетности.ОрганизационныеЕдиницы КАК тчОрганизационныеЕдиницы
	|ГДЕ
	|	тчОрганизационныеЕдиницы.ОрганизационнаяЕдиницаРодитель = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втОрганизационныеЕдиницы.Ссылка КАК Документ,
	|	втОрганизационныеЕдиницы.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница,
	|	МАКСИМУМ(тчСтруктураГруппы.ОрганизационнаяЕдиницаРодитель) КАК ОрганизационнаяЕдиницаРодитель
	|ИЗ
	|	Справочник.ВерсииРегламентовПодготовкиОтчетности.СтруктураГруппы КАК тчСтруктураГруппы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втОрганизационныеЕдиницы КАК втОрганизационныеЕдиницы
	|		ПО тчСтруктураГруппы.ОрганизационнаяЕдиница = втОрганизационныеЕдиницы.ОрганизационнаяЕдиница
	|			И тчСтруктураГруппы.Ссылка = втОрганизационныеЕдиницы.Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	втОрганизационныеЕдиницы.Ссылка,
	|	втОрганизационныеЕдиницы.ОрганизационнаяЕдиница
	|ИТОГИ ПО
	|	Документ";

	ВыборкаРегламент = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	
	Пока ВыборкаРегламент.Следующий() Цикл
		
		ДокументОбъект = ВыборкаРегламент.Документ.ПолучитьОбъект();
		
		ВыборкаОрганизация = ВыборкаРегламент.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
		Пока ВыборкаОрганизация.Следующий() Цикл
			
			Отбор = Новый Структура("ОрганизационнаяЕдиница,ОрганизационнаяЕдиницаРодитель",
										ВыборкаОрганизация.ОрганизационнаяЕдиница, ПустаяОрганизация);
			СтрокиТаб = ДокументОбъект.ОрганизационныеЕдиницы.НайтиСтроки(Отбор);
			
			Для каждого СтрокаТаб Из СтрокиТаб Цикл
				СтрокаТаб.ОрганизационнаяЕдиницаРодитель = ВыборкаОрганизация.ОрганизационнаяЕдиницаРодитель; 
			КонецЦикла;
			
		КонецЦикла;
		
		ОбновлениеИнформационнойБазыСлужебныйБМ.ЗаписатьОбъект(ДокументОбъект);
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура УстановитьКонстантыАвтоматическогоПересчета() Экспорт
	
	Константы.АвтоматическийПересчетЗависимыхПоказателей.Установить(Истина);
	
КонецПроцедуры // УстановитьКонстантыАвтоматическогоПересчета()

Процедура ОбновитьПравилаРасчета() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	ПравилаОбработки.Ссылка
	|ИЗ
	|	Справочник.ПравилаОбработки КАК ПравилаОбработки
	|ГДЕ
	|	НЕ ПравилаОбработки.ПометкаУдаления";
					 
	Результат=Запрос.Выполнить().Выбрать();
	
	Пока Результат.Следующий() Цикл
		
		УправлениеОтчетамиУХ.СформироватьДанныеРегистраПараметрическихНастроек(Результат.Ссылка);
					
	КонецЦикла;
		
КонецПроцедуры

Процедура ЗаполнитьОпцииОтчетов() Экспорт

	//Константы.ИспользоватьУтверждениеЭлементовОтчетов.Установить(Истина);
	//Константы.ИспользоватьЧтениеНеактуальныхЗаписей.Установить(Истина);

КонецПроцедуры

Процедура ОбновитьФИ() Экспорт

	Справочники.ВидыОбъектовФинансовогоХарактера.ОбновитьПредопределенные();

КонецПроцедуры

Процедура ПеренестиПериодическиеКурсыВРегистрСведений() Экспорт
	
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	|	УправлениеПериодомСценарияПериодическиеКурсы.Валюта,
	|	УправлениеПериодомСценарияПериодическиеКурсы.Кратность,
	|	УправлениеПериодомСценарияПериодическиеКурсы.СреднийКурсЗаПериод,
	|	УправлениеПериодомСценарияПериодическиеКурсы.СреднийКурсЗаПериодМСФО,
	|	УправлениеПериодомСценарияПериодическиеКурсы.КурсНаНачалоПериода,
	|	УправлениеПериодомСценарияПериодическиеКурсы.КурсНаКонецПериода,
	|	УправлениеПериодомСценарияПериодическиеКурсы.СреднийКурсЗаПредыдущийПериод,
	|	УправлениеПериодомСценарияПериодическиеКурсы.КурсНаКонецПредыдущегоПериода,
	|	УправлениеПериодомСценарияПериодическиеКурсы.Ссылка.Сценарий,
	|	УправлениеПериодомСценарияПериодическиеКурсы.Ссылка.ПериодСценария КАК ПериодКурса
	|ПОМЕСТИТЬ ПериодическиеКурсы
	|ИЗ
	|	Документ.УправлениеПериодомСценария.УдалитьПериодическиеКурсы КАК УправлениеПериодомСценарияПериодическиеКурсы
	|ГДЕ
	|	НЕ УправлениеПериодомСценарияПериодическиеКурсы.Ссылка.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодическиеКурсы.Валюта КАК Валюта,
	|	ПериодическиеКурсы.Кратность,
	|	ПериодическиеКурсы.СреднийКурсЗаПериод КАК СреднийКурсЗаПериод,
	|	ПериодическиеКурсы.СреднийКурсЗаПериодМСФО,
	|	ПериодическиеКурсы.КурсНаНачалоПериода,
	|	ПериодическиеКурсы.КурсНаКонецПериода,
	|	ПериодическиеКурсы.СреднийКурсЗаПредыдущийПериод,
	|	ПериодическиеКурсы.КурсНаКонецПредыдущегоПериода,
	|	ПериодическиеКурсы.Сценарий КАК Сценарий,
	|	ПериодическиеКурсы.ПериодКурса КАК ПериодКурса
	|ИЗ
	|	ПериодическиеКурсы КАК ПериодическиеКурсы
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сценарий,
	|	ПериодКурса,
	|	СреднийКурсЗаПериод УБЫВ";
	
	ТаблицаКурсовИсходная=Запрос.Выполнить().Выгрузить();
	ТаблицаКурсовРабочая=ТаблицаКурсовИсходная.СкопироватьКолонки();
	
	ТаблицаКурсовИсходная.Индексы.Добавить("Сценарий,ПериодКурса,Валюта");
	СтруктураПоиска=Новый Структура("Сценарий,ПериодКурса,Валюта");
	
	Для Каждого Строка ИЗ ТаблицаКурсовИсходная Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,Строка);
		
		Если ТаблицаКурсовРабочая.НайтиСтроки(СтруктураПоиска).Количество()=0 Тогда
			
			НоваяСтрока=ТаблицаКурсовРабочая.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
			
		КонецЕсли;
		
	КонецЦикла;

	НаборЗаписей=РегистрыСведений.ПериодическиеКурсы.СоздатьНаборЗаписей();
	
	Для Каждого Строка ИЗ ТаблицаКурсовРабочая Цикл
		
		НоваяСтрока=НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);
		
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры // ПеренестиПериодическиеКурсыВРегистрСведений() 

Процедура ЗаполнитьКонстантуСценарияМСФО() Экспорт
	Константы.СценарийМСФО.Установить(Справочники.Сценарии.Факт);
КонецПроцедуры

Процедура ОбновитьСценарииБезСвязанныхДанных() Экспорт
	
	СценарийФакт = Справочники.Сценарии.Факт.ПолучитьОбъект();
	Попытка
		ОбновлениеИнформационнойБазыСлужебныйБМ.ЗаписатьДанные(СценарийФакт,,Ложь);
	Исключение
		ЗаписьЖурналаРегистрации("ОбновитьСценарий", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;
	
	СценарийПлан = Справочники.Сценарии.План.ПолучитьОбъект();
	Попытка
		ОбновлениеИнформационнойБазыСлужебныйБМ.ЗаписатьДанные(СценарийПлан,,Ложь);
	Исключение
		ЗаписьЖурналаРегистрации("ОбновитьСценарий", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;
	
	СценарийРезерв = Справочники.Сценарии.Резерв.ПолучитьОбъект();
	Попытка
		ОбновлениеИнформационнойБазыСлужебныйБМ.ЗаписатьДанные(СценарийРезерв,,Ложь);
	Исключение
		ЗаписьЖурналаРегистрации("ОбновитьСценарий", УровеньЖурналаРегистрации.Ошибка,,, ОписаниеОшибки());
	КонецПопытки;
			
КонецПроцедуры

Процедура УстановитьОсновныеБланки() Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НастройкаОбработкиОтчетов.ЭлементНастройкиОтчета,
		|	НастройкаОбработкиОтчетов.ЗначениеЭлементаНастройкиОтчета,
		|	НастройкаОбработкиОтчетов.ШаблонДокументаБД
		|ПОМЕСТИТЬ ВТ_НастройкиЭкземпляр
		|ИЗ
		|	РегистрСведений.НастройкаОбработкиОтчетов КАК НастройкаОбработкиОтчетов
		|ГДЕ
		|	НастройкаОбработкиОтчетов.ЭлементНастройкиОтчета = &ЭлементНастройкиОтчетаБланкЭкземпляра
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	НастройкаОбработкиОтчетов.ЭлементНастройкиОтчета,
		|	НастройкаОбработкиОтчетов.ЗначениеЭлементаНастройкиОтчета,
		|	НастройкаОбработкиОтчетов.ШаблонДокументаБД
		|ПОМЕСТИТЬ ВТ_НастройкиСводнаяТаблица
		|ИЗ
		|	РегистрСведений.НастройкаОбработкиОтчетов КАК НастройкаОбработкиОтчетов
		|ГДЕ
		|	НастройкаОбработкиОтчетов.ЭлементНастройкиОтчета = &ЭлементНастройкиОтчетаБланкСводнойТаблицы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыОтчетов.Ссылка КАК ВидОтчета,
		|	ЕСТЬNULL(ВТ_НастройкиЭкземпляр.ЭлементНастройкиОтчета, &ЭлементНастройкиОтчетаБланкЭкземпляра) КАК ЭлементНастройки,
		|	МАКСИМУМ(ЕСТЬNULL(ВТ_НастройкиЭкземпляр.ЗначениеЭлементаНастройкиОтчета, ЗНАЧЕНИЕ(Справочник.БланкиОтчетов.ПустаяСсылка))) КАК Бланк
		|ПОМЕСТИТЬ ВТ_БланкиВидовОтчетов
		|ИЗ
		|	Справочник.ВидыОтчетов КАК ВидыОтчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НастройкиЭкземпляр КАК ВТ_НастройкиЭкземпляр
		|		ПО ВидыОтчетов.Ссылка = ВТ_НастройкиЭкземпляр.ШаблонДокументаБД
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыОтчетов.Ссылка,
		|	ЕСТЬNULL(ВТ_НастройкиЭкземпляр.ЭлементНастройкиОтчета, &ЭлементНастройкиОтчетаБланкЭкземпляра)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВидыОтчетов.Ссылка,
		|	ЕСТЬNULL(ВТ_НастройкиСводнаяТаблица.ЭлементНастройкиОтчета, &ЭлементНастройкиОтчетаБланкСводнойТаблицы),
		|	МАКСИМУМ(ЕСТЬNULL(ВТ_НастройкиСводнаяТаблица.ЗначениеЭлементаНастройкиОтчета, ЗНАЧЕНИЕ(Справочник.БланкиОтчетов.ПустаяСсылка)))
		|ИЗ
		|	Справочник.ВидыОтчетов КАК ВидыОтчетов
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_НастройкиСводнаяТаблица КАК ВТ_НастройкиСводнаяТаблица
		|		ПО ВидыОтчетов.Ссылка = ВТ_НастройкиСводнаяТаблица.ШаблонДокументаБД
		|
		|СГРУППИРОВАТЬ ПО
		|	ВидыОтчетов.Ссылка,
		|	ЕСТЬNULL(ВТ_НастройкиСводнаяТаблица.ЭлементНастройкиОтчета, &ЭлементНастройкиОтчетаБланкСводнойТаблицы)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВТ_БланкиВидовОтчетов.ВидОтчета,
		|	ВТ_БланкиВидовОтчетов.ЭлементНастройки,
		|	ВТ_БланкиВидовОтчетов.Бланк
		|ПОМЕСТИТЬ ВТ_ОтсутствующиеБланки
		|ИЗ
		|	ВТ_БланкиВидовОтчетов КАК ВТ_БланкиВидовОтчетов
		|ГДЕ
		|	ВТ_БланкиВидовОтчетов.Бланк = ЗНАЧЕНИЕ(Справочник.БланкиОтчетов.ПустаяСсылка)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(БланкиОтчетов.Ссылка) КАК ВозможныйБланк,
		|	ВТ_ОтсутствующиеБланки.ЭлементНастройки,
		|	ВТ_ОтсутствующиеБланки.ВидОтчета
		|ИЗ
		|	ВТ_ОтсутствующиеБланки КАК ВТ_ОтсутствующиеБланки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БланкиОтчетов КАК БланкиОтчетов
		|		ПО ВТ_ОтсутствующиеБланки.ВидОтчета = БланкиОтчетов.Владелец
		|ГДЕ
		|	НЕ БланкиОтчетов.РежимБланка = 1
		|	И ВТ_ОтсутствующиеБланки.ЭлементНастройки = &ЭлементНастройкиОтчетаБланкЭкземпляра
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ОтсутствующиеБланки.ЭлементНастройки,
		|	ВТ_ОтсутствующиеБланки.ВидОтчета
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	МАКСИМУМ(БланкиОтчетов.Ссылка),
		|	ВТ_ОтсутствующиеБланки.ЭлементНастройки,
		|	ВТ_ОтсутствующиеБланки.ВидОтчета
		|ИЗ
		|	ВТ_ОтсутствующиеБланки КАК ВТ_ОтсутствующиеБланки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.БланкиОтчетов КАК БланкиОтчетов
		|		ПО ВТ_ОтсутствующиеБланки.ВидОтчета = БланкиОтчетов.Владелец
		|ГДЕ
		|	БланкиОтчетов.РежимБланка = 1
		|	И ВТ_ОтсутствующиеБланки.ЭлементНастройки = &ЭлементНастройкиОтчетаБланкСводнойТаблицы
		|
		|СГРУППИРОВАТЬ ПО
		|	ВТ_ОтсутствующиеБланки.ЭлементНастройки,
		|	ВТ_ОтсутствующиеБланки.ВидОтчета";
	Запрос.УстановитьПараметр("ЭлементНастройкиОтчетаБланкСводнойТаблицы", Перечисления.ЭлементыНастройкиОтчета.БланкСводнойТаблицы);
	Запрос.УстановитьПараметр("ЭлементНастройкиОтчетаБланкЭкземпляра", Перечисления.ЭлементыНастройкиОтчета.БланкДляОтображения);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		УправлениеОтчетамиУХ.УстановитьЭлементПоУмолчаниюДляВидаОтчета(ВыборкаДетальныеЗаписи.ВозможныйБланк, ВыборкаДетальныеЗаписи.ВидОтчета, ВыборкаДетальныеЗаписи.ЭлементНастройки);
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьВалютыОтчетностиРегламентов() Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВерсииРегламентовПодготовкиОтчетности.Ссылка
	|ИЗ
	|	Справочник.ВерсииРегламентовПодготовкиОтчетности КАК ВерсииРегламентовПодготовкиОтчетности
	|ГДЕ
	|	НЕ ВерсииРегламентовПодготовкиОтчетности.Ссылка В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					т.Регламент
	|				ИЗ
	|					РегистрСведений.ВалютыОтчетности КАК т)");
	
	Выборка = Запрос.Выполнить().Выбрать();	
	Пока Выборка.Следующий() Цикл
		РегистрыСведений.ВалютыОтчетности.СформироватьЗаписиВалютыОтчетности(Выборка.Ссылка);
	КонецЦикла; 

КонецПроцедуры

Процедура УстановитьПризнакУправлениеХолдингом() Экспорт
	
	ЭтоУХ = ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом();
	Константы.ЭтоУправлениеХолдингом.Установить(ЭтоУХ);
	
КонецПроцедуры

Процедура УстановитьПризнакИспользованияИнтеграцииСВнешнимиСистемами() Экспорт
	
	ЭтоУХ = ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом();
	Константы.ИспользоватьИнтеграциюСВнешнимиСистемамиУХ.Установить(ЭтоУХ);
	
КонецПроцедуры

Процедура УстановитьПризнакИспользованияУчетаПоСценариям() Экспорт
	
	ЭтоУХ = ИдентификацияПродуктаУХКлиентСервер.ЭтоУправлениеХолдингом();
	Константы.УчетПоСценариям.Установить(ЭтоУХ);
	
КонецПроцедуры

//Усечение типов для справочников отсутствующих в БМ.
//Платформа перености такие элементы со всеми возможными типами
//
Процедура ОбновитьТипыПВХКорпоративные() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	Выборка = ПланыВидовХарактеристик.ВидыСубконтоКорпоративные.Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если Выборка.ТипЗначения.Типы().Количество() > 1 Тогда
			ОбъектПВХ = Выборка.ПолучитьОбъект();
			ОбъектПВХ.ТипЗначения = Новый ОписаниеТипов("СправочникСсылка.ПроизвольныйКлассификаторУХ");
			ОбъектПВХ.Записать();
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

Процедура ОбновитьСчетаУчетаФИ() Экспорт
	Справочники.СчетаУчетаФИ.ОбновитьПредопределенные();
КонецПроцедуры

Процедура ОбновитьВалютыОрганизации() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка,
		|	Организации.ВалютаПредоставленияОтчетности КАК ВалютаПредоставленияОтчетности,
		|	Организации.ФункциональнаяВалюта КАК ФункциональнаяВалюта
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	(Организации.ВалютаПредоставленияОтчетности = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
		|			ИЛИ Организации.ФункциональнаяВалюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Объект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Если ВыборкаДетальныеЗаписи.ВалютаПредоставленияОтчетности = Справочники.Валюты.ПустаяСсылка() Тогда
			Объект.ВалютаПредоставленияОтчетности = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		КонецЕсли;
		Если ВыборкаДетальныеЗаписи.ФункциональнаяВалюта = Справочники.Валюты.ПустаяСсылка() Тогда
			Объект.ФункциональнаяВалюта = ОбщегоНазначенияБПВызовСервераПовтИсп.ПолучитьВалютуРегламентированногоУчета();
		КонецЕсли;
		ОбновлениеИнформационнойБазыСлужебныйБМ.ЗаписатьОбъект(Объект);
	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьМодельУчетаМСФО() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Организации.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.Организации КАК Организации
		|ГДЕ
		|	Организации.МодельУчетаМСФО <> ЗНАЧЕНИЕ(Перечисление.МоделиУчетаМСФО.ТранзакционныйУчетПроводки)";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Объект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Объект.МодельУчетаМСФО = Перечисления.МоделиУчетаМСФО.ТранзакционныйУчетПроводки;
		ОбновлениеИнформационнойБазыСлужебныйБМ.ЗаписатьОбъект(Объект);
	КонецЦикла;

КонецПроцедуры

Процедура ОбновитьОсновнойЯзык(Параметры = Неопределено) Экспорт

	Если Константы.ОсновнойЯзык.Получить() = "0" Тогда
		Константы.ОсновнойЯзык.Установить("");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ПроцедурыФункцииДляИспользованияВОбработчикахОбновления

// Записывает изменения в переданном объекте.
// Для использования в обработчиках обновления.
//
// Параметры:
//   Данные                            - Произвольный - объект, набор записей или менеджер константы, который
//                                                      необходимо записать.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьДанные(Знач Данные, Знач РегистрироватьНаУзлахПлановОбмена = Ложь, 
	Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	Данные.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Если Не РегистрироватьНаУзлахПлановОбмена Тогда
		Данные.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		Данные.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Данные.Записать();
	
КонецПроцедуры

// Записывает изменения в переданном объекте ссылочного типа.
// Для использования в обработчиках обновления.
//
// Параметры:
//   Объект                            - Произвольный - записываемый объект ссылочного типа. Например, СправочникОбъект.
//   РегистрироватьНаУзлахПлановОбмена - Булево       - включает регистрацию на узлах планов обмена при записи объекта.
//   ВключитьБизнесЛогику              - Булево       - включает бизнес-логику при записи объекта.
//
Процедура ЗаписатьОбъект(Знач Объект, Знач РегистрироватьНаУзлахПлановОбмена = Неопределено, 
	Знач ВключитьБизнесЛогику = Ложь) Экспорт
	
	Если РегистрироватьНаУзлахПлановОбмена = Неопределено И Объект.ЭтоНовый() Тогда
		РегистрироватьНаУзлахПлановОбмена = Истина;
	Иначе
		РегистрироватьНаУзлахПлановОбмена = Ложь;
	КонецЕсли;
	
	Объект.ОбменДанными.Загрузка = Не ВключитьБизнесЛогику;
	Если Не РегистрироватьНаУзлахПлановОбмена Тогда
		Объект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		Объект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
	КонецЕсли;
	
	Объект.Записать();
	
КонецПроцедуры

Процедура ПровестиДокумент(Данные, ТекстНачалаОшибки = "", ЗаписатьЕслиНеУдалосьПровести = Истина, ОтказЕслиНеПроведен = Ложь, ОтказЕслиНеЗаписан = Ложь) Экспорт

	Попытка				
		Данные.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрШаблон(Нстр("ru = '%1Не удалось провести документ <%1>: %2'"), 
		                                              	ТекстНачалаОшибки, ОписаниеОшибки()), Данные), ОтказЕслиНеПроведен);
	КонецПопытки;
	
	Если Не ОтказЕслиНеПроведен Тогда
		Возврат;
	ИначеЕсли Не ЗаписатьЕслиНеУдалосьПровести Тогда
		
	КонецЕсли;	
		
	Попытка
		Данные.Проведен = Ложь;
		Данные.Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрШаблон(Нстр("ru = '%1Не удалось записать документ <%1>: %2'"), 
		                                              	ТекстНачалаОшибки, ОписаниеОшибки()), Данные), ОтказЕслиНеЗаписан);
	КонецПопытки;
	
КонецПроцедуры

// Записывает в регистр НомераСпособовЗакупокВЕИС запись с указанными значениями полей.
Процедура УстановитьКодЕис(СпособВход, КодВход, НаименованиеВход)
	МенеджерЗаписи = РегистрыСведений.НомераСпособовЗакупокВЕИС.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СпособВыбораПоставщика	 = СпособВход;
	МенеджерЗаписи.КодЕИС					 = КодВход;
	МенеджерЗаписи.НаименованиеЕИС			 = НаименованиеВход;
	МенеджерЗаписи.Записать();	
КонецПроцедуры		// УстановитьКодЕис()

// Удаляет из шаблона мероприятия ШаблонМероприятияИзм стадии, входящие в массив
// МассивСтадийВход
Процедура ИсключитьСтадииИзШаблона(МассивСтадийВход, ШаблонМероприятияИзм)
	ШаблонОбъект = ШаблонМероприятияИзм.ПолучитьОбъект();
	Выгрузка = ШаблонОбъект.Стадии.Выгрузить();
	ШаблонОбъект.Стадии.Очистить();
	Для Каждого ТекВыгрузка Из Выгрузка Цикл
		Если МассивСтадийВход.Найти(ТекВыгрузка.Стадия) = Неопределено Тогда
			НоваяСтрока = ШаблонОбъект.Стадии.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекВыгрузка);
		Иначе
			// Пропускаем эту стадию.
		КонецЕсли;
	КонецЦикла;	
	ШаблонОбъект.ОбменДанными.Загрузка = Истина;
	ШаблонОбъект.Записать();
КонецПроцедуры		// ИсключитьСтадииИзШаблона()

#КонецОбласти
