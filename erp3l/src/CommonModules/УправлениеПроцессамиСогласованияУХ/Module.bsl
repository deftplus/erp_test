////////////////////////////////////////////////////////////////////////////////
// Модуль обеспечивает программную функциональность подсистем согласования и
// управления универсальными процессами.
////////////////////////////////////////////////////////////////////////////////

Процедура ПроверитьИЗавершитьПроцессы(ОбъектСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СогласованиеДокументов.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЭкземплярПроцесса КАК СогласованиеДокументов
	|ГДЕ
	|	СогласованиеДокументов.КлючевойОбъектПроцесса = &ОбъектСсылка
	|	И СогласованиеДокументов.ПометкаУдаления = ЛОЖЬ
	|	И СогласованиеДокументов.СостояниеВыполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияПроцесса.Вработе)";
	
	Запрос.УстановитьПараметр("ОбъектСсылка", ОбъектСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	ДокументПроцесса = Неопределено;
	ВидОповещенияПроцессОстановлен = Перечисления.ВидыОповещенийПользователейУХ.ПроцессОстановлен;
	Пока Выборка.Следующий() Цикл
		МодульУправленияПроцессамиУХ.ЗавершитьПроцесс(Выборка.Ссылка);
		ТекстСообщения = НСтр("ru = 'Процесс завершен по причине: стаус объекта был изменен вручную'");
		МодульУправленияПроцессамиУХ.ДобавитьЗаписьВлогПроцесса(Выборка.Ссылка, , , ТекстСообщения, ВидОповещенияПроцессОстановлен);
	КонецЦикла;
		
КонецПроцедуры		// ПроверитьИЗавершитьПроцессы()

Функция ПроверитьВозможностьУстановкиСостояния(Заявка, СостояниеЗаявки, ПротоколОшибок = Неопределено, Форма = Неопределено)
	
	Если Не УправлениеПроцессамиСогласованияУХПовтИсп.ТребуетсяПроверкаПередУстановкойСтатуса(Заявка) Тогда
		Возврат Истина;
	КонецЕсли;
	
	МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Заявка);
	Результат = МенеджерОбъекта.ПроверитьВозможностьУстановкиСостояния(Заявка, СостояниеЗаявки, ПротоколОшибок);
	
	Если ПротоколОшибок <> Неопределено Тогда
		
		ТекстОшибкиЗаголовка = НСтр("ru = 'Невозможно перевести объект ""%1"" в состояние ""%2""'");
		
		Если ЗначениеЗаполнено(ТекстОшибкиЗаголовка) тогда
			ОбщегоНазначенияКлиентСерверУХ.СообщитьПользователю(СтрШаблон(ТекстОшибкиЗаголовка, Заявка, СостояниеЗаявки), Заявка,,,, Форма);
		КонецЕсли;
		
		ИмяСобытияЖР = НСтр("ru = 'Протокол ошибок при согласовании документов'", ОбщегоНазначения.КодОсновногоЯзыка());
		Для каждого ТекОшибка из ПротоколОшибок.Ошибки Цикл
			ОбщегоНазначенияКлиентСерверУХ.СообщитьПользователю(ТекОшибка.ТекстОшибки, Заявка, ТекОшибка.Поле,,,Форма);
			ЗаписьЖурналаРегистрации(ИмяСобытияЖР, УровеньЖурналаРегистрации.Ошибка, , Заявка, ТекОшибка.ТекстОшибки);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПеревестиЗаявкуВПроизвольноеСостояние(Знач Заявка, Знач СостояниеЗаявки, Знач Период = Неопределено, 
	Знач Автор = Неопределено, Форма = Неопределено, ДокументПроцесса = Неопределено, ОтправлятьУведомлениеВход = Истина, 
	ПротоколОшибок = Неопределено, ИдентификаторФормыДляВыводаПротокола = Неопределено, ИдентификаторСообщенияВход = "", 
	ДополнительныеПараметры = Неопределено) Экспорт 
	
	Если Заявка = Неопределено Тогда
		ТекстСообщения = НСтр("ru = 'Передано пустое значение ключевого объекта при установке состояния %Состояние%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Состояние%", Строка(СостояниеЗаявки));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	Если Автор = Неопределено Тогда 
		Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	Если Период = Неопределено Тогда
		Период = ОбщегоНазначенияСерверУХ.ПолучитьОтметкуПоОбъекту(Заявка);
	КонецЕсли;
	
	Если Не ПроверитьВозможностьУстановкиСостояния(Заявка, СостояниеЗаявки, ПротоколОшибок, ИдентификаторФормыДляВыводаПротокола) Тогда
		Возврат Ложь;
	КонецЕсли;
	Если НЕ РегистрыСведений.РегистрСостоянийОбъектов.ПроверитьВозможностьУстановкиСостоянияОбъекта(Заявка, СостояниеЗаявки, ДополнительныеПараметры) Тогда
		Возврат Ложь;
	Иначе
		// Проверка пройдена.
	КонецЕсли;
	
	Попытка
		
		ПроверятьСостояниеЭтапа = Истина;
		
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
			ПроверятьСостояниеЭтапа = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ПроверятьСостояниеЭтапа", Истина);
		Иначе
			ПроверятьСостояниеЭтапа = Истина;
		КонецЕсли;
		
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
			ОтменятьПроведение = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ОтменятьПроведение", Истина);
		Иначе
			ОтменятьПроведение = Истина;
		КонецЕсли;
		
		ПериодСостояния = Период;
		
		НаборЗаписей = РегистрыСведений.РегистрСостоянийОбъектов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(Заявка); 
		НаборЗаписей.Отбор.Период.Установить(ПериодСостояния); 
		НаборЗаписей.ДополнительныеСвойства.Вставить("ПроверятьСостояниеЭтапа", ПроверятьСостояниеЭтапа);
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтменятьПроведение", ОтменятьПроведение); 
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() > 0 тогда
		
			ТЗСрезПоследних = РегистрыСведений.РегистрСостоянийОбъектов.СрезПоследних(, Новый Структура("Объект", Заявка));
			
			Если ТЗСрезПоследних.Количество() > 0 тогда
				ПериодСостояния = ТЗСрезПоследних[0].Период + 1;
			Иначе
				ПериодСостояния = ПериодСостояния + 1;
			КонецЕсли;
			
			НаборЗаписей.Очистить();
			НаборЗаписей.Отбор.Объект.Установить(Заявка);
			НаборЗаписей.Отбор.Период.Установить(ПериодСостояния);
			НаборЗаписей.ДополнительныеСвойства.Вставить("ПроверятьСостояниеЭтапа", ПроверятьСостояниеЭтапа);
			НаборЗаписей.ДополнительныеСвойства.Вставить("ОтменятьПроведение", ОтменятьПроведение);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() > 0 тогда
				
				ТекстСообщения = НСтр("ru = 'Возникли ошибки при переводе объекта %ОбъектСогласования% в состояние %Состояние%: %ОписаниеОшибки%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбъектСогласования%", Строка(Заявка));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Состояние%", Строка(СостояниеЗаявки));
				
				ОписаниеОшибкиШаблон = НСтр("ru = 'Невозможно установить состояние ""%1"" на период %2 т. к. уже установлено состояние ""%3""'");
				Если ЗначениеЗаполнено(ОписаниеОшибкиШаблон) тогда
					ОписаниеОшибкиШаблон = СтрШаблон(ОписаниеОшибкиШаблон, Строка(СостояниеЗаявки), Формат(ПериодСостояния, "ДФ = 'дд.ММ.ггг ЧЧ:мм:сс'"), Строка(НаборЗаписей[0].СостояниеОбъекта));
				КонецЕсли;
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибкиШаблон);
				
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				Возврат Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
		НоваяЗапись = НаборЗаписей.Добавить(); 
		НоваяЗапись.Объект					 = Заявка; 
		НоваяЗапись.Период					 = ПериодСостояния; 
		НоваяЗапись.СостояниеОбъекта		 = СостояниеЗаявки; 
		НоваяЗапись.Автор					 = Автор; 
		НоваяЗапись.ИдентификаторСообщения	 = ИдентификаторСообщенияВход; 
		НаборЗаписей.ДополнительныеСвойства.Вставить("ВыполнятьОбработкуИзмененияСостояния", ОтправлятьУведомлениеВход);
		НаборЗаписей.ДополнительныеСвойства.Вставить("ОтменятьПроведение", ОтменятьПроведение);
		
		НаборЗаписей.Записать();
		
		Если ТипЗнч(Заявка)=Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
			
			УправлениеОтчетамиУХ.ИзменитьАктивностьСуществующимЗаписям(Заявка, СостояниеЗаявки=Перечисления.СостоянияОтчетов.Утвержден);
			
		КонецЕсли;
		
	Исключение
		ТекстСообщения = НСтр("ru = 'Возникли ошибки при переводе объекта %ОбъектСогласования% в состояние %Состояние%: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбъектСогласования%", Строка(Заявка));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Состояние%", Строка(СостояниеЗаявки));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		Возврат Ложь;
	КонецПопытки;
	
	//Если статус меняется непосредственно, необходимо проверить были ли запущенные процессы согласования и остановить их
	Если  ДокументПроцесса = Неопределено Тогда
		ПроверитьИЗавершитьПроцессы(Заявка);
	КонецЕсли;	
	// Обновление картинки статуса.
	Если Форма <> Неопределено Тогда
		УправлениеПроцессамиСогласованияУХКлиентСервер.УстановитьКартинкСтатусаПроцесса(Заявка, Форма);
	КонецЕсли;		
	Возврат Истина;
КонецФункции		// ПеревестиЗаявкуВПроизвольноеСостояние()

Функция ПеревестиЗаявкуВСостояниеНаУтверждении(ОбъектСсылка, ДокументПроцесса = Неопределено, 
	ИдентификаторФормыДляВыводаПротокола = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	// Инициализация.
	ДополнительныеПараметры = МодульУправленияПроцессамиУХ.ИнициализироватьДополнительныеПараметрыСогласования(ДополнительныеПараметры);
	ИдентификаторСообщенияРабочий = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ИдентификаторСообщения", "");
	
	ИмяМетаданных = ОбъектСсылка.Метаданные().Имя;
	ТекИБ = Справочники.ТипыБазДанных.ТекущаяИБ;
	
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.РеестрыСогласуемыхОбъектов") тогда
		ТипОбъектаСогласования = ОбъектСсылка.ТипОбъектаСогласования;
	Иначе
		
		Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ОбъектСсылка)) Тогда
			ТипОбъектаСогласования = Справочники.СправочникиБД.НайтиПоНаименованию(ИмяМетаданных, , , ТекИБ);
		Иначе
			ТипОбъектаСогласования = Справочники.ДокументыБД.НайтиПоНаименованию(ИмяМетаданных, , , ТекИБ);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТипОбъектаСогласования) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	СтатусНаУтверждении = ТипОбъектаСогласования.ЗначениеРеквизитаСостоянияНаУтверждении;
	РезультатПеревода = ПеревестиЗаявкуВПроизвольноеСостояние(ОбъектСсылка, СтатусНаУтверждении, , , , ДокументПроцесса, , , , ИдентификаторСообщенияРабочий);
	Если Не РезультатПеревода Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.РеестрыСогласуемыхОбъектов") Тогда
		УстановитьСтатусыПодчиненныхОбъектов(ОбъектСсылка, "НаУтверждении");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции		// ПеревестиЗаявкуВСостояниеНаУтверждении()

Функция ПеревестиЗаявкуВСостояниеОтклонена(ОбъектСсылка, ПользовательВход = Неопределено, ТолькоЗаполненные = Ложь, 
	ДокументПроцесса = Неопределено, ИдентификаторФормыДляВыводаПротокола = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	// Инициализация.	
	ДополнительныеПараметры = МодульУправленияПроцессамиУХ.ИнициализироватьДополнительныеПараметрыСогласования(ДополнительныеПараметры);
	ИдентификаторСообщенияРабочий = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ИдентификаторСообщения", "");
	ИмяМетаданных = ОбъектСсылка.Метаданные().Имя;
	ТекИБ = Справочники.ТипыБазДанных.ТекущаяИБ;
	// Поиск типа объекта.
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ОбъектСсылка)) Тогда
		ТипОбъектаСогласования = Справочники.СправочникиБД.НайтиПоНаименованию(ИмяМетаданных, , , ТекИБ);
	Иначе
		ТипОбъектаСогласования = Справочники.ДокументыБД.НайтиПоНаименованию(ИмяМетаданных, , , ТекИБ);
	КонецЕсли;	
	
	Если Не ЗначениеЗаполнено(ТипОбъектаСогласования) Тогда
		Возврат Ложь;
	КонецЕсли;	
	// Непосредственное изменение состояния.
	СтатусОтклонен = ТипОбъектаСогласования.ЗначениеРеквизитаСостоянияОтклонен;
	Если НЕ ТолькоЗаполненные ИЛИ ЗначениеЗаполнено(СтатусОтклонен) Тогда
		РезультатПеревода = ПеревестиЗаявкуВПроизвольноеСостояние(ОбъектСсылка, СтатусОтклонен, , ПользовательВход, , ДокументПроцесса, , , , ИдентификаторСообщенияРабочий, ДополнительныеПараметры);		
		Если Не РезультатПеревода Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		// Новый статус пустой, и его установка не требуется.
	КонецЕсли;
	// Обработка случай реестра согласования.
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.РеестрыСогласуемыхОбъектов") Тогда
		УстановитьСтатусыПодчиненныхОбъектов(ОбъектСсылка, "Отклонен");
	КонецЕсли;
	Возврат Истина;
КонецФункции		// ПеревестиЗаявкуВСостояниеОтклонена()

Функция ПеревестиЗаявкуВСостояниеУтверждена(ОбъектСсылка, ТолькоЗаполненные = Ложь, ДокументПроцесса = Неопределено, ИдентификаторФормыДляВыводаПротокола = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	// Инициализация.
	ДополнительныеПараметры = МодульУправленияПроцессамиУХ.ИнициализироватьДополнительныеПараметрыСогласования(ДополнительныеПараметры);
	ИдентификаторСообщенияРабочий = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ИдентификаторСообщения", "");
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ОбъектСсылка)) Тогда
		ТипОбъектаСогласования = Справочники.СправочникиБД.НайтиПоНаименованию(ОбъектСсылка.Метаданные().Имя,,,Справочники.ТипыБазДанных.ТекущаяИБ);
	Иначе
		ТипОбъектаСогласования = Справочники.ДокументыБД.НайтиПоНаименованию(ОбъектСсылка.Метаданные().Имя,,,Справочники.ТипыБазДанных.ТекущаяИБ);
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(ТипОбъектаСогласования) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	СтатусУтвержден = ТипОбъектаСогласования.ЗначениеРеквизитаСостоянияУтвержден;
	Если НЕ ТолькоЗаполненные ИЛИ ЗначениеЗаполнено(СтатусУтвержден) Тогда
		РезультатПеревода = ПеревестиЗаявкуВПроизвольноеСостояние(ОбъектСсылка, СтатусУтвержден, , , , ДокументПроцесса, , , ИдентификаторФормыДляВыводаПротокола, ИдентификаторСообщенияРабочий);
		Если Не РезультатПеревода Тогда
			Возврат Ложь;
		КонецЕсли;
	Иначе
		// Новый статус пустой, и его установка не требуется.
	КонецЕсли;
	
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.РеестрыСогласуемыхОбъектов") Тогда
		УстановитьСтатусыПодчиненныхОбъектов(ОбъектСсылка, "Утвержден");
	КонецЕсли;
	
	Возврат Истина;

КонецФункции		// ПеревестиЗаявкуВСостояниеУтверждена()

Функция ПеревестиЗаявкуВСостояниеЧерновик(ОбъектСсылка, ДокументПроцесса = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	// Инициализация.
	ДополнительныеПараметры = МодульУправленияПроцессамиУХ.ИнициализироватьДополнительныеПараметрыСогласования(ДополнительныеПараметры);
	ИдентификаторСообщенияРабочий = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ИдентификаторСообщения", "");
	ВыполнятьОбработкуИзмененияСостояния = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДополнительныеПараметры, "ВыполнятьОбработкуИзмененияСостояния", Истина);
	// Поиск объекта согласования.
	ТипОбъектаСогласования = Неопределено;
	ИмяМетаданных = ОбъектСсылка.Метаданные().Имя;
	ТекИБ = Справочники.ТипыБазДанных.ТекущаяИБ;
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ОбъектСсылка)) Тогда
		ТипОбъектаСогласования = ОбщегоНазначенияПовтИспУХ.ПолучитьСправочникБдТекущейБазы(ОбъектСсылка.Метаданные().Имя);
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(ОбъектСсылка)) Тогда
		ТипОбъектаСогласования = ОбщегоНазначенияПовтИспУХ.ПолучитьДокументБдТекущейБазы(ОбъектСсылка.Метаданные().Имя);
	Иначе
		ТипОбъектаСогласования = Неопределено;
	КонецЕсли;	
	Если Не ЗначениеЗаполнено(ТипОбъектаСогласования) Тогда
		Возврат Ложь;
	КонецЕсли;	
	// Непосредственный перевод в черновик.	
	СтатусЧерновик = ТипОбъектаСогласования.ЗначениеРеквизитаСостоянияЧерновик;
	РезультатПеревода = ПеревестиЗаявкуВПроизвольноеСостояние(ОбъектСсылка, СтатусЧерновик, , , , ДокументПроцесса, ВыполнятьОбработкуИзмененияСостояния, , , ИдентификаторСообщенияРабочий, ДополнительныеПараметры);
	Если Не РезультатПеревода Тогда
		Возврат Ложь;
	КонецЕсли;
	// Установка статусов подчинённым объектам.
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.РеестрыСогласуемыхОбъектов") Тогда
		УстановитьСтатусыПодчиненныхОбъектов(ОбъектСсылка, "Черновик");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции		// ПеревестиЗаявкуВСостояниеЧерновик()

Функция ВернутьТекущееСостояние(Объект) Экспорт
	
	Если ЗначениеЗаполнено(Объект) Тогда
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ВыполнениеПроцессовСрезПоследних.Период КАК Период,
		|	ВыполнениеПроцессовСрезПоследних.ДокументПроцесса КАК ДокументПроцесса,
		|	ВыполнениеПроцессовСрезПоследних.ДокументПроцесса.СостояниеВыполнения КАК СостояниеОбъекта
		|ИЗ
		|	РегистрСведений.ВыполнениеПроцессов.СрезПоследних(
		|			,
		|			ДокументПроцесса.КлючевойОбъектПроцесса = &Объект
		|				И ВЫБОР
		|					КОГДА ДокументПроцесса.СостояниеВыполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияПроцесса.Остановлен)
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ НЕ ДокументПроцесса.ПометкаУдаления
		|				КОНЕЦ
		|				И ДокументПроцесса.ПроцессРодитель = ЗНАЧЕНИЕ(Документ.ЭкземплярПроцесса.ПустаяСсылка)) КАК ВыполнениеПроцессовСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
		Запрос.УстановитьПараметр("Объект", Объект);
		Выборка = Запрос.Выполнить().Выбрать();
		
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.СостояниеОбъекта;
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции		// ВернутьТекущееСостояние()

// Возвращает статус объекта ОбъектВход, не привязанный к согласованию.
// Когда не удалось получить статус, будет возвращено ЗначениеПоУмолчаниюВход.
Функция ВернутьСтатусОбъекта(ОбъектВход, ЗначениеПоУмолчаниюВход = Неопределено) Экспорт
	РезультатФункции = Неопределено;
	Если ЗначениеЗаполнено(ОбъектВход) Тогда
		УстановитьПривилегированныйРежим(Истина);
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистрСостоянийОбъектовСрезПоследних.Объект,
		|	РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта
		|ИЗ
		|	РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(, Объект = &Объект) КАК РегистрСостоянийОбъектовСрезПоследних
		|
		|УПОРЯДОЧИТЬ ПО
		|	РегистрСостоянийОбъектовСрезПоследних.Период УБЫВ";
		Запрос.УстановитьПараметр("Объект", ОбъектВход);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			РезультатФункции = ВыборкаДетальныеЗаписи.СостояниеОбъекта;
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
	Иначе
		РезультатФункции = Неопределено;		// Передан пустой объект.
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(РезультатФункции) Тогда
		РезультатФункции = ЗначениеПоУмолчаниюВход;
	Иначе
		// Значение установлено. Не изменяем его.
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ВернутьСтатусОбъекта()

// Считвает таблицу СостоянияВыполненияПроцесса из базы.
Процедура ЗаполнитьТаблицуСостоянияВыполненияПроцесса(СостоянияВыполненияПроцесса, ПериодВход, СценарийВход, ДатаВход) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СрезКонец.ЭтапПроцесса КАК Этап,
	|	Организации.Ссылка КАК Организация,
	|	СрезКонец.ЭтапПроцесса.ДлительностьПлановая КАК ПлановаяДлительностьЭтапа,
	|	СрезНачало.СостояниеЭтапа КАК СостояниеЭтапа,
	|	СрезНачало.ДатаНачала КАК ДатаНачала,
	|	СрезНачало.ДатаОкончания КАК ДатаОкончания,
	|	СрезКонец.СостояниеЭтапа КАК СостояниеЭтапаРасчетное,
	|	СрезКонец.ДатаНачала КАК ДатаНачалаРасчетная,
	|	СрезКонец.ДатаОкончания КАК ДатаОкончанияРасчетная,
	|	ВЫБОР
	|		КОГДА СрезНачало.СостояниеЭтапа = СрезКонец.СостояниеЭтапа
	|				И СрезНачало.ДатаНачала = СрезКонец.ДатаНачала
	|				И СрезНачало.ДатаОкончания = СрезКонец.ДатаОкончания
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК МодификацияСтроки,
	|	СрезКонец.ОтветственныйЗаЭтап КАК ОтветственныйЗаЭтап,
	|	СрезПервых.ДатаОкончания КАК ДатаОкончанияПлановая
	|ИЗ
	|	РегистрСведений.СостоянияВыполненияПроцессов.СрезПоследних(
	|			&ДатаДокумента,
	|			ПериодСценария = &ПериодСценария
	|				И Сценарий = &Сценарий
	|				И ЭтапПроцесса.Владелец = &Шаблон) КАК СрезКонец
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияВыполненияПроцессов.СрезПоследних(
	|				&ДатаДоДокумента,
	|				ПериодСценария = &ПериодСценария
	|					И Сценарий = &Сценарий
	|					И ЭтапПроцесса.Владелец = &Шаблон) КАК СрезНачало
	|		ПО (СрезНачало.Организация = СрезКонец.Организация)
	|			И (СрезНачало.ЭтапПроцесса = СрезКонец.ЭтапПроцесса)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СостоянияВыполненияПроцессов.СрезПервых(
	|				,
	|				ПериодСценария = &ПериодСценария
	|					И Сценарий = &Сценарий
	|					И ЭтапПроцесса.Владелец = &Шаблон) КАК СрезПервых
	|		ПО (СрезНачало.Организация = СрезПервых.Организация)
	|			И (СрезНачало.ЭтапПроцесса = СрезПервых.ЭтапПроцесса)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Организации КАК Организации
	|		ПО СрезКонец.Организация = Организации.Ссылка
	|ГДЕ
	|	НЕ СрезКонец.ЭтапПроцесса.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭтапыУниверсальныхПроцессов.Ссылка,
	|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка),
	|	ЭтапыУниверсальныхПроцессов.ДлительностьПлановая,
	|	ЕСТЬNULL(ВыполнениеПроцессовНачало.СостояниеЭтапа, ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.НеАктивен)),
	|	ЕСТЬNULL(ВыполнениеПроцессовНачало.ДатаНачала, &ПустаяДата),
	|	ЕСТЬNULL(ВыполнениеПроцессовНачало.ДатаОкончания, &ПустаяДата),
	|	ЕСТЬNULL(ВыполнениеПроцессовКонец.СостояниеЭтапа, ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.НеАктивен)),
	|	ЕСТЬNULL(ВыполнениеПроцессовКонец.ДатаНачала, &ПустаяДата),
	|	ЕСТЬNULL(ВыполнениеПроцессовКонец.ДатаОкончания, &ПустаяДата),
	|	ВЫБОР
	|		КОГДА ВыполнениеПроцессовНачало.СостояниеЭтапа = ВыполнениеПроцессовКонец.СостояниеЭтапа
	|				И ВыполнениеПроцессовНачало.ДатаНачала = ВыполнениеПроцессовКонец.ДатаНачала
	|				И ВыполнениеПроцессовНачало.ДатаОкончания = ВыполнениеПроцессовКонец.ДатаОкончания
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ,
	|	ЕСТЬNULL(ВыполнениеПроцессовКонец.ОтветственныйЗаЭтап, ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)),
	|	ЕСТЬNULL(ВыполнениеПроцессовПервые.ДатаОкончания, &ПустаяДата)
	|ИЗ
	|	Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапыУниверсальныхПроцессов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыполнениеПроцессов.СрезПоследних(
	|				&ДатаДокумента,
	|				ДокументПроцесса = &ЭкземплярПроцесса
	|					И ЭтапПроцесса.Владелец = &Шаблон) КАК ВыполнениеПроцессовКонец
	|		ПО (ВыполнениеПроцессовКонец.ЭтапПроцесса = ЭтапыУниверсальныхПроцессов.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыполнениеПроцессов.СрезПоследних(
	|				&ДатаДоДокумента,
	|				ДокументПроцесса = &ЭкземплярПроцесса
	|					И ЭтапПроцесса.Владелец = &Шаблон) КАК ВыполнениеПроцессовНачало
	|		ПО (ВыполнениеПроцессовНачало.ЭтапПроцесса = ЭтапыУниверсальныхПроцессов.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВыполнениеПроцессов.СрезПервых(
	|				,
	|				ДокументПроцесса = &ЭкземплярПроцесса
	|					И ЭтапПроцесса.Владелец = &Шаблон) КАК ВыполнениеПроцессовПервые
	|		ПО (ВыполнениеПроцессовПервые.ЭтапПроцесса = ЭтапыУниверсальныхПроцессов.Ссылка)
	|ГДЕ
	|	ЭтапыУниверсальныхПроцессов.ТипЭтапа <> ЗНАЧЕНИЕ(Перечисление.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности)
	|	И ЭтапыУниверсальныхПроцессов.Владелец = &Шаблон
	|	И НЕ ЭтапыУниверсальныхПроцессов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Этап,
	|	Организация
	|АВТОУПОРЯДОЧИВАНИЕ";
	Регламент = УправлениеОтчетамиУХ.ПолучитьВерсиюРегламентаПоПериодуИСценарию(СценарийВход, ПериодВход);
	Шаблон = Справочники.ШаблоныУниверсальныхПроцессов.ПустаяСсылка();
	МодульУправленияПроцессамиУХ.ОпределитьСвязанныйШаблон(Регламент, Шаблон);
	ЭкземплярПроцесса = ПолучитьЭкземплярПроцессаСценария(Регламент, ПериодВход, СценарийВход);
	Запрос.УстановитьПараметр("ДатаДоДокумента",	 ДатаВход - 1);
	Запрос.УстановитьПараметр("ДатаДокумента",		 ДатаВход);
	Запрос.УстановитьПараметр("ПериодСценария",		 ПериодВход);
	Запрос.УстановитьПараметр("ПустаяДата",			 Дата(1, 1, 1));
	Запрос.УстановитьПараметр("Сценарий",   	     СценарийВход);
	Запрос.УстановитьПараметр("Шаблон",				 Шаблон);
	Запрос.УстановитьПараметр("ЭкземплярПроцесса",	 ЭкземплярПроцесса);
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	Если СостоянияВыполненияПроцесса = Неопределено Тогда
		СостоянияВыполненияПроцесса = Выгрузка;
	Иначе	
		Если ТипЗнч(СостоянияВыполненияПроцесса) = Тип("ТаблицаЗначений") Тогда
			СостоянияВыполненияПроцесса = Выгрузка;
		Иначе	
			СостоянияВыполненияПроцесса.Загрузить(Выгрузка);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры		// ЗаполнитьТаблицуСостоянияВыполненияПроцесса()

Процедура ИнициализироватьПроцесс(Знач ПериодСценария, Знач Сценарий, Знач Дата, СостоянияВыполненияПроцесса=Неопределено, мПоследователиСтрок=Неопределено, мПредшественникиСтрок=Неопределено) Экспорт
	
	ЗаполнитьТаблицуСостоянияВыполненияПроцесса(СостоянияВыполненияПроцесса, ПериодСценария, Сценарий, Дата);	
	// определим предшесвенников и последователей для каждой строки
	КэшСоответствийЭтаповПоследователей = Новый Соответствие;
	СрезыПериметров = УправлениеРабочимиПроцессамиУХ.ПолучитьПериметры(Сценарий, ПериодСценария);
	
	Вн_ПоследователиСтрок   = Новый Соответствие;
	Вн_ПредшественникиСтрок = Новый Соответствие;
	Вн_ПоследователиСтрок.Вставить(Неопределено);
	Вн_ПредшественникиСтрок.Вставить(Неопределено);
	
	Для каждого Запись Из СостоянияВыполненияПроцесса Цикл
		
		ПоследователиСтроки   = Новый Массив;
		ПредшественникиСтроки = Новый Массив;
		ЗаполнитьПоказателиПредшественники(ПредшественникиСтроки, Запись, Запись.Этап.ЭтапыПредшественники, СрезыПериметров, СостоянияВыполненияПроцесса);
		МассивПоследователей = ЭтапыПоследователи(Запись.Этап, КэшСоответствийЭтаповПоследователей);
		Если МассивПоследователей <> Неопределено Тогда
			ЗаполнитьПоказателиПоследователи(ПоследователиСтроки
			, Запись
			, МассивПоследователей
			, СрезыПериметров
			, КэшСоответствийЭтаповПоследователей
			, СостоянияВыполненияПроцесса);
		Иначе
			ЗаполнитьПоказателиПоследователи(ПоследователиСтроки
			, Запись
			, Новый Массив
			, СрезыПериметров
			, КэшСоответствийЭтаповПоследователей
			, СостоянияВыполненияПроцесса);
		КонецЕсли;

		Если ТипЗнч(СостоянияВыполненияПроцесса) = Тип("ТаблицаЗначений") Тогда
			НовыйИдентификатор = СостоянияВыполненияПроцесса.Индекс(Запись);
		Иначе	 
			НовыйИдентификатор = Запись.ПолучитьИдентификатор();
		КонецЕсли;
		Вн_ПредшественникиСтрок.Вставить(НовыйИдентификатор, Новый ФиксированныйМассив(ПредшественникиСтроки));
		Вн_ПоследователиСтрок.Вставить(НовыйИдентификатор, Новый ФиксированныйМассив(ПоследователиСтроки));
		
	КонецЦикла;
	
	мПредшественникиСтрок = Новый ФиксированноеСоответствие(Вн_ПредшественникиСтрок);
	мПоследователиСтрок   = Новый ФиксированноеСоответствие(Вн_ПоследователиСтрок);
	
КонецПроцедуры		// ИнициализироватьПроцесс()

Процедура ЗаполнитьПоказателиПоследователи(ПоследователиСтроки, ТекСтрока, ЭтапыПоследователи, СрезыПериметров, КэшСоответствийЭтаповПоследователей, СостоянияВыполненияПроцесса) Экспорт
	
	Для каждого ЭтапПоследователь Из ЭтапыПоследователи Цикл
		
		НайденаОрганизация = Ложь; // Флаг, который указывает на то, что найдена организация на данном этапе и дальнейший поиск не нужен.
		
		СтруктураПоиска = Новый Структура("Этап", ЭтапПоследователь);
		НайденныеСтрокиВыполнениеПроцесса = СостоянияВыполненияПроцесса.НайтиСтроки(СтруктураПоиска);
		Для каждого ЗаписьПоследователь Из НайденныеСтрокиВыполнениеПроцесса Цикл

			ЭтоЭтапПодготовкиОтчетности = (ЭтапПоследователь.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности);
			Если (НЕ ЭтоЭтапПодготовкиОтчетности) И (НЕ ЗначениеЗаполнено(ЗаписьПоследователь.Организация)) Тогда
				// Добавление последователей не этапов подготовки отчетности.
				Если ТипЗнч(СостоянияВыполненияПроцесса) = Тип("ТаблицаЗначений") Тогда
					НовыйИндексСтроки = СостоянияВыполненияПроцесса.Индекс(ЗаписьПоследователь);
				Иначе	
					НовыйИндексСтроки = ЗаписьПоследователь.ПолучитьИдентификатор();
				КонецЕсли;
				ПоследователиСтроки.Добавить(НовыйИндексСтроки);
				НайденаОрганизация = Истина;
			Иначе
				// Добавление обычных организаций.
				ТребуетсяОтборПоОрганизации = ЗначениеЗаполнено(ТекСтрока.Организация);
				Если (ЗаписьПоследователь.Организация = ТекСтрока.Организация) ИЛИ (Не ТребуетсяОтборПоОрганизации) Тогда
					Если ТипЗнч(СостоянияВыполненияПроцесса) = Тип("ТаблицаЗначений")  Тогда
						НовыйИндексСтроки = СостоянияВыполненияПроцесса.Индекс(ЗаписьПоследователь);
					Иначе	
						НовыйИндексСтроки = ЗаписьПоследователь.ПолучитьИдентификатор();
					КонецЕсли;
					ПоследователиСтроки.Добавить(НовыйИндексСтроки);
					НайденаОрганизация = Истина;
				КонецЕсли;
				// Добавление консолидирующих организаций.
				СрезПериметра = СрезыПериметров[ЗаписьПоследователь.Организация];
				Если Не СрезПериметра = Неопределено и СрезПериметра[ТекСтрока.Организация] = Истина Тогда
					Если ТипЗнч(СостоянияВыполненияПроцесса) = Тип("ТаблицаЗначений") Тогда
						НовыйИндексСтроки = СостоянияВыполненияПроцесса.Индекс(ЗаписьПоследователь);
					Иначе	
						НовыйИндексСтроки = ЗаписьПоследователь.ПолучитьИдентификатор();
					КонецЕсли;
					ПоследователиСтроки.Добавить(НовыйИндексСтроки);
					НайденаОрганизация = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ НайденаОрганизация Тогда 
			ЗаполнитьПоказателиПоследователи(ПоследователиСтроки
											 , ТекСтрока
											 , ЭтапыПоследователи(ЭтапПоследователь, КэшСоответствийЭтаповПоследователей)
											 , СрезыПериметров
											 , КэшСоответствийЭтаповПоследователей
											 , СостоянияВыполненияПроцесса);
		КонецЕсли;
		
	КонецЦикла; 

КонецПроцедуры		// ЗаполнитьПоказателиПоследователи()

Функция ЭтапыПоследователи(ЭтапПроцесса, КэшСоответствий) Экспорт
	
	Если ТипЗнч(ЭтапПроцесса) = Тип("СправочникСсылка.ЭтапыУниверсальныхПроцессов") Тогда
		
		Если ЭтапПроцесса.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности Тогда
			ЭтапыПоследователи = КэшСоответствий[ЭтапПроцесса];
			Если ЭтапыПоследователи = Неопределено Тогда
				
				КэшСоответствий.Вставить(ЭтапПроцесса, ЭтапыПоследователи);
				ДеревоПереходов = ЭтапПроцесса.УсловияСогласования.Получить();
				Если ДеревоПереходов <> Неопределено Тогда
					ЭтапыПоследователи = Новый Массив;
					Для Каждого ЭтапПоследователь Из ДеревоПереходов.Строки Цикл
						ЭтапыПоследователи.Добавить(ЭтапПоследователь.Значение);
					КонецЦикла;
				Иначе
					// Пустое дерево переходов.
				КонецЕсли;
				КэшСоответствий.Вставить(ЭтапПроцесса, ЭтапыПоследователи);
				
			КонецЕсли;
		Иначе	
			ЭтапыПоследователи = КэшСоответствий[ЭтапПроцесса];
			Если ЭтапыПоследователи = Неопределено Тогда
				ЭтапыПоследователи = Новый Массив;
				МодульРегламентныхЗаданийУХ.ДополнитьМассивПоследователей(ЭтапыПоследователи, ЭтапПроцесса);
				КэшСоответствий.Вставить(ЭтапПроцесса, ЭтапыПоследователи);
			Иначе
				// Используем данные из кэша.
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
	
	Возврат ЭтапыПоследователи;
	
КонецФункции		// ЭтапыПоследователи()

Процедура ЗаполнитьПоказателиПредшественники(ПредшественникиСтроки, ТекСтрока, СрезЭтаповПредшественников, СрезыПериметров, СостоянияВыполненияПроцесса) Экспорт
	
	ИмяРеквизитаЭтапа =?(ТипЗнч(СрезЭтаповПредшественников)=Тип("СправочникТабличнаяЧасть.ЭтапыУниверсальныхПроцессов.ЭтапыПредшественники"),"Этап","ЭтапПроцесса");
	
	Для каждого СтрокаЭтапаПредшественника Из СрезЭтаповПредшественников Цикл
		
		НайденаОрганизация = Ложь; // Флаг, который указывает на то, что найдена организация на данном этапе и дальнейший поиск не нужен.
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Этап", СтрокаЭтапаПредшественника[ИмяРеквизитаЭтапа]);
		НайденныеСтрокиЭтапа = СостоянияВыполненияПроцесса.НайтиСтроки(СтруктураПоиска);
		Для Каждого ЗаписьПредшественник Из НайденныеСтрокиЭтапа Цикл
			
			Если ЗаписьПредшественник.Организация = ТекСтрока.Организация Тогда
				Если ТипЗнч(СостоянияВыполненияПроцесса) = Тип("ТаблицаЗначений") Тогда
					НовыйИндексСтроки = СостоянияВыполненияПроцесса.Индекс(ЗаписьПредшественник);
				Иначе	
					НовыйИндексСтроки = ЗаписьПредшественник.ПолучитьИдентификатор();
				КонецЕсли;
				ПредшественникиСтроки.Добавить(НовыйИндексСтроки);
				НайденаОрганизация = Истина;
				
			Иначе		
				СрезПериметра = СрезыПериметров[ТекСтрока.Организация];
				Если Не СрезПериметра = Неопределено и СрезПериметра[ЗаписьПредшественник.Организация] = Истина Тогда
					Если ТипЗнч(СостоянияВыполненияПроцесса) = Тип("ТаблицаЗначений") Тогда
						НовыйИндексСтроки = СостоянияВыполненияПроцесса.Индекс(ЗаписьПредшественник);
					Иначе	
						НовыйИндексСтроки = ЗаписьПредшественник.ПолучитьИдентификатор();
					КонецЕсли;
					ПредшественникиСтроки.Добавить(НовыйИндексСтроки);
					НайденаОрганизация = Истина;
				КонецЕсли;	
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ НайденаОрганизация Тогда
			ЗаполнитьПоказателиПредшественники(ПредшественникиСтроки, ТекСтрока, СтрокаЭтапаПредшественника[ИмяРеквизитаЭтапа].ЭтапыПредшественники, СрезыПериметров, СостоянияВыполненияПроцесса);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры		// ЗаполнитьПоказателиПредшественники()

Функция ОбработатьЭкземплярОтчета(РабочийОбъект, Реквизиты, ОбновлениеДокумента = Ложь, ПробныйПроцесс = Ложь, Утвердить = Ложь, СогласовыватьВход = Ложь, СтруктураНастроек = Неопределено) Экспорт
	
	Если (РабочийОбъект.Состояние = Неопределено) Тогда
		РабочийОбъект.Состояние = ВернутьТекущееСостояние(РабочийОбъект.Ссылка);
	КонецЕсли;
	
	// Получим значения параметров ЗаполнятьДокументы и УстанавливатьСтатусОтчетов.
	ЗаполнятьДокументы = Истина;
	Если СтруктураНастроек <> Неопределено Тогда
		ЗаполнятьДокументы = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроек, "ЗаполнятьДокументы", Истина);
	Иначе
		ЗаполнятьДокументы = Истина;
	КонецЕсли;
	УстанавливатьСтатусОтчетов = Истина;
	Если СтруктураНастроек <> Неопределено Тогда
		УстанавливатьСтатусОтчетов = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураНастроек, "УстанавливатьСтатусОтчетов", Истина);
	Иначе
		УстанавливатьСтатусОтчетов = Истина;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(РабочийОбъект, Реквизиты, "ПравилоОбработки, ПравилоПроверки, СпособФормированияОтчета");
	РабочийОбъект.БланкИмпорта             = Реквизиты.БланкДляИмпорта;
	РабочийОбъект.ИспользуемаяИБ           = Реквизиты.ВнешняяИнформационнаяБаза;
	
	Если (НЕ ЗначениеЗаполнено(РабочийОбъект.ШаблонОтчета)) И (ЗначениеЗаполнено(Реквизиты.БланкДляОтображения)) Тогда
		РабочийОбъект.ШаблонОтчета         = Реквизиты.БланкДляОтображения;
	Иначе
		// Не изменяем существующий вариант.
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(РабочийОбъект.ШаблонОтчета) Тогда
		
		РабочийОбъект.ЕдиницаИзмерения     = РабочийОбъект.ШаблонОтчета.ЕдиницаИзмеренияПоУмолчанию;
		РабочийОбъект.УровеньТочности      = РабочийОбъект.ШаблонОтчета.УровеньТочностиПоУмолчанию;
		
	КонецЕсли;
	
	Если ПробныйПроцесс Тогда
		ЧтениеНеактуальныхЗаписей_Исх = РабочийОбъект.ЧтениеНеактуальныхЗаписей;
		РабочийОбъект.ЧтениеНеактуальныхЗаписей = Истина;
	КонецЕсли;
	
	Если РабочийОбъект.ПометкаУдаления Тогда
		
		РабочийОбъект.ПометкаУдаления       = Ложь;
		
		
		Если РабочийОбъект.Состояние = Перечисления.СостоянияОтчетов.Подготовлен
			ИЛИ РабочийОбъект.Состояние = Перечисления.СостоянияОтчетов.Утвержден Тогда
			
			РабочийОбъект.ОбменДанными.Загрузка 		= Истина;
			РабочийОбъект.ПроверкаПриЗаписи             = Ложь;
			РабочийОбъект.ФормированиеДвиженийПриЗаписи = Ложь;
			
		Иначе
			
			РезультатЗаполнения = Истина;
			Если ЗаполнятьДокументы Тогда
				РезультатЗаполнения = РабочийОбъект.ЗаполнитьОтчетПоУмолчанию();
			Иначе
				// Не требуется заполнение.
			КонецЕсли;
			
			Если Не ПробныйПроцесс Тогда
				// Установка статуса отчета.
				Если УстанавливатьСтатусОтчетов Тогда
					Если РезультатЗаполнения Тогда
						Если Утвердить Тогда
							РабочийОбъект.Состояние = Перечисления.СостоянияОтчетов.Утвержден;
						Иначе
							РабочийОбъект.Состояние = Перечисления.СостоянияОтчетов.Выполняется;
						КонецЕсли;	
					Иначе
						РабочийОбъект.Состояние = Перечисления.СостоянияОтчетов.Выполняется;
					КонецЕсли;
					
					ПеревестиЗаявкуВПроизвольноеСостояние(
					РабочийОбъект.Ссылка, 
					РабочийОбъект.Состояние, 
					Неопределено, //текущая дата
					Пользователи.ТекущийПользователь());
				Иначе
					// Не требуется установка статуса.
				КонецЕсли;
				РабочийОбъект.ДополнительныеСвойства.Вставить("СостояниеСогласования", РабочийОбъект.Состояние);
				
			КонецЕсли;
			
		КонецЕсли;
				
	Иначе

		РезультатЗаполнения = Истина;
		Если ЗаполнятьДокументы Тогда
			РезультатЗаполнения = РабочийОбъект.ЗаполнитьОтчетПоУмолчанию();
		Иначе
			// Не требуется заполнение.
		КонецЕсли;
		
		Если НЕ ПробныйПроцесс Тогда
			// Установка статуса отчета.
			Если УстанавливатьСтатусОтчетов Тогда
				Если РезультатЗаполнения Тогда
					Если Утвердить Тогда
						РабочийОбъект.Состояние = Перечисления.СостоянияОтчетов.Утвержден;
					Иначе
						РабочийОбъект.Состояние = Перечисления.СостоянияОтчетов.Выполняется;	
					КонецЕсли;	
				Иначе
					РабочийОбъект.Состояние = Перечисления.СостоянияОтчетов.Выполняется;
				КонецЕсли;
			Иначе
				// Не требуется установка статуса.
			КонецЕсли;
			РабочийОбъект.ДополнительныеСвойства.Вставить("СостояниеСогласования", РабочийОбъект.Состояние);
			
		КонецЕсли;
		
	КонецЕсли;
		
	Попытка
		
		Если ПробныйПроцесс Тогда
			РабочийОбъект.ЧтениеНеактуальныхЗаписей = ЧтениеНеактуальныхЗаписей_Исх;
		КонецЕсли;
		// Т.к. при изменении статуса документа может выполняться выставление лимитов, изменим статус после записи документа.
		НовоеСостояние = РабочийОбъект.Состояние;
		СостояниеЭтапа = ПолныеПраваУХ.ПолучитьСостояниеЭтапаНастраиваемогоОтчета(РабочийОбъект.Ссылка);
		ЭтапЗавершен = (СостояниеЭтапа = Перечисления.СостоянияЭтаповУниверсальныхПроцессов.Завершен ИЛИ СостояниеЭтапа = Перечисления.СостоянияЭтаповПроцессов.Утвержден);
		Если НЕ ЭтапЗавершен Тогда
			РабочийОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Если (НЕ РабочийОбъект.ПометкаУдаления) И (НЕ ПробныйПроцесс) Тогда
				// Установка статуса отчета.
				Если УстанавливатьСтатусОтчетов Тогда
					СсылкаНаОбъект = РабочийОбъект.Ссылка;
					Если НовоеСостояние = Перечисления.СостоянияОтчетов.Утвержден Тогда
						СогласующийОтчета = МодульУправленияПроцессамиУХ.ПолучитьОтветственногоЗаТипОбъекта(СсылкаНаОбъект, , , , , Истина);
						ЕстьСогласующий = ЗначениеЗаполнено(СогласующийОтчета);
						Если НЕ ЕстьСогласующий Тогда
							ПеревестиЗаявкуВПроизвольноеСостояние(СсылкаНаОбъект, НовоеСостояние, Неопределено, Пользователи.ТекущийПользователь());
						Иначе
							ТекстСообщения = НСтр("ru = 'Документ %ОбъектСсылка% находится на согласовании у %Согласущий%. Перевод в состояние %НовоеСостояние% невозможно.'");
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОбъектСсылка%", Строка(СсылкаНаОбъект));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Согласущий%", Строка(СогласующийОтчета));
							ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НовоеСостояние%", Строка(НовоеСостояние));
							ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
							Возврат Ложь;
						КонецЕсли;
					Иначе
						ПеревестиЗаявкуВПроизвольноеСостояние(СсылкаНаОбъект, НовоеСостояние, Неопределено, Пользователи.ТекущийПользователь());
					КонецЕсли;
				Иначе
					// Не требуется установка статуса.
				КонецЕсли;
			Иначе
				// Не изменяем статус.
			КонецЕсли;
			Возврат Истина;
		Иначе
			Возврат Истина;				// Этап с отчетом закрыт. Пропускаем перезапись.
		КонецЕсли;
		
	Исключение
		
		ТекстСообщения = НСтр("ru = 'Не удалось записать документ %РабочийОбъект% : %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%РабочийОбъект%", Строка(РабочийОбъект));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Важное);
		Возврат Ложь;
		
	КонецПопытки; 	
	
КонецФункции // ОбработатьЭкземплярОтчета()

#Область РеестрыСогласования

// Определяет наличие статуса ВидСтатусаВход в соответствии СоответствиеСтатусовВход.
Функция ЕстьСтатусВСоответствии(СоответствиеСтатусовВход, ВидСтатусаВход) Экспорт
	РезультатФункции = Истина;
	Если ТипЗнч(ВидСтатусаВход) = Тип("Строка") Тогда
		РезультатФункции = (СоответствиеСтатусовВход.Получить(ВидСтатусаВход) <> Неопределено);
	Иначе
		РезультатФункции = ОбщегоназначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(СоответствиеСтатусовВход, ВидСтатусаВход);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ЕстьСтатусВСоответствии()

Функция УстановитьСтатусыПодчиненныхОбъектов(РеестрСсылка, ВидСтатуса = "", ЗначениеСтатуса = неопределено) Экспорт
	
	СоответствиеСтатусов = МодульУправленияПроцессамиУХ.ПолучитьСоответствиеСостоянийОбъекта(РеестрСсылка.ТипОбъектаСогласования);
	
	СтатусДляУстановки = Неопределено;
	
	Если ЕстьСтатусВСоответствии(СоответствиеСтатусов, ВидСтатуса) Тогда
		СтатусДляУстановки = СоответствиеСтатусов[ВидСтатуса];
	ИначеЕсли ЗначениеЗаполнено(ЗначениеСтатуса) тогда
		СтатусДляУстановки = ЗначениеСтатуса;
	Иначе
		Возврат Ложь;  				// Такого статуса нет среди возможных статусов.
	КонецЕсли;
	
	Если СтатусДляУстановки <> Неопределено Тогда
		НачатьТранзакцию();
		
		Для Каждого ТекСтрока Из РеестрСсылка.ОбъектыКСогласованию Цикл
			
			Попытка
				ПеревестиЗаявкуВПроизвольноеСостояние(ТекСтрока.СогласуемыйОбъект, СтатусДляУстановки);
			Исключение
				ОтменитьТранзакцию();
				Возврат Ложь;
			КонецПопытки;
			
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		
		Возврат Истина;
	Иначе
		Возврат Ложь;			// Не удалось определить новое значение.
	КонецЕсли;
	
КонецФункции		// УстановитьСтатусыПодчиненныхОбъектов()

#КонецОбласти

Процедура ИзменитьСостояниеЗаявки(СсылкаВход, СостояниеВход, ФормаВход, ОбъектВход, ВыходноеЗначение) Экспорт
	// Изменим статус документа.
	ВыходноеЗначение = ПеревестиЗаявкуВПроизвольноеСостояние(СсылкаВход, СостояниеВход, , , ФормаВход);
	// Для лимитирующего экземпляра требуется перечитать объект, т.к. происходит его перезапись.
	//ЭтоЛимитирующийЭкземпляр = ДвиженияБюджетированиеУХ.ЭтоЛимитирующийЭкземплярОтчета(СсылкаВход);
	//СостояниеУтвержден = (СостояниеВход = Перечисления.СостоянияОтчетов.Утвержден);
	//Если СостояниеУтвержден И ЭтоЛимитирующийЭкземпляр Тогда
	//	ОбъектВход.Прочитать();					// т.к. происходит запись лимитов.
	//Иначе
	//	// Не требуется перечитывать экземпляр отчета.
	//КонецЕсли;
КонецПроцедуры		// ИзменитьСостояниеЗаявки()

Процедура ЭтоСостояниеВРаботе(СостояниеВход, ВыходноеЗначение) Экспорт
	СостояниеВРаботе = Перечисления.СостоянияПроцесса.Вработе;
	ВыходноеЗначение = (СостояниеВход = СостояниеВРаботе);
КонецПроцедуры		// ЭтоСостояниеВРаботе()

// Возвращает массив структур, содержащий информацию о доступных
// этапах пользователя.
Процедура ПолучитьМассивЭтаповСогласованияТекущегоПользователя(ОбъектВход, ВыходноеЗначение) Экспорт
	ВыходноеЗначение = Новый Массив;
	ЭтапыСогласованияДляТекущегоПользователя = МодульУправленияПроцессамиУХ.ЭтапыСогласованияДляТекущегоПользователя(ОбъектВход);
	ВыходноеЗначение = ОбщегоНазначенияУХ.ТаблицаЗначенийВМассив(ЭтапыСогласованияДляТекущегоПользователя);
КонецПроцедуры		// ПолучитьМассивЭтаповСогласованияТекущегоПользователя()

Процедура СостояниеПриИзмененииСервер(ФормаВход, СсылкаВход) Экспорт
	ПеревестиЗаявкуВПроизвольноеСостояние(
		СсылкаВход, 
		ФормаВход["СтатусОбъекта"], 
		Неопределено, //текущая дата
		Пользователи.ТекущийПользователь());
	ДействияСогласованиеУХСервер.ОпределитьСостояниеОбъекта(ФормаВход);
	ФормаВход["СостояниеСогласованияДоИзменения"] = ФормаВход["СтатусОбъекта"];
КонецПроцедуры		// СостояниеПриИзмененииСервер()

Процедура ЗаполнитьСтруктуруСостояний(СтруктураРезультат) Экспорт
	СтруктураРезультат.Вставить("Запланирован"   , Перечисления.СостоянияОтчетов.Запланирован);
	СтруктураРезультат.Вставить("ЗаписанСОшибкой", Перечисления.СостоянияОтчетов.ЗаписанСОшибкой);
	СтруктураРезультат.Вставить("Выполняется"    , Перечисления.СостоянияОтчетов.Выполняется);
	СтруктураРезультат.Вставить("Подготовлен"    , Перечисления.СостоянияОтчетов.Подготовлен);
	СтруктураРезультат.Вставить("Утвержден"      , Перечисления.СостоянияОтчетов.Утвержден);
	СтруктураРезультат.Вставить("Возвращен"      , Перечисления.СостоянияОтчетов.Возвращен);
КонецПроцедуры		// ЗаполнитьСтруктуруСостояний()

Процедура ВернутьДанныеСостоянийЭкземпляраОтчета(СсылкаВход, ВыходноеЗначение) Экспорт
	Если Не ЗначениеЗаполнено(СсылкаВход) Тогда			
		ВыходноеЗначение.Вставить("СостояниеЗаявки",					 Перечисления.СостоянияОтчетов.Запланирован);
		ВыходноеЗначение.Вставить("СостояниеСогласованияДоИзменения",	 Неопределено);
	Иначе
		СостояниеЗаявки = ВернутьТекущееСостояние(СсылкаВход);
		ВыходноеЗначение.Вставить("СостояниеЗаявки",					 СостояниеЗаявки);
		ВыходноеЗначение.Вставить("СостояниеСогласованияДоИзменения",	 СостояниеЗаявки);
	КонецЕсли;
КонецПроцедуры		// ВернутьДанныеСостоянийЭкземпляраОтчета()

Процедура ОпределитьИспользованиеМаршрутаСогласования(СогласующийВход, ВыходноеЗначение) Экспорт
	ВыходноеЗначение = ТипЗнч(СогласующийВход) = Тип("СправочникСсылка.ШаблоныУниверсальныхПроцессов");
КонецПроцедуры		// ОпределитьИспользованиеМаршрутаСогласования()

Процедура СогласованиеЧерезРакурс(ВидОтчетаВход, ВыходноеЗначение) Экспорт
	ВыходноеЗначение = (ВидОтчетаВход.ОбъектДляСогласованияЗначений = Перечисления.ОбъектыСогласованияЗначенийПоказателейОтчетов.Ракурс);
КонецПроцедуры		// СогласованиеЧерезРакурс()
	
// Возвращает структуру параметров для открытия формы управления
// ракурсами для вида отчета ВидОтчетаВход, содержащие период
// ПериодВход.
Функция ВернутьСтруктуруОткрытияРакурса(ВидОтчетаВход, ПериодВход) Экспорт
	// Получение исходных данных.
	РезультатФункции = Новый Структура;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	РакурсДанных.Ссылка,
		|	РакурсДанных.Область,
		|	РакурсДанных.Сценарий,
		|	РакурсДанных.ПериодОтчета,
		|	РакурсДанных.Организация,
		|	РакурсДанных.Проект,
		|	РакурсДанных.Периодичность,
		|	РакурсДанных.ПериодНачалоДата,
		|	РакурсДанных.ПериодОкончаниеДата
		|ИЗ
		|	Документ.РакурсДанных КАК РакурсДанных
		|ГДЕ
		|	РакурсДанных.Область.Владелец = &ВидОтчета
		|	И РакурсДанных.ПериодНачалоДата <= &ДатаНачала
		|	И РакурсДанных.ПериодОкончаниеДата >= &ДатаОкончания";
	Запрос.УстановитьПараметр("ВидОтчета", ВидОтчетаВход);
	Запрос.УстановитьПараметр("ДатаНачала", ПериодВход.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодВход.ДатаОкончания);
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	НоваяПериодичность = Перечисления.Периодичность.Месяц;
	Если Выгрузка.Количество() > 0 Тогда
		НоваяПериодичность = Выгрузка[0].Периодичность;
	Иначе
		НоваяПериодичность = ПериодВход.Периодичность;
	КонецЕсли;
	// Период отбор начало.
	МассивДатаНачала = Выгрузка.ВыгрузитьКолонку("ПериодНачалоДата");
	МинимумДатаНачала = ОбщегоНазначенияКлиентСерверУХ.МинимумВМассиве(МассивДатаНачала, ПериодВход.ДатаНачала);
	ПериодДатаНачала = ОбщегоНазначенияУХ.ОпределитьПериодПоДате(МинимумДатаНачала, НоваяПериодичность);
	РезультатФункции.Вставить("ПериодПланированияОтборНачало", ПериодДатаНачала);
	// Период отбор окончание.
	МассивДатаОкончания = Выгрузка.ВыгрузитьКолонку("ПериодОкончаниеДата");
	МаксимумДатаНачала = ОбщегоНазначенияКлиентСерверУХ.МаксимумВМассиве(МассивДатаОкончания, ПериодВход.ДатаОкончания);
	ПериодДатаОкончания = ОбщегоНазначенияУХ.ОпределитьПериодПоДате(МаксимумДатаНачала, НоваяПериодичность);
	РезультатФункции.Вставить("ПериодПланированияОтборОкончание", ПериодДатаОкончания);
	// Сценарии.
	МассивСценариев = Выгрузка.ВыгрузитьКолонку("Сценарий");
	МассивСценариев = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивСценариев);
	РезультатФункции.Вставить("Сценарии", МассивСценариев);
	// Бланк.
	БланкОткрытия = ОбщегоНазначенияСерверУХ.ПолучитьБланкДляОткрытияСводнойТаблицы(ВидОтчетаВход);
	РезультатФункции.Вставить("Бланк", БланкОткрытия);
	// Организации.
	МассивОрганизаций = Выгрузка.ВыгрузитьКолонку("Организация");
	МассивОрганизаций = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивОрганизаций);
	РезультатФункции.Вставить("Организации", МассивОрганизаций);
	// Проекты.
	МассивПроектов = Выгрузка.ВыгрузитьКолонку("Проект");
	МассивПроектов = ОбщегоНазначенияКлиентСервер.СвернутьМассив(МассивПроектов);
	РезультатФункции.Вставить("Проекты", МассивПроектов);
	Возврат РезультатФункции;
КонецФункции		// ВернутьСтруктуруОткрытияРакурса()

Процедура ЗаполнитьСтруктуруОткрытияРакурса(ВидОтчетаВход, ПериодВход, ВыходноеЗначение) Экспорт
	ВыходноеЗначение = ВернутьСтруктуруОткрытияРакурса(ВидОтчетаВход, ПериодВход);
КонецПроцедуры		// ЗаполнитьСтруктуруОткрытияРакурса()

Процедура ЗаполнитьЗначениеСтатусОбъекта(СсылкаВход, ВыходноеЗначение) Экспорт
	ВыходноеЗначение = ВернутьСтатусОбъекта(СсылкаВход);
КонецПроцедуры		// ЗаполнитьЗначениеСтатусОбъекта()

Процедура ЗаполнитьЗначениеТекущееСостояние(ОбъектВход, ВыходноеЗначение) Экспорт
	ВыходноеЗначение = ВернутьТекущееСостояние(ОбъектВход);
КонецПроцедуры		// ЗаполнитьЗначениеТекущееСостояние()	

Процедура ЗаполнитьЗначениеПеревестиЗаявкуВПроизвольноеСостояние(Знач Заявка, Знач СостояниеЗаявки, Знач Период = Неопределено, Знач Автор = Неопределено,Форма = Неопределено,ДокументПроцесса = Неопределено, ВыходноеЗначение) Экспорт
	ВыходноеЗначение = ПеревестиЗаявкуВПроизвольноеСостояние(Заявка, СостояниеЗаявки, Период, Автор, Форма, ДокументПроцесса);
КонецПроцедуры		// ЗаполнитьЗначениеПеревестиЗаявкуВПроизвольноеСостояние()

Процедура ПроверитьВозможностьУтвержденияОтчета(ПользовательВход, ВидОтчетаВход, ОрганизацияВход, ВыходноеЗначение) Экспорт
	ВыходноеЗначение = ПолныеПраваУХ.ПроверитьВозможностьУтвержденияОтчета(ПользовательВход, ВидОтчетаВход, ОрганизацияВход);
КонецПроцедуры		// ПроверитьВозможностьУтвержденияОтчета()

Процедура ПолучитьСостояниеЭтапаНастраиваемогоОтчета(ОбъектВход, ЭтапПроцессаВход, ВыходноеЗначение) Экспорт
	ВыходноеЗначение = ПолныеПраваУХ.ПолучитьСостояниеЭтапаНастраиваемогоОтчета(ОбъектВход, ЭтапПроцессаВход);
КонецПроцедуры		// ПолучитьСостояниеЭтапаНастраиваемогоОтчета()

Процедура ПолучитьСостояниеСогласования_Утвержден(ТипОбъектаСогласованияВход, ВыходноеЗначение) Экспорт
	ВыходноеЗначение = ДействияСогласованиеУХСервер.ПолучитьСостояниеСогласования_Утвержден(ТипОбъектаСогласованияВход);
КонецПроцедуры		// ПолучитьСостояниеЭтапаНастраиваемогоОтчета()

// Возвращает массив этапов, где присутсвует шаблон отчёта ШаблонВход для организации
// ОрганизацияВход в ходе исполнения регламента ВерсияРегламентаВход.
Функция ПолучитьМассивЭтаповЭскалации(ВерсияРегламентаВход, ОрганизацияВход, ШаблонВход)
	РезультатФункции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭтапыУниверсальныхПроцессовФормируемыеДокументы.Контрольный КАК Контрольный,
		|	ЭтапыУниверсальныхПроцессовФормируемыеДокументы.ДокументБД КАК ДокументБД,
		|	ЭтапыУниверсальныхПроцессовФормируемыеДокументы.ШаблонДокумента КАК ШаблонДокумента,
		|	ЭтапыУниверсальныхПроцессовФормируемыеДокументы.ВидДокумента КАК ВидДокумента,
		|	ЭтапыУниверсальныхПроцессовФормируемыеДокументы.Ссылка КАК Этап,
		|	ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница
		|ИЗ
		|	Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыУниверсальныхПроцессовФормируемыеДокументы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизационныеЕдиницыЭтаповПроцессов КАК ОрганизационныеЕдиницыЭтаповПроцессов
		|		ПО ЭтапыУниверсальныхПроцессовФормируемыеДокументы.Ссылка = ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса
		|ГДЕ
		|	ОрганизационныеЕдиницыЭтаповПроцессов.ВерсияРегламентаПодготовкиОтчетности = &ВерсияРегламентаПодготовкиОтчетности
		|	И ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница = &ОрганизационнаяЕдиница
		|	И ЭтапыУниверсальныхПроцессовФормируемыеДокументы.ШаблонДокумента = &ШаблонДокумента";
	Запрос.УстановитьПараметр("ВерсияРегламентаПодготовкиОтчетности", ВерсияРегламентаВход);
	Запрос.УстановитьПараметр("ОрганизационнаяЕдиница", ОрганизацияВход);
	Запрос.УстановитьПараметр("ШаблонДокумента", ШаблонВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатФункции.Добавить(ВыборкаДетальныеЗаписи.Этап);
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьМассивЭтаповЭскалации()

// Выполняет эскалацию утверждения этапов подготовки отчетности для таблицы значений ВыгрузкаВход.
Процедура ЭскалацияУтвержденияВыгрузкиНабораЗаписейСостоянияОбъектов(ВыгрузкаВход, Отказ)
	// Инициализация.
	ТаблицаДанныхЭскалации = Новый ТаблицаЗначений;
	ТаблицаДанныхЭскалации.Колонки.Добавить("Сценарий");
	ТаблицаДанныхЭскалации.Колонки.Добавить("Период");
	ТаблицаДанныхЭскалации.Колонки.Добавить("Организация");
	ТаблицаДанныхЭскалации.Колонки.Добавить("ШаблонДокумента");
	ТаблицаДанныхЭскалации.Колонки.Добавить("ВерсияРегламента");
	ПустойСценарий		 = Справочники.Сценарии.ПустаяСсылка();
	ПустойПериод		 = Справочники.Периоды.ПустаяСсылка();
	ПустаяОрганизация	 = Справочники.Организации.ПустаяСсылка();
	ПустаяВерсия		 = Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка();
	// Заполним таблицу ключевых реквизитов для эскалации.
	Для Каждого ТекВыгрузка Из ВыгрузкаВход Цикл
		СсылкаНаОбъект = ТекВыгрузка.Объект;
		ЭтоЭкземплярОтчета					 = (ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.НастраиваемыйОтчет"));
		ЭтоТрансляция						 = (ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.Трансляция"));
		ЭтоТрансформационнаяКорректировка	 = (ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.ТрансформационнаяКорректировка"));
		ЭтоЭлиминация						 = (ТипЗнч(СсылкаНаОбъект) = Тип("ДокументСсылка.Элиминация"));
		Если ЭтоЭкземплярОтчета ИЛИ ЭтоТрансляция ИЛИ ЭтоТрансформационнаяКорректировка ИЛИ ЭтоЭлиминация Тогда
			ТекСостояниеОбъекта = ТекВыгрузка.СостояниеОбъекта;
			Если ТекСостояниеОбъекта = Перечисления.СостоянияОтчетов.Утвержден Тогда
				ДанныеЭскалации = МодульУправленияПроцессамиУХ.ПолучитьСценарийПериодПоИсточнику(СсылкаНаОбъект);
				НоваяСтрока = ТаблицаДанныхЭскалации.Добавить();
				НоваяСтрока.Организация			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЭскалации, "Организация", ПустаяОрганизация);
				НоваяСтрока.Период				 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЭскалации, "Период", ПустойПериод);
				НоваяСтрока.Сценарий			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЭскалации, "Сценарий", ПустойСценарий);
				НоваяСтрока.ШаблонДокумента		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЭскалации, "ШаблонДокумента", Неопределено);
				НоваяСтрока.ВерсияРегламента	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(ДанныеЭскалации, "ВерсияРегламента", ПустаяВерсия);
			Иначе
				// Для прочих статусов не выполняем эскалацию.
			КонецЕсли;
		Иначе
			// Для прочих объектов не выполняем эскалацию утверждения.
		КонецЕсли;
	КонецЦикла;
	// Свернём таблицу эскалации.
	ТаблицаДанныхЭскалации.Свернуть("Сценарий, Период, Организация, ШаблонДокумента, ВерсияРегламента");
	// Непосредственное выполнение эскалации по данным таблицы ТаблицаДанныхЭскалации.
	Для Каждого ТекТаблицаДанныхЭскалации Из ТаблицаДанныхЭскалации Цикл
		ТекВерсия = ТекТаблицаДанныхЭскалации.ВерсияРегламента;
		ТекОрганизация = ТекТаблицаДанныхЭскалации.Организация;
		ТекШаблон = ТекТаблицаДанныхЭскалации.ШаблонДокумента;
		МассивЭтапов = ПолучитьМассивЭтаповЭскалации(ТекВерсия, ТекОрганизация, ТекШаблон);
		СтруктураЭскалации = Новый Структура;
		СтруктураЭскалации.Вставить("МассивЭтапов", МассивЭтапов);
		СтруктураЭскалации.Вставить("Организация", ТекОрганизация);
		СтруктураЭскалации.Вставить("Период", ТекТаблицаДанныхЭскалации.Период);
		СтруктураЭскалации.Вставить("Сценарий", ТекТаблицаДанныхЭскалации.Сценарий);
		СтруктураЭскалации.Вставить("ШаблонДокумента", ТекШаблон);
		МодульУправленияПроцессамиУХ.ЭскалацияУтвержденияЭтапа(СтруктураЭскалации, Отказ);
	КонецЦикла;
КонецПроцедуры		// ЭскалацияУтвержденияВыгрузкиНабораЗаписейСостоянияОбъектов()

Процедура ОбработатьИзменениеСостоянияОбъекта(НаборЗаписейВход, Отказ) Экспорт
	МодульУправленияОповещениямиУХ.ОповеститьПользователейПоНаборуЗаписей(НаборЗаписейВход);
	УстановитьПривилегированныйРежим(Истина);
	МодульСогласованияДокументовУХ.ОбработатьУстановкуСтатусаОбъекта(НаборЗаписейВход, Отказ);
	УстановитьПривилегированныйРежим(Ложь);
	
	// Эскалация утверждения этапа.
	Выгрузка = НаборЗаписейВход.Выгрузить();
	ЭскалацияУтвержденияВыгрузкиНабораЗаписейСостоянияОбъектов(Выгрузка, Отказ);
КонецПроцедуры		// ОбработатьИзменениеСостоянияОбъекта()

Процедура ПолучитьОтветственногоЗаТипОбъекта(ЭлементСсылка, Знач Организация = Неопределено, Знач ШаблонДокументаБД = Неопределено, ТипОтветственного = Неопределено, ВыходноеЗначение, ВернутьМассив = Ложь) Экспорт
	Если Организация=Неопределено Тогда
		
		Организация=ДействияСогласованиеУХСервер.ВернутьЦФОПоОбъекту(ЭлементСсылка);
		
	КонецЕсли;
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ЭлементСсылка)) Тогда
		
		ТекМетаданные = Справочники.СправочникиБД.НайтиПоНаименованию(ЭлементСсылка.Метаданные().имя,,,Справочники.ТипыБазДанных.ТекущаяИБ);		
		ШаблонДокументаБД = ТекМетаданные;
		ИспользуетсяВПроцессе = Ложь;
		Если НЕ ТекМетаданные.РазделятьПоОрганизациям Тогда 
			Организация=Неопределено;
		КонецЕсли;
	Иначе	
		ТекМетаданные = Справочники.ДокументыБД.НайтиПоНаименованию(ЭлементСсылка.Метаданные().имя,,,Справочники.ТипыБазДанных.ТекущаяИБ);
		Если СокрЛП(ТекМетаданные.РеквизитШаблонаДокумета)<>"" Тогда
			
			ШаблонДокументаБД = ?(ШаблонДокументаБД=Неопределено,ЭлементСсылка[ТекМетаданные.РеквизитШаблонаДокумета],ШаблонДокументаБД);
			
		Иначе	
			ШаблонДокументаБД = ТекМетаданные;
		КонецЕсли;
		ИспользуетсяВПроцессе = ТекМетаданные.ИспользуетсяВПроцессе;
	КонецЕсли;	
	
	БезОрганизацииТекст = Нстр("ru = '<БЕЗ ОРГАНИЗАЦИИ>'");
	
	Если  ИспользуетсяВПроцессе  Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА РегистрМатрицыПолномочий.Согласование ССЫЛКА Справочник.РолиКонтактныхЛиц
		|			ТОГДА ОтветственныеОрганизаций_Согласование.Пользователь
		|		ИНАЧЕ РегистрМатрицыПолномочий.Согласование
		|	КОНЕЦ КАК Согласование,
		|	ВЫБОР
		|		КОГДА РегистрМатрицыПолномочий.Исполняющий ССЫЛКА Справочник.РолиКонтактныхЛиц
		|			ТОГДА ОтветственныеОрганизаций_Исполняющий.Пользователь
		|		ИНАЧЕ РегистрМатрицыПолномочий.Исполняющий
		|	КОНЕЦ КАК Исполняющий
		|ИЗ
		|	РегистрСведений.РегистрМатрицыПолномочий КАК РегистрМатрицыПолномочий
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций_Согласование
		|		ПО (ОтветственныеОрганизаций_Согласование.Роль = РегистрМатрицыПолномочий.Согласование)
		|			И (ОтветственныеОрганизаций_Согласование.Организация = ВЫБОР
		|				КОГДА РегистрМатрицыПолномочий.Организация = """ + БезОрганизацииТекст + """
		|					ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				ИНАЧЕ РегистрМатрицыПолномочий.Организация
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций_Исполняющий
		|		ПО (ОтветственныеОрганизаций_Исполняющий.Роль = РегистрМатрицыПолномочий.Исполняющий)
		|			И (ОтветственныеОрганизаций_Исполняющий.Организация = ВЫБОР
		|				КОГДА РегистрМатрицыПолномочий.Организация = """ + БезОрганизацииТекст + """
		|					ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				ИНАЧЕ РегистрМатрицыПолномочий.Организация
		|			КОНЕЦ)
		|ГДЕ
		|	РегистрМатрицыПолномочий.ДокументБД = &ДокументБД
		|	И РегистрМатрицыПолномочий.ШаблонДокументаБД = &ШаблонДокументаБД
		|	И РегистрМатрицыПолномочий.Организация = &Организация
		|	И ВЫБОР
		|			КОГДА &Регламент = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ РегистрМатрицыПолномочий.ВерсияРегламентаПодготовкиОтчетности = &Регламент
		|		КОНЕЦ";
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА РегистрМатрицыПолномочий.Согласование ССЫЛКА Справочник.РолиКонтактныхЛиц
		|			ТОГДА ОтветственныеОрганизаций_Согласование.Пользователь
		|		ИНАЧЕ РегистрМатрицыПолномочий.Согласование
		|	КОНЕЦ КАК Согласование,
		|	ВЫБОР
		|		КОГДА РегистрМатрицыПолномочий.Исполняющий ССЫЛКА Справочник.РолиКонтактныхЛиц
		|			ТОГДА ОтветственныеОрганизаций_Исполняющий.Пользователь
		|		ИНАЧЕ РегистрМатрицыПолномочий.Исполняющий
		|	КОНЕЦ КАК Исполняющий
		|ИЗ
		|	РегистрСведений.РегистрМатрицыПолномочий КАК РегистрМатрицыПолномочий
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций_Согласование
		|		ПО (ОтветственныеОрганизаций_Согласование.Роль = РегистрМатрицыПолномочий.Согласование)
		|			И (ОтветственныеОрганизаций_Согласование.Организация = ВЫБОР
		|				КОГДА РегистрМатрицыПолномочий.Организация = """ + БезОрганизацииТекст + """
		|					ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				ИНАЧЕ РегистрМатрицыПолномочий.Организация
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций_Исполняющий
		|		ПО (ОтветственныеОрганизаций_Исполняющий.Роль = РегистрМатрицыПолномочий.Исполняющий)
		|			И (ОтветственныеОрганизаций_Исполняющий.Организация = ВЫБОР
		|				КОГДА РегистрМатрицыПолномочий.Организация = """ + БезОрганизацииТекст + """
		|					ТОГДА ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				ИНАЧЕ РегистрМатрицыПолномочий.Организация
		|			КОНЕЦ)
		|ГДЕ
		|	РегистрМатрицыПолномочий.ДокументБД = &ДокументБД
		|	И РегистрМатрицыПолномочий.ШаблонДокументаБД = &ШаблонДокументаБД
		|	И РегистрМатрицыПолномочий.Организация = &Организация
		|	И ВЫБОР
		|			КОГДА &Регламент = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ РегистрМатрицыПолномочий.ВерсияРегламентаПодготовкиОтчетности = &Регламент
		|		КОНЕЦ";
		
	КонецЕсли;
	// Для экземпляров отчетов получим регламент.
	НовыйРегламент = Неопределено;
	Если ТипЗнч(ЭлементСсылка) = Тип("ДокументСсылка.НастраиваемыйОтчет") Тогда
		НовыйРегламент = УправлениеРабочимиПроцессамиУХ.ПолучитьВерсиюРегламентаПодготовкиОтчетности(ЭлементСсылка.Сценарий, ЭлементСсылка.ПериодОтчета);
		Если Не ЗначениеЗаполнено(НовыйРегламент) Тогда
			НовыйРегламент = Неопределено;
		Иначе
			// Не изменяем регламент.
		КонецЕсли;	
	Иначе
		НовыйРегламент = Неопределено;
	КонецЕсли;	
	// Установка параметров и выполнение запроса.
	Запрос.УстановитьПараметр("Организация", Организация);	
	Запрос.УстановитьПараметр("ДокументБД", ТекМетаданные);
	Запрос.УстановитьПараметр("ШаблонДокументаБД", ШаблонДокументаБД);
	Запрос.УстановитьПараметр("Регламент", НовыйРегламент);
	Выборка = Запрос.Выполнить().Выбрать();
	// Обход результатов запроса и возврат найденных значений.
	ВыходноеЗначение = Справочники.Пользователи.ПустаяСсылка();
		
	Если ВернутьМассив тогда
		
		ВыходноеЗначение = Новый Массив;
		
		Пока Выборка.Следующий() Цикл
			
			Если ТипОтветственного = "Исполнитель" И ЗначениеЗаполнено(Выборка.Исполняющий) Тогда
				ВыходноеЗначение.Добавить(Выборка.Исполняющий);
			ИначеЕсли ТипОтветственного = "Согласующий" И ЗначениеЗаполнено(Выборка.Согласование) Тогда
				ВыходноеЗначение.Добавить(Выборка.Согласование);
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли Выборка.Следующий() Тогда
		
		Если ТипОтветственного = "Исполнитель" Тогда
			ВыходноеЗначение = Выборка.Исполняющий;
		Иначе
			ВыходноеЗначение = Выборка.Согласование;
		КонецЕсли;
		
	Иначе
		
		ВыходноеЗначение = Справочники.Пользователи.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры		// ПолучитьОтветственногоЗаТипОбъекта()

Процедура ОповеститьОбУтвержденииЭтапа(ТекущиеДанные, СостоянияПроцесса, мПоследователиСтрок) Экспорт
	
	Если НЕ Константы.ОповеститьОУтвержденииЭтапаПроцесса.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаПользователей = Новый ТаблицаЗначений;
	ТаблицаПользователей.Колонки.Добавить("Пользователь");
	ТаблицаПользователей.Колонки.Добавить("Этап");
	
	СписокПользователей = Новый СписокЗначений;
	ПоследователиСтрок = мПоследователиСтрок[ТекущиеДанные.ПолучитьИдентификатор()];
	
	Если ЗначениеЗаполнено(ПоследователиСтрок) Тогда
	
		Для Каждого Ид_Элемент Из ПоследователиСтрок Цикл
			
			Элемент = СостоянияПроцесса.НайтиПоИдентификатору(Ид_Элемент);
			Если ЗначениеЗаполнено(Элемент.ОтветственныйЗаЭтап) Тогда
				СписокПользователей.Добавить(Элемент.ОтветственныйЗаЭтап);
				НоваяСтрока = ТаблицаПользователей.Добавить();
				НоваяСтрока.Пользователь = Элемент.ОтветственныйЗаЭтап;
				НоваяСтрока.Этап         = Элемент.Этап;
			КонецЕсли;
			
		КонецЦикла;
		
		Если СписокПользователей.Количество() > 0 Тогда
			ТаблицаАдресов = УправлениеКонтактнойИнформациейПереопределяемыйУХ.ПолучитьТаблицуЭлектронныхАдресов(СписокПользователей);
			Если ТаблицаАдресов.Количество() > 0 Тогда
				Для Каждого Строка Из ТаблицаАдресов Цикл
					НайденныеСтроки = ТаблицаПользователей.НайтиСтроки(Новый Структура("Пользователь", Строка.Объект));
					Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
												
						ТемаПисьма = НСтр("ru = 'Утвержден этапа процесса %1 для организации %2'");
						Если ЗначениеЗаполнено(ТемаПисьма) тогда	
							ТемаПисьма = СтрШаблон(ТемаПисьма, ТекущиеДанные.Этап, ТекущиеДанные.Организация);
						КонецЕсли;
						
						ТемаПисьмаКратко = НСтр("ru = 'Утвержден этап процесса'");
						
						ТекстПисьма = НСтр("ru = 'Этап процесса: %1<BR> 
						|Организация: %2<BR> 
						|Текущий этап процесса <B>%3</B> находится под вашей ответственностью'");
						Если ЗначениеЗаполнено(ТекстПисьма) тогда	
							ТекстПисьма = СтрШаблон(ТекстПисьма, ТекущиеДанные.Этап, ТекущиеДанные.Организация, НайденнаяСтрока.Этап);
						КонецЕсли;
						
						Письмо = Новый ИнтернетПочтовоеСообщение;
						Письмо.Тексты.Добавить(УправлениеЭлектроннойПочтойУХ.ВернутьТекстПисьма(ТемаПисьмаКратко, 
							ТекстПисьма), ТипТекстаПочтовогоСообщения.HTML);
						
						Письмо.Получатели.Добавить(Строка.Адрес);
						Письмо.Тема = ТемаПисьма;
						
						УправлениеЭлектроннойПочтойУХ.ЗаписатьПисьмоВРегистр(Письмо, ТекущиеДанные.Этап);
						
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры		// ОповеститьОбУтвержденииЭтапа()

Процедура ОповеститьОНачалеВыполненияЭтапа(ТекущиеДанные, ПериодСценария, Сценарий) Экспорт
	
	Если НЕ Константы.ОповеститьОНачалеВыполненияЭтапа.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастраиваемыйОтчет.Ссылка,
	|	УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры,
	|	УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры КАК Регламент,
	|	УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры.МеткаВремени КАК МеткаВремени,
	|	НастраиваемыйОтчет.ВидОтчета КАК ВидОтчета,
	|	НастраиваемыйОтчет.Организация КАК Организация
	|ПОМЕСТИТЬ ТО
	|ИЗ
	|	Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыПроцессовФормируемыеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|		ПО (НастраиваемыйОтчет.ВидОтчета = ЭтапыПроцессовФормируемыеДокументы.ШаблонДокумента)
	|			И (НастраиваемыйОтчет.Организация = &Организация)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыПериодовСценариев КАК СтатусыПериодовСценариев
	|		ПО (НастраиваемыйОтчет.ПериодОтчета = СтатусыПериодовСценариев.Периоды)
	|			И (НастраиваемыйОтчет.Сценарий = СтатусыПериодовСценариев.Сценарии)
	|ГДЕ
	|	ЭтапыПроцессовФормируемыеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЭтапа.ЭкземплярыОтчетов)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидОтчета,
	|	Организация,
	|	Регламент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НастраиваемыйОтчет.Ссылка КАК ЭкземплярОтчета,
	|	ВнутрЗапрос.Исполняющий,
	|	ВнутрЗапрос.Исполняющий_Организация,
	|	ВнутрЗапрос.Согласование,
	|	ВнутрЗапрос.Согласование_Организация
	|ПОМЕСТИТЬ ТаблицаИспСогл
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			МаксимальныеПериоды.Ссылка КАК Ссылка,
	|			РегистрМатрицыПолномочий.Исполняющий КАК Исполняющий,
	|			РегистрМатрицыПолномочий.Исполняющий_Организация КАК Исполняющий_Организация,
	|			РегистрМатрицыПолномочий.Согласование КАК Согласование,
	|			РегистрМатрицыПолномочий.Согласование_Организация КАК Согласование_Организация
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(МатрицаПолномочий.ВерсияРегламентаПодготовкиОтчетности.МеткаВремени) КАК Период,
	|				ТО.Ссылка КАК Ссылка,
	|				ТО.Регламент КАК Регламент,
	|				ТО.ВидОтчета КАК ВидОтчета,
	|				ТО.Организация КАК Организация,
	|				ТО.МеткаВремени КАК МеткаВремени
	|			ИЗ
	|				РегистрСведений.РегистрМатрицыПолномочий КАК МатрицаПолномочий
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТО КАК ТО
	|					ПО (ТО.Регламент = МатрицаПолномочий.ВерсияРегламентаПодготовкиОтчетности)
	|						И (ТО.ВидОтчета = МатрицаПолномочий.ШаблонДокументаБД)
	|						И (ТО.Организация = МатрицаПолномочий.Организация)	
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ТО.Ссылка,
	|				ТО.Регламент,
	|				ТО.ВидОтчета,
	|				ТО.Организация,
	|				ТО.МеткаВремени) КАК МаксимальныеПериоды
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрМатрицыПолномочий КАК РегистрМатрицыПолномочий
	|				ПО (РегистрМатрицыПолномочий.ШаблонДокументаБД = МаксимальныеПериоды.ВидОтчета)
	|					И (РегистрМатрицыПолномочий.Организация = МаксимальныеПериоды.Организация)
	|					И (РегистрМатрицыПолномочий.ВерсияРегламентаПодготовкиОтчетности = МаксимальныеПериоды.Регламент)) КАК ВнутрЗапрос
	|		ПО НастраиваемыйОтчет.Ссылка = ВнутрЗапрос.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТО
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Исполнитель.Пользователь КАК Исполняющий,
	|	Согласование.Пользователь КАК Согласование,
	|	Исполнитель.ЭкземплярОтчета КАК НастраиваемыйОтчет,
	|	ПРЕДСТАВЛЕНИЕ(Исполнитель.Пользователь) КАК ИсполнительПредставление,
	|	ПРЕДСТАВЛЕНИЕ(Согласование.Пользователь) КАК СогласованиеПредставление
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаИспСогл.Исполняющий КАК Пользователь,
	|		ТаблицаИспСогл.ЭкземплярОтчета КАК ЭкземплярОтчета
	|	ИЗ
	|		ТаблицаИспСогл КАК ТаблицаИспСогл
	|	ГДЕ
	|		ТаблицаИспСогл.Исполняющий ССЫЛКА Справочник.Пользователи
	|	
	|	ОБЪЕДИНИТЬ
	|	
	|	ВЫБРАТЬ
	|		ОтветственныеОрганизаций.Пользователь,
	|		ТаблицаИспСогл.ЭкземплярОтчета
	|	ИЗ
	|		ТаблицаИспСогл КАК ТаблицаИспСогл
	|			ПОЛНОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций
	|			ПО (ОтветственныеОрганизаций.Организация = ВЫБОР
	|					КОГДА ТаблицаИспСогл.Исполняющий_Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|						ТОГДА ТаблицаИспСогл.ЭкземплярОтчета.Организация
	|					ИНАЧЕ ТаблицаИспСогл.Исполняющий_Организация
	|				КОНЕЦ)
	|				И (ОтветственныеОрганизаций.Роль = ТаблицаИспСогл.Исполняющий)
	|	ГДЕ
	|		ТаблицаИспСогл.Исполняющий ССЫЛКА Справочник.РолиКонтактныхЛиц) КАК Исполнитель
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ТаблицаИспСогл.Согласование КАК Пользователь,
	|			ТаблицаИспСогл.ЭкземплярОтчета КАК ЭкземплярОтчета
	|		ИЗ
	|			ТаблицаИспСогл КАК ТаблицаИспСогл
	|		ГДЕ
	|			НЕ ТаблицаИспСогл.Согласование ССЫЛКА Справочник.РолиКонтактныхЛиц
	|		
	|		ОБЪЕДИНИТЬ
	|		
	|		ВЫБРАТЬ
	|			ОтветственныеОрганизаций.Пользователь,
	|			ТаблицаИспСогл.ЭкземплярОтчета
	|		ИЗ
	|			ТаблицаИспСогл КАК ТаблицаИспСогл
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОтветственныеОрганизаций КАК ОтветственныеОрганизаций
	|				ПО (ОтветственныеОрганизаций.Организация = ВЫБОР
	|						КОГДА ТаблицаИспСогл.Согласование_Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
	|							ТОГДА ТаблицаИспСогл.ЭкземплярОтчета.Организация
	|						ИНАЧЕ ТаблицаИспСогл.Согласование_Организация
	|					КОНЕЦ)
	|					И (ОтветственныеОрганизаций.Роль = ТаблицаИспСогл.Согласование)
	|		ГДЕ
	|			ТаблицаИспСогл.Согласование ССЫЛКА Справочник.РолиКонтактныхЛиц) КАК Согласование
	|		ПО Исполнитель.ЭкземплярОтчета = Согласование.ЭкземплярОтчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаИспСогл";

	
	Запрос.УстановитьПараметр("Организация" , ТекущиеДанные.Организация);
	Запрос.УстановитьПараметр("ЭтапПроцесса", ТекущиеДанные.Этап);
	Запрос.УстановитьПараметр("ПериодОтчета", ПериодСценария);
	Запрос.УстановитьПараметр("Сценарий"    , Сценарий);
	
	СписокИсполнителей = Новый СписокЗначений;
	РабочаяТаблица = Запрос.Выполнить().Выгрузить();
	СписокИсполнителей.ЗагрузитьЗначения(РабочаяТаблица.ВыгрузитьКолонку("Исполняющий"));
	ТаблицаАдресов     = УправлениеКонтактнойИнформациейПереопределяемыйУХ.ПолучитьТаблицуЭлектронныхАдресов(СписокИсполнителей);
	
	Если ТаблицаАдресов.Количество() > 0 Тогда
		
		Для Каждого Строка Из ТаблицаАдресов Цикл
			
			НайденныеСтроки = РабочаяТаблица.НайтиСтроки(Новый Структура("Исполняющий", Строка.Объект));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл 
				
				ТемаПисьма = НСтр("ru = 'Этапа процесса %1 для организации %2 переведен в состояние ""Выполняется""'");
				Если ЗначениеЗаполнено(ТемаПисьма) тогда	
					ТемаПисьма = СтрШаблон(ТемаПисьма, ТекущиеДанные.Этап, ТекущиеДанные.Организация);
				КонецЕсли;
				
				ТемаПисьмаКратко = НСтр("ru = 'Этап переведен в состояние ""Выполняется""'");
				
				ТекстПисьма = НСтр("ru = 'Этап %1 для организации %2 переведен в состояние ""Выполняется "" <BR>
				| Можно работать с экземпляром отчета %3'");
				Если ЗначениеЗаполнено(ТекстПисьма) тогда	
					ТекстПисьма = СтрШаблон(ТекстПисьма, ТекущиеДанные.Этап, ТекущиеДанные.Организация, НайденнаяСтрока.НастраиваемыйОтчет);
				КонецЕсли;
				
				Письмо = Новый ИнтернетПочтовоеСообщение;
				Письмо.Получатели.Добавить(Строка.Адрес);
				Письмо.Тексты.Добавить(УправлениеЭлектроннойПочтойУХ.ВернутьТекстПисьма(ТемаПисьмаКратко, ТекстПисьма), ТипТекстаПочтовогоСообщения.HTML);
				Письмо.Тема = ТемаПисьма;
			
				УправлениеЭлектроннойПочтойУХ.ЗаписатьПисьмоВРегистр(Письмо, ТекущиеДанные.Этап);
				
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры		// ОповеститьОНачалеВыполненияЭтапа()

Процедура ОповеститьОПриостановленииЭтапа(ТекущиеДанные) Экспорт
	
	Если НЕ Константы.ОповеститьОПриостановленииЭтапа.Получить() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ОтветственныйЗаЭтап) Тогда
		ТаблицаАдресов = УправлениеКонтактнойИнформациейПереопределяемыйУХ.ПолучитьТаблицуЭлектронныхАдресов(ТекущиеДанные.ОтветственныйЗаЭтап);
		Если ТаблицаАдресов.Количество() = 1 Тогда
			
			ТемаПисьма = НСтр("ru = 'Приостановлен этапа процесса %1 для организации %2'");
			Если ЗначениеЗаполнено(ТемаПисьма) тогда	
				ТемаПисьма = СтрШаблон(ТемаПисьма, ТекущиеДанные.Этап, ТекущиеДанные.Организация);
			КонецЕсли;
			
			ТемаПисьмаКратко = НСтр("ru = 'Этап переведен в состояние ""Приостановлен""'");
			
			ТекстПисьма = НСтр("ru = 'Этап %1 для организации %2 переведен в состояние ""Приостановлен""'");
			Если ЗначениеЗаполнено(ТекстПисьма) тогда	
				ТекстПисьма = СтрШаблон(ТекстПисьма, ТекущиеДанные.Этап, ТекущиеДанные.Организация);
			КонецЕсли;
			
			Письмо = Новый ИнтернетПочтовоеСообщение;
			Письмо.Получатели.Добавить(ТаблицаАдресов[0].Адрес);
			Письмо.Тексты.Добавить(УправлениеЭлектроннойПочтойУХ.ВернутьТекстПисьма(ТемаПисьмаКратко, ТекстПисьма), ТипТекстаПочтовогоСообщения.HTML);
			Письмо.Тема = ТемаПисьма;
			
			УправлениеЭлектроннойПочтойУХ.ЗаписатьПисьмоВРегистр(Письмо, ТекущиеДанные.Этап);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры		// ОповеститьОПриостановленииЭтапа()

Функция ВернутьТаблицуИменФайлов(ЭтапПроцесса, Организация, Сценарий, ПериодСценария, ШаблонПроцесса)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастраиваемыйОтчет.Ссылка, ";
	
	Для Инд=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Запрос.Текст = Запрос.Текст +"
		|НастраиваемыйОтчет.Аналитика" + Инд + " КАК ЗначениеАналитика" + Инд + ", 
		|МаскаАналитика"+Инд+".Имя КАК Аналитика"+Инд+",";
		
	КонецЦикла;
	
	Запрос.Текст = Запрос.Текст+"
	|	МаскаСценарий.Имя КАК Сценарий,
	|	МаскаВидОтчета.Имя КАК ВидОтчета,
	|	МаскаПериодОтчета.Имя КАК ПериодСценария,
	|	МаскаОрганизация.Имя КАК Организация
	|ИЗ
	|	Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыПроцессовФормируемыеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|		ПО (НастраиваемыйОтчет.ВидОтчета = ЭтапыПроцессовФормируемыеДокументы.ШаблонДокумента)
	|			И (НастраиваемыйОтчет.ПериодОтчета = &Период)
	|			И (НастраиваемыйОтчет.Сценарий = &Сценарий
	|				И НастраиваемыйОтчет.Организация = &Организация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ИменаФайловИКаталогов.Объект КАК Объект,
	|			ИменаФайловИКаталогов.Имя КАК Имя
	|		ИЗ
	|			РегистрСведений.ИменаФайловИКаталогов КАК ИменаФайловИКаталогов
	|		ГДЕ
	|			ИменаФайловИКаталогов.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.Сценарий)) КАК МаскаСценарий
	|		ПО НастраиваемыйОтчет.Сценарий = МаскаСценарий.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ИменаФайловИКаталогов.Объект КАК Объект,
	|			ИменаФайловИКаталогов.Имя КАК Имя
	|		ИЗ
	|			РегистрСведений.ИменаФайловИКаталогов КАК ИменаФайловИКаталогов
	|		ГДЕ
	|			ИменаФайловИКаталогов.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.ВидОтчета)) КАК МаскаВидОтчета
	|		ПО НастраиваемыйОтчет.ВидОтчета = МаскаВидОтчета.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ИменаФайловИКаталогов.Объект КАК Объект,
	|			ИменаФайловИКаталогов.Имя КАК Имя
	|		ИЗ
	|			РегистрСведений.ИменаФайловИКаталогов КАК ИменаФайловИКаталогов
	|		ГДЕ
	|			ИменаФайловИКаталогов.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.ПериодСценария)) КАК МаскаПериодОтчета
	|		ПО НастраиваемыйОтчет.ПериодОтчета = МаскаПериодОтчета.Объект
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ИменаФайловИКаталогов.Объект КАК Объект,
	|			ИменаФайловИКаталогов.Имя КАК Имя
	|		ИЗ
	|			РегистрСведений.ИменаФайловИКаталогов КАК ИменаФайловИКаталогов
	|		ГДЕ
	|			ИменаФайловИКаталогов.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.ТипыОбъектов.Организация)) КАК МаскаОрганизация
	|		ПО НастраиваемыйОтчет.Организация = МаскаОрганизация.Объект";
	
	Для Инд=1 По ПараметрыСеанса.ЧислоДопАналитик Цикл
		
		Запрос.Текст = Запрос.Текст + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ
		|			РегистрСведений.ИменаФайловИКаталогов КАК МаскаАналитика" + Инд + "
		|		ПО 
		|			МаскаАналитика" + Инд + ".ТипОбъекта = НастраиваемыйОтчет.ВидОтчета.ВидАналитики" + Инд + "
		|		  И МаскаАналитика" + Инд + ".Объект     = НастраиваемыйОтчет.Аналитика" + Инд;
		
		Запрос.УстановитьПараметр("Аналитика"+Инд,Перечисления.ТипыОбъектов["Аналитика"+Инд]);
	КонецЦикла;

	Запрос.Текст = Запрос.Текст + "
	|ГДЕ
	|	ЭтапыПроцессовФормируемыеДокументы.Ссылка = &ЭтапПроцесса
	|И ЭтапыПроцессовФормируемыеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЭтапа.ЭкземплярыОтчетов)";
	Запрос.УстановитьПараметр("ЭтапПроцесса", ЭтапПроцесса);
	Запрос.УстановитьПараметр("Организация" , Организация);
	Запрос.УстановитьПараметр("Период"      , ПериодСценария);
	Запрос.УстановитьПараметр("Сценарий"    , Сценарий);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции		// ВернутьТаблицуИменФайлов()

Процедура УтвердитьДокументыПоЭтапу(ТекущиеДанные, ОсновныеРеквизиты, Отказ, ШапкаОшибки) Экспорт
	
	Если НЕ РольДоступна("ПолныеПрава") И ЗначениеЗаполнено(ТекущиеДанные.ОтветственныйЗаЭтап) И НЕ ТекущиеДанные.ОтветственныйЗаЭтап = ОбщегоНазначенияУХ.ПолучитьЗначениеПеременной("глТекущийПользователь") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодОтчета",	ОсновныеРеквизиты.ПериодСценария);
	Запрос.УстановитьПараметр("Сценарий",		ОсновныеРеквизиты.Сценарий);
	Запрос.УстановитьПараметр("Организация",	ТекущиеДанные.Организация);
	Запрос.УстановитьПараметр("Этап",			ТекущиеДанные.Этап);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастраиваемыйОтчет.Ссылка КАК НастраиваемыйОтчет
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыПроцессовФормируемыеДокументы
	|		ПО (НастраиваемыйОтчет.ВидОтчета = (ВЫРАЗИТЬ(ЭтапыПроцессовФормируемыеДокументы.ШаблонДокумента КАК Справочник.ВидыОтчетов)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(
	|				,
	|				Объект.Организация = &Организация
	|					И Объект.ПериодОтчета = &ПериодОтчета
	|					И Объект.Сценарий = &Сценарий) КАК РегистрСостоянийОбъектов
	|		ПО НастраиваемыйОтчет.Ссылка = РегистрСостоянийОбъектов.Объект
	|ГДЕ
	|	НастраиваемыйОтчет.Организация = &Организация
	|	И НастраиваемыйОтчет.ПериодОтчета = &ПериодОтчета
	|	И НастраиваемыйОтчет.Сценарий = &Сценарий
	|	И ЭтапыПроцессовФормируемыеДокументы.Ссылка = &Этап
	|	И ЭтапыПроцессовФормируемыеДокументы.ВидДокумента = ЗНАЧЕНИЕ(Перечисление.ВидыДокументовЭтапа.ЭкземплярыОтчетов)
	|	И НЕ ЕСТЬNULL(РегистрСостоянийОбъектов.СостояниеОбъекта, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ЧтениеНеактуальныхЗаписей = Не Константы.ПроверятьУтверждениеДанных.Получить();
	
	Пока Выборка.Следующий() Цикл
		
		ОтчетОбъект = Выборка.НастраиваемыйОтчет.ПолучитьОбъект();
		ОтчетОбъект.ЧтениеНеактуальныхЗаписей = ЧтениеНеактуальныхЗаписей;
		ОтчетОбъект.Состояние = Перечисления.СостоянияОтчетов.Утвержден;
		
		Попытка
			ОтчетОбъект.Записать();
		Исключение
			ТекстСообщения = НСтр("ru = 'Не удалось записать документ %ОтчетОбъект%'");
			ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОтчетОбъект%", Строка(ОтчетОбъект));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, Отказ, ШапкаОшибки, СтатусСообщения.Внимание);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры // УтвердитьДокументыПоЭтапу()

Функция ОбработкаЭкземпляровОтчетов(ТекущиеДанные,ОсновныеРеквизиты, ВидОтчета, ПробныйПроцесс, Обязательный = Ложь) Экспорт
	
	Перем Сценарий;
	Перем ПериодСценария;
	Перем ШаблонПроцесса;
	
	ОсновныеРеквизиты.Свойство("Сценарий", 			Сценарий);
	ОсновныеРеквизиты.Свойство("ПериодСценария",	ПериодСценария);
	ОсновныеРеквизиты.Свойство("ШаблонПроцесса", 	ШаблонПроцесса);
			
	ВерсияОрганизационнойСтруктуры = ПолныеПраваУХ.ВернутьВерсиюОрганизационнойСтруктурыПоПериодСценарию(ПериодСценария, Сценарий);
		
	ДанныеДляЗаполнения = УправлениеОтчетамиУХ.ПолучитьСоответствияПараметровОтчета(ВидОтчета, Сценарий
													, ТекущиеДанные.Организация
													, ПериодСценария
													, ВерсияОрганизационнойСтруктуры);			
			
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастраиваемыйОтчет.Ссылка КАК НастраиваемыйОтчет,
	|	НастраиваемыйОтчет.ВидОтчета КАК ВидОтчета,
	|	НастраиваемыйОтчет.ШаблонОтчета КАК ШаблонОтчета,
	|	НастраиваемыйОтчет.ПометкаУдаления КАК ПометкаУдаления,
	|	ЕСТЬNULL(РегистрСостоянийОбъектов.СостояниеОбъекта, НЕОПРЕДЕЛЕНО) КАК Состояние,
	|	НастраиваемыйОтчет.НеВноситьИзменения КАК НеВноситьИзменения
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(
	|				,
	|				Объект.Организация = &Организация
	|					И Объект.ПериодОтчета = &ПериодОтчета
	|					И Объект.Сценарий = &Сценарий
	|					И Объект.ВидОтчета = &ВидОтчета) КАК РегистрСостоянийОбъектов
	|		ПО НастраиваемыйОтчет.Ссылка = РегистрСостоянийОбъектов.Объект
	|ГДЕ
	|	НастраиваемыйОтчет.Организация = &Организация
	|	И НастраиваемыйОтчет.ПериодОтчета = &ПериодОтчета
	|	И НастраиваемыйОтчет.Сценарий = &Сценарий
	|	И НастраиваемыйОтчет.ВидОтчета = &ВидОтчета";
	
	Запрос.УстановитьПараметр("Организация",    ТекущиеДанные.Организация);
	Запрос.УстановитьПараметр("ПериодОтчета",	ПериодСценария);
	Запрос.УстановитьПараметр("Сценарий",       Сценарий);
	Запрос.УстановитьПараметр("ВидОтчета",      ВидОтчета);
	
	Рез = Запрос.Выполнить();
	
	Если Рез.Пустой() Тогда
		
		Если ПробныйПроцесс Тогда
			
			НастраиваемыйОтчет = Документы.НастраиваемыйОтчет.СоздатьДокумент();
			
			Если ПробныйПроцесс Тогда
				НастраиваемыйОтчет.ЧтениеНеактуальныхЗаписей = Истина;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(НастраиваемыйОтчет, ДанныеДляЗаполнения);

			Если НастраиваемыйОтчет.ПравилоОбработки = Неопределено Тогда
				ТекстСообщения = НСтр("ru = 'Формируемый отчет для вида отчета: %ВидОтчетаНаименование% не может быть записан. Не установлено правило обработки по умолчанию.'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидОтчетаНаименование%", Строка(ВидОтчета.Наименование));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				Возврат Ложь;
			КонецЕсли;
			
			Если НастраиваемыйОтчет.ПравилоОбработки.ТипБД <> Справочники.ТипыБазДанных.ПустаяСсылка() Тогда
				
				НастраиваемыйОтчет.ИспользуемаяИБ = ДанныеДляЗаполнения.ВИБ;
				
				Если НЕ ЗначениеЗаполнено(НастраиваемыйОтчет.ИспользуемаяИБ) Тогда
					ТекстСообщения = НСтр("ru = 'Формируемый отчет для вида отчета: %ВидОтчетаНаименование%
                                          | не может быть записан. Не установлена используемая внешняя информационная база по умолчанию.'");
					ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ВидОтчетаНаименование%", Строка(ВидОтчета.Наименование));
					ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
					Возврат Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			НастраиваемыйОтчет.ШаблонОтчета = ДанныеДляЗаполнения.БланкОтчета;
			НастраиваемыйОтчет.мНеПрерыватьИмпортПриОшибкахВычисления = Ложь; 
			
			НастраиваемыйОтчет.УстановитьНовыйНомер();
			НастраиваемыйОтчет.Дата           = ?(ЗначениеЗаполнено(ТекущиеДанные.ДатаНачалаРасчетная), ТекущиеДанные.ДатаНачалаРасчетная, ТекущаяДата());
			НастраиваемыйОтчет.ВидОтчета      = ВидОтчета;
			НастраиваемыйОтчет.Организация    = ТекущиеДанные.Организация;
			НастраиваемыйОтчет.Сценарий       = Сценарий;
			НастраиваемыйОтчет.ПериодОтчета   = ПериодСценария;
			
			СтруктураВалют = УправлениеОтчетамиУХ.ОпределитьВалютыОтчета(ВерсияОрганизационнойСтруктуры, ВидОтчета, ТекущиеДанные.Организация);
			НастраиваемыйОтчет.ОсновнаяВалюта = СтруктураВалют.ОсновнаяВалюта;
			
			Для Каждого ДопВалюта Из СтруктураВалют.ДополнительныеВалюты Цикл
				НастраиваемыйОтчет.ДополнительныеВалюты.Добавить().Валюта = ДопВалюта.Значение;
			КонецЦикла;
			
			НастраиваемыйОтчет.Заполнить(ДанныеДляЗаполнения.БланкОтчета);
			
			Если НастраиваемыйОтчет.ЗаполнитьОтчетПоУмолчанию() Тогда
				НастраиваемыйОтчет.Состояние = Перечисления.СостоянияОтчетов.Подготовлен;
			Иначе
				НастраиваемыйОтчет.Состояние = Перечисления.СостоянияОтчетов.Выполняется;
			КонецЕсли;
			НастраиваемыйОтчет.ДополнительныеСвойства.Вставить("СостояниеСогласования", НастраиваемыйОтчет.Состояние);
			
			Попытка
				НастраиваемыйОтчет.Записать();
			Исключение
				ТекстСообщения = НСтр("ru = 'Не удалось записать документ %НастраиваемыйОтчет%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НастраиваемыйОтчет%", Строка(НастраиваемыйОтчет));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Внимание);
				Возврат Ложь;
			КонецПопытки;
			
		КонецЕсли;
		
	Иначе
		
		Результат=Рез.Выбрать();
		
		Пока Результат.Следующий() Цикл
			
			НастраиваемыйОтчет = Результат.НастраиваемыйОтчет.ПолучитьОбъект();
			
			Если ПробныйПроцесс Тогда
				ЧтениеНеактуальныхЗаписей_Исх = НастраиваемыйОтчет.ЧтениеНеактуальныхЗаписей;
				НастраиваемыйОтчет.ЧтениеНеактуальныхЗаписей = Истина;
			КонецЕсли;
			
			ОтправлятьНаСогласование = Ложь;
			Если Результат.ПометкаУдаления Тогда
				НастраиваемыйОтчет.ПометкаУдаления       = Ложь;
				Если Результат.Состояние = Перечисления.СостоянияОтчетов.Подготовлен
					ИЛИ Результат.Состояние = Перечисления.СостоянияОтчетов.Утвержден Тогда
					
					НастраиваемыйОтчет.ОбменДанными.Загрузка = Истина;
					НастраиваемыйОтчет.ПроверкаПриЗаписи             = Ложь;
					НастраиваемыйОтчет.ФормированиеДвиженийПриЗаписи = Ложь;
					
				Иначе
					
					РезультатЗаполнения = НастраиваемыйОтчет.ЗаполнитьОтчетПоУмолчанию();
					
					Если Не ПробныйПроцесс Тогда
						
						Если РезультатЗаполнения Тогда
							НастраиваемыйОтчет.Состояние = Перечисления.СостоянияОтчетов.Подготовлен;
						Иначе
							НастраиваемыйОтчет.Состояние = Перечисления.СостоянияОтчетов.Выполняется;
						КонецЕсли;
						НастраиваемыйОтчет.ДополнительныеСвойства.Вставить("СостояниеСогласования", НастраиваемыйОтчет.Состояние);
						
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли Результат.Состояние = Перечисления.СостоянияОтчетов.Подготовлен
				ИЛИ Результат.Состояние = Перечисления.СостоянияОтчетов.Утвержден
				ИЛИ Результат.НеВноситьИзменения Тогда
				
				Продолжить;
				
			Иначе
				// Получим режим заполнения отчета.
				ЭлементНастройкиСпособФормирования = Перечисления.ЭлементыНастройкиОтчета.СпособФормированияОтчета;
				ТекущийРежим = УправлениеОтчетамиУХ.НайтиПараметрОтчета(ЭлементНастройкиСпособФормирования, ВидОтчета, Сценарий, ТекущиеДанные.Организация, ПериодСценария, ВерсияОрганизационнойСтруктуры);
				Если ТекущийРежим <> Перечисления.СпособыФормированияОтчетов.РучноеЗаполнение Тогда
					// Отчет заполняется автоматически.
					РезультатЗаполнения = НастраиваемыйОтчет.ЗаполнитьОтчетПоУмолчанию();
					
					Если НЕ ПробныйПроцесс Тогда
						
						Если РезультатЗаполнения Тогда
							Согласующий = МодульУправленияПроцессамиУХ.ПолучитьОтветственногоЗаТипОбъекта(НастраиваемыйОтчет.Ссылка);
							Если (ЗначениеЗаполнено(Согласующий)) И (ТипЗнч(Согласующий) = Тип("СправочникСсылка.ШаблоныУниверсальныхПроцессов")) Тогда
								ОтправлятьНаСогласование = Истина;
							Иначе
								НастраиваемыйОтчет.Состояние = Перечисления.СостоянияОтчетов.Утвержден;
							КонецЕсли;
						Иначе
							НастраиваемыйОтчет.Состояние = Перечисления.СостоянияОтчетов.ЗаписанСОшибкой;
						КонецЕсли;
						Если Не ОтправлятьНаСогласование Тогда
							НастраиваемыйОтчет.ДополнительныеСвойства.Вставить("СостояниеСогласования", НастраиваемыйОтчет.Состояние);
						Иначе
							// Определим состояние отчета в ходе согласования позже.
						КонецЕсли;
						
					КонецЕсли;
				Иначе
					// Не изменяем состояние отчета для ручного заполнения.
					ОтправлятьНаСогласование = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Попытка
				
				Если ПробныйПроцесс Тогда
					НастраиваемыйОтчет.ЧтениеНеактуальныхЗаписей = ЧтениеНеактуальныхЗаписей_Исх;
				КонецЕсли;
				
				НастраиваемыйОтчет.Записать();
				Если (ОтправлятьНаСогласование) И (НЕ ПробныйПроцесс) Тогда
					МодульУправленияПроцессамиУХ.ПринятьКОбработке(, НастраиваемыйОтчет.Ссылка);
				Иначе
					// Не требуется отправлять нас согласование.
				КонецЕсли;
			Исключение
				
				ТекстСообщения = НСтр("ru = 'Не удалось записать документ %НастраиваемыйОтчет%'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%НастраиваемыйОтчет%", Строка(НастраиваемыйОтчет));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения, , , СтатусСообщения.Внимание);
				Возврат Ложь;
				
			КонецПопытки; 
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции // ОбработкаЭкземпляровОтчетов 

Функция ОбработатьДокументыПоЭтапу(ТекущиеДанные, ОсновныеРеквизиты, ПробныйПроцесс = Ложь, ВидДокумента = Неопределено) Экспорт
	
	Перем Сценарий;
	Перем ПериодСценария;
	Перем ШаблонПроцесса;
	
	Запрос=Новый Запрос;
	Запрос.Текст=
	"ВЫБРАТЬ
	|	ЭтапыПроцессовФормируемыеДокументы.НомерСтроки КАК НомерСтроки,
	|	ЭтапыПроцессовФормируемыеДокументы.ВидДокумента,
	|	ЭтапыПроцессовФормируемыеДокументы.ШаблонДокумента,
	|	ЭтапыПроцессовФормируемыеДокументы.УдалитьОбязательный,
	|	ЭтапыПроцессовФормируемыеДокументы.ДокументБД
	|ИЗ
	|	Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыПроцессовФормируемыеДокументы
	|ГДЕ
	|	ЭтапыПроцессовФормируемыеДокументы.Ссылка = &Этап";
	
	Если ЗначениеЗаполнено(ВидДокумента) Тогда
		
		Запрос.Текст=Запрос.Текст+"
		|И ЭтапыПроцессовФормируемыеДокументы.ВидДокумента=&ВидДокумента";
		
		Запрос.УстановитьПараметр("ВидДокумента",ВидДокумента);
		
	КонецЕсли;
	
	Запрос.Текст=Запрос.Текст+"
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	ОсновныеРеквизиты.Свойство("Сценарий", Сценарий);
	ОсновныеРеквизиты.Свойство("ПериодСценария", ПериодСценария);
	ОсновныеРеквизиты.Свойство("ШаблонПроцесса", ШаблонПроцесса);
	
	Запрос.УстановитьПараметр("Этап",ТекущиеДанные.Этап);
	
	Результат=Запрос.Выполнить().Выбрать();
	НастраиваемыйОтчетДок = Справочники.ДокументыБД.НайтиПоНаименованию("НастраиваемыйОтчет",,,Справочники.ТипыБазДанных.ТекущаяИБ);
	
	Пока Результат.Следующий() Цикл	
		Если Результат.ДокументБД = НастраиваемыйОтчетДок Тогда	
			РезультатОбработки = ОбработкаЭкземпляровОтчетов(ТекущиеДанные, ОсновныеРеквизиты, Результат.ШаблонДокумента, ПробныйПроцесс);
			Если НЕ РезультатОбработки Тогда		
				Возврат Ложь;	
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ОбработатьДокументыПоЭтапу()

Функция ЗапуститьПробныйПроцессДоТекущегоЭтапа(ТекущиеДанные, мПредшественникиСтрок, мПоследователиСтрок, ОсновныеРеквизиты, СостоянияВыполненияПроцесса) Экспорт
	
	Перем Сценарий;
	Перем ПериодСценария;
	Перем ШаблонПроцесса;
	
	ОсновныеРеквизиты.Свойство("Сценарий"      , Сценарий);
	ОсновныеРеквизиты.Свойство("ПериодСценария", ПериодСценария);
	
	Если НЕ ТекущиеДанные.СостояниеЭтапаРасчетное = Перечисления.СостоянияЭтаповПроцессов.Утвержден Тогда
		НовыйИндекс = УправлениеРабочимиПроцессамиУХ.ПолучитьИндексСтрокиТаблицы(ТекущиеДанные);
		Для Каждого ИдентификаторОтчета Из мПредшественникиСтрок[НовыйИндекс] Цикл
			ЗапуститьПробныйПроцессДоТекущегоЭтапа(СостоянияВыполненияПроцесса.НайтиПоИдентификатору(ИдентификаторОтчета), мПредшественникиСтрок, мПоследователиСтрок, ОсновныеРеквизиты, СостоянияВыполненияПроцесса);
		КонецЦикла;
				
		Если ОбработатьДокументыПоЭтапу(ТекущиеДанные, ОсновныеРеквизиты, Истина) Тогда	
			ТекущиеДанные.МодификацияСтроки = 1;
			Возврат Истина;		
		Иначе	
			
			СтрокаШаблона = НСтр("ru = 'Этап ""%1"" по организационной единице ""%2"" не удалось обработать при запуске пробного процесса'");
			Если ЗначениеЗаполнено(СтрокаШаблона) тогда
				ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(СтрокаШаблона, ТекущиеДанные.Этап, ТекущиеДанные.Организация),,, СтатусСообщения.Информация);
			КонецЕсли;
			
			Возврат Ложь;
			
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат Истина;
		
КонецФункции		// ЗапуститьПробныйПроцессДоТекущегоЭтапа()

Функция ПолучитьРабочиеШаблоныДокументов(Период, Сценарий, Этап, Организация, ВидДокумента = Неопределено)
	
	Запрос = Новый Запрос;                                                                                                                
	Запрос.УстановитьПараметр("Период", Период);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("Этап", Этап);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокумента);
	
	КритерийУтвержденияЭтапа = ОбщегоНазначенияУХ.ПолучитьЗначениеРеквизита(Этап, "КритерийУтвержденияЭтапа");
	
	Если КритерийУтвержденияЭтапа = Перечисления.КритерииУтвержденияЭтапаПроцесса.УтвержденыКонтрольныеЭкземплярыОтчетов Тогда		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЭтапыПроцессовФормируемыеДокументы.ШаблонДокумента КАК ШаблонДокумента
		|ИЗ
		|	Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыПроцессовФормируемыеДокументы
		|ГДЕ
		|	ЭтапыПроцессовФормируемыеДокументы.Ссылка = &Этап
		|	И ЭтапыПроцессовФормируемыеДокументы.Контрольный";
		
		Если ЗначениеЗаполнено(ВидДокумента) Тогда
			Запрос.Текст = Запрос.Текст + "
			|И ЭтапыПроцессовФормируемыеДокументы.ВидДокумента = &ВидДокумента";
		КонецЕсли;
		
	ИначеЕсли КритерийУтвержденияЭтапа = Перечисления.КритерииУтвержденияЭтапаПроцесса.УтвержденыЗаполненныеЭкземплярыОтчетов Тогда
		
		Запрос.УстановитьПараметр("ВидДокумента", Перечисления.ВидыДокументовЭтапа.ЭкземплярыОтчетов);
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ВидыОтчетов.ШаблонДокумента КАК ШаблонДокумента
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЭтапыПроцессовФормируемыеДокументы.ШаблонДокумента КАК ШаблонДокумента
		|	ИЗ
		|		Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыПроцессовФормируемыеДокументы
		|	ГДЕ
		|		ЭтапыПроцессовФормируемыеДокументы.Ссылка = &Этап
		|		И ЭтапыПроцессовФормируемыеДокументы.ВидДокумента = &ВидДокумента) КАК ВидыОтчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			НастраиваемыйОтчет.ВидОтчета КАК ВидОтчета
		|		ИЗ
		|			Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
		|		ГДЕ
		|			НастраиваемыйОтчет.Организация = &Организация
		|			И НастраиваемыйОтчет.ПериодОтчета = &Период
		|			И НастраиваемыйОтчет.Сценарий = &Сценарий
		|			И НЕ НастраиваемыйОтчет.ПометкаУдаления) КАК ЭкземплярыОтчетов
		|		ПО ВидыОтчетов.ШаблонДокумента = ЭкземплярыОтчетов.ВидОтчета";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЭтапыПроцессовФормируемыеДокументы.ШаблонДокумента КАК ШаблонДокумента
		|ИЗ
		|	Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыПроцессовФормируемыеДокументы
		|ГДЕ
		|	ЭтапыПроцессовФормируемыеДокументы.Ссылка = &Этап";
		
		Если ЗначениеЗаполнено(ВидДокумента) Тогда
			Запрос.Текст = Запрос.Текст + "
			|И ЭтапыПроцессовФормируемыеДокументы.ВидДокумента = &ВидДокумента";
		КонецЕсли;
		
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ШаблонДокумента");
	
КонецФункции		// ПолучитьРабочиеШаблоныДокументов()

Функция СуществуютНеУтвержденныеОтчеты(Период, Сценарий, Этап, Организация)
	
	МассивОтчетов = ПолучитьРабочиеШаблоныДокументов(Период, Сценарий, Этап, Организация, Перечисления.ВидыДокументовЭтапа.ЭкземплярыОтчетов);
	
	Если МассивОтчетов = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодОтчета", 	Период);
	Запрос.УстановитьПараметр("Сценарий", 		Сценарий);
	Запрос.УстановитьПараметр("Организация",	Организация);
	Запрос.УстановитьПараметр("ВидыОтчета",		МассивОтчетов);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	НастраиваемыйОтчет.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втЭкземпляры
	|ИЗ
	|	Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|ГДЕ
	|	НастраиваемыйОтчет.Организация = &Организация
	|	И НастраиваемыйОтчет.ПериодОтчета = &ПериодОтчета
	|	И НастраиваемыйОтчет.Сценарий = &Сценарий
	|	И НастраиваемыйОтчет.ВидОтчета В(&ВидыОтчета)
	|	И НЕ НастраиваемыйОтчет.ПометкаУдаления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК Поле1
	|ИЗ
	|	втЭкземпляры КАК НастраиваемыйОтчет
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(
	|				,
	|				Объект В
	|					(ВЫБРАТЬ
	|						т.Ссылка
	|					ИЗ
	|						втЭкземпляры КАК т)) КАК РегистрСостоянийОбъектов
	|		ПО НастраиваемыйОтчет.Ссылка = РегистрСостоянийОбъектов.Объект
	|ГДЕ
	|	НЕ ЕСТЬNULL(РегистрСостоянийОбъектов.СостояниеОбъекта, НЕОПРЕДЕЛЕНО) = ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден)";
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции		// СуществуютНеУтвержденныеОтчеты()

Функция СуществуютНеУтвержденныеКорректировки(Период, Сценарий, Этап, Организация)
	
	Возврат Ложь;
	
КонецФункции		// СуществуютНеУтвержденныеКорректировки()

Процедура ВыполнитьОбработкуЭкземпляраОтчета(РабочийОбъект, Реквизиты, ОбновлениеДокумента = Ложь, ПробныйПроцесс = Ложь, Утвердить = Ложь, СогласовыватьВход = Ложь, СтруктураНастроек = Неопределено, ВыходноеЗначение) Экспорт
	ВыходноеЗначение = ОбработатьЭкземплярОтчета(РабочийОбъект, Реквизиты, ОбновлениеДокумента, ПробныйПроцесс, Утвердить, СогласовыватьВход, СтруктураНастроек);
КонецПроцедуры		// ВыполнитьОбработкуЭкземпляраОтчета()

Процедура ЗаполнитьПустуюСсылкуНаАналитику(ТаблицаАналитики, ВыходноеЗначение) Экспорт
	ВыходноеЗначение = КэшируемыеПроцедурыУХ.ПолучитьПустуюСсылкуПоТаблицеАналитики(ТаблицаАналитики);	
КонецПроцедуры		// ЗаполнитьПустуюСсылкуНаАналитику()

Процедура СоздатьНаборЗаписейСостоянияВыполненияПроцессовУправлениеПериодами(ПериодСценария, Сценарий, ДвиженияСостоянияВыполненияПроцессов) Экспорт
	НаборЗаписей = РегистрыСведений.СостоянияВыполненияПроцессов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПериодСценария.Установить(ПериодСценария);
	НаборЗаписей.Отбор.Сценарий.Установить(Сценарий);
    НаборЗаписей.Загрузить(ДвиженияСостоянияВыполненияПроцессов);
	НаборЗаписей.Записать(Истина);
КонецПроцедуры		// СоздатьНаборЗаписейСостоянияВыполненияПроцессовУправлениеПериодами()

Процедура ВернутьЗапросЗаполненияОбменаМоделями(ПараметрВход, ВыходноеЗначение) Экспорт
	ВыходноеЗначение = "";
	Если ТипЗнч(ПараметрВход) = Тип("СправочникСсылка.ЭтапыУниверсальныхПроцессов") Тогда
		ВыходноеЗначение = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭтапыПроцессовФормируемыеДокументы.ШаблонДокумента КАК Отчет
		|ИЗ
		|	Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыПроцессовФормируемыеДокументы
		|ГДЕ
		|	ЭтапыПроцессовФормируемыеДокументы.Ссылка = &Ссылка
		|	И НЕ ЭтапыПроцессовФормируемыеДокументы.ШаблонДокумента В (&ОтборОтчетов)";
	ИначеЕсли ТипЗнч(ПараметрВход) = Тип("СправочникСсылка.ШаблоныУниверсальныхПроцессов") Тогда
		ВыходноеЗначение = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭтапыПроцессовФормируемыеДокументы.ШаблонДокумента КАК Отчет
		|ИЗ
		|	Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыПроцессовФормируемыеДокументы
		|ГДЕ
		|	ЭтапыПроцессовФормируемыеДокументы.Ссылка.Владелец = &Ссылка
		|	И НЕ ЭтапыПроцессовФормируемыеДокументы.ШаблонДокумента В (&ОтборОтчетов)";
	ИначеЕсли ТипЗнч(ПараметрВход) = Тип("СправочникСсылка.ВидыОтчетов") Тогда
		ВыходноеЗначение = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВидыОтчетов.Ссылка КАК Отчет
		|ИЗ
		|	Справочник.ВидыОтчетов КАК ВидыОтчетов
		|ГДЕ
		|	ВидыОтчетов.Ссылка В ИЕРАРХИИ(&Ссылка)
		|	И НЕ ВидыОтчетов.Ссылка В (&ОтборОтчетов)
		|	И ВидыОтчетов.ЭтоГруппа = ЛОЖЬ";
	Иначе
		ВыходноеЗначение = "";
	КонецЕсли;
КонецПроцедуры		// ВернутьЗапросЗаполненияОбменаМоделями()

Процедура ПолучитьПустойЭкземплярПроцесса(ВыходноеЗначение) Экспорт
	ВыходноеЗначение = Документы.ЭкземплярПроцесса.ПустаяСсылка();
КонецПроцедуры		// ПолучитьПустойЭкземплярПроцесса()

Процедура ПроверитьЭтоШаблонАвтоутверждение(ШаблонВход, ВыходноеЗначение) Экспорт
	ВыходноеЗначение = (ШаблонВход = Справочники.ШаблоныУниверсальныхПроцессов.Автоутверждение);
КонецПроцедуры		// ПроверитьЭтоШаблонАвтоутверждение()

// Возвращает сопоставленную показателю ПоказательВход область данных (ракурс) в экземпляре
// отчета ЭкземплярОтчетаВход. В случае невозможности определить область - вернёт
// пустую ссылку.
Функция ПолучитьОбластьДанныхПоказателя(ПоказательВход, ЭкземплярОтчетаВход) Экспорт
	РезультатФункции = Справочники.ОбластиДанныхВидовОтчетов.ПустаяСсылка();
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	НастройкиСоставаОбластейВидовОтчетов.КлючОбласти КАК КлючОбласти,
	|	НастройкиСоставаОбластейВидовОтчетов.ОрганизационнаяЕдиница КАК ОрганизационнаяЕдиница,
	|	НастройкиСоставаОбластейВидовОтчетов.Проект КАК Проект
	|ИЗ
	|	Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиСоставаОбластейВидовОтчетов КАК НастройкиСоставаОбластейВидовОтчетов
	|		ПО ПоказателиОтчетов.Строка = НастройкиСоставаОбластейВидовОтчетов.СтрокаОтчета
	|ГДЕ
	|	ПоказателиОтчетов.Ссылка = &Ссылка
	|	И НЕ НастройкиСоставаОбластейВидовОтчетов.КлючОбласти.ВключатьВсеПоказателиВидаОтчета
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ОбластиДанныхВидовОтчетов.Ссылка,
	|	ОбластиДанныхВидовОтчетов.Организация,
	|	ОбластиДанныхВидовОтчетов.Проект
	|ИЗ
	|	Справочник.ОбластиДанныхВидовОтчетов КАК ОбластиДанныхВидовОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПоказателиОтчетов КАК ПоказателиОтчетов
	|		ПО ОбластиДанныхВидовОтчетов.Владелец = ПоказателиОтчетов.Владелец
	|ГДЕ
	|	ПоказателиОтчетов.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ПоказательВход);
	РезультатЗапроса = Запрос.Выполнить();
	Выгрузка = РезультатЗапроса.Выгрузить();
	Если Выгрузка.Количество() > 0 Тогда
		ПерваяСтрока = Выгрузка[0];
		РезультатФункции = ПерваяСтрока.КлючОбласти;
	Иначе
		РезультатФункции = Справочники.ОбластиДанныхВидовОтчетов.ПустаяСсылка();
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьОбластьДанныхПоказателя()

// Формирует структуру параметров формы визирвоания для согласования текущем
// пользователем документов из списка СписокДокументовВход.
Функция СформироватьСтруктуруОткрытияФормыВизированияПакетаДокументов(СписокДокументовВход) Экспорт
	// Инициализация.
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("СогласовываемыйДокумент",	 Неопределено);
	РезультатФункции.Вставить("ПакетДокументов",			 Новый СписокЗначений);
	РезультатФункции.Вставить("СписокЗадач",				 Новый СписокЗначений);
	// Получение списка задач.
	МассивЗадач = Справочники.Задачи.ПолучитьЗадачиПользователяПоОбъекту(СписокДокументовВход);
	СписокЗадач = Новый СписокЗначений;
	СписокЗадач.ЗагрузитьЗначения(МассивЗадач);
	// Сформируем результирующую структуру.
	РезультатФункции.Вставить("СогласовываемыйДокумент",	 Неопределено);
	РезультатФункции.Вставить("ПакетДокументов",			 СписокДокументовВход);
	РезультатФункции.Вставить("СписокЗадач",				 СписокЗадач);
	Возврат РезультатФункции;
КонецФункции		// СформироватьСтруктуруОткрытияФормыВизированияПоСпискуДокументов()

// Возвращает картинку для графического отображения состояния процесса СостояниеВход.
Функция ПолучитьКартинкуОтображенияПроцесса(СостояниеВход) Экспорт
	РезультатФункции = БиблиотекаКартинок.ПометкаНовостиФлагКонтур;
	Если (Не ЗначениеЗаполнено(СостояниеВход)) ИЛИ  (СостояниеВход = Перечисления.СостоянияПроцесса.Черновик) Тогда
		РезультатФункции = БиблиотекаКартинок.ПометкаНовостиФлагКонтур;
	ИначеЕсли СостояниеВход = Перечисления.СостоянияПроцесса.Вработе Тогда
		РезультатФункции = БиблиотекаКартинок.ПометкаНовостиФлагСиний;
	ИначеЕсли СостояниеВход = Перечисления.СостоянияПроцесса.Остановлен Тогда	
		РезультатФункции = БиблиотекаКартинок.ПометкаНовостиФлагКрасный;
	ИначеЕсли СостояниеВход = Перечисления.СостоянияПроцесса.Завершен  Тогда	
		РезультатФункции = БиблиотекаКартинок.ПометкаНовостиФлагЗеленый;
	Иначе  
		РезультатФункции = БиблиотекаКартинок.ПометкаНовостиФлагКонтур;	
	КонецЕсли;	
	Возврат РезультатФункции;
КонецФункции		// ПолучитьКартинкуОтображенияПроцесса()

// Возвращает экземпляр процесса, запущенного по версии регламента ВерсияВход
// в периоде ПериодВход и сценарии СценарийВход.
Функция ПолучитьЭкземплярПроцессаСценария(ВерсияВход, ПериодВход, СценарийВход) Экспорт
	РезультатФункции = Документы.ЭкземплярПроцесса.ПустаяСсылка();	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	УправлениеПериодомСценария.Ссылка,
		|	УправлениеПериодомСценария.Сценарий,
		|	УправлениеПериодомСценария.ПериодСценария,
		|	УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры,
		|	ВыполнениеПроцессовСрезПоследних.ДокументПроцесса
		|ИЗ
		|	Документ.УправлениеПериодомСценария КАК УправлениеПериодомСценария
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ВыполнениеПроцессов.СрезПоследних КАК ВыполнениеПроцессовСрезПоследних
		|		ПО УправлениеПериодомСценария.Ссылка = ВыполнениеПроцессовСрезПоследних.ДокументПроцесса.КлючевойОбъектПроцесса
		|ГДЕ
		|	УправлениеПериодомСценария.ПериодСценария = &ПериодСценария
		|	И УправлениеПериодомСценария.Сценарий = &Сценарий
		|	И УправлениеПериодомСценария.ВерсияОрганизационнойСтруктуры = &ВерсияОрганизационнойСтруктуры
		|	И НЕ ВыполнениеПроцессовСрезПоследних.ДокументПроцесса.ПометкаУдаления";
	Запрос.УстановитьПараметр("ВерсияОрганизационнойСтруктуры", ВерсияВход);
	Запрос.УстановитьПараметр("ПериодСценария", ПериодВход);
	Запрос.УстановитьПараметр("Сценарий", СценарийВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатФункции = ВыборкаДетальныеЗаписи.ДокументПроцесса;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьЭкземплярПроцессаСценария()

Процедура ВернутьОбластьДанныхПоказателя(ПоказательВход, ЭкземплярОтчетаВход, ВыходноеЗначение) Экспорт
	ВыходноеЗначение = ПолучитьОбластьДанныхПоказателя(ПоказательВход, ЭкземплярОтчетаВход);
КонецПроцедуры		// ВернутьОбластьДанныхПоказателя()

Процедура ВернутьРакурсСогласованияОбласти(ЭкземплярОтчетаВход, РакурсВход, ОрганизацияВход, ИспользоватьПроектыВход, ВыходноеЗначение) Экспорт
	ВыходноеЗначение = МодульУправленияПроцессамиУХ.ПолучитьРакурсСогласованияОбласти(ЭкземплярОтчетаВход, РакурсВход, ОрганизацияВход, ИспользоватьПроектыВход);
КонецПроцедуры

Процедура ВернутьТребуетсяСогласованиеЭкземпляраОтчета(ЭкземплярОтчетаВход, ВыходноеЗначение) Экспорт
	СостояниеЗаявки = МодульУправленияПроцессамиУХ.ПолучитьОбщийСтатусДляСогласования(ЭкземплярОтчетаВход);
	ПроцессЗапущен = (СостояниеЗаявки="Утвержден" ИЛИ СостояниеЗаявки="НаУтверждении");
	СогласующийОтчета = МодульУправленияПроцессамиУХ.ПолучитьОтветственногоЗаТипОбъекта(ЭкземплярОтчетаВход, , , , , Истина);
	ЕстьСогласующий = ЗначениеЗаполнено(СогласующийОтчета);
	ВыходноеЗначение = (НЕ ПроцессЗапущен) И (ЕстьСогласующий);
КонецПроцедуры

Процедура ПеренестиСтрокиДерева(СтрокиДереваНазначения, СтрокиДереваИсточника)
	
	Для Каждого Строка Из СтрокиДереваИсточника Цикл
		НоваяСтрока = СтрокиДереваНазначения.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		ПеренестиСтрокиДерева(НоваяСтрока.Строки, Строка.Строки);
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьДеревоЗначенийЭтапов(ВерсияОрганизационнойСтруктуры) Экспорт
	
	СписокЗначений = Новый СписокЗначений;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭтапыУниверсальныхПроцессов.Ссылка КАК Ссылка,
	|	ЭтапыУниверсальныхПроцессов.Представление КАК Представление,
	|	ЭтапыУниверсальныхПроцессов.ЭтоГруппа КАК ЭтоГруппа
	|ИЗ
	|	Справочник.ВерсииРегламентовПодготовкиОтчетности КАК ВерсииОрганизационнойСтруктуры
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭтапыУниверсальныхПроцессов КАК ЭтапыУниверсальныхПроцессов
	|		ПО (ЭтапыУниверсальныхПроцессов.Владелец.СвязанныйРегламент = ВерсииОрганизационнойСтруктуры.Ссылка)
	|ГДЕ
	|	ВерсииОрганизационнойСтруктуры.Ссылка = &ВерсияОрганизационнойСтруктуры
	|	И ЭтапыУниверсальныхПроцессов.ТипЭтапа = &ТипЭтапа
	|	И ЭтапыУниверсальныхПроцессов.ПометкаУдаления = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка ИЕРАРХИЯ";
	
	Запрос.УстановитьПараметр("ВерсияОрганизационнойСтруктуры", ВерсияОрганизационнойСтруктуры);
	Запрос.УстановитьПараметр("ТипЭтапа", Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности);

	ВремДеревоЗначений = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ДеревоЗначений = Новый ДеревоЗначений;
	ДеревоЗначений.Колонки.Добавить("Ссылка"       , Новый ОписаниеТипов("СправочникСсылка.ЭтапыУниверсальныхПроцессов"));
	ДеревоЗначений.Колонки.Добавить("Представление", ОбщегоНазначенияУХ.ПолучитьОписаниеТиповСтроки(100));
	ДеревоЗначений.Колонки.Добавить("ЭтоГруппа"    , ОбщегоНазначенияУХ.ПолучитьОписаниеТиповБулево());

	ВсеЭтапыСтрока = ДеревоЗначений.Строки.Добавить();
	ВсеЭтапыСтрока.Ссылка        = NULL;
	ВсеЭтапыСтрока.Представление = НСтр("ru = '(Все этапы)'");
	ВсеЭтапыСтрока.ЭтоГруппа     = Ложь;
	ПеренестиСтрокиДерева(ВсеЭтапыСтрока.Строки, ВремДеревоЗначений.Строки);
	Возврат ДеревоЗначений;
	
КонецФункции

Процедура ВыполнитьПолучениеДереваЗначенийЭтапов(ВерсияОрганизационнойСтруктурыВход, ВыходноеЗначение) Экспорт
	ВыходноеЗначение = ПолучитьДеревоЗначенийЭтапов(ВерсияОрганизационнойСтруктурыВход);
КонецПроцедуры

// Определяет возможность формирование пробной отчетности на этапе ЭтапВход
// по организации ОрганизацияВход по таблице сформированных отчетов
// ТаблицаСформированныхОтчетов.
Функция РазрешеноФормированиеОтчетовПробнойОтчетности(ЭтапВход, ОрганизацияВход, ТаблицаСформированныхОтчетов, СтруктураПараметровВход)
	// Инициализация.
	РезультатФункции = Истина;
	// Получение параметров процесса.
	ВерсияРегламента	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровВход, "ВерсияРегламента", Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка());
	ПериодОтчета		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровВход, "ПериодОтчета", Справочники.Периоды.ПустаяСсылка());
	Сценарий			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровВход, "Сценарий", Справочники.Сценарии.ПустаяСсылка());
	ЭкземплярПроцесса	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровВход, "ЭкземплярПроцесса", Документы.ЭкземплярПроцесса.ПустаяСсылка());
	// Получим предыдущие этапы.
	ТаблицаУтверждения = МодульУправленияПроцессамиУХ.ПолучитьТаблицуУтвержденияПредыдущихЭтапов(ЭтапВход, ОрганизацияВход, ВерсияРегламента, ПериодОтчета, Сценарий, ЭкземплярПроцесса);
	// Убедимся, что необходимые этапы-предшественники присутствуют в таблице сформированных отчетов.
	Для Каждого ТекТаблицаУтверждения Из ТаблицаУтверждения Цикл
		ТекОрганизация	 = ТекТаблицаУтверждения.ОрганизационнаяЕдиница;
		ТекЭтап			 = ТекТаблицаУтверждения.ЭтапПроцесса;
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Организация", ТекОрганизация);
		СтруктураПоиска.Вставить("Этап", ТекЭтап);
		НайденныеСтроки = ТаблицаСформированныхОтчетов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			РезультатФункции = Ложь;
			Прервать;
		Иначе
			// Продолжаем проверку.
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		// РазрешеноФормированиеОтчетовПробнойОтчетности()

// Возвращает массив организаций, которые будут активированы при 
// активации этапа ЭтапПоследователь после этапа ИсходныйЭтап по
// организации ОрганизацияВход.
Функция ВыделитьОрганизацииЭтапаПоследователя(ИсходныйЭтап, ЭтапПоследователь, ОрганизацияВход, ВерсияРегламента, СостоянияВыполненияПроцесса) Экспорт
	РезультатФункции = Новый Массив;
	ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
	Если ЗначениеЗаполнено(ЭтапПоследователь) Тогда
		ПоследовательПодготовкаОтчетности = (ЭтапПоследователь.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности);
		Если ПоследовательПодготовкаОтчетности Тогда
			Если ЗначениеЗаполнено(ИсходныйЭтап) Тогда
				ИсходныйПодготовкаОтчетности = (ИсходныйЭтап.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности);
				Если ИсходныйПодготовкаОтчетности Тогда
					ТипОрганизацииИсходныйОбычная = (ИсходныйЭтап.ТипОрганизацийЭтапа = Перечисления.ТипыОрганизационныхЕдиниц.Обычная);
					ТипОрганизацииПоследовательОбычная = (ЭтапПоследователь.ТипОрганизацийЭтапа = Перечисления.ТипыОрганизационныхЕдиниц.Обычная);
					Если (ТипОрганизацииИсходныйОбычная И ТипОрганизацииПоследовательОбычная) Тогда
						// Оба этапа подготовка отчетности по обычной организации.
						РезультатФункции.Добавить(ОрганизацияВход);
					Иначе
						// Один из этапов не по обычным организациям. Сопоставление указать нельзя - добавляем все.
						СтруктураПоиска = Новый Структура;
						СтруктураПоиска.Вставить("Этап", ЭтапПоследователь);
						НайденныеСтроки = СостоянияВыполненияПроцесса.НайтиСтроки(СтруктураПоиска);
						Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
							ТекОрганизация = ТекНайденныеСтроки.Организация;
							РезультатФункции.Добавить(ТекОрганизация);
						КонецЦикла;
					КонецЕсли;
				Иначе
					// Исходный не подготовка отчетности. Вернём все организации текущего этапа.
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("Этап", ЭтапПоследователь);
					НайденныеСтроки = СостоянияВыполненияПроцесса.НайтиСтроки(СтруктураПоиска);
					Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
						ТекОрганизация = ТекНайденныеСтроки.Организация;
						РезультатФункции.Добавить(ТекОрганизация);
					КонецЦикла;
				КонецЕсли;
			Иначе
				Если ЗначениеЗаполнено(ОрганизацияВход) Тогда
					РезультатФункции.Добавить(ОрганизацияВход);
				Иначе
					СтруктураПоиска = Новый Структура;
					СтруктураПоиска.Вставить("Этап", ЭтапПоследователь);
					НайденныеСтроки = СостоянияВыполненияПроцесса.НайтиСтроки(СтруктураПоиска);
					Для Каждого ТекНайденныеСтроки Из НайденныеСтроки Цикл
						ТекОрганизация = ТекНайденныеСтроки.Организация;
						РезультатФункции.Добавить(ТекОрганизация);
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		Иначе
			// Последователь не подготовка отчетности.
			РезультатФункции.Добавить(ПустаяОрганизация);
		КонецЕсли;
	Иначе
		// Последователь пустой.
		РезультатФункции.Добавить(ПустаяОрганизация);
	КонецЕсли;
	Возврат РезультатФункции;
КонецФункции		// ВыделитьОрганизацииЭтапаПоследователя()

// Выполняет рекурсивное формирование пробной отчетности для последователей этапа 
// ИсходныйЭтапВход, находясь внутри ветки обработки с этапами МассивЭтаповПредшественников.
Процедура СформироватьПробнуюОтчетностьДляПоследователей(ИсходныйЭтапВход, МассивЭтаповПредшественников, ОрганизацияВход, СостоянияВыполненияПроцесса, мПоследователиСтрок, ТаблицаСформированныхОтчетов, СтруктураПараметровВход, ТаблицаОбработанныхВетокИзм, ГлубинаРекурсии = 0)
	Если ГлубинаРекурсии > 10000 Тогда
		Возврат;
	КонецЕсли;
	// Получение параметров процесса.
	ВерсияРегламента	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровВход, "ВерсияРегламента", Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка());
	ПериодОтчета		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровВход, "ПериодОтчета", Справочники.Периоды.ПустаяСсылка());
	Сценарий			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровВход, "Сценарий", Справочники.Сценарии.ПустаяСсылка());
	ЭкземплярПроцесса	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметровВход, "ЭкземплярПроцесса", Документы.ЭкземплярПроцесса.ПустаяСсылка());
	// Получение последователей исходного этапа.
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Этап", ИсходныйЭтапВход);
	СтруктураПоиска.Вставить("Организация", ОрганизацияВход);
	ТекущиеДанные = СостоянияВыполненияПроцесса.НайтиСтроки(СтруктураПоиска);
	Если ТекущиеДанные.Количество() > 0 Тогда
		// Обработка этапа.
		СтруктураПоискаОбработанных = Новый Структура;
		СтруктураПоискаОбработанных.Вставить("Этап", ИсходныйЭтапВход);
		СтруктураПоискаОбработанных.Вставить("Организация", ОрганизацияВход);
		НайденныеСтрокиОбработанные = ТаблицаСформированныхОтчетов.НайтиСтроки(СтруктураПоискаОбработанных);
		Если НайденныеСтрокиОбработанные.Количество() = 0 Тогда
			РезультатОбработки = ОбработатьПробнуюОтчетностьДляЭтапа(ВерсияРегламента, ПериодОтчета, Сценарий, ИсходныйЭтапВход, ОрганизацияВход);
			// Зафиксируем обработку в таблице сформированных отчетов.
			Если РезультатОбработки Тогда
				НоваяСтрока = ТаблицаСформированныхОтчетов.Добавить();
				НоваяСтрока.Организация	 = ОрганизацияВход;
				НоваяСтрока.Этап		 = ИсходныйЭтапВход;
			Иначе
				// Этап не был обработан.
			КонецЕсли;
		Иначе
			// Этап по данной организации обработан ранее. Пропускаем.
		КонецЕсли;
		// Получим этапы-последователи.
		ТЗПоследователей = Неопределено;
		Последователи = МодульУправленияПроцессамиУХ.ПолучитьПоследователейПоОрганизации(ТЗПоследователей, ТекущиеДанные[0], СостоянияВыполненияПроцесса, мПоследователиСтрок, ПериодОтчета, Сценарий, Ложь);
		// Уберем из последователей те этапы, которые не относятся к рассматриваемой ветке.
		МассивПоследователейОчищ = Новый Массив;
		Для Каждого ТекПоследователи Из Последователи Цикл
			ТекЭтапПоследователь = ТекПоследователи.Этап;
			Если МассивЭтаповПредшественников.Найти(ТекЭтапПоследователь) <> Неопределено Тогда
				МассивПоследователейОчищ.Добавить(ТекЭтапПоследователь);
			Иначе
				// Не обработываем эту ветку, т.к. не относится к предшественникам основного этапа.
			КонецЕсли;
		КонецЦикла;
		// Рекурсивно сформируем отчетность по всем последователям.
		Для Каждого ТекМассивПоследователейОчищ Из МассивПоследователейОчищ Цикл
			ОрганизацииАктивации = ВыделитьОрганизацииЭтапаПоследователя(ИсходныйЭтапВход, ТекМассивПоследователейОчищ, ОрганизацияВход, ВерсияРегламента, СостоянияВыполненияПроцесса);
			Для Каждого ТекОрганизацииАктивации Из ОрганизацииАктивации Цикл
				СтруктураПоиска = Новый Структура;
				СтруктураПоиска.Вставить("Этап", ТекМассивПоследователейОчищ);
				СтруктураПоиска.Вставить("Организация", ТекОрганизацииАктивации);
				НайденныеСтроки = ТаблицаОбработанныхВетокИзм.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() = 0 Тогда
					МожноФормировать = РазрешеноФормированиеОтчетовПробнойОтчетности(ТекМассивПоследователейОчищ, ТекОрганизацииАктивации, ТаблицаСформированныхОтчетов, СтруктураПараметровВход);
					Если МожноФормировать Тогда
						// Рекурсивная обработка последователей.
						НоваяСтрока = ТаблицаОбработанныхВетокИзм.Добавить();
						НоваяСтрока.Этап = ТекМассивПоследователейОчищ;
						НоваяСтрока.Организация = ТекОрганизацииАктивации;
						СформироватьПробнуюОтчетностьДляПоследователей(ТекМассивПоследователейОчищ, МассивЭтаповПредшественников, ТекОрганизацииАктивации, СостоянияВыполненияПроцесса, мПоследователиСтрок, ТаблицаСформированныхОтчетов, СтруктураПараметровВход, ТаблицаОбработанныхВетокИзм, ГлубинаРекурсии + 1);
					Иначе
						Продолжить;		// Требуется дополнительная обработка.
					КонецЕсли;
				Иначе
					// Обработано ранее. Пропускаем.
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		// Этап не найден. Пропускаем.
	КонецЕсли;
КонецПроцедуры		// СформироватьПробнуюОтчетностьПоЭтапу()

// Выполняет обработку пробной отчетости на этапе ЭтапПроцессаВход.
Функция ОбработатьПробнуюОтчетностьДляЭтапа(РегламентВход, ПериодОтчетаВход, СценарийВход, ЭтапПроцессаВход, ОрганизацияВход) Экспорт
	РезультатФункции = Ложь;
	Попытка
		Если ЭтапПроцессаВход.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.ЭтапПроцессаПодготовкиОтчетности Тогда
			// Этап Подготовки отчетности. Заполним все отчеты.
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ЗаполнятьДокументы", Истина);
			СтруктураПараметров.Вставить("УстанавливатьСтатусОтчетов", Ложь);
			РезультатФункции = МодульУправленияПроцессамиУХ.ОбработатьДокументыЭтапаПоОрганизации(РегламентВход, ПериодОтчетаВход, СценарийВход, ЭтапПроцессаВход, ОрганизацияВход, Ложь, СтруктураПараметров, Истина);
		ИначеЕсли ЭтапПроцессаВход.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Оповещение Тогда
			// Этап Оповещения. Отправим оповещение.
			ЭкземплярПроцесса = УправлениеПроцессамиСогласованияУХ.ПолучитьЭкземплярПроцессаСценария(РегламентВход, ПериодОтчетаВход, СценарийВход);
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ЭкземплярПроцесса", ЭкземплярПроцесса);
			СтруктураПараметров.Вставить("ТекущийЭтап", ЭтапПроцессаВход);
			МодульОбработкиЭтаповПроцессовСерверУХ.ОбработатьЭтапОповещения(СтруктураПараметров);
			РезультатФункции = Истина;
		ИначеЕсли ЭтапПроцессаВход.ТипЭтапа = Перечисления.ТипыЭтаповУниверсальныхПроцессов.Обработка Тогда
			// Этап Обработка.
			ПустаяОрганизация = Справочники.Организации.ПустаяСсылка();
			Если ЭтапПроцессаВход.РучноеУтверждениеЭтапа Тогда
				РезультатФункции = Истина; 			// Ручное утверждение. Для пробной отчетности не создаём задачу, поэтому просто пропускаем этап.
			Иначе	
				// Выполним код обработки этапа.
				ТекстОшибкиОбработки = "";
				ЭкземплярПроцесса = УправлениеПроцессамиСогласованияУХ.ПолучитьЭкземплярПроцессаСценария(РегламентВход, ПериодОтчетаВход, СценарийВход);
				СтруктураПараметров = Новый Структура;
				СтруктураПараметров.Вставить("ЭкземплярПроцесса", ЭкземплярПроцесса);
				СтруктураПараметров.Вставить("ТекущийЭтап", ЭтапПроцессаВход);
				РезультатФункции = МодульОбработкиЭтаповПроцессовСерверУХ.ОбработатьПроизвольныйКодЭтапа(СтруктураПараметров, ЭтапПроцессаВход.ПроцедураПроцесса, ТекстОшибкиОбработки);
			КонецЕсли;
		Иначе
			РезультатФункции = Ложь;			// Неизвестный вариант этапа. Пропускаем.
		КонецЕсли;	
	Исключение
		// Обработка исключительной ситуации.
		ТекстСообщения = НСтр("ru = 'При обработке этапа %Этап% возникли ошибки: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Этап%", Строка(ЭтапПроцессаВход));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Ложь;
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции		// ОбработатьПробнуюОтчетностьДляЭтапа()

// Формирует пустую структуру параметров процесса подготовки отчётности.
Функция СформироватьСтруктуруПараметровПроцессаПодготовки() Экспорт
	РезультатФункции = Новый Структура;
	РезультатФункции.Вставить("ВерсияРегламента", Справочники.ВерсииРегламентовПодготовкиОтчетности.ПустаяСсылка());
	РезультатФункции.Вставить("ПериодОтчета", Справочники.Периоды.ПустаяСсылка());
	РезультатФункции.Вставить("Сценарий", Справочники.Сценарии.ПустаяСсылка());
	РезультатФункции.Вставить("ЭкземплярПроцесса", Документы.ЭкземплярПроцесса.ПустаяСсылка());
	Возврат РезультатФункции;
КонецФункции		// СформироватьСтруктуруПараметровПроцессаПодготовки()

// Формирует пробную отчетность до этапа ЭтапВход.
Процедура СформироватьПробнуюОтчетностьДоЭтапа(ЭтапВход, СостоянияВыполненияПроцесса, мПоследователиСтрок, СтруктураПараметров) Экспорт
	// Инициализация.
	ТаблицаСформированныхОтчетов = Новый ТаблицаЗначений;
	ТаблицаСформированныхОтчетов.Колонки.Добавить("Организация");
	ТаблицаСформированныхОтчетов.Колонки.Добавить("Этап");
	ТаблицаОбработанныхВетокПробнойОтчетности = Новый ТаблицаЗначений;
	ТаблицаОбработанныхВетокПробнойОтчетности.Колонки.Добавить("Этап");
	ТаблицаОбработанныхВетокПробнойОтчетности.Колонки.Добавить("Организация");
	ПустойЭтап = Справочники.ЭтапыУниверсальныхПроцессов.ПустаяСсылка();
	// Формирвоание структуры параметров процесса.
	ВерсияРегламента	 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ВерсияРегламента", Справочники.ВерсииЗначенийПоказателей.ПустаяСсылка());
	ПериодОтчета		 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "ПериодОтчета", Справочники.Периоды.ПустаяСсылка());
	Сценарий			 = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(СтруктураПараметров, "Сценарий", Справочники.Сценарии.ПустаяСсылка());
	ЭкземплярПроцесса	 = УправлениеПроцессамиСогласованияУХ.ПолучитьЭкземплярПроцессаСценария(ВерсияРегламента, ПериодОтчета, Сценарий);
	СтруктураПараметров.Вставить("ЭкземплярПроцесса", ЭкземплярПроцесса);
	// Получим предшественников текущего этапа.
	МассивПредшественников = УправлениеПроцессамиСогласованияУХПовтИсп.ПолучитьЭтапыПредшественники(ЭтапВход);
	// Дополним предшественников текущим этапов, сформировав ветку маршрута для пробной отчетности.
	ВсеЭтапыПробнойОтчетности = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(МассивПредшественников);
	ВсеЭтапыПробнойОтчетности.Добавить(ЭтапВход);
	// Получим таблицу первых этапов с организациями.
	ТаблицаОрганизацийЭтапа = МодульУправленияПроцессамиУХ.ПолучитьТаблицуАктивацииПоОрганизациям(ЭтапВход.Владелец, ВсеЭтапыПробнойОтчетности);
	Для Каждого ТекТаблицаОрганизацийЭтапа Из ТаблицаОрганизацийЭтапа Цикл
		ТекОрганизация	 = ТекТаблицаОрганизацийЭтапа.ОрганизационнаяЕдиница;
		ТекЭтап			 = ТекТаблицаОрганизацийЭтапа.ЭтапПроцесса;
		// Проверим возможность формирование отчетности по данному этапу.
		ОрганизацииАктивации = ВыделитьОрганизацииЭтапаПоследователя(ПустойЭтап, ТекЭтап, ТекОрганизация, ВерсияРегламента, СостоянияВыполненияПроцесса);
		Для Каждого ТекОрганизацииАктивации Из ОрганизацииАктивации Цикл
			МожноФормировать = РазрешеноФормированиеОтчетовПробнойОтчетности(ТекЭтап, ТекОрганизацииАктивации, ТаблицаСформированныхОтчетов, СтруктураПараметров);
			Если МожноФормировать Тогда
				// Рекурсивная обработка последователей.
				СформироватьПробнуюОтчетностьДляПоследователей(ТекЭтап, ВсеЭтапыПробнойОтчетности, ТекОрганизацииАктивации, СостоянияВыполненияПроцесса, мПоследователиСтрок, ТаблицаСформированныхОтчетов, СтруктураПараметров, ТаблицаОбработанныхВетокПробнойОтчетности);
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры		// СформироватьПробнуюОтчетностьДоЭтапа()

// Выполняет рекурсивную обработку и утверждение отчетности для последователей этапа 
// ИсходныйЭтапВход, находясь внутри ветки обработки с этапами МассивЭтаповПредшественников.
Процедура ВыполнитьПроцессДляПоследователей(ИсходныйЭтапВход, МассивЭтаповПредшественников, ВерсияРегламента, ПериодОтчета, Сценарий, ОрганизацияВход, СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, ЭкземплярПроцессаВход, ГлубинаРекурсии = 0)
	Если ГлубинаРекурсии > 10000 Тогда
		Возврат;
	КонецЕсли;
	// Получение последователей исходного этапа.
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("Этап", ИсходныйЭтапВход);
	СтруктураПоиска.Вставить("Организация", ОрганизацияВход);
	ТекущиеДанные = СостоянияВыполненияПроцесса.НайтиСтроки(СтруктураПоиска);
	СостояниеЗавершен = Перечисления.СостоянияЭтаповПроцессов.Утвержден;
	Если ТекущиеДанные.Количество() > 0 Тогда
		МассивОрганизаций = Новый Массив;
		МассивОрганизаций.Добавить(ОрганизацияВход);
		МассивЭтапов = Новый Массив;
		МассивЭтапов.Добавить(ИсходныйЭтапВход);
		ТаблицаСостояний = МодульУправленияПроцессамиУХ.ПолучитьСостоянияЭтаповПоОрганизациям(МассивОрганизаций, Истина, ВерсияРегламента, МассивЭтапов, ПериодОтчета, Сценарий, ЭкземплярПроцессаВход);
		ТребуетсяОбработка = Истина;
		Для Каждого ТекТаблицаСостояний Из ТаблицаСостояний Цикл
			Если ТекТаблицаСостояний.Состояние = Перечисления.СостоянияЭтаповПроцессов.Утвержден Тогда
				ТребуетсяОбработка = Ложь;
				Прервать;
			Иначе
				// Выполняем поиск далее.
			КонецЕсли;
		КонецЦикла;
		Если ТребуетсяОбработка Тогда
			РезультатОбработки = МодульУправленияПроцессамиУХ.УстановитьСостояниеЭтапаПроцессаОтчетности(
			СостоянияВыполненияПроцесса
			, мПредшественникиСтрок	
			, мПоследователиСтрок	
			, ВерсияРегламента
			, ПериодОтчета
			, Сценарий
			, ИсходныйЭтапВход
			, ОрганизацияВход
			, "Утвержден"
			, Ложь
			, Истина
			, Истина
			, ЭкземплярПроцессаВход
			, Ложь);
		Иначе
			// Этап по данной организации обработан ранее. Пропускаем.
		КонецЕсли;
		// Получим этапы-последователи.
		ТЗПоследователей = Неопределено;
		Последователи = МодульУправленияПроцессамиУХ.ПолучитьПоследователейПоОрганизации(ТЗПоследователей, ТекущиеДанные[0], СостоянияВыполненияПроцесса, мПоследователиСтрок, ПериодОтчета, Сценарий, Ложь);
		// Уберем из последователей те этапы, которые не относятся к рассматриваемой ветке.
		МассивПоследователейОчищ = Новый Массив;
		Для Каждого ТекПоследователи Из Последователи Цикл
			ТекЭтапПоследователь = ТекПоследователи.Этап;
			Если МассивЭтаповПредшественников.Найти(ТекЭтапПоследователь) <> Неопределено Тогда
				МассивПоследователейОчищ.Добавить(ТекЭтапПоследователь);
			Иначе
				// Не обработываем эту ветку, т.к. не относится к предшественникам основного этапа.
			КонецЕсли;
		КонецЦикла;
		// Рекурсивно сформируем отчетность по всем последователям.
		Для Каждого ТекМассивПоследователейОчищ Из МассивПоследователейОчищ Цикл
			ОрганизацииАктивации = ВыделитьОрганизацииЭтапаПоследователя(ИсходныйЭтапВход, ТекМассивПоследователейОчищ, ОрганизацияВход, ВерсияРегламента, СостоянияВыполненияПроцесса);
			Для Каждого ТекОрганизацииАктивации Из ОрганизацииАктивации Цикл
				МожноАктивировать = МожноАктвивироватьЭтапПоследовательВыполненияПроцесса(ТекМассивПоследователейОчищ, ТекОрганизацииАктивации, ВерсияРегламента, ПериодОтчета, Сценарий, ЭкземплярПроцессаВход);
				Если МожноАктивировать Тогда
					ВыполнитьПроцессДляПоследователей(ТекМассивПоследователейОчищ, МассивЭтаповПредшественников, ВерсияРегламента, ПериодОтчета, Сценарий, ТекОрганизацииАктивации, СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, ЭкземплярПроцессаВход, ГлубинаРекурсии + 1);
				Иначе
					Продолжить;		// Требуется дополнительная обработка.
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		// Этап не найден. Пропускаем.
	КонецЕсли;
КонецПроцедуры		// ВыполнитьПроцессДляПоследователей()

// Определяет возможность активирования этапа ЭтапВход исходя из активации предшественников.
Функция МожноАктвивироватьЭтапПоследовательВыполненияПроцесса(ЭтапВход, ОрганизацияВход, ВерсияРегламента, ПериодВход, СценарийВход, ЭкземплярПроцессаВход)
	РезультатФункции = Истина;
	СостояниеЗавершен = Перечисления.СостоянияЭтаповПроцессов.Утвержден;
	ТаблицаПредшественников = МодульУправленияПроцессамиУХ.ПолучитьТаблицуУтвержденияПредыдущихЭтапов(ЭтапВход, ОрганизацияВход, ВерсияРегламента, ПериодВход, СценарийВход, ЭкземплярПроцессаВход);
	Для Каждого ТекТаблицаПредшественников Из ТаблицаПредшественников Цикл
		Если ТекТаблицаПредшественников.Состояние <> СостояниеЗавершен Тогда
			РезультатФункции = Ложь;
			Прервать;
		Иначе
			// Выполняем поиск далее.
		КонецЕсли;
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		// МожноАктвивироватьЭтапПоследовательВыполненияПроцесса()

// Запускает выполнение процесса до этапа ЭтапВход с утверждением всех отчетов.
Процедура ВыполнитьПроцессДоЭтапа(ЭтапВход, ВерсияРегламента, СостоянияВыполненияПроцесса, ПериодВход, СценарийВход, ЭкземплярПроцессаВход, мПредшественникиСтрок, мПоследователиСтрок) Экспорт
	// Инициализация.
	ПустойЭтап = Справочники.ЭтапыУниверсальныхПроцессов.ПустаяСсылка();
	// Получим предшественников текущего этапа.
	МассивПредшественников = УправлениеПроцессамиСогласованияУХПовтИсп.ПолучитьЭтапыПредшественники(ЭтапВход);
	// Дополним предшественников текущим этапов, сформировав ветку маршрута для пробной отчетности.
	ВсеЭтапыПробнойОтчетности = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(МассивПредшественников);
	ВсеЭтапыПробнойОтчетности.Добавить(ЭтапВход);
	// Получим таблицу первых этапов с организациями.
	ТаблицаОрганизацийЭтапа = МодульУправленияПроцессамиУХ.ПолучитьТаблицуАктивацииПоОрганизациям(ЭтапВход.Владелец, ВсеЭтапыПробнойОтчетности);
	Для Каждого ТекТаблицаОрганизацийЭтапа Из ТаблицаОрганизацийЭтапа Цикл
		ТекОрганизация	 = ТекТаблицаОрганизацийЭтапа.ОрганизационнаяЕдиница;
		ТекЭтап			 = ТекТаблицаОрганизацийЭтапа.ЭтапПроцесса;
		// Проверим возможность формирование отчетности по данному этапу.
		ОрганизацииАктивации = ВыделитьОрганизацииЭтапаПоследователя(ПустойЭтап, ТекЭтап, ТекОрганизация, ВерсияРегламента, СостоянияВыполненияПроцесса);
		Для Каждого ТекОрганизацииАктивации Из ОрганизацииАктивации Цикл
			МожноАктивировать = МожноАктвивироватьЭтапПоследовательВыполненияПроцесса(ТекЭтап, ТекОрганизацииАктивации, ВерсияРегламента, ПериодВход, СценарийВход, ЭкземплярПроцессаВход);
			Если МожноАктивировать Тогда
				ВыполнитьПроцессДляПоследователей(ТекЭтап, ВсеЭтапыПробнойОтчетности, ВерсияРегламента, ПериодВход, СценарийВход, ТекОрганизацииАктивации, СостоянияВыполненияПроцесса, мПредшественникиСтрок, мПоследователиСтрок, ЭкземплярПроцессаВход);
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры		// ВыполнитьПроцессДоЭтапа()

Процедура ВыполнитьПолучениеСценарияПериодаПоИсточнику(ИсточникВход, ВыходноеЗначение) Экспорт
	ВыходноеЗначение = МодульУправленияПроцессамиУХ.ПолучитьСценарийПериодПоИсточнику(ИсточникВход);
КонецПроцедуры		// ВыполнитьПолучениеСценарияПериодаПоИсточнику()

// Возвращает массив экземпляров процессов, запущенных по шаблону ШаблонПроцессаВход.
Функция ПолучитьМассивЗапущенныхПроцессов(ШаблонПроцессаВход) Экспорт
	РезультатФункции = Новый Массив;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭкземплярПроцесса.Ссылка,
		|	ЭкземплярПроцесса.ШаблонПроцесса,
		|	ЭкземплярПроцесса.Организация,
		|	ЭкземплярПроцесса.Проект,
		|	ЭкземплярПроцесса.Ответственный,
		|	ЭкземплярПроцесса.КлючевойОбъектПроцесса,
		|	ЭкземплярПроцесса.СостояниеВыполнения
		|ИЗ
		|	Документ.ЭкземплярПроцесса КАК ЭкземплярПроцесса
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			МАКСИМУМ(ЭкземплярПроцесса.Дата) КАК Дата,
		|			ЭкземплярПроцесса.КлючевойОбъектПроцесса КАК КлючевойОбъектПроцесса
		|		ИЗ
		|			Документ.ЭкземплярПроцесса КАК ЭкземплярПроцесса
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ЭкземплярПроцесса.КлючевойОбъектПроцесса) КАК МаксДата
		|		ПО ЭкземплярПроцесса.Дата = МаксДата.Дата
		|			И ЭкземплярПроцесса.КлючевойОбъектПроцесса = МаксДата.КлючевойОбъектПроцесса
		|ГДЕ
		|	ЭкземплярПроцесса.ШаблонПроцесса = &ШаблонПроцесса
		|	И ЭкземплярПроцесса.СостояниеВыполнения = &СостояниеВыполнения";
	Запрос.УстановитьПараметр("СостояниеВыполнения", Перечисления.СостоянияПроцесса.Вработе);
	Запрос.УстановитьПараметр("ШаблонПроцесса", ШаблонПроцессаВход);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		РезультатФункции.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
	Возврат РезультатФункции;
КонецФункции		// ПолучитьМассивЗапущенныхПроцессов()

// Преобразует время в секундах ИсходноеЗначениеВход во время с периодичностью ПериодичностьВход.
Функция ПреобразоватьВремяПоПериодичности(ИсходноеЗначениеВход, ПериодичностьВход) Экспорт 
	РезультатФункции = 0;
	Если ПериодичностьВход = Перечисления.ПериодичностиАнализаПроцессов.Секунды Тогда
		РезультатФункции = ИсходноеЗначениеВход / 1;
	ИначеЕсли ПериодичностьВход = Перечисления.ПериодичностиАнализаПроцессов.Часы Тогда
		РезультатФункции = ИсходноеЗначениеВход / (60*60);
	ИначеЕсли ПериодичностьВход = Перечисления.ПериодичностиАнализаПроцессов.Дни Тогда
		РезультатФункции = ИсходноеЗначениеВход / (60*60*24);
	ИначеЕсли НЕ ЗначениеЗаполнено(ПериодичностьВход) Тогда
		РезультатФункции = ИсходноеЗначениеВход / (60*60);				// По умолчанию в часах.
	Иначе
		ТекстСообщения = НСтр("ru = 'Неизвестная периодичность отображения: %Периодичность%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Периодичность%", Строка(ПериодичностьВход));
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = ИсходноеЗначениеВход;
	КонецЕсли;	
	Возврат РезультатФункции;
КонецФункции		// ПреобразоватьВремяПоПериодичности()

// Производит обработку документа элиминация ЭлиминацияОбъект. Когда
// параметр Утвердить - Истина, также производится перепроведение документа
Функция ОбработатьОбъектЭлиминация(ЭлиминацияОбъект, Утвердить = Ложь)
	РезультатФункции = Истина;
	Попытка
		Если ЭлиминацияОбъект.Ссылка.Пустая() Тогда
			ЭлиминацияОбъект.Записать();
		Иначе
			// Документ уже записан.
		КонецЕсли;
		ДокументСсылка = ЭлиминацияОбъект.Ссылка;
		РезультатЗаполнения = Документы.Элиминация.ЗаполнитьРегистрПроводокДляЭлиминации(ДокументСсылка);
		Если РезультатЗаполнения <> Неопределено Тогда
			РезультатФункции = Ложь;
		Иначе	
			// Протокол ошибкок пустой.
		КонецЕсли;
		Если Утвердить Тогда
			ЭлиминацияОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
			// Не требуется проведение.
		КонецЕсли;
	Исключение 
		ТекстСообщения = НСтр("ru = 'Не удалось обработать документ %Объект%: %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Объект%", Строка(ЭлиминацияОбъект));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Ложь;
	КонецПопытки;	
	Возврат РезультатФункции;
КонецФункции		// ОбработатьОбъектЭлиминация()

Процедура ВыполитьОбработкуЭлиминации(ЭлиминацияОбъект, Утвердить, ВыходноеЗначение = Ложь) Экспорт
	ВыходноеЗначение = ОбработатьОбъектЭлиминация(ЭлиминацияОбъект, Утвердить);
КонецПроцедуры		// ВыполитьОбработкуЭлиминации()

// Создаёт документ Элиминация по заданным параметрам и возвращает объект документа.
// Когда создать не удалось - будет возвращено Неопределено.
Функция СоздатьДокументЭлиминация(ВалютаЭлиминационныхПроводок, Организация, КонсолидирующаяОрганизация, ПериодОтчета, Сценарий)
	РезультатФункции = Неопределено;
	Попытка
		РезультатФункции = Документы.Элиминация.СоздатьДокумент();
		РезультатФункции.УстановитьНовыйНомер();
		РезультатФункции.Дата = ТекущаяДата();
		// Заполним основные измерения.
		РезультатФункции.ВалютаЭлиминационныхПроводок	 = ВалютаЭлиминационныхПроводок;
		РезультатФункции.ОрганизацияДляЭлиминации		 = Организация;
		РезультатФункции.ПериметрДляЭлиминации			 = КонсолидирующаяОрганизация;
		РезультатФункции.ПериодОтчета					 = ПериодОтчета;
		РезультатФункции.Сценарий						 = Сценарий;
	Исключение
		ТекстСообщения = НСтр("ru = 'Не удалось создать документ Элиминация в периоде %Период% по сценарию %Сценарий% для организации %Организация% : %ОписаниеОшибки%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Период%", Строка(ПериодОтчета));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Сценарий%", Строка(Сценарий));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Организация%", Строка(Организация));
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ОписаниеОшибки());
		ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
		РезультатФункции = Неопределено;
	КонецПопытки;
	Возврат РезультатФункции;
КонецФункции		// СоздатьДокументЭлиминация()

Процедура ВыполнитьСозданиеДокументаЭлиминация(ВалютаЭлиминационныхПроводок, Организация, КонсолидирующаяОрганизация, ПериодОтчета, Сценарий, ВыходноеЗначение) Экспорт
	ВыходноеЗначение = СоздатьДокументЭлиминация(ВалютаЭлиминационныхПроводок, Организация, КонсолидирующаяОрганизация, ПериодОтчета, Сценарий);
КонецПроцедуры		// ВыполнитьСозданиеДокументаЭлиминация()

Процедура ПриЗаписиСогласуемогоОбъекта(Источник, Отказ) Экспорт
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;	
	// Проверка полномочий для пометки на удаление согласуемого объекта.        
	Если Источник.ПометкаУдаления Тогда
		ТекСостояниеЗаявки = МодульУправленияПроцессамиУХ.ПолучитьОбщийСтатусДляСогласования(Источник.Ссылка);
		Если (ТекСостояниеЗаявки = "НаУтверждении") ИЛИ (ТекСостояниеЗаявки = "Утвержден") Тогда
			ЦфоОбъекта = Источник.Ссылка;
			ЕстьСуперПользователь = МодульСогласованияДокументовУХ.ЕстьСуперПользователь(ЦфоОбъекта);
			Если ЕстьСуперПользователь Тогда 
				// Снятие с согласования.
				МодульУправленияПроцессамиУХ.ОтменитьСогласование(, Источник.Ссылка);
			Иначе
				ТекстСообщения = НСтр("ru = 'У текущего пользователя недостаточно прав для отмены согласования. Отменить согласование может только пользователь с ролью Суперпользователь. Роли могут быть назначены в функционале ""Ответственные по организациям"".'");
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
				Отказ = Истина;
			КонецЕсли;
		Иначе
			// Нет согласования. Не требуется снимать.
		КонецЕсли;
	Иначе
		// Не изменяем данные по согласованию.
	КонецЕсли;	
КонецПроцедуры		// ПриЗаписиСогласуемогоОбъекта

Процедура ПроверитьУтверждениеПравилРакурсов(ВыходноеЗначение, СсылкаВход, СостояниеВход) Экспорт
	ВыходноеЗначение = Истина;
	Если ТипЗнч(СсылкаВход) = Тип("ДокументСсылка.РакурсДанных") Тогда
		ТекстСообщения = НСтр("ru = 'Не удалось перевести ракурс %Документ% в состояние %Состояние%'");
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", СсылкаВход);
		ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Состояние%", СостояниеВход);
		ВозможноУстановитьСостояние = УправлениеОтчетамиУХ.ВозможноУстановитьСостояние(СсылкаВход, СостояниеВход, ТекстСообщения);
		Если НЕ ВозможноУстановитьСостояние Тогда
			ВыходноеЗначение = Ложь;
		Иначе	
			// Проверка пройдена. Продолжаем выполнение.	
		КонецЕсли;
	Иначе
		// Не ракурс. Не проверяем.
	КонецЕсли;
КонецПроцедуры		// ПроверитьУтверждениеПравилРакурсов()

Процедура ОбновитьИдентификаторыВУзлеУсловногоПерехода(УзелИзм, ТаблицаЗначенийПараметровИзм, ШаблонВход, ГлубинаРекурсииВход = 0) Экспорт
	Если ГлубинаРекурсииВход > 9999 Тогда
		Возврат;
	КонецЕсли;
	Для Каждого ТекУзелИзм Из УзелИзм.Строки Цикл
		ТекУсловиеДействие = ТекУзелИзм.УсловиеДействие;
		Если Лев(ТекУсловиеДействие, 4) = "f()." Тогда
			Если НЕ ЗначениеЗаполнено(ТекУзелИзм.ИдентификаторПерехода) Тогда
				// Выделим имя функции.
				НовыйИдентификатор = Строка(Новый УникальныйИдентификатор);
				ТекУзелИзм.ИдентификаторПерехода = НовыйИдентификатор;
				ПозицияТочки = СтрНайти(ТекУсловиеДействие, ".", , 5);
				Если ПозицияТочки > 5 Тогда
					НаименованиеФункции = Сред(ТекУсловиеДействие, 5, ПозицияТочки - 7);
					// Поиск найденной функции в таблице параметров.
					Для Каждого ТекТаблицаЗначенийПараметровИзм Из ТаблицаЗначенийПараметровИзм Цикл
						Если СокрЛП(ТекТаблицаЗначенийПараметровИзм.Потребитель) = СокрЛП(НаименованиеФункции) Тогда
							ТекТаблицаЗначенийПараметровИзм.ИдентификаторПерехода = НовыйИдентификатор;
						Иначе
							// Выполняем поиск далее.
						КонецЕсли;
					КонецЦикла;	
				Иначе
					// Неизвестный вариант.
				КонецЕсли;
			Иначе
				// Идентификатор уже установлен.
			КонецЕсли;
		ИначеЕсли Лев(ТекУсловиеДействие, 10) = "Источники." Тогда	
			Если НЕ ЗначениеЗаполнено(ТекУзелИзм.ИдентификаторПерехода) Тогда
				// Выделим имя функции.
				НовыйИдентификатор = Строка(Новый УникальныйИдентификатор);
				ТекУзелИзм.ИдентификаторПерехода = НовыйИдентификатор;
				ПозицияТочки = СтрНайти(ТекУсловиеДействие, ".", , 11);
				Если ПозицияТочки > 11 Тогда
					НаименованиеИсточника = Сред(ТекУсловиеДействие, 11, ПозицияТочки - 11);
					Запрос = Новый Запрос;
					Запрос.Текст = 
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
					|	ИсточникиДанныхДляРасчетов.Ссылка КАК Ссылка,
					|	ИсточникиДанныхДляРасчетов.ПотребительРасчета КАК ПотребительРасчета
					|ИЗ
					|	Справочник.ИсточникиДанныхДляРасчетов КАК ИсточникиДанныхДляРасчетов
					|ГДЕ
					|	ИсточникиДанныхДляРасчетов.Наименование = &Наименование
					|	И НЕ ИсточникиДанныхДляРасчетов.ПометкаУдаления
					|	И ИсточникиДанныхДляРасчетов.ПотребительРасчета = &ПотребительРасчета";
					Запрос.УстановитьПараметр("Наименование", НаименованиеИсточника);
					Запрос.УстановитьПараметр("ПотребительРасчета", ШаблонВход);
					РезультатЗапроса = Запрос.Выполнить();
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					Источник = Справочники.ИсточникиДанныхДляРасчетов.ПустаяСсылка();
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						Источник = ВыборкаДетальныеЗаписи.Ссылка;
					КонецЦикла;
					ТекУзелИзм.ИсточникСсылка = Источник;
					// Поиск найденной функции в таблице параметров.
					Для Каждого ТекТаблицаЗначенийПараметровИзм Из ТаблицаЗначенийПараметровИзм Цикл
						Если СокрЛП(ТекТаблицаЗначенийПараметровИзм.Потребитель) = СокрЛП(НаименованиеИсточника) Тогда
							ТекТаблицаЗначенийПараметровИзм.ИдентификаторПерехода = НовыйИдентификатор;
							ТекТаблицаЗначенийПараметровИзм.ИсточникСсылка = Источник;
						Иначе
							// Выполняем поиск далее.
						КонецЕсли;
					КонецЦикла;	
				Иначе
					// Неизвестный вариант.
				КонецЕсли;
			Иначе
				// Идентификатор уже установлен.
			КонецЕсли;
		Иначе
			// Прочие варианты пропускаем.
		КонецЕсли;
		ОбновитьИдентификаторыВУзлеУсловногоПерехода(ТекУзелИзм, ТаблицаЗначенийПараметровИзм, ГлубинаРекурсииВход + 1);
	КонецЦикла;	
КонецПроцедуры		// ОбновитьИдентификаторыВУзлеУсловногоПерехода()	

Процедура ПроверитьПравильностьЗаполненияСтрокиПланаЗакупок(ВыходноеЗначение, СсылкаВход, СостояниеВход) Экспорт
	ВыходноеЗначение = Истина;
	Если ТипЗнч(СсылкаВход) = Тип("ДокументСсылка.СтрокаПланаЗакупок") Тогда
		ВозможноУстановитьСостояние = ЦентрализованныеЗакупкиУХ.ВозможноУстановитьСостояниеСтрокиПланаЗакупок(СсылкаВход, СостояниеВход);
		Если НЕ ВозможноУстановитьСостояние Тогда
			ВыходноеЗначение = Ложь;
		Иначе	
			// Проверка пройдена. Продолжаем выполнение.	
		КонецЕсли;
	Иначе
		// Не строка плана закупок. Не проверяем.
	КонецЕсли;
КонецПроцедуры		// ПроверитьПравильностьЗаполненияСтрокиПланаЗакупок()

Процедура ПроверитьПравильностьЗаполненияПрограммыЗакупок(ВыходноеЗначение, СсылкаВход, СостояниеВход) Экспорт
	ВыходноеЗначение = Истина;
	Если ТипЗнч(СсылкаВход) = Тип("ДокументСсылка.ПрограммаЗакупок") Тогда
		Если СостояниеВход = Перечисления.СтатусыВыгружаемыхОбъектовЕИС.Размещен Тогда
			Если Не ЗначениеЗаполнено(СсылкаВход.РегистрационныйНомер) Тогда
				ВыходноеЗначение = Ложь;
				ТекстСообщения = НСтр("ru = 'В документе %Документ% не установлен Регистрационный номер. Перевод в статус %Статус% невозможен'");
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Документ%", Строка(СсылкаВход));
				ТекстСообщения = СтрЗаменить(ТекстСообщения, "%Статус%", Строка(СостояниеВход));
				ОбщегоНазначенияУХ.СообщитьОбОшибке(ТекстСообщения);
			Иначе
				// Регистрационный номер заполнен. Проверка пройдена.
			КонецЕсли;	
		Иначе
			// Не выполняем проверку для прочих статусов.
		КонецЕсли;
	Иначе
		// Не строка плана закупок. Не проверяем.
	КонецЕсли;
КонецПроцедуры		// ПроверитьПравильностьЗаполненияПрограммыЗакупок()

// Возвращает структуру, содержащую данные для отображения картинки процесса.
Функция ПолучитьСтруктуруДанныхКартинкиОтобрженияПроцесса(СсылкаВход) Экспорт 
	РезультатФункции = Новый Структура;
	СтатусОбъекта = УправлениеПроцессамиСогласованияУХ.ВернутьТекущееСостояние(СсылкаВход);
	НоваяКартинка = УправлениеПроцессамиСогласованияУХ.ПолучитьКартинкуОтображенияПроцесса(СтатусОбъекта);
	РезультатФункции.Вставить("СтатусОбъекта", СтатусОбъекта);
	РезультатФункции.Вставить("Картинка", НоваяКартинка);
	Возврат РезультатФункции;
КонецФункции		 // ПолучитьСтруктуруДанныхКартинкиОтобрженияПроцесса()

// Возваращает таблицу формируемых отчётов по этапам по регламенту ВерсияРегламентаВход для сценария
// СценарийВход и периоду ПериодВход.
Функция ПолучитьТаблицуФормируемыхОтчетовПоРегламенту(ВерсияРегламентаВход, ПериодВход, СценарийВход, ВидДокументаВход = Неопределено) Экспорт
	РезультатФункции = Новый ТаблицаЗначений;
	Запрос = Новый Запрос;
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЭтапыПроцессовФормируемыеДокументы.НомерСтроки КАК НомерСтроки,
	|	ЭтапыПроцессовФормируемыеДокументы.ВидДокумента КАК ВидДокумента,
	|	ЭтапыПроцессовФормируемыеДокументы.ШаблонДокумента КАК ШаблонДокумента,
	|	ЭтапыПроцессовФормируемыеДокументы.ДокументБД КАК ДокументБД,
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница КАК Организация,
	|	ЕСТЬNULL(НастраиваемыйОтчет.Ссылка, ЗНАЧЕНИЕ(Документ.НастраиваемыйОтчет.ПустаяСсылка)) КАК Ссылка,
	|	ЕСТЬNULL(РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта, ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Запланирован)) КАК Состояние,
	|	ЭтапыПроцессовФормируемыеДокументы.Ссылка КАК Этап
	|ИЗ
	|	Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыПроцессовФормируемыеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизационныеЕдиницыЭтаповПроцессов КАК ОрганизационныеЕдиницыЭтаповПроцессов
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.НастраиваемыйОтчет КАК НастраиваемыйОтчет
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних КАК РегистрСостоянийОбъектовСрезПоследних
	|				ПО НастраиваемыйОтчет.Ссылка = РегистрСостоянийОбъектовСрезПоследних.Объект
	|			ПО ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница = НастраиваемыйОтчет.Организация
	|				И (НастраиваемыйОтчет.ПериодОтчета = &ПериодОтчета)
	|				И (НастраиваемыйОтчет.Сценарий = &Сценарий)
	|		ПО ЭтапыПроцессовФормируемыеДокументы.Ссылка = ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ВидДокумента = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЭтапыПроцессовФормируемыеДокументы.ВидДокумента = &ВидДокумента
	|		КОНЕЦ
	|	И ОрганизационныеЕдиницыЭтаповПроцессов.ВерсияРегламентаПодготовкиОтчетности = &ВерсияРегламентаПодготовкиОтчетности
	|	И ЭтапыПроцессовФормируемыеДокументы.ДокументБД = &ДокументБдЭкземплярОтчета
	|	И НастраиваемыйОтчет.УправлениеПериодом.ВерсияОрганизационнойСтруктуры = &ВерсияРегламентаПодготовкиОтчетности
	|	И НастраиваемыйОтчет.ВидОтчета = ЭтапыПроцессовФормируемыеДокументы.ШаблонДокумента
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭтапыПроцессовФормируемыеДокументы.НомерСтроки,
	|	ЭтапыПроцессовФормируемыеДокументы.ВидДокумента,
	|	ЭтапыПроцессовФормируемыеДокументы.ШаблонДокумента,
	|	ЭтапыПроцессовФормируемыеДокументы.ДокументБД,
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница,
	|	ЕСТЬNULL(ТрансформационнаяКорректировка.Ссылка, ЗНАЧЕНИЕ(Документ.ТрансформационнаяКорректировка.ПустаяСсылка)),
	|	ВЫБОР
	|		КОГДА ТрансформационнаяКорректировка.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Выполняется)
	|	КОНЕЦ,
	|	ЭтапыПроцессовФормируемыеДокументы.Ссылка
	|ИЗ
	|	Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыПроцессовФормируемыеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизационныеЕдиницыЭтаповПроцессов КАК ОрганизационныеЕдиницыЭтаповПроцессов
	|		ПО ЭтапыПроцессовФормируемыеДокументы.Ссылка = ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ТрансформационнаяКорректировка КАК ТрансформационнаяКорректировка
	|		ПО ЭтапыПроцессовФормируемыеДокументы.ШаблонДокумента = ТрансформационнаяКорректировка.ШаблонКорректировки
	|			И (НЕ ТрансформационнаяКорректировка.ПометкаУдаления)
	|			И (ТрансформационнаяКорректировка.ПериодОтчета = &ПериодОтчета)
	|			И (ТрансформационнаяКорректировка.Сценарий = &Сценарий)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ВидДокумента = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЭтапыПроцессовФормируемыеДокументы.ВидДокумента = &ВидДокумента
	|		КОНЕЦ
	|	И ОрганизационныеЕдиницыЭтаповПроцессов.ВерсияРегламентаПодготовкиОтчетности = &ВерсияРегламентаПодготовкиОтчетности
	|	И ЭтапыПроцессовФормируемыеДокументы.ДокументБД = &ДокументБдТрансформационнаяКорректировка
	|	И ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница = ТрансформационнаяКорректировка.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭтапыПроцессовФормируемыеДокументы.НомерСтроки,
	|	ЭтапыПроцессовФормируемыеДокументы.ВидДокумента,
	|	ЭтапыПроцессовФормируемыеДокументы.ШаблонДокумента,
	|	ЭтапыПроцессовФормируемыеДокументы.ДокументБД,
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница,
	|	ЕСТЬNULL(Трансляция.Ссылка, ЗНАЧЕНИЕ(Документ.Трансляция.ПустаяСсылка)),
	|	ВЫБОР
	|		КОГДА Трансляция.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Выполняется)
	|	КОНЕЦ,
	|	ЭтапыПроцессовФормируемыеДокументы.Ссылка
	|ИЗ
	|	Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыПроцессовФормируемыеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизационныеЕдиницыЭтаповПроцессов КАК ОрганизационныеЕдиницыЭтаповПроцессов
	|		ПО ЭтапыПроцессовФормируемыеДокументы.Ссылка = ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Трансляция КАК Трансляция
	|		ПО ЭтапыПроцессовФормируемыеДокументы.ШаблонДокумента = Трансляция.ШаблонКорректировки
	|			И (НЕ Трансляция.ПометкаУдаления)
	|			И (Трансляция.ПериодОтчета = &ПериодОтчета)
	|			И (Трансляция.Сценарий = &Сценарий)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ВидДокумента = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЭтапыПроцессовФормируемыеДокументы.ВидДокумента = &ВидДокумента
	|		КОНЕЦ
	|	И ОрганизационныеЕдиницыЭтаповПроцессов.ВерсияРегламентаПодготовкиОтчетности = &ВерсияРегламентаПодготовкиОтчетности
	|	И ЭтапыПроцессовФормируемыеДокументы.ДокументБД = &ДокументБдТрансляция
	|	И ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница = Трансляция.Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭтапыПроцессовФормируемыеДокументы.НомерСтроки,
	|	ЭтапыПроцессовФормируемыеДокументы.ВидДокумента,
	|	ЭтапыПроцессовФормируемыеДокументы.ШаблонДокумента,
	|	ЭтапыПроцессовФормируемыеДокументы.ДокументБД,
	|	ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница,
	|	ЕСТЬNULL(Элиминация.Ссылка, ЗНАЧЕНИЕ(Документ.Элиминация.ПустаяСсылка)),
	|	ВЫБОР
	|		КОГДА Элиминация.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Утвержден)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СостоянияОтчетов.Выполняется)
	|	КОНЕЦ,
	|	ЭтапыПроцессовФормируемыеДокументы.Ссылка
	|ИЗ
	|	Справочник.ЭтапыУниверсальныхПроцессов.ФормируемыеДокументы КАК ЭтапыПроцессовФормируемыеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОрганизационныеЕдиницыЭтаповПроцессов КАК ОрганизационныеЕдиницыЭтаповПроцессов
	|		ПО ЭтапыПроцессовФормируемыеДокументы.Ссылка = ОрганизационныеЕдиницыЭтаповПроцессов.ЭтапПроцесса
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.Элиминация КАК Элиминация
	|		ПО (НЕ Элиминация.ПометкаУдаления)
	|			И (Элиминация.ПериодОтчета = &ПериодОтчета)
	|			И (Элиминация.Сценарий = &Сценарий)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ВидДокумента = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЭтапыПроцессовФормируемыеДокументы.ВидДокумента = &ВидДокумента
	|		КОНЕЦ
	|	И ОрганизационныеЕдиницыЭтаповПроцессов.ВерсияРегламентаПодготовкиОтчетности = &ВерсияРегламентаПодготовкиОтчетности
	|	И ЭтапыПроцессовФормируемыеДокументы.ДокументБД = &ДокументБдЭлиминация
	|	И ОрганизационныеЕдиницыЭтаповПроцессов.ОрганизационнаяЕдиница = Элиминация.ОрганизацияДляЭлиминации
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	ОрганизацияРабочий = Справочники.Организации.ПустаяСсылка();
	Если ЗначениеЗаполнено(ВидДокументаВход) Тогда
		Запрос.УстановитьПараметр("ВидДокумента", ВидДокументаВход);
	Иначе	
		Запрос.УстановитьПараметр("ВидДокумента", Неопределено);
	КонецЕсли;
	Запрос.УстановитьПараметр("ВерсияРегламентаПодготовкиОтчетности", ВерсияРегламентаВход);
	Запрос.УстановитьПараметр("ДокументБдТрансляция", Справочники.ДокументыБД.НайтиПоНаименованию("Трансляция"));
	Запрос.УстановитьПараметр("ДокументБдТрансформационнаяКорректировка", Справочники.ДокументыБД.НайтиПоНаименованию("ТрансформационнаяКорректировка"));
	Запрос.УстановитьПараметр("ДокументБдЭлиминация", Справочники.ДокументыБД.НайтиПоНаименованию("Элиминация"));
	Запрос.УстановитьПараметр("ДокументБдЭкземплярОтчета", Справочники.ДокументыБД.НайтиПоНаименованию("НастраиваемыйОтчет"));
	Запрос.УстановитьПараметр("ОрганизационнаяЕдиница", ОрганизацияРабочий);
	Запрос.УстановитьПараметр("ПериодОтчета", ПериодВход);
	Запрос.УстановитьПараметр("Сценарий", СценарийВход);
	Запрос.Текст = ТекстЗапроса;
	РезультатЗапроса = Запрос.Выполнить();	
	РезультатФункции = РезультатЗапроса.Выгрузить();
	Возврат РезультатФункции;
КонецФункции		// ПолучитьТаблицуФормируемыхОтчетовНаЭтапе()
