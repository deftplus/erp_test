
#Область ПрограммныйИнтерфейс

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Функция возвращает объект-проверку
Функция Создать() Экспорт
	
	Проверка = КонтрольУХ.Новый_Проверка();
	Проверка.Объект = КонтрольУХВзаиморасчетыПоДоговору;
	Проверка.Источник = ИмяИсточника();
	Проверка.ВидКонтроля = ПланыВидовХарактеристик.ВидыКонтроляДокументов.КонтрольМаксимальнойСуммыЗадолженностиПоДоговору;
	Проверка.ИмяРеквизита = "ЕстьПревышениеЛимитыВзаиморасчеты";
	
	Возврат Проверка;
	
КонецФункции

// Функция возвращает Истина, если для этого документа проверка выполняется
Функция ТребуетсяДляДокумента(ИмяДокумента) Экспорт
	
	//Возврат ИмяДокумента = "ЗаявкаНаРасходованиеДенежныхСредств"
	//	ИЛИ ИмяДокумента = "ОжидаемоеПоступлениеДенежныхСредств";
	Возврат Истина;
	
КонецФункции

// Функция возвращает Истина, если требуется выполнение проверки исходя из данных источника
Функция ТребуетсяПроверка(ПараметрыКонтроля, Источник) Экспорт
	
	Если ТипЗнч(Источник) <> Тип("Структура") ИЛИ НЕ Источник.Свойство("Договор") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ЗначениеЗаполнено(Источник.Договор);
	
КонецФункции

// Функция выполняет обработку данных источника
Функция ОбработатьДанныеИсточника(ИнформацияДляКонтроля, Источник) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	//
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Для Каждого КлючЗначение Из Источник Цикл
		Если ТипЗнч(КлючЗначение.Значение) = Тип("ТаблицаЗначений") Тогда
			Продолжить;
		КонецЕсли;
		Запрос.УстановитьПараметр(КлючЗначение.Ключ, КлючЗначение.Значение);
	КонецЦикла;
	
	//
	ОбщегоНазначенияОПК.ЗагрузитьТаблицуВоВременнуюТаблицуЗапроса(
		Запрос, "ВТ_РасшифровкаПлатежа", Источник.РасшифровкаПлатежа);
		
	ТекстыЗапросов = Новый Массив;
	
	ТекстыЗапросов.Добавить(КонтрольУХВстраивание.ТекстЗапроса_ВзаиморасчетыПоДоговору_ЗаявленоИзменение());
	ТекстыЗапросов.Добавить(ТекстЗапроса_ЛимитЗадолженностиПоДоговору());
	ТекстыЗапросов.Добавить(КонтрольУХВстраивание.ТекстЗапроса_ВзаиморасчетыПоДоговору_Факт());
	ТекстыЗапросов.Добавить(КонтрольУХВстраивание.ТекстЗапроса_ВзаиморасчетыПоДоговору_Заявлено());
	ТекстыЗапросов.Добавить(ТекстЗапроса_ИтоговыйЗапрос());
	
	Запрос.Текст = СтрСоединить(ТекстыЗапросов, ОбщегоНазначенияОПК.ТекстРазделителяЗапросовПакета());
	
	Данные = Запрос.Выполнить().Выгрузить();
	
	Возврат Данные;
	
КонецФункции

// Процедура выполняет контроль обработанных данных
Функция ВыполнитьКонтроль(ИнформацияДляКонтроля, ДанныеДляКонтроля) Экспорт
	
	КонтрольНарушен = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеДляКонтроля) Тогда
		Для Каждого Строка Из ДанныеДляКонтроля Цикл
			КонтрольНарушен = КонтрольНарушен ИЛИ Строка.КонтрольНарушен;
		КонецЦикла;
	КонецЕсли;
	
	Возврат КонтрольНарушен;
	
КонецФункции

// Функция возвращает Истина, если нарушение контроля должно приводить к блокированию проведения
Функция БлокироватьПроведение(КлючКонтроля) Экспорт
	
	РежимКонтроля = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПланыВидовХарактеристик.ВидыКонтроляДокументов.КонтрольМаксимальнойСуммыЗадолженностиПоДоговору, "РежимКонтроля");
	Возврат РежимКонтроля = Перечисления.РежимыКонтроляДокументов.Блокировать
	
КонецФункции

// Возвращает имя источника для проверки
//
Функция ИмяИсточника() Экспорт
	
	Возврат "ЗадолженностьПоДоговору";
	
КонецФункции

// Процедура возвращает табличный документ с расшифровкой контроля документа
//
Функция СформироватьРасшифровкуКонтроля(Проверка, СтрокаКонтроль) Экспорт
	
	РезультатКонтроля = ПолучитьИзВременногоХранилища(СтрокаКонтроль.АдресРезультата);
	ДанныеКонтроля = РезультатКонтроля.Скопировать();
	
	// КОНТРОЛЬ ЗАДОЛЖЕННОСТИ ПО ДОГОВОРУ
	ДанныеКонтроля.Колонки.Добавить("КонтрагентПредставление");
	ВсеРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
		ДанныеКонтроля.ВыгрузитьКолонку("Контрагент"), "Наименование, НаименованиеПолное");
	Для Каждого Строка Из ДанныеКонтроля Цикл
		Реквизиты = ВсеРеквизиты[Строка.Контрагент];
		Если Реквизиты = неопределено Тогда
			Строка.КонтрагентПредставление = НСтр("ru = 'Не указан'");
		ИначеЕсли ЗначениеЗаполнено(Реквизиты.НаименованиеПолное) Тогда
			Строка.КонтрагентПредставление = Реквизиты.НаименованиеПолное;
		Иначе
			Строка.КонтрагентПредставление = Реквизиты.Наименование;
		КонецЕсли;
	КонецЦикла;
	
	Возврат СформироватьОтчетКонтрольВзаиморасчетовПоДоговору(СтрокаКонтроль, ДанныеКонтроля);
	
КонецФункции
	
// Процедура сохраняет данные для контроля в табличной части документа
//
// Параметры:
//  ДанныеДляКонтроля	- Таблица значений	- Результат контроля
//  РезультатыКонтроля	- ТабличнаяЧасть	- табличная часть РезультатыКонтроля проверяемого документа
//
Процедура СохранитьДанныеДляКонтроляВДокументе(ДанныеДляКонтроля, РезультатыКонтроля) Экспорт
	
	Инфо = РегистрыСведений.АналитикаКонтроляПоДоговорам.ИнформацияОКлюче();
	ИменаПолей = КонтрольУХКлючи.ИменаПолейКоллекцииПоУмолчанию(Инфо);
	ИменаПолей.АналитикаКонтроляПоДоговорам = "КлючКонтроля";
	
	КонтрольУХКлючи.ЗаполнитьВКоллекции(Инфо, ДанныеДляКонтроля, ИменаПолей);
	
	// Загрузить результат контроля в тч.РезультатыКонтроля
	Для Каждого Строка Из ДанныеДляКонтроля Цикл
		ЗаполнитьЗначенияСвойств(РезультатыКонтроля.Добавить(), Строка);
	КонецЦикла;
	
КонецПроцедуры // СохранитьДанныеДляКонтроляВДокументе()
	
// Функция возвращает соответствие с описанием колонок таблицы данных контроля, которые получаются из ключа контроля
//
// Возвращаемое значение:
//   Соответствие   - {ИмяКолонки, Структура("ИмяКолонки, ОписаниеТипа, ПутьКДанным")}
//
Функция КолонкиДанныхКонтроля() Экспорт
	
	Колонки = Новый Соответствие;
	КонтрольУХ.ДобавитьКолонкуКонтроля(Колонки, 
		"Организация",
		Метаданные.Справочники.КлючиКонтроляПоДоговорам.Реквизиты.Организация.Тип);
		//Новый ОписаниеТипов("СправочникСсылка.Организации"));
	КонтрольУХ.ДобавитьКолонкуКонтроля(Колонки, 
		"Контрагент",
		Метаданные.Справочники.КлючиКонтроляПоДоговорам.Реквизиты.Контрагент.Тип);
		//Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	КонтрольУХ.ДобавитьКолонкуКонтроля(Колонки, 
		"Договор",
		Метаданные.Справочники.КлючиКонтроляПоДоговорам.Реквизиты.Договор.Тип);
		//Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	КонтрольУХ.ДобавитьКолонкуКонтроля(Колонки, 
		"ВерсияСоглашения",
		Метаданные.Справочники.КлючиКонтроляПоДоговорам.Реквизиты.ВерсияСоглашения.Тип);
		//Новый ОписаниеТипов("ДокументСсылка.ВерсияСоглашенияКоммерческийДоговор"));
	
	Результат = Новый Структура;
	//Результат.Вставить("Источник", "Справочник.КлючиАналитикиУчетаПоПартнерам");
	Результат.Вставить("Источник", "Справочник.КлючиКонтроляПоДоговорам");
	Результат.Вставить("Колонки", Колонки);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СформироватьОтчетКонтрольВзаиморасчетовПоДоговору(СтрокаКонтроль, ДанныеКонтроля) экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	
	Макет = ПланыВидовХарактеристик.ВидыКонтроляДокументов.ПолучитьМакет("КонтрольЛимитовВзаиморасчетовПоДоговору");
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
	ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьПодвалТаблицы = Макет.ПолучитьОбласть("ПодвалТаблицы");
	ОбластьДетальныхЗаписей = Макет.ПолучитьОбласть("Детали");
	
	ТабДок.Очистить();
	ОбластьЗаголовок.Параметры.Документ = СтрокаКонтроль.Документ;
	
	ОбластьЗаголовок.Параметры.ДатаВремяКонтроля = СтрокаКонтроль.ВремяПроверки;
	ОбластьЗаголовок.Параметры.ТекущееВремя = ТекущаяДатаСеанса();
	ОбластьЗаголовок.Параметры.ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	ТабДок.Вывести(ОбластьЗаголовок);
	ТабДок.Вывести(ОбластьШапкаТаблицы);

	//
	ТабДок.НачатьАвтогруппировкуСтрок();
	Для каждого Данные Из ДанныеКонтроля Цикл
		ОбластьДетальныхЗаписей.Параметры.Заполнить(Данные);
		ОбластьДетальныхЗаписей.Параметры.ДоступноПослеОперации = 
			Данные.Лимит + Данные.ЛимитИзменение
			- Данные.Исполнено - Данные.ИсполненоИзменение
			- Данные.Зарезервировано - Данные.ЗарезервированоИзменение 
			- Данные.Заявлено - Данные.ЗаявленоИзменение;
		ТабДок.Вывести(ОбластьДетальныхЗаписей);
	КонецЦикла; 
	ТабДок.ЗакончитьАвтогруппировкуСтрок();
	
	//
	ДанныеКонтроля.Свернуть("", "Лимит, Исполнено, Зарезервировано, Заявлено, ЛимитИзменение, ИсполненоИзменение, ЗарезервированоИзменение, ЗаявленоИзменение");
	Если ДанныеКонтроля.Количество()>0 Тогда
		Данные = ДанныеКонтроля[0];
		ОбластьПодвалТаблицы.Параметры.Заполнить(Данные);
		ОбластьПодвалТаблицы.Параметры.ДоступноПослеОперации = 
			Данные.Лимит + Данные.ЛимитИзменение
			- Данные.Исполнено - Данные.ИсполненоИзменение
			- Данные.Зарезервировано - Данные.ЗарезервированоИзменение 
			- Данные.Заявлено - Данные.ЗаявленоИзменение;
	КонецЕсли;
	
	ТабДок.Вывести(ОбластьПодвалТаблицы);
	ТабДок.Вывести(ОбластьПодвал);
	
	Возврат ТабДок;
	
КонецФункции

Функция ТекстЗапроса_ЛимитЗадолженностиПоДоговору()
	
	Возврат
	"ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Организация КАК Организация,
	|	ДоговорыКонтрагентов.Контрагент КАК Контрагент,
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	ДоговорыКонтрагентов.ВалютаВзаиморасчетов КАК Валюта,
	|	ЕСТЬNULL(ДоговорыКонтрагентов.ВерсияСоглашения.ДопустимаяСуммаЗадолженности, 0) КАК Лимит
	|ПОМЕСТИТЬ ВТ_Лимит
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ_ЗаявленоИзменение.Договор
	|			ИЗ
	|				ВТ_ЗаявленоИзменение КАК ВТ_ЗаявленоИзменение)";
	
КонецФункции

Функция ТекстЗапроса_ИтоговыйЗапрос()
	
	Возврат
	"ВЫБРАТЬ
	|	0 КАК НомерСтроки,
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыКонтроляДокументов.КонтрольМаксимальнойСуммыЗадолженностиПоДоговору) КАК ВидКонтроля,
	|	ЗНАЧЕНИЕ(Справочник.КлючиКонтроляПоДоговорам.ПустаяСсылка) КАК КлючКонтроля,
	|	Запрос.Организация КАК Организация,
	|	Запрос.Контрагент КАК Контрагент,
	|	Запрос.Договор КАК Договор,
	|	ВЫРАЗИТЬ(Запрос.Договор КАК Справочник.ДоговорыКонтрагентов).ВерсияСоглашения КАК ВерсияСоглашения,
	|	Запрос.Валюта КАК Валюта,
	|	СУММА(Запрос.Лимит) КАК Лимит,
	|	0 КАК Зарезервировано,
	|	СУММА(Запрос.Заявлено) КАК Заявлено,
	|	СУММА(Запрос.Исполнено) КАК Исполнено,
	|	0 КАК ЛимитИзменение,
	|	0 КАК ЗарезервированоИзменение,
	|	СУММА(Запрос.ЗаявленоИзменение) КАК ЗаявленоИзменение,
	|	0 КАК ИсполненоИзменение,
	|	СУММА(Запрос.Лимит) - СУММА(Запрос.Заявлено) - СУММА(Запрос.Исполнено) - СУММА(Запрос.ЗаявленоИзменение) КАК ДоступноПослеОперации,
	|	СУММА(Запрос.Лимит) - СУММА(Запрос.Заявлено) - СУММА(Запрос.Исполнено) - СУММА(Запрос.ЗаявленоИзменение) < 0 КАК КонтрольНарушен
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_Лимит.Организация КАК Организация,
	|		ВТ_Лимит.Контрагент КАК Контрагент,
	|		ВТ_Лимит.Договор КАК Договор,
	|		ВТ_Лимит.Валюта КАК Валюта,
	|		ВТ_Лимит.Лимит КАК Лимит,
	|		0 КАК Заявлено,
	|		0 КАК Исполнено,
	|		0 КАК ЗаявленоИзменение
	|	ИЗ
	|		ВТ_Лимит КАК ВТ_Лимит
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_Заявлено.Организация,
	|		ВТ_Заявлено.Контрагент,
	|		ВТ_Заявлено.Договор,
	|		ВТ_Заявлено.Валюта,
	|		0,
	|		ВТ_Заявлено.Заявлено,
	|		0,
	|		0
	|	ИЗ
	|		ВТ_Заявлено КАК ВТ_Заявлено
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_Факт.Организация,
	|		ВТ_Факт.Контрагент,
	|		ВТ_Факт.Договор,
	|		ВТ_Факт.Валюта,
	|		0,
	|		0,
	|		ВТ_Факт.Исполнено,
	|		0
	|	ИЗ
	|		ВТ_Факт КАК ВТ_Факт
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_ЗаявленоИзменение.Организация,
	|		ВТ_ЗаявленоИзменение.Контрагент,
	|		ВТ_ЗаявленоИзменение.Договор,
	|		ВТ_ЗаявленоИзменение.Валюта,
	|		0,
	|		0,
	|		0,
	|		ВТ_ЗаявленоИзменение.ЗаявленоИзменение
	|	ИЗ
	|		ВТ_ЗаявленоИзменение КАК ВТ_ЗаявленоИзменение) КАК Запрос
	|
	|СГРУППИРОВАТЬ ПО
	|	Запрос.Организация,
	|	Запрос.Контрагент,
	|	Запрос.Договор,
	|	Запрос.Валюта";
	
КонецФункции

#КонецОбласти

