#Область ПрограммныйИнтерфейс

#Область СоответствиеТиповДокументов_ВНА

Процедура ПриЗаписиДокументаИсточникаВНАПриЗаписи(Источник) Экспорт
	
КонецПроцедуры

#КонецОбласти

#Область Справочник_БанковскиеСчета

Процедура ПередЗаписьюСправочникаБанковскиеСчетаУХПередЗаписью(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		
		Если Не ЗначениеЗаполнено(Источник.ВидСчета) Тогда
			Источник.ВидСчета = "Расчетный";
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Источник.ПроизводственныйКалендарь) Тогда
		Источник.ПроизводственныйКалендарь = Константы.ПроизводственныйКалендарьПоУмолчанию.Получить();
	КонецЕсли;
	
КонецПроцедуры

Процедура БанковскиеСчетаОбработкаПроверкиЗаполненияОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт
	
	
КонецПроцедуры

#КонецОбласти

#Область Справочник_Договоры

// Функция возвращает сумму заключенных спецификаций по договору
//
// Параметры:
//  ДоговорСсылка	 - 	СправочникСсылка.ДоговорыКонтрагентов 
// Возвращаемое значение:
// Число  - Сумма контрактов по договору.
Функция ПолучитьСуммуКонтрактовПоДоговору(ДоговорСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СУММА(ДоговорыКонтрагентов.Стоимость) КАК СуммаКонтракта
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|ГДЕ
	|	ДоговорыКонтрагентов.БазовыйДоговор = &ДоговорСсылка";
	Запрос.УстановитьПараметр("ДоговорСсылка", ДоговорСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Возврат Выборка.СуммаКонтракта;
	КонецЦикла;
	
КонецФункции

Процедура ОбработкаПроверкиЗаполненияДоговорыКонтрагентовУХ(Источник, Отказ, МассивНепроверяемыхРеквизитов) Экспорт
	
	Если Источник.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Источник.ТребуетсяПостановкаНаУчетВалютногоКонтроля Тогда 
		МассивНепроверяемыхРеквизитов.Добавить("УникальныйНомерВалютногоКонтроля");
	КонецЕсли;
	
	Если Не Источник.ФиксированныйСчетОрганизации Тогда
		МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчет");
	КонецЕсли;
	
	Если Не Источник.ФиксированныйСчетКонтрагента Тогда
		МассивНепроверяемыхРеквизитов.Добавить("БанковскийСчетКонтрагента");
	КонецЕсли;
	
	Если Источник.ВидСоглашения <> ПредопределенноеЗначение("Перечисление.ВидыСоглашений.Спецификация") Тогда
		МассивНепроверяемыхРеквизитов.Добавить("БазовыйДоговор");
	КонецЕсли;
	
	Если Не УправлениеДоговорамиУХКлиентСерверПовтИсп.ЭтоДоговорФинансовогоИнструмента(Источник.ВидДоговораУХ) Тогда
		МассивНепроверяемыхРеквизитов.Добавить("ВидФинансовогоИнструмента");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияДоговорыКонтрагентовУХ(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если Источник.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Источник.Ответственный = Пользователи.ТекущийПользователь();
	
	Если (ТипЗнч(ДанныеЗаполнения) = Тип("Структура")) И ДанныеЗаполнения.Свойство("БазовыйДоговор") Тогда
		ЗаполнитьЗначенияСвойств(Источник, ДанныеЗаполнения.БазовыйДоговор, "Владелец,Организация,ВалютаВзаиморасчетов,ВидДоговора,ВидФинансовогоИнструмента,ВидДоговораУХ");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник.ОсновнойЦФО) Тогда
		Источник.ОсновнойЦФО = ОбщегоНазначенияУХ.ПолучитьЗначениеПоУмолчанию("ОсновнойЦФО");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник.ОсновнойПроект) Тогда
		Источник.ОсновнойПроект = ОбщегоНазначенияУХ.ПолучитьЗначениеПоУмолчанию("ОсновнойПроект");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Источник.ВидДоговора) И НЕ ЗначениеЗаполнено(Источник.ВидДоговораУХ) Тогда
		Источник.ВидДоговораУХ = УправлениеДоговорамиУХКлиентСерверПовтИсп.ВидДоговораУХ(Источник.ВидДоговора);
	ИначеЕсли ЗначениеЗаполнено(Источник.ВидДоговораУХ) И Не ЗначениеЗаполнено(Источник.ВидДоговора) Тогда
		Источник.ВидДоговора = УправлениеДоговорамиУХКлиентСерверПовтИсп.ВидДоговораБП(Источник.ВидДоговораУХ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюДоговорыКонтрагентов(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства = Источник.ДополнительныеСвойства;
	
	// Обработка спецификаций договоров.
	Если (Источник.ВидСоглашения = Перечисления.ВидыСоглашений.Спецификация) Тогда
		Если Не ДополнительныеСвойства.Свойство("ПараметрыСвязанныхДоговоровДляОбновления") Тогда
			ДополнительныеСвойства.Вставить("ПараметрыСвязанныхДоговоровДляОбновления", Новый Массив);
		КонецЕсли;
		СвязьСпецификации = РаботаСДоговорамиКонтрагентовУХКлиентСервер.ОписаниеСвязанногоДоговора();
		СвязьСпецификации.ВидСвязи = Справочники.ВидыСвязейОбъектов.Спецификация;
		СвязьСпецификации.БазовыйДоговор = Источник.БазовыйДоговор;
		ДополнительныеСвойства.ПараметрыСвязанныхДоговоровДляОбновления.Добавить(СвязьСпецификации);
	Иначе
		// Не требуется установка связи спецификации договора.
	КонецЕсли;
	
	УстановленнаяПометкаУдаления = ЗначениеЗаполнено(Источник.Ссылка) И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления");
	Источник.ДополнительныеСвойства.Вставить("УстановленнаяПометкаУдаления", УстановленнаяПометкаУдаления);
	
	Если Не ДополнительныеСвойства.Свойство("ЭтоЗаписьИзВерсииСоглашения")
			И УстановленнаяПометкаУдаления = Источник.ПометкаУдаления Тогда
		
		РаботаСДоговорамиКонтрагентовУХ.СоздатьВерсиюСоглашенияПоДоговору(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписиДоговорыКонтрагентов(Источник, Отказ) Экспорт
	
	Если Отказ = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства = Источник.ДополнительныеСвойства;
	
	// обновим записи в регистре "Связанные договоры".
	Если Источник.ДополнительныеСвойства.Свойство("ПараметрыСвязанныхДоговоровДляОбновления") Тогда
	
		Для каждого Связь Из Источник.ДополнительныеСвойства.ПараметрыСвязанныхДоговоровДляОбновления Цикл
			
			Если Не ЗначениеЗаполнено(Связь.БазовыйДоговор) Тогда
				Связь.БазовыйДоговор = Источник.Ссылка;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Связь.ПодчиненныйДоговор) Тогда
				Связь.ПодчиненныйДоговор = Источник.Ссылка;
			КонецЕсли;
			
			РегистрыСведений.СвязанныеДоговоры.ЗаписатьСвязанныеДоговоры(Связь.БазовыйДоговор, Связь.ПодчиненныйДоговор, Связь.ВидСвязи, Отказ);			
			
		КонецЦикла;
		
	КонецЕсли;

	// Пакетно пометим на удаление все версии соглашения
	Если ДополнительныеСвойства.Свойство("УстановленнаяПометкаУдаления") Тогда
		Если ДополнительныеСвойства.УстановленнаяПометкаУдаления И Не Источник.ПометкаУдаления Тогда
			// Сняли пометку удаления.
			ДоговорОбъект = Источник.ВерсияСоглашения.ПолучитьОбъект();
			ДоговорОбъект.УстановитьПометкуУдаления(Ложь);
		ИначеЕсли Источник.ПометкаУдаления И Не ДополнительныеСвойства.УстановленнаяПометкаУдаления Тогда
			// Установили пометку удаления.
			РаботаСДоговорамиКонтрагентовУХ.ПометитьНаУдалениеВерсииСоглашенияДоговора(Источник.Ссылка, Источник.ВидДоговораУХ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Справочник_Контрагенты

Процедура ОбработкаЗаполненияКонтрагентыОбработкаЗаполнения(Источник, ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка) Экспорт
	
	Перем ЭтоНоваяОрганизацияУХ;
	
	Если Источник.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") И ДанныеЗаполнения.Свойство("ЭтоНоваяОрганизацияУХ", ЭтоНоваяОрганизацияУХ) Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ЭтоНоваяОрганизацияУХ", ЭтоНоваяОрганизацияУХ);

		Если ДанныеЗаполнения.Свойство("Организация") Тогда
			ВстраиваниеУХ.ЗаполнитьКонтрагентаПоОрганизации(Источник, ДанныеЗаполнения.Организация);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Источник.ГруппаКонтрагента) Тогда
		Источник.ГруппаКонтрагента = Справочники.ГруппыКонтрагентов.ПолучитьТретьиСтороны();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполненияКонтрагентыУХОбработкаПроверкиЗаполнения(Источник, Отказ, ПроверяемыеРеквизиты) Экспорт

	МассивНепроверяемыхРеквизитов = Новый Массив;
	
	Если НЕ Источник.ЭтоГруппа Тогда
		
		Если НЕ Источник.ОбособленноеПодразделение Тогда
			МассивНепроверяемыхРеквизитов.Добавить("ГоловнойКонтрагент");
		КонецЕсли;
		
		Если Источник.ОбособленноеПодразделение 
			И ЗначениеЗаполнено(Источник.ГоловнойКонтрагент) 
			И Источник.ГоловнойКонтрагент = Источник.Ссылка Тогда
			
			ТекстОшибки	= НСтр("ru = 'Контрагент не может являться своим обособленным подразделением'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Источник, "ГоловнойКонтрагент", , Отказ);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Источник.ГоловнойКонтрагент) И (Источник.ГоловнойКонтрагент <> Источник.Ссылка) Тогда
			
			//актуально для БП
			//МассивПодчиненныхКонтрагентов	= Справочники.Контрагенты.ПолучитьМассивПодчиненныхКонтрагентов(Источник.Ссылка);
			//Если МассивПодчиненныхКонтрагентов.Количество() > 0 Тогда
			//	
			//	ТекстОшибки	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			//		НСтр("ru = 'Контрагент %1 не может иметь головного контрагента, т.к. сам является головным для других контрагентов'"),
			//		Источник.Наименование);
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Источник, "ГоловнойКонтрагент", , Отказ);
			//	
			//Иначе
			//	
			//	СвойстваГоловногоКонтрагента	= ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			//		Источник.ГоловнойКонтрагент, "Наименование, ГоловнойКонтрагент");
			//		
			//	Если ЗначениеЗаполнено(СвойстваГоловногоКонтрагента.ГоловнойКонтрагент)
			//		И СвойстваГоловногоКонтрагента.ГоловнойКонтрагент <> Источник.ГоловнойКонтрагент Тогда
			//		
			//		ТекстОшибки	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			//			НСтр("ru = 'Контрагент %1 не может быть выбран головным, т.к. для него самого назначен головной контрагент'"),
			//			СвойстваГоловногоКонтрагента.Наименование);
			//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Источник, "ГоловнойКонтрагент", , Отказ);
			//		
			//	КонецЕсли;
			//КонецЕсли;
			
		КонецЕсли;
		
		Если Источник.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо Тогда
			
			//актуально для БП
			//МассивОбособленныхПодразделений	= Справочники.Контрагенты.ПолучитьМассивОбособленныхПодразделений(Источник.Ссылка);
			//Если МассивОбособленныхПодразделений.Количество() > 0 Тогда
			//	
			//	ТекстОшибки	= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			//		НСтр("ru = 'Контрагент %1 не может быть физическим лицом, т.к. является головным подразделением для других контрагентов'"),
			//		Источник.Наименование);
			//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, Источник, , , Отказ);
			//	
			//КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);

КонецПроцедуры

Процедура ПередЗаписьюКонтрагентыУХПередЗаписью(Источник, Отказ) Экспорт

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (Источник.ЭтоГруппа ИЛИ ЗначениеЗаполнено(Источник.НаименованиеПолное)) Тогда
		Источник.НаименованиеПолное = Источник.Наименование;
	КонецЕсли;
	
	Если НЕ Источник.ЭтоГруппа Тогда
		
		ЭтоОрганизация = ЗначениеЗаполнено(Источник.ОрганизационнаяЕдиница);
		
		Источник.ВидКонтрагентаДляВГО = ?(ЭтоОрганизация,
											Перечисления.ВидыКонтрагентовДляВГО.ВнутренниеКонтрагенты,
											Перечисления.ВидыКонтрагентовДляВГО.ВнешниеКонтрагенты);

		Если ЭтоОрганизация Тогда
			ВстраиваниеУХ.ЗаполнитьКонтрагентаПоОрганизации(Источник, Источник.ОрганизационнаяЕдиница);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область Справочник_Организации

Процедура ПриСозданииНаСервереУХ_Организации(Форма, Отказ, СтандартнаяОбработка) Экспорт

	//ФормаВыбора
	
	Список = Форма.Список;

	//Оформление Элиминирующие организации
	ЭлементУО = Список.УсловноеОформление.Элементы.Добавить();
	
	ОтборЭлемента = ЭлементУО.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Ссылка.ЭлиминирующаяОрганизация");
	ОтборЭлемента.ПравоеЗначение 	= Истина;
	
	ЭлементУО.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);

	//Неактивный отбор по Регламентированным	
	ПолеОтбора = Новый ПолеКомпоновкиДанных("Ссылка.ИспользоватьВРегламентированномУчете");
	ЭлементОтбора = ТиповыеОтчеты_УправляемыйРежимУХ.ВернутьЭлементОтбора(Список.Отбор, ПолеОтбора);
	
	Если ЭлементОтбора = Неопределено Тогда
		
		ЭлементОтбора = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ВидСравнения		= ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ЛевоеЗначение		= ПолеОтбора;
		ЭлементОтбора.ПравоеЗначение 	= Истина;	
		ЭлементОтбора.РежимОтображения 	= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Использование  	= Ложь;
		
	КонецЕсли;
	
	Если Форма.Параметры.Свойство("Отбор") И Форма.Параметры.Отбор.Количество() Тогда
		// налоговых резидентов(РФ,иностранные) отображаем списком, т.к. иерархия может скрывать резидентов, когда родитель не резидент 
		Форма.Элементы.Список.Отображение = ОтображениеТаблицы.Список;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписьюСправочникаОрганизацииУХПередЗаписью(Источник, Отказ) Экспорт
	
	Источник.ДополнительныеСвойства.Вставить("ЭтоНовыйУХ", Источник.ЭтоНовый());
	Если Константы.ИспользоватьПрефиксыУХ.Получить() Тогда
		Источник.Префикс = Источник.ПрефиксУХ; // обрезается до 2х символов
	КонецЕсли;
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ЗаголовокОшибки = СтрШаблон(НСтр("ru = 'Организационная единица: ""%1"" не может быть записана:'"), Источник.Наименование);
	
	Если Не ЗначениеЗаполнено(Источник.ЮридическоеФизическоеЛицо) Тогда		
		Источник.ЮридическоеФизическоеЛицо=Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо;
	КонецЕсли;

	Источник.ИННКПП = Источник.ИНН + "/" + Источник.КПП;
	
	Если НЕ ЗначениеЗаполнено(Источник.ТипОрганизации) Тогда
		 Источник.ТипОрганизации = Перечисления.ТипыОрганизационныхЕдиниц.Обычная;
	КонецЕсли;
	
	ОрганизацииКлиентСерверУХ.УправлениеФормой_ТипОрганизации(Источник);
		
КонецПроцедуры

Процедура ПриЗаписиЭлементаСправочникаОрганизации(Источник, Отказ) Экспорт

	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьВозможностьПодокументнойТрансляции();
	
	Если Источник.ЭлиминирующаяОрганизация ИЛИ НЕ (Источник.ИспользоватьВРегламентированномУчете ИЛИ Источник.ИностранныйНалоговыйРезидент) Тогда
		Возврат;
	КонецЕсли;
	
	МасКонтрагенты = ПолучитьКонтрагентовПоОрганизации(Источник.Ссылка);
	Если МасКонтрагенты.Количество() = 0 И ЗначениеЗаполнено(Источник.ИНН) Тогда
		МасКонтрагенты = ПолучитьКонтрагентовПоИННКПП(Источник.ИНН, Источник.КПП);
	КонецЕсли;
	Если МасКонтрагенты.Количество() = 0 Тогда
		МасКонтрагенты.Добавить(Неопределено);
	КонецЕсли;
	
	Для каждого ТекущийКонтрагент Из МасКонтрагенты Цикл
		
		Если ТекущийКонтрагент = Неопределено Тогда
			
			КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
			КонтрагентОбъект.УстановитьНовыйКод();
		Иначе			
			КонтрагентОбъект = ТекущийКонтрагент.ПолучитьОбъект();
		КонецЕсли;
		
		ЭтоНовыйУХ = ОбщегоНазначенияКлиентСервер.СвойствоСтруктуры(Источник.ДополнительныеСвойства, "ЭтоНовыйУХ");
		
		СтруктураЗаполнения = Новый Структура("Организация,ЭтоНоваяОрганизацияУХ", Источник.Ссылка, ЭтоНовыйУХ);
		КонтрагентОбъект.Заполнить(СтруктураЗаполнения);
		
		КонтрагентОбъект.ПометкаУдаления = Источник.ПометкаУдаления;
		КонтрагентОбъект.Наименование = Источник.Наименование;
		
		Попытка
			КонтрагентОбъект.Записать();
		Исключение
			ОбщегоНазначенияУХ.СообщитьОбОшибке(СтрШаблон(НСтр("ru = 'Не удалось сформировать контрагента, соответствующего организации ""%1"".'"), Источник.Наименование));
			ОбщегоНазначенияУХ.СообщитьОбОшибке(ОписаниеОшибки());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверитьВозможностьПодокументнойТрансляции() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Организации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.СпособТрансляции В (ЗНАЧЕНИЕ(Перечисление.СпособыТрансляции.ПоДокументамОбработка), ЗНАЧЕНИЕ(Перечисление.СпособыТрансляции.ПоДокументамФоновоеЗадание), ЗНАЧЕНИЕ(Перечисление.СпособыТрансляции.ПоДокументамПриПроведении))
	|	И НЕ Организации.ПометкаУдаления");
	
	ЕстьПодокументная = Не Запрос.Выполнить().Пустой();
	Если ЕстьПодокументная <> Константы.ПодокументнаяТрансляция.Получить() Тогда
		Константы.ПодокументнаяТрансляция.Установить(ЕстьПодокументная);
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбновитьПовторноИспользуемыеЗначенияПриЗаписи(Источник, Отказ) Экспорт
	ОбновитьПовторноИспользуемыеЗначения();
КонецПроцедуры

Функция ПолучитьКонтрагентовПоОрганизации(ОрганизацияИсточник) Экспорт
	
	Если Не ЗначениеЗаполнено(ОрганизацияИсточник) Тогда
		// Для обеспечения совместимости с вызовами, которые ожидают только массив.
		Возврат Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Контрагенты.Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.ОрганизационнаяЕдиница В (&ОрганизационнаяЕдиница)");
	
	Запрос.УстановитьПараметр("ОрганизационнаяЕдиница", ОрганизацияИсточник);
		
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
КонецФункции

#КонецОбласти

#Область Документ_РеализацияТоваровУслуг

Процедура РеализацияТоваровУслугПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	ИмяРеквизитаДокумента = Неопределено;
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ИмяРеквизитаДокумента = "ДокументОснование";
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИмяРеквизитаДокумента) Тогда
		Элемент_ЗаказПоставщику = Элементы.Найти(ИмяРеквизитаДокумента);
		Если Элемент_ЗаказПоставщику = Неопределено Тогда
			ГруппаШапкаЛевая = Элементы.Найти("ГруппаШапкаЛевая");
			Если ГруппаШапкаЛевая = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Элемент_ЗаказПоставщику = Элементы.Добавить(ИмяРеквизитаДокумента, Тип("ПолеФормы"), ГруппаШапкаЛевая);
			Элемент_ЗаказПоставщику.ПутьКДанным		= "Объект." + ИмяРеквизитаДокумента;
			Элемент_ЗаказПоставщику.ТолькоПросмотр	= Истина;
			Элемент_ЗаказПоставщику.Гиперссылка 	= Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Документ_ПоступлениеТоваровУслуг

Процедура ПоступлениеТоваровУслугПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	Элементы = Форма.Элементы;
	Объект = Форма.Объект;
	
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		// Проверка на корректный документ основание
		ТекстСообщения = "";
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Если НЕ Объект.ДокументОснование.Проведен Тогда
				Отказ = Истина;
				ТекстСообщения = НСтр("ru = 'Документ-основание должен быть проведен.'");
			ИначеЕсли (НЕ ЗначениеЗаполнено(Объект.Организация)
				ИЛИ НЕ ЗначениеЗаполнено(Объект.Контрагент)) Тогда
				Отказ = Истина;
				ТекстСообщения = НСтр("ru = 'Организация и контрагент в документе-основании должны быть внутригрупповыми.'");
			КонецЕсли;
		КонецЕсли;
		
		Если Отказ = Истина Тогда
			Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = ТекстСообщения;
				Сообщение.Сообщить();
			КонецЕсли;
			
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИмяРеквизитаДокумента = Неопределено;
	Если ЗначениеЗаполнено(Объект.ЗаказПоставщику) Тогда
		ИмяРеквизитаДокумента = "ЗаказПоставщику";
	ИначеЕсли ЗначениеЗаполнено(Объект.ЗаказПоставщику) Тогда
		ИмяРеквизитаДокумента = "ДокументОснование";
	КонецЕсли;
	
	Если Не ПустаяСтрока(ИмяРеквизитаДокумента) Тогда
		Элемент_ЗаказПоставщику = Элементы.Найти(ИмяРеквизитаДокумента);
		Если Элемент_ЗаказПоставщику = Неопределено Тогда
			ГруппаШапкаЛевая = Элементы.Найти("ГруппаШапкаЛевая");
			Если ГруппаШапкаЛевая = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			Элемент_ЗаказПоставщику = Элементы.Добавить(ИмяРеквизитаДокумента, Тип("ПолеФормы"), ГруппаШапкаЛевая);
			Элемент_ЗаказПоставщику.ПутьКДанным		= "Объект." + ИмяРеквизитаДокумента;
			Элемент_ЗаказПоставщику.ТолькоПросмотр	= Истина;
			Элемент_ЗаказПоставщику.Гиперссылка 	= Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область Документ_СписаниеСРасчетногоСчета

Процедура СвойстваСтрокРасшифровкиПлатежаСервер(СвойстваПлатежа, Знач ПараметрыПлатежа, Знач ПолучатьДоговор) Экспорт
	
	Если ПараметрыПлатежа <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(ПараметрыПлатежа.ДоговорКонтрагента) Тогда
			СтатьяДвиженияДенежныхСредств = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПараметрыПлатежа.ДоговорКонтрагента, "СтатьяДвиженияДенежныхСредств");
			Если ЗначениеЗаполнено(СтатьяДвиженияДенежныхСредств) Тогда 
				
				СвойстваПлатежа.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры	

#КонецОбласти

#Область СчетаАктыНакладные

Процедура ОснованиеОбязательстваПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Источник.ИдентификаторПлатежа = УправлениеДенежнымиСредствамиУХ.ПолучитьУникальныйИдентификаторПлатежа(Источник);
	
КонецПроцедуры

#КонецОбласти

#Область РегистрСведений_ИспользоватьНесколькоБанковскихСчетовОрганизации
Процедура ВсегдаИспользоватьНесколькоБанковскихСчетовПередЗаписью(Источник, Отказ, Замещение) Экспорт
 
	Для Каждого ТекЗапись Из Источник Цикл
		ТекЗапись.Используется = Истина;
	КонецЦикла;

КонецПроцедуры	

#КонецОбласти

#Область СозданиеСправочников

Функция СоздатьОрганизацию(Источник, ПоИНН = Ложь, ДопРеквизиты = Неопределено, ТекстОписанияОшибки = Неопределено) Экспорт
	
	СправочникОбъект = Справочники.Организации.СоздатьЭлемент();
	Если ПоИНН Тогда
		СправочникОбъект.ИНН = Источник;		
	Иначе	
		СправочникОбъект.Наименование = Источник;
		СправочникОбъект.УстановитьНовыйКод();
	КонецЕсли;
	
	Если ДопРеквизиты <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СправочникОбъект, ДопРеквизиты);
	КонецЕсли;
	
	СправочникОбъект.Заполнить(Неопределено);
	
	Если ПоИНН Тогда
		
		ЭтоЮрЛицо = СтрДлина(Источник) = 10;
		
		
		Если ЭтоЮрЛицо Тогда
			РеквизитыОрганизации = РаботаСКонтрагентами.РеквизитыЮридическогоЛицаПоИНН(Источник);
		Иначе
			РеквизитыОрганизации = РаботаСКонтрагентами.РеквизитыПредпринимателяПоИНН(Источник);
		КонецЕсли;
		
		СправочникОбъект.ИспользоватьВРегламентированномУчете = Истина;		
		СправочникОбъект.ЮридическоеФизическоеЛицо = ?(ЭтоЮрЛицо, Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо, Перечисления.ЮридическоеФизическоеЛицо.ФизическоеЛицо);
		
		Если РеквизитыОрганизации <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(СправочникОбъект, РеквизитыОрганизации);
		КонецЕсли;		
	
	КонецЕсли;
	
	Попытка
		СправочникОбъект.Записать();	
	Исключение
		ТекстОписанияОшибки = ОписаниеОшибки();
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецПопытки;
		
	Возврат СправочникОбъект.Ссылка;
	
КонецФункции

Функция СоздатьКонтрагента(Источник, ПоИНН = Ложь, ДопРеквизиты = Неопределено, ТекстОписанияОшибки = Неопределено) Экспорт

	СправочникОбъект = Справочники.Контрагенты.СоздатьЭлемент();
	Если ПоИНН Тогда
		СправочникОбъект.ИНН = Источник;				
	Иначе	
		СправочникОбъект.Наименование = Источник;
		СправочникОбъект.УстановитьНовыйКод();
	КонецЕсли;
	
	Если ДопРеквизиты <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(СправочникОбъект, ДопРеквизиты);
	КонецЕсли;
	
	СправочникОбъект.Заполнить(Неопределено);

	Попытка
		СправочникОбъект.Записать();	
	Исключение
		
		ТекстОписанияОшибки = ОписаниеОшибки();
		Возврат Справочники.Контрагенты.ПустаяСсылка();
		
	КонецПопытки;
		
	Возврат СправочникОбъект.Ссылка;

КонецФункции

#КонецОбласти

#Область ДосьеКонтрагента

Функция ПолучитьДанныеПоОбъектамИнвестирования(ИННУчредителя) Экспорт

	ЭтоЮридическоеЛицо = СтрДлина(ИННУчредителя) = 10;
	Если ЭтоЮридическоеЛицо Тогда
		ИнформацияОСвязях = РаботаСКонтрагентами.ИнформацияОСвязяхЮридическогоЛицаПоИНН(ИННУчредителя);
	Иначе
		ИнформацияОСвязях = РаботаСКонтрагентами.ИнформацияОСвязяхПредпринимателяПоИНН(ИННУчредителя);
	КонецЕсли;
	
	ОбъектыИнвестирования = Новый Соответствие;
	
	Для каждого НоваяИнвестиция Из ИнформацияОСвязях.УчрежденныеФирмы Цикл		
		
		ДанныеИНН = Новый Структура("Наименование,ПрямаяДоля,Инвестиции, Статус", 
						НоваяИнвестиция.НаименованиеОрганизации, НоваяИнвестиция.ПроцентКапитала, НоваяИнвестиция.СуммаКапитала, НоваяИнвестиция.НаименованиеСтатуса);
		ОбъектыИнвестирования.Вставить(НоваяИнвестиция.ИНН, ДанныеИНН);
		
	КонецЦикла;	
	
	Возврат ОбъектыИнвестирования;

КонецФункции

#КонецОбласти

#Область ПерехватФункциональныхОпцийБП

Процедура ВсегдаИспользоватьНесколькоОрганизацийПередЗаписью(Источник, Отказ) Экспорт
	
	Источник.Значение = Истина;
	
КонецПроцедуры

Процедура ВсегдаВестиУчетПоСтатьямДДСПередЗаписью(Источник, Отказ) Экспорт
	
	Источник.Значение = Истина;

КонецПроцедуры

Процедура ВсегдаИспользоватьТабличныеФормыБанковскихДокументовПередЗаписью(Источник, Отказ) Экспорт
	
	Источник.Значение = Истина;

КонецПроцедуры

Процедура ВсегдаИспользоватьВалютныйУчетПередЗаписью(Источник, Отказ) Экспорт
	
	Источник.Значение = Истина;

КонецПроцедуры

Процедура НеЗаполнятьДатуТекущейВерсии(Источник, Отказ) Экспорт
	
	Источник.Значение = Дата(1,1,1);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьКонтрагентовПоИННКПП(ИНН, КПП)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.ИНН = &ИНН
		|	И Контрагенты.КПП = &КПП
		|	И НЕ Контрагенты.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("ИНН", ИНН);
	Запрос.УстановитьПараметр("КПП", КПП);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти