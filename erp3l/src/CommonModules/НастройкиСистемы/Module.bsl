////////////////////////////////////////////////////////////////////////////////
// Серверные процедуры и функции, управляющие настройками системы
//
////////////////////////////////////////////////////////////////////////////////

#Область ПрограммныйИнтерфейс

// Обработчик подписки на событие ПриЗаписиКонстанты.
//
Процедура ПриЗаписиКонстанты(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеКонстанты = Источник.ЭтотОбъект.Метаданные(); //ОбъектМетаданных - 
	ИмяКонстанты		= МетаданныеКонстанты.Имя;
	ЗначениеКонстанты 	= Источник.Значение;
	
	// При включении разделенного режима, сбрасывается кэш значений констант, 
	// т.к. при установки зависимых констант идет проверка режима работы, для фильтрации неразделенных констант.
	Если ИмяКонстанты = "ИспользоватьРазделениеПоОбластямДанных"
		ИЛИ ИмяКонстанты = "НеИспользоватьРазделениеПоОбластямДанных"
		ИЛИ ИмяКонстанты = "НеИспользоватьРазделениеПоОбластямДанныхИЭтоКА"
		ИЛИ ИмяКонстанты = "НеИспользоватьРазделениеПоОбластямДанныхИЭтоУТ" Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
	СинхронизироватьЗначенияПодчиненныхКонстант(ИмяКонстанты, ЗначениеКонстанты, Отказ);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Возвращает имя макета с правилами обмена.
// Имя можно переопределить в целях локализации.
// 
// Возвращаемое значение:
// 	Строка - имя правил обмена.
Функция ИмяПравилОбменаПомощникВыгрузкиЗагрузкиМоделиМеждународногоУчета() Экспорт
	
	Если Метаданные.ВариантВстроенногоЯзыка = Метаданные.СвойстваОбъектов.ВариантВстроенногоЯзыка.Русский Тогда
		ИмяПравилОбмена = "ПравилаОбменаБазовые_ru";
	ИначеЕсли Метаданные.ВариантВстроенногоЯзыка = Метаданные.СвойстваОбъектов.ВариантВстроенногоЯзыка.Английский Тогда
		ИмяПравилОбмена = "ПравилаОбменаБазовые_en";
	КонецЕсли;
	НастройкиСистемыЛокализация.ДополнитьИмяПравилОбменаПомощникВыгрузкиЗагрузкиМоделиМеждународногоУчета(ИмяПравилОбмена);
	Возврат ИмяПравилОбмена;
КонецФункции

//++ НЕ УТКА

Функция ЗначенияТехнологическихФункциональныхОпцийWE() Экспорт
	
	ЗначенияОпций = Новый Структура();
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.УправлениеПредприятием.Имя, Истина);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.КомплекснаяАвтоматизация.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.УправлениеТорговлей.Имя, Ложь);

	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ВедетсяУчетПостоянныхИВременныхРазницОбщая.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ВестиОтдельнуюНумерациюСчетовФактурНаАвансы.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ВестиСведенияДляДекларацийАлкоВРознице.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ВестиУУНаПланеСчетовХозрасчетный.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ВестиУчетПлатежейВПлатон.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользованиеСтарыхКлассификаторовОКПиОКВЭД.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьВвозТоваровИзТаможенногоСоюза.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьВвозТоваровИзТаможенногоСоюзаНеотфактурованныеПоставки.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьВвозТоваровИзТаможенногоСоюзаТоварыВПути.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьВнеоборотныеАктивы2_2.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьДокументыВнеоборотныхАктивовМеждународныйУчет.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьИнтеграциюСЯндексКассой.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьМатериалыВЭксплуатацииКонтекст.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьНачислениеЗарплаты.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьНачислениеЗарплатыУТ.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьОбменЭД.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьРаздельныйУчетВНАПоНалогообложению.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьРасчетЗарплатыРасширенная.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьРеглУчет.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ВедетсяУчетПостоянныхИВременныхРазницОбщая.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьТМЦВЭксплуатации.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьТТН.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьУведомленияОКонтролируемыхСделках.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьУправлениеПроизводством.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользуетсяУчетВЕдиницеИзмеренияТНВЭД.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ЛокализацияРФ.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ПлательщикЕНВД.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ПоддержкаПлатежейВСоответствииС275ФЗ.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ПоддержкаПлатежейРФ.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ПокупкаТоваровОблагаемыхНДСУПокупателя.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ПродажаТоваровОблагаемыхНДСУПокупателя.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.РегламентированныйУчетВНА.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ФормироватьПроводкиМеждународногоУчетаПоДаннымРегламентированного.Имя, Ложь);
	
	Возврат ЗначенияОпций;
	
КонецФункции

//-- НЕ УТКА

Функция ЗначенияТехнологическихФункциональныхОпцийУТ() Экспорт
	
	ЗначенияОпций = Новый Структура();
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.УправлениеПредприятием.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.КомплекснаяАвтоматизация.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.УправлениеТорговлей.Имя, Истина);
	
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ВедетсяУчетПостоянныхИВременныхРазницОбщая.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьБюджетирование.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьВнеоборотныеАктивы2_2.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьВнеоборотныеАктивы2_4.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьЗаполнениеРаздела7ДекларацииПоНДС.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьМатериалыВЭксплуатацииКонтекст.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьНачислениеЗарплатыУТ.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьОбособленныеПодразделенияВыделенныеНаБаланс.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьСерииНоменклатурыПроизводство.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьРеглУчет.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьТМЦВЭксплуатации.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьУведомленияОКонтролируемыхСделках.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьУправлениеПроизводством.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.ИспользоватьУправлениеПроизводством2_2.Имя, Ложь);
	
	Возврат ЗначенияОпций;
	
КонецФункции

//++ НЕ УТ

Функция ЗначенияТехнологическихФункциональныхОпцийКА() Экспорт
	
	ЗначенияОпций = Новый Структура();
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.УправлениеПредприятием.Имя, Ложь);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.КомплекснаяАвтоматизация.Имя, Истина);
	ЗначенияОпций.Вставить(Метаданные.ФункциональныеОпции.УправлениеТорговлей.Имя, Ложь);
	
	Возврат ЗначенияОпций;
	
КонецФункции

//-- НЕ УТ

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КонстантыСлужебные

Функция ПроверитьСоответствиеЗначенийКонстант() Экспорт
	
	ТаблицаКонстант  = НастройкиСистемыПовтИсп.ПолучитьТаблицуЗависимостиКонстант();
	ЗначенияКонстант = Новый Структура;
	
	ТаблицаНесоответствия = Новый ТаблицаЗначений;
	ТаблицаНесоответствия.Колонки.Добавить("ИмяРодительскойКонстанты", Новый ОписаниеТипов("Строка"));
	ТаблицаНесоответствия.Колонки.Добавить("ИмяПодчиненнойКонстанты",  Новый ОписаниеТипов("Строка"));
	
	// Получим значения всех констант, родительских и подчиненных
	Для Каждого Строка Из ТаблицаКонстант Цикл
		Если НЕ ЗначенияКонстант.Свойство(Строка.ИмяРодительскойКонстанты) Тогда
			ЗначенияКонстант.Вставить(Строка.ИмяРодительскойКонстанты, Константы[Строка.ИмяРодительскойКонстанты].Получить());
		КонецЕсли;
		Если НЕ ЗначенияКонстант.Свойство(Строка.ИмяПодчиненнойКонстанты) Тогда
			ЗначенияКонстант.Вставить(Строка.ИмяПодчиненнойКонстанты, Константы[Строка.ИмяПодчиненнойКонстанты].Получить());
		КонецЕсли;
	КонецЦикла; 
	
	// Заполним несоответствия допустимых и фактических сочетаний значений констант
	Для Каждого Строка Из ТаблицаКонстант Цикл
		Если Строка.ЗначениеРодительскойКонстанты = ЗначенияКонстант[Строка.ИмяРодительскойКонстанты]
		 И Строка.ЗначениеПодчиненнойКонстанты <> ЗначенияКонстант[Строка.ИмяПодчиненнойКонстанты] Тогда
			СтрокаНесоответствия = ТаблицаНесоответствия.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНесоответствия, Строка);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаНесоответствия.Сортировать("ИмяРодительскойКонстанты, ИмяПодчиненнойКонстанты");
	
	Возврат ТаблицаНесоответствия;
	
КонецФункции

// Параметры:
// 	ТаблицаКонстант - см. НастройкиСистемы.ИнициализироватьТаблицуЗначенийКонстант
// 	ИмяРодительскойКонстанты - Строка -
// 	ЗначениеРодительскойКонстанты - Булево - Описание
// 	ИмяПодчиненнойКонстанты - Строка - Описание
// 	ЗначениеПодчиненнойКонстанты - Булево - Описание
Процедура ДобавитьСтрокуТаблицыЗависимостиКонстант(ТаблицаКонстант, ИмяРодительскойКонстанты, ЗначениеРодительскойКонстанты, ИмяПодчиненнойКонстанты, ЗначениеПодчиненнойКонстанты) Экспорт 
	
	НоваяСтрока = ТаблицаКонстант.Добавить();
	НоваяСтрока.ИмяРодительскойКонстанты 	  = ИмяРодительскойКонстанты;
	НоваяСтрока.ЗначениеРодительскойКонстанты = ЗначениеРодительскойКонстанты;
	НоваяСтрока.ИмяПодчиненнойКонстанты 	  = ИмяПодчиненнойКонстанты;
	НоваяСтрока.ЗначениеПодчиненнойКонстанты  = ЗначениеПодчиненнойКонстанты;
	
КонецПроцедуры

Процедура ДобавитьСтрокуИнвертируемыхКонстант(ТаблицаКонстант, ИмяРодительскойКонстанты, ИмяПодчиненнойКонстанты = "") Экспорт
	
	Если ИмяПодчиненнойКонстанты = "" Тогда
		ИмяПодчиненнойКонстанты = "Не" + ИмяРодительскойКонстанты;
	КонецЕсли;
	
	ДобавитьСтрокуТаблицыЗависимостиКонстант(ТаблицаКонстант,
		ИмяРодительскойКонстанты, Ложь,   ИмяПодчиненнойКонстанты, Истина);
	ДобавитьСтрокуТаблицыЗависимостиКонстант(ТаблицаКонстант,
		ИмяРодительскойКонстанты, Истина, ИмяПодчиненнойКонстанты, Ложь);
	
КонецПроцедуры

Функция ПолучитьСтруктуруРодительскихКонстантРекурсивно(СтруктураПодчиненныхКонстант, ТаблицаКонстант, ОбработанныеКонстанты) Экспорт
	
	Результат = Новый Структура;
	
	Для Каждого ИскомаяКонстанта Из СтруктураПодчиненныхКонстант Цикл
		
		РодительскиеКонстанты = ТаблицаКонстант.НайтиСтроки(
			Новый Структура("ИмяПодчиненнойКонстанты", ИскомаяКонстанта.Ключ));
		
		Для Каждого СтрокаРодителя Из РодительскиеКонстанты Цикл
			
			Если Результат.Свойство(СтрокаРодителя.ИмяРодительскойКонстанты)
			 ИЛИ ОбработанныеКонстанты.Свойство(СтрокаРодителя.ИмяРодительскойКонстанты)
			 ИЛИ СтруктураПодчиненныхКонстант.Свойство(СтрокаРодителя.ИмяРодительскойКонстанты) Тогда
				Продолжить;
			КонецЕсли;
			
			Результат.Вставить(СтрокаРодителя.ИмяРодительскойКонстанты);
			ОбработанныеКонстанты.Вставить(СтрокаРодителя.ИмяРодительскойКонстанты);
			
			РодителиРодителя = ПолучитьСтруктуруРодительскихКонстантРекурсивно(
				Новый Структура(СтрокаРодителя.ИмяРодительскойКонстанты),
				ТаблицаКонстант,
				ОбработанныеКонстанты);
			
			Для Каждого РодительРодителя Из РодителиРодителя Цикл
				Результат.Вставить(РодительРодителя.Ключ);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСтруктуруПодчиненныхКонстантРекурсивно(ИмяРодительскойКонстанты, ТаблицаКонстант, ОбработанныеКонстанты) Экспорт
	
	Результат = Новый Структура;
	
	ПодчиненныеКонстанты = ТаблицаКонстант.НайтиСтроки(
		Новый Структура("ИмяРодительскойКонстанты", ИмяРодительскойКонстанты));
	
	Для Каждого СтрокаПодчиненного Из ПодчиненныеКонстанты Цикл
		
		Если Результат.Свойство(СтрокаПодчиненного.ИмяПодчиненнойКонстанты)
		 ИЛИ ОбработанныеКонстанты.Свойство(СтрокаПодчиненного.ИмяПодчиненнойКонстанты) Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Вставить(СтрокаПодчиненного.ИмяПодчиненнойКонстанты);
		ОбработанныеКонстанты.Вставить(СтрокаПодчиненного.ИмяПодчиненнойКонстанты);
		
		ПодчиненныеПодчиненных = ПолучитьСтруктуруПодчиненныхКонстантРекурсивно(
			СтрокаПодчиненного.ИмяПодчиненнойКонстанты,
			ТаблицаКонстант,
			ОбработанныеКонстанты);
		
		Для Каждого ПодчиненныйПодчиненного Из ПодчиненныеПодчиненных Цикл
			Результат.Вставить(ПодчиненныйПодчиненного.Ключ);
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Описание
// 
// Возвращаемое значение:
// 	ТаблицаЗначений - Описание:
// * ИмяРодительскойКонстанты - Строка -
// * ИмяПодчиненнойКонстанты - Строка -
// * ЗначениеРодительскойКонстанты - Произвольный - 
// * ЗначениеПодчиненнойКонстанты - Произвольный -
Функция ИнициализироватьТаблицуЗначенийКонстант() Экспорт
	
	Результат = Новый ТаблицаЗначений;
	
	Результат.Колонки.Добавить("ИмяРодительскойКонстанты", Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ИмяПодчиненнойКонстанты",  Новый ОписаниеТипов("Строка"));
	Результат.Колонки.Добавить("ЗначениеРодительскойКонстанты");
	Результат.Колонки.Добавить("ЗначениеПодчиненнойКонстанты");
	
	Результат.Индексы.Добавить("ИмяРодительскойКонстанты");
	Результат.Индексы.Добавить("ИмяПодчиненнойКонстанты");
	
	Возврат Результат
	
КонецФункции

Процедура СинхронизироватьЗначенияПодчиненныхКонстант(ИмяКонстанты, ЗначениеКонстанты, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТипКонстанты	= ТипЗнч(ЗначениеКонстанты);
	ПримитивныеТипы = Новый ОписаниеТипов("Число,Строка,Дата,Булево,Неопределено");
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Синхронизировать "простые" зависимые константы
	Если ПримитивныеТипы.СодержитТип(ТипКонстанты)
	 ИЛИ ОбщегоНазначения.ЗначениеСсылочногоТипа(ЗначениеКонстанты) Тогда
		
		ПодчиненныеКонстанты = НастройкиСистемыПовтИсп.ПолучитьДопустимыеЗначенияПодчиненныхКонстант(ИмяКонстанты, ЗначениеКонстанты);
		
		Если ЗначениеЗаполнено(ПодчиненныеКонстанты) Тогда
			
			Для Каждого КлючИЗначение Из ПодчиненныеКонстанты Цикл
				УстановитьЗначениеКонстанты(Константы[КлючИЗначение.Ключ], КлючИЗначение.Значение);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Синхронизировать "сложные" зависимые константы
	
	Если ИмяКонстанты = "ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента"
	//++ НЕ УТ
	 ИЛИ ИмяКонстанты = "ИспользоватьПроизводство" // включены заказы материалов
	 ИЛИ ИмяКонстанты = "ИспользоватьПроизводствоНаСтороне" // включены заказы переработчику
	//-- НЕ УТ
	//++ НЕ УТКА
	 ИЛИ ИмяКонстанты = "ИспользоватьУправлениеРемонтами" // включены заказы на ремонт
	 ИЛИ ИмяКонстанты = "ИспользоватьУправлениеПроизводством" // включены заказы на производство или заказ материалов
	 ИЛИ ИмяКонстанты = "ИспользоватьУправлениеПроизводством2_2" // включены заказы на производство 2.1, 2.2 или заказ материалов
	 ИЛИ ИмяКонстанты = "ИспользоватьПроизводствоИзДавальческогоСырья" // включены заказы давальцев
	//-- НЕ УТКА
	 ИЛИ ИмяКонстанты = "ИспользоватьЗаказыНаПеремещение"
	 ИЛИ ИмяКонстанты = "ИспользоватьЗаказыНаВнутреннееПотребление"
	 ИЛИ ИмяКонстанты = "ИспользоватьЗаказыНаСборку" Тогда
		
		ЗначениеПодчиненнойКонстанты =
			Константы.ИспользоватьПострочнуюОтгрузкуВЗаказеКлиента.Получить()
			ИЛИ Константы.ИспользоватьЗаказыНаПеремещение.Получить()
			ИЛИ Константы.ИспользоватьЗаказыНаВнутреннееПотребление.Получить()
			ИЛИ Константы.ИспользоватьЗаказыНаСборку.Получить();
		//++ НЕ УТ
		ЗначениеПодчиненнойКонстанты = ЗначениеПодчиненнойКонстанты
			ИЛИ Константы.ИспользоватьПроизводство.Получить()
			ИЛИ Константы.ИспользоватьПроизводствоНаСтороне.Получить();
		//-- НЕ УТ
		//++ НЕ УТКА
		ЗначениеПодчиненнойКонстанты = ЗначениеПодчиненнойКонстанты
			ИЛИ Константы.ИспользоватьУправлениеРемонтами.Получить()
			ИЛИ Константы.ИспользоватьУправлениеПроизводством.Получить()
			ИЛИ Константы.ИспользоватьУправлениеПроизводством2_2.Получить()
			ИЛИ Константы.ИспользоватьПроизводствоИзДавальческогоСырья.Получить();
		//-- НЕ УТКА
		УстановитьЗначениеКонстанты(
			Константы.ИспользоватьОбособленноеОбеспечениеЗаказов, ЗначениеПодчиненнойКонстанты И Константы.ИспользоватьОбособленноеОбеспечениеЗаказов.Получить());
		
	КонецЕсли;
	
	Если ИмяКонстанты = "БазоваяВерсия" И ЗначениеКонстанты
		И Константы.ИспользоватьРасширенноеОбеспечениеПотребностей.Получить() Тогда
	
		УстановитьЗначениеКонстанты(Константы.ИспользоватьРасширенноеОбеспечениеПотребностей, Ложь);
	
	//++ НЕ УТКА
	ИначеЕсли ИмяКонстанты = "ИспользоватьПроизводствоИзДавальческогоСырья" Тогда
		
		ОбеспечениеСервер.ИспользоватьУправлениеПеремещениемОбособленныхТоваровВычислитьИЗаписать();
		ОбеспечениеСервер.ИспользоватьНазначенияБезЗаказаВычислитьИЗаписать();
		
	//-- НЕ УТКА
	
	//++ НЕ УТ
	ИначеЕсли ИмяКонстанты = "ИспользоватьПроизводствоНаСтороне" Тогда
		
		ОбеспечениеСервер.ИспользоватьНазначенияБезЗаказаВычислитьИЗаписать();
		
	//-- НЕ УТ
	ИначеЕсли ИмяКонстанты = "ИспользоватьОбособленноеОбеспечениеЗаказов" Тогда
		
		ОбеспечениеСервер.ИспользоватьНазначенияБезЗаказаВычислитьИЗаписать();
		
	ИначеЕсли ИмяКонстанты = "ИспользоватьНазначенияБезЗаказа" Тогда
		
		ОбеспечениеСервер.НеИспользоватьНазначенияБезЗаказаВычислитьИЗаписатьИнверсией();
		
	ИначеЕсли ИмяКонстанты = "ИспользоватьПеремещениеТоваров" Тогда
		
		ОбеспечениеСервер.ИспользоватьУправлениеПеремещениемОбособленныхТоваровВычислитьИЗаписать();
		
	ИначеЕсли ИмяКонстанты = "ИспользоватьЗаказыПоставщикам"
				Или ИмяКонстанты = "ИспользоватьЗаказыНаПеремещение"
				Или ИмяКонстанты = "ИспользоватьЗаказыНаСборку"
				//++ НЕ УТ
				Или ИмяКонстанты = "ИспользоватьУправлениеПроизводством"
				Или ИмяКонстанты = "ИспользоватьУправлениеПроизводством2_2"
				//-- НЕ УТ
				Или ИмяКонстанты = "ИспользоватьПроизводство" Тогда
				
			ЗначениеИстинаДоступноДляКонстанты =
				Не СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации()
				И (Константы.ИспользоватьЗаказыПоставщикам.Получить()
					Или Константы.ИспользоватьЗаказыНаПеремещение.Получить()
					Или Константы.ИспользоватьЗаказыНаСборку.Получить()
					//++ НЕ УТ
					Или Константы.ИспользоватьУправлениеПроизводством.Получить()
					Или Константы.ИспользоватьУправлениеПроизводством2_2.Получить()
					//-- НЕ УТ
					Или Константы.ИспользоватьПроизводство.Получить());
				
			Если Константы.ИспользоватьРасширенноеОбеспечениеПотребностей.Получить() Тогда
				
				Если Не ЗначениеИстинаДоступноДляКонстанты Тогда
					УстановитьЗначениеКонстанты(Константы.ИспользоватьРасширенноеОбеспечениеПотребностей, Ложь);
				КонецЕсли;
				
			Иначе
				
				Если Не Константы.ИспользоватьЗаказыПоставщикам.Получить() Тогда
					
					Если ЗначениеИстинаДоступноДляКонстанты Тогда
						УстановитьЗначениеКонстанты(Константы.ИспользоватьРасширенноеОбеспечениеПотребностей, Истина);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			Если ИмяКонстанты = "ИспользоватьУправлениеПроизводством2_2" Тогда
				ОбеспечениеСервер.ИспользоватьУправлениеПеремещениемОбособленныхТоваровВычислитьИЗаписать();
			КонецЕсли;
			
	КонецЕсли;

	Если ИмяКонстанты = "ИспользоватьОплатуПлатежнымиКартами"
	 ИЛИ ИмяКонстанты = "ИспользоватьПодключаемоеОборудование" Тогда
		
		Если ИмяКонстанты = "ИспользоватьОплатуПлатежнымиКартами" Тогда
			ЗначениеПодчиненнойКонстанты = ЗначениеКонстанты И Константы.ИспользоватьПодключаемоеОборудование.Получить();
		Иначе
			ЗначениеПодчиненнойКонстанты = ЗначениеКонстанты И Константы.ИспользоватьОплатуПлатежнымиКартами.Получить();
		КонецЕсли;
		
		УстановитьЗначениеКонстанты(
			Константы.ИспользоватьПодключаемоеОборудованиеИОплатуПлатежнымиКартами, ЗначениеПодчиненнойКонстанты);
	 	
	ИначеЕсли ИмяКонстанты = "ИспользоватьНесколькоКасс"
	 	  ИЛИ ИмяКонстанты = "ИспользоватьНесколькоРасчетныхСчетов" Тогда
		
		Если ИмяКонстанты = "ИспользоватьНесколькоКасс" Тогда
			ЗначениеПодчиненнойКонстанты = ЗначениеКонстанты ИЛИ Константы.ИспользоватьНесколькоРасчетныхСчетов.Получить();
		Иначе
			ЗначениеПодчиненнойКонстанты = ЗначениеКонстанты ИЛИ Константы.ИспользоватьНесколькоКасс.Получить();
		КонецЕсли;
		
		УстановитьЗначениеКонстанты(
			Константы.ИспользоватьНесколькоРасчетныхСчетовКасс, ЗначениеПодчиненнойКонстанты);
			
	ИначеЕсли ИмяКонстанты = "ИспользоватьНесколькоВалют" Тогда
		
		Если НЕ ЗначениеКонстанты Тогда
			
			ЗначениеПодчиненнойКонстанты = ДоходыИРасходыСервер.ПолучитьВалютуУправленческогоУчета();
			
			УстановитьЗначениеКонстанты(
				Константы.ВалютаУправленческогоУчета, 	  ЗначениеПодчиненнойКонстанты);
			УстановитьЗначениеКонстанты(
				Константы.БазоваяВалютаПоУмолчанию, ЗначениеПодчиненнойКонстанты);
		КонецЕсли;
		
	//++ НЕ УТ
	ИначеЕсли ИмяКонстанты = "ИспользоватьСтатусыЗаказовПереработчикам" Тогда
		
		Если НЕ Константы.ИспользоватьСтатусыЗаказовПереработчикам.Получить() Тогда
			УстановитьЗначениеКонстанты(Константы.НеЗакрыватьЗаказыПереработчикамБезПолнойОплаты,		Ложь);
			УстановитьЗначениеКонстанты(Константы.НеЗакрыватьЗаказыПереработчикамБезПолнойОтработки,	Ложь);
		КонецЕсли;
	//-- НЕ УТ
		
	ИначеЕсли ИмяКонстанты = "ИспользоватьЗаказыКлиентов" 
		ИЛИ ИмяКонстанты = "ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов" Тогда
		
		Если НЕ Константы.ИспользоватьЗаказыКлиентов.Получить() 
			И НЕ Константы.ИспользоватьЗаявкиНаВозвратТоваровОтКлиентов.Получить() Тогда
		
			УстановитьЗначениеКонстанты(
				Константы.ИспользоватьРасширенныеВозможностиЗаказаКлиента,   Ложь);
				
			КонецЕсли;
			
	ИначеЕсли ИмяКонстанты = "ИспользоватьРасширенныеВозможностиЗаказаКлиента" Тогда
		
		Если НЕ Константы.ИспользоватьРасширенныеВозможностиЗаказаКлиента.Получить() Тогда
		
			УстановитьЗначениеКонстанты(
				Константы.НеЗакрыватьЗаказыКлиентовБезПолнойОплаты,   Ложь);
			УстановитьЗначениеКонстанты(
				Константы.НеЗакрыватьЗаказыКлиентовБезПолнойОтгрузки, Ложь);
			
		КонецЕсли;
	ИначеЕсли ИмяКонстанты = "ИспользоватьСогласованиеЗаявокНаВозвратТоваровОтКлиентов"
	 ИЛИ ИмяКонстанты = "ИспользоватьСогласованиеЗаказовКлиентов"
	 ИЛИ ИмяКонстанты = "ИспользоватьСогласованиеСоглашенийСКлиентами" Тогда
		
		ИмяПодчиненнойКонстанты 	 = ПодчиненнаяКонстантаСогласования(ИмяКонстанты);
		ЗначениеПодчиненнойКонстанты = ЗначениеКонстанты;
		
		НастройкиСистемы.УстановитьЗначениеКонстанты(
			Константы[ИмяПодчиненнойКонстанты], ЗначениеПодчиненнойКонстанты);
			
	ИначеЕсли ИмяКонстанты = "ИспользоватьСделкиСКлиентами" Тогда
		
		УстановитьЗначениеКонстанты(
			Константы.ИспользоватьУправлениеСделками, ЗначениеКонстанты И Константы.ИспользоватьУправлениеСделками.Получить());
		УстановитьЗначениеКонстанты(
			Константы.ИспользоватьПервичныйСпрос, 	  ЗначениеКонстанты И Константы.ИспользоватьПервичныйСпрос.Получить());
		
	ИначеЕсли ИмяКонстанты = "ИспользоватьУправлениеСделками" Тогда
		
	УстановитьЗначениеКонстанты(
		Константы.ИспользоватьЗаказыКлиентов, 	  			   ЗначениеКонстанты ИЛИ Константы.ИспользоватьЗаказыКлиентов.Получить());
		
	ИначеЕсли ИмяКонстанты = "ДетализироватьЗаданияТорговымПредставителямПоНоменклатуре"
	 ИЛИ ИмяКонстанты = "ИспользованиеЗаданийТорговымПредставителям" Тогда
		
		Если ИмяКонстанты = "ДетализироватьЗаданияТорговымПредставителямПоНоменклатуре" Тогда
			ЗначениеПодчиненнойКонстанты = НЕ ЗначениеКонстанты
				И Константы.ИспользованиеЗаданийТорговымПредставителям.Получить() = Перечисления.ИспользованиеЗаданийТорговымПредставителям.ИспользуютсяДляУправленияТорговымиПредставителями;
		Иначе
			ЗначениеПодчиненнойКонстанты = НЕ Константы.ДетализироватьЗаданияТорговымПредставителямПоНоменклатуре.Получить()
				И ЗначениеКонстанты = Перечисления.ИспользованиеЗаданийТорговымПредставителям.ИспользуютсяДляУправленияТорговымиПредставителями;
		КонецЕсли;
		
		УстановитьЗначениеКонстанты(
			Константы.НеДетализироватьЗаданияТорговымПредставителямПоНоменклатуре, ЗначениеПодчиненнойКонстанты);
				
	ИначеЕсли ИмяКонстанты = "ИспользоватьРучныеСкидкиВПродажах"
		ИЛИ ИмяКонстанты = "ИспользоватьАвтоматическиеСкидкиВПродажах" Тогда
		
		Если НЕ Константы.ИспользоватьРучныеСкидкиВПродажах.Получить()
			И НЕ Константы.ИспользоватьАвтоматическиеСкидкиВПродажах.Получить() Тогда
		
			УстановитьЗначениеКонстанты(Константы.ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи, Ложь);
			УстановитьЗначениеКонстанты(Константы.ОтображениеСкидокВПечатныхФормахДокументовПродажи, Перечисления.ВариантыВыводаСкидокВПечатныхФормах.НеВыводитьСкидки);
		КонецЕсли;
	ИначеЕсли ИмяКонстанты = "ИспользоватьСчетаНаОплатуКлиентам" Тогда
		
		ЗначениеПодчиненнойКонстанты = ?(НЕ ЗначениеКонстанты, Константы.ВыбиратьВариантВыводаСкидокПриПечатиДокументовПродажи.Получить(), Ложь);
		
		УстановитьЗначениеКонстанты(Константы.НеИспользоватьСчетаНаОплатуНеВыбиратьВариантВыводаСкидок, ?(НЕ ЗначениеКонстанты, НЕ ЗначениеПодчиненнойКонстанты, ЗначениеПодчиненнойКонстанты));
		УстановитьЗначениеКонстанты(Константы.НеИспользоватьСчетаНаОплатуВыбиратьВариантВыводаСкидок, ЗначениеПодчиненнойКонстанты);
		
	//++ НЕ УТ
	ИначеЕсли Найти(ИмяКонстанты, "ИспользоватьУправлениеПроизводством") > 0 Тогда
		
		Если ИмяКонстанты = "ИспользоватьУправлениеПроизводством" Тогда
			ИспользуетсяПроизводство21 = ЗначениеКонстанты;
			ИспользуетсяПроизводство22 = Константы.ИспользоватьУправлениеПроизводством2_2.Получить();
		Иначе
			ИспользуетсяПроизводство21 = Константы.ИспользоватьУправлениеПроизводством.Получить();
			ИспользуетсяПроизводство22 = ЗначениеКонстанты;
		КонецЕсли;
		
		// подчиненные константы
		
		//++ НЕ УТКА
		Если Не ИспользуетсяПроизводство22 Тогда
			УстановитьЗначениеКонстанты(Константы.МетодикаУправленияПроизводством, Перечисления.МетодикаУправленияПроизводством.БезПланирования);
		КонецЕсли;
		
		Если (ИмяКонстанты = "ИспользоватьУправлениеПроизводством" И ЗначениеКонстанты)
			ИЛИ ИмяКонстанты = "ИспользоватьУправлениеПроизводством2_2" Тогда
				ПроизводствоСервер.УстановитьОпцииДляРаботыСПроизводственнымиОперациями(
					ИспользуетсяПроизводство21, ИспользуетсяПроизводство22);
		КонецЕсли;
		//-- НЕ УТКА
		
		УстановитьЗначениеКонстанты(Константы.ИспользуетсяТолькоУправлениеПроизводством22, НЕ ИспользуетсяПроизводство21 И ИспользуетсяПроизводство22);
		
	//-- НЕ УТ
	
	КонецЕсли;
	
	//++ НЕ УТКА
	Если ИмяКонстанты = "ИспользоватьПроизводствоНаСтороне" 
		ИЛИ ИмяКонстанты = "ИспользоватьПроизводство" 
		ИЛИ ИмяКонстанты = "ИспользоватьУправлениеПроизводством" 
		ИЛИ ИмяКонстанты = "ИспользоватьУправлениеПроизводством2_2" Тогда
		
		Производство21 = Константы.ИспользоватьУправлениеПроизводством.Получить();
		Производство22 = Константы.ИспользоватьУправлениеПроизводством2_2.Получить();
		
		Если Константы.ИспользоватьПроизводствоНаСтороне.Получить()
			И НЕ Константы.ИспользоватьСтатусыЗаказовПереработчикам.Получить()
			И (Константы.ИспользоватьПроизводство.Получить() 
				ИЛИ Производство21
				ИЛИ Производство22) Тогда
			УстановитьЗначениеКонстанты(Константы.ИспользоватьСтатусыЗаказовПереработчикам, Истина);
		КонецЕсли;
		
		Если НЕ Производство21 И НЕ Производство22 Тогда
			УстановитьЗначениеКонстанты(Константы.ИспользоватьПараметрыНазначенияСпецификаций, Ложь);
		КонецЕсли;
		
	КонецЕсли;
	//-- НЕ УТКА
	
	Если ИмяКонстанты = Метаданные.Константы.ИспользоватьИмпортныеЗакупки.Имя 
		ИЛИ ИмяКонстанты = Метаданные.Константы.ИспользоватьТоварыВПутиОтПоставщиков.Имя Тогда
		
		ИспользоватьИмпортныеЗакупки = Константы.ИспользоватьИмпортныеЗакупки.Получить();
		ИспользоватьТоварыВПутиОтПоставщиков = Константы.ИспользоватьТоварыВПутиОтПоставщиков.Получить();
		
		УстановитьЗначениеКонстанты(Константы.ИспользоватьИмпортныеЗакупкиТоваровВПути, 
			ИспользоватьИмпортныеЗакупки И ИспользоватьТоварыВПутиОтПоставщиков);
		
	КонецЕсли;
	
	Если ИмяКонстанты = "ИспользоватьПланированиеПродаж"
		ИЛИ ИмяКонстанты = "ИспользоватьПланированиеЗакупок"
		ИЛИ ИмяКонстанты = "ИспользоватьПланированиеСборкиРазборки"
		ИЛИ ИмяКонстанты = "ИспользоватьПланированиеВнутреннихПотреблений" Тогда
		
		ПланыПродаж =                Константы.ИспользоватьПланированиеПродаж.Получить();
		ПланыПродажПоКатегориям =    Константы.ИспользоватьПланированиеПродажПоКатегориям.Получить();
		ПланыЗакупок =               Константы.ИспользоватьПланированиеЗакупок.Получить();
		ПланыСборкиРазборки =        Константы.ИспользоватьПланированиеСборкиРазборки.Получить();
		ПланыВнутреннихПотреблений = Константы.ИспользоватьПланированиеВнутреннихПотреблений.Получить();
		
		Если Константы.УправлениеТорговлей.Получить()
			И (ПланыПродаж
			ИЛИ ПланыПродажПоКатегориям
			ИЛИ ПланыЗакупок
			ИЛИ ПланыСборкиРазборки
			ИЛИ ПланыВнутреннихПотреблений) Тогда
			
			УстановитьЗначениеКонстанты(Константы.ИспользоватьСбалансированностьПлановУТ, Истина);
			
		Иначе
			
			УстановитьЗначениеКонстанты(Константы.ИспользоватьСбалансированностьПлановУТ, Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИмяКонстанты = "ИспользуетсяЦенообразование25" Тогда

		УстановитьЗначениеКонстанты(Константы.ИспользоватьХарактеристикиНоменклатурыДляЦенообразования, 
									ЗначениеКонстанты И Константы.ИспользоватьХарактеристикиНоменклатуры.Получить());
		УстановитьЗначениеКонстанты(Константы.ИспользоватьСерииНоменклатурыДляЦенообразования, 	
									ЗначениеКонстанты И Константы.ИспользоватьСерииНоменклатуры.Получить());
		УстановитьЗначениеКонстанты(Константы.ИспользоватьУпаковкиНоменклатурыДляЦенообразования, 
									ЗначениеКонстанты И Константы.ИспользоватьУпаковкиНоменклатуры.Получить());
		
		Если Не Константы.ИспользуетсяЦенообразование25.Получить() Тогда
			УстановитьЗначениеКонстанты(Константы.ДатаПереходаНаЦенообразование25, Дата(1,1,1));
		КонецЕсли;
			
	ИначеЕсли ИмяКонстанты = "ИспользоватьХарактеристикиНоменклатуры" Тогда
		
		ЗначениеПодчиненнойКонстанты = ЗначениеКонстанты И Константы.ИспользуетсяЦенообразование25.Получить();
		УстановитьЗначениеКонстанты(Константы.ИспользоватьХарактеристикиНоменклатурыДляЦенообразования, ЗначениеПодчиненнойКонстанты);
		
	ИначеЕсли ИмяКонстанты = "ИспользоватьСерииНоменклатуры" Тогда
		
		ЗначениеПодчиненнойКонстанты = ЗначениеКонстанты И Константы.ИспользуетсяЦенообразование25.Получить();
		УстановитьЗначениеКонстанты(Константы.ИспользоватьСерииНоменклатурыДляЦенообразования, ЗначениеПодчиненнойКонстанты);
		
	ИначеЕсли ИмяКонстанты = "ИспользоватьУпаковкиНоменклатуры" Тогда
		
		ЗначениеПодчиненнойКонстанты = ЗначениеКонстанты И Константы.ИспользуетсяЦенообразование25.Получить();
		УстановитьЗначениеКонстанты(Константы.ИспользоватьУпаковкиНоменклатурыДляЦенообразования, ЗначениеПодчиненнойКонстанты);
		
	КонецЕсли;
	
	НастройкиСистемыЛокализация.СинхронизироватьЗначенияПодчиненныхКонстант(ИмяКонстанты, ЗначениеКонстанты, Отказ);
	
КонецПроцедуры

Процедура УстановитьЗначениеКонстанты(МенеджерКонстанты, ЗначениеКонстанты) Экспорт
	
	Если МенеджерКонстанты.Получить() <> ЗначениеКонстанты Тогда
		МенеджерКонстанты.Установить(ЗначениеКонстанты);
	КонецЕсли;
	
КонецПроцедуры

Функция ПодчиненнаяКонстантаСогласования(ИмяКонстанты)
	
	СоответствиеКонстант = Новый Соответствие();
	
	СоответствиеКонстант.Вставить("ИспользоватьСогласованиеЗаявокНаВозвратТоваровОтКлиентов",
		"ИспользоватьВнутреннееСогласованиеЗаявокНаВозвратТоваровОтКлиентов");
	СоответствиеКонстант.Вставить("ИспользоватьСогласованиеЗаказовКлиентов",
		"ИспользоватьВнутреннееСогласованиеЗаказовКлиентов");
	СоответствиеКонстант.Вставить("ИспользоватьСогласованиеСоглашенийСКлиентами",
		"ИспользоватьВнутреннееСогласованиеСоглашенийСКлиентами");
		
	Возврат СоответствиеКонстант.Получить(ИмяКонстанты);
КонецФункции

#КонецОбласти

#КонецОбласти
