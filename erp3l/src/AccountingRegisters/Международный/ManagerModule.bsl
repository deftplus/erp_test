#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Получает сторнирующие проводки документа(ов).
//
// Параметры:
//  Регистраторы - ДокументСсылка - документы (массив документов) для которых необходимо получить сторнирующие проводки.
//  ПланСчетов - СправочникСсылка.ПланыСчетовМеждународногоУчета - План счетов, по которому надо получить таблицу сторно.
//  ПериодПланаСчетов - Дата - период обращения к настройке плана счетов организации, если не используется ПериодРегистртора
//  ПериодРегистратора - Булево - признак заполнения даты проводки датой сторнируемого документа если не указан, то дата
//                                не заполнена.
//
// Возвращаемое значение:
//   ТаблицаЗначений - таблица проводок переданных регистраторов с обратным знаком сумм и типом проводки "Сторно" или "Реверс".
//
Функция ПроводкиСторно(Регистраторы, ПланСчетов, ПериодПланаСчетов, ПериодРегистратора = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПроводокСторно();
	Запрос.УстановитьПараметр("СписокДокументов", Регистраторы);
	Запрос.УстановитьПараметр("Ссылка", Документы.ОперацияМеждународный.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустаяДата", Дата("00010101"));
	Запрос.УстановитьПараметр("ПериодРегистратора", ПериодРегистратора);
	Запрос.УстановитьПараметр("ПланСчетов", ПланСчетов);
	Запрос.УстановитьПараметр("ПериодПланаСчетов", ПериодПланаСчетов);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	ОписаниеПолей = ОписаниеПолейРегистра();
	ИнвертируемыеПоля = ИнвертируемыеПоля(ОписаниеПолей);
	ИнвертируемыеРесурсы = ИнвертируемыеРесурсы(ОписаниеПолей);
	
	Для Каждого Проводка Из Результат Цикл
		Если Проводка.ЗаменитьСторноРеверсом Тогда
			ИнвертироватьПроводку(Проводка, ИнвертируемыеПоля, ИнвертируемыеРесурсы, ОписаниеПолей.КоличествоСубконто);
			Проводка.ТипПроводки = Перечисления.ТипыПроводокМеждународныйУчет.Реверс;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыБухгалтерии.Международный.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.6.14";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("bdce2c27-1664-4951-b272-2ae32a3c8d83");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыБухгалтерии.Международный.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет измерение ""План счетов"".';
									|en = 'Fills in ""Chart of accounts"" dimension.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыБухгалтерии.Международный.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ПланыСчетовМеждународногоУчета.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыБухгалтерии.Международный.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "МультиязычностьСервер.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = СоздатьНаборЗаписей().Метаданные().ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегистрБухгалтерии.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Международный КАК РегистрБухгалтерии
	|ГДЕ
	|	РегистрБухгалтерии.ПланСчетов = ЗНАЧЕНИЕ(Справочник.ПланыСчетовМеждународногоУчета.ПустаяСсылка)";

	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы,
		ПолноеИмяРегистра);
		
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = СоздатьНаборЗаписей().Метаданные().ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Для Каждого Документ Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Ссылка = Документ.Регистратор;
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Ссылка);
			Блокировка.Заблокировать();
			
			НаборЗаписей = СоздатьНаборЗаписей(); //РегистрБухгалтерииНаборЗаписейМеждународный -
			НаборЗаписей.Отбор.Регистратор.Установить(Документ.Регистратор);
			НаборЗаписей.Прочитать();
			
			Для Каждого СтрокаНабора Из НаборЗаписей Цикл
				Если Не ЗначениеЗаполнено(СтрокаНабора.ПланСчетов) Тогда
					СтрокаНабора.ПланСчетов = Справочники.ПланыСчетовМеждународногоУчета.Международный;
				КонецЕсли;
			КонецЦикла;
			
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Ссылка);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Документ.Регистратор);
			
		КонецПопытки;
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);

КонецПроцедуры

#КонецОбласти

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция ОписаниеПолейРегистра() Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	
	ОписаниеПолей = Новый Структура();
	ОписаниеПолей.Вставить("КоличествоСубконто",    МетаданныеРегистра.ПланСчетов.МаксКоличествоСубконто);
	ОписаниеПолей.Вставить("БалансовыеИзмерения",   Новый Массив());
	ОписаниеПолей.Вставить("НебалансовыеИзмерения", Новый Массив());
	ОписаниеПолей.Вставить("БалансовыеРесурсы",     Новый Массив());
	ОписаниеПолей.Вставить("НебалансовыеРесурсы",   Новый Массив());
	ОписаниеПолей.Вставить("Реквизиты",             Новый Массив());
	
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		ИмяИзмерения = Измерение.Имя;
		Если СтрНачинаетсяС(ИмяИзмерения, "Удалить") Тогда
		ИначеЕсли Измерение.Балансовый Тогда
			ОписаниеПолей.БалансовыеИзмерения.Добавить(ИмяИзмерения);
		Иначе
			ОписаниеПолей.НебалансовыеИзмерения.Добавить(ИмяИзмерения);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		ИмяРесурса = Ресурс.Имя;
		Если СтрНачинаетсяС(ИмяРесурса, "Удалить") Тогда
		ИначеЕсли Ресурс.Балансовый Тогда
			ОписаниеПолей.БалансовыеРесурсы.Добавить(ИмяРесурса);
		Иначе
			ОписаниеПолей.НебалансовыеРесурсы.Добавить(ИмяРесурса);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
		ИмяРеквизита = Реквизит.Имя;
		Если СтрНачинаетсяС(ИмяРеквизита, "Удалить") Тогда
		Иначе
			ОписаниеПолей.Реквизиты.Добавить(ИмяРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ОписаниеПолей;
	
КонецФункции

Функция ИнвертируемыеПоля(ОписаниеПолейРегистра) Экспорт
	
	ИнвертируемыеПоля = Новый Массив();
	ИнвертируемыеПоля.Добавить("Счет");
	ИнвертируемыеПоля.Добавить("Субконто");
	ИнвертируемыеПоля.Добавить("ВидСубконто");
	ИнвертируемыеПоля.Добавить("СоответствиеСчета");
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИнвертируемыеПоля, ОписаниеПолейРегистра.НебалансовыеИзмерения);
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(ИнвертируемыеПоля, ОписаниеПолейРегистра.НебалансовыеРесурсы);
	
	Возврат ИнвертируемыеПоля;
	
КонецФункции

Функция ИнвертируемыеРесурсы(ОписаниеПолейРегистра) Экспорт
	
	ИнвертируемыеРесурсы = ОбщегоНазначения.СкопироватьРекурсивно(ОписаниеПолейРегистра.БалансовыеРесурсы);
	
	Для Каждого ИмяРесурса Из ОписаниеПолейРегистра.НебалансовыеРесурсы Цикл
		ИнвертируемыеРесурсы.Добавить(ИмяРесурса + "Дт");
		ИнвертируемыеРесурсы.Добавить(ИмяРесурса + "Кт");
	КонецЦикла;
	
	Возврат ИнвертируемыеРесурсы;
	
КонецФункции

Процедура ИнвертироватьПроводку(Проводка, ИнвертируемыеПоля, ИнвертируемыеРесурсы, КоличествоСубконто) Экспорт
	
	Для Каждого ИмяПоля Из ИнвертируемыеПоля Цикл
		Если ИмяПоля = "Субконто" ИЛИ ИмяПоля = "ВидСубконто" Тогда
			Для НомерСубконто = 1 По КоличествоСубконто Цикл
				ЗначениеПоляДт = Проводка[ИмяПоля + "Дт" + НомерСубконто];
				Проводка[ИмяПоля + "Дт" + НомерСубконто] = Проводка[ИмяПоля + "Кт" + НомерСубконто];
				Проводка[ИмяПоля + "Кт" + НомерСубконто] = ЗначениеПоляДт;
			КонецЦикла;
		Иначе
			ЗначениеПоляДт = Проводка[ИмяПоля + "Дт"];
			Проводка[ИмяПоля + "Дт"] = Проводка[ИмяПоля + "Кт"];
			Проводка[ИмяПоля + "Кт"] = ЗначениеПоляДт;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ИмяРесурса Из ИнвертируемыеРесурсы Цикл
		Если ЗначениеЗаполнено(Проводка[ИмяРесурса]) Тогда
			Проводка[ИмяРесурса] = -Проводка[ИмяРесурса];
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаПроводокСторно()
	
	Возврат
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА &ПериодРегистратора
	|			ТОГДА Проводки.Период
	|		ИНАЧЕ &ПустаяДата
	|	КОНЕЦ КАК Период,
	|	ВЫБОР
	|		КОГДА &Ссылка = НЕОПРЕДЕЛЕНО
	|			ТОГДА Проводки.Регистратор
	|		ИНАЧЕ &Ссылка
	|	КОНЕЦ КАК Регистратор,
	|	Проводки.Организация,
	|	Проводки.СчетДт,
	|	Проводки.ПодразделениеДт,
	|	Проводки.НаправлениеДеятельностиДт,
	|	Проводки.ВидСубконтоДт1 КАК ВидСубконтоДт1,
	|	Проводки.СубконтоДт1,
	|	Проводки.ВидСубконтоДт2 КАК ВидСубконтоДт2,
	|	Проводки.СубконтоДт2,
	|	Проводки.ВидСубконтоДт3 КАК ВидСубконтоДт3,
	|	Проводки.СубконтоДт3,
	|	Проводки.СчетКт,
	|	Проводки.ПодразделениеКт,
	|	Проводки.НаправлениеДеятельностиКт,
	|	Проводки.ВидСубконтоКт1 КАК ВидСубконтоКт1,
	|	Проводки.СубконтоКт1,
	|	Проводки.ВидСубконтоКт2 КАК ВидСубконтоКт2,
	|	Проводки.СубконтоКт2,
	|	Проводки.ВидСубконтоКт3 КАК ВидСубконтоКт3,
	|	Проводки.СубконтоКт3,
	|	Проводки.ВалютаДт,
	|	-Проводки.ВалютнаяСуммаДт КАК ВалютнаяСуммаДт,
	|	Проводки.ВалютаКт,
	|	-Проводки.ВалютнаяСуммаКт КАК ВалютнаяСуммаКт,
	|	-Проводки.КоличествоДт КАК КоличествоДт,
	|	-Проводки.КоличествоКт КАК КоличествоКт,
	|	-Проводки.Сумма КАК Сумма,
	|	-Проводки.СуммаПредставления КАК СуммаПредставления,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыПроводокМеждународныйУчет.Сторно) КАК ТипПроводки,
	|	Проводки.Содержание КАК Содержание,
	|	Проводки.СоответствиеСчетаДт КАК СоответствиеСчетаДт,
	|	Проводки.СоответствиеСчетаКт КАК СоответствиеСчетаКт,
	|	ВЫБОР
	|		КОГДА ПланыСчетовМеждународногоУчетаОрганизаций.НастройкаФормированияПроводок ЕСТЬ NULL
	|			ТОГДА ЛОЖЬ
	|		КОГДА ПланыСчетовМеждународногоУчетаОрганизаций.НастройкаФормированияПроводок.СпособАннулированияПроводок
	|			= ЗНАЧЕНИЕ(Перечисление.СпособыАннулированияПроводокМеждународногоУчета.РеверсивнымиПроводками)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗаменитьСторноРеверсом
	|ИЗ
	|	РегистрБухгалтерии.Международный.ДвиженияССубконто(, , ПланСчетов = &ПланСчетов И Регистратор В (&СписокДокументов), , ) КАК Проводки
	|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовМеждународногоУчетаОрганизаций
	|		ПО Проводки.ПланСчетов = ПланыСчетовМеждународногоУчетаОрганизаций.ПланСчетов
	|		 И Проводки.Организация = ПланыСчетовМеждународногоУчетаОрганизаций.Организация
	|ГДЕ
	|	ВЫБОР
	|		КОГДА ПланыСчетовМеждународногоУчетаОрганизаций.Период ЕСТЬ NULL
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПланыСчетовМеждународногоУчетаОрганизаций.Период В
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(ПланыСчетовОрганизаций.Период)
	|			ИЗ
	|				РегистрСведений.ПланыСчетовМеждународногоУчетаОрганизаций КАК ПланыСчетовОрганизаций
	|			ГДЕ
	|				ПланыСчетовОрганизаций.ПланСчетов = Проводки.ПланСчетов
	|				И ПланыСчетовОрганизаций.Организация = Проводки.Организация
	|				И ПланыСчетовОрганизаций.Период <= ВЫБОР
	|					КОГДА &ПериодРегистратора
	|						ТОГДА Проводки.Период
	|					ИНАЧЕ &ПериодПланаСчетов
	|				КОНЕЦ
	|			)
	|	КОНЕЦ
	|";
	
КонецФункции


#КонецОбласти


#КонецЕсли
