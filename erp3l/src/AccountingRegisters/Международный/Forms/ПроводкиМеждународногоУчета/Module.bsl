
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не Параметры.Отбор.Свойство("Регистратор") Тогда
		ТекстСообщения = НСтр("ru = 'Непосредственное открытие этой формы не предусмотрено';
								|en = 'Application cannot open this form explicitly.'");
		ВызватьИсключение ТекстСообщения;
	КонецЕсли;
	
	Документ = Параметры.Отбор.Регистратор;
	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Дата, Организация");
	ДатаДокумента = РеквизитыДокумента.Дата;
	Организация = РеквизитыДокумента.Организация;
	
	ДокументПроводится = (Документ.Метаданные().Проведение <> Метаданные.СвойстваОбъектов.Проведение.Запретить);
	ДокументПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Проведен");
	Элементы.ФормаЗаписатьИЗакрыть.Доступность = ДокументПроводится ИЛИ ДокументПроведен;
	ТолькоПросмотр = НЕ (ДокументПроводится ИЛИ ДокументПроведен);
	
	Элементы.АнализКорреспонденций.Доступность = ПравоДоступа("Использование", Метаданные.Отчеты.АнализКорреспонденцийОперативногоУчета) И (ДокументПроводится ИЛИ ДокументПроведен);
	Элементы.СоздатьНаОсновании.Доступность = ПравоДоступа("ИнтерактивноеДобавление", Метаданные.Документы.ОперацияМеждународный) И (ДокументПроводится ИЛИ ДокументПроведен);
	Элементы.ФормаГруппаСтандартныеКоманды.Доступность = ДокументПроводится ИЛИ ДокументПроведен;
	Элементы.РучнаяКорректировкаПроводок.Доступность = ДокументПроводится ИЛИ ДокументПроведен;
	
	Если ТипЗнч(Документ) = Тип("ДокументСсылка.РегламентнаяОперацияМеждународныйУчет")
		И Документ.ТипОперации = Перечисления.ТипыРегламентныхОперацийМеждународныйУчет.РасчетКурсовыхРазницВалютаПредставления Тогда
		Элементы.Сумма.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	СтатусыОтраженияВручную.Добавить(Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную);
	СтатусыОтраженияВручную.Добавить(Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную);
	
	СтатусыТребуетсяАвтоматическоеОтражение.Добавить(Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете);
	СтатусыТребуетсяАвтоматическоеОтражение.Добавить(Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете);
	СтатусыТребуетсяАвтоматическоеОтражение.Добавить(Перечисления.СтатусыОтраженияВМеждународномУчете.ОжидаетсяОтражениеВРеглУчете);
	СтатусыТребуетсяАвтоматическоеОтражение.Добавить(Перечисления.СтатусыОтраженияВМеждународномУчете.НарушенаДвойнаяЗаписьФинансовыхРегистров);
	
	ПрефиксИмениСтраницПоПланамСчетов = "ПланСчетов_";
	
	ЗаполнитьСтатусыОтраженияПоПланамСчетов();
	
	ПолучитьСостояниеОтраженияДокументаПоПлануСчетов();
	ОбновитьДатуЗапретаФормированияПроводок();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	ПовторноеОткрытиеСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ТипыСвязанныеСОрганизацией = НастройкаСчетовУчетаСервер.ТипыСвязанныеСОрганизацией();
	
	ЗаполнитьПредставлениеВидовСубконто();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ЗаписыватьПустойНабор", Истина);
	
	Если ПараметрыЗаписи.Свойство("СформироватьПроводкиАвтоматически") 
		И ПараметрыЗаписи.СформироватьПроводкиАвтоматически = Истина Тогда
		ПроводкиДокумента = ОтразитьВМеждународномУчетеАвтоматически();
		ТекущийОбъект.Загрузить(ПроводкиДокумента);
	Иначе
		Если СтатусыОтраженияПоПланамСчетов.НайтиСтроки(Новый Структура("ТребуетсяЗаписьСтатуса", Истина)).Количество() > 0 Тогда
			ЗаписиОтраженияДокумента = РегистрыСведений.ОтражениеДокументовВМеждународномУчете.СоздатьНаборЗаписей();
			ЗаписиОтраженияДокумента.Отбор.Регистратор.Установить(Документ);
			ЗаписиОтраженияДокумента.Прочитать();
			Для каждого Запись Из ЗаписиОтраженияДокумента Цикл
				ПараметрыОтбора = Новый Структура("ПланСчетов, ТребуетсяЗаписьСтатуса", Запись.ПланСчетов, Истина);
				СтрокиТрабуетсяЗаписьСтатуса = СтатусыОтраженияПоПланамСчетов.НайтиСтроки(ПараметрыОтбора);
				Если СтрокиТрабуетсяЗаписьСтатуса.Количество() > 0 Тогда
					Запись.Статус = СтрокиТрабуетсяЗаписьСтатуса[0].СтатусОтражения;
					Запись.Комментарий = "";
				КонецЕсли;
			КонецЦикла;
			ЗаписиОтраженияДокумента.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ЗаполнитьСтатусыОтраженияПоПланамСчетов();
	
	ПолучитьСостояниеОтраженияДокументаПоПлануСчетов();
	ЗаполнитьПредставлениеВидовСубконто();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОповеститьОбИзмененииОтраженияДокументаВМеждународномУчете();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ДокументОтраженВМеждународномУчете" И Источник = Документ Тогда
		ПовторноеОткрытиеСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	ПланСчетовИзНастроек = Настройки.Получить("ПланСчетов");
	Если ЗначениеЗаполнено(ПланСчетовИзНастроек)
		И СтатусыОтраженияПоПланамСчетов.НайтиСтроки(Новый Структура("ПланСчетов", ПланСчетовИзНастроек)).Количество() = 0 Тогда
		Настройки.Удалить("ПланСчетов");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Если ЗначениеЗаполнено(ПланСчетов) Тогда
		СтрокаТаблицыСтатусов = СтатусыОтраженияПоПланамСчетов.НайтиСтроки(Новый Структура("ПланСчетов", ПланСчетов))[0];
		ИдентификаторПланаСчетов = СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов;
		Элементы.ГруппаСтраницыПоПланамСчетов.ТекущаяСтраница = Элементы[ПрефиксИмениСтраницПоПланамСчетов + ИдентификаторПланаСчетов];
		ПолучитьСостояниеОтраженияДокументаПоПлануСчетов();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РучнаяКорректировкаПроводокПриИзменении(Элемент)
	
	РучнаяКорректировкаПроводокПриИзмененииСервер();

КонецПроцедуры


&НаКлиенте
Процедура ГруппаСтраницыПоПланамСчетовПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ИдентификаторПланаСчетов = СтрЗаменить(ТекущаяСтраница.Имя, ПрефиксИмениСтраницПоПланамСчетов, "");
	
	Отбор = Новый Структура("ИдентификаторПланаСчетов", ИдентификаторПланаСчетов);
	РезультатОтбораПланыСчетов = СтатусыОтраженияПоПланамСчетов.НайтиСтроки(Отбор);
	ПланСчетов = РезультатОтбораПланыСчетов[0].ПланСчетов;
	ПолучитьСостояниеОтраженияДокументаПоПлануСчетов();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыНаборЗаписей

&НаКлиенте
Процедура НаборЗаписейВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если Не РучнаяКорректировкаПроводок Тогда
		ПутьКДанным = ПутьКДанным(Поле.Имя);
		ЧастиПути = СтрРазделить(ПутьКДанным, ".");
		Значение = Элемент.ТекущиеДанные[ЧастиПути[1]];
		Если ЗначениеЗаполнено(Значение) 
			И ТипЗнч(Значение) <> Тип("Число") 
			И ТипЗнч(Значение) <> Тип("Дата")
			И ТипЗнч(Значение) <> Тип("Булево") Тогда
			ПоказатьЗначение(, Значение);
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НаборЗаписейПередНачаломИзменения(Элемент, Отказ)
		
	ИзменитьПараметрыВыбораПолейСубконто(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура НаборЗаписейПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Элемент.ТекущиеДанные.Организация = Организация;
		Элемент.ТекущиеДанные.ПланСчетов = ПланСчетов;
		Элемент.ТекущиеДанные.Период = ДатаДокумента;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетДтПриИзменении(Элемент)
	
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СвойстваСчета(ТекущиеДанные.СчетДт, "Дт"));
	
КонецПроцедуры

&НаКлиенте
Процедура СчетДтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", ТекущиеДанные.Организация);
	ПараметрыФормы.Вставить("ПланСчетов",  ТекущиеДанные.ПланСчетов);
	ПараметрыФормы.Вставить("ВидДвижения", ПредопределенноеЗначение("Перечисление.ВидыДвиженийБухгалтерии.Дебет"));
	ПараметрыФормы.Вставить("Счет",        ТекущиеДанные.СчетДт);
	ОткрытьФорму("ПланСчетов.Международный.Форма.ФормаВыбораСПодборомСчетов", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКтПриИзменении(Элемент)
	
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	ЗаполнитьЗначенияСвойств(ТекущиеДанные, СвойстваСчета(ТекущиеДанные.СчетКт, "Кт"));
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКтНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Организация", ТекущиеДанные.Организация);
	ПараметрыФормы.Вставить("ПланСчетов",  ТекущиеДанные.ПланСчетов);
	ПараметрыФормы.Вставить("ВидДвижения", ПредопределенноеЗначение("Перечисление.ВидыДвиженийБухгалтерии.Кредит"));
	ПараметрыФормы.Вставить("Счет",        ТекущиеДанные.СчетДт);
	ОткрытьФорму("ПланСчетов.Международный.Форма.ФормаВыбораСПодборомСчетов", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаДтПриИзменении(Элемент)
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ВалютаПриИзменении(ТаблицаФормы, "Дт");
КонецПроцедуры

&НаКлиенте
Процедура ВалютаКтПриИзменении(Элемент)
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ВалютаПриИзменении(ТаблицаФормы, "Кт");
КонецПроцедуры

&НаКлиенте
Процедура ВалютнаяСуммаДтПриИзменении(Элемент)
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ВалютаПриИзменении(ТаблицаФормы, "Дт");
КонецПроцедуры

&НаКлиенте
Процедура ВалютнаяСуммаКтПриИзменении(Элемент)
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ВалютаПриИзменении(ТаблицаФормы, "Кт");
КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ТекущаяСтрока = ТаблицаФормы.ТекущиеДанные;
	ТекущаяСтрока.СуммаПредставления
		= РассчитатьСуммуПредставления(ТекущаяСтрока.ПланСчетов, ТекущаяСтрока.Организация, ТекущаяСтрока.Сумма, ТекущаяСтрока.Период);
	
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт1ПриИзменении(Элемент)
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ИзменитьПараметрыВыбораПолейСубконто(ТаблицаФормы, "Дт");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт2ПриИзменении(Элемент)
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ИзменитьПараметрыВыбораПолейСубконто(ТаблицаФормы, "Дт");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоДт3ПриИзменении(Элемент)
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ИзменитьПараметрыВыбораПолейСубконто(ТаблицаФормы, "Дт");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт1ПриИзменении(Элемент)
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ИзменитьПараметрыВыбораПолейСубконто(ТаблицаФормы, "Кт");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт2ПриИзменении(Элемент)
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ИзменитьПараметрыВыбораПолейСубконто(ТаблицаФормы, "Кт");
КонецПроцедуры

&НаКлиенте
Процедура СубконтоКт3ПриИзменении(Элемент)
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ИзменитьПараметрыВыбораПолейСубконто(ТаблицаФормы, "Кт");
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ТаблицаФормы = ОбщегоНазначенияУТКлиентСервер.ТаблицаФормыЭлемента(Элемент);
	ТекущиеДанные = ТаблицаФормы.ТекущиеДанные;
	НастройкаСчетовУчетаКлиент.ОбработкаПроводокПриИзмененииОрганизации(ТекущиеДанные, ТипыСвязанныеСОрганизацией); 
	ИзменитьПараметрыВыбораПолейСубконто(ТаблицаФормы);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	ОчиститьСообщения();
	
	РезультатЗаписи = Записать(Новый Структура("ЗакрыватьПриЗаписи", Истина));
	Если РезультатЗаписи Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтразитьВМеждународномУчете(Команда)
	
	ОчиститьСообщения();
	
	Записать(Новый Структура("СформироватьПроводкиАвтоматически", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПроводкиАвтоматически(Команда)
	
	Если ЕстьПроводкиДокументаПоМеждународномуУчету() Тогда
		ТекстВопроса = НСтр("ru = 'Существующие проводки будут удалены. Продолжить?';
							|en = 'Existing entries will be deleted. Continue?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияВопросПередАвтоматическимЗаполнениемПроводок", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьПроводкиАвтоматическиСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодтвердитьАктуальностьПроводок(Команда)
	
	ПодтвердитьАктуальностьПроводокСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СторнироватьПроводки(Команда)
	
	ЗначенияЗаполнения = Новый Структура();
	ЗначенияЗаполнения.Вставить("Основание", Документ);
	ЗначенияЗаполнения.Вставить("ПланСчетов", ПланСчетов);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ЗначенияЗаполнения", ЗначенияЗаполнения);
	
	ОткрытьФорму("Документ.ОперацияМеждународный.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСостояниеОтражения(Команда)
	ОбновитьСостояниеОтраженияНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура АнализКорреспонденций(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КлючВарианта", "АнализКорреспонденций");
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	
	ПараметрОтбор = Новый Структура();
	Если ЗначениеЗаполнено(ПланСчетов) Тогда
		ПараметрОтбор.Вставить("ПланСчетов", ПланСчетов);
	КонецЕсли;
	Если ЗначениеЗаполнено(Документ) Тогда
		ПараметрОтбор.Вставить("Регистратор", Документ);
	КонецЕсли;
	ПараметрыФормы.Вставить("Отбор", ПараметрОтбор);
	
	ЗначенияПользовательскихНастроек = Новый Структура();
	ЗначенияПользовательскихНастроек.Вставить("ПериодОтчета", ВариантСтандартногоПериода.ПроизвольныйПериод);
	ПользовательскиеНастройки = ПользовательскиеНастройкиОтчетаАнализКорреспонденций(ЗначенияПользовательскихНастроек);
	ПараметрыФормы.Вставить("ПользовательскиеНастройки", ПользовательскиеНастройки);
	
	ОткрытьФорму("Отчет.АнализКорреспонденцийОперативногоУчета.ФормаОбъекта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();

	Для каждого СтрокаТаблицыСтатусов Из СтатусыОтраженияПоПланамСчетов Цикл
	
	#Область ОтображениеВалютнаяСумма
		
		ИмяПоляВалютаДт = "ВалютаДт" + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов;
		ИмяВалютнаяСуммаДт = "ВалютнаяСуммаДт" + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов;

		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляВалютаДт);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяВалютнаяСуммаДт);
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.ВалютныйДт");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	#КонецОбласти
	
	#Область ОтображениеКоличество
		ИмяПоляНадписьКоличествоДт = "НадписьКоличествоДт"  + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов;
		ИмяПоляКоличествоДт = "КоличествоДт" + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов;

		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляНадписьКоличествоДт);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляКоличествоДт);
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.КоличественныйДт");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	#КонецОбласти
	
	#Область ОтображениеКоличество
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляНадписьКоличествоДт);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Кол.:';
																	|en = 'Qty.:'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти

	#Область ОтображениеВидаСубконтоДт1
		
		ИмяПоляПредставлениеВидСубконтоДт1 = "ПредставлениеВидСубконтоДт1" + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов;
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконтоДт1);
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СчетДт");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СубконтоДт1");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконтоДт1);
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СубконтоДт1");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	#КонецОбласти
	
	#Область ОтображениеВидаСубконтоДт2
		
		ИмяПоляПредставлениеВидСубконтоДт2 = "ПредставлениеВидСубконтоДт2" + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов;
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконтоДт2);
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СчетДт");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СубконтоДт2");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконтоДт2);
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СубконтоДт2");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	#КонецОбласти
	
	#Область ОтображениеВидаСубконтоДт3
	
		ИмяПоляПредставлениеВидСубконтоДт3 = "ПредставлениеВидСубконтоДт3" + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов;
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконтоДт3);
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СчетДт");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СубконтоДт3");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконтоДт3);
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СубконтоДт3");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	#КонецОбласти
	
	#Область ОтображениеВалютнаяСумма
		
		ИмяПоляВалютаКт = "ВалютаКт" + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов;
		ИмяВалютнаяСуммаКт = "ВалютнаяСуммаКт" + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов;

		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляВалютаКт);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяВалютнаяСуммаКт);
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.ВалютныйКт");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	#КонецОбласти
	
	#Область ОтображениеКоличество
		ИмяПоляНадписьКоличествоКт = "НадписьКоличествоКт" + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов;
		ИмяПоляКоличествоКт = "КоличествоКт" + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов;

		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляНадписьКоличествоКт);
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляКоличествоКт);
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.КоличественныйКт");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
	#КонецОбласти
	
	#Область ОтображениеКоличество
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляНадписьКоличествоКт);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Кол.:';
																	|en = 'Qty.:'"));
		Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	#КонецОбласти

	#Область ОтображениеВидаСубконтоКт1
		
		ИмяПоляПредставлениеВидСубконтоКт1 = "ПредставлениеВидСубконтоКт1" + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов;
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконтоКт1);
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СчетКт");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СубконтоКт1");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконтоКт1);
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СубконтоКт1");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	#КонецОбласти
	
	#Область ОтображениеВидаСубконтоКт2
		
		ИмяПоляПредставлениеВидСубконтоКт2 = "ПредставлениеВидСубконтоКт2" + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов;
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконтоКт2);
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СчетКт");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СубконтоКт2");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконтоКт2);
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СубконтоКт2");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	#КонецОбласти
	
	#Область ОтображениеВидаСубконтоКт3
		
		ИмяПоляПредставлениеВидСубконтоКт3 = "ПредставлениеВидСубконтоКт3" + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов;
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконтоКт3);
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СчетКт");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СубконтоКт3");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ЦветТекстаПодсказкиВвода);
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляПредставлениеВидСубконтоКт3);
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СубконтоКт3");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	#КонецОбласти
	
	#Область ТекстОбычнаяПроводка
		
		ИмяПоляТипПроводки = "ТипПроводки" + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов;
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляТипПроводки);
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.ТипПроводки");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.НезаполненноеПолеТаблицы);
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Обычная';
																	|en = 'Normal'"));
	#КонецОбласти
	
	#Область ШаблонПроводки
		
		ИмяПоляШаблонПроводки = "ШаблонПроводки" + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов;
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляШаблонПроводки);
		
		ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.ШаблонПроводки");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		ГруппаОтбораСоответствий = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаОтбораСоответствий.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
		ОтборЭлемента = ГруппаОтбораСоответствий.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СоответствиеСчетаДт");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		ОтборЭлемента = ГруппаОтбораСоответствий.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СоответствиеСчетаКт");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		ОтборЭлемента = ГруппаОтбораСоответствий.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СоответствиеОборотов");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	#КонецОбласти
	
	#Область СоответствияСчетовИОборотов
		
		ИмяПоляСоответствиеСчетаДт = "СоответствиеСчетаДт" + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов;
		ИмяПоляСоответствиеСчетаКт = "СоответствиеСчетаКт" + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов;
		ИмяПоляСоответствиеОборотов = "СоответствиеОборотов" + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов;
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляСоответствиеСчетаДт);
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СоответствиеСчетаДт");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СоответствиеСчетаКт");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляСоответствиеСчетаКт);
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СоответствиеСчетаКт");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СоответствиеСчетаДт");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
		
		Элемент = УсловноеОформление.Элементы.Добавить();
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ИмяПоляСоответствиеОборотов);
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("НаборЗаписей.СоответствиеОборотов");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	#КонецОбласти

	КонецЦикла

КонецПроцедуры

&НаСервере
Процедура ПовторноеОткрытиеСервер()

	ПолучитьСостояниеОтраженияДокументаПоПлануСчетов();
	УстановитьСвойстваЭлементовТекущейВкладки();
	ДокументПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Проведен");
	Если НЕ ДокументПроведен ИЛИ (ДокументПроведен И НЕ РучнаяКорректировкаПроводок) Тогда
		Прочитать();
	КонецЕсли;
	НаборЗаписей.Сортировать("Период,Организация");

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещенияВопросПередАвтоматическимЗаполнениемПроводок(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаполнитьПроводкиАвтоматическиСервер();
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция СтатусОтражения()
	
	СтрокиПоПлануСчетов = СтатусыОтраженияПоПланамСчетов.НайтиСтроки(Новый Структура("ПланСчетов", ПланСчетов));
	Если СтрокиПоПлануСчетов.Количество() > 0 Тогда
		Возврат СтрокиПоПлануСчетов[0].СтатусОтражения;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ПодтвердитьАктуальностьПроводокСервер()
	
	СтрокаТаблицыСтатусов = СтатусыОтраженияПоПланамСчетов.НайтиСтроки(Новый Структура("ПланСчетов", ПланСчетов))[0];
	СтрокаТаблицыСтатусов.СтатусОтражения = ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную");
	СтрокаТаблицыСтатусов.ТребуетсяЗаписьСтатуса = Истина;
	
	ПолучитьСостояниеОтраженияДокументаПоПлануСчетов();
	УстановитьКартинкуСтатусаОтраженияСервер(СтрокаТаблицыСтатусов);
	
КонецПроцедуры

&НаСервере
Процедура РучнаяКорректировкаПроводокПриИзмененииСервер()

	СтрокаТаблицыСтатусов = СтатусыОтраженияПоПланамСчетов.НайтиСтроки(Новый Структура("ПланСчетов", ПланСчетов))[0];
	Если РучнаяКорректировкаПроводок 
		И СтатусыОтраженияВручную.НайтиПоЗначению(СтрокаТаблицыСтатусов.СтатусОтражения) = Неопределено Тогда
		СтрокаТаблицыСтатусов.СтатусОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную;
		СтрокаТаблицыСтатусов.ТребуетсяЗаписьСтатуса = Истина;
	ИначеЕсли НЕ РучнаяКорректировкаПроводок 
		И СтатусыОтраженияВручную.НайтиПоЗначению(СтрокаТаблицыСтатусов.СтатусОтражения) <> Неопределено Тогда
		СтрокаТаблицыСтатусов.СтатусОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете;
		СтрокаТаблицыСтатусов.ТребуетсяЗаписьСтатуса = Истина;
	КонецЕсли;
	
	ПолучитьСостояниеОтраженияДокументаПоПлануСчетов();
	УстановитьКартинкуСтатусаОтраженияСервер(СтрокаТаблицыСтатусов);

КонецПроцедуры

&НаСервере
Функция ЭтоРучнаяКорректировкаПроводок(Статус)
	
	Если СтатусыОтраженияВручную.НайтиПоЗначению(Статус) <> Неопределено Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция Комментарий()
	
	СтрокиПоПлануСчетов = СтатусыОтраженияПоПланамСчетов.НайтиСтроки(Новый Структура("ПланСчетов", ПланСчетов));
	Если СтрокиПоПлануСчетов.Количество() > 0 Тогда
		Возврат СтрСоединить(СтрокиПоПлануСчетов[0].Комментарии, Символы.ПС);
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПроводкиАвтоматическиСервер()
	
	ПараметрыОтражения = МеждународныйУчетПроведениеСервер.ПараметрыОтраженияВМеждународномУчете();
	ПараметрыОтражения.Документы = Документ;
	ПараметрыОтражения.АвтоматическоеОтражение = Ложь;
	ПроводкиДокумента = МеждународныйУчетПроведениеСервер.ОтразитьВМеждународномУчете(ПараметрыОтражения);
	ПроводкиДокумента = МеждународныйУчетПроведениеСервер.ЗаписываемыеПроводки(ПроводкиДокумента);
	
	ЗаписиПоПлануСчетов = НаборЗаписей.НайтиСтроки(Новый Структура("ПланСчетов", ПланСчетов));
	Для каждого ЗаписьПоПлануСчетов Из ЗаписиПоПлануСчетов Цикл
		НаборЗаписей.Удалить(ЗаписьПоПлануСчетов);
	КонецЦикла;
	
	Для Каждого Проводка Из ПроводкиДокумента Цикл
		Если Проводка.ПланСчетов <> ПланСчетов Тогда
			Продолжить;
		КонецЕсли;
		Запись = НаборЗаписей.Добавить();
		ЗаполнитьЗначенияСвойств(Запись,Проводка);
		Запись.Активность = Истина;
	КонецЦикла;
	ЗаполнитьПредставлениеВидовСубконто();
	НаборЗаписей.Сортировать("ПланСчетов, Сторно Убыв, Период, Организация");

КонецПроцедуры

&НаСервере
Функция ОтразитьВМеждународномУчетеАвтоматически()
	
	ПараметрыОтражения = МеждународныйУчетПроведениеСервер.ПараметрыОтраженияВМеждународномУчете();
	ПараметрыОтражения.Документы = Документ;
	ПараметрыОтражения.АвтоматическоеОтражение = Ложь;
	ПроводкиДокумента = МеждународныйУчетПроведениеСервер.ОтразитьВМеждународномУчете(ПараметрыОтражения);
	
	ПроводкиДокументаДляСохранения = ПроводкиДокумента.СкопироватьКолонки();
	Для каждого СтатусыОтражения Из СтатусыОтраженияПоПланамСчетов Цикл
		Если СтатусыОтражения.СтатусОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную
			ИЛИ СтатусыОтражения.СтатусОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную Тогда
			ПроводкиСформированныеВручную = НаборЗаписей.НайтиСтроки(Новый Структура("ПланСчетов", СтатусыОтражения.ПланСчетов));
			ПустойВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоМеждународные.ПустаяСсылка();
			Для каждого Проводка Из ПроводкиСформированныеВручную Цикл
				НоваяСтрока = ПроводкиДокументаДляСохранения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Проводка);
				СвойстваСчетаДт = МеждународныйУчетСерверПовтИсп.СвойстваСчета(НоваяСтрока.СчетДт);
				НоваяСтрока.ВидСубконтоДт1 = ?(СвойстваСчетаДт.ВидСубконто1 <> Неопределено, СвойстваСчетаДт.ВидСубконто1, ПустойВидСубконто);
				НоваяСтрока.ВидСубконтоДт2 = ?(СвойстваСчетаДт.ВидСубконто2 <> Неопределено, СвойстваСчетаДт.ВидСубконто2, ПустойВидСубконто);
				НоваяСтрока.ВидСубконтоДт3 = ?(СвойстваСчетаДт.ВидСубконто3 <> Неопределено, СвойстваСчетаДт.ВидСубконто3, ПустойВидСубконто);
				СвойстваСчетаКт = МеждународныйУчетСерверПовтИсп.СвойстваСчета(НоваяСтрока.СчетКт);
				НоваяСтрока.ВидСубконтоКт1 = ?(СвойстваСчетаКт.ВидСубконто1 <> Неопределено, СвойстваСчетаКт.ВидСубконто1, ПустойВидСубконто);
				НоваяСтрока.ВидСубконтоКт2 = ?(СвойстваСчетаКт.ВидСубконто2 <> Неопределено, СвойстваСчетаКт.ВидСубконто2, ПустойВидСубконто);
				НоваяСтрока.ВидСубконтоКт3 = ?(СвойстваСчетаКт.ВидСубконто3 <> Неопределено, СвойстваСчетаКт.ВидСубконто3, ПустойВидСубконто);
				НоваяСтрока.Статус = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную;
			КонецЦикла;
		Иначе
			ПроводкиСформированныеАвтоматически = ПроводкиДокумента.НайтиСтроки(Новый Структура("ПланСчетов", СтатусыОтражения.ПланСчетов));
			Для каждого Проводка Из ПроводкиСформированныеАвтоматически Цикл
				НоваяСтрока = ПроводкиДокументаДляСохранения.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, Проводка);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ОтражениеДокументовВМеждународномУчете = РегистрыСведений.ОтражениеДокументовВМеждународномУчете.СоздатьНаборЗаписей();
	ОтражениеДокументовВМеждународномУчете.Отбор.Регистратор.Установить(Документ);
	ОтражениеДокументовВМеждународномУчете.Прочитать();
	Измерения = ОтражениеДокументовВМеждународномУчете.Выгрузить().Скопировать(, "ПланСчетов, Организация, ДатаОтражения");
	МеждународныйУчетПроведениеСервер.ОбновитьСтатусОтраженияДокумента(Документ, Измерения, ПроводкиДокументаДляСохранения, Истина);
	
	ПроводкиДокументаДляСохранения = МеждународныйУчетПроведениеСервер.ЗаписываемыеПроводки(ПроводкиДокументаДляСохранения);
	ПроводкиДокументаДляСохранения.Сортировать("ПланСчетов, Сторно Убыв, Период, Организация");
	
	Возврат ПроводкиДокументаДляСохранения;

КонецФункции

&НаСервере
Процедура ПолучитьСостояниеОтраженияДокументаПоПлануСчетов()

	СамоотражающиесяДокументы = Новый Соответствие;
	СамоотражающиесяДокументы.Вставить(Тип("ДокументСсылка.РегламентнаяОперацияМеждународныйУчет"), Истина);
	ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(
		СамоотражающиесяДокументы, МеждународныйУчетПоДаннымДокументов.ТипыДокументовКОтражению());
	
	СтатусОтражения = СтатусОтражения();
	РучнаяКорректировкаПроводок = ЭтоРучнаяКорректировкаПроводок(СтатусОтражения);
	ЕстьПроводки = ЕстьПроводкиДокументаПоМеждународномуУчету();
	Комментарий = Комментарий();
	
	Если СтатусОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную Тогда
			
		Состояние = Новый ФорматированнаяСтрока(
						НСтр("ru = 'Отражен в учете вручную.';
							|en = 'Manually posted to accounting.'"),
						,
						ЦветаСтиля.ТекстИнформационнойНадписи);
		
	ИначеЕсли СтатусОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете.ОжидаетсяОтражениеВРеглУчете Тогда
		
		Состояние = Новый ФорматированнаяСтрока(
						НСтр("ru = 'Ожидается отражение в регл. учете.';
							|en = 'Recording in local accounting is expected.'"),
						,
						ЦветаСтиля.ПоясняющийОшибкуТекст);
		
	ИначеЕсли СтатусОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете.НарушенаДвойнаяЗаписьФинансовыхРегистров Тогда
		
		Состояние = Новый ФорматированнаяСтрока(
						НСтр("ru = 'Нарушена двойная запись в финансовых регистрах.';
							|en = 'Double entry of financial registers is violated.'"),
						,
						ЦветаСтиля.ПоясняющийОшибкуТекст);
		
	ИначеЕсли СтатусОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете Тогда
		
		Состояние = Новый ФорматированнаяСтрока(
						НСтр("ru = 'Отсутствуют правила отражения в учете.';
							|en = 'No rules of recording in accounting.'"),
						,
						ЦветаСтиля.ПоясняющийОшибкуТекст);
		
	ИначеЕсли СтатусОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете Тогда
		
		Состояние = Новый ФорматированнаяСтрока(
						НСтр("ru = 'Отражен в учете.';
							|en = 'Posted to accounting.'"),
						,
						ЦветаСтиля.ТекстИнформационнойНадписи);
		
	ИначеЕсли СтатусОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете Тогда
		Если ЕстьПроводки Тогда
			Состояние = Новый ФорматированнаяСтрока(
						НСтр("ru = 'Ожидается повторное отражение в учете. Проводки могут быть неактуальными.';
							|en = 'Re-recording in accounting is pending. Entries may be irrelevant.'"),
						,
						ЦветаСтиля.ИзмененноеЗначениеРеквизитаЦвет);
		Иначе
			Состояние = Новый ФорматированнаяСтрока(
						НСтр("ru = 'Ожидается отражение в учете';
							|en = 'Awaits recording in accounting.'"),
						,
						ЦветаСтиля.ТекстИнформационнойНадписи);
		КонецЕсли;
		
	ИначеЕсли СтатусОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную Тогда
		Если ЕстьПроводки Тогда
			Состояние = Новый ФорматированнаяСтрока(
						НСтр("ru = 'При необходимости скорректируйте проводки и подтвердите актуальность.';
							|en = 'Correct the entries and confirm relevance, if required.'"),
						,
						ЦветаСтиля.ИзмененноеЗначениеРеквизитаЦвет);
		Иначе
			Состояние = Новый ФорматированнаяСтрока(
						НСтр("ru = 'Требуется ручное отражение в учете.';
							|en = 'Manual recording in accounting.'"),
						,
						ЦветаСтиля.ТекстИнформационнойНадписи);
		КонецЕсли;
	Иначе
		Если ЕстьПроводки Тогда
			Состояние = Новый ФорматированнаяСтрока(
						НСтр("ru = 'Отражен в учете.';
							|en = 'Posted to accounting.'"),
						,
						ЦветаСтиля.ТекстИнформационнойНадписи);
		ИначеЕсли СамоотражающиесяДокументы[ТипЗнч(Документ)] <> Неопределено Тогда
			Состояние = Новый ФорматированнаяСтрока(
						НСтр("ru = 'Документ не проведен.';
							|en = 'Document is not posted.'"),
						,
						ЦветаСтиля.ТекстИнформационнойНадписи);
		Иначе
			Состояние = Новый ФорматированнаяСтрока(
						НСтр("ru = 'Документ не отражается в учете или отсутствует настройка для организации..';
							|en = 'The document is not posted to accounting or there is no setting for the company..'"),
						,
						ЦветаСтиля.ТекстИнформационнойНадписи);
			
			Элементы.ЗаполнитьПроводкиАвтоматически.Видимость = Ложь;
			Элементы.РучнаяКорректировкаПроводок.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСвойстваЭлементовШапки();
	УстановитьСвойстваЭлементовТекущейВкладки();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовШапки()
	
	ЕстьОтражениеВручную = Ложь;
	ТребуетсяАвтоматическоеОтражениеВУчете = Ложь;
	
	Для каждого СтрокаТаблицыСтатусов Из СтатусыОтраженияПоПланамСчетов Цикл
		
		Если СтатусыОтраженияВручную.НайтиПоЗначению(СтрокаТаблицыСтатусов.СтатусОтражения) <> Неопределено Тогда
			ЕстьОтражениеВручную = Истина;
		ИначеЕсли СтатусыТребуетсяАвтоматическоеОтражение.НайтиПоЗначению(СтрокаТаблицыСтатусов.СтатусОтражения) <> Неопределено Тогда
			ТребуетсяАвтоматическоеОтражениеВУчете = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Элементы.ФормаЗаписатьИЗакрыть.Видимость = ЕстьОтражениеВручную;
	Элементы.ФормаЗаписать.Видимость = ЕстьОтражениеВручную;
	Элементы.ФормаЗаписатьИЗакрыть.КнопкаПоУмолчанию = ЕстьОтражениеВручную;
	
	Элементы.ФормаОтразитьВМеждународномУчете.Видимость =  ТребуетсяАвтоматическоеОтражениеВУчете Или Не ЕстьОтражениеВручную;
	Элементы.ФормаОтразитьВМеждународномУчете.Доступность = ТребуетсяАвтоматическоеОтражениеВУчете;
	Элементы.ФормаОтразитьВМеждународномУчете.КнопкаПоУмолчанию = ТребуетсяАвтоматическоеОтражениеВУчете;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовТекущейВкладки()
	
	СтатусыОтражения = Перечисления.СтатусыОтраженияВМеждународномУчете;
	
	ТипыДокументовПараллельногоУчета = Метаданные.РегистрыБухгалтерии.Международный.Команды.ПроводкиДокументаПараллельногоУчета.ТипПараметраКоманды.Типы();
	ДокументПараллельногоУчета = ТипыДокументовПараллельногоУчета.Найти(ТипЗнч(Документ)) <> Неопределено;
	
	Элементы["РучнаяКорректировкаПроводок"+ ИдентификаторПланаСчетов].Видимость = НЕ ДокументПараллельногоУчета;
	Элементы["Комментарий" + ИдентификаторПланаСчетов].Видимость = ЗначениеЗаполнено(Комментарий);
	Элементы["ПроверитьПравилаОтраженияВУчете" + ИдентификаторПланаСчетов].Видимость = (СтатусОтражения = СтатусыОтражения.ОтсутствуютПравилаОтраженияВУчете);
	
	Элементы["НаборЗаписей" + ИдентификаторПланаСчетов].ТолькоПросмотр = НЕ РучнаяКорректировкаПроводок;
	Элементы["ЗаполнитьПроводкиАвтоматически"  + ИдентификаторПланаСчетов].Видимость = РучнаяКорректировкаПроводок;
	
	Элементы["ПодтвердитьАктуальностьПроводок" + ИдентификаторПланаСчетов].Видимость =
		РучнаяКорректировкаПроводок И СтатусОтражения = СтатусыОтражения.КОтражениюВУчетеВручную;
	
	Элементы["АнализКорреспонденций" + ИдентификаторПланаСчетов].ПоложениеВКоманднойПанели =
		?(СтатусОтражения = СтатусыОтражения.ОтраженоВУчете ИЛИ СтатусОтражения = СтатусыОтражения.ОтраженоВУчетеВручную,
			ПоложениеКнопкиВКоманднойПанели.ВДополнительномПодменю,
			ПоложениеКнопкиВКоманднойПанели.ВКоманднойПанелиИВДополнительномПодменю);
	
	НастройкаФормированияПроводок = МеждународныйУчетСерверПовтИсп.ИспользуемаяНастройкаФормированияПроводок(
		ДатаДокумента, ПланСчетов, Организация);
	
	СпособАннулированияПроводок = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(НастройкаФормированияПроводок, "СпособАннулированияПроводок");
	
	Если СпособАннулированияПроводок = Перечисления.СпособыАннулированияПроводокМеждународногоУчета.РеверсивнымиПроводками Тогда
		Элементы["ФормаКорректировкаПроводок" + ИдентификаторПланаСчетов].Заголовок = НСтр("ru = 'Реверс: Операция (международный учет)';
																							|en = 'Reverse: Transaction (financial accounting)'");
	Иначе
		Элементы["ФормаКорректировкаПроводок" + ИдентификаторПланаСчетов].Заголовок = НСтр("ru = 'Сторно: Операция (международный учет)';
																							|en = 'Storno: Transaction (financial accounting)'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьПроводкиДокументаПоМеждународномуУчету()
	
	Если ЗначениеЗаполнено(ПланСчетов) Тогда
		ЗаписиПоПлануСчетов = НаборЗаписей.НайтиСтроки(Новый Структура("ПланСчетов", ПланСчетов));
	Иначе
		ЗаписиПоПлануСчетов = НаборЗаписей;
	КонецЕсли;
	Возврат ЗаписиПоПлануСчетов.Количество() > 0;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПриоритетыСтатусов()

	ПриоритетыСтатусов = Новый Соответствие;
	ПриоритетыСтатусов.Вставить(ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.НарушенаДвойнаяЗаписьФинансовыхРегистров"), 0);
	ПриоритетыСтатусов.Вставить(ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.ОжидаетсяОтражениеВРеглУчете"), 1);
	ПриоритетыСтатусов.Вставить(ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную"), 2);
	ПриоритетыСтатусов.Вставить(ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную"), 3);
	ПриоритетыСтатусов.Вставить(ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете"), 4);
	ПриоритетыСтатусов.Вставить(ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете"), 5);
	ПриоритетыСтатусов.Вставить(ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете"), 6);
	
	Возврат ПриоритетыСтатусов;

КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ОпределитьСтатус(ПриоритетыСтатусов, ТекущийСтатус, НовыйСтатус)

	ПриоритетТекущегоСтатуса = ПриоритетыСтатусов.Получить(ТекущийСтатус);
	ПриоритетНовогоСтатуса = ПриоритетыСтатусов.Получить(НовыйСтатус);
	Возврат ?(ПриоритетТекущегоСтатуса = Неопределено ИЛИ ПриоритетНовогоСтатуса < ПриоритетТекущегоСтатуса, НовыйСтатус, ТекущийСтатус);

КонецФункции

&НаКлиенте
Процедура ОповеститьОбИзмененииОтраженияДокументаВМеждународномУчете()

	Оповестить("Запись_ОтражениеДокументовВМеждународномУчете");

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПредставлениеВидовСубконто()

	Для каждого Запись Из НаборЗаписей Цикл
		ЗаполнитьЗначенияСвойств(Запись, СвойстваСчета(Запись.СчетДт, "Дт"));
		ЗаполнитьЗначенияСвойств(Запись, СвойстваСчета(Запись.СчетКт, "Кт"));
	КонецЦикла;

КонецПроцедуры

&НаСервере
Функция СвойстваСчета(Счет, ВидДвижения)

	Результат = Новый Структура;
	
	МаксКоличествоСубконто = Метаданные.ПланыСчетов.Международный.МаксКоличествоСубконто;
	СвойстваСчета = МеждународныйУчетСерверПовтИсп.СвойстваСчета(Счет);
	
	Результат.Вставить("Количественный" + ВидДвижения, СвойстваСчета.Количественный); 
	Результат.Вставить("Валютный" + ВидДвижения, СвойстваСчета.Валютный); 
	
	Для К = 1 По МаксКоличествоСубконто Цикл
		Ключ = "ПредставлениеВидСубконто" + ВидДвижения + К;
		Если СвойстваСчета["ВидСубконто" + К + "Наименование"] <> Неопределено Тогда
			Результат.Вставить(Ключ, "<" + СвойстваСчета["ВидСубконто" + К + "Наименование"] + ">");
		Иначе
			Результат.Вставить(Ключ, "");
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьЗаголовкиСумм(СтрокаТаблицыСтатусов)
	
	ВалютыМеждународногоУчета = МеждународныйУчетОбщегоНазначения.УчетныеВалюты(СтрокаТаблицыСтатусов.ПланСчетов, Организация);
	ЗаголовокСуммы = НСтр("ru = 'Сумма (%1)';
							|en = 'Amount (%1)'");
	ИмяЭлемента = "Сумма" + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов;
	Элементы[ИмяЭлемента].Заголовок = СтрШаблон(ЗаголовокСуммы, ВалютыМеждународногоУчета.Функциональная);
	
	ЗаголовокСуммыПредставления = НСтр("ru = 'Сумма представления (%1)';
										|en = 'Presentation amount (%1)'");
	ИмяЭлемента = "СуммаПредставления" + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов;
	Элементы[ИмяЭлемента].Заголовок  = СтрШаблон(ЗаголовокСуммыПредставления, ВалютыМеждународногоУчета.Представления);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещенияВопросПередЗаписью(РезультатВопроса, ДополнительныеПараметры) Экспорт

	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ДополнительныеПараметры.Вставить("АвтоматическоеОтражение", Истина);
		Записать(ДополнительныеПараметры);
		Если ДополнительныеПараметры.Свойство("ЗакрыватьПриЗаписи") Тогда
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДатуЗапретаФормированияПроводок()

	Если ОбщегоНазначения.ЕстьРеквизитОбъекта("Организация", Документ.Метаданные()) Тогда
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ,"Организация,Дата");
	Иначе
		Реквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ, "Дата");
		Реквизиты.Вставить("Организация", Организация);
	КонецЕсли;
	
	ДатаЗапрета = МеждународныйУчетОбщегоНазначения.ДатаЗапретаФормированияПроводок(Реквизиты.Организация);
	Элементы.СоздатьНаОсновании.Видимость = Реквизиты.Дата <= ДатаЗапрета И ЗначениеЗаполнено(ДатаЗапрета);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПравилаОтраженияВУчете(Команда)
	
	АдресРезультатаПроверки = "";
	НеобходимаНастройкаПравил = ПроверитьНастройкуПравилОтраженияВУчетеСервер(АдресРезультатаПроверки);
	
	Если Не НеобходимаНастройкаПравил Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработчикОповещенияВопросОтразитьВУчете", ЭтотОбъект);
		ШаблонСообщения = НСтр("ru = 'Настроены все необходимые правила отражения по плану счетов ""%1"". Попробовать отразить документ в учете?';
								|en = 'All the necessary recording rules for the ""%1"" chart of accounts have been configured. Try to record the document in accounting?'");
		ТекстСообщения = СтрШаблон(ШаблонСообщения, ПланСчетов);
		ПоказатьВопрос(ОписаниеОповещения, ТекстСообщения, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПланСчетов", ПланСчетов);
	ПараметрыФормы.Вставить("Документ", Документ);
	ПараметрыФормы.Вставить("АдресРезультатаПроверки", АдресРезультатаПроверки);
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбработчикОповещенияФормыНеобходимыеПравилаОтраженияВУчете", ЭтотОбъект);
	ОткрытьФорму("Обработка.ОтражениеДокументовВМеждународномУчете.Форма.НеобходимыеПравилаОтражения", 
		ПараметрыФормы, ЭтаФорма, , , , ОписаниеОповещенияОЗакрытии);
	
КонецПроцедуры

&НаСервере
Функция ПроверитьНастройкуПравилОтраженияВУчетеСервер(АдресВоВременномХранилище)
	
	ПараметрыПроверки= Обработки.ОтражениеДокументовВМеждународномУчете.ПараметрыПроверкиПравилОтражения();
	ПараметрыПроверки.ПланСчетов = ПланСчетов;
	ПараметрыПроверки.Документ = Документ;
	РезультатПроверки = Обработки.ОтражениеДокументовВМеждународномУчете.ПроверитьНастройкуПравилОтраженияУчете(ПараметрыПроверки);
	
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(РезультатПроверки, УникальныйИдентификатор);
	
	НеобходимаНастройкаПравил = 
		РезультатПроверки.ХозяйственныеОперацииБезПравилОтражения.Количество() 
		Или РезультатПроверки.СчетаБезПравилОтражения.Количество()
		Или РезультатПроверки.ОбъектыУчетаТребующиеНастройки.Количество();
		
	Возврат НеобходимаНастройкаПравил;
	
КонецФункции

&НаКлиенте
Процедура ОбработчикОповещенияВопросОтразитьВУчете(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("ЗадаватьВопросПередЗаписью", Ложь);
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОповещенияФормыНеобходимыеПравилаОтраженияВУчете(ПараметрыЗакрытия, ДополнительныеПараметры) Экспорт
	
	ОтразитьДокументВМеждународномУчете = Ложь;
	Если ТипЗнч(ПараметрыЗакрытия) = Тип("Структура")
		 И ПараметрыЗакрытия.Свойство("ОтразитьДокументВМеждународномУчете") Тогда
		ОтразитьДокументВМеждународномУчете = ПараметрыЗакрытия.ОтразитьДокументВМеждународномУчете; 
	КонецЕсли;
	
	Если ОтразитьДокументВМеждународномУчете Тогда
		ПараметрыЗаписи = Новый Структура;
		ПараметрыЗаписи.Вставить("СформироватьПроводкиАвтоматически", Истина);
		ПараметрыЗаписи.Вставить("ЗадаватьВопросПередЗаписью", Ложь);
		Записать(ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСостояниеОтраженияНаСервере()
	
	ДокументПроведен = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "Проведен");
	Если НЕ ДокументПроведен ИЛИ (ДокументПроведен И НЕ РучнаяКорректировкаПроводок) Тогда
		Прочитать();
	КонецЕсли;
	ЗаполнитьСтатусыОтраженияПоПланамСчетов();
	ПолучитьСостояниеОтраженияДокументаПоПлануСчетов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(ТаблицаФормы, ДтКт)
	
	ТекущаяСтрока = ТаблицаФормы.ТекущиеДанные;
	НаДату = ТекущаяСтрока.Период;
	СуммыПроводки = РассчитатьСуммы(ПланСчетов, ТекущаяСтрока.Организация, ТекущаяСтрока["ВалютнаяСумма"+ДтКт], ТекущаяСтрока["Валюта"+ДтКт], НаДату);
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СуммыПроводки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьСуммы(ПланСчетов, Организация, ВалютнаяСумма, Валюта, НаДату)
	
	СуммыПроводки = Новый Структура("Сумма,СуммаПредставления",0,0);
	КоэффициентыПересчета = МеждународныйУчетОбщегоНазначения.ПолучитьКоэффициентыПересчетаВалюты(ПланСчетов, Организация, Валюта, НаДату);
	СуммыПроводки.Сумма = ВалютнаяСумма * КоэффициентыПересчета.ВФункциональнуюВалюту;
	СуммыПроводки.СуммаПредставления = ВалютнаяСумма * КоэффициентыПересчета.ВВалютуПредставления;
	
	Возврат СуммыПроводки;
	
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьСуммуПредставления(ПланСчетов, Организация, Сумма, Дата)
	
	Возврат МеждународныйУчетОбщегоНазначения.РассчитатьСуммуПредставления(ПланСчетов, Организация, Сумма, Дата);
	
КонецФункции

&НаКлиенте
Процедура ИзменитьПараметрыВыбораПолейСубконто(ТаблицаФормы, ДтКт="")
	
	ИдСтроки = ТаблицаФормы.ТекущаяСтрока;
	Если ИдСтроки <> Неопределено Тогда
		СтрокаТаблицы = НаборЗаписей.НайтиПоИдентификатору(ИдСтроки);
		НастройкаСчетовУчетаКлиент.ИзменитьПараметрыВыбораПолейСубконто(ЭтотОбъект, СтрокаТаблицы, СтрокаТаблицы.Организация, ДтКт);
	КонецЕсли;
	
КонецПроцедуры 

&НаСервереБезКонтекста
Функция ПользовательскиеНастройкиОтчетаАнализКорреспонденций(ЗначенияПользовательскихНастроек)
	
	Возврат МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистровВызовСервера.ПользовательскиеНастройкиОтчетаАнализКорреспонденций(ЗначенияПользовательскихНастроек);
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ЗаполнитьСтатусыОтраженияПоПланамСчетов()
	
	СтатусыОтраженияПоПланамСчетов.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Проводки.ПланСчетов КАК ПланСчетов
	|ПОМЕСТИТЬ Проводки
	|ИЗ
	|	&Проводки КАК Проводки
	|;
	|
	|/////////////////////////////////////
	|ВЫБРАТЬ
	|	СтатусыОтражения.ПланСчетов КАК ПланСчетов,
	|	ПРЕДСТАВЛЕНИЕ(СтатусыОтражения.ПланСчетов) КАК ПланСчетовПредставление,
	|	СтатусыОтражения.Комментарий КАК Комментарий,
	|	СтатусыОтражения.Статус  КАК СтатусОтражения
	|ИЗ
	|	РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК СтатусыОтражения
	|ГДЕ
	|	СтатусыОтражения.Регистратор = &Регистратор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Проводки.ПланСчетов КАК ПланСчетов,
	|	ПРЕДСТАВЛЕНИЕ(Проводки.ПланСчетов) КАК ПланСчетовПредставление,
	|	"""" КАК Комментарий,
	|	ЗНАЧЕНИЕ(Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете) КАК СтатусОтражения
	|ИЗ
	|	Проводки КАК Проводки
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.ОтражениеДокументовВМеждународномУчете КАК СтатусыОтражения
	|	ПО
	|		Проводки.ПланСчетов = СтатусыОтражения.ПланСчетов
	|		И СтатусыОтражения.Регистратор = &Регистратор
	|ГДЕ
	|	СтатусыОтражения.Регистратор ЕСТЬ NULL
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыОтражения.ПланСчетов";
	Запрос.УстановитьПараметр("Регистратор", Документ);
	Запрос.УстановитьПараметр("Проводки", НаборЗаписей.Выгрузить());
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПриоритетыСтатусов = ПриоритетыСтатусов();
	ТекущийПланСчетов = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если ТекущийПланСчетов <> Выборка.ПланСчетов Тогда
			ТекущийПланСчетов = Выборка.ПланСчетов;
			СтрокаТаблицыСтатусов = СтатусыОтраженияПоПланамСчетов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицыСтатусов, Выборка);
			СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов = СтрЗаменить(СтрокаТаблицыСтатусов.ПланСчетов.УникальныйИдентификатор(), "-", "");
			СтрокаТаблицыСтатусов.Комментарии = Новый ФиксированныйМассив(Новый Массив());
		Иначе
			СтрокаТаблицыСтатусов.СтатусОтражения = ОпределитьСтатус(ПриоритетыСтатусов, СтрокаТаблицыСтатусов.СтатусОтражения, Выборка.СтатусОтражения);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Выборка.Комментарий) Тогда
			Комментарии = Новый Массив(СтрокаТаблицыСтатусов.Комментарии);
			КоличествоКомментариев = Комментарии.Количество();
			ДобавитьКомментарий = Истина;
			
			Для ОбратныйИндекс = 1 По КоличествоКомментариев Цикл
				ТекущийИндекс = КоличествоКомментариев - ОбратныйИндекс;
				Если Комментарии[ТекущийИндекс] = Выборка.Комментарий
				 ИЛИ СтрНайти(Комментарии[ТекущийИндекс], Выборка.Комментарий) > 0 Тогда
					ДобавитьКомментарий = Ложь;
					Прервать;
				ИначеЕсли СтрНайти(Выборка.Комментарий, Комментарии[ТекущийИндекс]) > 0 Тогда
					Комментарии.Удалить(ТекущийИндекс);
				КонецЕсли;
			КонецЦикла;
			
			Если ДобавитьКомментарий Тогда
				Комментарии.Добавить(Выборка.Комментарий);
			КонецЕсли;
			
			СтрокаТаблицыСтатусов.Комментарии = Новый ФиксированныйМассив(Комментарии);
		КонецЕсли;
	КонецЦикла;
	
	РегистрацияПоНесколькимПланамСчетов = (СтатусыОтраженияПоПланамСчетов.Количество() > 1);
	ЕстьРегистрацияКОтражению = (СтатусыОтраженияПоПланамСчетов.Количество() > 0);
	
	Если ЕстьРегистрацияКОтражению И Не ЗначениеЗаполнено(ПланСчетов) Тогда
		ПланСчетов = СтатусыОтраженияПоПланамСчетов[0].ПланСчетов;
		ИдентификаторПланаСчетов = СтатусыОтраженияПоПланамСчетов[0].ИдентификаторПланаСчетов
	КонецЕсли;
	
	Если ЕстьРегистрацияКОтражению И РегистрацияПоНесколькимПланамСчетов Тогда
		Элементы.ГруппаСтраницыПоПланамСчетов.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Иначе
		Элементы.ГруппаСтраницыПоПланамСчетов.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
	Для каждого СтрокаТаблицыСтатусов Из СтатусыОтраженияПоПланамСчетов Цикл
			
		ИмяГруппы = ПрефиксИмениСтраницПоПланамСчетов + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов;
		
		Если Элементы.Найти(ИмяГруппы) = Неопределено Тогда
			
			НоваяСтраница = Элементы.Добавить(
									ИмяГруппы, 
									Тип("ГруппаФормы"),
									Элементы.ГруппаСтраницыПоПланамСчетов);
			НоваяСтраница.Вид = ВидГруппыФормы.Страница;
			НоваяСтраница.Заголовок = СтрокаТаблицыСтатусов.ПланСчетовПредставление;
			
			ОбщегоНазначенияУТ.СкопироватьЭлементыФормыРекурсивно(
				ЭтотОбъект,
				Элементы.Проводки,
				НоваяСтраница,
				СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов);
			
		КонецЕсли;
		
		УстановитьКартинкуСтатусаОтраженияСервер(СтрокаТаблицыСтатусов);
		УстановитьЗаголовкиСумм(СтрокаТаблицыСтатусов);
		
		Элементы["НаборЗаписей" + СтрокаТаблицыСтатусов.ИдентификаторПланаСчетов].ОтборСтрок 
			= Новый ФиксированнаяСтруктура("ПланСчетов", СтрокаТаблицыСтатусов.ПланСчетов);
		
	КонецЦикла;
	
	Элементы.Проводки.Видимость = Ложь;
	Элементы.ГруппаНетРегистрацииКОтражению.Видимость = СтатусыОтраженияПоПланамСчетов.Количество() = 0;
	Если Элементы.ГруппаНетРегистрацииКОтражению.Видимость Тогда
		Элементы.ГруппаСтраницыПоПланамСчетов.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
	УстановитьУсловноеОформление();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьКартинкуСтатусаОтраженияСервер(СтатусыОтраженияПоПланамСчетов)
	
	КартинкиСтатусов =  КартинкиСтатусов();
	Элементы[ПрефиксИмениСтраницПоПланамСчетов + СтатусыОтраженияПоПланамСчетов.ИдентификаторПланаСчетов].Картинка 
		= КартинкиСтатусов[СтатусыОтраженияПоПланамСчетов.СтатусОтражения];
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КартинкиСтатусов()
	
	КартинкиСтатусов = Новый Соответствие();
	КартинкиСтатусов.Вставить(
		ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчете"),
		БиблиотекаКартинок.ОжидаетВыполнения);
	КартинкиСтатусов.Вставить(
		ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчете"),
		БиблиотекаКартинок.Успешно);
	КартинкиСтатусов.Вставить(
		ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.ОжидаетсяОтражениеВРеглУчете"),
		БиблиотекаКартинок.ОжидаетВыполнения);
	КартинкиСтатусов.Вставить(
		ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.ОтраженоВУчетеВручную"),
		БиблиотекаКартинок.РучнаяКорректировка32);
	КартинкиСтатусов.Вставить(
		ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.ОтсутствуютПравилаОтраженияВУчете"), 
		БиблиотекаКартинок.ВосклицательныйЗнакКрасный);
	КартинкиСтатусов.Вставить(
		ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.КОтражениюВУчетеВручную"), 
		БиблиотекаКартинок.РучнаяКорректировка32);
	КартинкиСтатусов.Вставить(
		ПредопределенноеЗначение("Перечисление.СтатусыОтраженияВМеждународномУчете.НарушенаДвойнаяЗаписьФинансовыхРегистров"),
		БиблиотекаКартинок.ОжидаетВыполнения);
	
	Возврат КартинкиСтатусов;
	
КонецФункции

&НаСервере
Функция ПутьКДанным(ИмяЭлемента) 
	
	Возврат Элементы[ИмяЭлемента].ПутьКДанным;
	
КонецФункции

