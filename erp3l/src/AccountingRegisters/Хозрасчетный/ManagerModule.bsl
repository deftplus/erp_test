#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ВыполнитьДопОбработкуПроводок(Проводки) Экспорт
	
	Регистратор = Проводки.Отбор.Регистратор.Значение;
	ДополнительныеСвойства = Проводки.ДополнительныеСвойства;
	
	РассчитатьСуммыУправленческогоУчета(Проводки, Регистратор, ДополнительныеСвойства);
	ОбработатьПроводкиНалоговогоУчета(Проводки, Регистратор, ДополнительныеСвойства);
	ОчиститьНеИспользуемыеСуммы(Проводки);
	ПривестиПустыеЗначенияСубконтоСоставногоТипа(Проводки);
	
КонецПроцедуры

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура РассчитатьСуммыУправленческогоУчета(Проводки, Регистратор, ДополнительныеСвойства) 
	
	ЗначениеСвойства = Неопределено;
	ДополнительныеСвойства.Свойство("РассчитатьСуммыУУ", ЗначениеСвойства);
	РассчитатьСуммыУУ = ?(ЗначениеСвойства = Неопределено, Ложь, ЗначениеСвойства);
	РассчитатьСуммыУУ = РассчитатьСуммыУУ И ПолучитьФункциональнуюОпцию("ВестиУУНаПланеСчетовХозрасчетный");
	
	
	ЗначениеСвойства = Неопределено;
	ДополнительныеСвойства.Свойство("РассчитатьСуммыФО", ЗначениеСвойства);
	РассчитатьСуммыФО = ?(ЗначениеСвойства = Неопределено, Ложь, ЗначениеСвойства);
	РассчитатьСуммыФО = РассчитатьСуммыФО И ПолучитьФункциональнуюОпцию("ВестиУчетНаПланеСчетовХозрасчетныйВВалютеФинОтчетности");
	
	Если НЕ РассчитатьСуммыУУ И НЕ РассчитатьСуммыФО Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачалаУУНаПланеСчетовХозрасчетный = Константы.ДатаНачалаУУНаПланеСчетовХозрасчетный.Получить();
	
	Для Каждого Проводка Из Проводки Цикл
		
		Если РассчитатьСуммыУУ И Проводка.Период >= ДатаНачалаУУНаПланеСчетовХозрасчетный Тогда
			ПараметрыРасчетаСуммыУУ = РеглУчетВыборкиСерверПовтИсп.ПараметрыРасчетаСуммыУУ(Проводка.Период, Проводка.Организация);
			Проводка.СуммаУУ = Проводка[ПараметрыРасчетаСуммыУУ.РесурсИсточник] * ПараметрыРасчетаСуммыУУ.Коэффициент;
		КонецЕсли;
		
		Если РассчитатьСуммыФО Тогда
			ПараметрыРасчетаСуммыФО = РеглУчетВыборкиСерверПовтИсп.ПараметрыРасчетаСуммыФО(Проводка.Период, Проводка.Организация);
			Проводка.СуммаФО = Проводка[ПараметрыРасчетаСуммыФО.РесурсИсточник] * ПараметрыРасчетаСуммыФО.Коэффициент;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьСуммуЕслиЗаполнена(Сумма, КорректируемаяСумма = 0)
	
	// Если сумма не заполнена, то не будем ее менять, чтобы не спровоцировать перезапись фактически неизменного набора.
	// Если сумма заполнена, то ее обнулим за счет корректируемой суммы.
	// Например, это используется, когда важно очистить сумму НУ за счет суммы ПР.
	
	Если Не ЗначениеЗаполнено(Сумма) Тогда // Может быть NULL, если набор редактируется вручную
		Возврат;
	КонецЕсли;
	
	КорректируемаяСумма = КорректируемаяСумма + Сумма;
	
	Сумма = 0;
	
КонецПроцедуры

Процедура ЗаполнитьСуммыНалоговогоУчета(Проводки)
	
	Для Каждого Проводка Из Проводки Цикл
		
		ПериодУчетнойПолитики = НачалоМесяца(Проводка.Период);
		ДанныеУчетнойПолитики = РеглУчетВыборкиСерверПовтИсп.ДанныеУчетнойПолитики(Проводка.Организация, ПериодУчетнойПолитики);
		
		Если НЕ ДанныеУчетнойПолитики.ПлательщикНалогаНаПрибыль Тогда
			Продолжить;
		КонецЕсли;
	
		Если Проводка.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СчетДт = Проводка.СчетДт;
		СчетКт = Проводка.СчетКт;
		
		Если БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСчетУчетаВЭксплуатации(СчетДт)
			ИЛИ БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСчетУчетаВЭксплуатации(СчетКт) Тогда
			// Налоговые суммы по этим счетам рассчитываются в первичном документе по особым правилам
			Продолжить;
		КонецЕсли;
		
		Если Проводка.Содержание = "Проценты по дисконтированию" Тогда
			// Налоговые суммы с этим содержанием рассчитываются в первичной проводке по особым правилам
			Продолжить;
		КонецЕсли;
		
		Если НалоговыйУчет.ЭтоПроводкаПоНачислениюНДС(Проводка) Тогда
			// НДС не учитывается в НУ
			Продолжить;
		КонецЕсли;
		
		Если Не БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСчетЦелевоеФинансирование(СчетДт) Тогда
			// Налоговые суммы по этим счетам рассчитываются в первичном документе по особым правилам
			СвойстваСчетаДт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетДт);
			Если СвойстваСчетаДт.НалоговыйУчет 
				И Проводка.СуммаНУДт = 0 
				И Проводка.СуммаПРДт = 0 
				И Проводка.СуммаВРДт = 0 Тогда
				
				Проводка.СуммаНУДт = Проводка.Сумма;
				
			КонецЕсли;
		КонецЕсли;
		
		СвойстваСчетаКт = БухгалтерскийУчетВызовСервераПовтИсп.ПолучитьСвойстваСчета(СчетКт);
		Если СвойстваСчетаКт.НалоговыйУчет 
			И Проводка.СуммаНУКт = 0
			И Проводка.СуммаПРКт = 0
			И Проводка.СуммаВРКт = 0 Тогда
			
			Проводка.СуммаНУКт = Проводка.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтразитьДоходыРасходыНеУчитываемыеВНалоговомУчете(Проводки)
	
	// Удалим проводки по забалансовым счетам учета доходов и расходов
	ПроводкиКУдалению = Новый Массив;
	Для Каждого Проводка Из Проводки Цикл
		
		СчетДт = Проводка.СчетДт;
		СчетКт = Проводка.СчетКт;
		
		Если БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСчетЗабалансовогоУчетаДоходов(СчетДт)
 			Или БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСчетЗабалансовогоУчетаРасходов(СчетКт) Тогда
			// Такие проводки формируем только в этой процедуре
			ПроводкиКУдалению.Добавить(Проводка);
		КонецЕсли;
		
	КонецЦикла;
	
	// Найдем проводки по доходам и расходам, не учитываемым в налоговом учете
	
	ПроводкиПоДоходам = Новый Массив;
	ПроводкиПоРасходам = Новый Массив;
	
	Для Каждого Проводка Из Проводки Цикл
		
		ПериодУчетнойПолитики = НачалоМесяца(Проводка.Период);
		ДанныеУчетнойПолитики = РеглУчетВыборкиСерверПовтИсп.ДанныеУчетнойПолитики(Проводка.Организация, ПериодУчетнойПолитики);

		Если НЕ ДанныеУчетнойПолитики.ПлательщикНалогаНаПрибыль ИЛИ ПроводкиКУдалению.Найти(Проводка) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
	
		Если НалоговыйУчет.ЭтоПроводкаДоходыНеУчитываемыеДляНалогаНаПрибыль(Проводка.СчетКт, Проводка.СубконтоКт) Тогда
			ПроводкиПоДоходам.Добавить(Проводка);
		ИначеЕсли НалоговыйУчет.ЭтоПроводкаРасходыНеУчитываемыеДляНалогаНаПрибыль(Проводка.СчетДт, Проводка.СубконтоДт) Тогда
			ПроводкиПоРасходам.Добавить(Проводка);
		КонецЕсли;
		
	КонецЦикла;
	
	// Обработаем не учитываемые доходы:
	// - обеспечим, чтобы они не отражались в налоговом учете
	// - добавим проводки по забалансовому учету
	
	Для Каждого Проводка Из ПроводкиПоДоходам Цикл
		
		ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаНУКт, Проводка.СуммаПРКт);
		Если НетЗначашихДвиженийВПроводке(Проводка) И ПроводкиКУдалению.Найти(Проводка) = Неопределено Тогда
			ПроводкиКУдалению.Добавить(Проводка);
		КонецЕсли;
		
		СуммаНеУчитываемыхДоходов = Проводка.Сумма - Проводка.СуммаВРДт - Проводка.СуммаПРДт;
		
		Если СуммаНеУчитываемыхДоходов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяПроводка = Проводки.Добавить();
		НоваяПроводка.Организация = Проводка.Организация;
		НоваяПроводка.Период      = Проводка.Период;
		НоваяПроводка.Содержание  = Проводка.Содержание;
		НоваяПроводка.СчетКт      = БухгалтерскийУчетВызовСервераПовтИсп.СчетДоходыНеУчитываемые();
		НоваяПроводка.СуммаНУКт   = СуммаНеУчитываемыхДоходов;
		
	КонецЦикла;
		
	// Обработаем не учитываемые расходы (также, как и доходы)
	Для Каждого Проводка Из ПроводкиПоРасходам Цикл
		
		ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаНУДт, Проводка.СуммаПРДт);
		Если НетЗначашихДвиженийВПроводке(Проводка) И ПроводкиКУдалению.Найти(Проводка) = Неопределено Тогда
			ПроводкиКУдалению.Добавить(Проводка);
		КонецЕсли;
		
		СуммаНеУчитываемыхРасходов = Проводка.Сумма - Проводка.СуммаВРКт - Проводка.СуммаПРКт;
		
		Если СуммаНеУчитываемыхРасходов = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НалоговыйУчет.ОпределитьВнереализационныеДоходыРасходы(Проводка) Тогда
			СчетЗабалансовогоУчета = БухгалтерскийУчетВызовСервераПовтИсп.СчетВнереализационныеРасходыНеУчитываемые();
		ИначеЕсли БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСчетРасчетыСПерсоналомПоОплатеТруда(Проводка.СчетДт)
					ИЛИ БухгалтерскийУчетВызовСервераПовтИсп.ЭтоСчетРасчетыСПерсоналомПоОплатеТруда(Проводка.СчетКт) Тогда
			СчетЗабалансовогоУчета = БухгалтерскийУчетВызовСервераПовтИсп.СчетВыплатыВпользуФизЛицПоП_1_48();
		Иначе
			СчетЗабалансовогоУчета = БухгалтерскийУчетВызовСервераПовтИсп.СчетДругиеВыплатыПоП_1_48();
		КонецЕсли;
		
		НоваяПроводка = Проводки.Добавить();
		НоваяПроводка.Организация = Проводка.Организация;
		НоваяПроводка.Период      = Проводка.Период;
		НоваяПроводка.Содержание  = Проводка.Содержание;
		НоваяПроводка.СчетДт      = СчетЗабалансовогоУчета;
		НоваяПроводка.СуммаНУДт   = СуммаНеУчитываемыхРасходов;
		
	КонецЦикла;
	
	Для Каждого Проводка Из ПроводкиКУдалению Цикл
		Проводки.Удалить(Проводка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьНеИспользуемыеСуммы(Проводки)
	
	ВестиУУНаПланеСчетовХозрасчетный = ПолучитьФункциональнуюОпцию("ВестиУУНаПланеСчетовХозрасчетный");
	ВестиУчетНаПланеСчетовХозрасчетныйВВалютеФинОтчетности = ПолучитьФункциональнуюОпцию("ВестиУчетНаПланеСчетовХозрасчетныйВВалютеФинОтчетности");
	ПроводкиКУдалению = Новый Массив;
	
	Для Каждого Проводка Из Проводки Цикл
		
		Если НЕ ВестиУУНаПланеСчетовХозрасчетный Тогда
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаУУ);
		КонецЕсли;
		
		Если НЕ ВестиУчетНаПланеСчетовХозрасчетныйВВалютеФинОтчетности Тогда
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаФО);
		КонецЕсли;
		
		ПериодУчетнойПолитики = НачалоМесяца(Проводка.Период);
		ДанныеУчетнойПолитики = РеглУчетВыборкиСерверПовтИсп.ДанныеУчетнойПолитики(Проводка.Организация, ПериодУчетнойПолитики);
		
		Если НЕ ДанныеУчетнойПолитики.ПлательщикНалогаНаПрибыль Тогда
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаНУДт);
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаНУКт);
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаПРДт);
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаПРКт);
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаВРДт);
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаВРКт);
			Продолжить;
		КонецЕсли;
	
		// Налог на прибыль уплачивается
		
		Если НЕ ДанныеУчетнойПолитики.ПоддержкаПБУ18 Тогда
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаПРДт);
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаВРДт);
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаПРКт);
			ОчиститьСуммуЕслиЗаполнена(Проводка.СуммаВРКт);
		КонецЕсли;
		
		Если НетЗначашихДвиженийВПроводке(Проводка) Тогда
			ПроводкиКУдалению.Добавить(Проводка);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Проводка Из ПроводкиКУдалению Цикл
		Проводки.Удалить(Проводка);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьПроводкиНалоговогоУчета(Проводки, Регистратор, ДополнительныеСвойства)
	
	ПроводкиВведеныПользователем = ЭтоРучноеОтражение(Проводки, Регистратор, ДополнительныеСвойства);
	
	Если ПроводкиВведеныПользователем Тогда
		Возврат;
	КонецЕсли;
	
	СуммыНалоговогоУчетаЗаполнены = // Проводки созданы алгоритмом, который рассчитывает суммы НУ
		ДополнительныеСвойства.Свойство("СуммыНалоговогоУчетаЗаполнены") 
		И ДополнительныеСвойства.СуммыНалоговогоУчетаЗаполнены = Истина;
	
	Если НЕ СуммыНалоговогоУчетаЗаполнены Тогда
		ЗаполнитьСуммыНалоговогоУчета(Проводки);
	КонецЕсли;
	
	ОтразитьДоходыРасходыНеУчитываемыеВНалоговомУчете(Проводки);
	
КонецПроцедуры

Процедура ПривестиПустыеЗначенияСубконтоСоставногоТипа(Проводки)
	
	КэшПустыхЗначенийВидовСубконто = Новый Соответствие;
	
	Для Каждого Проводка Из Проводки Цикл
		
		Для Каждого Субконто Из Проводка.СубконтоДт Цикл
			
			ПустоеЗначение = ПустоеЗначениеСубконто(Субконто.Ключ, КэшПустыхЗначенийВидовСубконто);
			Если НЕ ЗначениеЗаполнено(Субконто.Значение) И Субконто.Значение <> ПустоеЗначение Тогда
				Проводка.СубконтоДт.Вставить(Субконто.Ключ, ПустоеЗначение);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Субконто Из Проводка.СубконтоКт Цикл
			
			ПустоеЗначение = ПустоеЗначениеСубконто(Субконто.Ключ, КэшПустыхЗначенийВидовСубконто);
			Если НЕ ЗначениеЗаполнено(Субконто.Значение) И Субконто.Значение <> ПустоеЗначение Тогда
				Проводка.СубконтоКт.Вставить(Субконто.Ключ, ПустоеЗначение);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПустоеЗначениеСубконто(ВидСубконто, КэшВидыСубконто)
	
	ПустоеЗначение = КэшВидыСубконто.Получить(ВидСубконто);
	
	Если ПустоеЗначение = Неопределено Тогда
		ПустоеЗначение = ВидСубконто.ТипЗначения.ПривестиЗначение(Неопределено);
		КэшВидыСубконто.Вставить(ВидСубконто, ПустоеЗначение);
	КонецЕсли;
	
	Возврат ПустоеЗначение;
	
КонецФункции

Функция ЭтоРучноеОтражение(Проводки, Регистратор, ДополнительныеСвойства)
	
	ТипРегистратора = ТипЗнч(Регистратор);
	
	ЭтоРучноеОтражение = 
		(ТипРегистратора = Тип("ДокументСсылка.РегламентнаяОперация"))
		Или (ТипРегистратора = Тип("ДокументСсылка.ОперацияБух"))
		Или ДополнительныеСвойства.Свойство("РучноеОтражение") И ДополнительныеСвойства.РучноеОтражение
		Или (ОбщегоНазначения.ЕстьРеквизитОбъекта("РучнаяКорректировка", Регистратор.Метаданные()) И Регистратор.РучнаяКорректировка);
		
	Возврат ЭтоРучноеОтражение;
	
КонецФункции

Функция НетЗначашихДвиженийВПроводке(Проводка)
	
	Возврат Проводка.Сумма = 0 И Проводка.СуммаУУ = 0 И Проводка.СуммаФО = 0
			И Проводка.СуммаНУДт = 0 И Проводка.СуммаПРДт = 0 И Проводка.СуммаВРДт = 0
			И Проводка.СуммаНУКт = 0 И Проводка.СуммаПРКт = 0 И Проводка.СуммаВРКт = 0
			И Проводка.ВалютнаяСуммаДт = 0 И Проводка.КоличествоДт = 0
			И Проводка.ВалютнаяСуммаКт = 0 И Проводка.КоличествоКт = 0;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыБухгалтерии.Хозрасчетный.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.7.273";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("153d25af-2a31-4fa6-b3c9-c6415c41b81f");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыБухгалтерии.Хозрасчетный.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет регистр ""Хозрасчетный"":
	|- заполняет субконто ""Партии материалов в эксплуатации"" новой партией';
	|en = 'Updates the Self-financing register:
	|- fills in the ""Material batches in operation"" extra dimension with a new lot'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыБухгалтерии.Хозрасчетный.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ПартииТМЦВЭксплуатации.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыБухгалтерии.Хозрасчетный.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыБухгалтерии.Хозрасчетный.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ПартииТМЦВЭксплуатации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

КонецПроцедуры

// Регистрирует данные к обработке при переходе на новую версию.
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = "РегистрБухгалтерии.Хозрасчетный";
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Регистратор.Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Регистратор");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиРегистра.Регистратор
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто КАК ЗаписиРегистра
	|ГДЕ
	|	(ЗаписиРегистра.СубконтоДт1 ССЫЛКА Справочник.ПартииТМЦВЭксплуатации
	|			И НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ЗаписиРегистра.СубконтоДт1 КАК Справочник.ПартииТМЦВЭксплуатации).Партия258, ЛОЖЬ)
	|
	|		ИЛИ ЗаписиРегистра.СубконтоДт2 ССЫЛКА Справочник.ПартииТМЦВЭксплуатации
	|			И НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ЗаписиРегистра.СубконтоДт2 КАК Справочник.ПартииТМЦВЭксплуатации).Партия258, ЛОЖЬ)
	|
	|		ИЛИ ЗаписиРегистра.СубконтоДт3 ССЫЛКА Справочник.ПартииТМЦВЭксплуатации
	|			И НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ЗаписиРегистра.СубконтоДт3 КАК Справочник.ПартииТМЦВЭксплуатации).Партия258, ЛОЖЬ)
	|
	|		ИЛИ ЗаписиРегистра.СубконтоКт1 ССЫЛКА Справочник.ПартииТМЦВЭксплуатации
	|			И НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ЗаписиРегистра.СубконтоКт1 КАК Справочник.ПартииТМЦВЭксплуатации).Партия258, ЛОЖЬ)
	|
	|		ИЛИ ЗаписиРегистра.СубконтоКт2 ССЫЛКА Справочник.ПартииТМЦВЭксплуатации
	|			И НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ЗаписиРегистра.СубконтоКт2 КАК Справочник.ПартииТМЦВЭксплуатации).Партия258, ЛОЖЬ)
	|
	|		ИЛИ ЗаписиРегистра.СубконтоКт3 ССЫЛКА Справочник.ПартииТМЦВЭксплуатации
	|			И НЕ ЕСТЬNULL(ВЫРАЗИТЬ(ЗаписиРегистра.СубконтоКт3 КАК Справочник.ПартииТМЦВЭксплуатации).Партия258, ЛОЖЬ))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"),
		"РегистрБухгалтерии.Хозрасчетный");
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "РегистрБухгалтерии.Хозрасчетный";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	ЧитаемыеДанные = Новый Массив;
	ЧитаемыеДанные.Добавить("Справочник.ПартииТМЦВЭксплуатации");
	ДополнительныеПараметрыПроцедуры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметрыПроцедуры.ИмяВременнойТаблицы = "ВТЗаблокированныеДанные";
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияСсылок(
			Параметры.Очередь, 
			ЧитаемыеДанные, 
			МенеджерВременныхТаблиц, 
			ДополнительныеПараметрыПроцедуры);

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДанных.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТДляОбработки
	|ИЗ
	|	&ТаблицаОбновляемыхДанных КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|
	|	ВТДляОбработки.Регистратор КАК Регистратор
	|
	|ПОМЕСТИТЬ ВТЗаблокированныеСсылки
	|
	|ИЗ
	|	ВТДляОбработки КАК ВТДляОбработки
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто КАК ЗаписиРегистра
	|		ПО (ЗаписиРегистра.Регистратор = ВТДляОбработки.Регистратор)
	|
	|ГДЕ
	|	ЗаписиРегистра.СубконтоДт1 В
	|			(ВЫБРАТЬ
	|				ВТЗаблокированныеДанные.Ссылка
	|			ИЗ
	|				ВТЗаблокированныеДанные КАК ВТЗаблокированныеДанные)
	|
	|	ИЛИ ЗаписиРегистра.СубконтоДт2 В
	|			(ВЫБРАТЬ
	|				ВТЗаблокированныеДанные.Ссылка
	|			ИЗ
	|				ВТЗаблокированныеДанные КАК ВТЗаблокированныеДанные)
	|
	|	ИЛИ ЗаписиРегистра.СубконтоДт3 В
	|			(ВЫБРАТЬ
	|				ВТЗаблокированныеДанные.Ссылка
	|			ИЗ
	|				ВТЗаблокированныеДанные КАК ВТЗаблокированныеДанные)
	|
	|	ИЛИ ЗаписиРегистра.СубконтоКт1 В
	|			(ВЫБРАТЬ
	|				ВТЗаблокированныеДанные.Ссылка
	|			ИЗ
	|				ВТЗаблокированныеДанные КАК ВТЗаблокированныеДанные)
	|
	|	ИЛИ ЗаписиРегистра.СубконтоКт2 В
	|			(ВЫБРАТЬ
	|				ВТЗаблокированныеДанные.Ссылка
	|			ИЗ
	|				ВТЗаблокированныеДанные КАК ВТЗаблокированныеДанные)
	|
	|	ИЛИ ЗаписиРегистра.СубконтоКт3 В
	|			(ВЫБРАТЬ
	|				ВТЗаблокированныеДанные.Ссылка
	|			ИЗ
	|				ВТЗаблокированныеДанные КАК ВТЗаблокированныеДанные)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДляОбработки.Регистратор КАК Регистратор
	|ИЗ
	|	ВТДляОбработки КАК ВТДляОбработки
	|ГДЕ
	|	НЕ ВТДляОбработки.Регистратор В
	|				(ВЫБРАТЬ
	|					ВТЗаблокированныеСсылки.Регистратор
	|				ИЗ
	|					ВТЗаблокированныеСсылки КАК ВТЗаблокированныеСсылки)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаОбновляемыхДанных", ОбновляемыеДанные);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
 	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрБухгалтерии.Хозрасчетный.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			
			СписокПартий = Новый Массив;
			Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
				ЗначениеСубконто = ЗаписьРегистра.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПартииМатериаловВЭксплуатации];
				Если ЗначениеЗаполнено(ЗначениеСубконто)
					И ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.ПартииТМЦВЭксплуатации") Тогда
					СписокПартий.Добавить(ЗначениеСубконто);
				КонецЕсли;
				ЗначениеСубконто = ЗаписьРегистра.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПартииМатериаловВЭксплуатации];
				Если ЗначениеЗаполнено(ЗначениеСубконто)
					И ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.ПартииТМЦВЭксплуатации") Тогда
					СписокПартий.Добавить(ЗначениеСубконто);
				КонецЕсли;
			КонецЦикла;
			
			Если СписокПартий.Количество() <> 0 Тогда
				
				РеквизитыПартий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
					СписокПартий, "НоваяПартия,Партия258");
				
				Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
					
					ЗначениеСубконто = ЗаписьРегистра.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПартииМатериаловВЭксплуатации];
					Если ЗначениеЗаполнено(ЗначениеСубконто)
						И ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.ПартииТМЦВЭксплуатации") Тогда

						СвойстваПартии = РеквизитыПартий.Получить(ЗначениеСубконто);
						
						Если НЕ СвойстваПартии.Партия258
							И ЗначениеЗаполнено(СвойстваПартии.НоваяПартия) Тогда
							ЗаписьРегистра.СубконтоДт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПартииМатериаловВЭксплуатации] = СвойстваПартии.НоваяПартия;
						КонецЕсли;
						
					КонецЕсли;
					
					ЗначениеСубконто = ЗаписьРегистра.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПартииМатериаловВЭксплуатации];
					Если ЗначениеЗаполнено(ЗначениеСубконто)
						И ТипЗнч(ЗначениеСубконто) = Тип("СправочникСсылка.ПартииТМЦВЭксплуатации") Тогда

						СвойстваПартии = РеквизитыПартий.Получить(ЗначениеСубконто);
						
						Если НЕ СвойстваПартии.Партия258
							И ЗначениеЗаполнено(СвойстваПартии.НоваяПартия) Тогда
							ЗаписьРегистра.СубконтоКт[ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПартииМатериаловВЭксплуатации] = СвойстваПартии.НоваяПартия;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;

			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Ссылка);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры
 
#КонецОбласти

#КонецОбласти

#КонецЕсли
