#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(ПодразделениеДиспетчер)
	|	И ЗначениеРазрешено(Сценарий)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ПланыЗанятостиВидовРабочихЦентров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.3.10";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4515674b-3178-4bcd-860f-f9cf6747ef32");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ПланыЗанятостиВидовРабочихЦентров.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Изменяет регистратор движений - вместо документа ""План производства"" устанавливается ""Регистратор плана производства"".
	|Заполняет измерения ""Спецификация продукции"" и ""Назначение продукции""
	|Отменяет движения в статусе ""Отменен"".';
	|en = 'Changes the movements recorder - sets the ""Production plan recorder"" instead of the ""Production plan"" document.
	|Fills in the ""Product BOM"" and ""Product purpose"" dimensions
	|Cancels movements in the ""Canceled"" status.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ПланПроизводства.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РегистраторПланаПроизводства.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ПланыЗанятостиВидовРабочихЦентров.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ПланыЗанятостиВидовРабочихЦентров.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПланПроизводства.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПланыЗанятостиВидовРабочихЦентров.Регистратор КАК Ссылка
		|ИЗ
		|	РегистрНакопления.ПланыЗанятостиВидовРабочихЦентров КАК ПланыЗанятостиВидовРабочихЦентров
		|ГДЕ
		|	ПланыЗанятостиВидовРабочихЦентров.Регистратор ССЫЛКА Документ.ПланПроизводства
		|	ИЛИ ПланыЗанятостиВидовРабочихЦентров.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Отменен)");
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = "РегистрНакопления.ПланыЗанятостиВидовРабочихЦентров";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(
		Параметры,
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"),
		ДополнительныеПараметры);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт

	ПолноеИмяРегистра = "РегистрНакопления.ПланыЗанятостиВидовРабочихЦентров";
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыОтметкиОбработки();
	ДополнительныеПараметры.ЭтоДвижения = Истина;
	ДополнительныеПараметры.ПолноеИмяРегистра = ПолноеИмяРегистра;
	
	Выборка = ОбновлениеИнформационнойБазы.ВыбратьРегистраторыРегистраДляОбработки(
		Параметры.Очередь,
		,
		ПолноеИмяРегистра);
	
	Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ПланыЗанятостиВидовРабочихЦентров.Период                       КАК Период,
		|	ПланыЗанятостиВидовРабочихЦентров.Регистратор                  КАК Регистратор,
		|	ПланыЗанятостиВидовРабочихЦентров.НомерСтроки                  КАК НомерСтроки,
		|	ПланыЗанятостиВидовРабочихЦентров.Активность                   КАК Активность,
		|	ПланыЗанятостиВидовРабочихЦентров.Сценарий                     КАК Сценарий,
		|	ПланыЗанятостиВидовРабочихЦентров.Статус                       КАК Статус,
		|	ПланыЗанятостиВидовРабочихЦентров.ВидРабочегоЦентра            КАК ВидРабочегоЦентра,
		|	ПланыЗанятостиВидовРабочихЦентров.ПодразделениеДиспетчер       КАК ПодразделениеДиспетчер,
		|	ПланыЗанятостиВидовРабочихЦентров.ПодразделениеИсполнитель     КАК ПодразделениеИсполнитель,
		|	ПланыЗанятостиВидовРабочихЦентров.ПланПроизводства             КАК ПланПроизводства,
		|	ПланыЗанятостиВидовРабочихЦентров.ДатаПроизводства             КАК ДатаПроизводства,
		|	ПланыЗанятостиВидовРабочихЦентров.УдалитьСпецификация          КАК СпецификацияПродукции,
		|	ПланыЗанятостиВидовРабочихЦентров.УдалитьНазначениеПродукции   КАК НазначениеПродукции,
		|	ПланыЗанятостиВидовРабочихЦентров.НоменклатураПродукции        КАК НоменклатураПродукции,
		|	ПланыЗанятостиВидовРабочихЦентров.ХарактеристикаПродукции      КАК ХарактеристикаПродукции,
		|	ПланыЗанятостиВидовРабочихЦентров.РазделительРасчета           КАК РазделительРасчета,
		|	ПланыЗанятостиВидовРабочихЦентров.Занятость                    КАК Занятость,
		|	ПланыЗанятостиВидовРабочихЦентров.КоличествоНаЕдиницуПродукции КАК КоличествоНаЕдиницуПродукции,
		|	ПланыЗанятостиВидовРабочихЦентров.ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий КАК ОдновременноПроизводимоеКоличествоЕдиницПартийИзделий,
		|	ПланыЗанятостиВидовРабочихЦентров.УдалитьНазначениеПродукции   КАК УдалитьНазначениеПродукции,
		|	ПланыЗанятостиВидовРабочихЦентров.УдалитьСпецификация          КАК УдалитьСпецификация
		|ИЗ
		|	РегистрНакопления.ПланыЗанятостиВидовРабочихЦентров КАК ПланыЗанятостиВидовРабочихЦентров
		|ГДЕ
		|	ПланыЗанятостиВидовРабочихЦентров.Регистратор = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	РегистраторПланаПроизводства.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РегистраторПланаПроизводства КАК РегистраторПланаПроизводства
		|ГДЕ
		|	РегистраторПланаПроизводства.ПланПроизводства = &Регистратор
		|	И РегистраторПланаПроизводства.Проведен
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ДокументПланПроизводства.Статус КАК Статус
		|ИЗ
		|	Документ.ПланПроизводства КАК ДокументПланПроизводства
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.РегистраторПланаПроизводства КАК РегистраторПланаПроизводства
		|		ПО РегистраторПланаПроизводства.ПланПроизводства = ДокументПланПроизводства.Ссылка
		|ГДЕ
		|	(ДокументПланПроизводства.Ссылка = &Регистратор
		|			ИЛИ РегистраторПланаПроизводства.Ссылка = &Регистратор)");
	
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки = Блокировка.Добавить("Документ.РегистраторПланаПроизводства");
			Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ПланПроизводства") Тогда
				ЭлементБлокировки.УстановитьЗначение("ПланПроизводства", Выборка.Регистратор);
			Иначе
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Выборка.Регистратор);
			КонецЕсли;
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			
			Блокировка.Заблокировать();
			
			Запрос.УстановитьПараметр("Регистратор", Выборка.Регистратор);
			МассивРезультатов = Запрос.ВыполнитьПакет();
			
			ВыборкаСтатус = МассивРезультатов[2].Выбрать();
			
			Если ВыборкаСтатус.Следующий() 
				И ВыборкаСтатус.Статус = Перечисления.СтатусыПланов.Отменен Тогда
				
				НаборЗаписейСтарый = РегистрыНакопления.ПланыЗанятостиВидовРабочихЦентров.СоздатьНаборЗаписей();
				НаборЗаписейСтарый.Отбор.Регистратор.Установить(Выборка.Регистратор);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписейСтарый);
				
			ИначеЕсли Не МассивРезультатов[0].Пустой()
				И Не МассивРезультатов[1].Пустой() Тогда
				
				НаборЗаписейНовый = РегистрыНакопления.ПланыЗанятостиВидовРабочихЦентров.СоздатьНаборЗаписей();
				НаборЗаписейНовый.Отбор.Регистратор.Установить(МассивРезультатов[1].Выгрузить()[0].Ссылка);
				НаборЗаписейНовый.Загрузить(МассивРезультатов[0].Выгрузить());
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписейНовый);
				
				НаборЗаписейСтарый = РегистрыНакопления.ПланыЗанятостиВидовРабочихЦентров.СоздатьНаборЗаписей();
				НаборЗаписейСтарый.Отбор.Регистратор.Установить(Выборка.Регистратор);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписейСтарый);
				
			Иначе
				
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(Выборка.Регистратор, ДополнительныеПараметры);
				
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Регистратор);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
