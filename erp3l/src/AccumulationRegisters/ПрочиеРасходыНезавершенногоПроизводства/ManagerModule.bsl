#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

// Собирает структуру из текстов запросов для дальнейшей проверки даты запрета.
// 
// Параметры:
// 	Запрос - Запрос - Запрос по проверке даты запрета, можно установить параметры
// Возвращаемое значение:
// 	Структура - см. ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов
Функция ТекстЗапросаКонтрольДатыЗапрета(Запрос) Экспорт
	ИмяРегистра = Метаданные.РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.Имя;
	ИмяТаблицыИзменений = "ТаблицаИзмененийПрочиеРасходыНезавершенногоПроизводства"; 
	СтруктураТекстовЗапросов = ПроведениеДокументов.ШаблонТекстЗапросаКонтрольДатыЗапрета(Запрос, 
		ИмяРегистра, 
		ИмяТаблицыИзменений, 
		"ФинансовыйКонтур");
	Возврат СтруктураТекстовЗапросов

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

//++ НЕ УТКА

// Заполняет параметры отражения движений регистра в финансовом учете
//
// Возвращаемое значение:
// 	см. МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
//
Функция ПараметрыОтраженияДвиженийВФинансовомУчете() Экспорт
	
	ПараметрыОтражения = МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете();
	ПараметрыОтражения.ПутьКДаннымОбъектНастройки = "ГруппаПродукции";
	ПараметрыОтражения.ПутьКДаннымНаправлениеДеятельности = "НаправлениеДеятельности";
	ПараметрыОтражения.ПутьКДаннымПодразделение = "Подразделение";
	ПараметрыОтражения.ПутьКДаннымМестоУчета = "Подразделение";
	ПараметрыОтражения.РесурсыУпр.Добавить("СтоимостьУпр");
	ПараметрыОтражения.РесурсыРегл.Добавить("СтоимостьРегл");
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров.ЗаполнитьПараметрыОтраженияПоМетаданнымРегистра(ПараметрыОтражения, МетаданныеРегистра);
	
	Возврат ПараметрыОтражения;
	
КонецФункции

//-- НЕ УТКА

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.ОбработатьЗаполнениеНастроекКомпоновки";
	Обработчик.Версия = "2.5.5.24";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dd367628-0291-4ca9-b60e-ef598eb1ec29");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ПрочиеРасходыНезавершенногоПроизводства.ЗарегистрироватьДанныеКЗаполнениюНастроекКомпоновки";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет служебные реквизиты в справочнике правил распределения расходов.';
									|en = 'Fills in the service attributes in the cost allocation rules catalog.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Справочники.ПравилаРаспределенияРасходов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.Справочники.ПравилаРаспределенияРасходов.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.Справочники.ПравилаРаспределенияРасходов.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ПравилаРаспределенияРасходов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

КонецПроцедуры

// Регистрирует данные к обработке при переходе на новую версию.
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКЗаполнениюНастроекКомпоновки(Параметры) Экспорт
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Справочник.ПравилаРаспределенияРасходов";
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Ссылка");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиСсылки();

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Т.Ссылка
		|ИЗ
		|	Справочник.ПравилаРаспределенияРасходов КАК Т
		|ГДЕ
		|	Т.НазначениеПравила= ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоЭтапамПроизводства)
		|	И Т.НаправлениеРаспределения = ЗНАЧЕНИЕ(Перечисление.НаправлениеРаспределенияПоПодразделениям.Текущее)
		|	И НЕ Т.НастройкиНаправленияРаспределенияИзменены
		|	И НЕ Т.Устаревшее
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.Ссылка
		|ИЗ
		|	Справочник.ПравилаРаспределенияРасходов.ОтборПоГруппамПродукции КАК Т
		|ГДЕ
		|	Т.Ссылка.НазначениеПравила В (ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоЭтапамПроизводства),
		|									ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаФинансовыйРезультат))
		|	И НЕ Т.Ссылка.НастройкиБазыРаспределенияПоПартиямИзменены
		|	И НЕ Т.Ссылка.Устаревшее
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.Ссылка
		|ИЗ
		|	Справочник.ПравилаРаспределенияРасходов.ОтборПоМатериалам КАК Т
		|ГДЕ
		|	Т.Ссылка.НазначениеПравила В (ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоЭтапамПроизводства),
		|									ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаФинансовыйРезультат))
		|	И НЕ Т.Ссылка.НастройкиБазыРаспределенияПоПартиямИзменены
		|	И НЕ Т.Ссылка.Устаревшее
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.Ссылка
		|ИЗ
		|	Справочник.ПравилаРаспределенияРасходов.ОтборПоВидамРабот КАК Т
		|ГДЕ
		|	Т.Ссылка.НазначениеПравила В (ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоЭтапамПроизводства),
		|									ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеРасходовНаФинансовыйРезультат))
		|	И НЕ Т.Ссылка.НастройкиБазыРаспределенияПоПартиямИзменены
		|	И НЕ Т.Ссылка.Устаревшее
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	Т.Ссылка
		|ИЗ
		|	Справочник.ПравилаРаспределенияРасходов.ОтборПоПродукции КАК Т
		|ГДЕ
		|	Т.Ссылка.НазначениеПравила = ЗНАЧЕНИЕ(Перечисление.НазначениеПравилРаспределенияРасходов.РаспределениеСтатейРасходовПоЭтапамПроизводства)
		|	И НЕ Т.Ссылка.НастройкиБазыРаспределенияПоПартиямИзменены
		|	И НЕ Т.Ссылка.Устаревшее";
	
	ОбновлениеИнформационнойБазы.ОтметитьКОбработке(Параметры, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
КонецПроцедуры

Процедура ОбработатьЗаполнениеНастроекКомпоновки(Параметры) Экспорт
	
	МакетыБазРаспределений = Новый Структура;
	МакетыБазРаспределений.Вставить("НаправлениеРаспределения",
		Перечисления.ТипыБазыРаспределенияРасходов.ПолучитьМакет("НаправлениеРаспределения"));
	МакетыБазРаспределений.Вставить("МатериальныеЗатраты",
		Перечисления.ТипыБазыРаспределенияРасходов.ПолучитьМакет("МатериальныеЗатраты"));
	МакетыБазРаспределений.Вставить("Продукция",
		Перечисления.ТипыБазыРаспределенияРасходов.ПолучитьМакет("Продукция"));
	МакетыБазРаспределений.Вставить("Трудозатраты",
		Перечисления.ТипыБазыРаспределенияРасходов.ПолучитьМакет("Трудозатраты"));
	МакетыБазРаспределений.Вставить("МатериальныеИТрудозатраты",
		Перечисления.ТипыБазыРаспределенияРасходов.ПолучитьМакет("МатериальныеИТрудозатраты"));
		
	ПолноеИмяОбъекта = "Справочник.ПравилаРаспределенияРасходов";
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Для Каждого ОбновляемыйЭлемент Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъекта);
			ЭлементБлокировки.УстановитьЗначение("Ссылка", ОбновляемыйЭлемент.Ссылка);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
			
			Объект = ОбновляемыйЭлемент.Ссылка.ПолучитьОбъект(); // СправочникОбъект.ПравилаРаспределенияРасходов - 
			Если Объект = Неопределено Тогда
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(ОбновляемыйЭлемент.Ссылка);
				ЗафиксироватьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			ЗатратыСервер.ОбработатьЗаполнениеНастроекКомпоновки(Объект, МакетыБазРаспределений);
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), ОбновляемыйЭлемент.Ссылка);
			
			ВызватьИсключение;
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
