#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
//++ НЕ УТ
//++ НЕ УТКА
// Процедуры и функции используемые механизмом отражения в МФУ.

// Заполняет параметры отражения движений регистра в финансовом учете
//
// Возвращаемое значение:
// 	см. МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
//
Функция ПараметрыОтраженияДвиженийВФинансовомУчете() Экспорт
	
	ПараметрыОтражения = МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете();
	ПараметрыОтражения.РесурсыУпр.Добавить("НДСУпр");
	ПараметрыОтражения.РесурсыРегл.Добавить("НДС");
	ПараметрыОтражения.ЭтоРегистрУчетаНДС = Истина;
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров.ЗаполнитьПараметрыОтраженияПоМетаданнымРегистра(ПараметрыОтражения, МетаданныеРегистра);
	
	ПараметрыОтражения.УсловиеДебет  = "ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейДвиженийПоНДС.Входящий)";
	ПараметрыОтражения.УсловиеКредит = "ТипЗаписи = ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейДвиженийПоНДС.Исходящий)";
	
	Возврат ПараметрыОтражения;
	
КонецФункции

// Определяет источники уточнения счета, доступные в регистре и их свойства.
//
// Параметры:
//  СвойстваИсточника - Строка - "ИмяПоля" - имя атрибута регистра накопления, из которого планируется получать источник уточнения счета.
//
// Возвращаемое значение:
//  Соответствие - Ключ - название источника уточнения счета. 
//                 Значение - структура свойств источника уточнения счета.
//
Функция ИсточникиУточненияСчета(СвойстваИсточника) Экспорт
	
	ИсточникиУточненияСчета = Новый Соответствие;
	
	// Источники уточнения не доступны.
	
	Возврат ИсточникиУточненияСчета;
	
КонецФункции

// Определяет источники подразделений регистра и их свойства.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя источника. 
//                 Значение - структура свойств источника. 
//
Функция ИсточникиПодразделений() Экспорт

	ИсточникиПодразделений = Новый Соответствие;
	
	Возврат ИсточникиПодразделений;
	
КонецФункции

// Определяет источники направлений регистра и их свойства.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя источника. 
//                 Значение - структура свойств источника. 
//
Функция ИсточникиНаправлений() Экспорт
	
	Результат = Новый Соответствие;
	
	Возврат Результат;

КонецФункции

// Определяет источники заполнения субконто.
//
// Возвращаемое значение:
//  Массив - массив атрибутов регистра.
//
Функция ИсточникиСубконто() Экспорт

	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить("Контрагент");
	МассивСубконто.Добавить("СчетФактура");
	МассивСубконто.Добавить("ВидЦенности");
	МассивСубконто.Добавить("СтавкаНДС");

	Возврат Новый Структура("СубконтоДт, СубконтоКт", МассивСубконто, МассивСубконто);
	
КонецФункции

// Определяет показатели в валюте регистра.
//
// Параметры:
//  СвойстваПоказателей - Строка - "ИсточникВалюты" - источник валюты для показателя регистра.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция ПоказателиВВалюте(СвойстваПоказателей) Экспорт

	ПоказателиВВалюте = Новый Соответствие;
	
	// Показатели в валюте не предусмотрены.
	
	Возврат ПоказателиВВалюте;

КонецФункции

// Определяет показатели в валюте регистра.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция ПоказателиКоличества() Экспорт

	ПоказателиКоличества = Новый Соответствие;
	Возврат ПоказателиКоличества;

КонецФункции

//-- НЕ УТКА

// Определяет показатели регистра.
//
// Параметры:
//  Свойства - Структура - содержащая ключи СвойстваПоказателей, СвойстваРесурсов
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция Показатели(Свойства) Экспорт

	Показатели = Новый Соответствие;
	
	СвойстваПоказателей = Свойства.СвойстваПоказателей;
	СвойстваРесурсов = Свойства.СвойстваРесурсов;
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "НДСУпр", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "НДС", "ВалютаРегл"));
	
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	Возврат Показатели;
	
КонецФункции
//-- НЕ УТ

// Собирает структуру из текстов запросов для дальнейшей проверки даты запрета.
// 
// Параметры:
// 	Запрос - Запрос - Запрос по проверке даты запрета, можно установить параметры
// Возвращаемое значение:
// 	Структура - см. ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов
Функция ТекстЗапросаКонтрольДатыЗапрета(Запрос) Экспорт
	ИмяРегистра = Метаданные.РегистрыНакопления.ДвиженияПоНДС.Имя;
	ИмяТаблицыИзменений = "ТаблицаИзмененийДвиженияПоНДС"; 
	СтруктураТекстовЗапросов = ПроведениеДокументов.ШаблонТекстЗапросаКонтрольДатыЗапрета(Запрос, 
		ИмяРегистра, 
		ИмяТаблицыИзменений, 
		"ФинансовыйКонтур");
	Возврат СтруктураТекстовЗапросов

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// См. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ДвиженияПоНДС.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.6.3";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("a1c356a6-e58d-4c0d-a8fe-62bc650082ee");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДвиженияПоНДС.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет регистр по данным документов регистраторов и регистров накопления ""НДС записи книги продаж"" и ""НДС записи книги покупок""';
									|en = 'Populates the register according to the recorder documents and accumulation registers ""Sales ledger VAT records"" and ""Purchase ledger VAT records""'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.АктВыполненныхРабот.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВозвратТоваровМеждуОрганизациями.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВозвратТоваровОтКлиента.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВозвратТоваровПоставщику.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВыкупВозвратнойТарыКлиентом.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВыкупТоваровХранителем.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.КорректировкаРеализации.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетКомитенту.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетКомитентуОЗакупках.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетОРозничныхПродажах.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетПоКомиссииМеждуОрганизациями.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПередачаТоваровМеждуОрганизациями.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РеализацияТоваровУслуг.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РеализацияУслугПрочихАктивов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СчетФактураВыданныйАванс.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СчетФактураПолученныйАванс.ПолноеИмя());
	//++ Локализация
	Читаемые.Добавить(Метаданные.Документы.ЗаписьКнигиПокупок.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаписьКнигиПродаж.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаявлениеОВвозеТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СчетФактураНалоговыйАгент.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СчетФактураПолученныйНалоговыйАгент.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.НДСЗаписиКнигиПокупок.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.НДСЗаписиКнигиПродаж.ПолноеИмя());
	//-- Локализация
	//++ НЕ УТКА
	Читаемые.Добавить(Метаданные.Документы.ОтчетДавальцу.ПолноеИмя());
	//-- НЕ УТКА
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ДвиженияПоНДС.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктВыполненныхРабот.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктВыполненныхРабот.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровМеждуОрганизациями.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровОтКлиента.ОбработатьДополнительныеРеквизитыДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровОтКлиента.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровПоставщику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровПоставщику.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыкупВозвратнойТарыКлиентом.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыкупВозвратнойТарыКлиентом.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыкупТоваровХранителем.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыкупТоваровХранителем.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.КорректировкаРеализации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетКомитенту.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетКомитенту.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетКомитентуОЗакупках.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетОРозничныхПродажах.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациями.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаТоваровМеждуОрганизациями.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияТоваровУслуг.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияУслугПрочихАктивов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияУслугПрочихАктивов.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СчетФактураВыданныйАванс.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СчетФактураПолученныйАванс.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	//++ Локализация
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаписьКнигиПокупок.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаписьКнигиПродаж.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявлениеОВвозеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СчетФактураНалоговыйАгент.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СчетФактураПолученныйНалоговыйАгент.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	//-- Локализация
	//++ НЕ УТКА
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетДавальцу.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетДавальцу.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";
	//-- НЕ УТКА

КонецПроцедуры

// Описание
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт

	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|		Документ.Ссылка КАК Регистратор
	|	ИЗ
	|		Документ.ВозвратТоваровМеждуОрганизациями КАК Документ
	|	ГДЕ
	|		Документ.Проведен
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ДвиженияПоНДС КАК ДвиженияПоНДС
	|			ГДЕ
	|				ДвиженияПоНДС.Регистратор = Документ.Ссылка)
	//++ Локализация
	|		И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|			ГДЕ
	|				НДСЗаписиКнигиПродаж.Регистратор = Документ.Ссылка
	|				И НЕ НДСЗаписиКнигиПродаж.РегламентнаяОперация
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|			ГДЕ
	|				НДСЗаписиКнигиПокупок.Регистратор = Документ.Ссылка
	|				И НЕ НДСЗаписиКнигиПокупок.РегламентнаяОперация)
	//-- Локализация
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		Документ.Ссылка КАК Регистратор
	|	ИЗ
	|		Документ.ВозвратТоваровОтКлиента КАК Документ
	|	ГДЕ
	|		Документ.Проведен
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ДвиженияПоНДС КАК ДвиженияПоНДС
	|			ГДЕ
	|				ДвиженияПоНДС.Регистратор = Документ.Ссылка)
	//++ Локализация
	|		И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|			ГДЕ
	|				НДСЗаписиКнигиПродаж.Регистратор = Документ.Ссылка
	|				И НЕ НДСЗаписиКнигиПродаж.РегламентнаяОперация
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|			ГДЕ
	|				НДСЗаписиКнигиПокупок.Регистратор = Документ.Ссылка
	|				И НЕ НДСЗаписиКнигиПокупок.РегламентнаяОперация)
	//-- Локализация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|
	|ВЫБРАТЬ
	|		Документ.Ссылка КАК Регистратор
	|	ИЗ
	|		Документ.ВозвратТоваровПоставщику КАК Документ
	|	ГДЕ
	|		Документ.Проведен
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ДвиженияПоНДС КАК ДвиженияПоНДС
	|			ГДЕ
	|				ДвиженияПоНДС.Регистратор = Документ.Ссылка)
	//++ Локализация
	|		И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|			ГДЕ
	|				НДСЗаписиКнигиПродаж.Регистратор = Документ.Ссылка
	|				И НЕ НДСЗаписиКнигиПродаж.РегламентнаяОперация
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|			ГДЕ
	|				НДСЗаписиКнигиПокупок.Регистратор = Документ.Ссылка
	|				И НЕ НДСЗаписиКнигиПокупок.РегламентнаяОперация)
	//-- Локализация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		Документ.Ссылка КАК Регистратор
	|	ИЗ
	|		Документ.КорректировкаРеализации КАК Документ
	|	ГДЕ
	|		Документ.Проведен
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ДвиженияПоНДС КАК ДвиженияПоНДС
	|			ГДЕ
	|				ДвиженияПоНДС.Регистратор = Документ.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		Документ.Ссылка КАК Регистратор
	|	ИЗ
	|		Документ.АктВыполненныхРабот КАК Документ
	|	ГДЕ
	|		Документ.Проведен
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ДвиженияПоНДС КАК ДвиженияПоНДС
	|			ГДЕ
	|				ДвиженияПоНДС.Регистратор = Документ.Ссылка)
	//++ Локализация
	|		И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|			ГДЕ
	|				НДСЗаписиКнигиПродаж.Регистратор = Документ.Ссылка
	|				И НЕ НДСЗаписиКнигиПродаж.РегламентнаяОперация)
	//-- Локализация
	|				
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		Документ.Ссылка КАК Регистратор
	|	ИЗ
	|		Документ.ВыкупВозвратнойТарыКлиентом КАК Документ
	|	ГДЕ
	|		Документ.Проведен
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ДвиженияПоНДС КАК ДвиженияПоНДС
	|			ГДЕ
	|				ДвиженияПоНДС.Регистратор = Документ.Ссылка)
	//++ Локализация
	|		И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|			ГДЕ
	|				НДСЗаписиКнигиПродаж.Регистратор = Документ.Ссылка
	|				И НЕ НДСЗаписиКнигиПродаж.РегламентнаяОперация)
	//-- Локализация
	|				
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		Документ.Ссылка КАК Регистратор
	|	ИЗ
	|		Документ.ВыкупТоваровХранителем КАК Документ
	|	ГДЕ
	|		Документ.Проведен
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ДвиженияПоНДС КАК ДвиженияПоНДС
	|			ГДЕ
	|				ДвиженияПоНДС.Регистратор = Документ.Ссылка)
	//++ Локализация
	|		И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|			ГДЕ
	|				НДСЗаписиКнигиПродаж.Регистратор = Документ.Ссылка
	|				И НЕ НДСЗаписиКнигиПродаж.РегламентнаяОперация)
	//-- Локализация
	//++ НЕ УТКА
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		Документ.Ссылка КАК Регистратор
	|	ИЗ
	|		Документ.ОтчетДавальцу КАК Документ
	|	ГДЕ
	|		Документ.Проведен
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ДвиженияПоНДС КАК ДвиженияПоНДС
	|			ГДЕ
	|				ДвиженияПоНДС.Регистратор = Документ.Ссылка)
	//++ Локализация
	|		И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|			ГДЕ
	|				НДСЗаписиКнигиПродаж.Регистратор = Документ.Ссылка
	|				И НЕ НДСЗаписиКнигиПродаж.РегламентнаяОперация)
	//-- Локализация
	//-- НЕ УТКА
	|				
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		Документ.Ссылка КАК Регистратор
	|	ИЗ
	|		Документ.ОтчетКомитенту КАК Документ
	|	ГДЕ
	|		Документ.Проведен
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ДвиженияПоНДС КАК ДвиженияПоНДС
	|			ГДЕ
	|				ДвиженияПоНДС.Регистратор = Документ.Ссылка)
	//++ Локализация
	|		И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|			ГДЕ
	|				НДСЗаписиКнигиПродаж.Регистратор = Документ.Ссылка
	|				И НЕ НДСЗаписиКнигиПродаж.РегламентнаяОперация)
	//-- Локализация
	|				
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		Документ.Ссылка КАК Регистратор
	|	ИЗ
	|		Документ.ОтчетКомитентуОЗакупках КАК Документ
	|	ГДЕ
	|		Документ.Проведен
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ДвиженияПоНДС КАК ДвиженияПоНДС
	|			ГДЕ
	|				ДвиженияПоНДС.Регистратор = Документ.Ссылка)
	//++ Локализация
	|		И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|			ГДЕ
	|				НДСЗаписиКнигиПродаж.Регистратор = Документ.Ссылка
	|				И НЕ НДСЗаписиКнигиПродаж.РегламентнаяОперация)
	//-- Локализация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		Документ.Ссылка КАК Регистратор
	|	ИЗ
	|		Документ.ОтчетКомиссионера КАК Документ
	|	ГДЕ
	|		Документ.Проведен
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ДвиженияПоНДС КАК ДвиженияПоНДС
	|			ГДЕ
	|				ДвиженияПоНДС.Регистратор = Документ.Ссылка)
	//++ Локализация
	|		И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|			ГДЕ
	|				НДСЗаписиКнигиПродаж.Регистратор = Документ.Ссылка
	|				И НЕ НДСЗаписиКнигиПродаж.РегламентнаяОперация)
	//-- Локализация
	|				
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		Документ.Ссылка КАК Регистратор
	|	ИЗ
	|		Документ.ОтчетОРозничныхПродажах КАК Документ
	|	ГДЕ
	|		Документ.Проведен
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ДвиженияПоНДС КАК ДвиженияПоНДС
	|			ГДЕ
	|				ДвиженияПоНДС.Регистратор = Документ.Ссылка)
	//++ Локализация
	|		И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|			ГДЕ
	|				НДСЗаписиКнигиПродаж.Регистратор = Документ.Ссылка
	|				И НЕ НДСЗаписиКнигиПродаж.РегламентнаяОперация)
	//-- Локализация
	|				
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		Документ.Ссылка КАК Регистратор
	|	ИЗ
	|		Документ.ОтчетПоКомиссииМеждуОрганизациями КАК Документ
	|	ГДЕ
	|		Документ.Проведен
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ДвиженияПоНДС КАК ДвиженияПоНДС
	|			ГДЕ
	|				ДвиженияПоНДС.Регистратор = Документ.Ссылка)
	//++ Локализация
	|		И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|			ГДЕ
	|				НДСЗаписиКнигиПродаж.Регистратор = Документ.Ссылка
	|				И НЕ НДСЗаписиКнигиПродаж.РегламентнаяОперация)
	//-- Локализация
	|				
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		Документ.Ссылка КАК Регистратор
	|	ИЗ
	|		Документ.ПередачаТоваровМеждуОрганизациями КАК Документ
	|	ГДЕ
	|		Документ.Проведен
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ДвиженияПоНДС КАК ДвиженияПоНДС
	|			ГДЕ
	|				ДвиженияПоНДС.Регистратор = Документ.Ссылка)
	//++ Локализация
	|		И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|			ГДЕ
	|				НДСЗаписиКнигиПродаж.Регистратор = Документ.Ссылка
	|				И НЕ НДСЗаписиКнигиПродаж.РегламентнаяОперация)
	//-- Локализация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		Документ.Ссылка КАК Регистратор
	|	ИЗ
	|		Документ.РеализацияТоваровУслуг КАК Документ
	|	ГДЕ
	|		Документ.Проведен
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ДвиженияПоНДС КАК ДвиженияПоНДС
	|			ГДЕ
	|				ДвиженияПоНДС.Регистратор = Документ.Ссылка)
	//++ Локализация
	|		И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|			ГДЕ
	|				НДСЗаписиКнигиПродаж.Регистратор = Документ.Ссылка
	|				И НЕ НДСЗаписиКнигиПродаж.РегламентнаяОперация)
	//-- Локализация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		Документ.Ссылка КАК Регистратор
	|	ИЗ
	|		Документ.РеализацияУслугПрочихАктивов КАК Документ
	|	ГДЕ
	|		Документ.Проведен
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ДвиженияПоНДС КАК ДвиженияПоНДС
	|			ГДЕ
	|				ДвиженияПоНДС.Регистратор = Документ.Ссылка)
	//++ Локализация
	|		И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|			ГДЕ
	|				НДСЗаписиКнигиПродаж.Регистратор = Документ.Ссылка
	|				И НЕ НДСЗаписиКнигиПродаж.РегламентнаяОперация)
	//-- Локализация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		Документ.Ссылка КАК Регистратор
	|	ИЗ
	|		Документ.СчетФактураВыданныйАванс КАК Документ
	|	ГДЕ
	|		Документ.Проведен
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ДвиженияПоНДС КАК ДвиженияПоНДС
	|			ГДЕ
	|				ДвиженияПоНДС.Регистратор = Документ.Ссылка)
	|				
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		Документ.Ссылка КАК Регистратор
	|	ИЗ
	|		Документ.СчетФактураПолученныйАванс КАК Документ
	|	ГДЕ
	|		Документ.Проведен
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ДвиженияПоНДС КАК ДвиженияПоНДС
	|			ГДЕ
	|				ДвиженияПоНДС.Регистратор = Документ.Ссылка)
	|
	//++ Локализация
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		Документ.Ссылка КАК Регистратор
	|	ИЗ
	|		Документ.ЗаявлениеОВвозеТоваров КАК Документ
	|	ГДЕ
	|		Документ.Проведен
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ДвиженияПоНДС КАК ДвиженияПоНДС
	|			ГДЕ
	|				ДвиженияПоНДС.Регистратор = Документ.Ссылка)
	|				
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		Документ.Ссылка КАК Регистратор
	|	ИЗ
	|		Документ.ЗаписьКнигиПродаж КАК Документ
	|	ГДЕ
	|		Документ.Проведен
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ДвиженияПоНДС КАК ДвиженияПоНДС
	|			ГДЕ
	|				ДвиженияПоНДС.Регистратор = Документ.Ссылка)
	|				
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		Документ.Ссылка КАК Регистратор
	|	ИЗ
	|		Документ.ЗаписьКнигиПокупок КАК Документ
	|	ГДЕ
	|		Документ.Проведен
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ДвиженияПоНДС КАК ДвиженияПоНДС
	|			ГДЕ
	|				ДвиженияПоНДС.Регистратор = Документ.Ссылка)
	|				
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		Документ.Ссылка КАК Регистратор
	|	ИЗ
	|		Документ.СчетФактураНалоговыйАгент КАК Документ
	|	ГДЕ
	|		Документ.Проведен
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ДвиженияПоНДС КАК ДвиженияПоНДС
	|			ГДЕ
	|				ДвиженияПоНДС.Регистратор = Документ.Ссылка)
	|				
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		Документ.Ссылка КАК Регистратор
	|	ИЗ
	|		Документ.СчетФактураПолученныйНалоговыйАгент КАК Документ
	|	ГДЕ
	|		Документ.Проведен
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ДвиженияПоНДС КАК ДвиженияПоНДС
	|			ГДЕ
	|				ДвиженияПоНДС.Регистратор = Документ.Ссылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		НДСЗаписиКнигиПокупок.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|	ГДЕ
	|		НДСЗаписиКнигиПокупок.РегламентнаяОперация
	//++ НЕ УТ
	|		И НЕ НДСЗаписиКнигиПокупок.Регистратор ССЫЛКА Документ.ОперацияБух
	//-- НЕ УТ
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ДвиженияПоНДС КАК ДвиженияПоНДС
	|			ГДЕ
	|				ДвиженияПоНДС.Регистратор = НДСЗаписиКнигиПокупок.Регистратор)
	|				
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|		НДСЗаписиКнигиПродаж.Регистратор КАК Регистратор
	|	ИЗ
	|		РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|	ГДЕ
	|		НДСЗаписиКнигиПродаж.РегламентнаяОперация
	//++ НЕ УТ
	|		И НЕ НДСЗаписиКнигиПродаж.Регистратор ССЫЛКА Документ.ОперацияБух
	//-- НЕ УТ
	|		И НЕ ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.ДвиженияПоНДС КАК ДвиженияПоНДС
	|			ГДЕ
	|				ДвиженияПоНДС.Регистратор = НДСЗаписиКнигиПродаж.Регистратор)
	//-- Локализация
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры,
		Регистраторы,
		ПолноеИмяРегистра);
		
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	//++ Локализация
	АвансыПолученные = Новый Массив();
	АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.ВозвратАвансовПолученных);
	АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
	АвансыПолученные.Добавить(Перечисления.ВидыЦенностей.АвансыПолученныеНалоговыйАгент);
	
	ТекстЗапросаПолученияОфлайнДвижений = "ВЫБРАТЬ
	|	Источник.Период                             КАК Период,
	|	Источник.Регистратор                        КАК Регистратор,
	|	Источник.Организация                        КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейДвиженийПоНДС.Исходящий) КАК ТипЗаписи,
	|	Источник.Поставщик                          КАК Контрагент,
	|	Источник.СчетФактура                        КАК СчетФактура,
	|	Источник.СтавкаНДС                          КАК СтавкаНДСПеречисление,
	|	Источник.ВидЦенности                        КАК ВидЦенности,
	|	-Источник.СуммаБезНДС                       КАК СуммаБезНДС,
	|	-Источник.НДС                               КАК НДС,
	|	-Источник.НДСУпр                            КАК НДСУпр,
	|	Источник.РегламентнаяОперация               КАК РегламентнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                КАК ИдентификаторФинЗаписи,
	|	НЕОПРЕДЕЛЕНО                                КАК НастройкаХозяйственнойОперации,
	|	НЕОПРЕДЕЛЕНО                                КАК Сторно
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК Источник
	|ГДЕ
	|	Источник.Регистратор = &Регистратор
	|	И Источник.ВидЦенности В (&АвансыПолученные)
	|	И Источник.РегламентнаяОперация
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Источник.Период                             КАК Период,
	|	Источник.Регистратор                        КАК Регистратор,
	|	Источник.Организация                        КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейДвиженийПоНДС.Входящий) КАК ТипЗаписи,
	|	Источник.Поставщик                          КАК Контрагент,
	|	Источник.СчетФактура                        КАК СчетФактура,
	|	Источник.СтавкаНДС                          КАК СтавкаНДСПеречисление,
	|	Источник.ВидЦенности                        КАК ВидЦенности,
	|	Источник.СуммаБезНДС                        КАК СуммаБезНДС,
	|	Источник.НДС                                КАК НДС,
	|	Источник.НДСУпр                             КАК НДСУпр,
	|	Источник.РегламентнаяОперация               КАК РегламентнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                КАК ИдентификаторФинЗаписи,
	|	НЕОПРЕДЕЛЕНО                                КАК НастройкаХозяйственнойОперации,
	|	НЕОПРЕДЕЛЕНО                                КАК Сторно
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК Источник
	|ГДЕ
	|	Источник.Регистратор = &Регистратор
	|	И НЕ Источник.ВидЦенности В (&АвансыПолученные)
	|	И Источник.РегламентнаяОперация
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Источник.Период                             КАК Период,
	|	Источник.Регистратор                        КАК Регистратор,
	|	Источник.Организация                        КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.ТипыЗаписейДвиженийПоНДС.Входящий) КАК ТипЗаписи,
	|	Источник.Покупатель                         КАК Контрагент,
	|	Источник.СчетФактура                        КАК СчетФактура,
	|	Источник.СтавкаНДС                          КАК СтавкаНДСПеречисление,
	|	Источник.ВидЦенности                        КАК ВидЦенности,
	|	-Источник.СуммаБезНДС                       КАК СуммаБезНДС,
	|	-Источник.НДС                               КАК НДС,
	|	-Источник.НДСУпр                            КАК НДСУпр,
	|	Источник.РегламентнаяОперация               КАК РегламентнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                КАК ИдентификаторФинЗаписи,
	|	НЕОПРЕДЕЛЕНО                                КАК НастройкаХозяйственнойОперации,
	|	НЕОПРЕДЕЛЕНО                                КАК Сторно
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК Источник
	|ГДЕ
	|	Источник.Регистратор = &Регистратор
	|	И Источник.РегламентнаяОперация";
	
	Запрос = Новый Запрос(ТекстЗапросаПолученияОфлайнДвижений);
	Запрос.УстановитьПараметр("АвансыПолученные", АвансыПолученные);
	
	ТипыРегистраторовНДСЗаписиКнигиПродаж = Метаданные.РегистрыНакопления.НДСЗаписиКнигиПродаж.СтандартныеРеквизиты.Регистратор.Тип.Типы();
	ТипыРегистраторовНДСЗаписиКнигиПокупок = Метаданные.РегистрыНакопления.НДСЗаписиКнигиПокупок.СтандартныеРеквизиты.Регистратор.Тип.Типы();
	//-- Локализация
	
	Для Каждого Выборка Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Регистратор = Выборка.Регистратор;// ДокументСсылка - 
			ДокументСОнлайнДвижениями = ДокументСОнлайнДвижениями(Регистратор);
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			
			Если ДокументСОнлайнДвижениями Тогда
				ЭлементБлокировки = Блокировка.Добавить("Документ." + Регистратор.Метаданные().Имя);
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);
			КонецЕсли;
			
			//++ Локализация
			Если ТипыРегистраторовНДСЗаписиКнигиПокупок.Найти(ТипЗнч(Регистратор)) <> Неопределено Тогда
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.НДСЗаписиКнигиПокупок.НаборЗаписей");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			КонецЕсли;
			
			Если ТипыРегистраторовНДСЗаписиКнигиПродаж.Найти(ТипЗнч(Регистратор)) <> Неопределено Тогда
				ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.НДСЗаписиКнигиПродаж.НаборЗаписей");
				ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
				ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			КонецЕсли;
			//-- Локализация
			Блокировка.Заблокировать();
			
			НаборЗаписей = СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
			
			//++ Локализация
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			РезультатЗапросаДвиженияПоНДСОфлайн = Запрос.Выполнить();
			//-- Локализация
			
			ДвиженияПоНДС = Неопределено;
			Если ДокументСОнлайнДвижениями Тогда
				МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Регистратор);
				ДанныеДляПроведения = МенеджерДокумента.ДанныеДокументаДляПроведения(Регистратор, МетаданныеРегистра.Имя);
				ДанныеДляПроведения.Свойство("ТаблицаДвиженияПоНДС", ДвиженияПоНДС); // ТаблицаЗначений -
			КонецЕсли;
			
			//++ Локализация
			Если Не РезультатЗапросаДвиженияПоНДСОфлайн.Пустой() Тогда
				ДвиженияПоНДСОфлайн = РезультатЗапросаДвиженияПоНДСОфлайн.Выгрузить();
				ДвиженияПоНДСОфлайн.Колонки.Добавить("СтавкаНДС", Новый ОписаниеТипов("СправочникСсылка.СтавкиНДС"));
				
				Для Каждого СтрокаТЗ Из ДвиженияПоНДСОфлайн Цикл
						СтрокаТЗ.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(СтрокаТЗ.СтавкаНДСПеречисление);
				КонецЦикла;

				Если ДвиженияПоНДС <> Неопределено Тогда
					ОбщегоНазначенияУТКлиентСервер.ДополнитьТаблицу(ДвиженияПоНДС, ДвиженияПоНДСОфлайн);
				КонецЕсли;
				ДвиженияПоНДС = ДвиженияПоНДСОфлайн.Скопировать();
			КонецЕсли;
			//-- Локализация
			
			Если ДвиженияПоНДС <> Неопределено Тогда
				НаборЗаписей.Загрузить(ДвиженияПоНДС);
			КонецЕсли;

			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Шаблон = НСтр("ru = 'Не удалось записать данные в регистр %1 по регистратору ""%2"", по причине: %3';
							|en = 'Cannot save data to the register %1 for recorder ""%2"". Reason: %3'");
			ТекстСообщения = 
				СтрШаблон(Шаблон,
					ПолноеИмяРегистра,
					Регистратор,
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеРегистра,
				,
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
		
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Функция ДокументСОнлайнДвижениями(Документ)
	
	ТипыДокументов = Новый Соответствие();
	ТипыДокументов.Вставить(Тип("ДокументСсылка.ВозвратТоваровМеждуОрганизациями"), Истина);
	ТипыДокументов.Вставить(Тип("ДокументСсылка.ВозвратТоваровОтКлиента"), Истина);
	ТипыДокументов.Вставить(Тип("ДокументСсылка.ВозвратТоваровПоставщику"), Истина);
	ТипыДокументов.Вставить(Тип("ДокументСсылка.КорректировкаРеализации"), Истина);
	ТипыДокументов.Вставить(Тип("ДокументСсылка.АктВыполненныхРабот"), Истина);
	ТипыДокументов.Вставить(Тип("ДокументСсылка.ВыкупВозвратнойТарыКлиентом"), Истина);
	ТипыДокументов.Вставить(Тип("ДокументСсылка.ВыкупТоваровХранителем"), Истина);
	ТипыДокументов.Вставить(Тип("ДокументСсылка.ОтчетКомитенту"), Истина);
	ТипыДокументов.Вставить(Тип("ДокументСсылка.ОтчетКомиссионера"), Истина);
	ТипыДокументов.Вставить(Тип("ДокументСсылка.ОтчетКомитентуОЗакупках"), Истина);
	ТипыДокументов.Вставить(Тип("ДокументСсылка.ОтчетОРозничныхПродажах"), Истина);
	ТипыДокументов.Вставить(Тип("ДокументСсылка.ОтчетПоКомиссииМеждуОрганизациями"), Истина);
	ТипыДокументов.Вставить(Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями"), Истина);
	ТипыДокументов.Вставить(Тип("ДокументСсылка.РеализацияТоваровУслуг"), Истина);
	ТипыДокументов.Вставить(Тип("ДокументСсылка.РеализацияУслугПрочихАктивов"), Истина);
	ТипыДокументов.Вставить(Тип("ДокументСсылка.СчетФактураВыданныйАванс"), Истина);
	ТипыДокументов.Вставить(Тип("ДокументСсылка.СчетФактураПолученныйАванс"), Истина);
	//++ Локализация
	ТипыДокументов.Вставить(Тип("ДокументСсылка.ЗаписьКнигиПродаж"), Истина);
	ТипыДокументов.Вставить(Тип("ДокументСсылка.ЗаписьКнигиПокупок"), Истина);
	ТипыДокументов.Вставить(Тип("ДокументСсылка.ЗаявлениеОВвозеТоваров"), Истина);
	ТипыДокументов.Вставить(Тип("ДокументСсылка.СчетФактураНалоговыйАгент"), Истина);
	ТипыДокументов.Вставить(Тип("ДокументСсылка.СчетФактураПолученныйНалоговыйАгент"), Истина);
	//-- Локализация
	//++ НЕ УТКА
	ТипыДокументов.Вставить(Тип("ДокументСсылка.ОтчетДавальцу"), Истина);
	//-- НЕ УТКА
	
	Возврат ТипыДокументов.Получить(ТипЗнч(Документ)) <> Неопределено;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
