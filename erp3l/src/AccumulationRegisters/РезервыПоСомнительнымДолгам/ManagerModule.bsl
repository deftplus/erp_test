#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Собирает структуру из текстов запросов для дальнейшей проверки даты запрета.
// 
// Параметры:
// 	Запрос - Запрос - Запрос по проверке даты запрета, можно установить параметры
// Возвращаемое значение:
// 	Структура - см. ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов
Функция ТекстЗапросаКонтрольДатыЗапрета(Запрос) Экспорт
	ИмяРегистра = Метаданные.РегистрыНакопления.РезервыПоСомнительнымДолгам.Имя;
	ИмяТаблицыИзменений = "ТаблицаИзмененийРезервыПоСомнительнымДолгам"; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Период КАК Период,
	|	КлючиАналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	&ИмяРегистра КАК ИмяРегистра,
	|	&Раздел КАК РазделДатыЗапрета
	|ИЗ
	|	&ИмяТаблицыИзменений КАК Таблица
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитикаУчетаПоПартнерам
	|	ПО
	|		Таблица.АналитикаУчетаПоПартнерам = КлючиАналитикаУчетаПоПартнерам.КлючАналитики
	|";
	
	ИмяПараметраИмяРегистра = "ИмяРегистра" + ИмяРегистра;
	ИмяПараметраРаздел = "Раздел" + ИмяРегистра;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИмяРегистра", "&" + ИмяПараметраИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Раздел", "&" + ИмяПараметраРаздел);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИмяТаблицыИзменений", ИмяТаблицыИзменений);
	
	Запрос.УстановитьПараметр(ИмяПараметраИмяРегистра, ИмяРегистра);
	Запрос.УстановитьПараметр(ИмяПараметраРаздел, "ФинансовыйКонтур");
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Т1 
	|	ПО Т.АналитикаУчетаПоПартнерам = Т1.КлючАналитики
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т1.Организация)";
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

//++ НЕ УТКА

// Заполняет параметры отражения движений регистра в финансовом учете
//
// Возвращаемое значение:
// 	см. МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
//
Функция ПараметрыОтраженияДвиженийВФинансовомУчете() Экспорт
	
	ПараметрыОтражения = МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете();
	ПараметрыОтражения.ПутьКДаннымОрганизация = "АналитикаУчетаПоПартнерам.Организация";
	ПараметрыОтражения.ПутьКДаннымНаправлениеДеятельности = "АналитикаУчетаПоПартнерам.НаправлениеДеятельности";
	ПараметрыОтражения.ПутьКДаннымВалюта = "Валюта";
	ПараметрыОтражения.РесурсыУпр.Добавить("СуммаУпр");
	ПараметрыОтражения.РесурсыРегл.Добавить("СуммаРегл");
	ПараметрыОтражения.РесурсыВал.Добавить("Сумма");
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров.ЗаполнитьПараметрыОтраженияПоМетаданнымРегистра(ПараметрыОтражения, МетаданныеРегистра);
	
	Возврат ПараметрыОтражения;
	
КонецФункции

//-- НЕ УТКА

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.РезервыПоСомнительнымДолгам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.6.19";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("0f61c377-7322-4bc7-a28c-8e47ab8da78d");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.РезервыПоСомнительнымДолгам.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение измерение ""Объект расчетов"".';
									|en = 'Заполнение измерение ""Объект расчетов"".'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РезервыПоСомнительнымДолгам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РезервыПоСомнительнымДолгам.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктВыполненныхРабот.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровМеждуОрганизациями.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровОтКлиента.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровПоставщику.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыкупВозвратнойТарыКлиентом.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыкупВозвратнойТарыУПоставщика.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыкупПринятыхНаХранениеТоваров.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыкупТоваровХранителем.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПереработчику.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПоставщику.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОперацияПоПлатежнойКарте.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетКомиссионера.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетКомиссионераОСписании.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетКомитенту.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетКомитентуОСписании.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПереработчика.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациями.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаТоваровМеждуОрганизациями.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПоступлениеБезналичныхДенежныхСредств.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеТоваровУслуг.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеУслугПрочихАктивов.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриходныйКассовыйОрдер.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РасходныйКассовыйОрдер.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияТоваровУслуг.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияУслугПрочихАктивов.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СписаниеБезналичныхДенежныхСредств.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СписаниеПринятыхНаХранениеТоваров.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ТаможеннаяДекларацияИмпорт.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Контрагенты.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";
	//++ Локализация
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыбытиеДенежныхДокументов.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетОператораСистемыПлатон.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПоступлениеДенежныхДокументов.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";
	//-- Локализация
	//++ НЕ УТКА
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказДавальца.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетДавальцу.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";
	//-- НЕ УТКА

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();

	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();

	ТипыРегистраторов = МетаданныеРегистра.СтандартныеРеквизиты.Регистратор.Тип.Типы();
	СписокДокументов = Новый Массив; 
	Для Каждого ТипРегистратора Из ТипыРегистраторов Цикл
		ДокПустаяСсылка = Новый (ТипРегистратора);
		СписокДокументов.Добавить(ДокПустаяСсылка.Метаданные().ПолноеИмя());
	КонецЦикла;
	
	ПараметрыВыборки.ПолныеИменаОбъектов = СтрСоединить(СписокДокументов, ",");
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор КАК Регистратор
	|ИЗ 
	|	РегистрНакопления.РезервыПоСомнительнымДолгам КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ОбъектРасчетов В (ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка), НЕОПРЕДЕЛЕНО)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы,
		ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
			Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	СоответствиеТиповДокументовТипамРасчетов = СоответствиеТиповДокументовТипамРасчетов();
	РегистраторОбъект = Неопределено;
	
	Для Каждого Выборка Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
			Блокировка.Заблокировать();
							
			НаборЗаписей = РегистрыНакопления[МетаданныеРегистра.Имя].СоздатьНаборЗаписей(); // РегистрНакопленияНаборЗаписей - 
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			
			ЕстьОшибкаЗапонения = Ложь;
			ВсеОбъектыРасчетовСгенерированы = ОбъектыРасчетовСервер.ВсеОбъектыРасчетовСгенерированы(Параметры.Очередь);
			
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	СоответствиеТипов.ТипДокумента КАК ТипДокумента,
				|	СоответствиеТипов.ТипРасчетов КАК ТипРасчетов
				|ПОМЕСТИТЬ ВтСоответствиеТипов

				|ИЗ
				|	&СоответствиеТипов КАК СоответствиеТипов
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ДанныеРегистра.НомерСтроки КАК НомерСтроки,
				|	ВЫБОР
				|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.РасчетныйДокумент) В (&ТипыРасчетныеДокументыСКлиентом)
				|				И НЕ ТИПЗНАЧЕНИЯ(ДанныеРегистра.РасчетныйДокумент) В (&ТипыРасчетныеДокументыСПоставщиком)
				|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
				|		КОГДА НЕ ТИПЗНАЧЕНИЯ(ДанныеРегистра.РасчетныйДокумент) В (&ТипыРасчетныеДокументыСКлиентом)
				|				И ТИПЗНАЧЕНИЯ(ДанныеРегистра.РасчетныйДокумент) В (&ТипыРасчетныеДокументыСПоставщиком)
				|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
				|		КОГДА НЕ СоответствиеТипов.ТипРасчетов ЕСТЬ NULL
				|			ТОГДА СоответствиеТипов.ТипРасчетов
				|		КОГДА ДанныеРегистра.ПостояннаяРазница < 0
				|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
				|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.УдалитьОбъектРасчетов) = ТИП(Справочник.ДоговорыКонтрагентов)
				|			ТОГДА ВЫБОР
				|					КОГДА ВЫРАЗИТЬ(ДанныеРегистра.УдалитьОбъектРасчетов КАК Справочник.ДоговорыКонтрагентов).ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СКомиссионером)
				|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
				|					КОГДА ВЫРАЗИТЬ(ДанныеРегистра.УдалитьОбъектРасчетов КАК Справочник.ДоговорыКонтрагентов).ТипДоговора = ЗНАЧЕНИЕ(Перечисление.ТипыДоговоров.СКомитентом)
				|						ТОГДА ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
				|				КОНЕЦ
				|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.ПустаяСсылка)
				|	КОНЕЦ КАК ТипРасчетов,
				|	АналитикаУчета.Организация КАК Организация,
				|	АналитикаУчета.Контрагент КАК Контрагент,
				|	ВЫБОР
				|		КОГДА ТИПЗНАЧЕНИЯ(ДанныеРегистра.УдалитьОбъектРасчетов) = ТИП(Справочник.ДоговорыКонтрагентов)
				|				И Договоры.РазрешенаРаботаСДочернимиПартнерами
				|			ТОГДА Договоры.Партнер
				|		ИНАЧЕ АналитикаУчета.Партнер
				|	КОНЕЦ КАК Партнер,
				|	ДанныеРегистра.УдалитьОбъектРасчетов КАК УдалитьОбъектРасчетов,
				|	ДанныеРегистра.Валюта КАК Валюта,
				|	ДанныеРегистра.ОбъектРасчетов КАК ОбъектРасчетов
				|ПОМЕСТИТЬ ВТРезервы
				|ИЗ
				|	РегистрНакопления.РезервыПоСомнительнымДолгам КАК ДанныеРегистра
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВтСоответствиеТипов КАК СоответствиеТипов
				|			ПО ТИПЗНАЧЕНИЯ(ДанныеРегистра.РасчетныйДокумент) = ТИПЗНАЧЕНИЯ(СоответствиеТипов.ТипДокумента)
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК АналитикаУчета
				|			ПО АналитикаУчета.Ссылка = ДанныеРегистра.АналитикаУчетаПоПартнерам
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК Договоры
				|			ПО АналитикаУчета.Договор = Договоры.Ссылка
				|ГДЕ
				|	ДанныеРегистра.ОбъектРасчетов В (ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
				|		И НЕ ДанныеРегистра.УдалитьОбъектРасчетов В (&ПустыеЗначенияОбъектаРасчетов)
				|		И ДанныеРегистра.Регистратор = &Регистратор
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	ВТРезервы.НомерСтроки КАК НомерСтроки,
				|	ЕСТЬNULL(ОбъектыРасчетов.Ссылка, ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)) КАК ОбъектРасчетов,
				|	ВТРезервы.Организация КАК Организация,
				|	ВТРезервы.Контрагент КАК Контрагент,
				|	ВТРезервы.Партнер КАК Партнер,
				|	ВТРезервы.Валюта КАК Валюта,
				|	ВТРезервы.УдалитьОбъектРасчетов КАК ИсточникОбъектаРасчетов
				|ИЗ
				|	ВТРезервы КАК ВТРезервы
				|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
				|		ПО ОбъектыРасчетов.Объект 					= ВТРезервы.УдалитьОбъектРасчетов
				|			И ОбъектыРасчетов.Организация 			= ВТРезервы.Организация
				|			И ОбъектыРасчетов.Партнер 				= ВТРезервы.Партнер
				|			И ОбъектыРасчетов.Контрагент 			= ВТРезервы.Контрагент
				|			И ОбъектыРасчетов.ВалютаВзаиморасчетов 	= ВТРезервы.Валюта
				|			И ОбъектыРасчетов.ТипРасчетов 			= ВТРезервы.ТипРасчетов
				|			И НЕ ОбъектыРасчетов.ТипРасчетов 		= ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.ПустаяСсылка)
				|ГДЕ
				|	ВТРезервы.ОбъектРасчетов В (ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка), НЕОПРЕДЕЛЕНО)";
			
			Запрос.УстановитьПараметр("ТипыРасчетныеДокументыСКлиентом", Метаданные.ОпределяемыеТипы.РасчетныйДокументСКлиентом.Тип.Типы());
			Запрос.УстановитьПараметр("ТипыРасчетныеДокументыСПоставщиком", Метаданные.ОпределяемыеТипы.РасчетныйДокументСПоставщиком.Тип.Типы());
			Запрос.УстановитьПараметр("ПустыеЗначенияОбъектаРасчетов", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
			Запрос.УстановитьПараметр("СоответствиеТипов", СоответствиеТиповДокументовТипамРасчетов);
			Запрос.УстановитьПараметр("Регистратор", Выборка.Регистратор);
			
			ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СтрокаНабора = НаборЗаписей[ВыборкаДетальныеЗаписи.НомерСтроки - 1];
				Если Не ЗначениеЗаполнено(СтрокаНабора.ОбъектРасчетов)
					И ЗначениеЗаполнено(СтрокаНабора.УдалитьОбъектРасчетов) Тогда
						Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ОбъектРасчетов) Тогда
							СтрокаНабора.ОбъектРасчетов = ВыборкаДетальныеЗаписи.ОбъектРасчетов;
						ИначеЕсли ТипЗнч(СтрокаНабора.УдалитьОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыКредитовИДепозитов")
								//++ НЕ УТ
								Или ТипЗнч(СтрокаНабора.УдалитьОбъектРасчетов) = Тип("СправочникСсылка.ДоговорыАренды")
								//-- НЕ УТ
									Тогда
									СтрокаНабора.ОбъектРасчетов = СтрокаНабора.УдалитьОбъектРасчетов;
						Иначе
							ДопКритерийПоиска = ОбъектыРасчетовСервер.ДополнительныеКритерииПоиска();
							ДопКритерийПоиска.Контрагент = ВыборкаДетальныеЗаписи.Контрагент;
							ДопКритерийПоиска.Партнер = ВыборкаДетальныеЗаписи.Партнер;
							ДопКритерийПоиска.ОбновлениеИБ = Истина;
							ДопКритерийПоиска.ВернутьПервый = Ложь;
							ДопКритерийПоиска.НеГенерироватьИсключение = Истина;
							
							ОбъектыРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(СтрокаНабора.УдалитьОбъектРасчетов,
								ВыборкаДетальныеЗаписи.Организация, , ДопКритерийПоиска);
								
							Если ЗначениеЗаполнено(ОбъектыРасчетов) Тогда
								СтрокаНабора.ОбъектРасчетов = ОбъектыРасчетов;
							ИначеЕсли Не ВсеОбъектыРасчетовСгенерированы Тогда
									ЕстьОшибкаЗапонения = Истина;
									Прервать;
							Иначе
								Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.НачислениеСписаниеРезервовПоСомнительнымДолгам") Тогда
									Если РегистраторОбъект = Неопределено Или РегистраторОбъект.Ссылка <> Выборка.Регистратор Тогда
										РегистраторОбъект = Выборка.Регистратор.ПолучитьОбъект();
									КонецЕсли;
									ОтборПоиска = Новый Структура("УдалитьОбъектРасчетов", СтрокаНабора.УдалитьОбъектРасчетов);
									ОтборПоискаПоИД = Новый Структура("ИдентификаторСтроки", СтрокаНабора.ИдентификаторСтроки);

									ДебиторскаяЗадолженностьСвернутая = РегистраторОбъект.ДебиторскаяЗадолженность.Выгрузить(,"УдалитьОбъектРасчетов,ОбъектРасчетов");
									ПогашеннаяЗадолженностьСвернутая = РегистраторОбъект.ПогашеннаяЗадолженность.Выгрузить(,"УдалитьОбъектРасчетов,ОбъектРасчетов");
									ДебиторскаяЗадолженностьСвернутая.Свернуть("УдалитьОбъектРасчетов,ОбъектРасчетов");
									ПогашеннаяЗадолженностьСвернутая.Свернуть("УдалитьОбъектРасчетов,ОбъектРасчетов");

									СтрокиПоДебеторскойЗадолженности = ДебиторскаяЗадолженностьСвернутая.НайтиСтроки(ОтборПоиска);
									СтрокиПоПогашеннойЗадолженности = ПогашеннаяЗадолженностьСвернутая.НайтиСтроки(ОтборПоиска);
									ПоискПоИДДебиторскаяЗадолженность = РегистраторОбъект.ДебиторскаяЗадолженность.НайтиСтроки(ОтборПоискаПоИД);
									ПоискПоИДПогашеннаяЗадолженность = РегистраторОбъект.ПогашеннаяЗадолженность.НайтиСтроки(ОтборПоискаПоИД);

									Если СтрокиПоДебеторскойЗадолженности.Количество() = 1 
										И (СтрокиПоПогашеннойЗадолженности.Количество() = 1
											И СтрокиПоДебеторскойЗадолженности.ОбъектРасчетов = СтрокиПоПогашеннойЗадолженности.ОбъектРасчетов
												ИЛИ НЕ СтрокиПоПогашеннойЗадолженности.Количество()) Тогда
											ОбъектРасчетов = СтрокиПоДебеторскойЗадолженности[0].ОбъектРасчетов;
									ИначеЕсли НЕ СтрокиПоДебеторскойЗадолженности.Количество()
											И СтрокиПоПогашеннойЗадолженности.Количество() = 1 Тогда
											ОбъектРасчетов = СтрокиПоПогашеннойЗадолженности[0].ОбъектРасчетов;
									ИначеЕсли ПоискПоИДДебиторскаяЗадолженность.Количество() = 1 
												И ЗначениеЗаполнено(ПоискПоИДДебиторскаяЗадолженность[0].ОбъектРасчетов) Тогда
												ОбъектРасчетов = ПоискПоИДДебиторскаяЗадолженность[0].ОбъектРасчетов;
									ИначеЕсли ПоискПоИДПогашеннаяЗадолженность.Количество() = 1 
												И ЗначениеЗаполнено(ПоискПоИДПогашеннаяЗадолженность[0].ОбъектРасчетов) Тогда
												ОбъектРасчетов = ПоискПоИДПогашеннаяЗадолженность[0].ОбъектРасчетов;
									КонецЕсли;
								КонецЕсли;

								Если Не ЗначениеЗаполнено(ОбъектРасчетов)
									И Не ОбновлениеИнформационнойБазы.ОбъектОбработан(Выборка.Регистратор).Обработан Тогда
										ЕстьОшибкаЗапонения = Истина;
										Прервать;
								КонецЕсли;

								Если ЗначениеЗаполнено(ОбъектРасчетов) Тогда
									СтрокаНабора.ОбъектРасчетов = ОбъектРасчетов;
								Иначе
									ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
											НСтр("ru = 'Не удалось заполнить объект расчетов типа %1 для записей регистратора: %2.';
												|en = 'Cannot fill in the AR/AP object of the %1 type for recorder records: %2.'"),
											"Справочник.ОбъектыРасчетов",
											Выборка.Регистратор);
									ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
										УровеньЖурналаРегистрации.Ошибка,
										МетаданныеРегистра,
										,
										ТекстСообщения);
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ЕстьОшибкаЗапонения Тогда
				ОтменитьТранзакцию();
				Продолжить;
			КонецЕсли;
			
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Шаблон = НСтр("ru = 'Не удалось записать данные в регистр %1 по регистратору ""%2"", по причине: %3';
							|en = 'Cannot save data to the register %1 for recorder ""%2"". Reason: %3'");
			ТекстСообщения = 
				СтрШаблон(Шаблон, 
					ПолноеИмяРегистра, 
					Выборка.Регистратор, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Ошибка,
				МетаданныеРегистра, 
				, 
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
		
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Функция СоответствиеТиповДокументовТипамРасчетов()
	
	СоответствиеТиповДокументаРасчетам = Новый Соответствие();
	СоответствиеТиповДокументаРасчетам.Вставить(Документы.ОтчетКомиссионера.ПустаяСсылка(), Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
	СоответствиеТиповДокументаРасчетам.Вставить(Документы.ОтчетКомитенту.ПустаяСсылка(), Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком);
	
	ТипыРасчетовДокументов = Новый ТаблицаЗначений();
	ТипыРасчетовДокументов.Колонки.Добавить("ТипДокумента", Документы.ТипВсеСсылки());
	ТипыРасчетовДокументов.Колонки.Добавить("ТипРасчетов", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыРасчетовСПартнерами"));
	
	Для Каждого ТипДокумента Из СоответствиеТиповДокументаРасчетам Цикл
		НоваяСтрока = ТипыРасчетовДокументов.Добавить();
		НоваяСтрока.ТипДокумента = ТипДокумента.Ключ;
		НоваяСтрока.ТипРасчетов = ТипДокумента.Значение;
	КонецЦикла;
	
	Возврат ТипыРасчетовДокументов;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли
