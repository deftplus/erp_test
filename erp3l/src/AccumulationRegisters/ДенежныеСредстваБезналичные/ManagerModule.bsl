#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Собирает структуру из текстов запросов для дальнейшей проверки даты запрета.
// 
// Параметры:
// 	Запрос - Запрос - Запрос по проверке даты запрета, можно установить параметры
// Возвращаемое значение:
// 	Структура - см. ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов
Функция ТекстЗапросаКонтрольДатыЗапрета(Запрос) Экспорт
	ИмяРегистра = Метаданные.РегистрыНакопления.ДенежныеСредстваБезналичные.Имя;
	ИмяТаблицыИзменений = "ТаблицаИзмененийДенежныеСредстваБезналичные"; 
	СтруктураТекстовЗапросов = ПроведениеДокументов.ШаблонТекстЗапросаКонтрольДатыЗапрета(Запрос, 
		ИмяРегистра, 
		ИмяТаблицыИзменений, 
		"ФинансовыйКонтур");
	Возврат СтруктураТекстовЗапросов

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

//++ НЕ УТКА

// Заполняет параметры отражения движений регистра в финансовом учете
//
// Возвращаемое значение:
// 	см. МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
//
Функция ПараметрыОтраженияДвиженийВФинансовомУчете() Экспорт
	
	ПараметрыОтражения = МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете();
	ПараметрыОтражения.ПутьКДаннымОбъектНастройки = "БанковскийСчет.ГруппаФинансовогоУчета";
	ПараметрыОтражения.ПутьКДаннымНаправлениеДеятельности = "БанковскийСчет.НаправлениеДеятельности";
	ПараметрыОтражения.ПутьКДаннымПодразделение = "БанковскийСчет.Подразделение";
	ПараметрыОтражения.ПутьКДаннымМестоУчета = "БанковскийСчет";
	ПараметрыОтражения.ПутьКДаннымВалюта = "БанковскийСчет.ВалютаДенежныхСредств";
	ПараметрыОтражения.РесурсыУпр.Добавить("СуммаУпр");
	ПараметрыОтражения.РесурсыРегл.Добавить("СуммаРегл");
	ПараметрыОтражения.РесурсыВал.Добавить("Сумма");
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров.ЗаполнитьПараметрыОтраженияПоМетаданнымРегистра(ПараметрыОтражения, МетаданныеРегистра);
	
	Возврат ПараметрыОтражения;
	
КонецФункции

//-- НЕ УТКА

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ДенежныеСредстваБезналичные.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.7.265";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("ea92d9f2-a91d-4854-9eef-d3c7dcca83bb");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ДенежныеСредстваБезналичные.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет реквизит Объект расчетов.';
									|en = 'Fills in AR/AP object attribute.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваБезналичные.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ОбъектыРасчетов.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ДенежныеСредстваБезналичные.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктВыполненныхРабот.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровМеждуОрганизациями.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровОтКлиента.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровПоставщику.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыкупВозвратнойТарыКлиентом.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыкупВозвратнойТарыУПоставщика.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыкупПринятыхНаХранениеТоваров.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыкупТоваровХранителем.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПоставщику.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОперацияПоПлатежнойКарте.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетКомиссионера.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетКомиссионераОСписании.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетКомитенту.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетКомитентуОСписании.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациями.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПоКомиссииМеждуОрганизациямиОСписании.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаТоваровМеждуОрганизациями.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПоступлениеБезналичныхДенежныхСредств.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеТоваровУслуг.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеУслугПрочихАктивов.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриходныйКассовыйОрдер.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РасходныйКассовыйОрдер.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияТоваровУслуг.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияУслугПрочихАктивов.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СписаниеБезналичныхДенежныхСредств.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СписаниеПринятыхНаХранениеТоваров.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ТаможеннаяДекларацияИмпорт.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыКонтрагентов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ДоговорыМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.Контрагенты.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";
	//++ НЕ УТ
	//++ Локализация
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыбытиеДенежныхДокументов.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетОператораСистемыПлатон.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПоступлениеДенежныхДокументов.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";
	//-- Локализация
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПереработчику.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетПереработчика.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";
	//-- НЕ УТ
	//++ НЕ УТКА
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказДавальца.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетДавальцу.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";
	//-- НЕ УТКА

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт
	
	ПолноеИмяРегистра = СоздатьНаборЗаписей().Метаданные().ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ОбъектРасчетов = ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		И НЕ ДанныеРегистра.УдалитьЗаказ В (&ПустыеЗначенияОбъектовРасчета)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные КАК ДанныеРегистра
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ДанныеРегистра.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитика
	|		ПО ДанныеРегистра.АналитикаУчетаПоПартнерам = Аналитика.Ссылка
	|ГДЕ
	|	ДанныеРегистра.ОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		И НЕ ДанныеРегистра.УдалитьЗаказ В (&ПустыеЗначенияОбъектовРасчета)
	|		И ОбъектыРасчетов.Договор <> Аналитика.Договор
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеРегистра.Регистратор
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные КАК ДанныеРегистра
	|	ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
	|		ПО ДанныеРегистра.ОбъектРасчетов = ОбъектыРасчетов.Ссылка
	|ГДЕ
	|	ДанныеРегистра.ОбъектРасчетов <> ЗНАЧЕНИЕ(Справочник.ОбъектыРасчетов.ПустаяСсылка)
	|		И НЕ ДанныеРегистра.УдалитьЗаказ В (&ПустыеЗначенияОбъектовРасчета)
	|		И ОбъектыРасчетов.Валюта <> ОбъектыРасчетов.ВалютаВзаиморасчетов";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектовРасчета", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Регистраторы,
		ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеРегистра.Регистратор КАК Регистратор,
	|	ДанныеРегистра.НомерСтроки,
	|	&ДополнительныеПоля КАК ДополнительныеПоля,
	|	ВЫБОР
	|		КОГДА ДанныеРегистра.ОбъектРасчетов <> &ОбъектРасчетовПустаяСсылка
	|			ТОГДА ДанныеРегистра.ОбъектРасчетов
	|		ИНАЧЕ ЕСТЬNULL(ОбъектыРасчетовКлиент.Ссылка, ЕСТЬNULL(ОбъектыРасчетовПоставщик.Ссылка, 
	|				ЕСТЬNULL(ОбъектыРасчетовКлиентНеТолькоОстатки.Ссылка, ЕСТЬNULL(ОбъектыРасчетовПоставщикНеТолькоОстатки.Ссылка,
	|					&ОбъектРасчетовПустаяСсылка))))
	|	КОНЕЦ КАК ОбъектРасчетов
	|ИЗ
	|	РегистрНакопления.ДенежныеСредстваБезналичные КАК ДанныеРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлючиАналитикиУчетаПоПартнерам КАК Аналитика
	|			ПО ДанныеРегистра.АналитикаУчетаПоПартнерам 				= Аналитика.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Организации КАК АналитикаОрганизация
	|			ПО Аналитика.Организация 									= АналитикаОрганизация.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетовКлиент
	|		ПО ДанныеРегистра.УдалитьЗаказ 									= ОбъектыРасчетовКлиент.Объект
	|			И ОбъектыРасчетовКлиент.ТипРасчетов 						= ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|			И ОбъектыРасчетовКлиент.Организация.ГоловнаяОрганизация 	= АналитикаОрганизация.ГоловнаяОрганизация
	|			И ОбъектыРасчетовКлиент.Партнер 							= Аналитика.Партнер
	|			И ОбъектыРасчетовКлиент.Контрагент 							= Аналитика.Контрагент
	|			И ОбъектыРасчетовКлиент.Договор 							= Аналитика.Договор
	|			И ОбъектыРасчетовКлиент.Валюта 								= ОбъектыРасчетовКлиент.ВалютаВзаиморасчетов
	|			И НЕ ДанныеРегистра.УдалитьЗаказ В (&ПустыеЗначенияОбъектовРасчетов)
	|			И ДанныеРегистра.УдалитьЗаказ ССЫЛКА Документ.ЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетовПоставщик
	|		ПО ДанныеРегистра.УдалитьЗаказ 									= ОбъектыРасчетовПоставщик.Объект
	|			И ОбъектыРасчетовПоставщик.ТипРасчетов 						= ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|			И ОбъектыРасчетовПоставщик.Организация.ГоловнаяОрганизация 	= АналитикаОрганизация.ГоловнаяОрганизация
	|			И ОбъектыРасчетовПоставщик.Партнер 							= Аналитика.Партнер
	|			И ОбъектыРасчетовПоставщик.Контрагент 						= Аналитика.Контрагент
	|			И ОбъектыРасчетовПоставщик.Договор 							= Аналитика.Договор
	|			И ОбъектыРасчетовПоставщик.Валюта 							= ОбъектыРасчетовПоставщик.ВалютаВзаиморасчетов
	|			И НЕ ДанныеРегистра.УдалитьЗаказ В (&ПустыеЗначенияОбъектовРасчетов)
	|			И ДанныеРегистра.УдалитьЗаказ ССЫЛКА Документ.ЗаказПоставщику
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетовКлиентНеТолькоОстатки
	|		ПО ДанныеРегистра.УдалитьЗаказ 									= ОбъектыРасчетовКлиентНеТолькоОстатки.Объект
	|			И ОбъектыРасчетовКлиентНеТолькоОстатки.ТипРасчетов 			= ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСКлиентом)
	|			И ОбъектыРасчетовКлиентНеТолькоОстатки.Организация.ГоловнаяОрганизация = АналитикаОрганизация.ГоловнаяОрганизация
	|			И ОбъектыРасчетовКлиентНеТолькоОстатки.Партнер 				= Аналитика.Партнер
	|			И ОбъектыРасчетовКлиентНеТолькоОстатки.Контрагент 			= Аналитика.Контрагент
	|			И НЕ ОбъектыРасчетовКлиентНеТолькоОстатки.ТолькоОстатки
	|			И НЕ ДанныеРегистра.УдалитьЗаказ В (&ПустыеЗначенияОбъектовРасчетов)
	|			И ДанныеРегистра.УдалитьЗаказ ССЫЛКА Документ.ЗаказКлиента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОбъектыРасчетов КАК ОбъектыРасчетовПоставщикНеТолькоОстатки
	|		ПО ДанныеРегистра.УдалитьЗаказ 									= ОбъектыРасчетовПоставщикНеТолькоОстатки.Объект
	|			И ОбъектыРасчетовПоставщикНеТолькоОстатки.ТипРасчетов 		= ЗНАЧЕНИЕ(Перечисление.ТипыРасчетовСПартнерами.РасчетыСПоставщиком)
	|			И ОбъектыРасчетовПоставщикНеТолькоОстатки.Организация.ГоловнаяОрганизация = АналитикаОрганизация.ГоловнаяОрганизация
	|			И ОбъектыРасчетовПоставщикНеТолькоОстатки.Партнер 			= Аналитика.Партнер
	|			И ОбъектыРасчетовПоставщикНеТолькоОстатки.Контрагент 		= Аналитика.Контрагент
	|			И НЕ ОбъектыРасчетовПоставщикНеТолькоОстатки.ТолькоОстатки
	|			И НЕ ДанныеРегистра.УдалитьЗаказ В (&ПустыеЗначенияОбъектовРасчетов)
	|			И ДанныеРегистра.УдалитьЗаказ ССЫЛКА Документ.ЗаказПоставщику
	|ГДЕ
	|	ДанныеРегистра.Регистратор В (&Регистраторы)
	|ИТОГИ ПО
	|	Регистратор";
	
	Запрос.УстановитьПараметр("ПустыеЗначенияОбъектовРасчетов", ОбъектыРасчетовСервер.ПустыеЗначенияОбъектРасчетов());
	Запрос.УстановитьПараметр("ОбъектРасчетовПустаяСсылка", Справочники.ОбъектыРасчетов.ПустаяСсылка());
	ОбъектыРасчетовСервер.ДополнитьЗапросПрочимиПолями(Запрос, МетаданныеРегистра);
	
	ПорцииДляОбработки = ОбъектыРасчетовСервер.ПорцииДанныхДляОбработки(ОбновляемыеДанные);
	
	ВсеОбъектыРасчетовСгенерированы = ОбъектыРасчетовСервер.ВсеОбъектыРасчетовСгенерированы(Параметры.Очередь);
	
	Для Каждого ПорцияДанных Из ПорцииДляОбработки Цикл
	
		НачатьТранзакцию();
		
		Попытка
		
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ПорцияДанных;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Регистратор", "Регистратор");
			Блокировка.Заблокировать();
			
			Запрос.УстановитьПараметр("Регистраторы", ПорцияДанных.ВыгрузитьКолонку("Регистратор"));
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаРегистратор = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			
			Если Не ВсеОбъектыРасчетовСгенерированы Тогда
				ВсеОбъектыРасчетовСгенерированы = ОбъектыРасчетовСервер.ВсеОбъектыРасчетовСгенерированы(Параметры.Очередь);
			КонецЕсли;
			
			Пока ВыборкаРегистратор.Следующий() Цикл
				Регистратор = ВыборкаРегистратор.Регистратор;
				РегистраторОбъект = Неопределено;

				ВыборкаДетальныеЗаписи = ВыборкаРегистратор.Выбрать();
				НаборЗаписей = СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
				НаборЗаписей.Прочитать();
				ЕстьОшибкаЗапонения = Ложь;
				
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					СтрокаНабора = НаборЗаписей[ВыборкаДетальныеЗаписи.НомерСтроки - 1];
                    Если Не ЗначениеЗаполнено(СтрокаНабора.ОбъектРасчетов) Тогда 
						СтрокаНабора.ОбъектРасчетов = ВыборкаДетальныеЗаписи.ОбъектРасчетов; 
						Если ВыборкаДетальныеЗаписи.ОбъектРасчетов = Справочники.ОбъектыРасчетов.ПустаяСсылка()
							И ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.УдалитьЗаказ) Тогда
							Если Не ВсеОбъектыРасчетовСгенерированы Тогда
								ЕстьОшибкаЗапонения = Истина;
								Прервать;
							Иначе
								Если ОбъектыРасчетовСервер.ЕстьБитыеСсылкиВИсточникеОбъектаРасчетов(ВыборкаДетальныеЗаписи.УдалитьЗаказ) Тогда
									ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Не удалось заполнить объект расчетов наборе записей регистра накопления %1, по регистратору %2
										|в источнике данных объекта расчетов обнаружена ссылка на несуществующий элемент.';
										|en = 'Failed to fill in the AR/AP object in the %1 accumulation register record set, by the %2 recorder
										|the link to a non-existent item is found in the AR/AP object data source.'"),
										ПолноеИмяРегистра,
										Регистратор);
									ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
										УровеньЖурналаРегистрации.Ошибка,
										МетаданныеРегистра,
										,
										ТекстСообщения);
								Иначе
									Отбор = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтрокаНабора.АналитикаУчетаПоПартнерам, 
													"Партнер, Контрагент");
									
									ДопКритерииПоиска 							= ОбъектыРасчетовСервер.ДополнительныеКритерииПоиска();
									ДопКритерииПоиска.Партнер 					= Отбор.Партнер;
									ДопКритерииПоиска.Контрагент 				= Отбор.Контрагент;
									ДопКритерииПоиска.НеГенерироватьИсключение 	= Истина;
									
									ТипРасчетов = ?(ТипЗнч(СтрокаНабора.УдалитьЗаказ) = Тип("ДокументСсылка.ЗаказПоставщику"),
														Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком,
														Перечисления.ТипыРасчетовСПартнерами.РасчетыСКлиентом);
									ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(
														СтрокаНабора.УдалитьЗаказ,
														СтрокаНабора.Организация,
														ТипРасчетов,
														ДопКритерииПоиска);
														
									Если ЗначениеЗаполнено(ОбъектРасчетов) Тогда
										СтрокаНабора.ОбъектРасчетов = ОбъектРасчетов;
									Иначе
										Если Не ЗначениеЗаполнено(РегистраторОбъект) Тогда
											МенеджерРегистратора = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Регистратор);
											ПолноеИмяОбъектаРегистратор = МенеджерРегистратора.ПустаяСсылка().Метаданные().ПолноеИмя();
											БлокировкаРегистратор = Новый БлокировкаДанных;
											ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяОбъектаРегистратор);
											ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);
											ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
											БлокировкаРегистратор.Заблокировать();
											РегистраторОбъект = Регистратор.ПолучитьОбъект();
										КонецЕсли;
										
										Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.РасходныйКассовыйОрдер")
											Или ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") 
											Или ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПоступлениеБезналичныхДенежныхСредств") 
											Или ТипЗнч(Регистратор) = Тип("ДокументСсылка.СписаниеБезналичныхДенежныхСредств") Тогда
											
											ВалютаВзаиморасчетов = Неопределено;
											ОтборПоОР = Новый Структура("УдалитьЗаказ", СтрокаНабора.УдалитьЗаказ);
											НайденныеСтроки = РегистраторОбъект.РасшифровкаПлатежа.НайтиСтроки(ОтборПоОР);
											Если НайденныеСтроки.Количество() = 1 Тогда
												ВалютаВзаиморасчетов = НайденныеСтроки[0].ВалютаВзаиморасчетов;
											КонецЕсли;
											Если ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
												ДопКритерииПоиска.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
											КонецЕсли;
											
											ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(
													СтрокаНабора.УдалитьЗаказ,
													СтрокаНабора.Организация,
													ТипРасчетов,
													ДопКритерииПоиска);
													
											Если ЗначениеЗаполнено(ОбъектРасчетов) Тогда
												СтрокаНабора.ОбъектРасчетов = ОбъектРасчетов;
											Иначе
												ДопКритерииПоиска.Партнер 					= Неопределено;
												ДопКритерииПоиска.Контрагент 				= Неопределено;
												
												ОбъектРасчетов = ОбъектыРасчетовСервер.ПолучитьОбъектРасчетовПоСсылке(
													СтрокаНабора.УдалитьЗаказ,
													СтрокаНабора.Организация,
													ТипРасчетов,
													ДопКритерииПоиска);
													
												Если ЗначениеЗаполнено(ОбъектРасчетов) Тогда
													СтрокаНабора.ОбъектРасчетов = ОбъектРасчетов;
												Иначе
													ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
														НСтр("ru = 'Не удалось заполнить объект расчетов в регистре накопления: %1, регистратор %2, по источнику данных %3';
															|en = 'Cannot fill in the AR/AP object in accumulation register: %1, the %2 recorder, by the %3 data source'"),
														ПолноеИмяРегистра,
														Регистратор,
														ВыборкаДетальныеЗаписи.УдалитьЗаказ));
													КонецЕсли;
												КонецЕсли;
										Иначе
											ВызватьИсключение (СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												НСтр("ru = 'Не удалось заполнить объект расчетов в регистре накопления: %1, регистратор %2, по источнику данных %3';
													|en = 'Cannot fill in the AR/AP object in accumulation register: %1, the %2 recorder, by the %3 data source'"),
												ПолноеИмяРегистра,
												Регистратор,
												ВыборкаДетальныеЗаписи.УдалитьЗаказ));
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
				Если ЕстьОшибкаЗапонения Тогда
					Продолжить;
				КонецЕсли;
				
				Если НаборЗаписей.Модифицированность() Тогда
					ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
				Иначе
					ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
				КонецЕсли;
			
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
		
			ОтменитьТранзакцию();
			
			Шаблон = НСтр("ru = 'Не удалось записать данные в регистр %1 , по причине: %2';
							|en = 'Cannot save data to the register %1. Reason: %2'");
			ТекстСообщения = СтрШаблон(Шаблон,
				ПолноеИмяРегистра,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеРегистра,
				,
				ТекстСообщения);
		
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
