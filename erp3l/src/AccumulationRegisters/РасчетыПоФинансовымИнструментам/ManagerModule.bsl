#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область Проведение

// Формирует параметры для проведения документа по регистрам учетного механизма через общий механизм проведения.
//
// Параметры:
//  Документ - ДокументОбъект - записываемый документ
//  Свойства - См. ПроведениеДокументов.СвойстваДокумента
//
// Возвращаемое значение:
//  Структура - См. ПроведениеДокументов.ПараметрыУчетногоМеханизма
//
Функция ПараметрыДляПроведенияДокумента(Документ, Свойства) Экспорт
	
	Параметры = ПроведениеДокументов.ПараметрыУчетногоМеханизма();
	
	// Проведение
	Если Свойства.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		Параметры.ПодчиненныеРегистры.Добавить(Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам);
	КонецЕсли;
	
	// Контроль
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		Параметры.КонтрольныеРегистрыЗаданий.Добавить(Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам);
		Параметры.КонтрольныеРегистрыДатаЗапрета.Добавить(Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам);
		Параметры.КонтрольныеРегистрыИзменений.Добавить(Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам);
	КонецЕсли;
	
	// Контроль даты запрета
	Если Свойства.РежимЗаписи <> РежимЗаписиДокумента.Запись Тогда
		Параметры.КонтрольныеРегистрыДатаЗапрета.Добавить(Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам);
	КонецЕсли;
	
	Возврат Параметры;
	
КонецФункции

// Возвращает тексты запросов для сторнирования движений при исправлении документов
// 
// Параметры:
// 	МетаданныеДокумента - ОбъектМетаданныхДокумент - Метаданные документа, который проводится.
// 
// Возвращаемое значение:
// 	Соответствие - Соответствие полного имени регистра тексту запроса сторнирования
//
Функция ТекстыЗапросовСторнирования(МетаданныеДокумента) Экспорт
	
	ДвиженияДокумента = МетаданныеДокумента.Движения;

	ТекстыЗапросов = Новый Соответствие();
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам;
	Если ДвиженияДокумента.Содержит(МетаданныеРегистра) Тогда
		ТекстыЗапросов.Вставить(МетаданныеРегистра.ПолноеИмя(),
			ПроведениеДокументов.ТекстСторнирующегоЗапроса(
				МетаданныеРегистра, МетаданныеДокумента));
	КонецЕсли;
			
	Возврат ТекстыЗапросов;
	
КонецФункции

// Процедура формирования движений по регистру.
//
// Параметры:
//	ТаблицыДляДвижений - Структура - таблицы данных документа
//	Движения - КоллекцияДвижений - коллекция наборов записей движений документа
//	Отказ - Булево - признак отказа от проведения документа.
//
Процедура ОтразитьДвижения(ТаблицыДляДвижений, Движения, Отказ) Экспорт
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроведениеДокументов.ОтразитьДвижения(ТаблицыДляДвижений, Движения, "РасчетыПоФинансовымИнструментам");
	
КонецПроцедуры

// Дополняет текст запроса механизма проверки даты запрета по таблице изменений.
// 
// Параметры:
// 	Запрос - Запрос - используется для установки параметров запроса.
// 
// Возвращаемое значение:
//	Соответствие - соответствие имен таблиц изменения регистров и текстов запросов.
//	
Функция ТекстыЗапросовКонтрольДатыЗапретаПоТаблицеИзменений(Запрос) Экспорт

	СоответствиеТекстовЗапросов = Новый Соответствие();
	СоответствиеТекстовЗапросов.Вставить("ТаблицаИзмененийРасчетыПоФинансовымИнструментам", 
		РегистрыНакопления.РасчетыПоФинансовымИнструментам.ТекстЗапросаКонтрольДатыЗапрета(Запрос));
	Возврат СоответствиеТекстовЗапросов;
	
КонецФункции

// Собирает структуру из текстов запросов для дальнейшей проверки даты запрета.
// 
// Параметры:
// 	Запрос - Запрос - Запрос по проверке даты запрета, можно установить параметры
// Возвращаемое значение:
// 	Структура - см. ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов
Функция ТекстЗапросаКонтрольДатыЗапрета(Запрос) Экспорт
	ИмяРегистра = Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам.Имя;
	ИмяТаблицыИзменений = "ТаблицаИзмененийРасчетыПоФинансовымИнструментам"; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Период КАК Период,
	|	КлючиАналитикаУчетаПоПартнерам.Организация КАК Организация,
	|	&ИмяРегистра КАК ИмяРегистра,
	|	&Раздел КАК РазделДатыЗапрета
	|ИЗ
	|	&ИмяТаблицыИзменений КАК Таблица
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
	|		РегистрСведений.АналитикаУчетаПоПартнерам КАК КлючиАналитикаУчетаПоПартнерам
	|	ПО
	|		Таблица.АналитикаУчетаПоПартнерам = КлючиАналитикаУчетаПоПартнерам.КлючАналитики
	|";
	
	ИмяПараметраИмяРегистра = "ИмяРегистра" + ИмяРегистра;
	ИмяПараметраРаздел = "Раздел" + ИмяРегистра;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИмяРегистра", "&" + ИмяПараметраИмяРегистра);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&Раздел", "&" + ИмяПараметраРаздел);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"&ИмяТаблицыИзменений", ИмяТаблицыИзменений);
	
	Запрос.УстановитьПараметр(ИмяПараметраИмяРегистра, ИмяРегистра);
	Запрос.УстановитьПараметр(ИмяПараметраРаздел, "ФинансовыйКонтур");
	
	СтруктураТекстовЗапросов = ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов(ТекстЗапроса);
	
	Возврат СтруктураТекстовЗапросов

КонецФункции

// Формирует тексты запросов для контроля изменений записанных движений регистров.
//
// Параметры:
//  Запрос - Запрос - запрос, хранящий параметры используемые в списке запросов
//  ТекстыЗапроса - СписокЗначений - список текстов запросов и их имен.
//  Документ - ДокументОбъект - записываемый документ.
//
Процедура ИнициализироватьДанныеКонтроляИзменений(Запрос, ТекстыЗапроса, Документ) Экспорт
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыПоФинансовымИнструментамИзменение") Тогда
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|	ТаблицаОстатков.АналитикаУчетаПоПартнерам         КАК АналитикаУчетаПоПартнерам,
		|	ТаблицаОстатков.Договор                           КАК Договор,
		|	ТаблицаОстатков.ТипСуммы                          КАК ТипСуммы,
		|	ТаблицаОстатков.РасчетныйДокумент                 КАК РасчетныйДокумент,
		|	ТаблицаОстатков.Валюта                            КАК Валюта,
		|	ТаблицаОстатков.ОплачиваетсяОстаток               КАК Сумма
		|
		|ИЗ
		|	РегистрНакопления.РасчетыПоФинансовымИнструментам.Остатки(,
		|		(АналитикаУчетаПоПартнерам, Договор, ТипСуммы, РасчетныйДокумент, Валюта) В
		|		(ВЫБРАТЬ
		|			Таблица.АналитикаУчетаПоПартнерам,
		|			Таблица.Договор,
		|			Таблица.ТипСуммы,
		|			Таблица.РасчетныйДокумент,
		|			Таблица.Валюта
		|		ИЗ
		|			ДвиженияРасчетыПоФинансовымИнструментамИзменение КАК Таблица
		|		)
		|		) КАК ТаблицаОстатков
		|
		|ГДЕ
		|	ТаблицаОстатков.ОплачиваетсяОстаток > 0
		|";
		
		ТекстыЗапроса.Добавить(ТекстЗапроса, "ОшибкиРасчетыПоФинансовымИнструментам");
		
	КонецЕсли;
	
КонецПроцедуры

// Выводит сообщения пользователю при наличии ошибок контроля изменений записанных движений регистров.
//
// Параметры:
//  РезультатыКонтроля - Структура - таблицы с результатами контроля изменений
//  Документ - ДокументОбъект - записываемый документ
//  Отказ - Булево - признак отказа от проведения документа.
//
Процедура СообщитьОРезультатахКонтроляИзменений(РезультатыКонтроля, Документ, Отказ) Экспорт
	
	Если ПроведениеДокументов.ЕстьЗаписиВТаблице(Документ, "ДвиженияРасчетыПоФинансовымИнструментамИзменение") Тогда
		
		Для каждого СтрокаОшибки Из РезультатыКонтроля.ОшибкиРасчетыПоФинансовымИнструментам Цикл
			ТекстСообщения = СтрШаблон(НСтр("ru = 'По договору %1 оплачивается больше, чем утверждено в заявке, на %2 %3';
											|en = 'Under contract %1 payment is greater than confirmed in the request by %2 %3'"),
				СтрокаОшибки.Договор, СтрокаОшибки.Сумма, СтрокаОшибки.Валюта);
			ОбщегоНазначения.СообщитьПользователю(ТекстСообщения, Документ,,, Отказ);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"ПрисоединитьДополнительныеТаблицы
	|ЭтотСписок КАК Т
	|ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АналитикаУчетаПоПартнерам КАК Т1 
	|	ПО Т.АналитикаУчетаПоПартнерам = Т1.КлючАналитики
	|;
	|РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Т1.Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

//++ НЕ УТКА

// Заполняет параметры отражения движений регистра в финансовом учете
//
// Возвращаемое значение:
// 	см. МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
//
Функция ПараметрыОтраженияДвиженийВФинансовомУчете() Экспорт
	
	ПараметрыОтражения = МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете();
	ПараметрыОтражения.ПутьКДаннымОбъектНастройки = "Договор.ГруппаФинансовогоУчета";
	ПараметрыОтражения.ПутьКДаннымОрганизация = "АналитикаУчетаПоПартнерам.Организация";
	ПараметрыОтражения.ПутьКДаннымНаправлениеДеятельности = "АналитикаУчетаПоПартнерам.НаправлениеДеятельности";
	ПараметрыОтражения.ПутьКДаннымВалюта = "Валюта";
	ПараметрыОтражения.РесурсыУпр.Добавить("СуммаУпр");
	ПараметрыОтражения.РесурсыРегл.Добавить("СуммаРегл");
	ПараметрыОтражения.РесурсыВал.Добавить("Сумма");
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров.ЗаполнитьПараметрыОтраженияПоМетаданнымРегистра(ПараметрыОтражения, МетаданныеРегистра);
	
	Возврат ПараметрыОтражения;
	
КонецФункции

//-- НЕ УТКА

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

//++ НЕ УТ

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.РасчетыПоФинансовымИнструментам.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.7.267";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Многопоточный = Истина;
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("4df05b3f-a9da-45d8-af29-c22f052d162e");
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.РасчетыПоФинансовымИнструментам.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет движения документов по регистру накопления ""Расчеты по финансовым инструментам"":
	|- Добавляет движения, связанные с НДС при аренде.';
	|en = 'Updates the document register records by the ""Financial instruments AR/AP accounting"" accumulation register:
	|- Adds register records related to VAT on lease.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ЗаключениеДоговораАренды.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПоступлениеУслугПоАренде.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РасчетыПоФинансовымИнструментам.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаключениеДоговораАренды.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПоступлениеУслугПоАренде.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра  = "РегистрНакопления.РасчетыПоФинансовымИнструментам";
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	//++ Локализация
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СписокОрганизаций.Организация КАК Организация
	|ПОМЕСТИТЬ ИсключитьОрганизации
	|ИЗ
	|	(ВЫБРАТЬ
	|		УчетнаяПолитика.Организация КАК Организация
	|	ИЗ
	|		РегистрСведений.УчетнаяПолитикаФинансовогоУчета КАК УчетнаяПолитика
	|	ГДЕ
	|		УчетнаяПолитика.УчетАрендыПоФСБУ25_2018
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		УчетнаяПолитика.Организация КАК Организация
	|	ИЗ
	|		РегистрСведений.НастройкиСистемыНалогообложения КАК УчетнаяПолитика
	|	ГДЕ
	|		УчетнаяПолитика.ПрименяетсяУСН	
	|
	|	) КАК СписокОрганизаций
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиРегистра.Регистратор КАК Регистратор
	|
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаписиРегистра.Регистратор КАК Регистратор,
	|		ЗаписиРегистра.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|	ИЗ
	|		РегистрНакопления.РасчетыПоФинансовымИнструментам КАК ЗаписиРегистра
	|			
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаключениеДоговораАренды КАК ДанныеДокумента
	|			ПО ДанныеДокумента.Ссылка = ЗаписиРегистра.Регистратор
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаключениеДоговораАренды.ОС КАК ТаблицаОС
	|			ПО ТаблицаОС.Ссылка = ДанныеДокумента.Ссылка
	|			
	|	ГДЕ
	|		ЗаписиРегистра.Регистратор ССЫЛКА Документ.ЗаключениеДоговораАренды
	|
	|		И ТаблицаОС.УдалитьСуммаНДСВзаиморасчетов <> 0
	|		И ДанныеДокумента.Договор.Балансодержатель <> ЗНАЧЕНИЕ(Перечисление.БалансодержательПредметовАренды.Арендодатель)
	|
	|	ОБЪЕДИНИТЬ ВСЕ
	|
	|	ВЫБРАТЬ
	|		ЗаписиРегистра.Регистратор КАК Регистратор,
	|		ЗаписиРегистра.АналитикаУчетаПоПартнерам.Организация.ГоловнаяОрганизация КАК ГоловнаяОрганизация
	|	ИЗ
	|		РегистрНакопления.РасчетыПоФинансовымИнструментам КАК ЗаписиРегистра
	|			
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеУслугПоАренде КАК ДанныеДокумента
	|			ПО ДанныеДокумента.Ссылка = ЗаписиРегистра.Регистратор
	|
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПоступлениеУслугПоАренде.Начисления КАК ТаблицаНачисления
	|			ПО ТаблицаНачисления.Ссылка = ДанныеДокумента.Ссылка
	|			
	|	ГДЕ
	|		ЗаписиРегистра.Регистратор ССЫЛКА Документ.ПоступлениеУслугПоАренде
	|
	|		И ТаблицаНачисления.СуммаНДС <> 0
	|		И ДанныеДокумента.Договор.Балансодержатель <> ЗНАЧЕНИЕ(Перечисление.БалансодержательПредметовАренды.Арендодатель)
	|
	|	) КАК ЗаписиРегистра
	|
	|	ГДЕ
	|		НЕ ИСТИНА В (
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				ИсключитьОрганизации КАК ИсключитьОрганизации
	|			ГДЕ
	|				ИсключитьОрганизации.Организация = ЗаписиРегистра.ГоловнаяОрганизация)
	|
	|		И НЕ ИСТИНА В (
	|			ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрНакопления.РасчетыПоФинансовымИнструментам КАК ЗаписиРегистраДляПроверки
	|			ГДЕ
	|				ЗаписиРегистраДляПроверки.Регистратор = ЗаписиРегистра.Регистратор
	|				И ЗаписиРегистраДляПроверки.ТипСуммы = ЗНАЧЕНИЕ(Перечисление.ТипыПлатежейПоАренде.НДС))
	|
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
	//-- Локализация
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра  = "РегистрНакопления.РасчетыПоФинансовымИнструментам";

	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	ЧитаемыеДанные = Новый Массив;
	ЧитаемыеДанные.Добавить("Документ.ЗаключениеДоговораАренды");
	ЧитаемыеДанные.Добавить("Документ.ПоступлениеУслугПоАренде");
	ДополнительныеПараметрыПроцедуры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметрыПроцедуры.ИмяВременнойТаблицы = "ВТЗаблокированныеДанные";
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияСсылок(
			Параметры.Очередь, 
			ЧитаемыеДанные, 
			МенеджерВременныхТаблиц, 
			ДополнительныеПараметрыПроцедуры);

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДанных.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТДляОбработки
	|ИЗ
	|	&ТаблицаОбновляемыхДанных КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТДляОбработки.Регистратор КАК Регистратор
	|ИЗ
	|	ВТДляОбработки КАК ВТДляОбработки
	|ГДЕ
	|	НЕ ВТДляОбработки.Регистратор В
	|				(ВЫБРАТЬ
	|					ВТЗаблокированныеДанные.Ссылка
	|				ИЗ
	|					ВТЗаблокированныеДанные КАК ВТЗаблокированныеДанные)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаОбновляемыхДанных", ОбновляемыеДанные);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
 	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.РасчетыПоФинансовымИнструментам.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыНакопления.РасчетыПоФинансовымИнструментам.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			
			ТаблицаДвижений = ТаблицаДвиженийДокумента(Выборка.Регистратор);
			Если ТаблицаДвижений <> Неопределено Тогда
				ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ТаблицаДвижений, НаборЗаписей);
			КонецЕсли;
			
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Регистратор);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

Функция ТаблицаДвиженийДокумента(Регистратор)
	
	Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ЗаключениеДоговораАренды") Тогда
		ИмяДокумента = "Документ.ЗаключениеДоговораАренды";
	ИначеЕсли ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПоступлениеУслугПоАренде") Тогда
		ИмяДокумента = "Документ.ПоступлениеУслугПоАренде";
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	
	ЭлементБлокировки = Блокировка.Добавить(ИмяДокумента);
	ЭлементБлокировки.УстановитьЗначение("Ссылка", Регистратор);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Блокировка.Заблокировать();
	
	ТаблицаДвижений = Неопределено;

	Если ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Регистратор, "Проведен") = Истина Тогда
		МенеджерДокумента = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Регистратор);
		ТаблицыДляДвижений = МенеджерДокумента.ДанныеДокументаДляПроведения(Регистратор, "РасчетыПоФинансовымИнструментам");
		Если ТаблицыДляДвижений.Свойство("ТаблицаРасчетыПоФинансовымИнструментам") Тогда
			ТаблицаДвижений = ТаблицыДляДвижений.ТаблицаРасчетыПоФинансовымИнструментам; // ТаблицаЗначений
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаДвижений = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Для Индекс = -ТаблицаДвижений.Количество() По -1 Цикл
		Запись = ТаблицаДвижений[-Индекс-1];
		Если Запись.ТипСуммы <> Перечисления.ТипыПлатежейПоАренде.НДС Тогда
			ТаблицаДвижений.Удалить(Запись);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаДвижений;
	
КонецФункции

//-- НЕ УТ

#КонецОбласти

#КонецОбласти

#КонецЕсли
