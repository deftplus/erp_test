#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ОписаниеПеременных

Перем мПериод          Экспорт; // Период движений
Перем мТаблицаДвижений Экспорт; // Таблица движений

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПриЗаписи(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ОперативноеПланированиеПовтИспУХ.АктуализироватьПоказателиБюджетированияРезервФакт()
		ИЛИ ЭтотОбъект.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//
	Предназначение = ЭтотОбъект[0].Предназначение;
	ПараметрыОперПланирования = ОперативноеПланированиеПовтИспУХ.ПолучитьПараметрыОперПланирования(Предназначение);
	
	//
	Колонки = "Период,ЦФО,Проект,ПриходРасход,Валюта,СтатьяБюджета,Аналитика1,Аналитика2,Аналитика3,Аналитика4,Аналитика5,Аналитика6,Сумма,СуммаУпр";
	ТаблицаПоказателей=ЭтотОбъект.ВыгрузитьКолонки(Колонки);
	ТаблицаПоказателей.Колонки.Добавить("Сценарий", Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	ТаблицаПоказателей.Колонки.Добавить("ПериодОтчета", Новый ОписаниеТипов("СправочникСсылка.Периоды"));
	
	Для Каждого Строка Из ЭтотОбъект Цикл
		ЗаполнитьЗначенияСвойств(ТаблицаПоказателей.Добавить(),Строка);
	КонецЦикла;
	
	Если ТаблицаПоказателей.Количество()>0 Тогда
		
		//
		ТаблицаПоказателей.ЗаполнитьЗначения(Справочники.Сценарии.Факт, "Сценарий");
		ТаблицаПоказателей.Колонки.ЦФО.Имя = "Организация";
		ТаблицаПоказателей.Колонки.СтатьяБюджета.Имя = ВстраиваниеОПКПереопределяемый.ПолучитьИмяРеквизитаСтатьяБюджета(Предназначение);
		
		// Заполнить ПериодОтчета в таблице по периодичности опер.планирования
		ЗаполнитьПериодОтчетаВТаблице(ТаблицаПоказателей, ПараметрыОперПланирования.ПериодичностьОперативногоПланирования);
		ВстраиваниеОПКПереопределяемый.ОбновитьПоказателиОтчетовПоОперативнымДанным(Предназначение, ТаблицаПоказателей);
		
	КонецЕсли;
			
КонецПроцедуры

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

// Выполняет приход по регистру.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьПриход() Экспорт

	ВстраиваниеОПКПереопределяемый.ВыполнитьДвижениеПоРегистру(ЭтотОбъект, ВидДвиженияНакопления.Приход);

КонецПроцедуры // ВыполнитьПриход()

// Выполняет расход по регистру.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьРасход() Экспорт

	ВстраиваниеОПКПереопределяемый.ВыполнитьДвижениеПоРегистру(ЭтотОбъект, ВидДвиженияНакопления.Расход);

КонецПроцедуры // ВыполнитьРасход()

// Выполняет движения по регистру.
//
// Параметры:
//  Нет.
//
Процедура ВыполнитьДвижения() Экспорт

	Загрузить(мТаблицаДвижений);

КонецПроцедуры // ВыполнитьДвижения()

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьПериодОтчетаВТаблице(ТаблицаПоказателей, Периодичность)

	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТабДат.Период КАК Период
	|ПОМЕСТИТЬ ВТ_ТаблицаДат
	|ИЗ
	|	&ТаблицаДат КАК ТабДат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НАЧАЛОПЕРИОДА(ВТ_ТаблицаДат.Период, ДЕНЬ) КАК Период,
	|	МАКСИМУМ(Периоды.Ссылка) КАК ПериодОтчета
	|ИЗ
	|	ВТ_ТаблицаДат КАК ВТ_ТаблицаДат
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Периоды КАК Периоды
	|		ПО ВТ_ТаблицаДат.Период >= Периоды.ДатаНачала
	|			И ВТ_ТаблицаДат.Период <= Периоды.ДатаОкончания
	|			И (Периоды.Периодичность = &Периодичность)
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ВТ_ТаблицаДат.Период, ДЕНЬ)";
	Запрос.УстановитьПараметр("Периодичность", Периодичность);
	Запрос.УстановитьПараметр("ТаблицаДат", ТаблицаПоказателей);
	
	КэшПериодов = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		КэшПериодов.Вставить(Выборка.Период, Выборка.ПериодОтчета);
	КонецЦикла;
	
	Для каждого Строка Из ТаблицаПоказателей Цикл
	
		Строка.ПериодОтчета = КэшПериодов[НачалоДня(Строка.Период)];
	
	КонецЦикла; 

КонецПроцедуры

#КонецОбласти

#КонецЕсли

