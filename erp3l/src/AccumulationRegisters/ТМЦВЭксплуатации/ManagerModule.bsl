
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ТМЦВЭксплуатации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.7.273";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("dda87482-dbc8-49d6-9fbc-6dc60685c7ed");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ТМЦВЭксплуатации.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Обновляет регистр ""ТМЦ в эксплуатации"":
	|- переносит записи из старого регистра';
	|en = 'Updates the ""Inventory in operation"" register:
	|- transfers records from the previous register'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ТМЦВЭксплуатации.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.УдалитьТМЦВЭксплуатации.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Справочники.ПартииТМЦВЭксплуатации.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ТМЦВЭксплуатации.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыНакопления.ТМЦВЭксплуатации.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Справочники.ПартииТМЦВЭксплуатации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

КонецПроцедуры

// Регистрирует данные к обработке при переходе на новую версию.
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра  = "РегистрНакопления.ТМЦВЭксплуатации";
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Регистратор.Дата УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Регистратор");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДанныеСтарогоРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.УдалитьТМЦВЭксплуатации КАК ДанныеСтарогоРегистра
	|ГДЕ
	|	НЕ (ИСТИНА В (
	|		ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрНакопления.ТМЦВЭксплуатации КАК ДанныеНовогоРегистра
	|		ГДЕ
	|			ДанныеНовогоРегистра.Регистратор = ДанныеСтарогоРегистра.Регистратор))";
	
	Запрос = Новый Запрос(ТекстЗапроса);

	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры, 
		Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор"), 
		ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяОбъекта = "РегистрНакопления.ТМЦВЭксплуатации";
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
		Возврат;
	КонецЕсли;
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;

	ЧитаемыеДанные = Новый Массив;
	ЧитаемыеДанные.Добавить("Справочник.ПартииТМЦВЭксплуатации");
	ДополнительныеПараметрыПроцедуры = ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляОбработки();
	ДополнительныеПараметрыПроцедуры.ИмяВременнойТаблицы = "ВТЗаблокированныеДанные";
	ОбновлениеИнформационнойБазы.СоздатьВременнуюТаблицуЗаблокированныхДляЧтенияИИзмененияСсылок(
			Параметры.Очередь, 
			ЧитаемыеДанные, 
			МенеджерВременныхТаблиц, 
			ДополнительныеПараметрыПроцедуры);

	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаДанных.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТДляОбработки
	|ИЗ
	|	&ТаблицаОбновляемыхДанных КАК ТаблицаДанных
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СсылкиДляОбработки.Регистратор КАК Регистратор,
	|
	|	ДанныеСтарогоРегистра.Партия.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ДанныеСтарогоРегистра.Партия.НаправлениеДеятельности КАК НаправлениеДеятельности
	|
	|ПОМЕСТИТЬ ВсеОбъекты
	|ИЗ
	|	ВТДляОбработки КАК СсылкиДляОбработки
	|
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.УдалитьТМЦВЭксплуатации КАК ДанныеСтарогоРегистра
	|		ПО (ДанныеСтарогоРегистра.Регистратор = СсылкиДляОбработки.Регистратор)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеОбъекты.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ВТЗаблокированныеСсылки
	|ИЗ
	|	ВсеОбъекты КАК ВсеОбъекты
	|
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.УдалитьТМЦВЭксплуатации КАК ДанныеСтарогоРегистра
	|		ПО (ДанныеСтарогоРегистра.Регистратор = ВсеОбъекты.Регистратор)
	|ГДЕ
	|	ДанныеСтарогоРегистра.Партия В
	|			(ВЫБРАТЬ
	|				ВТЗаблокированныеДанные.Ссылка
	|			ИЗ
	|				ВТЗаблокированныеДанные КАК ВТЗаблокированныеДанные)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеОбъекты.Регистратор КАК Регистратор,
	|	ВсеОбъекты.ИнвентарныйНомер КАК ИнвентарныйНомер,
	|	ВсеОбъекты.НаправлениеДеятельности КАК НаправлениеДеятельности
	|ИЗ
	|	ВсеОбъекты КАК ВсеОбъекты
	|ГДЕ
	|	НЕ ВсеОбъекты.Регистратор В
	|				(ВЫБРАТЬ
	|					ВТЗаблокированныеСсылки.Регистратор
	|				ИЗ
	|					ВТЗаблокированныеСсылки КАК ВТЗаблокированныеСсылки)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаОбновляемыхДанных", ОбновляемыеДанные);
	Результат = Запрос.Выполнить();
	
	Выборка = Результат.Выбрать();
 	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ТМЦВЭксплуатации.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.УдалитьТМЦВЭксплуатации.НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			
			Блокировка.Заблокировать();

			НаборЗаписей = РегистрыНакопления.ТМЦВЭксплуатации.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				
				СтарыйНаборЗаписей = РегистрыНакопления.УдалитьТМЦВЭксплуатации.СоздатьНаборЗаписей();
				СтарыйНаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
				СтарыйНаборЗаписей.Прочитать();
				
				СписокПартий = Новый Массив;
				Для Каждого СтараяЗапись Из СтарыйНаборЗаписей Цикл
					Если ЗначениеЗаполнено(СтараяЗапись.Партия) Тогда
						СписокПартий.Добавить(СтараяЗапись.Партия);
					КонецЕсли;
				КонецЦикла;
				
				РеквизитыПартий = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(
					СписокПартий, "УдалитьИнвентарныйНомер,НаправлениеДеятельности,НоваяПартия,Партия258");
					
				Для Каждого СтараяЗапись Из СтарыйНаборЗаписей Цикл
					
					НоваяЗапись = НаборЗаписей.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, СтараяЗапись);
					
					Если НоваяЗапись.Количество < 0 Тогда
						НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Расход;
						НоваяЗапись.Количество = -НоваяЗапись.Количество;
					Иначе
						НоваяЗапись.ВидДвижения = ВидДвиженияНакопления.Приход;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СтараяЗапись.Партия) Тогда
						СвойстваПартии = РеквизитыПартий.Получить(СтараяЗапись.Партия);
						НоваяЗапись.ИнвентарныйНомер = СвойстваПартии.УдалитьИнвентарныйНомер;
						НоваяЗапись.НаправлениеДеятельности = СвойстваПартии.НаправлениеДеятельности;
						Если НЕ СвойстваПартии.Партия258 
							И ЗначениеЗаполнено(СвойстваПартии.НоваяПартия) Тогда
							НоваяЗапись.Партия = СвойстваПартии.НоваяПартия;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ОбновлениеИнформационнойБазыУТ.СообщитьОНеудачнойОбработке(ИнформацияОбОшибке(), Выборка.Регистратор);
			
		КонецПопытки;
		
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяОбъекта);
	
КонецПроцедуры
 
#КонецОбласти

#КонецОбласти

#КонецЕсли
