#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

Функция Регистраторы()
	
	Массив = Новый Массив(1);
	
	Типы = РегистрыНакопления.ЗаказыНаПроизводствоСпецификации.СоздатьНаборЗаписей().Отбор.Регистратор.ТипЗначения.Типы();
	
	ВсеРегистраторы = Новый Массив();
	
	Для Каждого Элемент Из Типы Цикл
		
		Если Элемент = Тип("ДокументСсылка.КорректировкаРегистров") Тогда
			Продолжить;
		КонецЕсли;
		
		Массив[0] = Элемент;
		ОписаниеТипов = Новый ОписаниеТипов(Массив);
		Ссылка = ОписаниеТипов.ПривестиЗначение(Неопределено);
		ВсеРегистраторы.Добавить(ОбщегоНазначения.ИмяТаблицыПоСсылке(Ссылка));
		
	КонецЦикла;
	
	Возврат ВсеРегистраторы;
	
КонецФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

#Область ОбработатьДанныеДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ЗаказыНаПроизводствоСпецификации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.7.206";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("fc59a9c5-18dc-45a7-843d-73d079f5236b");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ЗаказыНаПроизводствоСпецификации.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Формирует движения по данным документов. Изменяет Вариант обеспечения и признак Обособленно.';
									|en = 'Generates records based on the document data. Changes Supply option and Assigned flag.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ЗаказНаПроизводство.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаказПереработчику.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.МаршрутныйЛистПроизводства.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ЗаказыНаПроизводствоСпецификации.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыНакопления.ЗаказыНаПроизводствоСпецификации.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПроизводство.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПереработчику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПереработчику.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ЗаказыНаПроизводствоСпецификации.ОбработатьКорректировкиРегистровДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

#Область ОбработатьКорректировкиРегистровДляПереходаНаНовуюВерсию

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.ЗаказыНаПроизводствоСпецификации.ОбработатьКорректировкиРегистровДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.7.206";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("b0d566c3-db06-445f-83c5-4ceaba07d1b5");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.ЗаказыНаПроизводствоСпецификации.ЗарегистрироватьКорректировкиРегистровДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Формирует движения по данным документов. Изменяет Вариант обеспечения и признак Обособленно.';
									|en = 'Generates records based on the document data. Changes Supply option and Assigned flag.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.ЗаказыНаПроизводствоСпецификации.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.ЗаказыНаПроизводствоСпецификации.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Блокируемые = Новый Массив;
	Блокируемые.Добавить(Метаданные.РегистрыНакопления.ЗаказыНаПроизводствоСпецификации.ПолноеИмя());
	Обработчик.БлокируемыеОбъекты = СтрСоединить(Блокируемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ЗаказыНаПроизводствоСпецификации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";

#КонецОбласти

КонецПроцедуры

// Регистрирует данные к обработке
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ЗаказыНаПроизводствоСпецификации";
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = СтрСоединить(Регистраторы(), ",");
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПроизводствоСпецификации КАК ТаблицаРегистра
	|ГДЕ
	|	(ТаблицаРегистра.ВариантОбеспечения В (
	|							ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.УдалитьОтгрузитьОбособленно),
	|							ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.УдалитьИзЗаказов),
	|							ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.УдалитьОбособленно))
	|		ИЛИ ТаблицаРегистра.ПроизводитсяВПроцессе
	|			И НЕ ТаблицаРегистра.Обособленно)
	|	И НЕ ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Регистратор) = ТИП(Документ.КорректировкаРегистров)";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ЗаказыНаПроизводствоСпецификации;
	ПолноеИмяРегистра  = МетаданныеРегистра.ПолноеИмя();
	ПолныеИменаДокументов = Новый Массив;
	ПолныеИменаДокументов.Добавить("Документ.ЗаказНаПроизводство");
	ПолныеИменаДокументов.Добавить("Документ.ЗаказПереработчику");
	ПолныеИменаДокументов.Добавить("Документ.МаршрутныйЛистПроизводства");
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазыУТ.ДополнительныеПараметрыПерезаписиДвиженийИзОчереди();
	ДополнительныеПараметры.ОбновляемыеДанные = Параметры.ОбновляемыеДанные;
	
	ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
		ПолныеИменаДокументов, ПолноеИмяРегистра, Параметры.Очередь, ДополнительныеПараметры);
	
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры	

// Регистрирует данные к обработке
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьКорректировкиРегистровДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = "РегистрНакопления.ЗаказыНаПроизводствоСпецификации";
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = "Документ.КорректировкаРегистров";
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаРегистра.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПроизводствоСпецификации КАК ТаблицаРегистра
	|ГДЕ
	|	(ТаблицаРегистра.ВариантОбеспечения В (
	|							ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.УдалитьОтгрузитьОбособленно),
	|							ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.УдалитьИзЗаказов),
	|							ЗНАЧЕНИЕ(Перечисление.ВариантыОбеспечения.УдалитьОбособленно))
	|		ИЛИ ТаблицаРегистра.ПроизводитсяВПроцессе
	|			И НЕ ТаблицаРегистра.Обособленно)
	|	И ТИПЗНАЧЕНИЯ(ТаблицаРегистра.Регистратор) = ТИП(Документ.КорректировкаРегистров)";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьКорректировкиРегистровДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.ЗаказыНаПроизводствоСпецификации;
	ПолноеИмяРегистра  = МетаданныеРегистра.ПолноеИмя();
	ОбновляемыеДанные  = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь,
			ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;

	ВариантТребуется            = Перечисления.ВариантыОбеспечения.Требуется;
	ВариантИзЗаказов            = Перечисления.ВариантыОбеспечения.УдалитьИзЗаказов;
	ВариантОтгрузить            = Перечисления.ВариантыОбеспечения.Отгрузить;
	ВариантОбособленно          = Перечисления.ВариантыОбеспечения.УдалитьОбособленно;
	ВариантОтгрузитьОбособленно = Перечисления.ВариантыОбеспечения.УдалитьОтгрузитьОбособленно;
	
	Для Каждого Строка Из ОбновляемыеДанные Цикл
	
		НачатьТранзакцию();
	
		Попытка
		
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Строка.Регистратор);
			Блокировка.Заблокировать();
						
			НаборЗаписей = РегистрыНакопления.ЗаказыНаПроизводствоСпецификации.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Строка.Регистратор);
			НаборЗаписей.Прочитать();
			НаборИзменен = Ложь;
			
			Для каждого ЗаписьНабора Из НаборЗаписей Цикл
			
				Если ЗаписьНабора.ВариантОбеспечения = ВариантИзЗаказов Тогда
					ЗаписьНабора.ВариантОбеспечения = ВариантТребуется;
					НаборИзменен = Истина;
				КонецЕсли;
			
				Если ЗаписьНабора.ВариантОбеспечения = ВариантОтгрузитьОбособленно Тогда
					ЗаписьНабора.ВариантОбеспечения = ВариантОтгрузить;
					ЗаписьНабора.Обособленно        = Истина;
					НаборИзменен = Истина;
				КонецЕсли;
			
				Если ЗаписьНабора.ВариантОбеспечения = ВариантОбособленно Тогда
					ЗаписьНабора.ВариантОбеспечения = ВариантТребуется;
					ЗаписьНабора.Обособленно        = Истина;
					НаборИзменен = Истина;
				КонецЕсли;
				
				Если ЗаписьНабора.ПроизводитсяВПроцессе И Не ЗаписьНабора.Обособленно Тогда
					ЗаписьНабора.Обособленно        = Истина;
					НаборИзменен = Истина;
				КонецЕсли;
		
			КонецЦикла;
		
			Если НаборИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
		
			ЗафиксироватьТранзакцию();
		
		Исключение
		
			ОтменитьТранзакцию();
		
			Шаблон = НСтр("ru = 'Не удалось записать данные в регистр %1 по регистратору ""%2"", по причине: %3';
							|en = 'Cannot save data to the register %1 for recorder ""%2"". Reason: %3'");
			ТекстСообщения = СтрШаблон(Шаблон,
									   ПолноеИмяРегистра,
									   Строка.Регистратор,
									   ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		
			ЗаписьЖурналаРегистрации(ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
									 УровеньЖурналаРегистрации.Предупреждение,
									 МетаданныеРегистра,
									 ,
									 ТекстСообщения);
		
		КонецПопытки;
	
	КонецЦикла;
	
	Параметры.ОбработкаЗавершена =
		Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры	

#КонецОбласти

#КонецОбласти

#КонецЕсли
