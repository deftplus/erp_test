
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

//++ НЕ УТ
//++ НЕ УТКА

// Заполняет параметры отражения движений регистра в финансовом учете
//
// Возвращаемое значение:
// 	см. МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете
//
Функция ПараметрыОтраженияДвиженийВФинансовомУчете() Экспорт
	
	ПараметрыОтражения = МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров.ПараметрыОтраженияДвиженийВФинансовомУчете();
	ПараметрыОтражения.ПутьКДаннымНаправлениеДеятельности = "НаправлениеДеятельности";
	ПараметрыОтражения.ПутьКДаннымПодразделение = "Подразделение";
	ПараметрыОтражения.ПутьКДаннымМестоУчета = "Подразделение";
	ПараметрыОтражения.ЭтоРегистрУчетаНДС = Истина;
	ПараметрыОтражения.РесурсыУпр.Добавить("НДСУпр");
	ПараметрыОтражения.РесурсыРегл.Добавить("НДС");
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	МеждународныйУчетПоДаннымОстаточныхФинансовыхРегистров.ЗаполнитьПараметрыОтраженияПоМетаданнымРегистра(ПараметрыОтражения, МетаданныеРегистра);
	
	Возврат ПараметрыОтражения;
	
КонецФункции

// Определяет источники уточнения счета, доступные в регистре и их свойства.
// Подробнее см. МеждународныйУчетСерверПовтИсп.ИсточникиУточненияСчета
//
// Параметры:
//  СвойстваИсточника - Строка - "ИмяПоля" - имя атрибута регистра накопления, из которого планируется получать источник уточнения счета.
//
// Возвращаемое значение:
//  Соответствие - Ключ - название источника уточнения счета. 
//                 Значение - структура свойств источника уточнения счета.
//
Функция ИсточникиУточненияСчета(СвойстваИсточника) Экспорт
	
	ИсточникиУточненияСчета = Новый Соответствие;
	
	// Источники уточнения не доступны.
	
	Возврат ИсточникиУточненияСчета;
	
КонецФункции

// Определяет источники подразделений регистра и их свойства.
// Подробнее см. МеждународныйУчетСерверПовтИсп.ИсточникиПодразделений
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя источника. 
//                 Значение - структура свойств источника. 
//
Функция ИсточникиПодразделений() Экспорт

	ИсточникиПодразделений = Новый Соответствие;
	ИсточникиПодразделений.Вставить(Перечисления.ИсточникиПодразделенийАналитическихРегистров.Подразделение, "Подразделение");
	
	Возврат ИсточникиПодразделений;
	
КонецФункции

// Определяет источники направлений регистра и их свойства.
// Подробнее см. МеждународныйУчетСерверПовтИсп.ИсточникиНаправлений
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя источника. 
//                 Значение - структура свойств источника. 
//
Функция ИсточникиНаправлений() Экспорт

	Результат = Новый Соответствие;
	
	ИсточникиНаправлений = Перечисления.ИсточникиНаправленийДеятельностиАналитическихРегистров;
	Результат.Вставить(ИсточникиНаправлений.НаправлениеДеятельности, "НаправлениеДеятельности");

	Возврат Результат;

КонецФункции

// Определяет источники заполнения субконто.
// Подробнее см. МеждународныйУчетСерверПовтИсп.ИсточникиСубконто
//
// Возвращаемое значение:
//  Структура - Источники заполнения субконто. Содержит ключи:
//  	* СубконтоДт - Массив Из Строка -
//  	* СубконтоКт - Массив Из Строка -
//
Функция ИсточникиСубконто() Экспорт
	
	МассивСубконто = Новый Массив;
	МассивСубконто.Добавить("Организация");
	МассивСубконто.Добавить("Контрагент");
	МассивСубконто.Добавить("ДокументОплаты");
	МассивСубконто.Добавить("Подразделение");
	МассивСубконто.Добавить("НаправлениеДеятельности");
	МассивСубконто.Добавить("СтавкаНДС");

	Возврат Новый Структура("СубконтоДт, СубконтоКт", МассивСубконто, МассивСубконто);
	
КонецФункции

// Определяет показатели в валюте регистра.
// Подробнее см. МеждународныйУчетСерверПовтИсп.ПоказателиВВалюте
//
// Параметры:
//  СвойстваПоказателей - Строка - "ИсточникВалюты" - источник валюты для показателя регистра.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция ПоказателиВВалюте(СвойстваПоказателей) Экспорт

	ПоказателиВВалюте = Новый Соответствие;
	
	// Показатели в валюте не предусмотрены.
	
	Возврат ПоказателиВВалюте;

КонецФункции

// Определяет показатели в валюте регистра.
// Подробнее см. МеждународныйУчетСерверПовтИсп.ПоказателиКоличества.
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция ПоказателиКоличества() Экспорт

	ПоказателиКоличества = Новый Соответствие;
	Возврат ПоказателиКоличества;

КонецФункции

//-- НЕ УТКА

// Определяет показатели регистра.
// Подробнее см. МеждународныйУчетСерверПовтИсп.Показатели
//
// Параметры:
//  Свойства - Структура - содержащая ключи СвойстваПоказателей, СвойстваРесурсов
//
// Возвращаемое значение:
//  Соответствие - Ключ - имя показателя.
//                 Значение - структура свойств показателя.
//
Функция Показатели(Свойства) Экспорт

	Показатели = Новый Соответствие;
	
	СвойстваПоказателей = Свойства.СвойстваПоказателей;
	СвойстваРесурсов = Свойства.СвойстваРесурсов;
	
	МассивРесурсов = Новый Массив;
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "НДСУпр", "ВалютаУпр"));
	МассивРесурсов.Добавить(Новый Структура(СвойстваРесурсов, "НДС", "ВалютаРегл"));
	
	Показатели.Вставить(Перечисления.ПоказателиАналитическихРегистров.СуммаНДС, Новый Структура(СвойстваПоказателей, МассивРесурсов));
	
	Возврат Показатели;
	
КонецФункции
//-- НЕ УТ

// Собирает структуру из текстов запросов для дальнейшей проверки даты запрета.
// 
// Параметры:
// 	Запрос - Запрос - Запрос по проверке даты запрета, можно установить параметры
// Возвращаемое значение:
// 	Структура - см. ЗакрытиеМесяцаСервер.ИнициализироватьСтруктуруТекстовЗапросов
Функция ТекстЗапросаКонтрольДатыЗапрета(Запрос) Экспорт
	ИмяРегистра = Метаданные.РегистрыНакопления.НДСАвансыПолученные.Имя;
	ИмяТаблицыИзменений = "ТаблицаИзмененийНДСАвансыПолученные"; 
	СтруктураТекстовЗапросов = ПроведениеДокументов.ШаблонТекстЗапросаКонтрольДатыЗапрета(Запрос, 
		ИмяРегистра, 
		ИмяТаблицыИзменений, 
		"ФинансовыйКонтур");
	Возврат СтруктураТекстовЗапросов

КонецФункции

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

//++ Локализация

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.НДСАвансыПолученные.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.5.3";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("079c20f8-b420-45ce-86ec-692d7e638bc8");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.НДСАвансыПолученные.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполнение регистра ""НДС с авансов полученных"" на основании данных регистров  ""НДС Покупки"" и ""НДС Продажи"".';
									|en = 'Populating the ""VAT from advances received"" register based on the data of the ""VAT Purchases"" and ""VAT Sales"" registers.'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.РегистрыНакопления.НДСАвансыПолученные.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.НДСЗаписиКнигиПокупок.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.НДСЗаписиКнигиПродаж.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.НДСАвансыПолученные.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");

КонецПроцедуры

// Описание
// 
// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры = Неопределено) Экспорт

	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	НДСЗаписиКнигиПродаж.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК НДСЗаписиКнигиПродаж
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(НДСЗаписиКнигиПродаж.Регистратор) = ТИП(Документ.СчетФактураВыданныйАванс)
	|	И НЕ ИСТИНА В 
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрНакопления.НДСАвансыПолученные КАК НДСАвансыПолученные
	|		ГДЕ
	|			НДСАвансыПолученные.Регистратор = НДСЗаписиКнигиПродаж.Регистратор)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НДСЗаписиКнигиПокупок.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК НДСЗаписиКнигиПокупок
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(НДСЗаписиКнигиПокупок.Регистратор) = ТИП(Документ.СчетФактураВыданныйАванс)
	|	И НЕ ИСТИНА В 
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			РегистрНакопления.НДСАвансыПолученные КАК НДСАвансыПолученные
	|		ГДЕ
	|			НДСАвансыПолученные.Регистратор = НДСЗаписиКнигиПокупок.Регистратор)
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(
		Параметры,
		Регистраторы,
		ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = СоздатьНаборЗаписей().Метаданные();
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	ТекстЗапросаПолученияИтоговыхДанных = "ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)      КАК ВидДвижения,
	|	Источник.Период                             КАК Период,
	|	Источник.Регистратор                        КАК Регитсратор,
	|	Источник.Организация                        КАК Организация,
	|	Источник.СчетФактура                        КАК ДокументОплаты,
	|	Источник.Покупатель                         КАК Контрагент,
	|	Источник.ИсправленныйСчетФактура            КАК ИсправленныйСчетФактура,
	|	СчетФактураВыданныйАванс.Подразделение      КАК Подразделение,
	|	Источник.НаправлениеДеятельности            КАК НаправлениеДеятельности,
	|	Источник.СтавкаНДС                          КАК СтавкаНДС,
	|	Источник.СуммаБезНДС                        КАК СуммаБезНДС,
	|	Источник.НДС                                КАК НДС,
	|	Источник.НДСУпр                             КАК НДСУпр,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияНДСАвансы.НачислениеСПолученногоАванса) КАК Событие,
	|	НЕОПРЕДЕЛЕНО                                КАК ДокументЗачетаАванса,
	|	Источник.РегламентнаяОперация               КАК РегламентнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                КАК ИдентификаторФинЗаписи,
	|	НЕОПРЕДЕЛЕНО                                КАК НастройкаХозяйственнойОперации,
	|	НЕОПРЕДЕЛЕНО                                КАК Сторно,
	|	СчетФактураВыданныйАванс.НалогообложениеНДС КАК НалогообложениеНДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПродаж КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданныйАванс КАК СчетФактураВыданныйАванс
	|		ПО Источник.Регистратор = СчетФактураВыданныйАванс.Ссылка
	|	ГДЕ Источник.Регистратор = &Регистратор
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)      КАК ВидДвижения,
	|	Источник.Период                             КАК Период,
	|	Источник.Регистратор                        КАК Регитсратор,
	|	Источник.Организация                        КАК Организация,
	|	Источник.СчетФактура                        КАК ДокументОплаты,
	|	Источник.Поставщик                          КАК Контрагент,
	|	Источник.ИсправленныйСчетФактура            КАК ИсправленныйСчетФактура,
	|	СчетФактураВыданныйАванс.Подразделение      КАК Подразделение,
	|	Источник.НаправлениеДеятельности            КАК НаправлениеДеятельности,
	|	Источник.СтавкаНДС                          КАК СтавкаНДС,
	|	Источник.СуммаБезНДС                        КАК СуммаБезНДС,
	|	Источник.НДС                                КАК НДС,
	|	Источник.НДСУпр                             КАК НДСУпр,
	|	ЗНАЧЕНИЕ(Перечисление.СобытияНДСАвансы.ВычетПриЗачетеАванса) КАК Событие,
	|	НЕОПРЕДЕЛЕНО                                КАК ДокументЗачетаАванса,
	|	Источник.РегламентнаяОперация               КАК РегламентнаяОперация,
	|	НЕОПРЕДЕЛЕНО                                КАК ИдентификаторФинЗаписи,
	|	НЕОПРЕДЕЛЕНО                                КАК НастройкаХозяйственнойОперации,
	|	НЕОПРЕДЕЛЕНО                                КАК Сторно,
	|	СчетФактураВыданныйАванс.НалогообложениеНДС КАК НалогообложениеНДС
	|ИЗ
	|	РегистрНакопления.НДСЗаписиКнигиПокупок КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданныйАванс КАК СчетФактураВыданныйАванс
	|		ПО Источник.Регистратор = СчетФактураВыданныйАванс.Ссылка
	|	ГДЕ Источник.Регистратор = &Регистратор";
	
	Запрос = Новый Запрос(ТекстЗапросаПолученияИтоговыхДанных);
	
	Для Каждого Выборка Из ОбновляемыеДанные Цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Регистратор = Выборка.Регистратор;
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.НДСЗаписиКнигиПокупок.НаборЗаписей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.НДСЗаписиКнигиПродаж.НаборЗаписей");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Разделяемый;
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Регистратор);
			Блокировка.Заблокировать();
			
			НаборЗаписей = РегистрыНакопления.НДСАвансыПолученные.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Регистратор);
			
			Запрос.УстановитьПараметр("Регистратор", Регистратор);
			ВыборкаИсточникДанных = Запрос.Выполнить().Выбрать();
			
			Пока ВыборкаИсточникДанных.Следующий() Цикл
				НоваяЗапись = НаборЗаписей.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяЗапись, ВыборкаИсточникДанных);
				НоваяЗапись.СтавкаНДС = УчетНДСЛокализация.СтавкаНДСПоПеречислению(ВыборкаИсточникДанных.СтавкаНДС, ВыборкаИсточникДанных.НалогообложениеНДС);
			КонецЦикла;
		
			Если НаборЗаписей.Модифицированность() Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			Шаблон = НСтр("ru = 'Не удалось записать данные в регистр %1 по регистратору ""%2"", по причине: %3';
							|en = 'Cannot save data to the register %1 for recorder ""%2"". Reason: %3'");
			ТекстСообщения = 
				СтрШаблон(Шаблон, 
					ПолноеИмяРегистра, 
					Регистратор, 
					ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеРегистра, 
				, 
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
		
	Параметры.ОбработкаЗавершена = Не ОбновлениеИнформационнойБазы.ЕстьДанныеДляОбработки(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

//-- Локализация

#КонецОбласти

#КонецОбласти

#КонецЕсли
