#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// см. ОбновлениеИнформационнойБазыБСП.ПриДобавленииОбработчиковОбновления
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.УслугиДавальцуКОформлению.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "2.5.4.28";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("713b2e1d-bf5e-4892-a5f3-34c61240ef19");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.УслугиДавальцуКОформлению.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Заполняет измерение Договор по данным заказов давальцев (измерение ""Заказ давальца"").';
									|en = 'Fills in ""Contract"" dimension according to material provider orders (""Material provider order"" dimension).'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.ЗаказДавальца.ПолноеИмя());
	Читаемые.Добавить(Метаданные.РегистрыНакопления.УслугиДавальцуКОформлению.ПолноеИмя());
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.УслугиДавальцуКОформлению.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказДавальца.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказДавальца.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

КонецПроцедуры

// Параметры:
// 	Параметры - см. ОбновлениеИнформационнойБазы.ОсновныеПараметрыОтметкиКОбработке
//
Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ПолноеИмяРегистра = Метаданные.РегистрыНакопления.УслугиДавальцуКОформлению.ПолноеИмя();
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки; // см. ОбновлениеИнформационнойБазы.ДополнительныеПараметрыВыборкиДанныхДляМногопоточнойОбработки
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.ПоляУпорядочиванияПриРаботеПользователей.Добавить("Период УБЫВ");
	ПараметрыВыборки.ПоляУпорядочиванияПриОбработкеДанных.Добавить("Период УБЫВ");
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	УслугиДавальцуКОформлению.Регистратор
	|ИЗ
	|	РегистрНакопления.УслугиДавальцуКОформлению КАК УслугиДавальцуКОформлению
	|ГДЕ
	|	УслугиДавальцуКОформлению.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	И УслугиДавальцуКОформлению.ЗаказДавальца <> ЗНАЧЕНИЕ(Документ.ЗаказДавальца.ПустаяСсылка)";
	
	Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
	
	ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	МетаданныеРегистра = Метаданные.РегистрыНакопления.УслугиДавальцуКОформлению;
	ПолноеИмяРегистра = МетаданныеРегистра.ПолноеИмя();
	
	ОбновляемыеДанные = ОбновлениеИнформационнойБазы.ДанныеДляОбновленияВМногопоточномОбработчике(Параметры);
	
	Если ОбновляемыеДанные.Количество() = 0 Тогда
		Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
		Возврат;
	КонецЕсли;
		
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбновляемыеДанные", ОбновляемыеДанные);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбновляемыеДанные.Регистратор КАК Регистратор
	|ПОМЕСТИТЬ ОбновляемыеДанные
	|ИЗ
	|	&ОбновляемыеДанные КАК ОбновляемыеДанные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Регистратор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УслугиДавальцуКОформлению.Регистратор КАК Регистратор,
	|	УслугиДавальцуКОформлению.НомерСтроки - 1 КАК ИндексСтроки,
	|	УслугиДавальцуКОформлению.ЗаказДавальца.Договор КАК Договор
	|ИЗ
	|	РегистрНакопления.УслугиДавальцуКОформлению КАК УслугиДавальцуКОформлению
	|ГДЕ
	|	ИСТИНА В
	|		(ВЫБРАТЬ ПЕРВЫЕ 1
	|			ИСТИНА
	|		ИЗ
	|			ОбновляемыеДанные КАК ОбновляемыеДанные
	|		ГДЕ
	|			ОбновляемыеДанные.Регистратор = УслугиДавальцуКОформлению.Регистратор)
	|	И УслугиДавальцуКОформлению.Договор = ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)
	|	И УслугиДавальцуКОформлению.ЗаказДавальца <> ЗНАЧЕНИЕ(Документ.ЗаказДавальца.ПустаяСсылка)";
	
	МассивРезультатов = Запрос.ВыполнитьПакет();
	
	ТаблицаЗаписейСПустымиДоговорами = МассивРезультатов[1].Выгрузить(); // ТаблицаЗначений
	ТаблицаЗаписейСПустымиДоговорами.Индексы.Добавить("Регистратор");
	
	Для Каждого Выборка Из ОбновляемыеДанные цикл
		
		НачатьТранзакцию();
		
		Попытка
			
			Блокировка = Новый БлокировкаДанных;
			ЭлементБлокировки = Блокировка.Добавить(ПолноеИмяРегистра + ".НаборЗаписей");
			ЭлементБлокировки.УстановитьЗначение("Регистратор", Выборка.Регистратор);
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			Блокировка.Заблокировать();
							
			НаборЗаписей = РегистрыНакопления.УслугиДавальцуКОформлению.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Регистратор);
			НаборЗаписей.Прочитать();
			
			НаборИзменен = Ложь;
				
			МассивСтрок = ТаблицаЗаписейСПустымиДоговорами.НайтиСтроки(Новый Структура("Регистратор", Выборка.Регистратор));
			Для каждого СтрокаТаблицы Из МассивСтрок Цикл
				ЗаполнитьЗначенияСвойств(НаборЗаписей[СтрокаТаблицы.ИндексСтроки], СтрокаТаблицы, "Договор");
				НаборИзменен = Истина;
			КонецЦикла;
				
			Если НаборИзменен Тогда
				ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НаборЗаписей);
			Иначе
				ОбновлениеИнформационнойБазы.ОтметитьВыполнениеОбработки(НаборЗаписей);
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			ТекстСообщения = 
				СтрШаблон(НСтр("ru = 'Не удалось записать данные в регистр %1 по регистратору ""%2"", по причине: %3';
								|en = 'Cannot save data to the register %1 for recorder ""%2"". Reason: %3'"), 
				ПолноеИмяРегистра, 
				Выборка.Регистратор, 
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеИнформационнойБазы.СобытиеЖурналаРегистрации(), 
				УровеньЖурналаРегистрации.Предупреждение,
				МетаданныеРегистра, 
				, 
				ТекстСообщения);
			
		КонецПопытки;
		
	КонецЦикла;
		
	Параметры.ОбработкаЗавершена = ОбновлениеИнформационнойБазы.ОбработкаДанныхЗавершена(Параметры.Очередь, ПолноеИмяРегистра);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
		
#КонецЕсли
