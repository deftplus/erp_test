#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Склад)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Функция Регистраторы() Экспорт
	
	Массив = Новый Массив(1);
	
	Типы = РегистрыНакопления.РаспределениеЗапасовДвижения.СоздатьНаборЗаписей().Отбор.Регистратор.ТипЗначения.Типы();
	
	ВсеРегистраторы = Новый Массив();
	
	Для Каждого Элемент Из Типы Цикл
		
		Если Элемент = Тип("ДокументСсылка.КорректировкаРегистров") Тогда
			Продолжить;
		КонецЕсли;
		
		ПропуститьДокумент = Ложь;
		Если Элемент = Тип("ДокументСсылка.ВводОстатков") Тогда
			ПропуститьДокумент = Истина;
			//++ Локализация
			ПропуститьДокумент = Ложь;
			//-- Локализация
		КонецЕсли;
		
		Если ПропуститьДокумент Тогда
			Продолжить;
		КонецЕсли;
		
		Массив[0] = Элемент;
		ОписаниеТипов = Новый ОписаниеТипов(Массив);
		Ссылка = ОписаниеТипов.ПривестиЗначение(Неопределено);
		ВсеРегистраторы.Добавить(ОбщегоНазначения.ИмяТаблицыПоСсылке(Ссылка));
		
	КонецЦикла;
	
	Возврат ВсеРегистраторы;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеИнформационнойБазы

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
// Параметры:
// 	Обработчики - см. ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт

	Обработчик = Обработчики.Добавить();
	Обработчик.Процедура = "РегистрыНакопления.РаспределениеЗапасовДвижения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	Обработчик.Версия = "11.5.7.350";
	Обработчик.РежимВыполнения = "Отложенно";
	Обработчик.Идентификатор = Новый УникальныйИдентификатор("8e6273b6-318a-42c9-9233-1a263dc0462a");
	Обработчик.Многопоточный = Истина;
	Обработчик.ПроцедураЗаполненияДанныхОбновления = "РегистрыНакопления.РаспределениеЗапасовДвижения.ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию";
	Обработчик.ПроцедураПроверки = "ОбновлениеИнформационнойБазы.ДанныеОбновленыНаНовуюВерсиюПрограммы";
	Обработчик.Комментарий = НСтр("ru = 'Формирует движения документов по регистру по данным документов';
									|en = 'Generates document register records in the register based on document data'");
	
	Читаемые = Новый Массив;
	Читаемые.Добавить(Метаданные.Документы.АктВыполненныхРабот.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.АктОРасхожденияхПослеОтгрузки.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.АктОРасхожденияхПослеПеремещения.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.АктОРасхожденияхПослеПриемки.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВводОстатков.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВводОстатковТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВнутреннееПотреблениеТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВозвратТоваровОтКлиента.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВозвратТоваровПоставщику.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаказКлиента.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаказНаВнутреннееПотребление.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаказНаПеремещение.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаказНаСборку.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаказПоставщику.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаявкаНаВозвратТоваровОтКлиента.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.КорректировкаИзлишковНедостачПоТоварнымМестам.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.КорректировкаНазначенияТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.КорректировкаПоОрдеруНаТовары.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.КорректировкаПриобретения.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.КорректировкаРеализации.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОприходованиеИзлишковТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОрдерНаОтражениеИзлишковТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОрдерНаОтражениеНедостачТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОрдерНаОтражениеПересортицыТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОрдерНаОтражениеПорчиТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтгрузкаТоваровСХранения.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ОтчетОРозничныхПродажах.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПередачаТоваровМеждуОрганизациями.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПередачаТоваровХранителю.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПеремещениеТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПересортицаТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПересчетТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПорчаТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПоступлениеТоваровНаСклад.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПоступлениеТоваровОтХранителя.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПриемкаТоваровНаХранение.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПриобретениеТоваровУслуг.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПриходныйОрдерНаТовары.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПрочееОприходованиеТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РеализацияТоваровУслуг.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СборкаТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СписаниеНедостачТоваров.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЧекККМ.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЧекККМВозврат.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЧекККМКоррекции.ПолноеИмя());
	//++ Локализация
	Читаемые.Добавить(Метаданные.Документы.МаркировкаТоваровГИСМ.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПеремаркировкаТоваровГИСМ.ПолноеИмя());
	//-- Локализация
	//++ НЕ УТ
	//++ Локализация
	Читаемые.Добавить(Метаданные.Документы.ВозвратМатериаловИзПроизводства.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВыпускПродукции.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПередачаМатериаловВПроизводство.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПеремещениеМатериаловВПроизводстве.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.СписаниеЗатратНаВыпуск.ПолноеИмя());
	//-- Локализация
	//-- НЕ УТ
	//++ НЕ УТКА
	//++ Локализация
	Читаемые.Добавить(Метаданные.Документы.ЗаказНаПроизводство.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.КорректировкаЗаказаМатериаловВПроизводство.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.МаршрутныйЛистПроизводства.ПолноеИмя());
	//-- Локализация
	//-- НЕ УТКА
	//++ НЕ УТ
	Читаемые.Добавить(Метаданные.Документы.АктВыполненныхВнутреннихРабот.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ВозвратСырьяОтПереработчика.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ДвижениеПродукцииИМатериалов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаказМатериаловВПроизводство.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаказПереработчику.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПередачаСырьяПереработчику.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПоступлениеОтПереработчика.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПроизводствоБезЗаказа.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РаспределениеВозвратныхОтходов.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.РаспределениеПроизводственныхЗатрат.ПолноеИмя());
	//++ НЕ УТКА
	Читаемые.Добавить(Метаданные.Документы.ВозвратСырьяДавальцу.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаказДавальца.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаказНаПроизводство2_2.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЗаказНаРемонт.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ПоступлениеСырьяОтДавальца.ПолноеИмя());
	Читаемые.Добавить(Метаданные.Документы.ЭтапПроизводства2_2.ПолноеИмя());
	//-- НЕ УТКА
	//-- НЕ УТ
	Обработчик.ЧитаемыеОбъекты = СтрСоединить(Читаемые, ",");
	
	Изменяемые = Новый Массив;
	Изменяемые.Добавить(Метаданные.РегистрыНакопления.РаспределениеЗапасовДвижения.ПолноеИмя());
	Обработчик.ИзменяемыеОбъекты = СтрСоединить(Изменяемые, ",");
	
	Обработчик.ПриоритетыВыполнения = ОбновлениеИнформационнойБазы.ПриоритетыВыполненияОбработчика();

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктВыполненныхРабот.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктВыполненныхРабот.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктОРасхожденияхПослеОтгрузки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктОРасхожденияхПослеПриемки.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВнутреннееПотреблениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровОтКлиента.ОбработатьДополнительныеРеквизитыДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровОтКлиента.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровПоставщику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВозвратТоваровПоставщику.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказКлиента.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаВнутреннееПотребление.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПеремещение.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаСборку.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПоставщику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПоставщику.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаявкаНаВозвратТоваровОтКлиента.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.КорректировкаНазначенияТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.КорректировкаПриобретения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.КорректировкаРеализации.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтгрузкаТоваровСХранения.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ОтчетОРозничныхПродажах.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаТоваровМеждуОрганизациями.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаТоваровМеждуОрганизациями.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПередачаТоваровХранителю.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПеремещениеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПересортицаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПорчаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПоступлениеТоваровНаСклад.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПоступлениеТоваровОтХранителя.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриемкаТоваровНаХранение.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПриобретениеТоваровУслуг.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПрочееОприходованиеТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияТоваровУслуг.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РеализацияТоваровУслуг.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СборкаТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.СписаниеНедостачТоваров.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЧекККМ.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЧекККМВозврат.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЧекККМКоррекции.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыНакопления.ТоварыОрганизаций.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";
	//++ Локализация
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВводОстатков.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	//-- Локализация
	//++ НЕ УТ
	//++ Локализация
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ВыпускПродукции.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ОтражениеДокументовВРеглУчете.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";
	//-- Локализация
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.АктВыполненныхВнутреннихРабот.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "До";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ДвижениеПродукцииИМатериалов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказМатериаловВПроизводство.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПереработчику.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказПереработчику.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ПроизводствоБезЗаказа.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РаспределениеВозвратныхОтходов.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.РаспределениеПроизводственныхЗатрат.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	//-- НЕ УТ
	//++ НЕ УТКА
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказДавальца.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказДавальца.СгенерироватьОбъектыРасчетов";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПроизводство2_2.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаРемонт.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭтапПроизводства2_2.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЭтапПроизводства2_2.СгенерироватьНедостающиеКлючиАналитикиУчетаНоменклатуры";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "РегистрыСведений.ОтражениеДокументовВМеждународномУчете.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "Любой";
	//-- НЕ УТКА
	//++ Локализация
	//++ НЕ УТКА
	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.ЗаказНаПроизводство.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";

	НоваяСтрока = Обработчик.ПриоритетыВыполнения.Добавить();
	НоваяСтрока.Процедура = "Документы.КорректировкаЗаказаМатериаловВПроизводство.ОбработатьДанныеДляПереходаНаНовуюВерсию";
	НоваяСтрока.Порядок = "После";
	//-- НЕ УТКА
	//-- Локализация

КонецПроцедуры

Процедура ЗарегистрироватьДанныеКОбработкеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	ТипыРегистраторы = Регистраторы();
	ПолноеИмяРегистра = "РегистрНакопления.РаспределениеЗапасовДвижения";
	
	ПараметрыВыборки = Параметры.ПараметрыВыборки;
	ПараметрыВыборки.ПолныеИменаОбъектов = СтрСоединить(ТипыРегистраторы, ",");
	ПараметрыВыборки.ПолныеИменаРегистров = ПолноеИмяРегистра;
	ПараметрыВыборки.СпособВыборки = ОбновлениеИнформационнойБазы.СпособВыборкиРегистраторыРегистра();
	
	ЗначенияПараметров = РаспределениеЗапасовДвижения.ЗначенияПараметровДляТекстовЗапросовПроведенияДокументов();
	
	Для каждого ПолноеИмяДокумента Из ТипыРегистраторы Цикл
		
		ТекстЗапроса = РаспределениеЗапасовДвижения.ТекстыЗапросовПроведенияДокументов(ПолноеИмяДокумента);
		
		Если ПолноеИмяДокумента = "Документ.ПриходныйОрдерНаТовары"
				Или ПолноеИмяДокумента = "Документ.КорректировкаПоОрдеруНаТовары"
				Или ПолноеИмяДокумента = "Документ.ОрдерНаОтражениеИзлишковТоваров"
				Или ПолноеИмяДокумента = "Документ.ОрдерНаОтражениеНедостачТоваров"
				Или ПолноеИмяДокумента = "Документ.ОрдерНаОтражениеПересортицыТоваров"
				Или ПолноеИмяДокумента = "Документ.ОрдерНаОтражениеПорчиТоваров"
				Или ПолноеИмяДокумента = "Документ.ПересчетТоваров"
				Или ПолноеИмяДокумента = "Документ.КорректировкаИзлишковНедостачПоТоварнымМестам" Тогда
					
			ТекстыВтИЗапроса = Новый Массив();
			
			Если ПолноеИмяДокумента = "Документ.ПриходныйОрдерНаТовары" Тогда
				
				Текст =
					"ВЫБРАТЬ
					|	ТабЧасть.Ссылка КАК Ссылка,
					|	ТабЧасть.Номенклатура КАК Номенклатура,
					|	ТабЧасть.Характеристика КАК Характеристика,
					|	ТабЧасть.Назначение КАК Назначение,
					|	ТабЧасть.Серия КАК Серия,
					|	МАКСИМУМ(ТабЧасть.Упаковка) КАК Упаковка
					|ПОМЕСТИТЬ ТоварныеМеста
					|ИЗ
					|	Документ.ПриходныйОрдерНаТовары.Товары КАК ТабЧасть
					|ГДЕ
					|	ТабЧасть.Ссылка.Проведен
					|		И НЕ ТабЧасть.ЭтоУпаковочныйЛист
					|		И ТабЧасть.Количество <> 0
					|		И ТабЧасть.Упаковка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
					|		И ТабЧасть.Ссылка.Статус = Значение(Перечисление.СтатусыПриходныхОрдеров.Принят)
					|СГРУППИРОВАТЬ ПО
					|	ТабЧасть.Ссылка,
					|	ТабЧасть.Номенклатура,
					|	ТабЧасть.Характеристика,
					|	ТабЧасть.Назначение,
					|	ТабЧасть.Серия
					|ИНДЕКСИРОВАТЬ ПО
					|	Ссылка, Номенклатура, Характеристика, Назначение, Серия, Упаковка";
					
			ИначеЕсли ПолноеИмяДокумента = "Документ.ОрдерНаОтражениеИзлишковТоваров" Тогда
				
				Текст =
					"ВЫБРАТЬ
					|	ТабЧасть.Ссылка КАК Ссылка,
					|	ТабЧасть.Номенклатура КАК Номенклатура,
					|	ТабЧасть.Характеристика КАК Характеристика,
					|	ТабЧасть.Назначение КАК Назначение,
					|	ТабЧасть.Серия КАК Серия,
					|	МАКСИМУМ(ТабЧасть.Упаковка) КАК Упаковка
					|ПОМЕСТИТЬ ТоварныеМеста
					|ИЗ
					|	Документ.ОрдерНаОтражениеИзлишковТоваров.Товары КАК ТабЧасть
					|ГДЕ
					|	ТабЧасть.Ссылка.Проведен
					|		И ТабЧасть.Упаковка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
					|СГРУППИРОВАТЬ ПО
					|	ТабЧасть.Ссылка,
					|	ТабЧасть.Номенклатура,
					|	ТабЧасть.Характеристика,
					|	ТабЧасть.Назначение,
					|	ТабЧасть.Серия
					|ИНДЕКСИРОВАТЬ ПО
					|	Ссылка, Номенклатура, Характеристика, Назначение, Серия, Упаковка";
					
			ИначеЕсли ПолноеИмяДокумента = "Документ.ОрдерНаОтражениеНедостачТоваров" Тогда
				
				Текст =
					"ВЫБРАТЬ
					|	ТабЧасть.Ссылка КАК Ссылка,
					|	ТабЧасть.Номенклатура КАК Номенклатура,
					|	ТабЧасть.Характеристика КАК Характеристика,
					|	ТабЧасть.Назначение КАК Назначение,
					|	ТабЧасть.Серия КАК Серия,
					|	МАКСИМУМ(ТабЧасть.Упаковка) КАК Упаковка
					|ПОМЕСТИТЬ ТоварныеМеста
					|ИЗ
					|	Документ.ОрдерНаОтражениеНедостачТоваров.Товары КАК ТабЧасть
					|ГДЕ
					|	ТабЧасть.Ссылка.Проведен
					|		И ТабЧасть.Упаковка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
					|СГРУППИРОВАТЬ ПО
					|	ТабЧасть.Ссылка,
					|	ТабЧасть.Номенклатура,
					|	ТабЧасть.Характеристика,
					|	ТабЧасть.Назначение,
					|	ТабЧасть.Серия
					|ИНДЕКСИРОВАТЬ ПО
					|	Ссылка, Номенклатура, Характеристика, Назначение, Серия, Упаковка";
			
			ИначеЕсли ПолноеИмяДокумента = "Документ.ОрдерНаОтражениеПересортицыТоваров" Тогда
			
				Текст =
					"ВЫБРАТЬ
					|	ТабЧасть.Ссылка КАК Ссылка,
					|	ТабЧасть.Номенклатура КАК Номенклатура,
					|	ТабЧасть.Характеристика КАК Характеристика,
					|	ТабЧасть.Назначение КАК Назначение,
					|	ТабЧасть.Серия КАК Серия,
					|	МАКСИМУМ(ТабЧасть.Упаковка) КАК Упаковка,
					|	ТабЧасть.НоменклатураОприходование КАК НоменклатураОприходование,
					|	ТабЧасть.ХарактеристикаОприходование КАК ХарактеристикаОприходование,
					|	ТабЧасть.НазначениеОприходование КАК НазначениеОприходование,
					|	ТабЧасть.СерияОприходование КАК СерияОприходование,
					|	МАКСИМУМ(ТабЧасть.УпаковкаОприходование) КАК УпаковкаОприходование
					|ПОМЕСТИТЬ ТоварныеМеста
					|ИЗ
					|	Документ.ОрдерНаОтражениеПересортицыТоваров.Товары КАК ТабЧасть
					|ГДЕ
					|	ТабЧасть.Ссылка.Проведен
					|		И ТабЧасть.Упаковка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
					|СГРУППИРОВАТЬ ПО
					|	ТабЧасть.Ссылка,
					|	ТабЧасть.Номенклатура,
					|	ТабЧасть.Характеристика,
					|	ТабЧасть.Назначение,
					|	ТабЧасть.Серия,
					|	ТабЧасть.НоменклатураОприходование,
					|	ТабЧасть.ХарактеристикаОприходование,
					|	ТабЧасть.НазначениеОприходование,
					|	ТабЧасть.СерияОприходование
					|ИНДЕКСИРОВАТЬ ПО
					|	Ссылка, Номенклатура, Характеристика, Назначение, Серия, Упаковка,
					|	НоменклатураОприходование, ХарактеристикаОприходование, НазначениеОприходование, СерияОприходование, УпаковкаОприходование";
			
			ИначеЕсли ПолноеИмяДокумента = "Документ.ОрдерНаОтражениеПорчиТоваров" Тогда
			
				Текст =
					"ВЫБРАТЬ
					|	ТабЧасть.Ссылка КАК Ссылка,
					|	ТабЧасть.Номенклатура КАК Номенклатура,
					|	ТабЧасть.Характеристика КАК Характеристика,
					|	ТабЧасть.Назначение КАК Назначение,
					|	ТабЧасть.Серия КАК Серия,
					|	МАКСИМУМ(ТабЧасть.Упаковка) КАК Упаковка,
					|	ТабЧасть.НоменклатураОприходование КАК НоменклатураОприходование,
					|	ТабЧасть.ХарактеристикаОприходование КАК ХарактеристикаОприходование,
					|	ВЫБОР КОГДА ТабЧасть.ПодНазначение ТОГДА
					|				ТабЧасть.Назначение
					|			ИНАЧЕ
					|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
					|		КОНЕЦ КАК НазначениеОприходование,
					|	МАКСИМУМ(ТабЧасть.УпаковкаОприходование) КАК УпаковкаОприходование
					|ПОМЕСТИТЬ ТоварныеМеста
					|ИЗ
					|	Документ.ОрдерНаОтражениеПорчиТоваров.Товары КАК ТабЧасть
					|ГДЕ
					|	ТабЧасть.Ссылка.Проведен
					|		И ТабЧасть.Упаковка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
					|СГРУППИРОВАТЬ ПО
					|	ТабЧасть.Ссылка,
					|	ТабЧасть.Номенклатура,
					|	ТабЧасть.Характеристика,
					|	ТабЧасть.Назначение,
					|	ТабЧасть.Серия,
					|	ТабЧасть.НоменклатураОприходование,
					|	ТабЧасть.ХарактеристикаОприходование,
					|	ВЫБОР КОГДА ТабЧасть.ПодНазначение ТОГДА
					|				ТабЧасть.Назначение
					|			ИНАЧЕ
					|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
					|		КОНЕЦ
					|ИНДЕКСИРОВАТЬ ПО
					|	Ссылка, Номенклатура, Характеристика, Назначение, Серия, Упаковка,
					|	НоменклатураОприходование, ХарактеристикаОприходование, НазначениеОприходование, УпаковкаОприходование";
					
			ИначеЕсли ПолноеИмяДокумента = "Документ.КорректировкаИзлишковНедостачПоТоварнымМестам" Тогда
			
				Текст =
					"ВЫБРАТЬ
					|	ТабЧасть.Ссылка КАК Ссылка,
					|	ТабЧасть.Номенклатура КАК Номенклатура,
					|	ТабЧасть.Характеристика КАК Характеристика,
					|	ТабЧасть.Назначение КАК Назначение,
					|	ТабЧасть.Серия КАК Серия,
					|	ТабЧасть.ВидОперации КАК ВидОперации,
					|	МАКСИМУМ(ТабЧасть.Упаковка) КАК Упаковка
					|ПОМЕСТИТЬ ТоварныеМеста
					|ИЗ
					|	Документ.КорректировкаИзлишковНедостачПоТоварнымМестам.Товары КАК ТабЧасть
					|ГДЕ
					|	ТабЧасть.Ссылка.Проведен
					|		И ТабЧасть.Упаковка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
					|СГРУППИРОВАТЬ ПО
					|	ТабЧасть.Ссылка,
					|	ТабЧасть.Номенклатура,
					|	ТабЧасть.Характеристика,
					|	ТабЧасть.Назначение,
					|	ТабЧасть.Серия,
					|	ТабЧасть.ВидОперации
					|ИНДЕКСИРОВАТЬ ПО
					|	Ссылка, Номенклатура, Характеристика, Назначение, Серия, ВидОперации, Упаковка";
					
			ИначеЕсли ПолноеИмяДокумента = "Документ.ПересчетТоваров" Тогда
				
				Текст =
					"ВЫБРАТЬ
					|	ТабЧасть.Ссылка КАК Ссылка,
					|	ТабЧасть.Номенклатура КАК Номенклатура,
					|	ТабЧасть.Характеристика КАК Характеристика,
					|	ТабЧасть.Назначение КАК Назначение,
					|	ТабЧасть.Упаковка КАК ТоварноеМесто,
					|	ВЫБОР
					|		КОГДА ТабЧасть.СтатусУказанияСерий В (4, 6, 8, 10, 14)
					|			ТОГДА ТабЧасть.Серия
					|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
					|	КОНЕЦ КАК Серия,
					|	СУММА(ТабЧасть.КоличествоУпаковокФакт - ТабЧасть.КоличествоУпаковок) КАК КоличествоОстаток
					|ПОМЕСТИТЬ ТоварныеМестаВДокументе
					|ИЗ
					|	Документ.ПересчетТоваров.Товары КАК ТабЧасть
					|ГДЕ
					|	ТабЧасть.Ссылка.Проведен
					|		И ТабЧасть.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПересчетовТоваров.Выполнено)
					|		И ТабЧасть.Ссылка.Склад.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
					|		И ТабЧасть.Ссылка.Склад.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач <= ТабЧасть.Ссылка.Дата
					|		И ТабЧасть.Упаковка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
					|СГРУППИРОВАТЬ ПО
					|	ТабЧасть.Ссылка,
					|	ТабЧасть.Упаковка,
					|	ТабЧасть.Номенклатура,
					|	ТабЧасть.Характеристика,
					|	ТабЧасть.Назначение,
					|	ВЫБОР
					|		КОГДА ТабЧасть.СтатусУказанияСерий В (4, 6, 8, 10, 14)
					|			ТОГДА ТабЧасть.Серия
					|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
					|	КОНЕЦ
					|ИМЕЮЩИЕ
					|	СУММА(ТабЧасть.КоличествоУпаковокФакт - ТабЧасть.КоличествоУпаковок) <> 0
					|ИНДЕКСИРОВАТЬ ПО
					|	Ссылка, Номенклатура, ТоварноеМесто";
					
			ИначеЕсли ПолноеИмяДокумента = "Документ.КорректировкаПоОрдеруНаТовары" Тогда
				
				Текст =
					"ВЫБРАТЬ
					|	ТабЧасть.Ссылка КАК Ссылка,
					|	ТабЧасть.Номенклатура КАК Номенклатура,
					|	ТабЧасть.Характеристика КАК Характеристика,
					|	ТабЧасть.Назначение КАК Назначение,
					|	ТабЧасть.Упаковка КАК ТоварноеМесто,
					|	ВЫБОР
					|		КОГДА ТабЧасть.СтатусУказанияСерий В (4, 6, 8, 10, 14)
					|			ТОГДА ТабЧасть.Серия
					|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
					|	КОНЕЦ КАК Серия,
					|	СУММА(ВЫБОР
					|			КОГДА ТабЧасть.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировокОстатковТоваров.ОтразитьИзлишек)
					|					ИЛИ ТабЧасть.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировокОстатковТоваров.ОтразитьИзлишекОставитьВЗонеОтгрузки)
					|				ТОГДА ТабЧасть.КоличествоУпаковок
					|			КОГДА ТабЧасть.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировокОстатковТоваров.ОтразитьНедостачу)
					|				ТОГДА -ТабЧасть.КоличествоУпаковок
					|			ИНАЧЕ 0
					|		КОНЕЦ) КАК КоличествоОстаток
					|ПОМЕСТИТЬ ТоварныеМестаВДокументе
					|ИЗ
					|	Документ.КорректировкаПоОрдеруНаТовары.Товары КАК ТабЧасть
					|ГДЕ
					|	ТабЧасть.Ссылка.Проведен
					|		И ТабЧасть.ВидОперации В (
					|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировокОстатковТоваров.ОтразитьИзлишек),
					|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировокОстатковТоваров.ОтразитьНедостачу),
					|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировокОстатковТоваров.ОтразитьИзлишекОставитьВЗонеОтгрузки))
					|		И ТабЧасть.Упаковка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
					|СГРУППИРОВАТЬ ПО
					|	ТабЧасть.Ссылка,
					|	ТабЧасть.Упаковка,
					|	ТабЧасть.Номенклатура,
					|	ТабЧасть.Характеристика,
					|	ТабЧасть.Назначение,
					|	ВЫБОР
					|		КОГДА ТабЧасть.СтатусУказанияСерий В (4, 6, 8, 10, 14)
					|			ТОГДА ТабЧасть.Серия
					|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
					|	КОНЕЦ
					|ИМЕЮЩИЕ
					|	СУММА(ВЫБОР
					|			КОГДА ТабЧасть.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировокОстатковТоваров.ОтразитьИзлишек)
					|					ИЛИ ТабЧасть.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировокОстатковТоваров.ОтразитьИзлишекОставитьВЗонеОтгрузки)
					|				ТОГДА ТабЧасть.КоличествоУпаковок
					|			КОГДА ТабЧасть.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировокОстатковТоваров.ОтразитьНедостачу)
					|				ТОГДА -ТабЧасть.КоличествоУпаковок
					|			ИНАЧЕ 0
					|		КОНЕЦ) <> 0
					|ИНДЕКСИРОВАТЬ ПО
					|	Ссылка, Номенклатура, ТоварноеМесто";
			
			КонецЕсли;
			
			ТекстыВтИЗапроса.Добавить(Текст);
			
			Если ПолноеИмяДокумента = "Документ.ПересчетТоваров"
					Или ПолноеИмяДокумента = "Документ.КорректировкаПоОрдеруНаТовары" Тогда
					
					Текст =
						"ВЫБРАТЬ РАЗЛИЧНЫЕ
						|	ТоварныеМестаОстатки.Ссылка КАК Ссылка,
						|	ТоварныеМестаОстатки.Номенклатура КАК Номенклатура,
						|	УпаковкиЕдиницыИзмерения.Ссылка КАК ТоварноеМесто,
						|	УпаковкиЕдиницыИзмерения.КоличествоУпаковок КАК КоличествоМест
						|ПОМЕСТИТЬ ТоварныеМестаВНоменклатуре
						|ИЗ
						|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
						|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварныеМестаВДокументе КАК ТоварныеМестаОстатки
						|		ПО (УпаковкиЕдиницыИзмерения.Владелец = ВЫБОР
						|				КОГДА ТоварныеМестаОстатки.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
						|					ТОГДА ТоварныеМестаОстатки.Номенклатура.Ссылка
						|				ИНАЧЕ ТоварныеМестаОстатки.Номенклатура.НаборУпаковок
						|			КОНЕЦ)
						|ГДЕ
						|	УпаковкиЕдиницыИзмерения.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
						|ИНДЕКСИРОВАТЬ ПО
						|	Ссылка, Номенклатура, ТоварноеМесто";
					ТекстыВтИЗапроса.Добавить(Текст);
					
					Текст =
						"ВЫБРАТЬ
						|	ТабЧасть.Ссылка КАК Ссылка,
						|	ТабЧасть.Номенклатура КАК Номенклатура,
						|	ТабЧасть.Характеристика КАК Характеристика,
						|	ТабЧасть.Назначение КАК Назначение,
						|	ТабЧасть.Серия КАК Серия,
						|	МИНИМУМ(ВЫБОР
						|			КОГДА (ВЫРАЗИТЬ(ЕСТЬNULL(ТабЧасть.КоличествоОстаток, 0) / ТоварныеМестаВНоменклатуре.КоличествоМест КАК ЧИСЛО(12, 0)))
						|					- ЕСТЬNULL(ТабЧасть.КоличествоОстаток, 0) / ТоварныеМестаВНоменклатуре.КоличествоМест <= 0
						|				ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ТабЧасть.КоличествоОстаток, 0) / ТоварныеМестаВНоменклатуре.КоличествоМест КАК ЧИСЛО(12, 0))
						|			ИНАЧЕ (ВЫРАЗИТЬ(ЕСТЬNULL(ТабЧасть.КоличествоОстаток, 0) / ТоварныеМестаВНоменклатуре.КоличествоМест КАК ЧИСЛО(12, 0))) - 1
						|		КОНЕЦ) КАК КоличествоКомплектов
						|ПОМЕСТИТЬ ЦелыеКомплекты
						|ИЗ
						|	ТоварныеМестаВНоменклатуре КАК ТоварныеМестаВНоменклатуре
						|		
						|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварныеМестаВДокументе КАК ТабЧасть
						|		ПО ТабЧасть.Ссылка = ТоварныеМестаВНоменклатуре.Ссылка
						|			И ТабЧасть.Номенклатура = ТоварныеМестаВНоменклатуре.Номенклатура
						|			И ТабЧасть.ТоварноеМесто = ТоварныеМестаВНоменклатуре.ТоварноеМесто
						|		
						|СГРУППИРОВАТЬ ПО
						|	ТабЧасть.Ссылка,
						|	ТабЧасть.Номенклатура,
						|	ТабЧасть.Характеристика,
						|	ТабЧасть.Назначение,
						|	ТабЧасть.Серия
						|ИМЕЮЩИЕ
						|	МИНИМУМ(ВЫБОР
						|			КОГДА (ВЫРАЗИТЬ(ЕСТЬNULL(ТабЧасть.КоличествоОстаток, 0) / ТоварныеМестаВНоменклатуре.КоличествоМест КАК ЧИСЛО(12, 0)))
						|					- ЕСТЬNULL(ТабЧасть.КоличествоОстаток, 0) / ТоварныеМестаВНоменклатуре.КоличествоМест <= 0
						|				ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ТабЧасть.КоличествоОстаток, 0) / ТоварныеМестаВНоменклатуре.КоличествоМест КАК ЧИСЛО(12, 0))
						|			ИНАЧЕ (ВЫРАЗИТЬ(ЕСТЬNULL(ТабЧасть.КоличествоОстаток, 0) / ТоварныеМестаВНоменклатуре.КоличествоМест КАК ЧИСЛО(12, 0))) - 1
						|		КОНЕЦ) <> 0";
					ТекстыВтИЗапроса.Добавить(Текст);
					
			КонецЕсли;
				
			Текст =
				"ВЫБРАТЬ
				|	Набор.Регистратор КАК Регистратор
				|ИЗ(
				|	ВЫБРАТЬ
				|		РаспределениеЗапасовДвижения.Период КАК Период,
				|		РаспределениеЗапасовДвижения.Регистратор КАК Регистратор,
				|		РаспределениеЗапасовДвижения.Номенклатура КАК Номенклатура,
				|		РаспределениеЗапасовДвижения.Характеристика КАК Характеристика,
				|		РаспределениеЗапасовДвижения.Склад КАК Склад,
				|		РаспределениеЗапасовДвижения.Назначение КАК Назначение,
				|		РаспределениеЗапасовДвижения.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
				|		РаспределениеЗапасовДвижения.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
				|		РаспределениеЗапасовДвижения.ЗаказНаПоступление КАК ЗаказНаПоступление,
				|		РаспределениеЗапасовДвижения.ДатаПоступления КАК ДатаПоступления,
				|		-РаспределениеЗапасовДвижения.Отгрузить КАК Отгрузить,
				|		-РаспределениеЗапасовДвижения.Резервировать КАК Резервировать,
				|		-РаспределениеЗапасовДвижения.КОбеспечению КАК КОбеспечению,
				|		-РаспределениеЗапасовДвижения.НеОбеспечивать КАК НеОбеспечивать,
				|		-РаспределениеЗапасовДвижения.Поступило КАК Поступило,
				|		-РаспределениеЗапасовДвижения.ПоступитКДате КАК ПоступитКДате,
				|		-РаспределениеЗапасовДвижения.ПоставкаНаСогласовании КАК ПоставкаНаСогласовании,
				|		-РаспределениеЗапасовДвижения.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
				|		-РаспределениеЗапасовДвижения.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки,
				|		РаспределениеЗапасовДвижения.Сторно КАК Сторно,
				|		РаспределениеЗапасовДвижения.ИгнорироватьРезервыПриКонтролеОстатков КАК ИгнорироватьРезервыПриКонтролеОстатков
				|	ИЗ
				|		РегистрНакопления.РаспределениеЗапасовДвижения КАК РаспределениеЗапасовДвижения
				|ГДЕ
				|	ТИПЗНАЧЕНИЯ(РаспределениеЗапасовДвижения.Регистратор) = ТИП(Документ.ПриходныйОрдерНаТовары)
				|	
				|	ОБЪЕДИНИТЬ ВСЕ
				|	
				|	ВЫБРАТЬ
				|		ТекстыДвижений.Период КАК Период,
				|		ТекстыДвижений.Регистратор КАК Регистратор,
				|		ТекстыДвижений.Номенклатура КАК Номенклатура,
				|		ТекстыДвижений.Характеристика КАК Характеристика,
				|		ТекстыДвижений.Склад КАК Склад,
				|		ТекстыДвижений.Назначение КАК Назначение,
				|		ТекстыДвижений.ЗаказНаОтгрузку КАК ЗаказНаОтгрузку,
				|		ТекстыДвижений.ЖелаемаяДатаОтгрузки КАК ЖелаемаяДатаОтгрузки,
				|		ТекстыДвижений.ЗаказНаПоступление КАК ЗаказНаПоступление,
				|		ТекстыДвижений.ДатаПоступления КАК ДатаПоступления,
				|		ТекстыДвижений.Отгрузить КАК Отгрузить,
				|		ТекстыДвижений.Резервировать КАК Резервировать,
				|		ТекстыДвижений.КОбеспечению КАК КОбеспечению,
				|		ТекстыДвижений.НеОбеспечивать КАК НеОбеспечивать,
				|		ТекстыДвижений.Поступило КАК Поступило,
				|		ТекстыДвижений.ПоступитКДате КАК ПоступитКДате,
				|		ТекстыДвижений.ПоставкаНаСогласовании КАК ПоставкаНаСогласовании,
				|		ТекстыДвижений.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления,
				|		ТекстыДвижений.ЗакрытьГрафикОтгрузки КАК ЗакрытьГрафикОтгрузки,
				|		ТекстыДвижений.Сторно КАК Сторно,
				|		ТекстыДвижений.ИгнорироватьРезервыПриКонтролеОстатков КАК ИгнорироватьРезервыПриКонтролеОстатков
				|	ИЗ
				|		ТекстыДвиженийПереопределяемый КАК ТекстыДвижений) КАК Набор
				|СГРУППИРОВАТЬ ПО
				|		Набор.Период,
				|		Набор.Регистратор,
				|		Набор.Номенклатура,
				|		Набор.Характеристика,
				|		Набор.Склад,
				|		Набор.Назначение,
				|		Набор.ЗаказНаОтгрузку,
				|		Набор.ЖелаемаяДатаОтгрузки,
				|		Набор.ЗаказНаПоступление,
				|		Набор.ДатаПоступления,
				|		Набор.Сторно,
				|		Набор.ИгнорироватьРезервыПриКонтролеОстатков
				|ИМЕЮЩИЕ
				|	СУММА(Набор.Отгрузить) <> 0
				|		ИЛИ СУММА(Набор.Резервировать) <> 0
				|		ИЛИ СУММА(Набор.КОбеспечению) <> 0
				|		ИЛИ СУММА(Набор.НеОбеспечивать) <> 0
				|		ИЛИ СУММА(Набор.Поступило) <> 0
				|		ИЛИ СУММА(Набор.ПоступитКДате) <> 0
				|		ИЛИ СУММА(Набор.ПоставкаНаСогласовании) <> 0
				|		ИЛИ СУММА(Набор.ЗакрытьГрафикПоступления) <> 0
				|		ИЛИ СУММА(Набор.ЗакрытьГрафикОтгрузки) <> 0";
			Текст = СтрЗаменить(Текст, "Документ.ПриходныйОрдерНаТовары", ПолноеИмяДокумента);
			
			ТекстыВтИЗапроса.Добавить(Текст);
			Текст = СтрСоединить(ТекстыВтИЗапроса, ОбщегоНазначения.РазделительПакетаЗапросов());
			
			Запрос = Новый Запрос();
			Запрос.Текст = СтрЗаменить(Текст, "ТекстыДвиженийПереопределяемый", СтрШаблон("(%1)", ТекстЗапроса));
			
			Для Каждого Элемент Из ЗначенияПараметров Цикл
				Запрос.УстановитьПараметр(Элемент.Ключ, Элемент.Значение);
			КонецЦикла;
			Регистраторы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Регистратор");
			
		Иначе
			
			РезультатАдаптации = ОбновлениеИнформационнойБазыУТ.РезультатАдаптацииЗапроса();
			
			РезультатАдаптации.ЗначенияПараметров = ЗначенияПараметров;
			РезультатАдаптации.ТекстЗапроса = ТекстЗапроса;
			Регистраторы = ОбновлениеИнформационнойБазыУТ.РегистраторыДляПерепроведения(
				РезультатАдаптации, ПолноеИмяРегистра, ПолноеИмяДокумента);
			
		КонецЕсли;
		
		ОбновлениеИнформационнойБазы.ОтметитьРегистраторыКОбработке(Параметры, Регистраторы, ПолноеИмяРегистра);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьДанныеДляПереходаНаНовуюВерсию(Параметры) Экспорт
	
	Регистраторы = Регистраторы();
	
	ДополнительныеПараметры = ОбновлениеИнформационнойБазыУТ.ДополнительныеПараметрыПерезаписиДвиженийИзОчереди();
	ДополнительныеПараметры.ПередатьДополнительныеСвойства = Истина;
	ДополнительныеПараметры.ДополнительныеСвойстваНабораЗаписей = Новый Структура("ОтключитьРасчетИтогов");
	ДополнительныеПараметры.ОбновляемыеДанные = Параметры.ОбновляемыеДанные;
	ОбработкаЗавершена = ОбновлениеИнформационнойБазыУТ.ПерезаписатьДвиженияИзОчереди(
		Регистраторы, "РегистрНакопления.РаспределениеЗапасовДвижения", Параметры.Очередь, ДополнительныеПараметры);
		
	Параметры.ОбработкаЗавершена = ОбработкаЗавершена;
	
КонецПроцедуры

#КонецОбласти

Функция ТекстЗапросаИсправленныеДвижения() Экспорт
	
	ТекстГруппировки = "";
	Регистраторы = Регистраторы();
	
	ИмяРегистра = "РаспределениеЗапасовДвижения";
	Регистры = Новый Структура(ИмяРегистра);
	ДопПараметры = ПроведениеДокументов.ДопПараметрыИнициализироватьДанныеДокументаДляПроведения();
	ДопПараметры.ПолучитьТекстыЗапроса = Истина;
	
	ТекстыИтоговые = Новый Массив();
	Типы = Новый Массив();
	Для Каждого ПолноеИмяДокумента Из Регистраторы Цикл
		ИмяДокумента = СтрРазделить(ПолноеИмяДокумента, ".")[1];
		
		ОбработатьДокумент = Ложь;
		Если ПолноеИмяДокумента = "Документ.ПриобретениеТоваровУслуг" Тогда
			ОбработатьДокумент = Истина;
		ИначеЕсли ПолноеИмяДокумента = "Документ.ОтчетОРозничныхПродажах" Тогда
			ОбработатьДокумент = Истина;
		ИначеЕсли ПолноеИмяДокумента = "Документ.ПоступлениеТоваровНаСклад" Тогда
			ОбработатьДокумент = Истина;
		ИначеЕсли ПолноеИмяДокумента = "Документ.ОтчетОРозничныхВозвратах" Тогда
			ОбработатьДокумент = Истина;
		ИначеЕсли ПолноеИмяДокумента = "Документ.ЧекККМКоррекции" Тогда
			ОбработатьДокумент = Истина;
		//++ НЕ УТКА
		ИначеЕсли ПолноеИмяДокумента = "Документ.ЭтапПроизводства2_2" Тогда
			ОбработатьДокумент = Истина;
		ИначеЕсли ПолноеИмяДокумента = "Документ.ЗаказНаПроизводство2_2" Тогда
			ОбработатьДокумент = Истина;
		//++ Устарело_Производство21
		ИначеЕсли ПолноеИмяДокумента = "Документ.КорректировкаЗаказаМатериаловВПроизводство" Тогда
			ОбработатьДокумент = Истина;
		ИначеЕсли ПолноеИмяДокумента = "Документ.МаршрутныйЛистПроизводства" Тогда
			ОбработатьДокумент = Истина;
		ИначеЕсли ПолноеИмяДокумента = "Документ.ЗаказНаПроизводство" Тогда
			ОбработатьДокумент = Истина;
		//-- Устарело_Производство21
		//-- НЕ УТКА
		ИначеЕсли ПолноеИмяДокумента = "Документ.АктОРасхожденияхПослеПриемки" Тогда
			ОбработатьДокумент = Истина;
		ИначеЕсли ПолноеИмяДокумента = "Документ.РеализацияТоваровУслуг" Тогда
			ОбработатьДокумент = Истина;
		ИначеЕсли ПолноеИмяДокумента = "Документ.ПередачаТоваровХранителю" Тогда
			ОбработатьДокумент = Истина;
		ИначеЕсли ПолноеИмяДокумента = "Документ.АктВыполненныхРабот" Тогда
			ОбработатьДокумент = Истина;
		ИначеЕсли ПолноеИмяДокумента = "Документ.ЗаявкаНаВозвратТоваровОтКлиента" Тогда
			ОбработатьДокумент = Истина;
		ИначеЕсли ПолноеИмяДокумента = "Документ.АктОРасхожденияхПослеОтгрузки" Тогда
			ОбработатьДокумент = Истина;
		ИначеЕсли ПолноеИмяДокумента = "Документ.ПриемкаТоваровНаХранение" Тогда
			ОбработатьДокумент = Истина;
		ИначеЕсли ПолноеИмяДокумента = "Документ.ПриходныйОрдерНаТовары" Тогда
			ОбработатьДокумент = Истина;
		ИначеЕсли ПолноеИмяДокумента = "Документ.ОрдерНаОтражениеИзлишковТоваров" Тогда
			ОбработатьДокумент = Истина;
		ИначеЕсли ПолноеИмяДокумента = "Документ.ОрдерНаОтражениеНедостачТоваров" Тогда
			ОбработатьДокумент = Истина;
		ИначеЕсли ПолноеИмяДокумента = "Документ.ОрдерНаОтражениеПересортицыТоваров" Тогда
			ОбработатьДокумент = Истина;
		ИначеЕсли ПолноеИмяДокумента = "Документ.ОрдерНаОтражениеПорчиТоваров" Тогда
			ОбработатьДокумент = Истина;
		ИначеЕсли ПолноеИмяДокумента = "Документ.КорректировкаПоОрдеруНаТовары" Тогда
			ОбработатьДокумент = Истина;
		ИначеЕсли ПолноеИмяДокумента = "Документ.КорректировкаИзлишковНедостачПоТоварнымМестам" Тогда
			ОбработатьДокумент = Истина;
		ИначеЕсли ПолноеИмяДокумента = "Документ.ПересчетТоваров" Тогда
			ОбработатьДокумент = Истина;
		//++ НЕ УТ
		ИначеЕсли ПолноеИмяДокумента = "Документ.РаспределениеВозвратныхОтходов" Тогда
			ОбработатьДокумент = Истина;
		ИначеЕсли ПолноеИмяДокумента = "Документ.ЗаказПереработчику" Тогда
			ОбработатьДокумент = Истина;
		ИначеЕсли ПолноеИмяДокумента = "Документ.ПередачаСырьяПереработичку" Тогда
			ОбработатьДокумент = Истина;
		ИначеЕсли ПолноеИмяДокумента = "Документ.ДвижениеПродукцииИМатериалов" Тогда
			ОбработатьДокумент = Истина;
		//-- НЕ УТ
		КонецЕсли;
		Если Не ОбработатьДокумент Тогда
			Продолжить;
		КонецЕсли;
		
		Типы.Добавить(СтрШаблон("ТИП(%1)", ПолноеИмяДокумента));
		
		ТекстЗапроса = РаспределениеЗапасовДвижения.ТекстыЗапросовПроведенияДокументов(ПолноеИмяДокумента);
		ТекстыИтоговые.Добавить(ТекстЗапроса);
		
	КонецЦикла;
	
	ВложенныйЗапрос = СтрСоединить(ТекстыИтоговые, ОбщегоНазначенияУТ.РазделительЗапросовВОбъединении());
	
	Запрос = Новый Запрос();
	Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЕстьЗаписи
		|ИЗ
		|	РегистрНакопления.РаспределениеЗапасовДвижения КАК Таблица";
	
	Если ТекстыИтоговые.Количество() > 0 И Не Запрос.Выполнить().Пустой() Тогда
		
		ТекстГруппировки =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	Набор.Номенклатура                    КАК Номенклатура,
			|	Набор.Характеристика                  КАК Характеристика,
			|	Набор.Склад                           КАК Склад,
			|	Набор.Назначение                      КАК Назначение
			|ПОМЕСТИТЬ ПроблемныеПозиции
			|ИЗ(
			|	ВЫБРАТЬ
			|		Таблица.Регистратор              КАК Регистратор,
			|		Таблица.Период                   КАК Период,
			|		Таблица.Номенклатура             КАК Номенклатура,
			|		Таблица.Характеристика           КАК Характеристика,
			|		Таблица.Склад                    КАК Склад,
			|		Таблица.Назначение               КАК Назначение,
			|		Таблица.ЗаказНаОтгрузку          КАК ЗаказНаОтгрузку,
			|		Таблица.ЖелаемаяДатаОтгрузки     КАК ЖелаемаяДатаОтгрузки,
			|		Таблица.ЗаказНаПоступление       КАК ЗаказНаПоступление,
			|		Таблица.ДатаПоступления          КАК ДатаПоступления,
			|		Таблица.Отгрузить                КАК Отгрузить,
			|		Таблица.Резервировать            КАК Резервировать,
			|		Таблица.КОбеспечению             КАК КОбеспечению,
			|		Таблица.НеОбеспечивать           КАК НеОбеспечивать,
			|		Таблица.Поступило                КАК Поступило,
			|		Таблица.ПоступитКДате            КАК ПоступитКДате,
			|		Таблица.ПоставкаНаСогласовании   КАК ПоставкаНаСогласовании,
			|		Таблица.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления
			|	ИЗ
			|		&ВложенныйЗапрос КАК Таблица
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Таблица.Регистратор               КАК Регистратор,
			|		Таблица.Период                    КАК Период,
			|		Таблица.Номенклатура              КАК Номенклатура,
			|		Таблица.Характеристика            КАК Характеристика,
			|		Таблица.Склад                     КАК Склад,
			|		Таблица.Назначение                КАК Назначение,
			|		Таблица.ЗаказНаОтгрузку           КАК ЗаказНаОтгрузку,
			|		Таблица.ЖелаемаяДатаОтгрузки      КАК ЖелаемаяДатаОтгрузки,
			|		Таблица.ЗаказНаПоступление        КАК ЗаказНаПоступление,
			|		Таблица.ДатаПоступления           КАК ДатаПоступления,
			|		-Таблица.Отгрузить                КАК Отгрузить,
			|		-Таблица.Резервировать            КАК Резервировать,
			|		-Таблица.КОбеспечению             КАК КОбеспечению,
			|		-Таблица.НеОбеспечивать           КАК НеОбеспечивать,
			|		-Таблица.Поступило                КАК Поступило,
			|		-Таблица.ПоступитКДате            КАК ПоступитКДате,
			|		-Таблица.ПоставкаНаСогласовании   КАК ПоставкаНаСогласовании,
			|		-Таблица.ЗакрытьГрафикПоступления КАК ЗакрытьГрафикПоступления
			|	ИЗ
			|		РегистрНакопления.РаспределениеЗапасовДвижения КАК Таблица
			|	ГДЕ
			|		НЕ Таблица.Регистратор ССЫЛКА Документ.КорректировкаРегистров
			|			И ТИПЗНАЧЕНИЯ(Таблица.Регистратор) В(&ТипыДляОбнолвенияПереопределяемый)) КАК Набор
			|СГРУППИРОВАТЬ ПО
			|	Набор.Регистратор,
			|	Набор.Период,
			|	Набор.Номенклатура,
			|	Набор.Характеристика,
			|	Набор.Склад,
			|	Набор.Назначение,
			|	Набор.ЗаказНаОтгрузку,
			|	Набор.ЖелаемаяДатаОтгрузки,
			|	Набор.ЗаказНаПоступление,
			|	Набор.ДатаПоступления
			|ИМЕЮЩИЕ
			|	СУММА(Набор.Отгрузить) <> 0
			|		ИЛИ СУММА(Набор.Резервировать) <> 0
			|		ИЛИ СУММА(Набор.КОбеспечению) <> 0
			|		ИЛИ СУММА(Набор.НеОбеспечивать) <> 0
			|		ИЛИ СУММА(Набор.Поступило) <> 0
			|		ИЛИ СУММА(Набор.ПоступитКДате) <> 0
			|		ИЛИ СУММА(Набор.ПоставкаНаСогласовании) <> 0
			|		ИЛИ СУММА(Набор.ЗакрытьГрафикПоступления) <> 0
			|ИНДЕКСИРОВАТЬ ПО
			|	Номенклатура, Характеристика, Склад, Назначение";
			
		ТекстГруппировки = СтрЗаменить(ТекстГруппировки, "&ВложенныйЗапрос", СтрШаблон("(%1)", ВложенныйЗапрос));
		ТекстГруппировки = СтрЗаменить(ТекстГруппировки, "&ТипыДляОбнолвенияПереопределяемый", СтрСоединить(Типы, ","));
		
		Тексты = Новый Массив();
		ТекстТоварныеМеста = ТекстТоварныеМеста();
			
		Тексты.Добавить(ТекстТоварныеМеста);
		Тексты.Добавить(ТекстГруппировки);
		ТекстГруппировки = СтрСоединить(Тексты, ОбщегоНазначения.РазделительПакетаЗапросов());
		
	КонецЕсли;
	
	Возврат ТекстГруппировки;
	
КонецФункции

// Возвращаемое значение:
//  Строка - текст запроса временной таблицы ТоварныеМеста
Функция ТекстТоварныеМеста() Экспорт
	
	Текст =
		"ВЫБРАТЬ
		|	ТабЧасть.Ссылка КАК Ссылка,
		|	ТабЧасть.Номенклатура КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	ТабЧасть.Назначение КАК Назначение,
		|	ТабЧасть.Серия КАК Серия,
		|	МАКСИМУМ(ТабЧасть.Упаковка) КАК Упаковка,
		|	НЕОПРЕДЕЛЕНО КАК НоменклатураОприходование,
		|	НЕОПРЕДЕЛЕНО КАК ХарактеристикаОприходование,
		|	НЕОПРЕДЕЛЕНО КАК НазначениеОприходование,
		|	НЕОПРЕДЕЛЕНО КАК СерияОприходование,
		|	НЕОПРЕДЕЛЕНО КАК УпаковкаОприходование,
		|	НЕОПРЕДЕЛЕНО КАК ВидОперации
		|ПОМЕСТИТЬ ТоварныеМеста
		|ИЗ
		|	Документ.ПриходныйОрдерНаТовары.Товары КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.Ссылка.Проведен
		|		И НЕ ТабЧасть.ЭтоУпаковочныйЛист
		|		И ТабЧасть.Количество <> 0
		|		И ТабЧасть.Упаковка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
		|		И ТабЧасть.Ссылка.Статус = Значение(Перечисление.СтатусыПриходныхОрдеров.Принят)
		|СГРУППИРОВАТЬ ПО
		|	ТабЧасть.Ссылка,
		|	ТабЧасть.Номенклатура,
		|	ТабЧасть.Характеристика,
		|	ТабЧасть.Назначение,
		|	ТабЧасть.Серия
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТабЧасть.Ссылка КАК Ссылка,
		|	ТабЧасть.Номенклатура КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	ТабЧасть.Назначение КАК Назначение,
		|	ТабЧасть.Серия КАК Серия,
		|	МАКСИМУМ(ТабЧасть.Упаковка) КАК Упаковка,
		|	НЕОПРЕДЕЛЕНО КАК НоменклатураОприходование,
		|	НЕОПРЕДЕЛЕНО КАК ХарактеристикаОприходование,
		|	НЕОПРЕДЕЛЕНО КАК НазначениеОприходование,
		|	НЕОПРЕДЕЛЕНО КАК СерияОприходование,
		|	НЕОПРЕДЕЛЕНО КАК УпаковкаОприходование,
		|	ТабЧасть.ВидОперации КАК ВидОперации
		|ИЗ
		|	Документ.КорректировкаИзлишковНедостачПоТоварнымМестам.Товары КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.Ссылка.Проведен
		|		И ТабЧасть.Упаковка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
		|СГРУППИРОВАТЬ ПО
		|	ТабЧасть.Ссылка,
		|	ТабЧасть.Номенклатура,
		|	ТабЧасть.Характеристика,
		|	ТабЧасть.Назначение,
		|	ТабЧасть.Серия,
		|	ТабЧасть.ВидОперации
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТабЧасть.Ссылка КАК Ссылка,
		|	ТабЧасть.Номенклатура КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	ТабЧасть.Назначение КАК Назначение,
		|	ТабЧасть.Серия КАК Серия,
		|	МАКСИМУМ(ТабЧасть.Упаковка) КАК Упаковка,
		|	НЕОПРЕДЕЛЕНО КАК НоменклатураОприходование,
		|	НЕОПРЕДЕЛЕНО КАК ХарактеристикаОприходование,
		|	НЕОПРЕДЕЛЕНО КАК НазначениеОприходование,
		|	НЕОПРЕДЕЛЕНО КАК СерияОприходование,
		|	НЕОПРЕДЕЛЕНО КАК УпаковкаОприходование,
		|	НЕОПРЕДЕЛЕНО КАК ВидОперации
		|ИЗ
		|	Документ.ОрдерНаОтражениеИзлишковТоваров.Товары КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.Ссылка.Проведен
		|		И ТабЧасть.Упаковка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
		|СГРУППИРОВАТЬ ПО
		|	ТабЧасть.Ссылка,
		|	ТабЧасть.Номенклатура,
		|	ТабЧасть.Характеристика,
		|	ТабЧасть.Назначение,
		|	ТабЧасть.Серия
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТабЧасть.Ссылка КАК Ссылка,
		|	ТабЧасть.Номенклатура КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	ТабЧасть.Назначение КАК Назначение,
		|	ТабЧасть.Серия КАК Серия,
		|	МАКСИМУМ(ТабЧасть.Упаковка) КАК Упаковка,
		|	НЕОПРЕДЕЛЕНО КАК НоменклатураОприходование,
		|	НЕОПРЕДЕЛЕНО КАК ХарактеристикаОприходование,
		|	НЕОПРЕДЕЛЕНО КАК НазначениеОприходование,
		|	НЕОПРЕДЕЛЕНО КАК СерияОприходование,
		|	НЕОПРЕДЕЛЕНО КАК УпаковкаОприходование,
		|	НЕОПРЕДЕЛЕНО КАК ВидОперации
		|ИЗ
		|	Документ.ОрдерНаОтражениеНедостачТоваров.Товары КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.Ссылка.Проведен
		|		И ТабЧасть.Упаковка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
		|СГРУППИРОВАТЬ ПО
		|	ТабЧасть.Ссылка,
		|	ТабЧасть.Номенклатура,
		|	ТабЧасть.Характеристика,
		|	ТабЧасть.Назначение,
		|	ТабЧасть.Серия
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТабЧасть.Ссылка КАК Ссылка,
		|	ТабЧасть.Номенклатура КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	ТабЧасть.Назначение КАК Назначение,
		|	ТабЧасть.Серия КАК Серия,
		|	МАКСИМУМ(ТабЧасть.Упаковка) КАК Упаковка,
		|	ТабЧасть.НоменклатураОприходование КАК НоменклатураОприходование,
		|	ТабЧасть.ХарактеристикаОприходование КАК ХарактеристикаОприходование,
		|	ТабЧасть.НазначениеОприходование КАК НазначениеОприходование,
		|	ТабЧасть.СерияОприходование КАК СерияОприходование,
		|	МАКСИМУМ(ТабЧасть.УпаковкаОприходование) КАК УпаковкаОприходование,
		|	НЕОПРЕДЕЛЕНО КАК ВидОперации
		|ИЗ
		|	Документ.ОрдерНаОтражениеПересортицыТоваров.Товары КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.Ссылка.Проведен
		|		И ТабЧасть.Упаковка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
		|СГРУППИРОВАТЬ ПО
		|	ТабЧасть.Ссылка,
		|	ТабЧасть.Номенклатура,
		|	ТабЧасть.Характеристика,
		|	ТабЧасть.Назначение,
		|	ТабЧасть.Серия,
		|	ТабЧасть.НоменклатураОприходование,
		|	ТабЧасть.ХарактеристикаОприходование,
		|	ТабЧасть.НазначениеОприходование,
		|	ТабЧасть.СерияОприходование
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТабЧасть.Ссылка КАК Ссылка,
		|	ТабЧасть.Номенклатура КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	ТабЧасть.Назначение КАК Назначение,
		|	ТабЧасть.Серия КАК Серия,
		|	МАКСИМУМ(ТабЧасть.Упаковка) КАК Упаковка,
		|	ТабЧасть.НоменклатураОприходование КАК НоменклатураОприходование,
		|	ТабЧасть.ХарактеристикаОприходование КАК ХарактеристикаОприходование,
		|	ВЫБОР КОГДА ТабЧасть.ПодНазначение ТОГДА
		|				ТабЧасть.Назначение
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ КАК НазначениеОприходование,
		|	НЕОПРЕДЕЛЕНО КАК СерияОприходование,
		|	МАКСИМУМ(ТабЧасть.УпаковкаОприходование) КАК УпаковкаОприходование,
		|	НЕОПРЕДЕЛЕНО КАК ВидОперации
		|ИЗ
		|	Документ.ОрдерНаОтражениеПорчиТоваров.Товары КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.Ссылка.Проведен
		|		И ТабЧасть.Упаковка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
		|СГРУППИРОВАТЬ ПО
		|	ТабЧасть.Ссылка,
		|	ТабЧасть.Номенклатура,
		|	ТабЧасть.Характеристика,
		|	ТабЧасть.Назначение,
		|	ТабЧасть.Серия,
		|	ТабЧасть.НоменклатураОприходование,
		|	ТабЧасть.ХарактеристикаОприходование,
		|	ВЫБОР КОГДА ТабЧасть.ПодНазначение ТОГДА
		|				ТабЧасть.Назначение
		|			ИНАЧЕ
		|				ЗНАЧЕНИЕ(Справочник.Назначения.ПустаяСсылка)
		|		КОНЕЦ
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка, Номенклатура, Характеристика, Назначение, Серия, Упаковка,
		|	НоменклатураОприходование, ХарактеристикаОприходование, НазначениеОприходование, СерияОприходование, УпаковкаОприходование, ВидОперации
		|;
		|
		|/////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабЧасть.Ссылка КАК Ссылка,
		|	ТабЧасть.Номенклатура КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	ТабЧасть.Назначение КАК Назначение,
		|	ТабЧасть.Упаковка КАК ТоварноеМесто,
		|	ВЫБОР
		|		КОГДА ТабЧасть.СтатусУказанияСерий В (4, 6, 8, 10, 14)
		|			ТОГДА ТабЧасть.Серия
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ КАК Серия,
		|	СУММА(ТабЧасть.КоличествоУпаковокФакт - ТабЧасть.КоличествоУпаковок) КАК КоличествоОстаток
		|ПОМЕСТИТЬ ТоварныеМестаВДокументе
		|ИЗ
		|	Документ.ПересчетТоваров.Товары КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.Ссылка.Проведен
		|		И ТабЧасть.Ссылка.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыПересчетовТоваров.Выполнено)
		|		И ТабЧасть.Ссылка.Склад.ИспользоватьОрдернуюСхемуПриОтраженииИзлишковНедостач
		|		И ТабЧасть.Ссылка.Склад.ДатаНачалаОрдернойСхемыПриОтраженииИзлишковНедостач <= ТабЧасть.Ссылка.Дата
		|		И ТабЧасть.Упаковка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
		|СГРУППИРОВАТЬ ПО
		|	ТабЧасть.Ссылка,
		|	ТабЧасть.Упаковка,
		|	ТабЧасть.Номенклатура,
		|	ТабЧасть.Характеристика,
		|	ТабЧасть.Назначение,
		|	ВЫБОР
		|		КОГДА ТабЧасть.СтатусУказанияСерий В (4, 6, 8, 10, 14)
		|			ТОГДА ТабЧасть.Серия
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ
		|ИМЕЮЩИЕ
		|	СУММА(ТабЧасть.КоличествоУпаковокФакт - ТабЧасть.КоличествоУпаковок) <> 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТабЧасть.Ссылка КАК Ссылка,
		|	ТабЧасть.Номенклатура КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	ТабЧасть.Назначение КАК Назначение,
		|	ТабЧасть.Упаковка КАК ТоварноеМесто,
		|	ВЫБОР
		|		КОГДА ТабЧасть.СтатусУказанияСерий В (4, 6, 8, 10, 14)
		|			ТОГДА ТабЧасть.Серия
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ КАК Серия,
		|	СУММА(ВЫБОР
		|			КОГДА ТабЧасть.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировокОстатковТоваров.ОтразитьИзлишек)
		|					ИЛИ ТабЧасть.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировокОстатковТоваров.ОтразитьИзлишекОставитьВЗонеОтгрузки)
		|				ТОГДА ТабЧасть.КоличествоУпаковок
		|			КОГДА ТабЧасть.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировокОстатковТоваров.ОтразитьНедостачу)
		|				ТОГДА -ТабЧасть.КоличествоУпаковок
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК КоличествоОстаток
		|ИЗ
		|	Документ.КорректировкаПоОрдеруНаТовары.Товары КАК ТабЧасть
		|ГДЕ
		|	ТабЧасть.Ссылка.Проведен
		|		И ТабЧасть.ВидОперации В (
		|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировокОстатковТоваров.ОтразитьИзлишек),
		|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировокОстатковТоваров.ОтразитьНедостачу),
		|			ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировокОстатковТоваров.ОтразитьИзлишекОставитьВЗонеОтгрузки))
		|		И ТабЧасть.Упаковка.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
		|СГРУППИРОВАТЬ ПО
		|	ТабЧасть.Ссылка,
		|	ТабЧасть.Упаковка,
		|	ТабЧасть.Номенклатура,
		|	ТабЧасть.Характеристика,
		|	ТабЧасть.Назначение,
		|	ВЫБОР
		|		КОГДА ТабЧасть.СтатусУказанияСерий В (4, 6, 8, 10, 14)
		|			ТОГДА ТабЧасть.Серия
		|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.СерииНоменклатуры.ПустаяСсылка)
		|	КОНЕЦ
		|ИМЕЮЩИЕ
		|	СУММА(ВЫБОР
		|			КОГДА ТабЧасть.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировокОстатковТоваров.ОтразитьИзлишек)
		|					ИЛИ ТабЧасть.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировокОстатковТоваров.ОтразитьИзлишекОставитьВЗонеОтгрузки)
		|				ТОГДА ТабЧасть.КоличествоУпаковок
		|			КОГДА ТабЧасть.ВидОперации = ЗНАЧЕНИЕ(Перечисление.ВидыОперацийКорректировокОстатковТоваров.ОтразитьНедостачу)
		|				ТОГДА -ТабЧасть.КоличествоУпаковок
		|			ИНАЧЕ 0
		|		КОНЕЦ) <> 0
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка, Номенклатура, ТоварноеМесто
		|;
		|
		|////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТоварныеМестаОстатки.Ссылка КАК Ссылка,
		|	ТоварныеМестаОстатки.Номенклатура КАК Номенклатура,
		|	УпаковкиЕдиницыИзмерения.Ссылка КАК ТоварноеМесто,
		|	УпаковкиЕдиницыИзмерения.КоличествоУпаковок КАК КоличествоМест
		|ПОМЕСТИТЬ ТоварныеМестаВНоменклатуре
		|ИЗ
		|	Справочник.УпаковкиЕдиницыИзмерения КАК УпаковкиЕдиницыИзмерения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТоварныеМестаВДокументе КАК ТоварныеМестаОстатки
		|		ПО (УпаковкиЕдиницыИзмерения.Владелец = ВЫБОР
		|				КОГДА ТоварныеМестаОстатки.Номенклатура.НаборУпаковок = ЗНАЧЕНИЕ(Справочник.НаборыУпаковок.ИндивидуальныйДляНоменклатуры)
		|					ТОГДА ТоварныеМестаОстатки.Номенклатура.Ссылка
		|				ИНАЧЕ ТоварныеМестаОстатки.Номенклатура.НаборУпаковок
		|			КОНЕЦ)
		|ГДЕ
		|	УпаковкиЕдиницыИзмерения.ТипУпаковки = ЗНАЧЕНИЕ(Перечисление.ТипыУпаковокНоменклатуры.ТоварноеМесто)
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка, Номенклатура, ТоварноеМесто
		|;
		|
		|//////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТабЧасть.Ссылка КАК Ссылка,
		|	ТабЧасть.Номенклатура КАК Номенклатура,
		|	ТабЧасть.Характеристика КАК Характеристика,
		|	ТабЧасть.Назначение КАК Назначение,
		|	ТабЧасть.Серия КАК Серия,
		|	МИНИМУМ(ВЫБОР
		|			КОГДА (ВЫРАЗИТЬ(ЕСТЬNULL(ТабЧасть.КоличествоОстаток, 0) / ТоварныеМестаВНоменклатуре.КоличествоМест КАК ЧИСЛО(12, 0)))
		|					- ЕСТЬNULL(ТабЧасть.КоличествоОстаток, 0) / ТоварныеМестаВНоменклатуре.КоличествоМест <= 0
		|				ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ТабЧасть.КоличествоОстаток, 0) / ТоварныеМестаВНоменклатуре.КоличествоМест КАК ЧИСЛО(12, 0))
		|			ИНАЧЕ (ВЫРАЗИТЬ(ЕСТЬNULL(ТабЧасть.КоличествоОстаток, 0) / ТоварныеМестаВНоменклатуре.КоличествоМест КАК ЧИСЛО(12, 0))) - 1
		|		КОНЕЦ) КАК КоличествоКомплектов
		|ПОМЕСТИТЬ ЦелыеКомплекты
		|ИЗ
		|	ТоварныеМестаВНоменклатуре КАК ТоварныеМестаВНоменклатуре
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ ТоварныеМестаВДокументе КАК ТабЧасть
		|		ПО ТабЧасть.Ссылка = ТоварныеМестаВНоменклатуре.Ссылка
		|			И ТабЧасть.Номенклатура = ТоварныеМестаВНоменклатуре.Номенклатура
		|			И ТабЧасть.ТоварноеМесто = ТоварныеМестаВНоменклатуре.ТоварноеМесто
		|		
		|СГРУППИРОВАТЬ ПО
		|	ТабЧасть.Ссылка,
		|	ТабЧасть.Номенклатура,
		|	ТабЧасть.Характеристика,
		|	ТабЧасть.Назначение,
		|	ТабЧасть.Серия
		|ИМЕЮЩИЕ
		|	МИНИМУМ(ВЫБОР
		|			КОГДА (ВЫРАЗИТЬ(ЕСТЬNULL(ТабЧасть.КоличествоОстаток, 0) / ТоварныеМестаВНоменклатуре.КоличествоМест КАК ЧИСЛО(12, 0)))
		|					- ЕСТЬNULL(ТабЧасть.КоличествоОстаток, 0) / ТоварныеМестаВНоменклатуре.КоличествоМест <= 0
		|				ТОГДА ВЫРАЗИТЬ(ЕСТЬNULL(ТабЧасть.КоличествоОстаток, 0) / ТоварныеМестаВНоменклатуре.КоличествоМест КАК ЧИСЛО(12, 0))
		|			ИНАЧЕ (ВЫРАЗИТЬ(ЕСТЬNULL(ТабЧасть.КоличествоОстаток, 0) / ТоварныеМестаВНоменклатуре.КоличествоМест КАК ЧИСЛО(12, 0))) - 1
		|		КОНЕЦ) <> 0";
	
	Возврат Текст;
	
КонецФункции

#КонецОбласти

#КонецЕсли
