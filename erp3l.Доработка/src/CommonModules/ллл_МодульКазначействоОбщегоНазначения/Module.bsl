Функция ллл_ОпределениеЗадолженностиПоДокументуПТУ(ПТУ) экспорт
	// +++ 3L, Конилов Д.А. [01.06.2022] Задача ERP1C-90
	// Алгоритм предоставлен А. Тимофеевой
	// --- 3L, Конилов Д.А. [01.06.2022] Задача ERP1C-90 
	
	СтруктураОтвета = Новый Структура("Долг,Предоплата,СуммаНеоплаченныхЗаявок,СуммаНепроведенныхЗаявок,КОплате,Ошибка",0,0,0,0,0,"");
	Заказ = неопределено;
	Если не ЗначениеЗаполнено(ПТУ.ЗаказПоставщику) тогда
		СтруктураОтвета.Ошибка = "В документе ПТУ "+ ПТУ.Номер + " от " + Формат(ПТУ.Дата,"ДЛФ = Д") + " не определен заказ поставщику.";
		возврат(СтруктураОтвета);
	иначе
		заказ = ПТУ.ЗаказПоставщику;
	КонецЕсли;
	
	
	
	
	СтруктураОтвета.Предоплата = ллл_ОпределитьПредоплатуПоЗаказу(Заказ);
	
	СтруктураОтвета.Долг = ллл_ОпределитьДолгПоПТУ(ПТУ);
	
	СтруктураОтвета.СуммаНеоплаченныхЗаявок = ллл_ОпределитьСуммуНеоплаченныхЗаявок(Заказ,ПТУ);
	
	СтруктураОтвета.СуммаНепроведенныхЗаявок = ллл_ОпределитьСуммуНепроведенныхЗаявок(Заказ,ПТУ);
	
	СтруктураОтвета.КОплате = СтруктураОтвета.Долг-СтруктураОтвета.Предоплата - СтруктураОтвета.СуммаНеоплаченныхЗаявок - СтруктураОтвета.СуммаНепроведенныхЗаявок;
	
	возврат(СтруктураОтвета);
	
КонецФункции

Функция ллл_ОпределитьДолгПоПТУ(ПТУ) экспорт 
	Ответ = 0;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	isNULL(СУММА(з.Долг),0) КАК Долг
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыСПоставщикамиПоСрокамОбороты.ДолгПриход - РасчетыСПоставщикамиПоСрокамОбороты.ДолгРасход КАК Долг
	|	ИЗ
	|		РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Обороты(, , Регистратор, ОбъектРасчетов.Объект = &ПТУ) КАК РасчетыСПоставщикамиПоСрокамОбороты
	|	ГДЕ
	|		РасчетыСПоставщикамиПоСрокамОбороты.Регистратор <> &ПТУ) КАК з";
	//Если ЗначениеЗаполнено(ПТУ.Договор) тогда
	
	//	Если ПТУ.Договор.ВалютаВзаиморасчетов.Код<>"643" и  ПТУ.Договор.ОсновнаяВалютаПлатежей.Код = "643" тогда
	//		Запрос.Текст = стрЗаменить(Запрос.Текст,"ДолгПриход","ДолгРеглПриход");
	//		Запрос.Текст = стрЗаменить(Запрос.Текст,"ДолгРасход","ДолгРеглРасход");
	//		
	//	КонецЕсли;
	//КонецЕсли;
	
	Запрос.УстановитьПараметр("ПТУ",ПТУ);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() тогда
		Ответ = ВЫборка.Долг;
	КонецЕсли;
	
	возврат(Ответ);
КонецФункции  

Функция ллл_ОпределитьПредоплатуПоЗаказу(Заказ) экспорт
	Ответ = 0;
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ЕСТЬNULL(РасчетыСПоставщикамиПоСрокамОстатки.ПредоплатаОстаток, 0) КАК Предоплата
	|ИЗ
	|	РегистрНакопления.РасчетыСПоставщикамиПоСрокам.Остатки(, ОбъектРасчетов.Объект = &Заказ) КАК РасчетыСПоставщикамиПоСрокамОстатки";
	
	
	//Если ЗначениеЗаполнено(Заказ.Договор) тогда
	
	//		Если Заказ.Договор.ВалютаВзаиморасчетов.Код<>"643" и  Заказ.Договор.ОсновнаяВалютаПлатежей.Код = "643" тогда
	//			Запрос.Текст = стрЗаменить(Запрос.Текст,"ПредоплатаОстаток","ПредоплатаРеглОстаток");
	//						
	//		КонецЕсли;
	//КонецЕсли;
	
	Запрос.УстановитьПараметр("Заказ",заказ);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() тогда
		Ответ = ВЫборка.Предоплата;
	КонецЕсли;
	возврат(Ответ);
	
КонецФункции

Функция ллл_ОпределитьСуммуНеоплаченныхЗаявок(Заказ,ПТУ) экспорт
	Ответ = 0;
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(СостоянияИсполненияДокументовПланированияСрезПоследних.ДокументПланирования.СуммаДокумента) КАК Сумма
	|ИЗ
	|	РегистрСведений.СостоянияИсполненияДокументовПланирования.СрезПоследних(
	|			,
	|			( (&ИскатьПТУ и ДокументПланирования.ДокументОснование = &ПТУ)
	|				ИЛИ ДокументПланирования.ДокументОснование = &Заказ)
	|				И (СостояниеИсполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.необработана)
	|					ИЛИ СостояниеИсполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.ВключенаВРеестрПлатежей)
	|					ИЛИ СостояниеИсполнения = ЗНАЧЕНИЕ(Перечисление.СостоянияИсполненияЗаявки.НаИсполнении))) КАК СостоянияИсполненияДокументовПланированияСрезПоследних
	|ГДЕ
	|	СостоянияИсполненияДокументовПланированияСрезПоследних.ДокументПланирования.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("ПТУ",ПТУ);
	Запрос.УстановитьПараметр("ИскатьПТУ",значениеЗаполнено(ПТУ));
	Запрос.УстановитьПараметр("Заказ",заказ);
	Результат = Запрос.Выполнить();
	Выборка = результат.Выбрать();
	если Выборка.Следующий() тогда
		если ЗначениеЗаполнено(ВЫборка.Сумма) тогда
			Ответ = Выборка.Сумма;
		КонецЕсли;
	КонецЕсли;
	возврат(ответ);
КонецФункции	

Функция ллл_ОпределитьСуммуНепроведенныхЗаявок(Заказ,ПТУ) экспорт
	Ответ = 0;
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	СУММА(ЗаявкаНаРасходованиеДенежныхСредств.СуммаДокумента) КАК Сумма
	|ИЗ
	|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
	|ГДЕ
	|	ЗаявкаНаРасходованиеДенежныхСредств.ПометкаУдаления = ЛОЖЬ
	|	И ЗаявкаНаРасходованиеДенежныхСредств.Проведен = ЛОЖЬ
	|	И (ЗаявкаНаРасходованиеДенежныхСредств.ДокументОснование = &заказ
	|	Или (&ИскатьПТУ и ЗаявкаНаРасходованиеДенежныхСредств.ДокументОснование = &ПТУ)
	| )";
	Запрос.УстановитьПараметр("ПТУ",ПТУ);
	Запрос.УстановитьПараметр("Заказ",заказ);
	Запрос.УстановитьПараметр("ИскатьПТУ",ЗначениеЗаполнено(ПТУ));
	Результат = Запрос.Выполнить();
	Выборка = результат.Выбрать();
	
	если Выборка.Следующий() тогда
		если ЗначениеЗаполнено(ВЫборка.Сумма) тогда
			Ответ = Выборка.Сумма;
		КонецЕсли;
	КонецЕсли;
	возврат(ответ);
КонецФункции


Процедура ллл_АвтоматическоеСозданиеЗаявкиНаОплатуИмпортИОповещение(Ссылка,Автор,КакуюДатуПлатежаПоставить,СуммаПлатежа,Дополнительныйтекст = "") экспорт
	
	// +++ 3L, Конилов Д.А. [01.06.2022] Задача ERP1C-90
	// Вспомогательные процедуры и функции
	// --- 3L, Конилов Д.А. [01.06.2022] Задача ERP1C-90    
	
	//Если Документы.ЗаказПоставщику.ллл_ПоЗаказуЕстьСозданныеЗаявкиБезПометкиУдаления(Ссылка) тогда возврат;конецЕсли;
	
	КомуОтправлять = неопределено;
	Если ЗначениеЗаполнено(Автор) и не Ссылка.Автор.наименование = "<Не указан>" тогда
		КомуОтправлять = Автор;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Ссылка.Менеджер) и не ЗначениеЗаполнено(КомуОтправлять) и не Ссылка.Менеджер.наименование = "<Не указан>" тогда
		КомуОтправлять = Ссылка.Менеджер;
	КонецЕсли;
	
	Заявка = ллл_МодульКазначействоОбщегоНазначения.ллл_СоздатьЗаявкуНаОплатуИмпорт(Ссылка,КомуОтправлять,ложь,КакуюДатуПлатежаПоставить,СуммаПлатежа);
	
	ллл_МодульКазначействоОповещения.ОповещениеОСозданииЗаявкиНаОплату(Заявка,ДополнительныйТекст);
	
КонецПроцедуры




Функция НайтиДоговор(Организация,Контрагент,Валюта) экспорт
	возврат(ллл_ПоискЗначений.НайтиДоговор(Организация,Контрагент,Валюта));
конецФункции


Функция НайтиОбъектРасчетовПоДоговору(Договор)
	возврат(ллл_ПоискЗначений.НайтиОбъектРасчетовПоДоговору(Договор));
	
КонецФункции


Процедура ллл_СоздатьКроссЗаявкуАгентуПоДоставкеОтАгентаПоОплате(Предзаказ) экспорт 
	// +++ 3L, Конилов Д.А. [01.08.2022] Задача ERP1C-219
	// С 01.08 кросс-заявка формируется не только на агента по доставке. Если его в предзаказе нет, то формируем на завод-изготовитель.
	// --- 3L, Конилов Д.А. [01.08.2022] Задача ERP1C-219
	
	КодРС = Предзаказ.ллл_КодРС;
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ллл_РеквизитыКазначействаДляПредварительныхЗаказов.АгентПоОплате КАК АгентПоОплате,
	|	ллл_РеквизитыКазначействаДляПредварительныхЗаказов.АгентПоДоставке КАК АгентПоДоставке,
	|	ллл_РеквизитыКазначействаДляПредварительныхЗаказов.КроссДоговор КАК КроссДоговор
	|ИЗ
	|	РегистрСведений.ллл_РеквизитыКазначействаДляПредварительныхЗаказов КАК ллл_РеквизитыКазначействаДляПредварительныхЗаказов
	|ГДЕ
	|	ллл_РеквизитыКазначействаДляПредварительныхЗаказов.КодРС = &КодРС";
	Запрос.УстановитьПараметр("КодРС",КодРС);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() тогда 
		возврат;
	КонецЕсли;
	Выборка = Результат.Выбрать();
	Если не ВЫборка.Следующий() тогда 
		возврат;
	КонецЕсли;
	
	
	КроссДоговор = Выборка.КроссДоговор;
	АгентПоДоставке = Выборка.КроссДоговор.Контрагент;
	АгентПоОплате = Выборка.АгентПоОплате;
	
	Если ЗначениеЗаполнено(Выборка.АгентПоДоставке) тогда
		СуммаПлатежа = ПредЗаказ.Товары.Итог("СуммаАгентуПоДоставке");
	иначе
		// Лопатин. Если нет агента по доставке, то формируется заявка на оплату Заводу изготовителю.
		//СуммаПлатежа = ПредЗаказ.Товары.Итог("СуммаАгентуПоОплате");
		СуммаПлатежа = ПредЗаказ.Товары.Итог("СуммаСНДС");
	КонецЕсли;
	
	
	
	
	Если СуммаПлатежа = 0 или не ЗначениеЗаполнено(АгентПоОплате) или не ЗначениеЗаполнено(АгентПоДоставке) тогда возврат;конецЕсли;
	Валюта = Предзаказ.Валюта;
	Организация = НайтиОрганизациюПоИННиКПП(АгентПоОплате.ИНН,АгентПоОплате.КПП);
	Заявка = Документы.ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент();
	Заявка.Заполнить(КроссДоговор);
	Заявка.Организация = Организация;
	СтавкаНДС = Справочники.СтавкиНДС.БезНДС;
	//ВалютаВзаиморасчетов = Валюта;
	//ВалютаДокумента = ВалютаВзаиморасчетов;
	Курс = 1;
	Кратность = 1;
	Заявка.ФормаОплатыБезналичная = истина;
	Заявка.Контрагент = АгентПоДоставке;
	Заявка.ФормаОплатыЗаявки = Перечисления.Формыоплаты.Безналичная;
	Заявка.Партнер = Заявка.Контрагент.Партнер;
	//Заявка.Хозяйственнаяоперация = Перечисления.ХозяйственныеОперации.ОплатаПоставщику;
	//Заявка.ВидОперацииУХ = Справочники.ВидыОперацийУХ.ОплатаПоставщику;
	//Заявка.СтатьяДвиженияденежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтипоНаименованию("21.01_Приобретение импортного товара");
	Заявка.Дата = ТекущаяДата();
	Заявка.Договор = КроссДоговор;
	Заявка.ДокументОснование = Предзаказ;
	Заявка.Комментарий = "Предзаказ с кодом РС "+ строка(Предзаказ.ллл_КодРС);
	Заявка.Подразделение = Справочники.СтруктураПредприятия.НайтиПоНаименованию("Департамент закупок");
	
	Заявка.СуммаДокумента = СуммаПлатежа;
	Заявка.КтоЗаявил = ПредЗаказ.Автор;
	Заявка.Автор = ПредЗаказ.Автор;
	Заявка.Валюта = Валюта;
	Заявка.ВалютаОплаты = Валюта;
	ДатаПлатежа = КонецДня(ТекущаяДата())+1;
	//Заявка.КурсПлатежа = Курс;
	//Заявка.КратностьПлатежа = Кратность;
	Заявка.ДатаПлатежа = ДатаПлатежа;
	Заявка.ЖелательнаяДатаПлатежа = ДатаПлатежа;
	Заявка.ВнеМаршрута = истина;
	стр = Заявка.ДополнительныеРеквизиты.Добавить();
	стр.Свойство = ПланыВидовхарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Создано автоматически");
	стр.Значение = истина;
	РасшПлатежа = Заявка.расшифровкаПлатежа.Добавить();
	РасшПлатежа.ВалютаВзаиморасчетов = Заявка.Валюта;
	РасшПлатежа.СуммаВзаиморасчетов = СуммаПлатежа;
	РасшПлатежа.КурсЧислительВзаиморасчетов = Заявка.КурсПлатежа;
	РасшПлатежа.КурсЗнаменательВзаиморасчетов = Заявка.КратностьПлатежа;
	РасшПлатежа.СтатьяДвиженияДенежныхСредств = Заявка.СтатьяДвиженияденежныхСредств;
	РасшПлатежа.Партнер = Заявка.Контрагент.Партнер;
	РасшПлатежа.Сумма = СуммаПлатежа;
	РасшПлатежа.СтавкаНДС = СтавкаНДС;
	РасшПлатежа.СуммаНДС = 0;
	РасшПлатежа.ОбъектРасчетов = НайтиОбъектРасчетовПоДоговору(КроссДоговор);
	РасшПлатежа.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.ОсновнойДолг;
	РасшПлатежа.Организация = Заявка.Организация;
	РасшПлатежа.Партнер = Заявка.Партнер;
	РасшПлатежа.Подразделение = Заявка.Подразделение;
	Заявка.ЦФО = Заявка.Организация;
	Заявка.ДоговорКонтрагента = КроссДоговор;
	Заявка.УстановитьНовыйНомер(Заявка.организация.Префикс);
	Заявка.Записать();
	
	ллл_МодульКазначействоОповещения.ОповеститьАвтораОНеобходимостиДобавленияИнвойсов(Заявка.Ссылка,АгентПоОплате,АгентПоДоставке);
	
	ДокСписание = Документы.СписаниеБезналичныхДенежныхСредств.СоздатьДокумент();
	ДокСписание.Видплатежа = "электронно";
	ДокСписание.ТипПлатежногоДокумента = Перечисления.ТипыПлатежныхДокументов.ПлатежноеПоручение;
	ЗаполнитьЗначенияСвойств(ДокСписание,Заявка.Ссылка,,"Дата,Номер");
	стрДокСписание = ДокСписание.РасшифровкаПлатежа.Добавить();
	ЗаполнитьЗначенияСвойств(стрДокСписание,Заявка.Ссылка.РасшифровкаПлатежа[0]);
	стрДокСписание.ЗаявкаНаРасходованиеДенежныхСредств = Заявка.Ссылка;
	стрДокСписание.ЦФО = ДокСписание.Организация;
	ДокСписание.Дата = ТекущаяДата();
	ДокСписание.ОплатапоЗаявкам = истина;
	ДокСписание.УстановитьНовыйНомер(ДокСписание.Организация.Префикс);
	ДокСписание.ДокументОснование = Заявка.Ссылка;
	ДокСписание.ЗаявкаНаРасходованиеДенежныхСредств = Заявка.Ссылка;
	ДокСписание.Записать();
	
	ллл_МодульКазначействоОповещения.ОповеститьКазначействоОСозданияДокСписанияПоПеречислениюДенегОтАгентаПоОплатеАгентуПоДоставке(докСписание);
	
КонецПроцедуры	



Функция ллл_СоздатьЗаявкуНаОплатуИмпорт(Заказ,Автор,ПроверятьОстатокЗадолженности = ложь,ДатаПлатежа = '00010101',СуммаПлатежа = 0) экспорт
	
	// +++ 3L, Конилов Д.А. [31.05.2022] Задача ERP1C-90
	// Добавлены новые реквизиты казначейства, управление доступностью, видимостью и заполнением, созданием заявок
	// --- 3L, Конилов Д.А. [31.05.2022] Задача ERP1C-90 
	
	УстановитьПривилегированныйРежим(истина);
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
		|	ЗаявкаНаРасходованиеДенежныхСредств.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ЗаявкиЗаказа
		|ИЗ
		|	Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаНаРасходованиеДенежныхСредств
		|ГДЕ
		|	ЗаявкаНаРасходованиеДенежныхСредств.ДокументОснование = &Заказ
		|	И ЗаявкаНаРасходованиеДенежныхСредств.ПометкаУдаления = ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СписаниеБезналичныхДенежныхСредств.Ссылка КАК Платежка,
		|	СписаниеБезналичныхДенежныхСредств.ЗаявкаНаРасходованиеДенежныхСредств КАК Ссылка
		|ПОМЕСТИТЬ ВТ_ПлатежкиЗаявок
		|ИЗ
		|	Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
		|ГДЕ
		|	СписаниеБезналичныхДенежныхСредств.ПометкаУдаления = ЛОЖЬ
		|	И СписаниеБезналичныхДенежныхСредств.ЗаявкаНаРасходованиеДенежныхСредств В
		|			(ВЫБРАТЬ
		|				з.Ссылка
		|			ИЗ
		|				ВТ_ЗаявкиЗаказа КАК з)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ЗаявкиЗаказа.Ссылка КАК Ссылка,
		|	ВТ_ПлатежкиЗаявок.Ссылка КАК Ссылка1
		|ИЗ
		|	ВТ_ЗаявкиЗаказа КАК ВТ_ЗаявкиЗаказа
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ПлатежкиЗаявок КАК ВТ_ПлатежкиЗаявок
		|		ПО ВТ_ЗаявкиЗаказа.Ссылка = ВТ_ПлатежкиЗаявок.Ссылка
		|ГДЕ
		|	ВТ_ПлатежкиЗаявок.Ссылка ЕСТЬ NULL";
	
	Запрос.УстановитьПараметр("Заказ",Заказ);
	
	Результат = Запрос.Выполнить();
	Выборка = результат.Выбрать();
	пока ВЫборка.Следующий() цикл
		Об = ВЫборка.Ссылка.ПолучитьОбъект();
		Об.ПометкаУдаления = истина;
		Об.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		
		Запрос2 = Новый Запрос();
		Запрос2.Текст = "ВЫБРАТЬ
			|	ЭкземплярПроцесса.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.ЭкземплярПроцесса КАК ЭкземплярПроцесса
			|ГДЕ
			|	ЭкземплярПроцесса.ПометкаУдаления = ЛОЖЬ
			|	И ЭкземплярПроцесса.КлючевойОбъектПроцесса = &заявка";
		Запрос2.УстановитьПараметр("Заявка",Об.Ссылка);
		Результат2 = Запрос2.Выполнить();
		Выборка2 = Результат2.Выбрать();
		пока ВЫборка2.Следующий() цикл
			Об2 = ВЫборка2.Ссылка.ПолучитьОбъект();
			Об2.ПометкаУдаления = истина;
			Об2.Записать(РежимЗаписиДокумента.ОтменаПроведения);
		КонецЦикла;
	КонецЦикла;
	
	Если СуммаПлатежа = 0 тогда 
		СуммаПлатежа = Заказ.Суммадокумента;
	КонецЕсли;
	
	Заявка = Документы.ЗаявкаНаРасходованиеДенежныхСредств.СоздатьДокумент();
	Заявка.Заполнить(Заказ);
	
	СтавкаНДС = заказ.товары[0].СтавкаНДС;
	
	
	Если не ЗначениеЗаполнено(ДатаПлатежа) тогда
		ДатаПлатежа = КонецДня(ТекущаяДата())+1;
	иначе
		Если ДатаПлатежа<КонецДня(ТекущаяДата())+1 тогда
			ДатаПлатежа = КонецДня(ТекущаяДата())+1;
		КонецЕсли;
	КонецЕсли;
	
	
	
	
	Если Заказ.Хозяйственнаяоперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту тогда
		ВалютаВзаиморасчетов = Заказ.Валюта;
		ВалютаДокумента = ВалютаВзаиморасчетов;
		Курс = 1;
		Кратность = 1;
	иначе
		Если Заявка.Договор.ВалютаВзаиморасчетов<>Заявка.Договор.ОсновнаяВалютаПлатежей тогда
			ВалютаВзаиморасчетов = Заявка.Договор.ВалютаВзаиморасчетов;
			ВалютаДокумента = Справочники.Валюты.НайтиПоКоду("643");
			ТабКурс = РегистрыСведений.КурсыВалют.СрезПоследних(ДатаПлатежа,Новый Структура("Валюта",ВалютаВзаиморасчетов));
			Курс = ТабКурс[0].Курс;
			Кратность = ТабКурс[0].Кратность;
		иначе
			ВалютаВзаиморасчетов = Заявка.Договор.ВалютаВзаиморасчетов;
			ВалютаДокумента = ВалютаВзаиморасчетов;
			Курс = 1;
			Кратность = 1;
		КонецЕсли;
	КонецЕсли;
	
	Заявка.СуммаДокумента = СуммаПлатежа;
	Заявка.КтоЗаявил = Автор;
	Заявка.Автор = Автор;
	Заявка.Валюта = ВалютаВзаиморасчетов;
	Заявка.ВалютаОплаты = ВалютаДокумента;
	Заявка.КурсПлатежа = Курс;
	Заявка.КратностьПлатежа = Кратность;
	Заявка.ДатаПлатежа = ДатаПлатежа;
	Заявка.ЖелательнаяДатаПлатежа = ДатаПлатежа;
	Заявка.КрайняяДата = ДатаПлатежа+1;
	стр = Заявка.ДополнительныеРеквизиты.Добавить();
	стр.Свойство = ПланыВидовхарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Создано автоматически");
	стр.Значение = истина;
	
	
	Если Заявка.Контрагент.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицоНеРезидент тогда
		Заявка.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтипоНаименованию("21.01_Приобретение импортного товара");
		
	иначе
		Заявка.СтатьяДвиженияДенежныхСредств = Справочники.СтатьиДвиженияДенежныхСредств.НайтипоНаименованию("21.02_Приобретение товара РФ");
	КонецЕсли;
	
	
	
	РасшПлатежа = Заявка.расшифровкаПлатежа[0];
	РасшПлатежа.ВалютаВзаиморасчетов = Заявка.Валюта;
	РасшПлатежа.СуммаВзаиморасчетов = СуммаПлатежа;
	РасшПлатежа.КурсЧислительВзаиморасчетов = Заявка.КурсПлатежа;
	РасшПлатежа.КурсЗнаменательВзаиморасчетов = Заявка.КратностьПлатежа;
	расшПлатежа.СтатьяДвиженияДенежныхСредств = Заявка.СтатьяДвиженияДенежныхСредств;
	расшПлатежа.Партнер=заявка.Контрагент.Партнер;
	Если не ЗначениеЗаполнено(расшПлатежа.ОбъектРасчетов) тогда
		
		РасшПлатежа.ОбъектРасчетов = ллл_ПоискЗначений.НайтиОбъектРасчетовПоДоговору(Заявка.Договор);
	КонецЕсли;
	Заявка.КрайняяДата = ДатаПлатежа+1;
	
	Заявка.ДоговорКонтрагентаПолучатель=неопределено;
	
	Заявка.ОрганизацияПолучатель=неопределено;
	Заявка.ЭтоВнутригрупповоеПеремещение=ложь;
	Заявка.ДоговорКонтрагентаПолучатель=неопределено;
	
	
	//РасшПлатежа.Сумма = СуммаПлатежа*Курс/Кратность;
	РасшПлатежа.Сумма = СуммаПлатежа;
	РасшПлатежа.СуммаНДС = СуммаПлатежа/(100+СтавкаНДС.Ставка)*СтавкаНДС.Ставка;
	РасшПлатежа.ЭлементСтруктурыЗадолженности = Перечисления.ЭлементыСтруктурыЗадолженности.ОсновнойДолг;
	РасшПлатежа.Организация = Заявка.Организация;
	Заявка.ЦФО = Заявка.Организация;
	РасшПлатежа.СтавкаНДС = СтавкаНДС;
	//Заявка.НазначениеПлатежа = "payment to invoice №" + заказ.НомерПоДаннымПоставщика+ 
	//" from " + Формат(Заказ.ДатаПоДаннымПоставщика,"ДФ = ""гггг/ММ/дд""");
	
	Заявка.Статус = Перечисления.СтатусыЗаявокНаРасходованиеДенежныхСредств.КОплате;
	
	Если не ЗначениеЗаполнено(Заявка.БанковскийСчет) тогда
		Заявка.БанковскийСчет = ллл_ПоискЗначений.НайтиБанковскийСчетОрганизации(Заявка.Организация,Заявка.ВалютаОплаты);
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(Заявка.БанковскийСчетКонтрагента) тогда
		Заявка.БанковскийСчетКонтрагента = ллл_ПоискЗначений.НайтиБанковскийСчетКонтрагента(Заявка.Контрагент,Заявка.ВалютаОплаты);
	КонецЕсли;
	
	//Заявка.Записать();
	Заявка.УстановитьНовыйНомер(Заявка.организация.Префикс);
	
	//Заявка.Записать(РежимЗаписиДокумента.Запись);
	Заявка.Записать(РежимЗаписиДокумента.Проведение);
	
	
	
	
	
	Менеджер = ллл_ПоискЗначений.НайтиСоздатьЗаписьПлатежнойПозиции(Заявка.Ссылка);
	Если не ЗначениеЗаполнено(Менеджер.ИдентификаторПозиции) тогда
		Менеджер.ИдентификаторПозиции = Новый УникальныйИдентификатор();
		
	КонецЕсли;
	Менеджер.ЗаявкаНаОперацию = Заявка.Ссылка;
	ЗаполнитьЗначенияСвойств(Менеджер,Заявка.Ссылка);
	Менеджер.СуммаВзаиморасчетов = СуммаПлатежа;
	Менеджер.ВалютаВзаиморасчетов = заявка.Договор.ВалютаВзаиморасчетов;
	Менеджер.Сумма = Менеджер.СуммаВзаиморасчетов*Заявка.КурсПлатежа/Заявка.КратностьПлатежа;
	Менеджер.Датаисполнения = ДатаПлатежа;
	Менеджер.КурсПлатежа = Заявка.КурсПлатежа;
	Менеджер.КратностьПлатежа = Заявка.КратностьПлатежа;
	Менеджер.ДатаФиксацииКурсаПлатежа = ДатаПлатежа;
	Менеджер.СчетКонтрагента = Заявка.БанковскийСчетКонтрагента;
	Менеджер.ПРиходРасход = Перечисления.ВидыДвиженийПриходРасход.Расход;
	//Менеджер.ВалютаОплаты = Справочники.Валюты.НайтиПоКоду("643");
	Менеджер.Записать();
	
	УстановитьПривилегированныйРежим(ложь);
	
	
	возврат(Заявка.Ссылка);
КонецФункции  


Функция НайтиОрганизациюПоИННиКПП(ИНН,КПП) экспорт
	возврат(ллл_ПоискЗначений.НайтиОрганизациюПоИННиКПП(ИНН,КПП));
	
	
КонецФункции

Процедура ЗаполнитьНаОснованииПредЗаказа(Предзаказ,заказ = неопределено,СоздаватьЗаявку = неопределено) экспорт 
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ллл_РеквизитыКазначействаДляПредварительныхЗаказов.АгентПоОплате КАК АгентПоОплате,
		|	ллл_РеквизитыКазначействаДляПредварительныхЗаказов.АгентПоДоставке КАК АгентПоДоставке,
		|	ллл_РеквизитыКазначействаДляПредварительныхЗаказов.ДоговорАгентаПоОплате КАК ДоговорАгентаПоОплате,
		|	ллл_РеквизитыКазначействаДляПредварительныхЗаказов.ОбработаноРуководителемКазначейства КАК ОбработаноРуководителемКазначейства,
		|	ллл_РеквизитыКазначействаДляПредварительныхЗаказов.ДоговорАгентаПоДоставке КАК ДоговорАгентаПоДоставке,
		|	ллл_РеквизитыКазначействаДляПредварительныхЗаказов.ПроцентНаценкиАгентаПоОплате КАК ПроцентНаценкиАгентаПоОплате,
		|	ллл_РеквизитыКазначействаДляПредварительныхЗаказов.ПроцентНаценкиАгентаПоДоставке КАК ПроцентНаценкиАгентаПоДоставке,
		|	ллл_РеквизитыКазначействаДляПредварительныхЗаказов.ИспользоватьСложныйПроцент КАК ИспользоватьСложныйПроцент
		|ИЗ
		|	РегистрСведений.ллл_РеквизитыКазначействаДляПредварительныхЗаказов КАК ллл_РеквизитыКазначействаДляПредварительныхЗаказов
		|ГДЕ
		|	ллл_РеквизитыКазначействаДляПредварительныхЗаказов.КодРС = &КодРС";
	
	Запрос.УстановитьПараметр("КодРС", Предзаказ.ллл_КодРС);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ТипЗаполнения = 0;
	Если Выборка.Следующий() тогда
		Если ЗначениеЗаполнено(Выборка.ДоговорАгентаПоОплате) тогда
			ТипЗаполнения = 2;
		иначеЕсли ЗначениеЗаполнено(Выборка.ДоговорАгентаПоДоставке) тогда
			ТипЗаполнения = 1;
		Иначе
			ТипЗаполнения = 0;
		КонецЕсли;
	КонецЕсли;
	
	Если не заказ = неопределено тогда
		Если типЗнч(Заказ) = тип("ДокументСсылка.Заказпоставщику") тогда
			
			Док = Заказ.ПолучитьОбъект();
		иначеЕсли типЗнч(Заказ) = тип("ДокументОбъект.Заказпоставщику") тогда
			Док = Заказ;
		иначе
			Док = Документы.ЗаказПоставщику.СоздатьДокумент();
		КОнецЕсли;
		
		Док.Товары.Очистить();
		
		
	иначе
		
		Док = Документы.ЗаказПоставщику.СоздатьДокумент();
	КонецЕсли;
	
	заполнитьЗначенияСвойств(Док, Предзаказ,, "Номер,Дата");
	Если типЗаполнения = 2 тогда
		Док.ХозяйственнаяОперация = Выборка.ДоговорАгентаПоОплате.ХозяйственнаяОперация;
		Док.Контрагент = ВЫборка.АгентПоОплате;
		Док.Договор = Выборка.ДоговорАгентаПоОплате;
		Док.Партнер = Док.Контрагент.Партнер;
		Док.Соглашение = НайтиСоглашение(Док.Партнер,Док.Контрагент,Док.Валюта);
	КонецЕсли;
	
	Если типЗаполнения = 1 тогда
		Док.Контрагент = ВЫборка.АгентПоДоставке;
		Док.Договор = Выборка.ДоговорАгентаПоДоставке;
		Док.Партнер = Док.Контрагент.Партнер;
		Док.Соглашение = НайтиСоглашение(Док.Партнер,Док.Контрагент,Док.Валюта);
	КонецЕсли;
	
	// Лопатин.
	Если ЗначениеЗаполнено(Док.Договор) Тогда
		Док.ГруппаФинансовогоУчета = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Док.Договор, "ГруппаФинансовогоУчета");
		ПараметрыЗаполнения = Документы.ЗаказПоставщику.ПараметрыЗаполненияНалогообложенияНДСЗакупки(Док);
		УчетНДСУП.ЗаполнитьНалогообложениеНДСЗакупки(Док.НалогообложениеНДС, ПараметрыЗаполнения);
		ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Док.Договор, Док.БанковскийСчет);
		АналитикиПланированияДокументов.ЗаполнитьАналитикиПланированияПоДоговору(Док.Договор, Док);
		ПараметрыЗаполнения = Документы.ЗаказПоставщику.ПараметрыЗаполненияВидаДеятельностиНДС(Док);
		УчетНДСУП.ЗаполнитьВидДеятельностиНДС(Док.ЗакупкаПодДеятельность, ПараметрыЗаполнения);
	КонецЕсли;
	//
	
	Док.ДокументОснование = Предзаказ;
	Док.ВариантПриемкиТоваров = Перечисления.ВариантыПриемкиТоваров.РазделенаТолькоПоНакладным;
	Док.ДатаПоступления = КонецДня(Текущаядата()+1);
	Док.ЖелаемаяДатаПоступления = Док.датаПОступления;
	Док.ДатаПервогоПоступления = Док.ДатаПоступления;
	Док.ПоступлениеОднойДатой = истина;
	Если не ЗначениеЗаполнено(Док.ДатаПоступления) тогда Док.ДатаПОступления = КонецДня(ТекущаяДата())+1;конецЕсли;
	Если не ЗначениеЗаполнено(Док.ЖелаемаяДатаПоступления) тогда Док.ЖелаемаяДатаПоступления = Док.ДатаПоступления;конецЕсли;
	Док.ДатаПервогоПоступления = Док.ДатаПоступления;
	
	Док.Статус = Перечисления.СтатусыЗаказовПоставщикам.Подтвержден;
	Док.Согласован = истина;
	Док.Склад = Справочники.Склады.найтипоНаименованию("софр");
	
	СтрокаКодРСНайдена = ложь;
	для каждого стрДопРекв из Док.Дополнительныереквизиты цикл
		Если стрДопРекв.Свойство = ллл_ПоискЗначений.ПолучитьСвойствоКодРС() тогда
			СтрокаКодРСНайдена = истина;
			стрДопРекв.Значение = Предзаказ.ллл_КодРС;
			прервать;
		КонецЕсли;
	КонецЦикла;
	
	
	
	Если не СтрокаКодРСНайдена тогда
		стр = Док.Дополнительныереквизиты.Добавить();
		стр.Свойство = ллл_ПоискЗначений.ПолучитьСвойствоКодРС();
		стр.Значение = Предзаказ.ллл_КодРС;
	КонецЕсли;
	
	
	_СуммаДокумента = 0;
	для каждого стрПредзаказ из Предзаказ.Товары цикл
		стр = Док.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(стр,стрПредзаказ);
		Если ТипЗаполнения = 2 тогда
			стр.Сумма = стрПредзаказ.СуммаАгентуПоОплате;
			стр.СуммаСНДС = стр.Сумма;
			стр.Цена = стр.СуммаСНДС/стр.Количество;
			
		КонецЕсли;
		
		Если ТипЗаполнения = 1 тогда
			стр.Сумма = стрПредзаказ.СуммаАгентуПоДоставке;
			стр.СуммаСНДС = стр.Сумма;
			стр.Цена = стр.СуммаСНДС/стр.Количество;
		КонецЕсли;
		
		_СуммаДокумента = _СуммаДокумента+стр.СуммаСНДС;
		
		
		стр.СтавкаНДС = Справочники.СтавкиНДС.БезНдс;
		стр.ДатаПоступления = Док.ДатаПоступления;
		стр.Склад = Док.Склад;
	КонецЦикла;
	Док.ПометкаУдаления = ложь;
	Док.СуммаДокумента = _СуммаДокумента;
	Док.Дата = Текущаядата();
	Док.УстановитьНовыйНомер(Док.Организация.Префикс);
	Док.Автор = Предзаказ.Автор;
	
	УстановитьПривилегированныйрежим(истина);
	попытка
		Док.Записать(РежимЗаписиДокумента.Проведение);
		
	исключение
		Док.ОбменДанными.Загрузка = истина;
		Док.Записать();
	КонецПопытки;
	УстановитьПривилегированныйрежим(ложь);
	
	// Автор сбрасывается в типовой подписке УстановитьАвтораОбъектаПередЗаписью в модуле ЗаполнениеОбъектовПоСтатистике. Процедура переопределена в расширении	
	
	//для отладки.
	//ллл_МодульКазначействоОбщегоНазначения.ллл_АвтоматическоеСозданиеЗаявкиНаОплатуИмпортИОповещение(Док.Ссылка,Предзаказ.Автор,'00010101',0,"кузькина мать");
	
	Если Док.Проведен и не Создаватьзаявку = ложь тогда
		ПараметрыФоновогоЗадания = Новый Массив;
		ПараметрыФоновогоЗадания.Добавить(Док.Ссылка);
		ПараметрыФоновогоЗадания.Добавить(Предзаказ.Автор);
		ПараметрыФоновогоЗадания.Добавить('00010101');
		ПараметрыФоновогоЗадания.Добавить(0);
		ПараметрыФоновогоЗадания.Добавить("При необходимости скорректируйте суммы в системе ""Русский стиль""");
		
		ФоновыеЗадания.Выполнить("ллл_МодульКазначействоОбщегоНазначения.ллл_АвтоматическоеСозданиеЗаявкиНаОплатуИмпортИОповещение",
			ПараметрыФоновогоЗадания,
			строка(Новый УникальныйИдентификатор),
			"Создание заявки к заказу "+строка(Док.Ссылка));
	КонецЕсли;
	
КонецПроцедуры


Функция НайтиСоглашение(Партнер,Контрагент,Валюта) экспорт
	возврат(ллл_ПоискЗначений.НайтиСоглашение(Партнер,Контрагент,Валюта));
КонецФункции



Процедура СоздатьЗаявкуНаОплатуНаОснованииПТУ(ПТУ,КОплате = 0) экспорт
	
	//Если ПТУ.Хозяйственнаяоперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту тогда возврат;конецЕсли;
	//Если не ПТУ.Проведен тогда возврат;конецЕсли;
	//Если не ЗначениеЗаполнено(ПТУ.ЗаказПоставщику) тогда возврат;конецЕсли;
	//Если не ЗначениеЗаполнено(ПТУ.Договор) тогда возврат;конецЕсли;
	//Если ПТУ.ЗаказПоставщику.Дата< 
	//	л3_СерверПовтИсп.ЗначениеНетиповойКонстанты("Дата начала применения автоматического создания заявок на оплату на осн. ПТУ (3l)") тогда
	//	возврат;
	//конецЕсли;
	
	
	
	
	Если КОплате = 0 тогда
		СтруктураДанныхПоЗадолженностиПоПТУ = ллл_МодульКазначействоОбщегоНазначения.ллл_ОпределениеЗадолженностиПоДокументуПТУ(ПТУ);
		КОплате = СтруктураДанныхПоЗадолженностиПоПТУ.КОплате;
		Если СтруктураДанныхПоЗадолженностиПоПТУ.Ошибка<>"" или КОплате<= 0.1 тогда
			возврат;
		КонецЕсли;
	КонецЕсли;
	
	
	МассивСозданныхЗаявок = Новый Массив();
	
	Если не ЗначениеЗаполнено(ПТУ.Соглашение) тогда		
		
		
		
		МассивСозданныхЗаявок.Добавить(
		ллл_МодульКазначействоОбщегоНазначения.ллл_СоздатьЗаявкуНаОплатуИмпорт(ПТУ.заказпоставщику,ПТУ.заказпоставщику.Автор,ложь,КонецДня(Текущаядата())+1,КОплате)
		);
		
	иначе 
		
		РаспределеноСумма = 0;
		РаспределеноПроцентов = 0;
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ
		|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.Сдвиг КАК Сдвиг,
		|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.ПроцентПлатежа КАК ПроцентПлатежа,
		|	0 КАК СуммаПлатежа
		|ИЗ
		|	Справочник.СоглашенияСПоставщиками.ЭтапыГрафикаОплаты КАК СоглашенияСПоставщикамиЭтапыГрафикаОплаты
		|ГДЕ
		|	СоглашенияСПоставщикамиЭтапыГрафикаОплаты.Ссылка = &Ссылка
		|	И СоглашенияСПоставщикамиЭтапыГрафикаОплаты.ВариантОплаты = ЗНАЧЕНИЕ(Перечисление.ВариантыОплатыПоставщику.КредитСдвиг)";
		
		
		Запрос.УстановитьПараметр("Ссылка",ПТУ.Соглашение);
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() тогда
			МассивСозданныхЗаявок.Добавить(
			ллл_МодульКазначействоОбщегоНазначения.ллл_СоздатьЗаявкуНаОплатуИмпорт(ПТУ,ПТУ.заказпоставщику.Автор,ложь,КонецДня(Текущаядата())+1,КОплате)
			);
			
		иначе	
			тзРаспределениеОплаты = Результат.Выгрузить();
			
			КолвоСтрокОплаты = тзРаспределениеОплаты.Количество();
			
			для Счетчик = 0 по КолвоСтрокОплаты-1 цикл
				строкаОплаты = тзРаспределениеОплаты[Счетчик];
				Если РаспределеноПроцентов+строкаОплаты.ПроцентПлатежа>100 тогда
					ПроцентПлатежа = 100-РаспределеноПроцентов;
					КолвоСтрокОплаты = Счетчик+1;
				иначе	
					ПроцентПлатежа = строкаОплаты.ПроцентПлатежа;
				КонецЕсли;
				СуммаПлатежа = окр(ПроцентПлатежа*КОплате/100,2,РежимОкругления.Окр15как10);
				Если Счетчик = КолвоСтрокОплаты-1 тогда
					СуммаПлатежа = КОплате-РаспределеноСумма;
				КонецЕсли;
				
				МассивСозданныхЗаявок.Добавить(
				ллл_МодульКазначействоОбщегоНазначения.ллл_СоздатьЗаявкуНаОплатуИмпорт(ПТУ,ПТУ.заказпоставщику.Автор,ложь,ПТУ.Дата+строкаОплаты.Сдвиг*24*60*60,СуммаПлатежа)
				);
				
				РаспределеноПроцентов = РаспределеноПроцентов+ПроцентПлатежа;
				РаспределеноСумма = РаспределеноСумма+СуммаПлатежа;
			КонецЦикла;
			
			
		КонецЕсли;
		
	КонецЕсли;
	
	для каждого заявка из МассивСозданныхЗаявок цикл
		
		ллл_МодульКазначействоОповещения.ОповещениеОСозданииЗаявкиНаОплату(заявка);
		
		
	КонецЦикла;
	
	
	
КонецПроцедуры





Функция СовпадаетНаполнениеЗаказаИПТУ(ПТУ) экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ПТУ);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПриобретениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ПриобретениеТоваровУслугТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ПТУ_Товары
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслугТовары
	|ГДЕ
	|	ПриобретениеТоваровУслугТовары.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ПриобретениеТоваровУслугТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаказПоставщикуТовары.Номенклатура КАК Номенклатура,
	|	СУММА(ЗаказПоставщикуТовары.Количество) КАК Количество
	|ПОМЕСТИТЬ ВТ_Заказ
	|ИЗ
	|	Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику.Товары КАК ЗаказПоставщикуТовары
	|		ПО (ЗаказПоставщикуТовары.Ссылка = ПриобретениеТоваровУслуг.ЗаказПоставщику)
	|			И (ЗаказПоставщикуТовары.Ссылка.Проведен)
	|ГДЕ
	|	ЗаказПоставщикуТовары.Ссылка.Проведен = ИСТИНА
	|	И ПриобретениеТоваровУслуг.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказПоставщикуТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	з.Номенклатура КАК Номенклатура,
	|	з.Количество КАК Количество,
	|	з.Номенклатура1 КАК Номенклатура1,
	|	з.Количество1 КАК Количество1
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВТ_Заказ.Номенклатура КАК Номенклатура,
	|		ВТ_Заказ.Количество КАК Количество,
	|		ПТУ_Товары.Номенклатура КАК Номенклатура1,
	|		ПТУ_Товары.Количество КАК Количество1
	|	ИЗ
	|		ВТ_Заказ КАК ВТ_Заказ
	|			ПОЛНОЕ СОЕДИНЕНИЕ ПТУ_Товары КАК ПТУ_Товары
	|			ПО ВТ_Заказ.Номенклатура = ПТУ_Товары.Номенклатура
	|				И (ПТУ_Товары.Количество = ВТ_Заказ.Количество)) КАК з
	|ГДЕ
	|	(з.Номенклатура ЕСТЬ NULL
	|			ИЛИ з.Номенклатура1 ЕСТЬ NULL)";
	Результат = Запрос.Выполнить();
	возврат(Результат.Пустой());
	
	
	
КонецФункции






Функция ПредЗаказДляДокументаПроцессаИмпортныхЗакупок(знач Док)
	
	Если типЗнч(Док) = тип("ДокументСсылка.ллл_ПредварительныйЗаказЗаводуИзготовителю") тогда
		возврат Док;
	КонецЕсли;
	
	пока значениеЗаполнено(Док.Документоснование) цикл
		Если типЗнч(Док.ДокументОснование) = тип("ДокументСсылка.ллл_ПредварительныйЗаказЗаводуИзготовителю") тогда
			возврат Док.ДокументОСнование;
		иначе
			Док = Док.ДокументОснование;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Документы.ллл_ПредварительныйЗаказЗаводуИзготовителю.ПустаяСсылка();
	
КонецФункции

Процедура КазначействоИмпортныеЗакупкиПередЗаписьюСписанияДС(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Если Отказ тогда возврат;конецЕсли;
	
	//Проверка, была ли ранее поставлена галочка проведения банком для документа. Если была - значит оповещение по этому поводу уже было, ничего делать не надо.
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	1 КАК Поле1
	|ИЗ
	|	Документ.СписаниеБезналичныхДенежныхСредств КАК СписаниеБезналичныхДенежныхСредств
	|ГДЕ
	|	СписаниеБезналичныхДенежныхСредств.Ссылка = &Ссылка
	|	И СписаниеБезналичныхДенежныхСредств.ПроведеноБанком = ИСТИНА";
	Запрос.УстановитьПараметр("Ссылка",Источник.Ссылка);
	Результат = Запрос.Выполнить();
	Если не Результат.Пустой() тогда
		возврат;
	КонецЕсли;
	
	
	
	
	//вычисляем нужно ли посылать оповещение для документа списания по процессу обработки импортных закупок
	Если Источник.Проведенобанком тогда
		Предзаказ = ПредЗаказДляДокументаПроцессаИмпортныхЗакупок(Источник.Ссылка);
	иначе
		возврат;
	КонецЕсли;
	
	Если не ЗначениеЗаполнено(Предзаказ) тогда
		возврат;
	КонецЕсли;
	
	
	КомуОплатили = Источник.Контрагент;
	КодРС = Предзаказ.ллл_КодРС;
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	ллл_РеквизитыКазначействаДляПредварительныхЗаказов.АгентПоОплате КАК АгентПоОплате,
	|	ллл_РеквизитыКазначействаДляПредварительныхЗаказов.АгентПоДоставке КАК АгентПоДоставке
	|ИЗ
	|	РегистрСведений.ллл_РеквизитыКазначействаДляПредварительныхЗаказов КАК ллл_РеквизитыКазначействаДляПредварительныхЗаказов
	|ГДЕ
	|	ллл_РеквизитыКазначействаДляПредварительныхЗаказов.КодРС = &КодРС
	|	И ллл_РеквизитыКазначействаДляПредварительныхЗаказов.ОбработаноРуководителемКазначейства = ИСТИНА");
	Запрос.УстановитьПараметр("КодРС",КодРС);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() тогда
		
		Если Выборка.АгентПоДоставке = Источник.Контрагент и значениеЗаполнено(Источник.Контрагент) и 
			Источник.Организация.ИНН = Выборка.АгентПоОплате.ИНН и Источник.Организация.КПП = Выборка.АгентПоОплате.КПП и
			ЗначениеЗАполнено(Источник.организация)
			тогда
			ллл_МодульКазначействоОповещения.ОтправитьСообщениеЛогистамОПеречисленииДенегОтАгентаПоОплатеАгентуПоДоставке(Источник.Ссылка);
			
		КонецЕсли;
		
		Если не ЗначениеЗаполнено(Выборка.АгентПоОплате) и не ЗначениеЗаполнено(Выборка.АгентПоДоставке) тогда
			
			ллл_МодульКазначействоОповещения.ОповеститьАвтораОПеречисленииДСПоПредзаказуВРамкахКороткойСхемы(Предзаказ);
			
			
			
		КонецЕсли;
		
		
		
	КонецЕсли;
	
	
	
	
	
	
	
КонецПроцедуры


