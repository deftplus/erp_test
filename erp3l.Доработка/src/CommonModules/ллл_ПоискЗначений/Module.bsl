

Функция НайтиДоговор(Организация,Контрагент,Валюта) экспорт
	        Запрос=Новый Запрос();
			Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
			             |	ДоговорыКонтрагентов.Ссылка КАК Ссылка
			             |ИЗ
			             |	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			             |ГДЕ
			             |	ДоговорыКонтрагентов.Организация = &Организация
			             |	И ДоговорыКонтрагентов.Контрагент = &Контрагент
			             |	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &Валюта
			             |	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
			             |
			             |УПОРЯДОЧИТЬ ПО
			             |	ДоговорыКонтрагентов.Дата УБЫВ";
			Запрос.УстановитьПараметр("Организация",Организация);
			Запрос.УстановитьПараметр("Контрагент",Контрагент);
			Запрос.УстановитьПараметр("Валюта",Валюта);
			Результат=Запрос.Выполнить();
			Выборка=Результат.Выбрать();
			Если Выборка.Следующий() тогда
				Если ЗначениеЗаполнено(Выборка.Ссылка) тогда
					возврат(Выборка.Ссылка);
				КонецЕсли;
			КонецЕсли;        	
			Возврат(Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
конецФункции

Функция НайтиОбъектРасчетовПоДоговору(Договор) экспорт
	Запрос=Новый Запрос();
	Запрос.Текст="ВЫБРАТЬ
	| ОбъектыРасчетов.Ссылка КАК Ссылка

 | ИЗ
|	Справочник.ОбъектыРасчетов КАК ОбъектыРасчетов
| ГДЕ
|	ОбъектыРасчетов.Объект = &Объект";

	Запрос.УстановитьПараметр("Объект",Договор);
	Результат=Запрос.Выполнить();
	ВЫборка=Результат.Выбрать();
	Если Выборка.Следующий() тогда
		возврат(Выборка.Ссылка);
	иначе
		возврат(Справочники.ОбъектыРасчетов.ПустаяСсылка());
		
	КонецЕсли;	

	
КонецФункции

Функция НайтиОрганизациюПоИННиКПП(ИНН,КПП) экспорт
	Если не ЗначениеЗаполнено(ИНН) и не ЗначениеЗаполнено(КПП) тогда
		возврат(Справочники.Организации.ПустаяСсылка());
	конецЕсли;
	
	Запрос=Новый Запрос();
	Запрос.Текст="ВЫБРАТЬ
	| Организации.Ссылка КАК Ссылка
| ИЗ
| 	Справочник.Организации КАК Организации
| ГДЕ
|	Организации.ИНН = &ИНН
|	И Организации.КПП = &КПП";
	Запрос.УстановитьПараметр("ИНН",ИНН);
	Запрос.УстановитьПараметр("КПП",КПП);
	Результат=Запрос.Выполнить();
	Выборка=Результат.Выбрать();
	если Выборка.Следующий() тогда
		возврат(Выборка.Ссылка);
	иначе
		возврат(Справочники.Организации.ПустаяСсылка());
	КонецЕсли;

	
	
КонецФункции 


Функция НайтиКонтрагентаПоИННиКПП(ИНН,КПП) экспорт
	Если не ЗначениеЗаполнено(ИНН) и не ЗначениеЗаполнено(КПП) тогда
		возврат(Справочники.Контрагенты.ПустаяСсылка());
	конецЕсли;
	
	Запрос=Новый Запрос();
	Запрос.Текст="ВЫБРАТЬ
	| Организации.Ссылка КАК Ссылка
| ИЗ
| 	Справочник.Контрагенты КАК Организации
| ГДЕ
|	Организации.ИНН = &ИНН
|	И Организации.КПП = &КПП";
	Запрос.УстановитьПараметр("ИНН",ИНН);
	Запрос.УстановитьПараметр("КПП",КПП);
	Результат=Запрос.Выполнить();
	Выборка=Результат.Выбрать();
	если Выборка.Следующий() тогда
		возврат(Выборка.Ссылка);
	иначе
		возврат(Справочники.Организации.ПустаяСсылка());
	КонецЕсли;

	
	
КонецФункции




Функция НайтиСоглашение(Партнер,Контрагент,Валюта)  экспорт

	 Запрос = Новый Запрос;  
		Запрос.УстановитьПараметр("Партнер", Партнер); 
		Запрос.УстановитьПараметр("Контрагент", Контрагент); 
		Запрос.УстановитьПараметр("Валюта", Валюта);  
		Запрос.Текст = "ВЫБРАТЬ  	СоглашенияСПоставщиками.Ссылка КАК Ссылка  ИЗ  	Справочник.СоглашенияСПоставщиками 
		| КАК СоглашенияСПоставщиками  ГДЕ  	
		| СоглашенияСПоставщиками.Контрагент = &Контрагент  	
		| И СоглашенияСПоставщиками.Партнер = &Партнер  	
		| И СоглашенияСПоставщиками.Валюта = &Валюта"; 
		Результат = Запрос.Выполнить();   
		Выборка = Результат.Выбрать(); 
		Если  Выборка.Следующий() тогда 	
			Возврат(Выборка.Ссылка);  
		иначе
			Возврат(Справочники.СоглашенияСПоставщиками.ПустаяСсылка());
		КонецЕсли; 
КонецФункции


Функция ЗначениеНетиповойКонстанты(ИмяКонстанты) экспорт

       возврат(л3_СерверПовтИсп.ЗначениеНетиповойКонстанты(ИмяКонстанты));
	   
КонецФункции	   
   
   

Функция НайтиКонтрагентаПоКодуРС(КодРС,знач Свойство=неопределено) экспорт

	Если Свойство=неопределено тогда
		Свойство=ПолучитьСвойствоКодРС();	
	КонецЕсли;	
Запрос=Новый Запрос();
Запрос.Текст="ВЫБРАТЬ
|	КонтрагентыДополнительныеРеквизиты.Ссылка КАК Ссылка
|ИЗ
|	Справочник.Контрагенты.ДополнительныеРеквизиты КАК КонтрагентыДополнительныеРеквизиты
|ГДЕ
|	КонтрагентыДополнительныеРеквизиты.Свойство = &Свойство
|	И КонтрагентыДополнительныеРеквизиты.Значение = &Значение";
Запрос.УстановитьПараметр("Свойство",Свойство);
Запрос.УстановитьПараметр("Значение",КодРС);
Результат=Запрос.Выполнить();
Выборка=Результат.Выбрать();
Если ВЫборка.Следующий() тогда
	возврат(Выборка.Ссылка);
иначе
	возврат(Справочники.Контрагенты.ПустаяСсылка());
	
КонецЕсли;	
	
КонецФункции 



Функция ПолучитьСвойствоКодРС() экспорт
	
	СвойствоКодРС = ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПустаяСсылка();
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	ДополнительныеРеквизитыИСведения.Ссылка КАК Ссылка
	|ИЗ
	|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК ДополнительныеРеквизитыИСведения
	|ГДЕ
	|	ДополнительныеРеквизитыИСведения.Имя  =  ""КодРС""";
	Результат = Запрос.Выполнить();
	Выборка = результат.Выбрать();
	Если Выборка.Следующий() тогда
		СвойствоКодРС = Выборка.Ссылка;
	КонецЕсли;
	
	возврат(СвойствоКодРС);
	
	
КонецФункции  



// Ищет документ по номеру и даты без учета префикса
//
// Параметры:
//  ИмяДокумента    - Строка - Описание имени документа из метаданных,
//                    например, "РеализацияТоваровУслуг"
//  НомерДокумента  - Строка - номер по которму искать
//                    например, "53319"
//  Префикс         - Строка - пользовательский префикс
//                    например, "К"
//  ДатаДокумента   - Дата - дата документа
//
// Возвращаемое значение:
//   ДокументСсылка или Неопределено   - найденный документ или неопределено
//
Функция ДокументПоНомеруИДате(ИмяДокумента, НомерДокумента, Префикс = "", ДатаДокумента = Неопределено) Экспорт
	
	Результат = Неопределено;
	Если Метаданные.Документы.Найти(ИмяДокумента) = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	Номер = ПрефиксацияОбъектовКлиентСервер.УдалитьПрефиксыИзНомераОбъекта(НомерДокумента, Истина, Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументЕРП.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.%ИмяДокумента% КАК ДокументЕРП
	|ГДЕ
	|	ДокументЕРП.Номер ПОДОБНО &Номер 
	|	И (ДокументЕРП.Дата = &Дата ИЛИ &ДатаНеопределена)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "%ИмяДокумента%", ИмяДокумента);
	
	Запрос.УстановитьПараметр("Номер", СтрШаблон("%%-%1%2", Префикс, Номер));
	Запрос.УстановитьПараметр("Дата", ДатаДокумента);
	Запрос.УстановитьПараметр("ДатаНеопределена", ДатаДокумента = Неопределено) ;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Если Выборка.Следующий() Тогда
			Результат = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ДокументПоНомеруИДате()


Функция НайтиПТУ(ВходящийНомер,ВходящаяДата,Контрагент) экспорт
	  Запрос=Новый Запрос();
Запрос.Текст="ВЫБРАТЬ ПЕРВЫЕ 1
|	з.Ссылка КАК Ссылка,
|	з.Приоритет КАК Приоритет
|ИЗ
|	(ВЫБРАТЬ
|		ПриобретениеТоваровУслуг.Ссылка КАК Ссылка,
|		1 КАК Приоритет
|	ИЗ
|		Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
|	ГДЕ
|		ПриобретениеТоваровУслуг.НомерВходящегоДокумента = &Номер
|		И ПриобретениеТоваровУслуг.ДатаВходящегоДокумента = &Дата
|		И ПриобретениеТоваровУслуг.Контрагент = &Контрагент
|	
|	ОБЪЕДИНИТЬ ВСЕ
|	
|	ВЫБРАТЬ
|		ПриобретениеТоваровУслуг.Ссылка,
|		2
|	ИЗ
|		Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
|	ГДЕ
|		ПриобретениеТоваровУслуг.НомерВходящегоДокумента = &Номер
|		И ПриобретениеТоваровУслуг.ДатаВходящегоДокумента = &Дата) КАК з
|
|УПОРЯДОЧИТЬ ПО
|	Приоритет";
Запрос.УстановитьПараметр("Номер",ВходящийНомер);
Запрос.УстановитьПараметр("Дата",ВходящаяДата);
Запрос.УстановитьПараметр("Контрагент",Контрагент);
Результат=Запрос.Выполнить();
ВЫборка=Результат.Выбрать();
Если Выборка.Следующий() тогда
	Если Значениезаполнено(Выборка.Ссылка) тогда
		возврат(Выборка.Ссылка);	
	КОнецЕсли;
КонецЕсли;
возврат(Документы.ПриобретениеТоваровУслуг.ПустаяСсылка());
	
	
КонецФункции



Функция НайтиЗаказПоставщику(ВходящийНомер,ВходящаяДата,Контрагент) экспорт
	  Запрос=Новый Запрос();
Запрос.Текст=
"ВЫБРАТЬ ПЕРВЫЕ 1
|	з.Ссылка КАК Ссылка,
|	з.Приоритет КАК Приоритет
|ИЗ
|	(ВЫБРАТЬ
|		ЗаказПоставщику.Ссылка КАК Ссылка,
|		1 КАК Приоритет
|	ИЗ
|		Документ.ЗаказПоставщику КАК ЗаказПоставщику
|	ГДЕ
|		ЗаказПоставщику.НомерПоДаннымПоставщика = &Номер
|		И ЗаказПоставщику.ДатаПоДаннымПоставщика = &Дата
|		И ЗаказПоставщику.Контрагент = &Контрагент
|	
|	ОБЪЕДИНИТЬ ВСЕ
|	
|	ВЫБРАТЬ
|		ЗаказПоставщику.Ссылка,
|		2
|	ИЗ
|		Документ.ЗаказПоставщику КАК ЗаказПоставщику
|	ГДЕ
|		ЗаказПоставщику.НомерПоДаннымПоставщика = &Номер
|		И ЗаказПоставщику.ДатаПоДаннымПоставщика = &Дата) КАК з
|
|УПОРЯДОЧИТЬ ПО
|	Приоритет";
Запрос.УстановитьПараметр("Номер",ВходящийНомер);
Запрос.УстановитьПараметр("Дата",ВходящаяДата);
Запрос.УстановитьПараметр("Контрагент",Контрагент);
Результат=Запрос.Выполнить();
ВЫборка=Результат.Выбрать();
Если Выборка.Следующий() тогда
	Если Значениезаполнено(Выборка.Ссылка) тогда
		возврат(Выборка.Ссылка);	
	КОнецЕсли;
КонецЕсли;
возврат(Документы.ЗаказПоставщику.ПустаяСсылка());
	
	
КонецФункции


Функция НайтиЗаказПоставщикуПоКодуРС(КодРС) экспорт
	Запрос=Новый Запрос();
	
	Запрос.Текст =
"ВЫБРАТЬ
|	ЗаказПоставщикуДополнительныеРеквизиты.Ссылка КАК Ссылка,
|	ВЫБОР
|		КОГДА ЗаказПоставщикуДополнительныеРеквизиты.Ссылка.Проведен
|			ТОГДА 1
|		ИНАЧЕ ВЫБОР
|				КОГДА ЗаказПоставщикуДополнительныеРеквизиты.Ссылка.ПометкаУдаления = ЛОЖЬ
|					ТОГДА 2
|				ИНАЧЕ 3
|			КОНЕЦ
|	КОНЕЦ КАК Приоритет
|ИЗ
|	Документ.ЗаказПоставщику.ДополнительныеРеквизиты КАК ЗаказПоставщикуДополнительныеРеквизиты
|ГДЕ
|	ЗаказПоставщикуДополнительныеРеквизиты.Свойство = &Свойство
|	И ЗаказПоставщикуДополнительныеРеквизиты.Значение = &Значение";
Запрос.УстановитьПараметр("Значение",КодРС);
Запрос.УстановитьПараметр("Свойство",ПолучитьСвойствоКодРС());
Результат = Запрос.Выполнить();
Выборка=Результат.Выбрать();
Если Выборка.Следующий() тогда
	Возврат(Выборка.Ссылка);
иначе
	возврат(Документы.ЗаказПоставщику.ПустаяСсылка());
КонецЕсли;	                                          
КонецФункции


Функция НайтиБанковскийСчетКонтрагента(Контрагент,Валюта) экспорт
	Запрос=Новый Запрос();
	Запрос.Текст="ВЫБРАТЬ
	| БанковскиеСчетаКонтрагентов.Ссылка КАК Ссылка
| ИЗ
| 	Справочник.БанковскиеСчетаКонтрагентов КАК БанковскиеСчетаКонтрагентов
| ГДЕ
| 	БанковскиеСчетаКонтрагентов.Владелец = &Владелец
|	И БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств = &ВалютаДенежныхСредств";
	
	Запрос.УстановитьПараметр("Владелец",Контрагент);
	Запрос.УстановитьПараметр("ВалютаДенежныхСредств",Валюта);
	Результат=Запрос.Выполнить();
	Выборка=Результат.Выбрать();
	если Выборка.Следующий() тогда
		 возврат(Выборка.Ссылка);
	иначе	
		 возврат(Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка());
	КонецЕсли;
	
	
КонецФункции  



Функция НайтиБанковскийСчетОрганизации(Организация,Валюта) экспорт
	Запрос=Новый Запрос();
	Запрос.Текст="ВЫБРАТЬ
	| БанковскиеСчетаКонтрагентов.Ссылка КАК Ссылка
| ИЗ
| 	Справочник.БанковскиеСчетаОрганизаций КАК БанковскиеСчетаКонтрагентов
| ГДЕ
| 	БанковскиеСчетаКонтрагентов.Владелец = &Владелец
|	И БанковскиеСчетаКонтрагентов.ВалютаДенежныхСредств = &ВалютаДенежныхСредств";
	
	Запрос.УстановитьПараметр("Владелец",Организация);
	Запрос.УстановитьПараметр("ВалютаДенежныхСредств",Валюта);
	Результат=Запрос.Выполнить();
	Выборка=Результат.Выбрать();
	если Выборка.Следующий() тогда
		 возврат(Выборка.Ссылка);
	иначе	
		 возврат(Справочники.БанковскиеСчетаКонтрагентов.ПустаяСсылка());
	КонецЕсли;
	
	
КонецФункции


Функция НайтиСоздатьЗаписьПлатежнойПозиции(Заявка)  экспорт   
	
	Если ТипЗнч(Заявка)=тип("ДокументОбъект.ЗаявкаНаРасходованиеДенежныхСредств") тогда
		
		Заявка=Заявка.Ссылка;
		
	КонецЕсли;	
	
	
	нз=РегистрыСведений.размещениеЗаявок.СоздатьНаборЗаписей();
	нз.Отбор.ЗаявкаНаОперацию.Установить(Заявка); 
	нз.Прочитать();
	нз.Очистить();
	нз.Записать();
	
	
	
	Мен=РегистрыСведений.РазмещениеЗаявок.СоздатьМенеджерзаписи();	
	Мен.Заявканаоперацию=Заявка;
	Мен.ПриходРасход=Перечисления.ВидыДвиженийПриходРасход.Расход;
	Мен.Прочитать();
	
	
	
	возврат(Мен);
	
	
	
	
	
КонецФункции


Функция НайтиПредзаказ(НомерПроформы,ДатаПроформы='00010101',Контрагент=неопределено) экспорт
	Запрос=Новый Запрос();
	Запрос.Текст="ВЫБРАТЬ
	             |	ллл_ПредварительныйЗаказЗаводуИзготовителю.Контрагент КАК Контрагент,
	             |	ллл_ПредварительныйЗаказЗаводуИзготовителю.НомерПоДаннымПоставщика КАК НомерПоДаннымПоставщика,
	             |	ллл_ПредварительныйЗаказЗаводуИзготовителю.ДатаПоДаннымПоставщика КАК ДатаПоДаннымПоставщика,
	             |	максимум(ллл_ПредварительныйЗаказЗаводуИзготовителю.ллл_НомерВерсии) КАК ллл_НомерВерсии
	             |ПОМЕСТИТЬ ВТ_1
	             |ИЗ
	             |	Документ.ллл_ПредварительныйЗаказЗаводуИзготовителю КАК ллл_ПредварительныйЗаказЗаводуИзготовителю
	             |ГДЕ
	             |	(ллл_ПредварительныйЗаказЗаводуИзготовителю.Контрагент = &Контрагент
	             |				И &ИскатьКонтрагент
	             |			ИЛИ НЕ &ИскатьКонтрагент)
	             |	И ллл_ПредварительныйЗаказЗаводуИзготовителю.НомерПоДаннымПоставщика = &НомерПоДаннымПоставщика
	             |	И (ллл_ПредварительныйЗаказЗаводуИзготовителю.ДатаПоДаннымПоставщика = &ДатаПоДаннымПоставщика
	             |				И &ИскатьДата
	             |			ИЛИ НЕ &ИскатьДата)
	             |
	             |СГРУППИРОВАТЬ ПО
	             |	ллл_ПредварительныйЗаказЗаводуИзготовителю.Контрагент,
	             |	ллл_ПредварительныйЗаказЗаводуИзготовителю.НомерПоДаннымПоставщика,
	             |	ллл_ПредварительныйЗаказЗаводуИзготовителю.ДатаПоДаннымПоставщика
	             |;
	             |
	             |////////////////////////////////////////////////////////////////////////////////
	             |ВЫБРАТЬ
	             |	ллл_ПредварительныйЗаказЗаводуИзготовителю.Ссылка КАК Ссылка
	             |ИЗ
	             |	ВТ_1 КАК ВТ_1
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ллл_ПредварительныйЗаказЗаводуИзготовителю КАК ллл_ПредварительныйЗаказЗаводуИзготовителю
	             |		ПО ВТ_1.Контрагент = ллл_ПредварительныйЗаказЗаводуИзготовителю.Контрагент
	             |			И ВТ_1.НомерПоДаннымПоставщика = ллл_ПредварительныйЗаказЗаводуИзготовителю.НомерПоДаннымПоставщика
	             |			И ВТ_1.ДатаПоДаннымПоставщика = ллл_ПредварительныйЗаказЗаводуИзготовителю.ДатаПоДаннымПоставщика
	             |			И ВТ_1.ллл_НомерВерсии = ллл_ПредварительныйЗаказЗаводуИзготовителю.ллл_НомерВерсии";
	
	Запрос.УстановитьПараметр("Контрагент",Контрагент);
	Запрос.УстановитьПараметр("ИскатьКонтрагент",значениеЗаполнено(Контрагент));
	Запрос.УстановитьПараметр("НомерПоДаннымПоставщика",НомерПроформы);         
	
	Запрос.УстановитьПараметр("ДатаПоДаннымПоставщика",ДатаПроформы);
	Запрос.УстановитьПараметр("ИскатьДата",значениеЗаполнено(ДатаПроформы));

	Результат=Запрос.Выполнить();
	тз=Результат.Выгрузить();
	если тз.Количество()=1 тогда
		возврат(тз[0].Ссылка);
	КонецЕсли;	

	возврат(Документы.ллл_ПредварительныйЗаказЗаводуИзготовителю.ПустаяСсылка());
	
	
КонецФункции	



Функция НайтиВалюту(КодВалюты)  экспорт
	   	   
	   Запрос=Новый Запрос();
	   Запрос.Текст="ВЫБРАТЬ
	                |	Валюты.Ссылка КАК Ссылка
	                |ИЗ
	                |	Справочник.Валюты КАК Валюты
	                |ГДЕ
	                |	(Валюты.Наименование = &Наименование
	                |			ИЛИ Валюты.Код = &Наименование
	                |				И Валюты.ПометкаУдаления = ЛОЖЬ)";
	   Запрос.УстановитьПараметр("Наименование",КодВалюты);
	   Результат=Запрос.Выполнить();
	   Выборка=Результат.Выбрать();
	   Если Выборка.Следующий() тогда
		   Возврат(Выборка.Ссылка);
		   
	   иначе	   
		   
		   Возврат(Справочники.Валюты.Пустаяссылка());
	   КонецЕсли;
	   
	
КонецФункции


Функция ПолучитьКомментарийИсторииСогласований(ДокументПроцесса,Этап,ИдентификаторСообщения) экспорт
	Ответ="";
	УстановитьПРивилегированныйРежим(истина);
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	ИсторияВыполненияПроцессов.Комментарий КАК Комментарий
		|ИЗ
		|	РегистрСведений.ИсторияВыполненияПроцессов КАК ИсторияВыполненияПроцессов
		|ГДЕ
		|	ИсторияВыполненияПроцессов.ДокументПроцесса = &ДокументПроцесса
		|	И ИсторияВыполненияПроцессов.ЭтапПроцесса = &ЭтапПроцесса
		|	И ИсторияВыполненияПроцессов.ИдентификаторСообщения = &ИдентификаторСообщения");
	
	Запрос.УстановитьПараметр("ДокументПроцесса",ДокументПроцесса);
	Запрос.УстановитьПараметр("ЭтапПроцесса",Этап);
	Запрос.УстановитьПараметр("ИдентификаторСообщения",ИдентификаторСообщения);

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() тогда
		Ответ=Выборка.Комментарий;	
	КонецЕсли;
	
	//ТекстВход=Ответ;
	//РезультатФункции = ТекстВход;
	Если ЗначениеЗаполнено(Ответ) Тогда
		Ответ=ОчиститьHtmlВКомментарии(Ответ);
	Иначе
		Ответ = "";
	КонецЕсли;

	//Ответ=РезультатФункции; 
		
	УстановитьПРивилегированныйРежим(ложь);
	возврат(Ответ);
КонецФункции 


Функция ПолучитьСостояниеОбъектовИсторииСогласований(ДокументПроцесса,Период) экспорт
	
	Ответ="";
	
	Если не ЗначениеЗаполнено(ДокументПроцесса.КлючевойОбъектПроцесса) тогда
		возврат(Ответ);
	КонецЕсли;
	
	УстановитьПРивилегированныйРежим(истина);
	Запрос = Новый Запрос("
		|ВЫБРАТЬ 
	| РегистрСостоянийОбъектовСрезПоследних.СостояниеОбъекта КАК СостояниеОбъекта

| ИЗ
|	РегистрСведений.РегистрСостоянийОбъектов.СрезПоследних(&Период, Объект=&Объект) КАК РегистрСостоянийОбъектовСрезПоследних");
	
	Запрос.УстановитьПараметр("Объект",ДокументПроцесса.КлючевойОбъектПроцесса);
	Запрос.УстановитьПараметр("Период",Период);


	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	Если Выборка.Следующий() тогда
		Ответ=Выборка.СостояниеОбъекта;	
	КонецЕсли;
	
	УстановитьПРивилегированныйРежим(ложь);
	возврат(Ответ);
КонецФункции



Функция ОчиститьHtmlВКомментарии(ТекстВход) экспорт
	РезультатФункции = ТекстВход;
	Если ЗначениеЗаполнено(ТекстВход) Тогда
		Построитель = Новый ПостроительDOM;
		ЧтениеHTML = Новый ЧтениеHTML;
		ЧтениеHTML.УстановитьСтроку(РезультатФункции);
		ДокументHTML = Построитель.Прочитать(ЧтениеHTML);
		ТелоДокумента = ДокументHTML.Тело; 
		Если типзнч(ТелоДокумента)=тип("ЭлементТелоHTML") тогда
			РезультатФункции = ТелоДокумента.ТекстовоеСодержимое;
		иначе
			РезультатФункции = ТекстВход;
		КонецЕсли;
		
		ПозицияBody=стрНайти(РезультатФункции,"<body");
		Если ПозицияBody>0 тогда
				РезультатФункции=прав(РезультатФункции,стрДлина(РезультатФункции)-ПозицияBody+1);
				РезультатФункции=ОчиститьHtmlВКомментарии(РезультатФункции);
		КонецЕсли;		
	Иначе
		РезультатФункции = "";
	КонецЕсли;
	Возврат сокрлп(РезультатФункции);
КонецФункции
