 Функция СсылкаНаСамуюСвежуюВерсиюПоКодуРС(КодРС) экспорт
	  
		  
	  Ответ=неопределено;
	  Запрос=Новый  Запрос();
	  Запрос.Текст="ВЫБРАТЬ
	               |	ллл_ПредварительныйЗаказЗаводуИзготовителю.ллл_КодРС КАК ллл_КодРС,
	               |	МАКСИМУМ(ллл_ПредварительныйЗаказЗаводуИзготовителю.ллл_НомерВерсии) КАК ллл_НомерВерсии
	               |ПОМЕСТИТЬ ВТ_1
	               |ИЗ
	               |	Документ.ллл_ПредварительныйЗаказЗаводуИзготовителю КАК ллл_ПредварительныйЗаказЗаводуИзготовителю
	               |ГДЕ
	               |	ллл_ПредварительныйЗаказЗаводуИзготовителю.ллл_КодРС = &КодРС
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ллл_ПредварительныйЗаказЗаводуИзготовителю.ллл_КодРС
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ллл_ПредварительныйЗаказЗаводуИзготовителю.Ссылка КАК Ссылка
	               |ИЗ
	               |	ВТ_1 КАК ВТ_1
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ллл_ПредварительныйЗаказЗаводуИзготовителю КАК ллл_ПредварительныйЗаказЗаводуИзготовителю
	               |		ПО ВТ_1.ллл_КодРС = ллл_ПредварительныйЗаказЗаводуИзготовителю.ллл_КодРС
	               |			И ВТ_1.ллл_НомерВерсии = ллл_ПредварительныйЗаказЗаводуИзготовителю.ллл_НомерВерсии";
	  Запрос.УстановитьПараметр("КодРС",КодРС);
	  Результат=Запрос.Выполнить();
	  ВЫборка=Результат.Выбрать();
	  если ВЫборка.Следующий() тогда
	  
			Ответ=ВЫборка.Ссылка;	  
		  
	  КонецЕсли;	  
	  возврат(Ответ);
 КонецФункции  
  
  
Функция ЕстьЗаказПоставщикуПоСовокупностиПредзаказов(Предзаказ) экспорт  

Если не ЗначениеЗаполнено(Предзаказ) тогда возврат ложь; конецЕсли;
	Запрос=Новый Запрос();
	Запрос.Текст="ВЫБРАТЬ
 |	ЗаказПоставщикуДополнительныеРеквизиты.Ссылка КАК Ссылка
 |ИЗ
 |	Документ.ЗаказПоставщику.ДополнительныеРеквизиты КАК ЗаказПоставщикуДополнительныеРеквизиты
 |ГДЕ
 |	ЗаказПоставщикуДополнительныеРеквизиты.Свойство.Имя = ""КодРС""
 |	И ЗаказПоставщикуДополнительныеРеквизиты.Значение = &КодРС и ЗаказПоставщикуДополнительныеРеквизиты.Ссылка.ПометкаУдаления=ложь ";
	Запрос.УстановитьПараметр("КодРС",Предзаказ.ллл_КодРС);
	Результат=Запрос.Выполнить();
	Возврат(не Результат.Пустой());
	 
КонецФункции	  

#Область Взаиморасчеты

// Возвращает параметры механизма взаиморасчетов.
//
// Параметры:
// 	ДанныеЗаполнения - ДокументОбъект, СправочникОбъект, Структура, ДанныеФормыСтруктура - Объект или коллекция для
//              расчета параметров взаиморасчетов.
//
// Возвращаемое значение:
// 	Структура - см. ВзаиморасчетыСервер.ПараметрыМеханизма
//
Функция ПараметрыВзаиморасчеты(ДанныеЗаполнения = Неопределено) Экспорт
	
	Если ДанныеЗаполнения = Неопределено Тогда
		ХозяйственнаяОперация = Неопределено;
		ЖелаемаяДатаПоступления = Неопределено;
	Иначе
		ХозяйственнаяОперация = ДанныеЗаполнения.ХозяйственнаяОперация;
		ЖелаемаяДатаПоступления = ДанныеЗаполнения.ЖелаемаяДатаПоступления;
	КонецЕсли;
	
	СтруктураПараметров = ВзаиморасчетыСервер.ПараметрыМеханизма();
	СтруктураПараметров.ЭтоЗаказ                         = Истина;
	СтруктураПараметров.ТипРасчетов                      = Перечисления.ТипыРасчетовСПартнерами.РасчетыСПоставщиком;

	СтруктураПараметров.ИзменяетПланОплаты               = ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика
															ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути
															ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки
															ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту
															ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути
															ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС
															ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути
															ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки;
	СтруктураПараметров.ИзменяетПланОтгрузкиПоставки     = ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ПриемНаКомиссию
															ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика
															ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаТоварыВПути
															ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаФактуровкаПоставки
															ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпорту
															ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаПоИмпортуТоварыВПути
															ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭС
															ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСТоварыВПути
															ИЛИ ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаВСтранахЕАЭСФактуровкаПоставки;
	
	СтруктураПараметров.КурсЧислитель                    = "";
	СтруктураПараметров.КурсЗнаменатель                  = "";
	
	СтруктураПараметров.ПутьКДаннымТЧ                    = "Объект.Товары";
	
	СтруктураПараметров.ПутьКДаннымТЧЭтапыОплаты         = "Объект.ЭтапыГрафикаОплаты";
	Если ЗначениеЗаполнено(ЖелаемаяДатаПоступления) Тогда
		СтруктураПараметров.ДатаОтсчетаГрафика               = "Объект.ЖелаемаяДатаПоступления"; 
	Иначе
		СтруктураПараметров.ДатаОтсчетаГрафика               = "Объект.ДатаПоступления";
	КонецЕсли; 
	
	СтруктураПараметров.БанковскийСчетОрганизации        = "Объект.БанковскийСчет";
	СтруктураПараметров.БанковскийСчетКонтрагента        = "";
	СтруктураПараметров.ИдентификаторПлатежа             = "";
	СтруктураПараметров.Менеджер                         = "Объект.Менеджер";
	
	СтруктураПараметров.СуммаДокументаФорма              = "Форма.СуммаЗаказаноСЗалоговойТарой";
	СтруктураПараметров.СуммаЗалогаЗаТаруФорма           = "Форма.СуммаЗалогаЗаТару";
	
	СтруктураПараметров.ЭлементыФормы.НадписьЭтапы       = "ДекорацияЭтапыОплаты";
	СтруктураПараметров.ЭлементыФормы.НадписьРасчеты     = "ДекорацияСостояниеРасчетов";
	СтруктураПараметров.ЭлементыФормы.ЗачетОплаты        = "ЗачетОплатыФорма";
	СтруктураПараметров.ЭлементыФормы.ГруппаФинансовогоУчета = "ГруппаФинансовогоУчета";
	СтруктураПараметров.ЭлементыФормы.НаправлениеДеятельности = "НаправлениеДеятельности";
	
	СтруктураПараметров.ОбъектРасчетов                   = "Объект.ОбъектРасчетов";
	
	Возврат СтруктураПараметров;
	
КонецФункции

#КонецОбласти //Взаиморасчеты