Процедура РассчитатьСуммыНаСервере(ИспользоватьСложныйПроцент,ПроцентДоставка,процентОплата,ИcпользоватьПроцентСумму,СуммаАгентуПоДоставке,СуммаАгентуПоОплате) экспорт
	Если ЭтотОбъект.ВерсияСозданаПослеУтвержденияКазначейством=ложь тогда

		Если ИcпользоватьПроцентСумму=истина тогда
			РассчитатьСуммыОтПроцента(ИспользоватьСложныйПроцент,ПроцентДоставка,процентОплата);	
		иначе	
		    РассчитатьСуммыОтИтоговыхСумм(СуммаАгентуПоДоставке,СуммаАгентуПоОплате);
		КонецЕсли;	
	
	иначе
		ОчиститьСуммыАгентам();	

	КонецЕсли;
	 
	 
	 
	 
КонецПроцедуры  


Процедура ОчиститьСуммыАгентам()
	
		Если ЭтотОбъект.товары.Итог("СуммаАгентуПоОплате")+ЭтотОбъект.товары.Итог("СуммаАгентуПоДоставке")>0 тогда
	
			 для каждого стр из ЭтотОбъект.Товары цикл
				стр.СуммаАгентуПоОплате=0;
				стр.СуммаАгентуПоДоставке=0;
				 
			 КонецЦикла;
	
	     КонецЕсли;
КонецПроцедуры



Процедура РассчитатьСуммыОтПроцента(ИспользоватьСложныйПроцент,ПроцентДоставка,процентОплата)

	для каждого стр из ЭтотОбъект.Товары цикл
			
			Если не ЗначениеЗаполнено(ПроцентДоставка) тогда
				стр.СуммаАгентуПоДоставке=0;
 			иначе
				стр.СуммаАгентуПоДоставке=стр.Сумма*(1+ПроцентДоставка/100);
			КонецЕсли;                                                      

			
			Если не ЗначениеЗаполнено(ПроцентОплата) тогда
				стр.СуммаАгентуПоОплате=0;	
			КонецЕсли;	
			
			
			
			Если ЗначениеЗаполнено(ПроцентОплата)  тогда
				Если ИспользоватьСложныйПроцент = ложь или не ЗначениеЗаполнено(ПроцентДоставка) тогда
					стр.СуммаАгентуПоОплате=стр.Сумма*(1+ПроцентОплата/100);	
				иначе
					стр.СуммаАгентуПоОплате=стр.Сумма*(1+ПроцентДоставка/100)*(1+ПроцентОплата/100);
				КонецЕсли;
			КонецЕсли;	
      КонецЦикла;

	
КонецПроцедуры  
	 

Процедура РассчитатьСуммыОтИтоговыхСумм(СуммаАгентуПоДоставке,СуммаАгентуПоОплате)  
    КоличествоСтрокТоваров=ЭтотОбъект.Товары.Количество();
	СуммаТоваров=ЭтотОбъект.товары.Итог("СуммаСНДС");
	РаспределеноСуммаАгентуПоДоставке=0;
	РаспределеноСуммаАгентуПоОплате=0;
	
	для Счетчик=0 по КоличествоСтрокТОваров -1 цикл  
		стр=ЭтотОбъект.товары[Счетчик];
		Если Счетчик<> КоличествоСтрокТОваров -1 тогда
			стр.СуммаАгентуПоОплате=стр.СуммаСНДС/СуммаТоваров*СуммаАгентуПоОплате;
			РаспределеноСуммаАгентуПоОплате=РаспределеноСуммаАгентуПоОплате+стр.СуммаАгентуПоОплате;
			стр.СуммаАгентуПоДоставке=стр.СуммаСНДС/СуммаТоваров*СуммаАгентуПоДоставке;
			РаспределеноСуммаАгентуПоДоставке=РаспределеноСуммаАгентуПоДоставке+стр.СуммаАгентуПоДоставке;
		иначе     
			Если не СуммаАгентуПоОплате=0 тогда
				стр.СуммаАгентуПоОплате=СуммаАгентуПоОплате-РаспределеноСуммаАгентуПоОплате;	
			КонецЕсли;	
			
			Если не СуммаАгентуПоДоставке=0 тогда
				стр.СуммаАгентуПоДоставке=СуммаАгентуПоДоставке-РаспределеноСуммаАгентуПоДоставке;	
			КонецЕсли;
		КонецЕсли;	
		
		
	КонецЦикла;	
	
	
		
КонецПроцедуры

Функция ПоместитьСуммыПоЗаказамВоВременноеХранилище() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Товары.СуммаСНДС           КАК Сумма,
	|	Товары.Номенклатура        КАК Номенклатура,
	|	Товары.Отменено            КАК Отменено
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ &Таблица КАК Товары
	|;
	|ВЫБРАТЬ 
	|	Неопределено                                     КАК Заказ,
	|	ЛОЖЬ                                             КАК СверхЗаказа,
	|	СУММА(ВложенныйЗапрос.СуммаПлатежа)              КАК СуммаПлатежа,
	|	0                                                КАК СуммаВзаиморасчетов,
	|	СУММА(ВложенныйЗапрос.СуммаЗалогаЗаТару)         КАК СуммаЗалогаЗаТару,
	|	0                                                КАК СуммаВзаиморасчетовПоТаре
	|ИЗ (ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА Товары.Номенклатура.ТипНоменклатуры <> ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|					ИЛИ НЕ &ВернутьМногооборотнуюТару
	|				ТОГДА Товары.Сумма
	|			ИНАЧЕ 0 
	|		КОНЕЦ                             КАК СуммаПлатежа,
	|		ВЫБОР 
	|			КОГДА Товары.Номенклатура.ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.МногооборотнаяТара)
	|				И &ТребуетсяЗалогЗаТару
	|				ТОГДА Товары.Сумма
	|			ИНАЧЕ 0 
	|		КОНЕЦ                            КАК СуммаЗалогаЗаТару
	|	ИЗ ВТТовары КАК Товары
	|	ГДЕ НЕ Товары.Отменено) КАК ВложенныйЗапрос
	|;";
	
	Запрос.УстановитьПараметр("ВернутьМногооборотнуюТару", ВернутьМногооборотнуюТару);
	Запрос.УстановитьПараметр("ТребуетсяЗалогЗаТару", ТребуетсяЗалогЗаТару);
	Запрос.УстановитьПараметр("Таблица", Товары);
	
	Возврат ПоместитьВоВременноеХранилище(Запрос.Выполнить().Выгрузить(), Новый УникальныйИдентификатор());
	
КонецФункции

#Область Типовой

// Заполняет условия продаж в заказе поставщику
//
// Параметры:
//	УсловияЗакупок - Структура - Структура для заполнения.
//
Процедура ЗаполнитьУсловияЗакупок(Знач УсловияЗакупок) Экспорт
	
	Если УсловияЗакупок = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Валюта = УсловияЗакупок.Валюта;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.ФормаОплаты) Тогда
		ФормаОплаты = УсловияЗакупок.ФормаОплаты;
	КонецЕсли;
	
	НаправлениеДеятельности = УсловияЗакупок.НаправлениеДеятельности;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.Организация) И УсловияЗакупок.Организация<>Организация Тогда
		Организация = УсловияЗакупок.Организация;
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияБанковскогоСчетаОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация    			= Организация;
		СтруктураПараметров.ФормаОплаты 			= ФормаОплаты;
		СтруктураПараметров.НаправлениеДеятельности	= НаправлениеДеятельности;
		БанковскийСчет = ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(СтруктураПараметров);
		
		СтруктураПараметров = ДенежныеСредстваСервер.ПараметрыЗаполненияКассыОрганизацииПоУмолчанию();
		СтруктураПараметров.Организация    			= Организация;
		СтруктураПараметров.ФормаОплаты 			= ФормаОплаты;
		СтруктураПараметров.НаправлениеДеятельности	= НаправлениеДеятельности;

		Касса = ЗначениеНастроекПовтИсп.ПолучитьКассуОрганизацииПоУмолчанию(СтруктураПараметров);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.Склад) Тогда
		Склад = УсловияЗакупок.Склад;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.Контрагент) Тогда
		Контрагент = УсловияЗакупок.Контрагент;
	КонецЕсли;
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Партнер, Контрагент);
	
	Если ЗначениеЗаполнено(УсловияЗакупок.ХозяйственнаяОперация) Тогда
		ОперацияПоСоглашению		= ХозяйственнаяОперация;
		ОперацииРаздельнойЗакупки	= ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(УсловияЗакупок.ХозяйственнаяОперация);
		
		Если ОперацииРаздельнойЗакупки.Найти(ХозяйственнаяОперация) = Неопределено Тогда
			ОперацияПоСоглашению = УсловияЗакупок.ХозяйственнаяОперация;
		КонецЕсли;
		
		ХозяйственнаяОперация = ОперацияПоСоглашению;
	КонецЕсли;
	
	ХозяйственнаяОперацияДоговора = ?(ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщикаРеглУчет
											Или ХозяйственнаяОперация = Перечисления.ХозяйственныеОперации.ЗакупкаЧерезПодотчетноеЛицо,
										Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика,
										ХозяйственнаяОперация);
	ХозяйственнаяОперацияДоговора = ЗакупкиСервер.ХозяйственныеОперацииПоОсновной(ХозяйственнаяОперацияДоговора);
	
	Если УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов <> Неопределено
		И УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов Тогда
		
		ДопПараметры = ЗакупкиСервер.ДополнительныеПараметрыОтбораДоговоров();
		ДопПараметры.ВалютаВзаиморасчетов = Валюта;
		
		Договор = ЗакупкиСервер.ПолучитьДоговорПоУмолчанию(ЭтотОбъект, ХозяйственнаяОперацияДоговора, ДопПараметры);
		
		ЗакупкиВызовСервера.ЗаполнитьБанковскиеСчетаПоДоговору(Договор, БанковскийСчет);
		
		Если ПолучитьФункциональнуюОпцию("ИспользоватьУчетЗатратПоНаправлениямДеятельности")
			Или ПолучитьФункциональнуюОпцию("ИспользоватьУчетРасчетовСПоставщикамиПоНаправлениямДеятельности") Тогда
			
			НаправленияДеятельностиСервер.ЗаполнитьНаправлениеПоУмолчанию(НаправлениеДеятельности, Соглашение, Договор);
			
		КонецЕсли;
	
	КонецЕсли;
	
	ЦенаВключаетНДС = УсловияЗакупок.ЦенаВключаетНДС;
	
	Если НЕ ЗначениеЗаполнено(УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов) 
		ИЛИ НЕ УсловияЗакупок.ИспользуютсяДоговорыКонтрагентов Тогда
		ОплатаВВалюте = УсловияЗакупок.ОплатаВВалюте;
	Иначе
		ОплатаВВалюте = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Договор, "ОплатаВВалюте");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.ГруппаФинансовогоУчета) Тогда
		ГруппаФинансовогоУчета = УсловияЗакупок.ГруппаФинансовогоУчета;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(УсловияЗакупок.СрокПоставки) Тогда
		ДатаДокумента = ?(ЗначениеЗаполнено(Дата), Дата, ТекущаяДатаСеанса());
		ЖелаемаяДатаПоступления = ОбщегоНазначенияУТКлиентСервер.РассчитатьДатуОкончанияПериода(ДатаДокумента, Перечисления.Периодичность.День, УсловияЗакупок.СрокПоставки) + 1;
	КонецЕсли;
	
	РегистрироватьЦеныПоставщика = УсловияЗакупок.РегистрироватьЦеныПоставщика;
	ВернутьМногооборотнуюТару = УсловияЗакупок.ВозвращатьМногооборотнуюТару;
	СрокВозвратаМногооборотнойТары = УсловияЗакупок.СрокВозвратаМногооборотнойТары;
	ТребуетсяЗалогЗаТару = УсловияЗакупок.ТребуетсяЗалогЗаТару;
	
КонецПроцедуры

// Заполняет условия продаж по соглашению в заказе поставщику
//
// Параметры:
//	ПересчитатьЦены - Булево - Истина, если необходимо пересчитать цены в табличной части документа.
//
Процедура ЗаполнитьУсловияЗакупокПоСоглашению(ПересчитатьЦены = Истина) Экспорт
	
	УсловияЗакупок = ЗакупкиСервер.ПолучитьУсловияЗакупок(Соглашение, Истина);
	ЗаполнитьУсловияЗакупок(УсловияЗакупок);
	
	ПараметрыЗаполнения = Документы.ЗаказПоставщику.ПараметрыЗаполненияНалогообложенияНДСЗакупки(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьНалогообложениеНДСЗакупки(НалогообложениеНДС, ПараметрыЗаполнения);
	
	ПараметрыЗаполнения = Документы.ЗаказПоставщику.ПараметрыЗаполненияВидаДеятельностиНДС(ЭтотОбъект);
	УчетНДСУП.ЗаполнитьВидДеятельностиНДС(ЗакупкаПодДеятельность, ПараметрыЗаполнения);
	
	Если ПересчитатьЦены Тогда
		СтруктураПересчетаСуммы = ОбработкаТабличнойЧастиКлиентСервер.ПараметрыПересчетаСуммыНДСВСтрокеТЧ(ЭтотОбъект);
		ПересчитатьСуммуСУчетомРучнойСкидки	= Новый Структура("Очищать", Ложь);
		
		СтруктураДействий = Новый Структура;
		СтруктураДействий.Вставить("ПересчитатьСумму", "КоличествоУпаковок");
		СтруктураДействий.Вставить("ПересчитатьСуммуСНДС",СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуНДС",СтруктураПересчетаСуммы);
		СтруктураДействий.Вставить("ПересчитатьСуммуРучнойСкидки", "КоличествоУпаковок");
		СтруктураДействий.Вставить("ПересчитатьСуммуСУчетомРучнойСкидки", ПересчитатьСуммуСУчетомРучнойСкидки);
		
		ПараметрыЗаполнения = ЦеныПартнеровЗаполнениеСервер.НовыйПараметрыЗаполненияЗаполнитьЦены();
		ПараметрыЗаполнения.Вставить("ПоляЗаполнения", "Цена, СтавкаНДС, ВидЦеныПоставщика");
		ПараметрыЗаполнения.Вставить("Дата",       Дата);
		ПараметрыЗаполнения.Вставить("Валюта",     Валюта);
		ПараметрыЗаполнения.Вставить("Соглашение", Соглашение);
		ПараметрыЗаполнения.Вставить("НалогообложениеНДС", НалогообложениеНДС);
		
		ЦеныПартнеровЗаполнениеСервер.ЗаполнитьЦены(
			Товары,
			Неопределено, // Массив строк
			ПараметрыЗаполнения,
			СтруктураДействий);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти