
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	ОтборКонтрагенты.ЗагрузитьЗначения(Объект.ОтборКонтрагенты.Выгрузить().ВыгрузитьКолонку("Контрагент"));
	УсловноеОформлениеСервер();
	
	ПредОтборПоКрайнейДате          = Объект.ОтборПоКрайнейДате;
	ПредОтборПоДатеЗаказа           = Объект.ОтборПоДатеЗаказа;
	ПредОтборПоПланируемойДате      = Объект.ОтборПоПланируемойДате;
	ПредОтборПоПланируемойДатеСдвиг = Объект.ОтборПоПланируемойДатеСдвиг;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	УстановитьФильтрТекущейСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	//Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
	//	МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
	//	МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	//КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ОбработчикиСобытийЭлементовФормы

&НаКлиенте
Процедура ПлатежиПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элементы.Платежи.ТекущиеДанные <> Неопределено Тогда
		Если РежимОтображения = 4 Тогда
			Ссылка = Элементы.Платежи.ТекущиеДанные.ЗаказПоставщику;
		Иначе
			Ссылка = Элементы.Платежи.ТекущиеДанные.Заявка;
		КонецЕсли;
		ПоказатьЗначение(, Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоСуммеПриИзменении(Элемент)
	
	ВыполнитьЗаполнениеДокументамиДляСогласования();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоКрайнейДатеПриИзменении(Элемент)
	
	Если Объект.Платежи.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ОбработатьОтветИзмененияОтбора", ЭтотОбъект, Новый Структура("ИмяОтбораПоДате", "ОтборПоКрайнейДате"));
		ПоказатьВопрос(Оповещение, "Список платежей будет очищен. Продолжить?", РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоДатеЗаказаПриИзменении(Элемент)
	
	Если Объект.Платежи.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ОбработатьОтветИзмененияОтбора", ЭтотОбъект, Новый Структура("ИмяОтбораПоДате", "ОтборПоДатеЗаказа"));
		ПоказатьВопрос(Оповещение, "Список платежей будет очищен. Продолжить?", РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПланируемойДатеПриИзменении(Элемент)
	
	Если Объект.Платежи.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ОбработатьОтветИзмененияОтбора", ЭтотОбъект, Новый Структура("ИмяОтбораПоДате", "ОтборПоПланируемойДате"));
		ПоказатьВопрос(Оповещение, "Список платежей будет очищен. Продолжить?", РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоПланируемойДатеСдвигПриИзменении(Элемент)
	
	Если Объект.Платежи.Количество() > 0 И ЗначениеЗаполнено(Объект.ОтборПоПланируемойДате) Тогда
		Оповещение = Новый ОписаниеОповещения("ОбработатьОтветИзмененияОтбора", ЭтотОбъект, Новый Структура("ИмяОтбораПоДате", "ОтборПоПланируемойДатеСдвиг"));
		ПоказатьВопрос(Оповещение, "Список платежей будет очищен. Продолжить?", РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСуммыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ВыполнитьДействиеСоСтрокой(Отказ, Новый Структура("ИмяТаблицы, Добавление", "ОтборСуммы", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСуммыПередНачаломИзменения(Элемент, Отказ)
	
	ВыполнитьДействиеСоСтрокой(Отказ, Новый Структура("ИмяТаблицы, Добавление", "ОтборСуммы", Ложь));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборСуммыПередУдалением(Элемент, Отказ)
	
	ВыполнитьДействиеСоСтрокой(Отказ, Новый Структура("ИмяТаблицы, Удаление", "ОтборСуммы", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ВыполнитьДействиеСоСтрокой(Отказ, Новый Структура("ИмяТаблицы, Добавление", "ОтборКонтрагенты", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентыПередНачаломИзменения(Элемент, Отказ)
	
	ВыполнитьДействиеСоСтрокой(Отказ, Новый Структура("ИмяТаблицы, Добавление", "ОтборКонтрагенты", Ложь));
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборКонтрагентыПередУдалением(Элемент, Отказ)
	
	ВыполнитьДействиеСоСтрокой(Отказ, Новый Структура("ИмяТаблицы, Удаление", "ОтборКонтрагенты", Истина));
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПлатежиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьФильтрТекущейСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимОтображенияПриИзменении(Элемент)
	
	УстановитьФильтрТекущейСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПлатежиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ллл_Алгоритмы

&НаКлиенте
Процедура УстановитьФильтрТекущейСтраницы()
	
	ЕстьЗаявка = Истина;
	Если РежимОтображения = 4 Тогда
		ЕстьЗаявка = Ложь;
		ЭтоИмпорт = Истина;
		ЭтоПредоплата = Истина;
	ИначеЕсли РежимОтображения = 0 Тогда
		ЭтоИмпорт = Истина;
		ЭтоПредоплата = Истина;
	ИначеЕсли РежимОтображения = 1 Тогда
		ЭтоИмпорт = Истина;
		ЭтоПредоплата = Ложь;
	ИначеЕсли РежимОтображения = 2 Тогда
		ЭтоИмпорт = Ложь;
		ЭтоПредоплата = Истина;
	ИначеЕсли РежимОтображения = 3 Тогда
		ЭтоИмпорт = Ложь;
		ЭтоПредоплата = Ложь;
	КонецЕсли;
	Элементы.ПлатежиВалютаОплаты.Видимость           = ЕстьЗаявка;
	Элементы.ПлатежиВидОперации.Видимость            = ЕстьЗаявка;
	Элементы.ПлатежиСумма.Видимость                  = ЕстьЗаявка;
	Элементы.ПлатежиПланируемаяДатаПлатежа.Видимость = ЕстьЗаявка;
	Элементы.ПлатежиКрайняяДатаПлатежа.Видимость     = ЕстьЗаявка;
	Элементы.ПлатежиЗаказПоставщику.Видимость        = НЕ ЕстьЗаявка;
	Элементы.ПлатежиНомерДокументаЗаявкаНаОплату.Заголовок = ?(ЕстьЗаявка,
			"Номер документа заявка на оплату", "Номер по данным поставщика");
	Элементы.ПлатежиДатаДокументаЗаявкаНаОплату.Заголовок = ?(ЕстьЗаявка,
			"Дата документа заявка на оплату", "Дата по данным поставщика");
	
	Элементы.Платежи.ОтборСтрок = Новый ФиксированнаяСтруктура("ЭтоИмпорт, ЭтоПредоплата, ЕстьЗаявка", ЭтоИмпорт, ЭтоПредоплата, ЕстьЗаявка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДокументамиДляСогласования(Команда)
	
	ВыполнитьЗаполнениеДокументамиДляСогласования();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗаполнениеДокументамиДляСогласования()
	
	ЗаполнитьДокументамиДляСогласованияНаСервере();
	УстановитьФильтрТекущейСтраницы();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДокументамиДляСогласованияНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	#Область ТекстЗапроса
		"ВЫБРАТЬ
		|	ЗаявкаРДС.Ссылка.ПриоритетОплаты КАК Приоритет,
		|	ВыполнениеПроцессовСрезПоследних.Организация КАК Организация,
		|	ЗаявкаРДС.Ссылка.Подразделение КАК Подразделение,
		|	ЗаявкаРДС.Ссылка.ВидОперацииУХ КАК ВидОперации,
		|	ЗаявкаРДС.Ссылка.Контрагент КАК Контрагент,
		|	ЗаявкаРДС.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	ЗаявкаРДС.Ссылка.Номер КАК НомерДокументаЗаявкаНаОплату,
		|	ЗаявкаРДС.Ссылка.Дата КАК ДатаДокументаЗаявкаНаОплату,
		|	ЗаявкаРДС.Ссылка.СуммаДокумента КАК СуммаДокумента,
		|	ЗаявкаРДС.Ссылка.Валюта КАК ВалютаДокумента,
		|	ЗаявкаРДС.Сумма КАК Сумма,
		|	ЗаявкаРДС.Ссылка.ВалютаОплаты КАК ВалютаОплаты,
		|	ЗаявкаРДС.Ссылка.ЖелательнаяДатаПлатежа КАК ПланируемаяДатаПлатежа,
		|	ЗаявкаРДС.Ссылка.КрайняяДата КАК КрайняяДатаПлатежа,
		|	ЗаявкаРДС.Ссылка.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	НЕ ЗаказПоставщикуДок.Ссылка ЕСТЬ NULL КАК ЭтоПредоплата,
		|	ЕСТЬNULL(ЗаказПоставщикуДок.ХозяйственнаяОперация, ПриобретениеТоваровУслуг.Ссылка.ХозяйственнаяОперация) = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту) КАК ЭтоИмпорт,
		|	ЗаказПоставщикуДок.Ссылка КАК ЗаказПоставщику,
		|	ПриобретениеТоваровУслуг.Ссылка КАК Поступление,
		|	ЗаявкаРДС.Ссылка КАК Заявка
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	РегистрСведений.ВыполнениеПроцессов.СрезПоследних(
		|			,
		|			ЭтапПроцесса В
		|					(ВЫБРАТЬ
		|						Т.Значение
		|					ИЗ
		|						Справочник.Л3_КонстантыНетиповыхАлгоритмов.Список КАК Т
		|					ГДЕ
		|						Т.Ссылка.Наименование = ""ЭтапСогласованияПлатежей"")
		|				И СостояниеЭтапа = ЗНАЧЕНИЕ(Перечисление.СостоянияЭтаповУниверсальныхПроцессов.ВОбработке)
		|				И ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)) КАК ВыполнениеПроцессовСрезПоследних
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭкземплярПроцесса КАК ЭкземплярПроцесса
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств.РасшифровкаПлатежа КАК ЗаявкаРДС
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ЗаказПоставщикуДок
		|				ПО ЗаявкаРДС.Ссылка.ДокументОснование = ЗаказПоставщикуДок.Ссылка
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК ПриобретениеТоваровУслуг
		|				ПО ЗаявкаРДС.Ссылка.ДокументОснование = ПриобретениеТоваровУслуг.Ссылка
		|			ПО ЭкземплярПроцесса.КлючевойОбъектПроцесса = ЗаявкаРДС.Ссылка
		|		ПО ВыполнениеПроцессовСрезПоследних.ДокументПроцесса = ЭкземплярПроцесса.Ссылка
		|ГДЕ
		|	НЕ ЕСТЬNULL(ЗаказПоставщикуДок.Ссылка, ПриобретениеТоваровУслуг.Ссылка) ЕСТЬ NULL
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Т.Приоритет КАК Приоритет,
		|	Т.Организация КАК Организация,
		|	Т.Подразделение КАК Подразделение,
		|	Т.ВидОперации КАК ВидОперации,
		|	Т.Контрагент КАК Контрагент,
		|	Т.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	Т.НомерДокументаЗаявкаНаОплату КАК НомерДокументаЗаявкаНаОплату,
		|	Т.ДатаДокументаЗаявкаНаОплату КАК ДатаДокументаЗаявкаНаОплату,
		|	Т.СуммаДокумента КАК СуммаДокумента,
		|	Т.ВалютаДокумента КАК ВалютаДокумента,
		|	Т.Сумма КАК Сумма,
		|	Т.ВалютаОплаты КАК ВалютаОплаты,
		|	Т.ПланируемаяДатаПлатежа КАК ПланируемаяДатаПлатежа,
		|	Т.КрайняяДатаПлатежа КАК КрайняяДатаПлатежа,
		|	Т.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|	Т.ЭтоПредоплата КАК ЭтоПредоплата,
		|	Т.ЭтоИмпорт КАК ЭтоИмпорт,
		|	Т.ЕстьЗаявка КАК ЕстьЗаявка,
		|	Т.ЗаказПоставщику КАК ЗаказПоставщику,
		|	Т.Поступление КАК Поступление,
		|	Т.Заявка КАК Заявка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТ.Приоритет КАК Приоритет,
		|		ВТ.Организация КАК Организация,
		|		ВТ.Подразделение КАК Подразделение,
		|		ВТ.ВидОперации КАК ВидОперации,
		|		ВТ.Контрагент КАК Контрагент,
		|		ВТ.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|		ВТ.НомерДокументаЗаявкаНаОплату КАК НомерДокументаЗаявкаНаОплату,
		|		ВТ.ДатаДокументаЗаявкаНаОплату КАК ДатаДокументаЗаявкаНаОплату,
		|		ВТ.СуммаДокумента КАК СуммаДокумента,
		|		ВТ.ВалютаДокумента КАК ВалютаДокумента,
		|		ВТ.Сумма КАК Сумма,
		|		ВТ.ВалютаОплаты КАК ВалютаОплаты,
		|		ВТ.ПланируемаяДатаПлатежа КАК ПланируемаяДатаПлатежа,
		|		ВТ.КрайняяДатаПлатежа КАК КрайняяДатаПлатежа,
		|		ВТ.ХозяйственнаяОперация КАК ХозяйственнаяОперация,
		|		ВТ.ЭтоПредоплата КАК ЭтоПредоплата,
		|		ВТ.ЭтоИмпорт КАК ЭтоИмпорт,
		|		ИСТИНА КАК ЕстьЗаявка,
		|		ВТ.ЗаказПоставщику КАК ЗаказПоставщику,
		|		ВТ.Поступление КАК Поступление,
		|		ВТ.Заявка КАК Заявка
		|	ИЗ
		|		ВТ КАК ВТ
		|	ГДЕ
		|		ВТ.КрайняяДатаПлатежа >= &КрайняяДатаПлатежа
		|		И (НЕ &ОграничениеПланируемойДатыУстановлено
		|				ИЛИ ВТ.ПланируемаяДатаПлатежа МЕЖДУ &ПланируемаяДатаНачало И ДОБАВИТЬКДАТЕ(&ПланируемаяДатаНачало, ДЕНЬ, &СдвигИнтервалаОплат))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ПредЗаказ.Приоритет,
		|		ПредЗаказ.Организация,
		|		ПредЗаказ.Подразделение,
		|		NULL,
		|		ПредЗаказ.Контрагент,
		|		ПредЗаказ.Договор,
		|		ПредЗаказ.НомерПоДаннымПоставщика,
		|		ПредЗаказ.ДатаПоДаннымПоставщика,
		|		ПредЗаказ.СуммаДокумента,
		|		ПредЗаказ.Валюта,
		|		NULL,
		|		NULL,
		|		NULL,
		|		NULL,
		|		ПредЗаказ.ХозяйственнаяОперация,
		|		ИСТИНА,
		|		ИСТИНА,
		|		ЛОЖЬ,
		|		ПредЗаказ.Ссылка,
		|		NULL,
		|		NULL
		|	ИЗ
		|		Документ.ллл_ПредварительныйЗаказЗаводуИзготовителю КАК ПредЗаказ
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ Т.ллл_КодРС КАК ллл_КодРС, МАКСИМУМ(Т.ллл_НомерВерсии) КАК ллл_НомерВерсии ИЗ Документ.ллл_ПредварительныйЗаказЗаводуИзготовителю КАК Т СГРУППИРОВАТЬ ПО ллл_КодРС) КАК НомераВерсий
		|			ПО ПредЗаказ.ллл_НомерВерсии = НомераВерсий.ллл_НомерВерсии
		|				И ПредЗаказ.ллл_КодРС = НомераВерсий.ллл_КодРС
		|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ЗаказПоставщикуДок
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВТ КАК ВТ
		|				ПО (ВТ.ЗаказПоставщику = ЗаказПоставщикуДок.Ссылка)
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаЗаказа
		|				ПО ЗаказПоставщикуДок.Ссылка = ЗаявкаЗаказа.ДокументОснование
		|				ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК ПриобретениеТоваровУслуг
		|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЗаявкаНаРасходованиеДенежныхСредств КАК ЗаявкаПТУ
		|					ПО ПриобретениеТоваровУслуг.Ссылка = ЗаявкаПТУ.ДокументОснование
		|				ПО ЗаказПоставщикуДок.Ссылка = ПриобретениеТоваровУслуг.ЗаказПоставщику
		|					И (ПриобретениеТоваровУслуг.Ссылка.Проведен)
		|			ПО (ЗаказПоставщикуДок.ДокументОснование = ПредЗаказ.Ссылка)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ллл_РеквизитыКазначействаДляПредварительныхЗаказов КАК ллл_РеквизитыКазначействаДляПредварительныхЗаказов
		|			ПО ПредЗаказ.ллл_КодРС = ллл_РеквизитыКазначействаДляПредварительныхЗаказов.КодРС
		|	ГДЕ
		|		ПредЗаказ.Дата >= &ДатаЗаказа
		|		И ПредЗаказ.Проведен
		|		И ПредЗаказ.ХозяйственнаяОперация = ЗНАЧЕНИЕ(Перечисление.ХозяйственныеОперации.ЗакупкаПоИмпорту)
		|		И ВТ.Заявка ЕСТЬ NULL
		|		И ЗаявкаЗаказа.Ссылка ЕСТЬ NULL
		|		И ЗаявкаПТУ.Ссылка ЕСТЬ NULL
		|		И ЕСТЬNULL(ллл_РеквизитыКазначействаДляПредварительныхЗаказов.ОбработаноРуководителемКазначейства, ЛОЖЬ) = ЛОЖЬ) КАК Т";
	#КонецОбласти
	ТекстОтбора = "";
	РазделительУсловий = "";
	Разделитель = "";
	ШаблонТекста = "Когда Т.ВалютаДокумента = &Вал_%1 Тогда Т.СуммаДокумента >= &Сумма_%1";
	Для Каждого ТекСтр Из Объект.ОтборСуммы Цикл
		Если ЗначениеЗаполнено(ТекСтр.Сумма) И ЗначениеЗаполнено(ТекСтр.Валюта) Тогда
			ТекстОтбора = ТекстОтбора + Разделитель + СтрШаблон(ШаблонТекста, ТекСтр.Валюта.Код);
			Запрос.УстановитьПараметр("Вал_" + ТекСтр.Валюта.Код, ТекСтр.Валюта);
			Запрос.УстановитьПараметр("Сумма_" + ТекСтр.Валюта.Код, ТекСтр.Сумма);
			Разделитель = Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	Если ТекстОтбора <> "" Тогда
		ТекстОтбора = "ВЫБОР " + ТекстОтбора + " ИНАЧЕ ИСТИНА КОНЕЦ";
		РазделительУсловий = Символы.ПС + " И ";
	КонецЕсли;
	Если Объект.ОтборКонтрагенты.Количество() > 0 Тогда
		ТекстОтбора = ТекстОтбора + РазделительУсловий + "Т.Контрагент В (&Контрагенты)";
		Запрос.УстановитьПараметр("Контрагенты", Объект.ОтборКонтрагенты.Выгрузить().ВыгрузитьКолонку("Контрагент"));
	КонецЕсли;
	Запрос.УстановитьПараметр("КрайняяДатаПлатежа", Объект.ОтборПоКрайнейДате);
	Запрос.УстановитьПараметр("ДатаЗаказа", Объект.ОтборПоДатеЗаказа);
	Запрос.УстановитьПараметр("ОграничениеПланируемойДатыУстановлено", ЗначениеЗаполнено(Объект.ОтборПоПланируемойДате));
	Запрос.УстановитьПараметр("ПланируемаяДатаНачало", Объект.ОтборПоПланируемойДате);
	Запрос.УстановитьПараметр("СдвигИнтервалаОплат", Объект.ОтборПоПланируемойДатеСдвиг);
	
	Если ТекстОтбора <> "" Тогда
		Запрос.Текст = Запрос.Текст + Символы.ПС + "ГДЕ" + Символы.ПС + ТекстОтбора;
	КонецЕсли;
	ТЗ = Запрос.Выполнить().Выгрузить();
	Объект.Платежи.Загрузить(ТЗ);
	УсловноеОформлениеСервер();
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УсловноеОформлениеСервер()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТЗ", Объект.Платежи.Выгрузить(, "НомерСтроки, ЭтоПредоплата, ЭтоИмпорт, ЕстьЗаявка"));
	Запрос.Текст =
		"ВЫБРАТЬ
		|	Т.НомерСтроки,
		|	Т.ЭтоПредоплата,
		|	Т.ЭтоИмпорт,
		|	Т.ЕстьЗаявка
		|ПОМЕСТИТЬ ВТ
		|ИЗ
		|	&ТЗ КАК Т
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА НЕ ВТ.ЕстьЗаявка
		|			ТОГДА 4
		|		КОГДА ВТ.ЭтоИмпорт
		|				И ВТ.ЭтоПредоплата
		|			ТОГДА 0
		|		КОГДА ВТ.ЭтоИмпорт
		|			ТОГДА 1
		|		КОГДА ВТ.ЭтоПредоплата
		|			ТОГДА 2
		|		ИНАЧЕ 3
		|	КОНЕЦ КАК РежимОтображения,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВТ.НомерСтроки) КАК Количество
		|ИЗ
		|	ВТ КАК ВТ
		|
		|СГРУППИРОВАТЬ ПО
		|	ВЫБОР
		|		КОГДА НЕ ВТ.ЕстьЗаявка
		|			ТОГДА 4
		|		КОГДА ВТ.ЭтоИмпорт
		|				И ВТ.ЭтоПредоплата
		|			ТОГДА 0
		|		КОГДА ВТ.ЭтоИмпорт
		|			ТОГДА 1
		|		КОГДА ВТ.ЭтоПредоплата
		|			ТОГДА 2
		|		ИНАЧЕ 3
		|	КОНЕЦ
		|";
	ТЗ = Запрос.Выполнить().Выгрузить();
	КоличествоОбщее = 0;
	Для Каждого КЗ Из Элементы.РежимОтображения.СписокВыбора Цикл
		Наименование = ?(КЗ.Значение = 0, "Импорт, предоплата",
											?(КЗ.Значение = 1, "Импорт, постоплата",
												?(КЗ.Значение = 2, "Российские, предоплата",
													?(КЗ.Значение = 3, "Российские, постоплата", "Импорт, предоплата (предварительные заказы)"))));
		СтрТЗ = ТЗ.Найти(КЗ.Значение, "РежимОтображения");
		Если СтрТЗ <> Неопределено Тогда
			Наименование = Наименование + " (" + СтрТЗ.Количество + ")";
			КоличествоОбщее = КоличествоОбщее + СтрТЗ.Количество;
		КонецЕсли;
		КЗ.Представление = Наименование;
	КонецЦикла;
	
	КоличествоОтборов = ?(ЗначениеЗаполнено(Объект.ОтборПоКрайнейДате), 1, 0);
	КоличествоОтборов = КоличествоОтборов + ?(Объект.ОтборСуммы.Количество() > 0, 1, 0);
	КоличествоОтборов = КоличествоОтборов + ?(Объект.ОтборКонтрагенты.Количество() > 0, 1, 0);
	Элементы.ГруппаОтборы.Заголовок = "Отборы" + ?(КоличествоОтборов > 0, " (" + КоличествоОтборов + ")", "");
	Элементы.ГруппаДокументы.Заголовок = "Документы" + ?(КоличествоОбщее > 0, " (" + КоличествоОбщее + ")", "");
	Элементы.НадписьПодсказкаКрайнейДаты.Видимость = ЗначениеЗаполнено(Объект.ОтборПоКрайнейДате);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьОтветИзмененияОтбора(Ответ, ДопПараметры) Экспорт
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Если ДопПараметры.Свойство("ИмяОтбораПоДате") Тогда
			Объект[ДопПараметры.ИмяОтбораПоДате] = ЭтаФорма["Пред" + ДопПараметры.ИмяОтбораПоДате];
		КонецЕсли;
	Иначе
		Объект.Платежи.Очистить();
		Если ДопПараметры.Свойство("ИмяОтбораПоДате") Тогда
			ЭтаФорма["Пред" + ДопПараметры.ИмяОтбораПоДате] = Объект[ДопПараметры.ИмяОтбораПоДате];
		ИначеЕсли ДопПараметры.Свойство("ИмяТаблицы") Тогда
			Если ДопПараметры.Свойство("Добавление") Тогда
				Если ДопПараметры.Добавление = Истина Тогда
					Элементы[ДопПараметры.ИмяТаблицы].ДобавитьСтроку();
				Иначе
					Элементы[ДопПараметры.ИмяТаблицы].ИзменитьСтроку();
				КонецЕсли;
			ИначеЕсли ДопПараметры.Свойство("Удаление") Тогда
				Объект[ДопПараметры.ИмяТаблицы].Удалить(Элементы[ДопПараметры.ИмяТаблицы].ТекущаяСтрока);
			КонецЕсли;
		КонецЕсли;
		УсловноеОформлениеСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеСоСтрокой(Отказ, ДопПараметры)
	
	Если Объект.Платежи.Количество() > 0 Тогда
		Отказ = Истина;
		Оповещение = Новый ОписаниеОповещения("ОбработатьОтветИзмененияОтбора", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещение, "Список платежей будет очищен. Продолжить?", РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
