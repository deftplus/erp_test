
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.ПодключаемыеКоманды") Тогда
		МодульПодключаемыеКомандыКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ПодключаемыеКомандыКлиент");
		МодульПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды


// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область ллл_Алгоритмы

&НаКлиенте
Процедура ПоставщикПриИзменении(Элемент)
	
	ПоставщикПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПоставщикПриИзмененииНаСервере()
	
	ПартнерыИКонтрагенты.ЗаполнитьКонтрагентаПартнераПоУмолчанию(Объект.Поставщик, Объект.Контрагент);
	
КонецПроцедуры

#Область ЗаказПоставщику
&НаКлиенте
Процедура ЗаказыПоставщикамЗаказПоставщикуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	//СтандартнаяОбработка = Ложь;
	//ТекущиеДанные = Элементы.ЗаказыПоставщикам.ТекущиеДанные;
	//
	//Если ТекущиеДанные <> Неопределено Тогда
	//	ОткрытьФормуВыбора();
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбора()
	
	//ПараметрыОтбора = Новый Структура;
	//ПараметрыОтбора.Вставить("Контрагент",        Объект.Контрагент);
	//ПараметрыОтбора.Вставить("Партнер",           Объект.Поставщик);
	//
	//ПараметрыФормы = Новый Структура();
	////ПараметрыФормы.Вставить("Отбор",              ПараметрыОтбора);
	//ПараметрыФормы.Вставить("РежимВыбора",        Истина);
	//ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);

	//ОповещениеЗакрытия  = Новый ОписаниеОповещения("ТоварыЗаказПоставщикуНачалоВыбораЗавершение", ЭтотОбъект);
	//
	//ОткрытьФорму("Документ.ЗаказПоставщику.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма, , , ,
	//	ОповещениеЗакрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЗаказПоставщикуНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	//Если ЗначениеЗаполнено(Результат) Тогда
	//	Если Элементы.ЗаказыПоставщикам.ТекущиеДанные <> Неопределено Тогда
	//		Элементы.ЗаказыПоставщикам.ТекущиеДанные.ЗаказПоставщику = Результат;
	//	КонецЕсли;
	//	ЗаполнитьСтроки(Результат);
	//КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтроки(ЗаказПоставщику = Неопределено)
	
	//Запрос = Новый Запрос;
	//Если ЗаказПоставщику = Неопределено Тогда
	//	Заказы = Объект.ЗаказыПоставщикам.Выгрузить(, "ЗаказПоставщику").ВыгрузитьКолонку("ЗаказПоставщику");
	//	Объект.ЗаказыПоставщикам.Очистить();
	//Иначе
	//	Если ТипЗнч(ЗаказПоставщику) = Тип("Массив") Тогда
	//		Заказы = ЗаказПоставщику;
	//	Иначе
	//		Заказы = Новый Массив;
	//		Заказы.Добавить(ЗаказПоставщику);
	//	КонецЕсли;
	//	Для Сч = -Объект.ЗаказыПоставщикам.Количество() По -1 Цикл
	//		Если Заказы.Найти(Объект.ЗаказыПоставщикам[-Сч-1].ЗаказПоставщику) <> Неопределено Тогда
	//			Объект.ЗаказыПоставщикам.Удалить(-Сч-1);
	//		КонецЕсли;
	//	КонецЦикла;
	//КонецЕсли;
	//Запрос.УстановитьПараметр("Заказы", Заказы);

	//Запрос.Текст =
	//	"ВЫБРАТЬ
	//	|	З.Ссылка КАК ЗаказПоставщику,
	//	|	З.СуммаДокумента КАК СуммаЗаказа,
	//	|	П.Ссылка КАК ПриобретениеТоваровУслуг,
	//	|	СУММА(П.СуммаСНДС) КАК СуммаПриобретения
	//	|ИЗ
	//	|	Документ.ЗаказПоставщику КАК З
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг.Товары КАК П
	//	|		ПО (П.ЗаказПоставщику = З.Ссылка
	//	|				И П.Ссылка.Проведен
	//	|				)
	//	|ГДЕ
	//	|	З.Ссылка В (&Заказы)
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	З.Ссылка,
	//	|	З.СуммаДокумента,
	//	|	П.Ссылка";
	//
	//Выборка = Запрос.Выполнить().Выбрать();
	//Пока Выборка.Следующий() Цикл
	//	ЗаполнитьЗначенияСвойств(Объект.ЗаказыПоставщикам.Добавить(), Выборка);
	//КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаказыПоставщикамЗаказПоставщикуПриИзмененииНаСервере()
	
	//Если Элементы.ЗаказыПоставщикам.ТекущиеДанные <> Неопределено Тогда
	//	ЗаполнитьСтроки(Элементы.ЗаказыПоставщикам.ТекущиеДанные.ЗаказПоставщику);
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПоставщикамЗаказПоставщикуПриИзменении(Элемент)
	
	//ЗаказыПоставщикамЗаказПоставщикуПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПоставщикамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	//ОткрытьФормуВыбора();
	ОткрытьФормуВыбораПредварительногоЗаказаВендору();
	
КонецПроцедуры

#КонецОбласти //ЗаказыПоставщику

&НаСервере
Процедура ЗаполнитьСвязанныеДокументыНаСервере()
	
	Заказы = Новый Массив;
	Для Каждого ТекСтр Из Объект.ЗаказыПоставщикам Цикл
		Если НЕ (ЗначениеЗаполнено(ТекСтр.ПриобретениеТоваровУслуг) ИЛИ ЗначениеЗаполнено(ТекСтр.ЗаказПоставщику))
			И Заказы.Найти(ТекСтр.ПредварительныйЗаказВендору) = Неопределено Тогда
			Заказы.Добавить(ТекСтр.ПредварительныйЗаказВендору);
		КонецЕсли;
	КонецЦикла;
	Если Заказы.Количество() > 0 Тогда
		ЗаполнитьСтрокиПредварительногоЗаказаВендору(Заказы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСвязанныеДокументы(Команда)
	
	ЗаполнитьСвязанныеДокументыНаСервере();
	
КонецПроцедуры

#Область ПредварительныйЗаказВендору

&НаСервере
Процедура ЗаполнитьСтрокиПредварительногоЗаказаВендору(ПредварительныйЗаказВендору = Неопределено)
	
	Запрос = Новый Запрос;
	Если ПредварительныйЗаказВендору = Неопределено Тогда
		Заказы = Объект.ЗаказыПоставщикам.Выгрузить(, "ПредварительныйЗаказВендору").ВыгрузитьКолонку("ПредварительныйЗаказВендору");
		Объект.ЗаказыПоставщикам.Очистить();
	Иначе
		Если ТипЗнч(ПредварительныйЗаказВендору) = Тип("Массив") Тогда
			Заказы = ПредварительныйЗаказВендору;
		Иначе
			Заказы = Новый Массив;
			Заказы.Добавить(ПредварительныйЗаказВендору);
		КонецЕсли;
		Для Сч = -Объект.ЗаказыПоставщикам.Количество() По -1 Цикл
			Если Заказы.Найти(Объект.ЗаказыПоставщикам[-Сч-1].ПредварительныйЗаказВендору) <> Неопределено Тогда
				Объект.ЗаказыПоставщикам.Удалить(-Сч-1);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Запрос.УстановитьПараметр("Заказы", Заказы);

	Запрос.Текст = "ВЫБРАТЬ
					|	ПЗВ.Ссылка КАК ПредварительныйЗаказВендору,
					|	ПЗВ.СуммаДокумента КАК СуммаПредварительногоЗаказа,
					|	З.Ссылка КАК ЗаказПоставщику,
					|	З.СуммаДокумента КАК СуммаЗаказа,
					|	П.Ссылка КАК ПриобретениеТоваровУслуг,
					|	П.СуммаДокумента КАК СуммаПриобретения
					|ИЗ
					|	Документ.ллл_ПредварительныйЗаказЗаводуИзготовителю КАК ПЗВ
					|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК З
					|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.ПриобретениеТоваровУслуг КАК П
					|				ПО (П.ЗаказПоставщику = З.Ссылка
					|					И П.Ссылка.Проведен)		
					|			ПО (З.ДокументОснование = ПЗВ.Ссылка
					|					И З.Ссылка.Проведен)		
					|ГДЕ
					|	ПЗВ.Ссылка В (&Заказы)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(Объект.ЗаказыПоставщикам.Добавить(), Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПредварительныйЗаказВендоруНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(Результат) Тогда
		Если Элементы.ЗаказыПоставщикам.ТекущиеДанные <> Неопределено Тогда
			Элементы.ЗаказыПоставщикам.ТекущиеДанные.ПредварительныйЗаказВендору = Результат;
		КонецЕсли;
		ЗаполнитьСтрокиПредварительногоЗаказаВендору(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыбораПредварительногоЗаказаВендору()
	
	//ПараметрыОтбора = Новый Структура;
	//ПараметрыОтбора.Вставить("Контрагент",        Объект.Контрагент);
	//ПараметрыОтбора.Вставить("Партнер",           Объект.Поставщик);
	
	ПараметрыФормы = Новый Структура();
	//ПараметрыФормы.Вставить("Отбор",              ПараметрыОтбора);
	ПараметрыФормы.Вставить("РежимВыбора",        Истина);
	ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);

	ОповещениеЗакрытия  = Новый ОписаниеОповещения("ТоварыПредварительныйЗаказВендоруНачалоВыбораЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.ллл_ПредварительныйЗаказЗаводуИзготовителю.Форма.ФормаВыбора", ПараметрыФормы, ЭтаФорма, , , ,
		ОповещениеЗакрытия, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПоставщикамПредварительныйЗаказВендоруНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ЗаказыПоставщикам.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ОткрытьФормуВыбораПредварительногоЗаказаВендору();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПоставщикамПредварительныйЗаказВендоруПриИзмененииНаСервере()
	
	Если Элементы.ЗаказыПоставщикам.ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьСтрокиПредварительногоЗаказаВендору(Элементы.ЗаказыПоставщикам.ТекущиеДанные.ПредварительныйЗаказВендору);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПоставщикамПредварительныйЗаказВендоруПриИзменении(Элемент)
	
	ЗаказыПоставщикамПредварительныйЗаказВендоруПриИзмененииНаСервере();
	
КонецПроцедуры

#КонецОбласти //ПредварительныйЗаказВендору

#КонецОбласти
